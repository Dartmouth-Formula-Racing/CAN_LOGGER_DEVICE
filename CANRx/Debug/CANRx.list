
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011470  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  08011670  08011670  00021670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ea4  08011ea4  00030168  2**0
                  CONTENTS
  4 .ARM          00000008  08011ea4  08011ea4  00021ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011eac  08011eac  00030168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011eac  08011eac  00021eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011eb0  08011eb0  00021eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08011eb4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000446c  20000168  0801201c  00030168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045d4  0801201c  000345d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022e0f  00000000  00000000  000301d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005193  00000000  00000000  00052fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c10  00000000  00000000  00058180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001567  00000000  00000000  00059d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e88b  00000000  00000000  0005b2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002663b  00000000  00000000  00089b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101f62  00000000  00000000  000b01bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007df4  00000000  00000000  001b2120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001b9f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000168 	.word	0x20000168
 800021c:	00000000 	.word	0x00000000
 8000220:	08011658 	.word	0x08011658

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000016c 	.word	0x2000016c
 800023c:	08011658 	.word	0x08011658

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b0cb      	sub	sp, #300	; 0x12c
 80005e0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 fa72 	bl	8001aca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 fa87 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fbdf 	bl	8000dac <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 fbb7 	bl	8000d60 <MX_DMA_Init>
  MX_CAN1_Init();
 80005f2:	f000 fae9 	bl	8000bc8 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 80005f6:	f000 fb5d 	bl	8000cb4 <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 fb81 	bl	8000d00 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005fe:	f00a f867 	bl	800a6d0 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000602:	f00f f905 	bl	800f810 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000606:	f000 fb15 	bl	8000c34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DS1307_Init(&hi2c1);
 800060a:	48bd      	ldr	r0, [pc, #756]	; (8000900 <main+0x324>)
 800060c:	f001 f96e 	bl	80018ec <DS1307_Init>
		RESET_STATE,
		POWER_OFF
	} state_t;

	//Starting state is PERIPHERAL_INIT
	state_t state = TURN_ON;
 8000610:	2300      	movs	r3, #0
 8000612:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint32_t byteswritten; /* File write/read counts */
#ifdef VERBOSE_DEBUGGING
	uint32_t buffer_emptyings = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t total_size = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 8000622:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000626:	2b0c      	cmp	r3, #12
 8000628:	f200 8235 	bhi.w	8000a96 <main+0x4ba>
 800062c:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <main+0x58>)
 800062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000632:	bf00      	nop
 8000634:	08000669 	.word	0x08000669
 8000638:	080006a1 	.word	0x080006a1
 800063c:	0800072d 	.word	0x0800072d
 8000640:	08000859 	.word	0x08000859
 8000644:	08000aab 	.word	0x08000aab
 8000648:	08000aab 	.word	0x08000aab
 800064c:	08000883 	.word	0x08000883
 8000650:	08000aab 	.word	0x08000aab
 8000654:	080008cf 	.word	0x080008cf
 8000658:	08000aab 	.word	0x08000aab
 800065c:	0800098d 	.word	0x0800098d
 8000660:	08000a1d 	.word	0x08000a1d
 8000664:	08000a81 	.word	0x08000a81
		 * Transition out:
		 * 	If power switch is set to on position -> PERIFPHERAL_INIT
		 * 	else (power switch is set to off) -> POWER_OFF
		 */
		case TURN_ON:
			MX_DMA_Init();
 8000668:	f000 fb7a 	bl	8000d60 <MX_DMA_Init>
			MX_SDMMC1_SD_Init();
 800066c:	f000 fb22 	bl	8000cb4 <MX_SDMMC1_SD_Init>
			MX_FATFS_Init();
 8000670:	f00a f82e 	bl	800a6d0 <MX_FATFS_Init>
			POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 8000674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000678:	48a2      	ldr	r0, [pc, #648]	; (8000904 <main+0x328>)
 800067a:	f002 ff0f 	bl	800349c <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4ba1      	ldr	r3, [pc, #644]	; (8000908 <main+0x32c>)
 8000684:	701a      	strb	r2, [r3, #0]
			state = POWER_STATE ? PERIPHERAL_INIT : POWER_OFF;
 8000686:	4ba0      	ldr	r3, [pc, #640]	; (8000908 <main+0x32c>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <main+0xb6>
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <main+0xb8>
 8000692:	230c      	movs	r3, #12
 8000694:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			NEW_LOG_FLAG = 0;
 8000698:	4b9c      	ldr	r3, [pc, #624]	; (800090c <main+0x330>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
			break;
 800069e:	e209      	b.n	8000ab4 <main+0x4d8>
		 * Transition out:
		 * 	Always -> CREATE_LOG_FILE
		 */
		case PERIPHERAL_INIT:
			// Reset both buffers
			data_buffer[0][0] = '\00';
 80006a0:	4b9b      	ldr	r3, [pc, #620]	; (8000910 <main+0x334>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
			data_buffer[1][0] = '\00';
 80006a6:	4b9a      	ldr	r3, [pc, #616]	; (8000910 <main+0x334>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	2200      	movs	r2, #0
 80006ae:	715a      	strb	r2, [r3, #5]
			buffer_fill_level[0] = 0;
 80006b0:	4b98      	ldr	r3, [pc, #608]	; (8000914 <main+0x338>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[1] = 0;
 80006b6:	4b97      	ldr	r3, [pc, #604]	; (8000914 <main+0x338>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	705a      	strb	r2, [r3, #1]
			current_buffer = 0;
 80006bc:	4b96      	ldr	r3, [pc, #600]	; (8000918 <main+0x33c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]

			// Turn Red LED on (Green turns off)
#ifdef VERBOSE_DEBUGGING
			printf("Initializing Peripherals...\r\n");
 80006c2:	4896      	ldr	r0, [pc, #600]	; (800091c <main+0x340>)
 80006c4:	f010 f842 	bl	801074c <puts>
#endif
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET); //Red LED
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	4894      	ldr	r0, [pc, #592]	; (8000920 <main+0x344>)
 80006d0:	f002 fefc 	bl	80034cc <HAL_GPIO_WritePin>

			// Initializing CAN
			if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80006d4:	4893      	ldr	r0, [pc, #588]	; (8000924 <main+0x348>)
 80006d6:	f001 fc61 	bl	8001f9c <HAL_CAN_Start>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d004      	beq.n	80006ea <main+0x10e>
#ifdef VERBOSE_DEBUGGING
				printf("CAN could not start.\r\n");
 80006e0:	4891      	ldr	r0, [pc, #580]	; (8000928 <main+0x34c>)
 80006e2:	f010 f833 	bl	801074c <puts>
#endif
				Error_Handler();
 80006e6:	f000 fd55 	bl	8001194 <Error_Handler>
			}
			if (CAN_Filter_Config() != HAL_OK) {
 80006ea:	f000 fcd9 	bl	80010a0 <CAN_Filter_Config>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d004      	beq.n	80006fe <main+0x122>
#ifdef VERBOSE_DEBUGGING
				printf("CAN filter failed to set.\r\n");
 80006f4:	488d      	ldr	r0, [pc, #564]	; (800092c <main+0x350>)
 80006f6:	f010 f829 	bl	801074c <puts>
#endif
				Error_Handler();
 80006fa:	f000 fd4b 	bl	8001194 <Error_Handler>
			}
#ifdef VERBOSE_DEBUGGING
			printf("CAN initialization succeeded...\r\n");
 80006fe:	488c      	ldr	r0, [pc, #560]	; (8000930 <main+0x354>)
 8000700:	f010 f824 	bl	801074c <puts>
#endif

			// Mount and Format SD Card
			if (f_mount(&SDFatFS, SDPath, 0) != FR_OK) {
 8000704:	2200      	movs	r2, #0
 8000706:	498b      	ldr	r1, [pc, #556]	; (8000934 <main+0x358>)
 8000708:	488b      	ldr	r0, [pc, #556]	; (8000938 <main+0x35c>)
 800070a:	f00e fb3d 	bl	800ed88 <f_mount>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d004      	beq.n	800071e <main+0x142>
#ifdef VERBOSE_DEBUGGING
				printf("Mounting failed!\r\n");
 8000714:	4889      	ldr	r0, [pc, #548]	; (800093c <main+0x360>)
 8000716:	f010 f819 	bl	801074c <puts>
#endif
				Error_Handler();
 800071a:	f000 fd3b 	bl	8001194 <Error_Handler>
			}
#ifdef VERBOSE_DEBUGGING
			printf("SD initialization succeeded...\r\n");
 800071e:	4888      	ldr	r0, [pc, #544]	; (8000940 <main+0x364>)
 8000720:	f010 f814 	bl	801074c <puts>
#endif

			state = CREATE_LOG_FILE;
 8000724:	2302      	movs	r3, #2
 8000726:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 800072a:	e1c3      	b.n	8000ab4 <main+0x4d8>
		 * Transition out:
		 * 	Always -> STANDBY
		 */
		case CREATE_LOG_FILE:
#ifdef VERBOSE_DEBUGGING
			printf("Creating new log file...\r\n");
 800072c:	4885      	ldr	r0, [pc, #532]	; (8000944 <main+0x368>)
 800072e:	f010 f80d 	bl	801074c <puts>
#endif

			// Update current date/time info
			curr_date = DS1307_GetDate();
 8000732:	f001 f94d 	bl	80019d0 <DS1307_GetDate>
 8000736:	4603      	mov	r3, r0
 8000738:	461a      	mov	r2, r3
 800073a:	4b83      	ldr	r3, [pc, #524]	; (8000948 <main+0x36c>)
 800073c:	701a      	strb	r2, [r3, #0]
			curr_month = DS1307_GetMonth();
 800073e:	f001 f953 	bl	80019e8 <DS1307_GetMonth>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b81      	ldr	r3, [pc, #516]	; (800094c <main+0x370>)
 8000748:	701a      	strb	r2, [r3, #0]
			curr_year = DS1307_GetYear();
 800074a:	f001 f959 	bl	8001a00 <DS1307_GetYear>
 800074e:	4603      	mov	r3, r0
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b7f      	ldr	r3, [pc, #508]	; (8000950 <main+0x374>)
 8000754:	701a      	strb	r2, [r3, #0]
			curr_hour = DS1307_GetHour();
 8000756:	f001 f975 	bl	8001a44 <DS1307_GetHour>
 800075a:	4603      	mov	r3, r0
 800075c:	461a      	mov	r2, r3
 800075e:	4b7d      	ldr	r3, [pc, #500]	; (8000954 <main+0x378>)
 8000760:	701a      	strb	r2, [r3, #0]
			curr_minute = DS1307_GetMinute();
 8000762:	f001 f97e 	bl	8001a62 <DS1307_GetMinute>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b7b      	ldr	r3, [pc, #492]	; (8000958 <main+0x37c>)
 800076c:	701a      	strb	r2, [r3, #0]
			curr_second = DS1307_GetSecond();
 800076e:	f001 f984 	bl	8001a7a <DS1307_GetSecond>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	4b79      	ldr	r3, [pc, #484]	; (800095c <main+0x380>)
 8000778:	701a      	strb	r2, [r3, #0]
			starting_tick = HAL_GetTick();
 800077a:	f001 f9f7 	bl	8001b6c <HAL_GetTick>
 800077e:	4603      	mov	r3, r0
 8000780:	4a77      	ldr	r2, [pc, #476]	; (8000960 <main+0x384>)
 8000782:	6013      	str	r3, [r2, #0]
#ifdef VERBOSE_DEBUGGING
			printf("%02d/%02d/20%02d %02d:%02d:%02d\r\n",
 8000784:	4b71      	ldr	r3, [pc, #452]	; (800094c <main+0x370>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	4b6f      	ldr	r3, [pc, #444]	; (8000948 <main+0x36c>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	461c      	mov	r4, r3
 8000790:	4b6f      	ldr	r3, [pc, #444]	; (8000950 <main+0x374>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461d      	mov	r5, r3
 8000796:	4b6f      	ldr	r3, [pc, #444]	; (8000954 <main+0x378>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	4b6e      	ldr	r3, [pc, #440]	; (8000958 <main+0x37c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	4b6e      	ldr	r3, [pc, #440]	; (800095c <main+0x380>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	9302      	str	r3, [sp, #8]
 80007a8:	9101      	str	r1, [sp, #4]
 80007aa:	9200      	str	r2, [sp, #0]
 80007ac:	462b      	mov	r3, r5
 80007ae:	4622      	mov	r2, r4
 80007b0:	4601      	mov	r1, r0
 80007b2:	486c      	ldr	r0, [pc, #432]	; (8000964 <main+0x388>)
 80007b4:	f00f ff64 	bl	8010680 <iprintf>
					curr_month, curr_date, curr_year, curr_hour, curr_minute, curr_second);
#endif

			// Creating new filename
			TCHAR filename[FILENAME_MAX_BYTES];
			snprintf(filename, FILENAME_MAX_BYTES, "/CAN_DATA/%02d-%02d-20%02d_(%02dh-%02dm-%02ds).log",
 80007b8:	4b64      	ldr	r3, [pc, #400]	; (800094c <main+0x370>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461e      	mov	r6, r3
 80007be:	4b62      	ldr	r3, [pc, #392]	; (8000948 <main+0x36c>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b62      	ldr	r3, [pc, #392]	; (8000950 <main+0x374>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	4b62      	ldr	r3, [pc, #392]	; (8000954 <main+0x378>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461c      	mov	r4, r3
 80007d0:	4b5e      	ldr	r3, [pc, #376]	; (800094c <main+0x370>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461d      	mov	r5, r3
 80007d6:	4b61      	ldr	r3, [pc, #388]	; (800095c <main+0x380>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4638      	mov	r0, r7
 80007dc:	9304      	str	r3, [sp, #16]
 80007de:	9503      	str	r5, [sp, #12]
 80007e0:	9402      	str	r4, [sp, #8]
 80007e2:	9101      	str	r1, [sp, #4]
 80007e4:	9200      	str	r2, [sp, #0]
 80007e6:	4633      	mov	r3, r6
 80007e8:	4a5f      	ldr	r2, [pc, #380]	; (8000968 <main+0x38c>)
 80007ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ee:	f00f fe45 	bl	801047c <sniprintf>
					curr_month, curr_date, curr_year,
					curr_hour, curr_month, curr_second);

#ifdef VERBOSE_DEBUGGING
			printf("New log name: %s ", filename);
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	485d      	ldr	r0, [pc, #372]	; (800096c <main+0x390>)
 80007f8:	f00f ff42 	bl	8010680 <iprintf>
#endif

			// Open file for writing (Create)
			if (f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE)
 80007fc:	463b      	mov	r3, r7
 80007fe:	220a      	movs	r2, #10
 8000800:	4619      	mov	r1, r3
 8000802:	485b      	ldr	r0, [pc, #364]	; (8000970 <main+0x394>)
 8000804:	f00e fb06 	bl	800ee14 <f_open>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d006      	beq.n	800081c <main+0x240>
					!= FR_OK) {
#ifdef VERBOSE_DEBUGGING
				printf("Failed to create new log file: %s ...!\r\n", filename);
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4858      	ldr	r0, [pc, #352]	; (8000974 <main+0x398>)
 8000814:	f00f ff34 	bl	8010680 <iprintf>
#endif
				Error_Handler();
 8000818:	f000 fcbc 	bl	8001194 <Error_Handler>
			}
#ifdef VERBOSE_DEBUGGING
			printf("Successfully created new log file: %s ...\r\n", filename);
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4855      	ldr	r0, [pc, #340]	; (8000978 <main+0x39c>)
 8000822:	f00f ff2d 	bl	8010680 <iprintf>
#endif

			// Starting CANRx interrupts
			if (HAL_CAN_ActivateNotification(&hcan1,
 8000826:	2102      	movs	r1, #2
 8000828:	483e      	ldr	r0, [pc, #248]	; (8000924 <main+0x348>)
 800082a:	f001 fd56 	bl	80022da <HAL_CAN_ActivateNotification>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d004      	beq.n	800083e <main+0x262>
					CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
				/* Notification Error */
#ifdef VERBOSE_DEBUGGING
				printf("Failed to activate CAN\r\n");
 8000834:	4851      	ldr	r0, [pc, #324]	; (800097c <main+0x3a0>)
 8000836:	f00f ff89 	bl	801074c <puts>
#endif
				Error_Handler();
 800083a:	f000 fcab 	bl	8001194 <Error_Handler>
			}

			// Turn Green LED on (turns Red LED off)
#ifdef VERBOSE_DEBUGGING
			printf("Ready to receive messages!\r\n");
 800083e:	4850      	ldr	r0, [pc, #320]	; (8000980 <main+0x3a4>)
 8000840:	f00f ff84 	bl	801074c <puts>
#endif
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_SET); // Successful LED
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800084a:	4835      	ldr	r0, [pc, #212]	; (8000920 <main+0x344>)
 800084c:	f002 fe3e 	bl	80034cc <HAL_GPIO_WritePin>

			state = STANDBY;
 8000850:	2303      	movs	r3, #3
 8000852:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 8000856:	e12d      	b.n	8000ab4 <main+0x4d8>
		 * 	If power switch is set to off position or the new file button is clicked -> RESET_STATE
		 * 	Else if the current buffer is filled -> SD_CARD_WRITE
		 * 	Else -> STANDBY
		 */
		case STANDBY:
			if (!POWER_STATE || NEW_LOG_FLAG) //Power switch is off or new log file
 8000858:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <main+0x32c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d003      	beq.n	8000868 <main+0x28c>
 8000860:	4b2a      	ldr	r3, [pc, #168]	; (800090c <main+0x330>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d003      	beq.n	8000870 <main+0x294>
				state = RESET_STATE;
 8000868:	230b      	movs	r3, #11
 800086a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			else if (is_buffer_filled) //Buffer is filled
				state = SD_CARD_WRITE;
			break;
 800086e:	e11e      	b.n	8000aae <main+0x4d2>
			else if (is_buffer_filled) //Buffer is filled
 8000870:	4b44      	ldr	r3, [pc, #272]	; (8000984 <main+0x3a8>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	f000 811a 	beq.w	8000aae <main+0x4d2>
				state = SD_CARD_WRITE;
 800087a:	2306      	movs	r3, #6
 800087c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 8000880:	e115      	b.n	8000aae <main+0x4d2>
		 *
		 * Transition out:
		 *	Always -> USB_TRANSMIT
		 */
		case SD_CARD_WRITE:
			if (f_write(&SDFile, data_buffer[!current_buffer], BUFFER_TOTAL_SIZE, (void*) &byteswritten) != FR_OK || byteswritten == 0) {
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <main+0x33c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	bf0c      	ite	eq
 800088a:	2301      	moveq	r3, #1
 800088c:	2300      	movne	r3, #0
 800088e:	b2db      	uxtb	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	4613      	mov	r3, r2
 8000894:	029b      	lsls	r3, r3, #10
 8000896:	4413      	add	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	4a1c      	ldr	r2, [pc, #112]	; (8000910 <main+0x334>)
 800089e:	1899      	adds	r1, r3, r2
 80008a0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80008a4:	f241 0204 	movw	r2, #4100	; 0x1004
 80008a8:	4831      	ldr	r0, [pc, #196]	; (8000970 <main+0x394>)
 80008aa:	f00e fc71 	bl	800f190 <f_write>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d103      	bne.n	80008bc <main+0x2e0>
 80008b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d104      	bne.n	80008c6 <main+0x2ea>
#ifdef VERBOSE_DEBUGGING
				printf("Writing Failed!\r\n");
 80008bc:	4832      	ldr	r0, [pc, #200]	; (8000988 <main+0x3ac>)
 80008be:	f00f ff45 	bl	801074c <puts>
#endif
				Error_Handler();
 80008c2:	f000 fc67 	bl	8001194 <Error_Handler>
			}

			state = USB_TRANSMIT;
 80008c6:	2308      	movs	r3, #8
 80008c8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 80008cc:	e0f2      	b.n	8000ab4 <main+0x4d8>
		 *
		 * Transition out:
		 *	Always -> RESET_BUFFER
		 */
		case USB_TRANSMIT:
			CDC_Transmit_FS(data_buffer[!current_buffer], BUFFER_TOTAL_SIZE);
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <main+0x33c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	bf0c      	ite	eq
 80008d6:	2301      	moveq	r3, #1
 80008d8:	2300      	movne	r3, #0
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	4613      	mov	r3, r2
 80008e0:	029b      	lsls	r3, r3, #10
 80008e2:	4413      	add	r3, r2
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	4a09      	ldr	r2, [pc, #36]	; (8000910 <main+0x334>)
 80008ea:	4413      	add	r3, r2
 80008ec:	f241 0104 	movw	r1, #4100	; 0x1004
 80008f0:	4618      	mov	r0, r3
 80008f2:	f00f f84b 	bl	800f98c <CDC_Transmit_FS>
			state = RESET_BUFFER;
 80008f6:	230a      	movs	r3, #10
 80008f8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 80008fc:	e0da      	b.n	8000ab4 <main+0x4d8>
 80008fe:	bf00      	nop
 8000900:	200001ac 	.word	0x200001ac
 8000904:	40021000 	.word	0x40021000
 8000908:	200003cc 	.word	0x200003cc
 800090c:	200003cd 	.word	0x200003cd
 8000910:	200003d0 	.word	0x200003d0
 8000914:	200023dc 	.word	0x200023dc
 8000918:	200023de 	.word	0x200023de
 800091c:	08011670 	.word	0x08011670
 8000920:	40021400 	.word	0x40021400
 8000924:	20000184 	.word	0x20000184
 8000928:	08011690 	.word	0x08011690
 800092c:	080116a8 	.word	0x080116a8
 8000930:	080116c4 	.word	0x080116c4
 8000934:	200023fc 	.word	0x200023fc
 8000938:	20002400 	.word	0x20002400
 800093c:	080116e8 	.word	0x080116e8
 8000940:	080116fc 	.word	0x080116fc
 8000944:	0801171c 	.word	0x0801171c
 8000948:	200023e0 	.word	0x200023e0
 800094c:	200023e1 	.word	0x200023e1
 8000950:	200023e2 	.word	0x200023e2
 8000954:	200023e3 	.word	0x200023e3
 8000958:	200023e4 	.word	0x200023e4
 800095c:	200023e5 	.word	0x200023e5
 8000960:	200023e8 	.word	0x200023e8
 8000964:	08011738 	.word	0x08011738
 8000968:	0801175c 	.word	0x0801175c
 800096c:	08011790 	.word	0x08011790
 8000970:	20002634 	.word	0x20002634
 8000974:	080117a4 	.word	0x080117a4
 8000978:	080117d0 	.word	0x080117d0
 800097c:	080117fc 	.word	0x080117fc
 8000980:	08011814 	.word	0x08011814
 8000984:	200023df 	.word	0x200023df
 8000988:	08011830 	.word	0x08011830
		 *	Always -> STANDBY
		 */
		case RESET_BUFFER:
			// bookkeeping information (just for debugging)
#ifdef VERBOSE_DEBUGGING
			buffer_emptyings++;
 800098c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000990:	3301      	adds	r3, #1
 8000992:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			total_size += byteswritten;
 8000996:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800099a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800099e:	4413      	add	r3, r2
 80009a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			printf("emptied buffer %d\r\n", !current_buffer);
 80009a4:	4b44      	ldr	r3, [pc, #272]	; (8000ab8 <main+0x4dc>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	bf0c      	ite	eq
 80009ac:	2301      	moveq	r3, #1
 80009ae:	2300      	movne	r3, #0
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	4841      	ldr	r0, [pc, #260]	; (8000abc <main+0x4e0>)
 80009b6:	f00f fe63 	bl	8010680 <iprintf>
			printf("buffers emptied: %ld\r\n", buffer_emptyings);
 80009ba:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80009be:	4840      	ldr	r0, [pc, #256]	; (8000ac0 <main+0x4e4>)
 80009c0:	f00f fe5e 	bl	8010680 <iprintf>
			printf("Wrote buffer sizeof: %ld\r\n", byteswritten);
 80009c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80009c8:	4619      	mov	r1, r3
 80009ca:	483e      	ldr	r0, [pc, #248]	; (8000ac4 <main+0x4e8>)
 80009cc:	f00f fe58 	bl	8010680 <iprintf>
#endif
			// Reset buffer that was just sent to SD and USB
			data_buffer[!current_buffer][0] = '\00';
 80009d0:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <main+0x4dc>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	bf0c      	ite	eq
 80009d8:	2301      	moveq	r3, #1
 80009da:	2300      	movne	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	461a      	mov	r2, r3
 80009e0:	4939      	ldr	r1, [pc, #228]	; (8000ac8 <main+0x4ec>)
 80009e2:	4613      	mov	r3, r2
 80009e4:	029b      	lsls	r3, r3, #10
 80009e6:	4413      	add	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	440b      	add	r3, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[!current_buffer] = 0;
 80009f2:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <main+0x4dc>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	bf0c      	ite	eq
 80009fa:	2301      	moveq	r3, #1
 80009fc:	2300      	movne	r3, #0
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b32      	ldr	r3, [pc, #200]	; (8000acc <main+0x4f0>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	5499      	strb	r1, [r3, r2]
			is_buffer_filled = 0;
 8000a08:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <main+0x4f4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]

			byteswritten = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

			state = STANDBY;
 8000a14:	2303      	movs	r3, #3
 8000a16:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 8000a1a:	e04b      	b.n	8000ab4 <main+0x4d8>
		 *	If power switch is in off position -> POWER_OFF
		 *	Else (button was pressed) -> TURN_ON
		 */
		case RESET_STATE:
			// Turn off CAN interrupt
			HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	482d      	ldr	r0, [pc, #180]	; (8000ad4 <main+0x4f8>)
 8000a20:	f001 fc81 	bl	8002326 <HAL_CAN_DeactivateNotification>
			HAL_CAN_Stop(&hcan1);
 8000a24:	482b      	ldr	r0, [pc, #172]	; (8000ad4 <main+0x4f8>)
 8000a26:	f001 fafd 	bl	8002024 <HAL_CAN_Stop>

			// Turn Red LED on (Green LED turns off)
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET); //Red LED
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a30:	4829      	ldr	r0, [pc, #164]	; (8000ad8 <main+0x4fc>)
 8000a32:	f002 fd4b 	bl	80034cc <HAL_GPIO_WritePin>

#ifdef VERBOSE_DEBUGGING
			// Debugging information
			printf("total sizeof: %ld\r\n", total_size);
 8000a36:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8000a3a:	4828      	ldr	r0, [pc, #160]	; (8000adc <main+0x500>)
 8000a3c:	f00f fe20 	bl	8010680 <iprintf>
			total_size = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			buffer_emptyings = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			printf("Unmounting SD Card!\r\n");
 8000a4c:	4824      	ldr	r0, [pc, #144]	; (8000ae0 <main+0x504>)
 8000a4e:	f00f fe7d 	bl	801074c <puts>
#endif
			f_close(&SDFile);
 8000a52:	4824      	ldr	r0, [pc, #144]	; (8000ae4 <main+0x508>)
 8000a54:	f00e fd8f 	bl	800f576 <f_close>
			f_mount(0, (TCHAR const*) NULL, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f00e f993 	bl	800ed88 <f_mount>

			if (!POWER_STATE) {
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <main+0x50c>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d106      	bne.n	8000a78 <main+0x49c>
				state = POWER_OFF;
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
#ifdef VERBOSE_DEBUGGING
				printf("Turning off!\r\n");
 8000a70:	481e      	ldr	r0, [pc, #120]	; (8000aec <main+0x510>)
 8000a72:	f00f fe6b 	bl	801074c <puts>
#endif
			}
			else {
				state = TURN_ON; // button was pressed
			}
			break;
 8000a76:	e01d      	b.n	8000ab4 <main+0x4d8>
				state = TURN_ON; // button was pressed
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 8000a7e:	e019      	b.n	8000ab4 <main+0x4d8>
		 * Transition out:
		 *	If power switch is in the on position -> TURN_ON
		 *	Else -> POWER_OFF
		 */
		case POWER_OFF:
			if (POWER_STATE) {
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <main+0x50c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d014      	beq.n	8000ab2 <main+0x4d6>
				state = TURN_ON;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

#ifdef VERBOSE_DEBUGGING
				printf("\r\nTurning back on!\r\n");
 8000a8e:	4818      	ldr	r0, [pc, #96]	; (8000af0 <main+0x514>)
 8000a90:	f00f fe5c 	bl	801074c <puts>
#endif
			}
			break;
 8000a94:	e00d      	b.n	8000ab2 <main+0x4d6>

		default:
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin,
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9c:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <main+0x4fc>)
 8000a9e:	f002 fd15 	bl	80034cc <HAL_GPIO_WritePin>
								GPIO_PIN_RESET); // Red LED

#ifdef VERBOSE_DEBUGGING
			printf("CAN logger in unknown state!\r\n");
 8000aa2:	4814      	ldr	r0, [pc, #80]	; (8000af4 <main+0x518>)
 8000aa4:	f00f fe52 	bl	801074c <puts>
#endif
			break;
 8000aa8:	e004      	b.n	8000ab4 <main+0x4d8>
			break;
 8000aaa:	bf00      	nop
 8000aac:	e5b9      	b.n	8000622 <main+0x46>
			break;
 8000aae:	bf00      	nop
 8000ab0:	e5b7      	b.n	8000622 <main+0x46>
			break;
 8000ab2:	bf00      	nop
		switch (state) {
 8000ab4:	e5b5      	b.n	8000622 <main+0x46>
 8000ab6:	bf00      	nop
 8000ab8:	200023de 	.word	0x200023de
 8000abc:	08011844 	.word	0x08011844
 8000ac0:	08011858 	.word	0x08011858
 8000ac4:	08011870 	.word	0x08011870
 8000ac8:	200003d0 	.word	0x200003d0
 8000acc:	200023dc 	.word	0x200023dc
 8000ad0:	200023df 	.word	0x200023df
 8000ad4:	20000184 	.word	0x20000184
 8000ad8:	40021400 	.word	0x40021400
 8000adc:	0801188c 	.word	0x0801188c
 8000ae0:	080118a0 	.word	0x080118a0
 8000ae4:	20002634 	.word	0x20002634
 8000ae8:	200003cc 	.word	0x200003cc
 8000aec:	080118b8 	.word	0x080118b8
 8000af0:	080118c8 	.word	0x080118c8
 8000af4:	080118dc 	.word	0x080118dc

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	; 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2234      	movs	r2, #52	; 0x34
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f00f fe37 	bl	801077a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <SystemClock_Config+0xc8>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a27      	ldr	r2, [pc, #156]	; (8000bc0 <SystemClock_Config+0xc8>)
 8000b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <SystemClock_Config+0xc8>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <SystemClock_Config+0xcc>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b3c:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <SystemClock_Config+0xcc>)
 8000b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <SystemClock_Config+0xcc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b64:	2304      	movs	r3, #4
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b68:	2360      	movs	r3, #96	; 0x60
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f004 fd19 	bl	80055b4 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b88:	f000 fb04 	bl	8001194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b90:	2302      	movs	r3, #2
 8000b92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f004 ffb1 	bl	8005b10 <HAL_RCC_ClockConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bb4:	f000 faee 	bl	8001194 <Error_Handler>
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3750      	adds	r7, #80	; 0x50
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40007000 	.word	0x40007000

08000bc8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000bce:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <MX_CAN1_Init+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000be6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000bea:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000bee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bf2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000c1a:	f000 ffd7 	bl	8001bcc <HAL_CAN_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000c24:	f000 fab6 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000184 	.word	0x20000184
 8000c30:	40006400 	.word	0x40006400

08000c34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c3a:	4a1c      	ldr	r2, [pc, #112]	; (8000cac <MX_I2C1_Init+0x78>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <MX_I2C1_Init+0x7c>)
 8000c42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c6e:	480e      	ldr	r0, [pc, #56]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c70:	f002 fc6a 	bl	8003548 <HAL_I2C_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c7a:	f000 fa8b 	bl	8001194 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c82:	f003 f947 	bl	8003f14 <HAL_I2CEx_ConfigAnalogFilter>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c8c:	f000 fa82 	bl	8001194 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c90:	2100      	movs	r1, #0
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c94:	f003 f989 	bl	8003faa <HAL_I2CEx_ConfigDigitalFilter>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c9e:	f000 fa79 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200001ac 	.word	0x200001ac
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	00506682 	.word	0x00506682

08000cb4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_SDMMC1_SD_Init+0x44>)
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <MX_SDMMC1_SD_Init+0x48>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_SDMMC1_SD_Init+0x44>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_SDMMC1_SD_Init+0x44>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_SDMMC1_SD_Init+0x44>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_SDMMC1_SD_Init+0x44>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_SDMMC1_SD_Init+0x44>)
 8000cd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cdc:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_SDMMC1_SD_Init+0x44>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_SDMMC1_SD_Init+0x44>)
 8000ce6:	f005 fd61 	bl	80067ac <HAL_SD_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_SDMMC1_SD_Init+0x40>
		Error_Handler();
 8000cf0:	f000 fa50 	bl	8001194 <Error_Handler>
	}
  /* USER CODE END SDMMC1_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000200 	.word	0x20000200
 8000cfc:	40012c00 	.word	0x40012c00

08000d00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <MX_USART3_UART_Init+0x5c>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d44:	f006 fe5a 	bl	80079fc <HAL_UART_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d4e:	f000 fa21 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000344 	.word	0x20000344
 8000d5c:	40004800 	.word	0x40004800

08000d60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <MX_DMA_Init+0x48>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <MX_DMA_Init+0x48>)
 8000d6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <MX_DMA_Init+0x48>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	203b      	movs	r0, #59	; 0x3b
 8000d84:	f001 fe01 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000d88:	203b      	movs	r0, #59	; 0x3b
 8000d8a:	f001 fe1a 	bl	80029c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	2045      	movs	r0, #69	; 0x45
 8000d94:	f001 fdf9 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000d98:	2045      	movs	r0, #69	; 0x45
 8000d9a:	f001 fe12 	bl	80029c2 <HAL_NVIC_EnableIRQ>

}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08e      	sub	sp, #56	; 0x38
 8000db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	4b73      	ldr	r3, [pc, #460]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a72      	ldr	r2, [pc, #456]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b70      	ldr	r3, [pc, #448]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	623b      	str	r3, [r7, #32]
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dda:	4b6d      	ldr	r3, [pc, #436]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a6c      	ldr	r2, [pc, #432]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b6a      	ldr	r3, [pc, #424]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dee:	61fb      	str	r3, [r7, #28]
 8000df0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000df2:	4b67      	ldr	r3, [pc, #412]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a66      	ldr	r2, [pc, #408]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000df8:	f043 0320 	orr.w	r3, r3, #32
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b64      	ldr	r3, [pc, #400]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0320 	and.w	r3, r3, #32
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e0a:	4b61      	ldr	r3, [pc, #388]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a60      	ldr	r2, [pc, #384]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e10:	f043 0310 	orr.w	r3, r3, #16
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b5e      	ldr	r3, [pc, #376]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0310 	and.w	r3, r3, #16
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e22:	4b5b      	ldr	r3, [pc, #364]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a5a      	ldr	r2, [pc, #360]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b58      	ldr	r3, [pc, #352]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e3a:	4b55      	ldr	r3, [pc, #340]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a54      	ldr	r2, [pc, #336]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b52      	ldr	r3, [pc, #328]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b4f      	ldr	r3, [pc, #316]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a4e      	ldr	r2, [pc, #312]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b49      	ldr	r3, [pc, #292]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a48      	ldr	r2, [pc, #288]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b46      	ldr	r3, [pc, #280]	; (8000f90 <MX_GPIO_Init+0x1e4>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e88:	4842      	ldr	r0, [pc, #264]	; (8000f94 <MX_GPIO_Init+0x1e8>)
 8000e8a:	f002 fb1f 	bl	80034cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2140      	movs	r1, #64	; 0x40
 8000e92:	4841      	ldr	r0, [pc, #260]	; (8000f98 <MX_GPIO_Init+0x1ec>)
 8000e94:	f002 fb1a 	bl	80034cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	483f      	ldr	r0, [pc, #252]	; (8000f9c <MX_GPIO_Init+0x1f0>)
 8000e9e:	f002 fb15 	bl	80034cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Error_LED_Pin */
  GPIO_InitStruct.Pin = Error_LED_Pin;
 8000ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Error_LED_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4836      	ldr	r0, [pc, #216]	; (8000f94 <MX_GPIO_Init+0x1e8>)
 8000ebc:	f002 f942 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pin : NewLogBtn_Pin */
  GPIO_InitStruct.Pin = NewLogBtn_Pin;
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NewLogBtn_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4832      	ldr	r0, [pc, #200]	; (8000fa0 <MX_GPIO_Init+0x1f4>)
 8000ed6:	f002 f935 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000eda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000eec:	2306      	movs	r3, #6
 8000eee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	482a      	ldr	r0, [pc, #168]	; (8000fa0 <MX_GPIO_Init+0x1f4>)
 8000ef8:	f002 f924 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PowerSwitch_Pin */
  GPIO_InitStruct.Pin = PowerSwitch_Pin;
 8000efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f02:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PowerSwitch_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	4823      	ldr	r0, [pc, #140]	; (8000fa0 <MX_GPIO_Init+0x1f4>)
 8000f14:	f002 f916 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin|USB_OverCurrent_Pin;
 8000f18:	2384      	movs	r3, #132	; 0x84
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481b      	ldr	r0, [pc, #108]	; (8000f98 <MX_GPIO_Init+0x1ec>)
 8000f2c:	f002 f90a 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f30:	2340      	movs	r3, #64	; 0x40
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	4814      	ldr	r0, [pc, #80]	; (8000f98 <MX_GPIO_Init+0x1ec>)
 8000f48:	f002 f8fc 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f60:	4619      	mov	r1, r3
 8000f62:	480e      	ldr	r0, [pc, #56]	; (8000f9c <MX_GPIO_Init+0x1f0>)
 8000f64:	f002 f8ee 	bl	8003144 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2017      	movs	r0, #23
 8000f6e:	f001 fd0c 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f72:	2017      	movs	r0, #23
 8000f74:	f001 fd25 	bl	80029c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2028      	movs	r0, #40	; 0x28
 8000f7e:	f001 fd04 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f82:	2028      	movs	r0, #40	; 0x28
 8000f84:	f001 fd1d 	bl	80029c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f88:	bf00      	nop
 8000f8a:	3738      	adds	r7, #56	; 0x38
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40021400 	.word	0x40021400
 8000f98:	40021800 	.word	0x40021800
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <Get_and_Append_CAN_Message_to_Buffer>:

/* USER CODE BEGIN 4 */
void Get_and_Append_CAN_Message_to_Buffer() {
 8000fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa6:	b09d      	sub	sp, #116	; 0x74
 8000fa8:	af06      	add	r7, sp, #24
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_msg[8];

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg)
 8000faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4833      	ldr	r0, [pc, #204]	; (8001084 <Get_and_Append_CAN_Message_to_Buffer+0xe0>)
 8000fb6:	f001 f87e 	bl	80020b6 <HAL_CAN_GetRxMessage>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d004      	beq.n	8000fca <Get_and_Append_CAN_Message_to_Buffer+0x26>
			!= HAL_OK){
#ifdef VERBOSE_DEBUGGING
		printf("Failed to get CAN message\r\n");
 8000fc0:	4831      	ldr	r0, [pc, #196]	; (8001088 <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 8000fc2:	f00f fbc3 	bl	801074c <puts>
#endif
		Error_Handler();
 8000fc6:	f000 f8e5 	bl	8001194 <Error_Handler>
	}

	uint16_t data1 = (rcvd_msg[0] << 8) + rcvd_msg[1];
 8000fca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	4413      	add	r3, r2
 8000fdc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint16_t data2 = (rcvd_msg[2] << 8) + rcvd_msg[3];
 8000fe0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t data3 = (rcvd_msg[4] << 8) + rcvd_msg[5];
 8000ff6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001004:	b29b      	uxth	r3, r3
 8001006:	4413      	add	r3, r2
 8001008:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t data4 = (rcvd_msg[6] << 8) + rcvd_msg[7];
 800100c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001010:	b29b      	uxth	r3, r3
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b29a      	uxth	r2, r3
 8001016:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800101a:	b29b      	uxth	r3, r3
 800101c:	4413      	add	r3, r2
 800101e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	char encodedData[ENCODED_CAN_SIZE_BYTES];

	// consider writing raw bytes
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8001022:	f000 fda3 	bl	8001b6c <HAL_GetTick>
 8001026:	4606      	mov	r6, r0
 8001028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800102e:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8001032:	f8b7 0052 	ldrh.w	r0, [r7, #82]	; 0x52
 8001036:	f8b7 4050 	ldrh.w	r4, [r7, #80]	; 0x50
 800103a:	463d      	mov	r5, r7
 800103c:	9404      	str	r4, [sp, #16]
 800103e:	9003      	str	r0, [sp, #12]
 8001040:	9102      	str	r1, [sp, #8]
 8001042:	9201      	str	r2, [sp, #4]
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	4633      	mov	r3, r6
 8001048:	4a10      	ldr	r2, [pc, #64]	; (800108c <Get_and_Append_CAN_Message_to_Buffer+0xe8>)
 800104a:	212a      	movs	r1, #42	; 0x2a
 800104c:	4628      	mov	r0, r5
 800104e:	f00f fa15 	bl	801047c <sniprintf>
			"(%010ld) X %08lX#%04X%04X%04X%04X\n", HAL_GetTick(),
			RxHeader.ExtId, data1, data2, data3, data4);

	strcat(current_buffer ? data_buffer[1] : data_buffer[0], encodedData);
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <Get_and_Append_CAN_Message_to_Buffer+0xba>
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 800105c:	e000      	b.n	8001060 <Get_and_Append_CAN_Message_to_Buffer+0xbc>
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <Get_and_Append_CAN_Message_to_Buffer+0xf4>)
 8001060:	463a      	mov	r2, r7
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f00f fb79 	bl	801075c <strcat>
	buffer_fill_level[current_buffer]++;
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 8001070:	5cd2      	ldrb	r2, [r2, r3]
 8001072:	3201      	adds	r2, #1
 8001074:	b2d1      	uxtb	r1, r2
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 8001078:	54d1      	strb	r1, [r2, r3]
}
 800107a:	bf00      	nop
 800107c:	375c      	adds	r7, #92	; 0x5c
 800107e:	46bd      	mov	sp, r7
 8001080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001082:	bf00      	nop
 8001084:	20000184 	.word	0x20000184
 8001088:	080118fc 	.word	0x080118fc
 800108c:	08011918 	.word	0x08011918
 8001090:	200023de 	.word	0x200023de
 8001094:	200013d5 	.word	0x200013d5
 8001098:	200003d0 	.word	0x200003d0
 800109c:	200023dc 	.word	0x200023dc

080010a0 <CAN_Filter_Config>:

HAL_StatusTypeDef CAN_Filter_Config(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 80010aa:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 80010b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 80010ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010bc:	0a1a      	lsrs	r2, r3, #8
 80010be:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010c2:	4013      	ands	r3, r2
 80010c4:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 80010c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c8:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 80010cc:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 80010ce:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	0a1a      	lsrs	r2, r3, #8
 80010d4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010d8:	4013      	ands	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 80010ec:	2301      	movs	r3, #1
 80010ee:	623b      	str	r3, [r7, #32]

	return HAL_CAN_ConfigFilter(&hcan1, &filter);
 80010f0:	463b      	mov	r3, r7
 80010f2:	4619      	mov	r1, r3
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <CAN_Filter_Config+0x64>)
 80010f6:	f000 fe65 	bl	8001dc4 <HAL_CAN_ConfigFilter>
 80010fa:	4603      	mov	r3, r0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3730      	adds	r7, #48	; 0x30
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000184 	.word	0x20000184

08001108 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	if (buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b64      	cmp	r3, #100	; 0x64
 8001116:	d108      	bne.n	800112a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
			&& buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER)
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800111a:	785b      	ldrb	r3, [r3, #1]
 800111c:	2b64      	cmp	r3, #100	; 0x64
 800111e:	d104      	bne.n	800112a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
#ifdef VERBOSE_DEBUGGING
		printf("Buffers are full\r\n");
 8001120:	4810      	ldr	r0, [pc, #64]	; (8001164 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8001122:	f00f fb13 	bl	801074c <puts>
#endif
		Error_Handler();
 8001126:	f000 f835 	bl	8001194 <Error_Handler>
	}

	Get_and_Append_CAN_Message_to_Buffer();
 800112a:	f7ff ff3b 	bl	8000fa4 <Get_and_Append_CAN_Message_to_Buffer>

	if (buffer_fill_level[current_buffer] == CAN_MESSAGES_TO_BUFFER) {
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8001136:	5c9b      	ldrb	r3, [r3, r2]
 8001138:	2b64      	cmp	r3, #100	; 0x64
 800113a:	d10c      	bne.n	8001156 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		is_buffer_filled = 1;
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
		current_buffer = !current_buffer;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf0c      	ite	eq
 800114a:	2301      	moveq	r3, #1
 800114c:	2300      	movne	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001154:	701a      	strb	r2, [r3, #0]
	}
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200023dc 	.word	0x200023dc
 8001164:	0801193c 	.word	0x0801193c
 8001168:	200023de 	.word	0x200023de
 800116c:	200023df 	.word	0x200023df

08001170 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8001178:	1d39      	adds	r1, r7, #4
 800117a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117e:	2201      	movs	r2, #1
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <__io_putchar+0x20>)
 8001182:	f006 fc89 	bl	8007a98 <HAL_UART_Transmit>

	return ch;
 8001186:	687b      	ldr	r3, [r7, #4]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000344 	.word	0x20000344

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
#ifdef VERBOSE_DEBUGGING
	printf("\r\nError Handler Reached\r\n");
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <Error_Handler+0x1c>)
 800119e:	f00f fad5 	bl	801074c <puts>
#endif
	HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <Error_Handler+0x20>)
 80011aa:	f002 f98f 	bl	80034cc <HAL_GPIO_WritePin>

	while (1) {
 80011ae:	e7fe      	b.n	80011ae <Error_Handler+0x1a>
 80011b0:	08011950 	.word	0x08011950
 80011b4:	40021400 	.word	0x40021400

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_MspInit+0x44>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_MspInit+0x44>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_MspInit+0x44>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_MspInit+0x44>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x44>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x44>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a1b      	ldr	r2, [pc, #108]	; (800128c <HAL_CAN_MspInit+0x8c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d12f      	bne.n	8001282 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_CAN_MspInit+0x90>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <HAL_CAN_MspInit+0x90>)
 8001228:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_CAN_MspInit+0x90>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_CAN_MspInit+0x90>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a14      	ldr	r2, [pc, #80]	; (8001290 <HAL_CAN_MspInit+0x90>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_CAN_MspInit+0x90>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001252:	2303      	movs	r3, #3
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001262:	2309      	movs	r3, #9
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4809      	ldr	r0, [pc, #36]	; (8001294 <HAL_CAN_MspInit+0x94>)
 800126e:	f001 ff69 	bl	8003144 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2014      	movs	r0, #20
 8001278:	f001 fb87 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800127c:	2014      	movs	r0, #20
 800127e:	f001 fba0 	bl	80029c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40006400 	.word	0x40006400
 8001290:	40023800 	.word	0x40023800
 8001294:	40020c00 	.word	0x40020c00

08001298 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0ae      	sub	sp, #184	; 0xb8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2290      	movs	r2, #144	; 0x90
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f00f fa5e 	bl	801077a <memset>
  if(hi2c->Instance==I2C1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a22      	ldr	r2, [pc, #136]	; (800134c <HAL_I2C_MspInit+0xb4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d13c      	bne.n	8001342 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012cc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4618      	mov	r0, r3
 80012d8:	f004 fe40 	bl	8005f5c <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012e2:	f7ff ff57 	bl	8001194 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <HAL_I2C_MspInit+0xb8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a19      	ldr	r2, [pc, #100]	; (8001350 <HAL_I2C_MspInit+0xb8>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_I2C_MspInit+0xb8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001306:	2312      	movs	r3, #18
 8001308:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001318:	2304      	movs	r3, #4
 800131a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001322:	4619      	mov	r1, r3
 8001324:	480b      	ldr	r0, [pc, #44]	; (8001354 <HAL_I2C_MspInit+0xbc>)
 8001326:	f001 ff0d 	bl	8003144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_I2C_MspInit+0xb8>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <HAL_I2C_MspInit+0xb8>)
 8001330:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_I2C_MspInit+0xb8>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	37b8      	adds	r7, #184	; 0xb8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40005400 	.word	0x40005400
 8001350:	40023800 	.word	0x40023800
 8001354:	40020400 	.word	0x40020400

08001358 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0ae      	sub	sp, #184	; 0xb8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2290      	movs	r2, #144	; 0x90
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f00f f9fe 	bl	801077a <memset>
  if(hsd->Instance==SDMMC1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a73      	ldr	r2, [pc, #460]	; (8001550 <HAL_SD_MspInit+0x1f8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	f040 80de 	bne.w	8001546 <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800138a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800138e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001390:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001394:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4618      	mov	r0, r3
 800139e:	f004 fddd 	bl	8005f5c <HAL_RCCEx_PeriphCLKConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80013a8:	f7ff fef4 	bl	8001194 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013ac:	4b69      	ldr	r3, [pc, #420]	; (8001554 <HAL_SD_MspInit+0x1fc>)
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	4a68      	ldr	r2, [pc, #416]	; (8001554 <HAL_SD_MspInit+0x1fc>)
 80013b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013b6:	6453      	str	r3, [r2, #68]	; 0x44
 80013b8:	4b66      	ldr	r3, [pc, #408]	; (8001554 <HAL_SD_MspInit+0x1fc>)
 80013ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c4:	4b63      	ldr	r3, [pc, #396]	; (8001554 <HAL_SD_MspInit+0x1fc>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	4a62      	ldr	r2, [pc, #392]	; (8001554 <HAL_SD_MspInit+0x1fc>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	6313      	str	r3, [r2, #48]	; 0x30
 80013d0:	4b60      	ldr	r3, [pc, #384]	; (8001554 <HAL_SD_MspInit+0x1fc>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013dc:	4b5d      	ldr	r3, [pc, #372]	; (8001554 <HAL_SD_MspInit+0x1fc>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	4a5c      	ldr	r2, [pc, #368]	; (8001554 <HAL_SD_MspInit+0x1fc>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6313      	str	r3, [r2, #48]	; 0x30
 80013e8:	4b5a      	ldr	r3, [pc, #360]	; (8001554 <HAL_SD_MspInit+0x1fc>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80013f4:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80013f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800140e:	230c      	movs	r3, #12
 8001410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001414:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001418:	4619      	mov	r1, r3
 800141a:	484f      	ldr	r0, [pc, #316]	; (8001558 <HAL_SD_MspInit+0x200>)
 800141c:	f001 fe92 	bl	8003144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001420:	2304      	movs	r3, #4
 8001422:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001438:	230c      	movs	r3, #12
 800143a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001442:	4619      	mov	r1, r3
 8001444:	4845      	ldr	r0, [pc, #276]	; (800155c <HAL_SD_MspInit+0x204>)
 8001446:	f001 fe7d 	bl	8003144 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800144a:	4b45      	ldr	r3, [pc, #276]	; (8001560 <HAL_SD_MspInit+0x208>)
 800144c:	4a45      	ldr	r2, [pc, #276]	; (8001564 <HAL_SD_MspInit+0x20c>)
 800144e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001450:	4b43      	ldr	r3, [pc, #268]	; (8001560 <HAL_SD_MspInit+0x208>)
 8001452:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001456:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001458:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_SD_MspInit+0x208>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800145e:	4b40      	ldr	r3, [pc, #256]	; (8001560 <HAL_SD_MspInit+0x208>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001464:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <HAL_SD_MspInit+0x208>)
 8001466:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800146a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800146c:	4b3c      	ldr	r3, [pc, #240]	; (8001560 <HAL_SD_MspInit+0x208>)
 800146e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001472:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001474:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <HAL_SD_MspInit+0x208>)
 8001476:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800147a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800147c:	4b38      	ldr	r3, [pc, #224]	; (8001560 <HAL_SD_MspInit+0x208>)
 800147e:	2220      	movs	r2, #32
 8001480:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001482:	4b37      	ldr	r3, [pc, #220]	; (8001560 <HAL_SD_MspInit+0x208>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <HAL_SD_MspInit+0x208>)
 800148a:	2204      	movs	r2, #4
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <HAL_SD_MspInit+0x208>)
 8001490:	2203      	movs	r2, #3
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <HAL_SD_MspInit+0x208>)
 8001496:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <HAL_SD_MspInit+0x208>)
 800149e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80014a4:	482e      	ldr	r0, [pc, #184]	; (8001560 <HAL_SD_MspInit+0x208>)
 80014a6:	f001 faa7 	bl	80029f8 <HAL_DMA_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 80014b0:	f7ff fe70 	bl	8001194 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a2a      	ldr	r2, [pc, #168]	; (8001560 <HAL_SD_MspInit+0x208>)
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40
 80014ba:	4a29      	ldr	r2, [pc, #164]	; (8001560 <HAL_SD_MspInit+0x208>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80014c0:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_SD_MspInit+0x210>)
 80014c2:	4a2a      	ldr	r2, [pc, #168]	; (800156c <HAL_SD_MspInit+0x214>)
 80014c4:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <HAL_SD_MspInit+0x210>)
 80014c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014cc:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_SD_MspInit+0x210>)
 80014d0:	2240      	movs	r2, #64	; 0x40
 80014d2:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <HAL_SD_MspInit+0x210>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_SD_MspInit+0x210>)
 80014dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_SD_MspInit+0x210>)
 80014e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_SD_MspInit+0x210>)
 80014ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014f0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_SD_MspInit+0x210>)
 80014f4:	2220      	movs	r2, #32
 80014f6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <HAL_SD_MspInit+0x210>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_SD_MspInit+0x210>)
 8001500:	2204      	movs	r2, #4
 8001502:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <HAL_SD_MspInit+0x210>)
 8001506:	2203      	movs	r2, #3
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_SD_MspInit+0x210>)
 800150c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_SD_MspInit+0x210>)
 8001514:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001518:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800151a:	4813      	ldr	r0, [pc, #76]	; (8001568 <HAL_SD_MspInit+0x210>)
 800151c:	f001 fa6c 	bl	80029f8 <HAL_DMA_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 8001526:	f7ff fe35 	bl	8001194 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_SD_MspInit+0x210>)
 800152e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <HAL_SD_MspInit+0x210>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2031      	movs	r0, #49	; 0x31
 800153c:	f001 fa25 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001540:	2031      	movs	r0, #49	; 0x31
 8001542:	f001 fa3e 	bl	80029c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	37b8      	adds	r7, #184	; 0xb8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40012c00 	.word	0x40012c00
 8001554:	40023800 	.word	0x40023800
 8001558:	40020800 	.word	0x40020800
 800155c:	40020c00 	.word	0x40020c00
 8001560:	20000284 	.word	0x20000284
 8001564:	40026458 	.word	0x40026458
 8001568:	200002e4 	.word	0x200002e4
 800156c:	400264a0 	.word	0x400264a0

08001570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b0ae      	sub	sp, #184	; 0xb8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2290      	movs	r2, #144	; 0x90
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f00f f8f2 	bl	801077a <memset>
  if(huart->Instance==USART3)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a22      	ldr	r2, [pc, #136]	; (8001624 <HAL_UART_MspInit+0xb4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d13c      	bne.n	800161a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4618      	mov	r0, r3
 80015b0:	f004 fcd4 	bl	8005f5c <HAL_RCCEx_PeriphCLKConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015ba:	f7ff fdeb 	bl	8001194 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <HAL_UART_MspInit+0xb8>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a19      	ldr	r2, [pc, #100]	; (8001628 <HAL_UART_MspInit+0xb8>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <HAL_UART_MspInit+0xb8>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <HAL_UART_MspInit+0xb8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <HAL_UART_MspInit+0xb8>)
 80015dc:	f043 0308 	orr.w	r3, r3, #8
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HAL_UART_MspInit+0xb8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001608:	2307      	movs	r3, #7
 800160a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <HAL_UART_MspInit+0xbc>)
 8001616:	f001 fd95 	bl	8003144 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	37b8      	adds	r7, #184	; 0xb8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40004800 	.word	0x40004800
 8001628:	40023800 	.word	0x40023800
 800162c:	40020c00 	.word	0x40020c00

08001630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <NMI_Handler+0x4>

08001636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <MemManage_Handler+0x4>

08001642 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <BusFault_Handler+0x4>

08001648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <UsageFault_Handler+0x4>

0800164e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167c:	f000 fa62 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <CAN1_RX0_IRQHandler+0x10>)
 800168a:	f000 fe73 	bl	8002374 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000184 	.word	0x20000184

08001698 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	NEW_LOG_FLAG = 1;
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <EXTI9_5_IRQHandler+0x14>)
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NewLogBtn_Pin);
 80016a2:	2080      	movs	r0, #128	; 0x80
 80016a4:	f001 ff2c 	bl	8003500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200003cd 	.word	0x200003cd

080016b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	// Debouncing?
//	HAL_Delay(100);
	POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 80016b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b8:	4806      	ldr	r0, [pc, #24]	; (80016d4 <EXTI15_10_IRQHandler+0x24>)
 80016ba:	f001 feef 	bl	800349c <HAL_GPIO_ReadPin>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <EXTI15_10_IRQHandler+0x28>)
 80016c4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PowerSwitch_Pin);
 80016c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016ca:	f001 ff19 	bl	8003500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	200003cc 	.word	0x200003cc

080016dc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <SDMMC1_IRQHandler+0x10>)
 80016e2:	f005 fae3 	bl	8006cac <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000200 	.word	0x20000200

080016f0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <DMA2_Stream3_IRQHandler+0x10>)
 80016f6:	f001 faaf 	bl	8002c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000284 	.word	0x20000284

08001704 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <OTG_FS_IRQHandler+0x10>)
 800170a:	f002 fde0 	bl	80042ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20003f80 	.word	0x20003f80

08001718 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <DMA2_Stream6_IRQHandler+0x10>)
 800171e:	f001 fa9b 	bl	8002c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200002e4 	.word	0x200002e4

0800172c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	e00a      	b.n	8001754 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800173e:	f3af 8000 	nop.w
 8001742:	4601      	mov	r1, r0
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	60ba      	str	r2, [r7, #8]
 800174a:	b2ca      	uxtb	r2, r1
 800174c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	dbf0      	blt.n	800173e <_read+0x12>
  }

  return len;
 800175c:	687b      	ldr	r3, [r7, #4]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	e009      	b.n	800178c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	60ba      	str	r2, [r7, #8]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fcf5 	bl	8001170 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbf1      	blt.n	8001778 <_write+0x12>
  }
  return len;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_close>:

int _close(int file)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c6:	605a      	str	r2, [r3, #4]
  return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <_isatty>:

int _isatty(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <_sbrk+0x5c>)
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <_sbrk+0x60>)
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <_sbrk+0x64>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <_sbrk+0x68>)
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	429a      	cmp	r2, r3
 8001836:	d207      	bcs.n	8001848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001838:	f00e ffb8 	bl	80107ac <__errno>
 800183c:	4603      	mov	r3, r0
 800183e:	220c      	movs	r2, #12
 8001840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001846:	e009      	b.n	800185c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <_sbrk+0x64>)
 8001858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20080000 	.word	0x20080000
 8001868:	00000400 	.word	0x00000400
 800186c:	200023ec 	.word	0x200023ec
 8001870:	200045d8 	.word	0x200045d8

08001874 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <SystemInit+0x20>)
 800187a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187e:	4a05      	ldr	r2, [pc, #20]	; (8001894 <SystemInit+0x20>)
 8001880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800189e:	490e      	ldr	r1, [pc, #56]	; (80018d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a0:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a4:	e002      	b.n	80018ac <LoopCopyDataInit>

080018a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018aa:	3304      	adds	r3, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b0:	d3f9      	bcc.n	80018a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018b4:	4c0b      	ldr	r4, [pc, #44]	; (80018e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b8:	e001      	b.n	80018be <LoopFillZerobss>

080018ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018bc:	3204      	adds	r2, #4

080018be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c0:	d3fb      	bcc.n	80018ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018c2:	f7ff ffd7 	bl	8001874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018c6:	f00e ff77 	bl	80107b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ca:	f7fe fe87 	bl	80005dc <main>
  bx  lr    
 80018ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80018d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d8:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80018dc:	08011eb4 	.word	0x08011eb4
  ldr r2, =_sbss
 80018e0:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80018e4:	200045d4 	.word	0x200045d4

080018e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <ADC_IRQHandler>
	...

080018ec <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <DS1307_Init+0x1c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f000 f806 	bl	800190c <DS1307_SetClockHalt>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200023f0 	.word	0x200023f0

0800190c <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <DS1307_SetClockHalt+0x14>
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	e000      	b.n	8001922 <DS1307_SetClockHalt+0x16>
 8001920:	2300      	movs	r3, #0
 8001922:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8001924:	2000      	movs	r0, #0
 8001926:	f000 f831 	bl	800198c <DS1307_GetRegByte>
 800192a:	4603      	mov	r3, r0
 800192c:	b25b      	sxtb	r3, r3
 800192e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001932:	b25a      	sxtb	r2, r3
 8001934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001938:	4313      	orrs	r3, r2
 800193a:	b25b      	sxtb	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	4619      	mov	r1, r3
 8001940:	2000      	movs	r0, #0
 8001942:	f000 f805 	bl	8001950 <DS1307_SetRegByte>
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af02      	add	r7, sp, #8
 8001956:	4603      	mov	r3, r0
 8001958:	460a      	mov	r2, r1
 800195a:	71fb      	strb	r3, [r7, #7]
 800195c:	4613      	mov	r3, r2
 800195e:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	733b      	strb	r3, [r7, #12]
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <DS1307_SetRegByte+0x38>)
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	f107 020c 	add.w	r2, r7, #12
 8001970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2302      	movs	r3, #2
 8001978:	21d0      	movs	r1, #208	; 0xd0
 800197a:	f001 fe75 	bl	8003668 <HAL_I2C_Master_Transmit>
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200023f0 	.word	0x200023f0

0800198c <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af02      	add	r7, sp, #8
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <DS1307_GetRegByte+0x40>)
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	1dfa      	adds	r2, r7, #7
 800199c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2301      	movs	r3, #1
 80019a4:	21d0      	movs	r1, #208	; 0xd0
 80019a6:	f001 fe5f 	bl	8003668 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <DS1307_GetRegByte+0x40>)
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	f107 020f 	add.w	r2, r7, #15
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2301      	movs	r3, #1
 80019ba:	21d0      	movs	r1, #208	; 0xd0
 80019bc:	f001 ff48 	bl	8003850 <HAL_I2C_Master_Receive>
	return val;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200023f0 	.word	0x200023f0

080019d0 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 80019d4:	2004      	movs	r0, #4
 80019d6:	f7ff ffd9 	bl	800198c <DS1307_GetRegByte>
 80019da:	4603      	mov	r3, r0
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 f85b 	bl	8001a98 <DS1307_DecodeBCD>
 80019e2:	4603      	mov	r3, r0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 80019ec:	2005      	movs	r0, #5
 80019ee:	f7ff ffcd 	bl	800198c <DS1307_GetRegByte>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 f84f 	bl	8001a98 <DS1307_DecodeBCD>
 80019fa:	4603      	mov	r3, r0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8001a06:	2010      	movs	r0, #16
 8001a08:	f7ff ffc0 	bl	800198c <DS1307_GetRegByte>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	0092      	lsls	r2, r2, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	461a      	mov	r2, r3
 8001a18:	0091      	lsls	r1, r2, #2
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8001a24:	2006      	movs	r0, #6
 8001a26:	f7ff ffb1 	bl	800198c <DS1307_GetRegByte>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 f833 	bl	8001a98 <DS1307_DecodeBCD>
 8001a32:	4603      	mov	r3, r0
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	4413      	add	r3, r2
 8001a3a:	b29b      	uxth	r3, r3
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f7ff ff9f 	bl	800198c <DS1307_GetRegByte>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f81e 	bl	8001a98 <DS1307_DecodeBCD>
 8001a5c:	4603      	mov	r3, r0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8001a66:	2001      	movs	r0, #1
 8001a68:	f7ff ff90 	bl	800198c <DS1307_GetRegByte>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f812 	bl	8001a98 <DS1307_DecodeBCD>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff ff84 	bl	800198c <DS1307_GetRegByte>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f000 f803 	bl	8001a98 <DS1307_DecodeBCD>
 8001a92:	4603      	mov	r3, r0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	0092      	lsls	r2, r2, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	4413      	add	r3, r2
 8001abc:	b2db      	uxtb	r3, r3
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ace:	2003      	movs	r0, #3
 8001ad0:	f000 ff50 	bl	8002974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f000 f805 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ada:	f7ff fb6d 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_InitTick+0x54>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x58>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 ff6b 	bl	80029de <HAL_SYSTICK_Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00e      	b.n	8001b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d80a      	bhi.n	8001b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b20:	f000 ff33 	bl	800298a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_InitTick+0x5c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_IncTick+0x20>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x24>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_IncTick+0x24>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000008 	.word	0x20000008
 8001b68:	200023f4 	.word	0x200023f4

08001b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GetTick+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	200023f4 	.word	0x200023f4

08001b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff ffee 	bl	8001b6c <HAL_GetTick>
 8001b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b9c:	d005      	beq.n	8001baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_Delay+0x44>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001baa:	bf00      	nop
 8001bac:	f7ff ffde 	bl	8001b6c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_Delay+0x28>
  {
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000008 	.word	0x20000008

08001bcc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0ed      	b.n	8001dba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fb08 	bl	8001200 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c00:	f7ff ffb4 	bl	8001b6c <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c06:	e012      	b.n	8001c2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c08:	f7ff ffb0 	bl	8001b6c <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b0a      	cmp	r3, #10
 8001c14:	d90b      	bls.n	8001c2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2205      	movs	r2, #5
 8001c26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0c5      	b.n	8001dba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0e5      	beq.n	8001c08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0202 	bic.w	r2, r2, #2
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c4c:	f7ff ff8e 	bl	8001b6c <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c52:	e012      	b.n	8001c7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c54:	f7ff ff8a 	bl	8001b6c <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b0a      	cmp	r3, #10
 8001c60:	d90b      	bls.n	8001c7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2205      	movs	r2, #5
 8001c72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e09f      	b.n	8001dba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1e5      	bne.n	8001c54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7e1b      	ldrb	r3, [r3, #24]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d108      	bne.n	8001ca2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e007      	b.n	8001cb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	7e5b      	ldrb	r3, [r3, #25]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d108      	bne.n	8001ccc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e007      	b.n	8001cdc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7e9b      	ldrb	r3, [r3, #26]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d108      	bne.n	8001cf6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0220 	orr.w	r2, r2, #32
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	e007      	b.n	8001d06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0220 	bic.w	r2, r2, #32
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7edb      	ldrb	r3, [r3, #27]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d108      	bne.n	8001d20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0210 	bic.w	r2, r2, #16
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e007      	b.n	8001d30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0210 	orr.w	r2, r2, #16
 8001d2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7f1b      	ldrb	r3, [r3, #28]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d108      	bne.n	8001d4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0208 	orr.w	r2, r2, #8
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e007      	b.n	8001d5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0208 	bic.w	r2, r2, #8
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7f5b      	ldrb	r3, [r3, #29]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d108      	bne.n	8001d74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0204 	orr.w	r2, r2, #4
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	e007      	b.n	8001d84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0204 	bic.w	r2, r2, #4
 8001d82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	ea42 0103 	orr.w	r1, r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	1e5a      	subs	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dda:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ddc:	7cfb      	ldrb	r3, [r7, #19]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d003      	beq.n	8001dea <HAL_CAN_ConfigFilter+0x26>
 8001de2:	7cfb      	ldrb	r3, [r7, #19]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	f040 80c7 	bne.w	8001f78 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a69      	ldr	r2, [pc, #420]	; (8001f94 <HAL_CAN_ConfigFilter+0x1d0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d001      	beq.n	8001df8 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001df4:	4b68      	ldr	r3, [pc, #416]	; (8001f98 <HAL_CAN_ConfigFilter+0x1d4>)
 8001df6:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	4a63      	ldr	r2, [pc, #396]	; (8001f98 <HAL_CAN_ConfigFilter+0x1d4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d111      	bne.n	8001e34 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e16:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	401a      	ands	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d123      	bne.n	8001ea6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	401a      	ands	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3248      	adds	r2, #72	; 0x48
 8001e86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e9c:	6979      	ldr	r1, [r7, #20]
 8001e9e:	3348      	adds	r3, #72	; 0x48
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	440b      	add	r3, r1
 8001ea4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d122      	bne.n	8001ef4 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ece:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3248      	adds	r2, #72	; 0x48
 8001ed4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ee8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eea:	6979      	ldr	r1, [r7, #20]
 8001eec:	3348      	adds	r3, #72	; 0x48
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	440b      	add	r3, r1
 8001ef2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f0e:	e007      	b.n	8001f20 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d109      	bne.n	8001f3c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001f3a:	e007      	b.n	8001f4c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d107      	bne.n	8001f64 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f6a:	f023 0201 	bic.w	r2, r3, #1
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	e006      	b.n	8001f86 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
  }
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40003400 	.word	0x40003400
 8001f98:	40006400 	.word	0x40006400

08001f9c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d12e      	bne.n	800200e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fc8:	f7ff fdd0 	bl	8001b6c <HAL_GetTick>
 8001fcc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fce:	e012      	b.n	8001ff6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fd0:	f7ff fdcc 	bl	8001b6c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b0a      	cmp	r3, #10
 8001fdc:	d90b      	bls.n	8001ff6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2205      	movs	r2, #5
 8001fee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e012      	b.n	800201c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1e5      	bne.n	8001fd0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e006      	b.n	800201c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
  }
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d133      	bne.n	80020a0 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002048:	f7ff fd90 	bl	8001b6c <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800204e:	e012      	b.n	8002076 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002050:	f7ff fd8c 	bl	8001b6c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b0a      	cmp	r3, #10
 800205c:	d90b      	bls.n	8002076 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2205      	movs	r2, #5
 800206e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e01b      	b.n	80020ae <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0e5      	beq.n	8002050 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0202 	bic.w	r2, r2, #2
 8002092:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	e006      	b.n	80020ae <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80020b6:	b480      	push	{r7}
 80020b8:	b087      	sub	sp, #28
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d003      	beq.n	80020da <HAL_CAN_GetRxMessage+0x24>
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	f040 80f3 	bne.w	80022c0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10e      	bne.n	80020fe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d116      	bne.n	800211c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e0e7      	b.n	80022ce <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d107      	bne.n	800211c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0d8      	b.n	80022ce <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	331b      	adds	r3, #27
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	4413      	add	r3, r2
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0204 	and.w	r2, r3, #4
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	331b      	adds	r3, #27
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	4413      	add	r3, r2
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0d5b      	lsrs	r3, r3, #21
 800214a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e00b      	b.n	800216c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	331b      	adds	r3, #27
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	4413      	add	r3, r2
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	08db      	lsrs	r3, r3, #3
 8002164:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	331b      	adds	r3, #27
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	4413      	add	r3, r2
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0202 	and.w	r2, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	331b      	adds	r3, #27
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	4413      	add	r3, r2
 800218e:	3304      	adds	r3, #4
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 020f 	and.w	r2, r3, #15
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	331b      	adds	r3, #27
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	4413      	add	r3, r2
 80021a6:	3304      	adds	r3, #4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	331b      	adds	r3, #27
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	4413      	add	r3, r2
 80021be:	3304      	adds	r3, #4
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	0c1b      	lsrs	r3, r3, #16
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0a1a      	lsrs	r2, r3, #8
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	4413      	add	r3, r2
 8002204:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0c1a      	lsrs	r2, r3, #16
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	3302      	adds	r3, #2
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	4413      	add	r3, r2
 800221e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	0e1a      	lsrs	r2, r3, #24
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	3303      	adds	r3, #3
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	4413      	add	r3, r2
 8002238:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	3304      	adds	r3, #4
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	4413      	add	r3, r2
 8002250:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	0a1a      	lsrs	r2, r3, #8
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	3305      	adds	r3, #5
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	4413      	add	r3, r2
 800226a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0c1a      	lsrs	r2, r3, #16
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	3306      	adds	r3, #6
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	4413      	add	r3, r2
 8002284:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	0e1a      	lsrs	r2, r3, #24
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	3307      	adds	r3, #7
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d108      	bne.n	80022ac <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 0220 	orr.w	r2, r2, #32
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	e007      	b.n	80022bc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0220 	orr.w	r2, r2, #32
 80022ba:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	e006      	b.n	80022ce <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	371c      	adds	r7, #28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d002      	beq.n	80022f8 <HAL_CAN_ActivateNotification+0x1e>
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d109      	bne.n	800230c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6959      	ldr	r1, [r3, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	e006      	b.n	800231a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
  }
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8002326:	b480      	push	{r7}
 8002328:	b085      	sub	sp, #20
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002336:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d002      	beq.n	8002344 <HAL_CAN_DeactivateNotification+0x1e>
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d10a      	bne.n	800235a <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6959      	ldr	r1, [r3, #20]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	43da      	mvns	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	400a      	ands	r2, r1
 8002354:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e006      	b.n	8002368 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
  }
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d07c      	beq.n	80024b4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d023      	beq.n	800240c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2201      	movs	r2, #1
 80023ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f983 	bl	80026e2 <HAL_CAN_TxMailbox0CompleteCallback>
 80023dc:	e016      	b.n	800240c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d004      	beq.n	80023f2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
 80023f0:	e00c      	b.n	800240c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d004      	beq.n	8002406 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
 8002404:	e002      	b.n	800240c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f989 	bl	800271e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d024      	beq.n	8002460 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800241e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f963 	bl	80026f6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002430:	e016      	b.n	8002460 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d004      	beq.n	8002446 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
 8002444:	e00c      	b.n	8002460 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800244c:	2b00      	cmp	r3, #0
 800244e:	d004      	beq.n	800245a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
 8002458:	e002      	b.n	8002460 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f969 	bl	8002732 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d024      	beq.n	80024b4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002472:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f943 	bl	800270a <HAL_CAN_TxMailbox2CompleteCallback>
 8002484:	e016      	b.n	80024b4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d004      	beq.n	800249a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
 8002498:	e00c      	b.n	80024b4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d004      	beq.n	80024ae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
 80024ac:	e002      	b.n	80024b4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f949 	bl	8002746 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00c      	beq.n	80024d8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2210      	movs	r2, #16
 80024d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2208      	movs	r2, #8
 80024f2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f930 	bl	800275a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d009      	beq.n	8002518 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe fdf8 	bl	8001108 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00c      	beq.n	800253c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002532:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2210      	movs	r2, #16
 800253a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00b      	beq.n	800255e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d006      	beq.n	800255e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2208      	movs	r2, #8
 8002556:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f912 	bl	8002782 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b00      	cmp	r3, #0
 8002566:	d009      	beq.n	800257c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f8f9 	bl	800276e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b00      	cmp	r3, #0
 800258e:	d006      	beq.n	800259e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2210      	movs	r2, #16
 8002596:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f8fc 	bl	8002796 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00b      	beq.n	80025c0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2208      	movs	r2, #8
 80025b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f8f5 	bl	80027aa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d07b      	beq.n	80026c2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d072      	beq.n	80026ba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	f043 0302 	orr.w	r3, r3, #2
 800260a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002612:	2b00      	cmp	r3, #0
 8002614:	d008      	beq.n	8002628 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262e:	2b00      	cmp	r3, #0
 8002630:	d043      	beq.n	80026ba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002638:	2b00      	cmp	r3, #0
 800263a:	d03e      	beq.n	80026ba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002642:	2b60      	cmp	r3, #96	; 0x60
 8002644:	d02b      	beq.n	800269e <HAL_CAN_IRQHandler+0x32a>
 8002646:	2b60      	cmp	r3, #96	; 0x60
 8002648:	d82e      	bhi.n	80026a8 <HAL_CAN_IRQHandler+0x334>
 800264a:	2b50      	cmp	r3, #80	; 0x50
 800264c:	d022      	beq.n	8002694 <HAL_CAN_IRQHandler+0x320>
 800264e:	2b50      	cmp	r3, #80	; 0x50
 8002650:	d82a      	bhi.n	80026a8 <HAL_CAN_IRQHandler+0x334>
 8002652:	2b40      	cmp	r3, #64	; 0x40
 8002654:	d019      	beq.n	800268a <HAL_CAN_IRQHandler+0x316>
 8002656:	2b40      	cmp	r3, #64	; 0x40
 8002658:	d826      	bhi.n	80026a8 <HAL_CAN_IRQHandler+0x334>
 800265a:	2b30      	cmp	r3, #48	; 0x30
 800265c:	d010      	beq.n	8002680 <HAL_CAN_IRQHandler+0x30c>
 800265e:	2b30      	cmp	r3, #48	; 0x30
 8002660:	d822      	bhi.n	80026a8 <HAL_CAN_IRQHandler+0x334>
 8002662:	2b10      	cmp	r3, #16
 8002664:	d002      	beq.n	800266c <HAL_CAN_IRQHandler+0x2f8>
 8002666:	2b20      	cmp	r3, #32
 8002668:	d005      	beq.n	8002676 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800266a:	e01d      	b.n	80026a8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	f043 0308 	orr.w	r3, r3, #8
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002674:	e019      	b.n	80026aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	f043 0310 	orr.w	r3, r3, #16
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800267e:	e014      	b.n	80026aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	f043 0320 	orr.w	r3, r3, #32
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002688:	e00f      	b.n	80026aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002692:	e00a      	b.n	80026aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800269c:	e005      	b.n	80026aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026a6:	e000      	b.n	80026aa <HAL_CAN_IRQHandler+0x336>
            break;
 80026a8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699a      	ldr	r2, [r3, #24]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026b8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2204      	movs	r2, #4
 80026c0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f872 	bl	80027be <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80026da:	bf00      	nop
 80026dc:	3728      	adds	r7, #40	; 0x28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <__NVIC_SetPriorityGrouping+0x40>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f0:	4013      	ands	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002802:	4a04      	ldr	r2, [pc, #16]	; (8002814 <__NVIC_SetPriorityGrouping+0x40>)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	60d3      	str	r3, [r2, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00
 8002818:	05fa0000 	.word	0x05fa0000

0800281c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <__NVIC_GetPriorityGrouping+0x18>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	f003 0307 	and.w	r3, r3, #7
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	2b00      	cmp	r3, #0
 8002848:	db0b      	blt.n	8002862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	f003 021f 	and.w	r2, r3, #31
 8002850:	4907      	ldr	r1, [pc, #28]	; (8002870 <__NVIC_EnableIRQ+0x38>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2001      	movs	r0, #1
 800285a:	fa00 f202 	lsl.w	r2, r0, r2
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000e100 	.word	0xe000e100

08002874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	db0a      	blt.n	800289e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	490c      	ldr	r1, [pc, #48]	; (80028c0 <__NVIC_SetPriority+0x4c>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	0112      	lsls	r2, r2, #4
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	440b      	add	r3, r1
 8002898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800289c:	e00a      	b.n	80028b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4908      	ldr	r1, [pc, #32]	; (80028c4 <__NVIC_SetPriority+0x50>)
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3b04      	subs	r3, #4
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	440b      	add	r3, r1
 80028b2:	761a      	strb	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000e100 	.word	0xe000e100
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f1c3 0307 	rsb	r3, r3, #7
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	bf28      	it	cs
 80028e6:	2304      	movcs	r3, #4
 80028e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d902      	bls.n	80028f8 <NVIC_EncodePriority+0x30>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3b03      	subs	r3, #3
 80028f6:	e000      	b.n	80028fa <NVIC_EncodePriority+0x32>
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	401a      	ands	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43d9      	mvns	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	4313      	orrs	r3, r2
         );
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	; 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002940:	d301      	bcc.n	8002946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002942:	2301      	movs	r3, #1
 8002944:	e00f      	b.n	8002966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <SysTick_Config+0x40>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294e:	210f      	movs	r1, #15
 8002950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002954:	f7ff ff8e 	bl	8002874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <SysTick_Config+0x40>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295e:	4b04      	ldr	r3, [pc, #16]	; (8002970 <SysTick_Config+0x40>)
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	e000e010 	.word	0xe000e010

08002974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff29 	bl	80027d4 <__NVIC_SetPriorityGrouping>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800299c:	f7ff ff3e 	bl	800281c <__NVIC_GetPriorityGrouping>
 80029a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f7ff ff8e 	bl	80028c8 <NVIC_EncodePriority>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff5d 	bl	8002874 <__NVIC_SetPriority>
}
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff31 	bl	8002838 <__NVIC_EnableIRQ>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ffa2 	bl	8002930 <SysTick_Config>
 80029ec:	4603      	mov	r3, r0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a04:	f7ff f8b2 	bl	8001b6c <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e099      	b.n	8002b48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0201 	bic.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a34:	e00f      	b.n	8002a56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a36:	f7ff f899 	bl	8001b6c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b05      	cmp	r3, #5
 8002a42:	d908      	bls.n	8002a56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e078      	b.n	8002b48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1e8      	bne.n	8002a36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4b38      	ldr	r3, [pc, #224]	; (8002b50 <HAL_DMA_Init+0x158>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d107      	bne.n	8002ac0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f023 0307 	bic.w	r3, r3, #7
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d117      	bne.n	8002b1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00e      	beq.n	8002b1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 faa5 	bl	800304c <DMA_CheckFifoParam>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2240      	movs	r2, #64	; 0x40
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b16:	2301      	movs	r3, #1
 8002b18:	e016      	b.n	8002b48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fa5c 	bl	8002fe0 <DMA_CalcBaseAndBitshift>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	223f      	movs	r2, #63	; 0x3f
 8002b32:	409a      	lsls	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	e010803f 	.word	0xe010803f

08002b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_DMA_Start_IT+0x26>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e048      	b.n	8002c0c <HAL_DMA_Start_IT+0xb8>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d137      	bne.n	8002bfe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2202      	movs	r2, #2
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f9ee 	bl	8002f84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bac:	223f      	movs	r2, #63	; 0x3f
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0216 	orr.w	r2, r2, #22
 8002bc2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bd2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0208 	orr.w	r2, r2, #8
 8002bea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e005      	b.n	8002c0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c06:	2302      	movs	r3, #2
 8002c08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d004      	beq.n	8002c32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2280      	movs	r2, #128	; 0x80
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00c      	b.n	8002c4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2205      	movs	r2, #5
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0201 	bic.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002c64:	4b8e      	ldr	r3, [pc, #568]	; (8002ea0 <HAL_DMA_IRQHandler+0x248>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a8e      	ldr	r2, [pc, #568]	; (8002ea4 <HAL_DMA_IRQHandler+0x24c>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	0a9b      	lsrs	r3, r3, #10
 8002c70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c82:	2208      	movs	r2, #8
 8002c84:	409a      	lsls	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01a      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0204 	bic.w	r2, r2, #4
 8002caa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb0:	2208      	movs	r2, #8
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbc:	f043 0201 	orr.w	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	2201      	movs	r2, #1
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d012      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf2:	f043 0202 	orr.w	r2, r3, #2
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	2204      	movs	r2, #4
 8002d00:	409a      	lsls	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d012      	beq.n	8002d30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d28:	f043 0204 	orr.w	r2, r3, #4
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d34:	2210      	movs	r2, #16
 8002d36:	409a      	lsls	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d043      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d03c      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	2210      	movs	r2, #16
 8002d54:	409a      	lsls	r2, r3
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d018      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d108      	bne.n	8002d88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d024      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	4798      	blx	r3
 8002d86:	e01f      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01b      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	4798      	blx	r3
 8002d98:	e016      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d107      	bne.n	8002db8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0208 	bic.w	r2, r2, #8
 8002db6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	2220      	movs	r2, #32
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 808f 	beq.w	8002ef8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8087 	beq.w	8002ef8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dee:	2220      	movs	r2, #32
 8002df0:	409a      	lsls	r2, r3
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d136      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0216 	bic.w	r2, r2, #22
 8002e10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d103      	bne.n	8002e32 <HAL_DMA_IRQHandler+0x1da>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0208 	bic.w	r2, r2, #8
 8002e40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	223f      	movs	r2, #63	; 0x3f
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d07e      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	4798      	blx	r3
        }
        return;
 8002e6e:	e079      	b.n	8002f64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01d      	beq.n	8002eba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10d      	bne.n	8002ea8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d031      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
 8002e9c:	e02c      	b.n	8002ef8 <HAL_DMA_IRQHandler+0x2a0>
 8002e9e:	bf00      	nop
 8002ea0:	20000000 	.word	0x20000000
 8002ea4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d023      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	4798      	blx	r3
 8002eb8:	e01e      	b.n	8002ef8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10f      	bne.n	8002ee8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0210 	bic.w	r2, r2, #16
 8002ed6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d032      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d022      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2205      	movs	r2, #5
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	3301      	adds	r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d307      	bcc.n	8002f40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f2      	bne.n	8002f24 <HAL_DMA_IRQHandler+0x2cc>
 8002f3e:	e000      	b.n	8002f42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	4798      	blx	r3
 8002f62:	e000      	b.n	8002f66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f64:	bf00      	nop
    }
  }
}
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d108      	bne.n	8002fc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fc2:	e007      	b.n	8002fd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	60da      	str	r2, [r3, #12]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	3b10      	subs	r3, #16
 8002ff0:	4a13      	ldr	r2, [pc, #76]	; (8003040 <DMA_CalcBaseAndBitshift+0x60>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ffa:	4a12      	ldr	r2, [pc, #72]	; (8003044 <DMA_CalcBaseAndBitshift+0x64>)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b03      	cmp	r3, #3
 800300c:	d908      	bls.n	8003020 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <DMA_CalcBaseAndBitshift+0x68>)
 8003016:	4013      	ands	r3, r2
 8003018:	1d1a      	adds	r2, r3, #4
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	659a      	str	r2, [r3, #88]	; 0x58
 800301e:	e006      	b.n	800302e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <DMA_CalcBaseAndBitshift+0x68>)
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	aaaaaaab 	.word	0xaaaaaaab
 8003044:	08011a14 	.word	0x08011a14
 8003048:	fffffc00 	.word	0xfffffc00

0800304c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d11f      	bne.n	80030a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d856      	bhi.n	800311a <DMA_CheckFifoParam+0xce>
 800306c:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <DMA_CheckFifoParam+0x28>)
 800306e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003072:	bf00      	nop
 8003074:	08003085 	.word	0x08003085
 8003078:	08003097 	.word	0x08003097
 800307c:	08003085 	.word	0x08003085
 8003080:	0800311b 	.word	0x0800311b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d046      	beq.n	800311e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003094:	e043      	b.n	800311e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800309e:	d140      	bne.n	8003122 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a4:	e03d      	b.n	8003122 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ae:	d121      	bne.n	80030f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d837      	bhi.n	8003126 <DMA_CheckFifoParam+0xda>
 80030b6:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <DMA_CheckFifoParam+0x70>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	080030d3 	.word	0x080030d3
 80030c4:	080030cd 	.word	0x080030cd
 80030c8:	080030e5 	.word	0x080030e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
      break;
 80030d0:	e030      	b.n	8003134 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d025      	beq.n	800312a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e2:	e022      	b.n	800312a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030ec:	d11f      	bne.n	800312e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030f2:	e01c      	b.n	800312e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d903      	bls.n	8003102 <DMA_CheckFifoParam+0xb6>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d003      	beq.n	8003108 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003100:	e018      	b.n	8003134 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
      break;
 8003106:	e015      	b.n	8003134 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00e      	beq.n	8003132 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
      break;
 8003118:	e00b      	b.n	8003132 <DMA_CheckFifoParam+0xe6>
      break;
 800311a:	bf00      	nop
 800311c:	e00a      	b.n	8003134 <DMA_CheckFifoParam+0xe8>
      break;
 800311e:	bf00      	nop
 8003120:	e008      	b.n	8003134 <DMA_CheckFifoParam+0xe8>
      break;
 8003122:	bf00      	nop
 8003124:	e006      	b.n	8003134 <DMA_CheckFifoParam+0xe8>
      break;
 8003126:	bf00      	nop
 8003128:	e004      	b.n	8003134 <DMA_CheckFifoParam+0xe8>
      break;
 800312a:	bf00      	nop
 800312c:	e002      	b.n	8003134 <DMA_CheckFifoParam+0xe8>
      break;   
 800312e:	bf00      	nop
 8003130:	e000      	b.n	8003134 <DMA_CheckFifoParam+0xe8>
      break;
 8003132:	bf00      	nop
    }
  } 
  
  return status; 
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop

08003144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003144:	b480      	push	{r7}
 8003146:	b089      	sub	sp, #36	; 0x24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e175      	b.n	8003450 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003164:	2201      	movs	r2, #1
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	429a      	cmp	r2, r3
 800317e:	f040 8164 	bne.w	800344a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b01      	cmp	r3, #1
 800318c:	d005      	beq.n	800319a <HAL_GPIO_Init+0x56>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d130      	bne.n	80031fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	2203      	movs	r2, #3
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d0:	2201      	movs	r2, #1
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 0201 	and.w	r2, r3, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b03      	cmp	r3, #3
 8003206:	d017      	beq.n	8003238 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2203      	movs	r2, #3
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d123      	bne.n	800328c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	08da      	lsrs	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3208      	adds	r2, #8
 800324c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	220f      	movs	r2, #15
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	08da      	lsrs	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3208      	adds	r2, #8
 8003286:	69b9      	ldr	r1, [r7, #24]
 8003288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2203      	movs	r2, #3
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0203 	and.w	r2, r3, #3
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80be 	beq.w	800344a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ce:	4b66      	ldr	r3, [pc, #408]	; (8003468 <HAL_GPIO_Init+0x324>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	4a65      	ldr	r2, [pc, #404]	; (8003468 <HAL_GPIO_Init+0x324>)
 80032d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d8:	6453      	str	r3, [r2, #68]	; 0x44
 80032da:	4b63      	ldr	r3, [pc, #396]	; (8003468 <HAL_GPIO_Init+0x324>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032e6:	4a61      	ldr	r2, [pc, #388]	; (800346c <HAL_GPIO_Init+0x328>)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	3302      	adds	r3, #2
 80032ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	220f      	movs	r2, #15
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a58      	ldr	r2, [pc, #352]	; (8003470 <HAL_GPIO_Init+0x32c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d037      	beq.n	8003382 <HAL_GPIO_Init+0x23e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a57      	ldr	r2, [pc, #348]	; (8003474 <HAL_GPIO_Init+0x330>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d031      	beq.n	800337e <HAL_GPIO_Init+0x23a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a56      	ldr	r2, [pc, #344]	; (8003478 <HAL_GPIO_Init+0x334>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d02b      	beq.n	800337a <HAL_GPIO_Init+0x236>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a55      	ldr	r2, [pc, #340]	; (800347c <HAL_GPIO_Init+0x338>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d025      	beq.n	8003376 <HAL_GPIO_Init+0x232>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a54      	ldr	r2, [pc, #336]	; (8003480 <HAL_GPIO_Init+0x33c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01f      	beq.n	8003372 <HAL_GPIO_Init+0x22e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a53      	ldr	r2, [pc, #332]	; (8003484 <HAL_GPIO_Init+0x340>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d019      	beq.n	800336e <HAL_GPIO_Init+0x22a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a52      	ldr	r2, [pc, #328]	; (8003488 <HAL_GPIO_Init+0x344>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d013      	beq.n	800336a <HAL_GPIO_Init+0x226>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a51      	ldr	r2, [pc, #324]	; (800348c <HAL_GPIO_Init+0x348>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00d      	beq.n	8003366 <HAL_GPIO_Init+0x222>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a50      	ldr	r2, [pc, #320]	; (8003490 <HAL_GPIO_Init+0x34c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d007      	beq.n	8003362 <HAL_GPIO_Init+0x21e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a4f      	ldr	r2, [pc, #316]	; (8003494 <HAL_GPIO_Init+0x350>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <HAL_GPIO_Init+0x21a>
 800335a:	2309      	movs	r3, #9
 800335c:	e012      	b.n	8003384 <HAL_GPIO_Init+0x240>
 800335e:	230a      	movs	r3, #10
 8003360:	e010      	b.n	8003384 <HAL_GPIO_Init+0x240>
 8003362:	2308      	movs	r3, #8
 8003364:	e00e      	b.n	8003384 <HAL_GPIO_Init+0x240>
 8003366:	2307      	movs	r3, #7
 8003368:	e00c      	b.n	8003384 <HAL_GPIO_Init+0x240>
 800336a:	2306      	movs	r3, #6
 800336c:	e00a      	b.n	8003384 <HAL_GPIO_Init+0x240>
 800336e:	2305      	movs	r3, #5
 8003370:	e008      	b.n	8003384 <HAL_GPIO_Init+0x240>
 8003372:	2304      	movs	r3, #4
 8003374:	e006      	b.n	8003384 <HAL_GPIO_Init+0x240>
 8003376:	2303      	movs	r3, #3
 8003378:	e004      	b.n	8003384 <HAL_GPIO_Init+0x240>
 800337a:	2302      	movs	r3, #2
 800337c:	e002      	b.n	8003384 <HAL_GPIO_Init+0x240>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <HAL_GPIO_Init+0x240>
 8003382:	2300      	movs	r3, #0
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	f002 0203 	and.w	r2, r2, #3
 800338a:	0092      	lsls	r2, r2, #2
 800338c:	4093      	lsls	r3, r2
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003394:	4935      	ldr	r1, [pc, #212]	; (800346c <HAL_GPIO_Init+0x328>)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	089b      	lsrs	r3, r3, #2
 800339a:	3302      	adds	r3, #2
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a2:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <HAL_GPIO_Init+0x354>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033c6:	4a34      	ldr	r2, [pc, #208]	; (8003498 <HAL_GPIO_Init+0x354>)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033cc:	4b32      	ldr	r3, [pc, #200]	; (8003498 <HAL_GPIO_Init+0x354>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033f0:	4a29      	ldr	r2, [pc, #164]	; (8003498 <HAL_GPIO_Init+0x354>)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033f6:	4b28      	ldr	r3, [pc, #160]	; (8003498 <HAL_GPIO_Init+0x354>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800341a:	4a1f      	ldr	r2, [pc, #124]	; (8003498 <HAL_GPIO_Init+0x354>)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_GPIO_Init+0x354>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003444:	4a14      	ldr	r2, [pc, #80]	; (8003498 <HAL_GPIO_Init+0x354>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3301      	adds	r3, #1
 800344e:	61fb      	str	r3, [r7, #28]
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	2b0f      	cmp	r3, #15
 8003454:	f67f ae86 	bls.w	8003164 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	3724      	adds	r7, #36	; 0x24
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800
 800346c:	40013800 	.word	0x40013800
 8003470:	40020000 	.word	0x40020000
 8003474:	40020400 	.word	0x40020400
 8003478:	40020800 	.word	0x40020800
 800347c:	40020c00 	.word	0x40020c00
 8003480:	40021000 	.word	0x40021000
 8003484:	40021400 	.word	0x40021400
 8003488:	40021800 	.word	0x40021800
 800348c:	40021c00 	.word	0x40021c00
 8003490:	40022000 	.word	0x40022000
 8003494:	40022400 	.word	0x40022400
 8003498:	40013c00 	.word	0x40013c00

0800349c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	887b      	ldrh	r3, [r7, #2]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
 80034b8:	e001      	b.n	80034be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034ba:	2300      	movs	r3, #0
 80034bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034be:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	807b      	strh	r3, [r7, #2]
 80034d8:	4613      	mov	r3, r2
 80034da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034dc:	787b      	ldrb	r3, [r7, #1]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034e2:	887a      	ldrh	r2, [r7, #2]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034e8:	e003      	b.n	80034f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034ea:	887b      	ldrh	r3, [r7, #2]
 80034ec:	041a      	lsls	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	619a      	str	r2, [r3, #24]
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d006      	beq.n	8003524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003516:	4a05      	ldr	r2, [pc, #20]	; (800352c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	4618      	mov	r0, r3
 8003520:	f000 f806 	bl	8003530 <HAL_GPIO_EXTI_Callback>
  }
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40013c00 	.word	0x40013c00

08003530 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e07f      	b.n	800365a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd fe92 	bl	8001298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2224      	movs	r2, #36	; 0x24
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003598:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d107      	bne.n	80035c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	e006      	b.n	80035d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d104      	bne.n	80035e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <HAL_I2C_Init+0x11c>)
 80035ee:	430b      	orrs	r3, r1
 80035f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003600:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69d9      	ldr	r1, [r3, #28]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1a      	ldr	r2, [r3, #32]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	02008000 	.word	0x02008000

08003668 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	461a      	mov	r2, r3
 8003674:	460b      	mov	r3, r1
 8003676:	817b      	strh	r3, [r7, #10]
 8003678:	4613      	mov	r3, r2
 800367a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b20      	cmp	r3, #32
 8003686:	f040 80da 	bne.w	800383e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_I2C_Master_Transmit+0x30>
 8003694:	2302      	movs	r3, #2
 8003696:	e0d3      	b.n	8003840 <HAL_I2C_Master_Transmit+0x1d8>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036a0:	f7fe fa64 	bl	8001b6c <HAL_GetTick>
 80036a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	2319      	movs	r3, #25
 80036ac:	2201      	movs	r2, #1
 80036ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f9e6 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0be      	b.n	8003840 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2221      	movs	r2, #33	; 0x21
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2210      	movs	r2, #16
 80036ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	893a      	ldrh	r2, [r7, #8]
 80036e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2bff      	cmp	r3, #255	; 0xff
 80036f2:	d90e      	bls.n	8003712 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	22ff      	movs	r2, #255	; 0xff
 80036f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	8979      	ldrh	r1, [r7, #10]
 8003702:	4b51      	ldr	r3, [pc, #324]	; (8003848 <HAL_I2C_Master_Transmit+0x1e0>)
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 fbd0 	bl	8003eb0 <I2C_TransferConfig>
 8003710:	e06c      	b.n	80037ec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	b2da      	uxtb	r2, r3
 8003722:	8979      	ldrh	r1, [r7, #10]
 8003724:	4b48      	ldr	r3, [pc, #288]	; (8003848 <HAL_I2C_Master_Transmit+0x1e0>)
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fbbf 	bl	8003eb0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003732:	e05b      	b.n	80037ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	6a39      	ldr	r1, [r7, #32]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f9e3 	bl	8003b04 <I2C_WaitOnTXISFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e07b      	b.n	8003840 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	781a      	ldrb	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d034      	beq.n	80037ec <HAL_I2C_Master_Transmit+0x184>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	2b00      	cmp	r3, #0
 8003788:	d130      	bne.n	80037ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	2200      	movs	r2, #0
 8003792:	2180      	movs	r1, #128	; 0x80
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f975 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e04d      	b.n	8003840 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2bff      	cmp	r3, #255	; 0xff
 80037ac:	d90e      	bls.n	80037cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	22ff      	movs	r2, #255	; 0xff
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	8979      	ldrh	r1, [r7, #10]
 80037bc:	2300      	movs	r3, #0
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fb73 	bl	8003eb0 <I2C_TransferConfig>
 80037ca:	e00f      	b.n	80037ec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	8979      	ldrh	r1, [r7, #10]
 80037de:	2300      	movs	r3, #0
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fb62 	bl	8003eb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d19e      	bne.n	8003734 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	6a39      	ldr	r1, [r7, #32]
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f9c2 	bl	8003b84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e01a      	b.n	8003840 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2220      	movs	r2, #32
 8003810:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_I2C_Master_Transmit+0x1e4>)
 800381e:	400b      	ands	r3, r1
 8003820:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	80002000 	.word	0x80002000
 800384c:	fe00e800 	.word	0xfe00e800

08003850 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af02      	add	r7, sp, #8
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	461a      	mov	r2, r3
 800385c:	460b      	mov	r3, r1
 800385e:	817b      	strh	r3, [r7, #10]
 8003860:	4613      	mov	r3, r2
 8003862:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b20      	cmp	r3, #32
 800386e:	f040 80db 	bne.w	8003a28 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_I2C_Master_Receive+0x30>
 800387c:	2302      	movs	r3, #2
 800387e:	e0d4      	b.n	8003a2a <HAL_I2C_Master_Receive+0x1da>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003888:	f7fe f970 	bl	8001b6c <HAL_GetTick>
 800388c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2319      	movs	r3, #25
 8003894:	2201      	movs	r2, #1
 8003896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f8f2 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0bf      	b.n	8003a2a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2222      	movs	r2, #34	; 0x22
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2210      	movs	r2, #16
 80038b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	893a      	ldrh	r2, [r7, #8]
 80038ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2bff      	cmp	r3, #255	; 0xff
 80038da:	d90e      	bls.n	80038fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	22ff      	movs	r2, #255	; 0xff
 80038e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	8979      	ldrh	r1, [r7, #10]
 80038ea:	4b52      	ldr	r3, [pc, #328]	; (8003a34 <HAL_I2C_Master_Receive+0x1e4>)
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 fadc 	bl	8003eb0 <I2C_TransferConfig>
 80038f8:	e06d      	b.n	80039d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003908:	b2da      	uxtb	r2, r3
 800390a:	8979      	ldrh	r1, [r7, #10]
 800390c:	4b49      	ldr	r3, [pc, #292]	; (8003a34 <HAL_I2C_Master_Receive+0x1e4>)
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 facb 	bl	8003eb0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800391a:	e05c      	b.n	80039d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	6a39      	ldr	r1, [r7, #32]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f96b 	bl	8003bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e07c      	b.n	8003a2a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d034      	beq.n	80039d6 <HAL_I2C_Master_Receive+0x186>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	d130      	bne.n	80039d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	2200      	movs	r2, #0
 800397c:	2180      	movs	r1, #128	; 0x80
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f880 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e04d      	b.n	8003a2a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	2bff      	cmp	r3, #255	; 0xff
 8003996:	d90e      	bls.n	80039b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	22ff      	movs	r2, #255	; 0xff
 800399c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	8979      	ldrh	r1, [r7, #10]
 80039a6:	2300      	movs	r3, #0
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 fa7e 	bl	8003eb0 <I2C_TransferConfig>
 80039b4:	e00f      	b.n	80039d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	8979      	ldrh	r1, [r7, #10]
 80039c8:	2300      	movs	r3, #0
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 fa6d 	bl	8003eb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d19d      	bne.n	800391c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	6a39      	ldr	r1, [r7, #32]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f8cd 	bl	8003b84 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e01a      	b.n	8003a2a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2220      	movs	r2, #32
 80039fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <HAL_I2C_Master_Receive+0x1e8>)
 8003a08:	400b      	ands	r3, r1
 8003a0a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	e000      	b.n	8003a2a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003a28:	2302      	movs	r3, #2
  }
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	80002400 	.word	0x80002400
 8003a38:	fe00e800 	.word	0xfe00e800

08003a3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d103      	bne.n	8003a5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2200      	movs	r2, #0
 8003a58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d007      	beq.n	8003a78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	619a      	str	r2, [r3, #24]
  }
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a94:	e022      	b.n	8003adc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a9c:	d01e      	beq.n	8003adc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9e:	f7fe f865 	bl	8001b6c <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d113      	bne.n	8003adc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	f043 0220 	orr.w	r2, r3, #32
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e00f      	b.n	8003afc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d0cd      	beq.n	8003a96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b10:	e02c      	b.n	8003b6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f8ea 	bl	8003cf0 <I2C_IsErrorOccurred>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e02a      	b.n	8003b7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b2c:	d01e      	beq.n	8003b6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2e:	f7fe f81d 	bl	8001b6c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d302      	bcc.n	8003b44 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d113      	bne.n	8003b6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e007      	b.n	8003b7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d1cb      	bne.n	8003b12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b90:	e028      	b.n	8003be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f8aa 	bl	8003cf0 <I2C_IsErrorOccurred>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e026      	b.n	8003bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba6:	f7fd ffe1 	bl	8001b6c <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d302      	bcc.n	8003bbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d113      	bne.n	8003be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	f043 0220 	orr.w	r2, r3, #32
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e007      	b.n	8003bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d1cf      	bne.n	8003b92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c08:	e064      	b.n	8003cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f86e 	bl	8003cf0 <I2C_IsErrorOccurred>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e062      	b.n	8003ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d138      	bne.n	8003c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d105      	bne.n	8003c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	e04e      	b.n	8003ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d107      	bne.n	8003c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2210      	movs	r2, #16
 8003c5a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2204      	movs	r2, #4
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
 8003c62:	e002      	b.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003c7e:	400b      	ands	r3, r1
 8003c80:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e022      	b.n	8003ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9e:	f7fd ff65 	bl	8001b6c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d302      	bcc.n	8003cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10f      	bne.n	8003cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	f043 0220 	orr.w	r2, r3, #32
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e007      	b.n	8003ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d193      	bne.n	8003c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	fe00e800 	.word	0xfe00e800

08003cf0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	; 0x28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d068      	beq.n	8003dee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2210      	movs	r2, #16
 8003d22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d24:	e049      	b.n	8003dba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d2c:	d045      	beq.n	8003dba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d2e:	f7fd ff1d 	bl	8001b6c <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d302      	bcc.n	8003d44 <I2C_IsErrorOccurred+0x54>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d13a      	bne.n	8003dba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d66:	d121      	bne.n	8003dac <I2C_IsErrorOccurred+0xbc>
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d6e:	d01d      	beq.n	8003dac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	d01a      	beq.n	8003dac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d86:	f7fd fef1 	bl	8001b6c <HAL_GetTick>
 8003d8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d8c:	e00e      	b.n	8003dac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d8e:	f7fd feed 	bl	8001b6c <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b19      	cmp	r3, #25
 8003d9a:	d907      	bls.n	8003dac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	f043 0320 	orr.w	r3, r3, #32
 8003da2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003daa:	e006      	b.n	8003dba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d1e9      	bne.n	8003d8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d003      	beq.n	8003dd0 <I2C_IsErrorOccurred+0xe0>
 8003dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0aa      	beq.n	8003d26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d103      	bne.n	8003de0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	f043 0304 	orr.w	r3, r3, #4
 8003de6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00b      	beq.n	8003e18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	f043 0308 	orr.w	r3, r3, #8
 8003e28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00b      	beq.n	8003e5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	f043 0302 	orr.w	r3, r3, #2
 8003e4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d01c      	beq.n	8003e9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f7ff fde9 	bl	8003a3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <I2C_IsErrorOccurred+0x1bc>)
 8003e76:	400b      	ands	r3, r1
 8003e78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3728      	adds	r7, #40	; 0x28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	fe00e800 	.word	0xfe00e800

08003eb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	817b      	strh	r3, [r7, #10]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ec2:	897b      	ldrh	r3, [r7, #10]
 8003ec4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ec8:	7a7b      	ldrb	r3, [r7, #9]
 8003eca:	041b      	lsls	r3, r3, #16
 8003ecc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ed0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ede:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	0d5b      	lsrs	r3, r3, #21
 8003eea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003eee:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <I2C_TransferConfig+0x60>)
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	ea02 0103 	and.w	r1, r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	03ff63ff 	.word	0x03ff63ff

08003f14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d138      	bne.n	8003f9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e032      	b.n	8003f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	; 0x24
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6819      	ldr	r1, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e000      	b.n	8003f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f9c:	2302      	movs	r3, #2
  }
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d139      	bne.n	8004034 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e033      	b.n	8004036 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2224      	movs	r2, #36	; 0x24
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ffc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	e000      	b.n	8004036 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004034:	2302      	movs	r3, #2
  }
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004042:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004044:	b08f      	sub	sp, #60	; 0x3c
 8004046:	af0a      	add	r7, sp, #40	; 0x28
 8004048:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e116      	b.n	8004282 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f00b fde6 	bl	800fc40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2203      	movs	r2, #3
 8004078:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f004 ffdb 	bl	800904e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	687e      	ldr	r6, [r7, #4]
 80040a0:	466d      	mov	r5, sp
 80040a2:	f106 0410 	add.w	r4, r6, #16
 80040a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80040b6:	1d33      	adds	r3, r6, #4
 80040b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ba:	6838      	ldr	r0, [r7, #0]
 80040bc:	f004 febc 	bl	8008e38 <USB_CoreInit>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e0d7      	b.n	8004282 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2100      	movs	r1, #0
 80040d8:	4618      	mov	r0, r3
 80040da:	f004 ffc9 	bl	8009070 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040de:	2300      	movs	r3, #0
 80040e0:	73fb      	strb	r3, [r7, #15]
 80040e2:	e04a      	b.n	800417a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040e4:	7bfa      	ldrb	r2, [r7, #15]
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	4613      	mov	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	333d      	adds	r3, #61	; 0x3d
 80040f4:	2201      	movs	r2, #1
 80040f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040f8:	7bfa      	ldrb	r2, [r7, #15]
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	333c      	adds	r3, #60	; 0x3c
 8004108:	7bfa      	ldrb	r2, [r7, #15]
 800410a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800410c:	7bfa      	ldrb	r2, [r7, #15]
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	b298      	uxth	r0, r3
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	3344      	adds	r3, #68	; 0x44
 8004120:	4602      	mov	r2, r0
 8004122:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004124:	7bfa      	ldrb	r2, [r7, #15]
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	3340      	adds	r3, #64	; 0x40
 8004134:	2200      	movs	r2, #0
 8004136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004138:	7bfa      	ldrb	r2, [r7, #15]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	3348      	adds	r3, #72	; 0x48
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800414c:	7bfa      	ldrb	r2, [r7, #15]
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	334c      	adds	r3, #76	; 0x4c
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004160:	7bfa      	ldrb	r2, [r7, #15]
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	3354      	adds	r3, #84	; 0x54
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	3301      	adds	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	7bfa      	ldrb	r2, [r7, #15]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	429a      	cmp	r2, r3
 8004182:	d3af      	bcc.n	80040e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004184:	2300      	movs	r3, #0
 8004186:	73fb      	strb	r3, [r7, #15]
 8004188:	e044      	b.n	8004214 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800418a:	7bfa      	ldrb	r2, [r7, #15]
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800419c:	2200      	movs	r2, #0
 800419e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041a0:	7bfa      	ldrb	r2, [r7, #15]
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80041b2:	7bfa      	ldrb	r2, [r7, #15]
 80041b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041b6:	7bfa      	ldrb	r2, [r7, #15]
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80041c8:	2200      	movs	r2, #0
 80041ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041cc:	7bfa      	ldrb	r2, [r7, #15]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041e2:	7bfa      	ldrb	r2, [r7, #15]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041f8:	7bfa      	ldrb	r2, [r7, #15]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	3301      	adds	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	7bfa      	ldrb	r2, [r7, #15]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	429a      	cmp	r2, r3
 800421c:	d3b5      	bcc.n	800418a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	687e      	ldr	r6, [r7, #4]
 8004226:	466d      	mov	r5, sp
 8004228:	f106 0410 	add.w	r4, r6, #16
 800422c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800422e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004234:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004238:	e885 0003 	stmia.w	r5, {r0, r1}
 800423c:	1d33      	adds	r3, r6, #4
 800423e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004240:	6838      	ldr	r0, [r7, #0]
 8004242:	f004 ff61 	bl	8009108 <USB_DevInit>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e014      	b.n	8004282 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	2b01      	cmp	r3, #1
 800426e:	d102      	bne.n	8004276 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f001 f97b 	bl	800556c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f006 f8af 	bl	800a3de <USB_DevDisconnect>

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800428a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_PCD_Start+0x16>
 800429c:	2302      	movs	r3, #2
 800429e:	e012      	b.n	80042c6 <HAL_PCD_Start+0x3c>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f004 febd 	bl	800902c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f006 f870 	bl	800a39c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042ce:	b590      	push	{r4, r7, lr}
 80042d0:	b08d      	sub	sp, #52	; 0x34
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f006 f92e 	bl	800a546 <USB_GetMode>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f040 84b7 	bne.w	8004c60 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f006 f892 	bl	800a420 <USB_ReadInterrupts>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 84ad 	beq.w	8004c5e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	0a1b      	lsrs	r3, r3, #8
 800430e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f006 f87f 	bl	800a420 <USB_ReadInterrupts>
 8004322:	4603      	mov	r3, r0
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	d107      	bne.n	800433c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f002 0202 	and.w	r2, r2, #2
 800433a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f006 f86d 	bl	800a420 <USB_ReadInterrupts>
 8004346:	4603      	mov	r3, r0
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b10      	cmp	r3, #16
 800434e:	d161      	bne.n	8004414 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0210 	bic.w	r2, r2, #16
 800435e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	f003 020f 	and.w	r2, r3, #15
 800436c:	4613      	mov	r3, r2
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	4413      	add	r3, r2
 800437c:	3304      	adds	r3, #4
 800437e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	0c5b      	lsrs	r3, r3, #17
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	2b02      	cmp	r3, #2
 800438a:	d124      	bne.n	80043d6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004392:	4013      	ands	r3, r2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d035      	beq.n	8004404 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	6a38      	ldr	r0, [r7, #32]
 80043ac:	f005 fea4 	bl	800a0f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043bc:	441a      	add	r2, r3
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	6a1a      	ldr	r2, [r3, #32]
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043ce:	441a      	add	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	621a      	str	r2, [r3, #32]
 80043d4:	e016      	b.n	8004404 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	0c5b      	lsrs	r3, r3, #17
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	2b06      	cmp	r3, #6
 80043e0:	d110      	bne.n	8004404 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043e8:	2208      	movs	r2, #8
 80043ea:	4619      	mov	r1, r3
 80043ec:	6a38      	ldr	r0, [r7, #32]
 80043ee:	f005 fe83 	bl	800a0f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	6a1a      	ldr	r2, [r3, #32]
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	091b      	lsrs	r3, r3, #4
 80043fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043fe:	441a      	add	r2, r3
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0210 	orr.w	r2, r2, #16
 8004412:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f006 f801 	bl	800a420 <USB_ReadInterrupts>
 800441e:	4603      	mov	r3, r0
 8004420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004424:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004428:	f040 80a7 	bne.w	800457a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f006 f806 	bl	800a446 <USB_ReadDevAllOutEpInterrupt>
 800443a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800443c:	e099      	b.n	8004572 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 808e 	beq.w	8004566 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	4611      	mov	r1, r2
 8004454:	4618      	mov	r0, r3
 8004456:	f006 f82a 	bl	800a4ae <USB_ReadDevOutEPInterrupt>
 800445a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00c      	beq.n	8004480 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004472:	461a      	mov	r2, r3
 8004474:	2301      	movs	r3, #1
 8004476:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004478:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fef0 	bl	8005260 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00c      	beq.n	80044a4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004496:	461a      	mov	r2, r3
 8004498:	2308      	movs	r3, #8
 800449a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800449c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 ffc6 	bl	8005430 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d008      	beq.n	80044c0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	461a      	mov	r2, r3
 80044bc:	2310      	movs	r3, #16
 80044be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d030      	beq.n	800452c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d2:	2b80      	cmp	r3, #128	; 0x80
 80044d4:	d109      	bne.n	80044ea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044e8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80044ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ec:	4613      	mov	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	4413      	add	r3, r2
 80044fc:	3304      	adds	r3, #4
 80044fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	78db      	ldrb	r3, [r3, #3]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d108      	bne.n	800451a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2200      	movs	r2, #0
 800450c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	b2db      	uxtb	r3, r3
 8004512:	4619      	mov	r1, r3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f00b fcb7 	bl	800fe88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004526:	461a      	mov	r2, r3
 8004528:	2302      	movs	r3, #2
 800452a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004542:	461a      	mov	r2, r3
 8004544:	2320      	movs	r3, #32
 8004546:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455e:	461a      	mov	r2, r3
 8004560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004564:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	3301      	adds	r3, #1
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456e:	085b      	lsrs	r3, r3, #1
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	2b00      	cmp	r3, #0
 8004576:	f47f af62 	bne.w	800443e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f005 ff4e 	bl	800a420 <USB_ReadInterrupts>
 8004584:	4603      	mov	r3, r0
 8004586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800458a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800458e:	f040 80db 	bne.w	8004748 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f005 ff6f 	bl	800a47a <USB_ReadDevAllInEpInterrupt>
 800459c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80045a2:	e0cd      	b.n	8004740 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 80c2 	beq.w	8004734 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f005 ff95 	bl	800a4ea <USB_ReadDevInEPInterrupt>
 80045c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d057      	beq.n	800467c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	2201      	movs	r2, #1
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69f9      	ldr	r1, [r7, #28]
 80045e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ec:	4013      	ands	r3, r2
 80045ee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	461a      	mov	r2, r3
 80045fe:	2301      	movs	r3, #1
 8004600:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d132      	bne.n	8004670 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460e:	4613      	mov	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	334c      	adds	r3, #76	; 0x4c
 800461a:	6819      	ldr	r1, [r3, #0]
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4403      	add	r3, r0
 800462a:	3348      	adds	r3, #72	; 0x48
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4419      	add	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4403      	add	r3, r0
 800463e:	334c      	adds	r3, #76	; 0x4c
 8004640:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	2b00      	cmp	r3, #0
 8004646:	d113      	bne.n	8004670 <HAL_PCD_IRQHandler+0x3a2>
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	3354      	adds	r3, #84	; 0x54
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d108      	bne.n	8004670 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004668:	461a      	mov	r2, r3
 800466a:	2101      	movs	r1, #1
 800466c:	f005 ff9e 	bl	800a5ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	b2db      	uxtb	r3, r3
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f00b fb81 	bl	800fd7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004692:	461a      	mov	r2, r3
 8004694:	2308      	movs	r3, #8
 8004696:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ae:	461a      	mov	r2, r3
 80046b0:	2310      	movs	r3, #16
 80046b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d008      	beq.n	80046d0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ca:	461a      	mov	r2, r3
 80046cc:	2340      	movs	r3, #64	; 0x40
 80046ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d023      	beq.n	8004722 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80046da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046dc:	6a38      	ldr	r0, [r7, #32]
 80046de:	f004 fe71 	bl	80093c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80046e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e4:	4613      	mov	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	3338      	adds	r3, #56	; 0x38
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	4413      	add	r3, r2
 80046f2:	3304      	adds	r3, #4
 80046f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	78db      	ldrb	r3, [r3, #3]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d108      	bne.n	8004710 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	b2db      	uxtb	r3, r3
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f00b fbce 	bl	800feac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471c:	461a      	mov	r2, r3
 800471e:	2302      	movs	r3, #2
 8004720:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800472c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fd08 	bl	8005144 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	3301      	adds	r3, #1
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	2b00      	cmp	r3, #0
 8004744:	f47f af2e 	bne.w	80045a4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f005 fe67 	bl	800a420 <USB_ReadInterrupts>
 8004752:	4603      	mov	r3, r0
 8004754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800475c:	d122      	bne.n	80047a4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004778:	2b01      	cmp	r3, #1
 800477a:	d108      	bne.n	800478e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004784:	2100      	movs	r1, #0
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f00b fd48 	bl	801021c <HAL_PCDEx_LPM_Callback>
 800478c:	e002      	b.n	8004794 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f00b fb6c 	bl	800fe6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695a      	ldr	r2, [r3, #20]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80047a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f005 fe39 	bl	800a420 <USB_ReadInterrupts>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b8:	d112      	bne.n	80047e0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d102      	bne.n	80047d0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f00b fb28 	bl	800fe20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80047de:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f005 fe1b 	bl	800a420 <USB_ReadInterrupts>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047f4:	d121      	bne.n	800483a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695a      	ldr	r2, [r3, #20]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004804:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d111      	bne.n	8004834 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	089b      	lsrs	r3, r3, #2
 8004820:	f003 020f 	and.w	r2, r3, #15
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800482a:	2101      	movs	r1, #1
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f00b fcf5 	bl	801021c <HAL_PCDEx_LPM_Callback>
 8004832:	e002      	b.n	800483a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f00b faf3 	bl	800fe20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f005 fdee 	bl	800a420 <USB_ReadInterrupts>
 8004844:	4603      	mov	r3, r0
 8004846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800484a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484e:	f040 80b7 	bne.w	80049c0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2110      	movs	r1, #16
 800486c:	4618      	mov	r0, r3
 800486e:	f004 fda9 	bl	80093c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004872:	2300      	movs	r3, #0
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004876:	e046      	b.n	8004906 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004884:	461a      	mov	r2, r3
 8004886:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800488a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800489c:	0151      	lsls	r1, r2, #5
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	440a      	add	r2, r1
 80048a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80048ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b8:	461a      	mov	r2, r3
 80048ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048d0:	0151      	lsls	r1, r2, #5
 80048d2:	69fa      	ldr	r2, [r7, #28]
 80048d4:	440a      	add	r2, r1
 80048d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f0:	0151      	lsls	r1, r2, #5
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	440a      	add	r2, r1
 80048f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048fe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	3301      	adds	r3, #1
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800490c:	429a      	cmp	r2, r3
 800490e:	d3b3      	bcc.n	8004878 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800491e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004922:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	2b00      	cmp	r3, #0
 800492a:	d016      	beq.n	800495a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800493c:	f043 030b 	orr.w	r3, r3, #11
 8004940:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004952:	f043 030b 	orr.w	r3, r3, #11
 8004956:	6453      	str	r3, [r2, #68]	; 0x44
 8004958:	e015      	b.n	8004986 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004968:	4619      	mov	r1, r3
 800496a:	f242 032b 	movw	r3, #8235	; 0x202b
 800496e:	4313      	orrs	r3, r2
 8004970:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	69fa      	ldr	r2, [r7, #28]
 800497c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004980:	f043 030b 	orr.w	r3, r3, #11
 8004984:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004994:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004998:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049aa:	461a      	mov	r2, r3
 80049ac:	f005 fdfe 	bl	800a5ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80049be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f005 fd2b 	bl	800a420 <USB_ReadInterrupts>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d4:	d124      	bne.n	8004a20 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f005 fdc2 	bl	800a564 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f004 fd6a 	bl	80094be <USB_GetDevSpeed>
 80049ea:	4603      	mov	r3, r0
 80049ec:	461a      	mov	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681c      	ldr	r4, [r3, #0]
 80049f6:	f001 fa7d 	bl	8005ef4 <HAL_RCC_GetHCLKFreq>
 80049fa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	461a      	mov	r2, r3
 8004a04:	4620      	mov	r0, r4
 8004a06:	f004 fa6f 	bl	8008ee8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f00b f9df 	bl	800fdce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f005 fcfb 	bl	800a420 <USB_ReadInterrupts>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d10a      	bne.n	8004a4a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f00b f9bc 	bl	800fdb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695a      	ldr	r2, [r3, #20]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f002 0208 	and.w	r2, r2, #8
 8004a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f005 fce6 	bl	800a420 <USB_ReadInterrupts>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	d122      	bne.n	8004aa4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6e:	e014      	b.n	8004a9a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a74:	4613      	mov	r3, r2
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d105      	bne.n	8004a94 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fb27 	bl	80050e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	3301      	adds	r3, #1
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d3e5      	bcc.n	8004a70 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f005 fcb9 	bl	800a420 <USB_ReadInterrupts>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ab8:	d13b      	bne.n	8004b32 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004aba:	2301      	movs	r3, #1
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
 8004abe:	e02b      	b.n	8004b18 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	3340      	adds	r3, #64	; 0x40
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d115      	bne.n	8004b12 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004ae6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	da12      	bge.n	8004b12 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	333f      	adds	r3, #63	; 0x3f
 8004afc:	2201      	movs	r2, #1
 8004afe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fae8 	bl	80050e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	3301      	adds	r3, #1
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d3ce      	bcc.n	8004ac0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f005 fc72 	bl	800a420 <USB_ReadInterrupts>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b46:	d155      	bne.n	8004bf4 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b48:	2301      	movs	r3, #1
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4c:	e045      	b.n	8004bda <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d12e      	bne.n	8004bd4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	da2b      	bge.n	8004bd4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004b88:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d121      	bne.n	8004bd4 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b94:	4613      	mov	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10a      	bne.n	8004bd4 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bd0:	6053      	str	r3, [r2, #4]
            break;
 8004bd2:	e007      	b.n	8004be4 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d3b4      	bcc.n	8004b4e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695a      	ldr	r2, [r3, #20]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f005 fc11 	bl	800a420 <USB_ReadInterrupts>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c08:	d10a      	bne.n	8004c20 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f00b f960 	bl	800fed0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695a      	ldr	r2, [r3, #20]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f005 fbfb 	bl	800a420 <USB_ReadInterrupts>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d115      	bne.n	8004c60 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f00b f950 	bl	800feec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	605a      	str	r2, [r3, #4]
 8004c5c:	e000      	b.n	8004c60 <HAL_PCD_IRQHandler+0x992>
      return;
 8004c5e:	bf00      	nop
    }
  }
}
 8004c60:	3734      	adds	r7, #52	; 0x34
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd90      	pop	{r4, r7, pc}

08004c66 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_PCD_SetAddress+0x1a>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e013      	b.n	8004ca8 <HAL_PCD_SetAddress+0x42>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	78fa      	ldrb	r2, [r7, #3]
 8004c8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	78fa      	ldrb	r2, [r7, #3]
 8004c96:	4611      	mov	r1, r2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f005 fb59 	bl	800a350 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	4608      	mov	r0, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	70fb      	strb	r3, [r7, #3]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	803b      	strh	r3, [r7, #0]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	da0f      	bge.n	8004cf6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	f003 020f 	and.w	r2, r3, #15
 8004cdc:	4613      	mov	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	3338      	adds	r3, #56	; 0x38
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	4413      	add	r3, r2
 8004cea:	3304      	adds	r3, #4
 8004cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	705a      	strb	r2, [r3, #1]
 8004cf4:	e00f      	b.n	8004d16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cf6:	78fb      	ldrb	r3, [r7, #3]
 8004cf8:	f003 020f 	and.w	r2, r3, #15
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	4413      	add	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	f003 030f 	and.w	r3, r3, #15
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d22:	883a      	ldrh	r2, [r7, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	78ba      	ldrb	r2, [r7, #2]
 8004d2c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	785b      	ldrb	r3, [r3, #1]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d004      	beq.n	8004d40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d40:	78bb      	ldrb	r3, [r7, #2]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d102      	bne.n	8004d4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_PCD_EP_Open+0xaa>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e00e      	b.n	8004d78 <HAL_PCD_EP_Open+0xc8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68f9      	ldr	r1, [r7, #12]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f004 fbcd 	bl	8009508 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004d76:	7afb      	ldrb	r3, [r7, #11]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	da0f      	bge.n	8004db4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	f003 020f 	and.w	r2, r3, #15
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	3338      	adds	r3, #56	; 0x38
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	4413      	add	r3, r2
 8004da8:	3304      	adds	r3, #4
 8004daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2201      	movs	r2, #1
 8004db0:	705a      	strb	r2, [r3, #1]
 8004db2:	e00f      	b.n	8004dd4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004db4:	78fb      	ldrb	r3, [r7, #3]
 8004db6:	f003 020f 	and.w	r2, r3, #15
 8004dba:	4613      	mov	r3, r2
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	4413      	add	r3, r2
 8004dca:	3304      	adds	r3, #4
 8004dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_PCD_EP_Close+0x6e>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e00e      	b.n	8004e0c <HAL_PCD_EP_Close+0x8c>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68f9      	ldr	r1, [r7, #12]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f004 fc0b 	bl	8009618 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	607a      	str	r2, [r7, #4]
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	460b      	mov	r3, r1
 8004e22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e24:	7afb      	ldrb	r3, [r7, #11]
 8004e26:	f003 020f 	and.w	r2, r3, #15
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4413      	add	r3, r2
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2200      	movs	r2, #0
 8004e54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e56:	7afb      	ldrb	r3, [r7, #11]
 8004e58:	f003 030f 	and.w	r3, r3, #15
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d102      	bne.n	8004e70 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e70:	7afb      	ldrb	r3, [r7, #11]
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	461a      	mov	r2, r3
 8004e86:	6979      	ldr	r1, [r7, #20]
 8004e88:	f004 fef2 	bl	8009c70 <USB_EP0StartXfer>
 8004e8c:	e008      	b.n	8004ea0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6979      	ldr	r1, [r7, #20]
 8004e9c:	f004 fc98 	bl	80097d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	f003 020f 	and.w	r2, r3, #15
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004ecc:	681b      	ldr	r3, [r3, #0]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b086      	sub	sp, #24
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eea:	7afb      	ldrb	r3, [r7, #11]
 8004eec:	f003 020f 	and.w	r2, r3, #15
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	3338      	adds	r3, #56	; 0x38
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4413      	add	r3, r2
 8004efe:	3304      	adds	r3, #4
 8004f00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2200      	movs	r2, #0
 8004f12:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2201      	movs	r2, #1
 8004f18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f1a:	7afb      	ldrb	r3, [r7, #11]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d102      	bne.n	8004f34 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f34:	7afb      	ldrb	r3, [r7, #11]
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	6979      	ldr	r1, [r7, #20]
 8004f4c:	f004 fe90 	bl	8009c70 <USB_EP0StartXfer>
 8004f50:	e008      	b.n	8004f64 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6979      	ldr	r1, [r7, #20]
 8004f60:	f004 fc36 	bl	80097d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	460b      	mov	r3, r1
 8004f78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	f003 020f 	and.w	r2, r3, #15
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d901      	bls.n	8004f8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e050      	b.n	800502e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	da0f      	bge.n	8004fb4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	f003 020f 	and.w	r2, r3, #15
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	3338      	adds	r3, #56	; 0x38
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3304      	adds	r3, #4
 8004faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	705a      	strb	r2, [r3, #1]
 8004fb2:	e00d      	b.n	8004fd0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fb4:	78fa      	ldrb	r2, [r7, #3]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fd6:	78fb      	ldrb	r3, [r7, #3]
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_PCD_EP_SetStall+0x82>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e01e      	b.n	800502e <HAL_PCD_EP_SetStall+0xc0>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68f9      	ldr	r1, [r7, #12]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f005 f8d2 	bl	800a1a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10a      	bne.n	8005024 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	b2d9      	uxtb	r1, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800501e:	461a      	mov	r2, r3
 8005020:	f005 fac4 	bl	800a5ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	f003 020f 	and.w	r2, r3, #15
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	429a      	cmp	r2, r3
 800504e:	d901      	bls.n	8005054 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e042      	b.n	80050da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005058:	2b00      	cmp	r3, #0
 800505a:	da0f      	bge.n	800507c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800505c:	78fb      	ldrb	r3, [r7, #3]
 800505e:	f003 020f 	and.w	r2, r3, #15
 8005062:	4613      	mov	r3, r2
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	3338      	adds	r3, #56	; 0x38
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	4413      	add	r3, r2
 8005070:	3304      	adds	r3, #4
 8005072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	705a      	strb	r2, [r3, #1]
 800507a:	e00f      	b.n	800509c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800507c:	78fb      	ldrb	r3, [r7, #3]
 800507e:	f003 020f 	and.w	r2, r3, #15
 8005082:	4613      	mov	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	4413      	add	r3, r2
 8005092:	3304      	adds	r3, #4
 8005094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_PCD_EP_ClrStall+0x86>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e00e      	b.n	80050da <HAL_PCD_EP_ClrStall+0xa4>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68f9      	ldr	r1, [r7, #12]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f005 f8da 	bl	800a284 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	460b      	mov	r3, r1
 80050ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80050ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	da0c      	bge.n	8005110 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	f003 020f 	and.w	r2, r3, #15
 80050fc:	4613      	mov	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	3338      	adds	r3, #56	; 0x38
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	4413      	add	r3, r2
 800510a:	3304      	adds	r3, #4
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	e00c      	b.n	800512a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	f003 020f 	and.w	r2, r3, #15
 8005116:	4613      	mov	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	3304      	adds	r3, #4
 8005128:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68f9      	ldr	r1, [r7, #12]
 8005130:	4618      	mov	r0, r3
 8005132:	f004 fef9 	bl	8009f28 <USB_EPStopXfer>
 8005136:	4603      	mov	r3, r0
 8005138:	72fb      	strb	r3, [r7, #11]

  return ret;
 800513a:	7afb      	ldrb	r3, [r7, #11]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	; 0x28
 8005148:	af02      	add	r7, sp, #8
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	4613      	mov	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	3338      	adds	r3, #56	; 0x38
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	4413      	add	r3, r2
 8005168:	3304      	adds	r3, #4
 800516a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a1a      	ldr	r2, [r3, #32]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	429a      	cmp	r2, r3
 8005176:	d901      	bls.n	800517c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e06c      	b.n	8005256 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	699a      	ldr	r2, [r3, #24]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	429a      	cmp	r2, r3
 8005190:	d902      	bls.n	8005198 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	3303      	adds	r3, #3
 800519c:	089b      	lsrs	r3, r3, #2
 800519e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051a0:	e02b      	b.n	80051fa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	699a      	ldr	r2, [r3, #24]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d902      	bls.n	80051be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	3303      	adds	r3, #3
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6919      	ldr	r1, [r3, #16]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	4603      	mov	r3, r0
 80051dc:	6978      	ldr	r0, [r7, #20]
 80051de:	f004 ff4d 	bl	800a07c <USB_WritePacket>

    ep->xfer_buff  += len;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	441a      	add	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1a      	ldr	r2, [r3, #32]
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	441a      	add	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	429a      	cmp	r2, r3
 800520e:	d809      	bhi.n	8005224 <PCD_WriteEmptyTxFifo+0xe0>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a1a      	ldr	r2, [r3, #32]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005218:	429a      	cmp	r2, r3
 800521a:	d203      	bcs.n	8005224 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1be      	bne.n	80051a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	699a      	ldr	r2, [r3, #24]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	429a      	cmp	r2, r3
 800522e:	d811      	bhi.n	8005254 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	2201      	movs	r2, #1
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	43db      	mvns	r3, r3
 800524a:	6939      	ldr	r1, [r7, #16]
 800524c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005250:	4013      	ands	r3, r2
 8005252:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	333c      	adds	r3, #60	; 0x3c
 8005278:	3304      	adds	r3, #4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d17b      	bne.n	800538e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d015      	beq.n	80052cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	4a61      	ldr	r2, [pc, #388]	; (8005428 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	f240 80b9 	bls.w	800541c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80b3 	beq.w	800541c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c2:	461a      	mov	r2, r3
 80052c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052c8:	6093      	str	r3, [r2, #8]
 80052ca:	e0a7      	b.n	800541c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e2:	461a      	mov	r2, r3
 80052e4:	2320      	movs	r3, #32
 80052e6:	6093      	str	r3, [r2, #8]
 80052e8:	e098      	b.n	800541c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f040 8093 	bne.w	800541c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	4a4b      	ldr	r2, [pc, #300]	; (8005428 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d90f      	bls.n	800531e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005314:	461a      	mov	r2, r3
 8005316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800531a:	6093      	str	r3, [r2, #8]
 800531c:	e07e      	b.n	800541c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	4613      	mov	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	4413      	add	r3, r2
 8005330:	3304      	adds	r3, #4
 8005332:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	69da      	ldr	r2, [r3, #28]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	0159      	lsls	r1, r3, #5
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	440b      	add	r3, r1
 8005340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800534a:	1ad2      	subs	r2, r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d114      	bne.n	8005380 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005368:	461a      	mov	r2, r3
 800536a:	2101      	movs	r1, #1
 800536c:	f005 f91e 	bl	800a5ac <USB_EP0_OutStart>
 8005370:	e006      	b.n	8005380 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	441a      	add	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f00a fcde 	bl	800fd48 <HAL_PCD_DataOutStageCallback>
 800538c:	e046      	b.n	800541c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	4a26      	ldr	r2, [pc, #152]	; (800542c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d124      	bne.n	80053e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	461a      	mov	r2, r3
 80053ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053b2:	6093      	str	r3, [r2, #8]
 80053b4:	e032      	b.n	800541c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053cc:	461a      	mov	r2, r3
 80053ce:	2320      	movs	r3, #32
 80053d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f00a fcb5 	bl	800fd48 <HAL_PCD_DataOutStageCallback>
 80053de:	e01d      	b.n	800541c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d114      	bne.n	8005410 <PCD_EP_OutXfrComplete_int+0x1b0>
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	4613      	mov	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d108      	bne.n	8005410 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005408:	461a      	mov	r2, r3
 800540a:	2100      	movs	r1, #0
 800540c:	f005 f8ce 	bl	800a5ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f00a fc96 	bl	800fd48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3720      	adds	r7, #32
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	4f54300a 	.word	0x4f54300a
 800542c:	4f54310a 	.word	0x4f54310a

08005430 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	333c      	adds	r3, #60	; 0x3c
 8005448:	3304      	adds	r3, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4a15      	ldr	r2, [pc, #84]	; (80054b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d90e      	bls.n	8005484 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800546c:	2b00      	cmp	r3, #0
 800546e:	d009      	beq.n	8005484 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547c:	461a      	mov	r2, r3
 800547e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005482:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f00a fc4d 	bl	800fd24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d90c      	bls.n	80054ac <PCD_EP_OutSetupPacket_int+0x7c>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d108      	bne.n	80054ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054a4:	461a      	mov	r2, r3
 80054a6:	2101      	movs	r1, #1
 80054a8:	f005 f880 	bl	800a5ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	4f54300a 	.word	0x4f54300a

080054bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	70fb      	strb	r3, [r7, #3]
 80054c8:	4613      	mov	r3, r2
 80054ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d107      	bne.n	80054ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80054da:	883b      	ldrh	r3, [r7, #0]
 80054dc:	0419      	lsls	r1, r3, #16
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	629a      	str	r2, [r3, #40]	; 0x28
 80054e8:	e028      	b.n	800553c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f0:	0c1b      	lsrs	r3, r3, #16
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	4413      	add	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054f8:	2300      	movs	r3, #0
 80054fa:	73fb      	strb	r3, [r7, #15]
 80054fc:	e00d      	b.n	800551a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	7bfb      	ldrb	r3, [r7, #15]
 8005504:	3340      	adds	r3, #64	; 0x40
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	0c1b      	lsrs	r3, r3, #16
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	4413      	add	r3, r2
 8005512:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	3301      	adds	r3, #1
 8005518:	73fb      	strb	r3, [r7, #15]
 800551a:	7bfa      	ldrb	r2, [r7, #15]
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	3b01      	subs	r3, #1
 8005520:	429a      	cmp	r2, r3
 8005522:	d3ec      	bcc.n	80054fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005524:	883b      	ldrh	r3, [r7, #0]
 8005526:	0418      	lsls	r0, r3, #16
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6819      	ldr	r1, [r3, #0]
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	3b01      	subs	r3, #1
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	4302      	orrs	r2, r0
 8005534:	3340      	adds	r3, #64	; 0x40
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	460b      	mov	r3, r1
 8005554:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	887a      	ldrh	r2, [r7, #2]
 800555c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800559a:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800559c:	4313      	orrs	r3, r2
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	10000003 	.word	0x10000003

080055b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80055bc:	2300      	movs	r3, #0
 80055be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e29b      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 8087 	beq.w	80056e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055d8:	4b96      	ldr	r3, [pc, #600]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 030c 	and.w	r3, r3, #12
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d00c      	beq.n	80055fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055e4:	4b93      	ldr	r3, [pc, #588]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 030c 	and.w	r3, r3, #12
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d112      	bne.n	8005616 <HAL_RCC_OscConfig+0x62>
 80055f0:	4b90      	ldr	r3, [pc, #576]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055fc:	d10b      	bne.n	8005616 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fe:	4b8d      	ldr	r3, [pc, #564]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d06c      	beq.n	80056e4 <HAL_RCC_OscConfig+0x130>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d168      	bne.n	80056e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e275      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800561e:	d106      	bne.n	800562e <HAL_RCC_OscConfig+0x7a>
 8005620:	4b84      	ldr	r3, [pc, #528]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a83      	ldr	r2, [pc, #524]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	e02e      	b.n	800568c <HAL_RCC_OscConfig+0xd8>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10c      	bne.n	8005650 <HAL_RCC_OscConfig+0x9c>
 8005636:	4b7f      	ldr	r3, [pc, #508]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a7e      	ldr	r2, [pc, #504]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 800563c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	4b7c      	ldr	r3, [pc, #496]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a7b      	ldr	r2, [pc, #492]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005648:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	e01d      	b.n	800568c <HAL_RCC_OscConfig+0xd8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005658:	d10c      	bne.n	8005674 <HAL_RCC_OscConfig+0xc0>
 800565a:	4b76      	ldr	r3, [pc, #472]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a75      	ldr	r2, [pc, #468]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	4b73      	ldr	r3, [pc, #460]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a72      	ldr	r2, [pc, #456]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 800566c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	e00b      	b.n	800568c <HAL_RCC_OscConfig+0xd8>
 8005674:	4b6f      	ldr	r3, [pc, #444]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a6e      	ldr	r2, [pc, #440]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 800567a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	4b6c      	ldr	r3, [pc, #432]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a6b      	ldr	r2, [pc, #428]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800568a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d013      	beq.n	80056bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005694:	f7fc fa6a 	bl	8001b6c <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569a:	e008      	b.n	80056ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800569c:	f7fc fa66 	bl	8001b6c <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b64      	cmp	r3, #100	; 0x64
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e229      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ae:	4b61      	ldr	r3, [pc, #388]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0f0      	beq.n	800569c <HAL_RCC_OscConfig+0xe8>
 80056ba:	e014      	b.n	80056e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056bc:	f7fc fa56 	bl	8001b6c <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c4:	f7fc fa52 	bl	8001b6c <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b64      	cmp	r3, #100	; 0x64
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e215      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056d6:	4b57      	ldr	r3, [pc, #348]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f0      	bne.n	80056c4 <HAL_RCC_OscConfig+0x110>
 80056e2:	e000      	b.n	80056e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d069      	beq.n	80057c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056f2:	4b50      	ldr	r3, [pc, #320]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 030c 	and.w	r3, r3, #12
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00b      	beq.n	8005716 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056fe:	4b4d      	ldr	r3, [pc, #308]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 030c 	and.w	r3, r3, #12
 8005706:	2b08      	cmp	r3, #8
 8005708:	d11c      	bne.n	8005744 <HAL_RCC_OscConfig+0x190>
 800570a:	4b4a      	ldr	r3, [pc, #296]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d116      	bne.n	8005744 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005716:	4b47      	ldr	r3, [pc, #284]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d005      	beq.n	800572e <HAL_RCC_OscConfig+0x17a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d001      	beq.n	800572e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e1e9      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800572e:	4b41      	ldr	r3, [pc, #260]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	493d      	ldr	r1, [pc, #244]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 800573e:	4313      	orrs	r3, r2
 8005740:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005742:	e040      	b.n	80057c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d023      	beq.n	8005794 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800574c:	4b39      	ldr	r3, [pc, #228]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a38      	ldr	r2, [pc, #224]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005758:	f7fc fa08 	bl	8001b6c <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005760:	f7fc fa04 	bl	8001b6c <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e1c7      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005772:	4b30      	ldr	r3, [pc, #192]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0f0      	beq.n	8005760 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577e:	4b2d      	ldr	r3, [pc, #180]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	4929      	ldr	r1, [pc, #164]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 800578e:	4313      	orrs	r3, r2
 8005790:	600b      	str	r3, [r1, #0]
 8005792:	e018      	b.n	80057c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005794:	4b27      	ldr	r3, [pc, #156]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a26      	ldr	r2, [pc, #152]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 800579a:	f023 0301 	bic.w	r3, r3, #1
 800579e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fc f9e4 	bl	8001b6c <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a8:	f7fc f9e0 	bl	8001b6c <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e1a3      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ba:	4b1e      	ldr	r3, [pc, #120]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d038      	beq.n	8005844 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d019      	beq.n	800580e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057da:	4b16      	ldr	r3, [pc, #88]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 80057dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057de:	4a15      	ldr	r2, [pc, #84]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 80057e0:	f043 0301 	orr.w	r3, r3, #1
 80057e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e6:	f7fc f9c1 	bl	8001b6c <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ee:	f7fc f9bd 	bl	8001b6c <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e180      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005800:	4b0c      	ldr	r3, [pc, #48]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0f0      	beq.n	80057ee <HAL_RCC_OscConfig+0x23a>
 800580c:	e01a      	b.n	8005844 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800580e:	4b09      	ldr	r3, [pc, #36]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005812:	4a08      	ldr	r2, [pc, #32]	; (8005834 <HAL_RCC_OscConfig+0x280>)
 8005814:	f023 0301 	bic.w	r3, r3, #1
 8005818:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581a:	f7fc f9a7 	bl	8001b6c <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005820:	e00a      	b.n	8005838 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005822:	f7fc f9a3 	bl	8001b6c <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d903      	bls.n	8005838 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e166      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>
 8005834:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005838:	4b92      	ldr	r3, [pc, #584]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 800583a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1ee      	bne.n	8005822 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 80a4 	beq.w	800599a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005852:	4b8c      	ldr	r3, [pc, #560]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10d      	bne.n	800587a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800585e:	4b89      	ldr	r3, [pc, #548]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	4a88      	ldr	r2, [pc, #544]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005868:	6413      	str	r3, [r2, #64]	; 0x40
 800586a:	4b86      	ldr	r3, [pc, #536]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005872:	60bb      	str	r3, [r7, #8]
 8005874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005876:	2301      	movs	r3, #1
 8005878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800587a:	4b83      	ldr	r3, [pc, #524]	; (8005a88 <HAL_RCC_OscConfig+0x4d4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005882:	2b00      	cmp	r3, #0
 8005884:	d118      	bne.n	80058b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005886:	4b80      	ldr	r3, [pc, #512]	; (8005a88 <HAL_RCC_OscConfig+0x4d4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a7f      	ldr	r2, [pc, #508]	; (8005a88 <HAL_RCC_OscConfig+0x4d4>)
 800588c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005892:	f7fc f96b 	bl	8001b6c <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800589a:	f7fc f967 	bl	8001b6c <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b64      	cmp	r3, #100	; 0x64
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e12a      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058ac:	4b76      	ldr	r3, [pc, #472]	; (8005a88 <HAL_RCC_OscConfig+0x4d4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0f0      	beq.n	800589a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d106      	bne.n	80058ce <HAL_RCC_OscConfig+0x31a>
 80058c0:	4b70      	ldr	r3, [pc, #448]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c4:	4a6f      	ldr	r2, [pc, #444]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	6713      	str	r3, [r2, #112]	; 0x70
 80058cc:	e02d      	b.n	800592a <HAL_RCC_OscConfig+0x376>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10c      	bne.n	80058f0 <HAL_RCC_OscConfig+0x33c>
 80058d6:	4b6b      	ldr	r3, [pc, #428]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 80058d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058da:	4a6a      	ldr	r2, [pc, #424]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 80058dc:	f023 0301 	bic.w	r3, r3, #1
 80058e0:	6713      	str	r3, [r2, #112]	; 0x70
 80058e2:	4b68      	ldr	r3, [pc, #416]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 80058e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e6:	4a67      	ldr	r2, [pc, #412]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 80058e8:	f023 0304 	bic.w	r3, r3, #4
 80058ec:	6713      	str	r3, [r2, #112]	; 0x70
 80058ee:	e01c      	b.n	800592a <HAL_RCC_OscConfig+0x376>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	2b05      	cmp	r3, #5
 80058f6:	d10c      	bne.n	8005912 <HAL_RCC_OscConfig+0x35e>
 80058f8:	4b62      	ldr	r3, [pc, #392]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 80058fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fc:	4a61      	ldr	r2, [pc, #388]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 80058fe:	f043 0304 	orr.w	r3, r3, #4
 8005902:	6713      	str	r3, [r2, #112]	; 0x70
 8005904:	4b5f      	ldr	r3, [pc, #380]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005908:	4a5e      	ldr	r2, [pc, #376]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 800590a:	f043 0301 	orr.w	r3, r3, #1
 800590e:	6713      	str	r3, [r2, #112]	; 0x70
 8005910:	e00b      	b.n	800592a <HAL_RCC_OscConfig+0x376>
 8005912:	4b5c      	ldr	r3, [pc, #368]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	4a5b      	ldr	r2, [pc, #364]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	6713      	str	r3, [r2, #112]	; 0x70
 800591e:	4b59      	ldr	r3, [pc, #356]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	4a58      	ldr	r2, [pc, #352]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005924:	f023 0304 	bic.w	r3, r3, #4
 8005928:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d015      	beq.n	800595e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005932:	f7fc f91b 	bl	8001b6c <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005938:	e00a      	b.n	8005950 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593a:	f7fc f917 	bl	8001b6c <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	f241 3288 	movw	r2, #5000	; 0x1388
 8005948:	4293      	cmp	r3, r2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e0d8      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005950:	4b4c      	ldr	r3, [pc, #304]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0ee      	beq.n	800593a <HAL_RCC_OscConfig+0x386>
 800595c:	e014      	b.n	8005988 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595e:	f7fc f905 	bl	8001b6c <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005964:	e00a      	b.n	800597c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005966:	f7fc f901 	bl	8001b6c <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	f241 3288 	movw	r2, #5000	; 0x1388
 8005974:	4293      	cmp	r3, r2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e0c2      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800597c:	4b41      	ldr	r3, [pc, #260]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 800597e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1ee      	bne.n	8005966 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d105      	bne.n	800599a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800598e:	4b3d      	ldr	r3, [pc, #244]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	4a3c      	ldr	r2, [pc, #240]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005998:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 80ae 	beq.w	8005b00 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059a4:	4b37      	ldr	r3, [pc, #220]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f003 030c 	and.w	r3, r3, #12
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d06d      	beq.n	8005a8c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d14b      	bne.n	8005a50 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b8:	4b32      	ldr	r3, [pc, #200]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a31      	ldr	r2, [pc, #196]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 80059be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c4:	f7fc f8d2 	bl	8001b6c <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059cc:	f7fc f8ce 	bl	8001b6c <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e091      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059de:	4b29      	ldr	r3, [pc, #164]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1f0      	bne.n	80059cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69da      	ldr	r2, [r3, #28]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	019b      	lsls	r3, r3, #6
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	085b      	lsrs	r3, r3, #1
 8005a02:	3b01      	subs	r3, #1
 8005a04:	041b      	lsls	r3, r3, #16
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	061b      	lsls	r3, r3, #24
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	071b      	lsls	r3, r3, #28
 8005a16:	491b      	ldr	r1, [pc, #108]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a1c:	4b19      	ldr	r3, [pc, #100]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a18      	ldr	r2, [pc, #96]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a28:	f7fc f8a0 	bl	8001b6c <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a30:	f7fc f89c 	bl	8001b6c <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e05f      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a42:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0f0      	beq.n	8005a30 <HAL_RCC_OscConfig+0x47c>
 8005a4e:	e057      	b.n	8005b00 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a50:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a0b      	ldr	r2, [pc, #44]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5c:	f7fc f886 	bl	8001b6c <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a64:	f7fc f882 	bl	8001b6c <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e045      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a76:	4b03      	ldr	r3, [pc, #12]	; (8005a84 <HAL_RCC_OscConfig+0x4d0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f0      	bne.n	8005a64 <HAL_RCC_OscConfig+0x4b0>
 8005a82:	e03d      	b.n	8005b00 <HAL_RCC_OscConfig+0x54c>
 8005a84:	40023800 	.word	0x40023800
 8005a88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005a8c:	4b1f      	ldr	r3, [pc, #124]	; (8005b0c <HAL_RCC_OscConfig+0x558>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d030      	beq.n	8005afc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d129      	bne.n	8005afc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d122      	bne.n	8005afc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005abc:	4013      	ands	r3, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ac2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d119      	bne.n	8005afc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	085b      	lsrs	r3, r3, #1
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d10f      	bne.n	8005afc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d107      	bne.n	8005afc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d001      	beq.n	8005b00 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40023800 	.word	0x40023800

08005b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e0d0      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b28:	4b6a      	ldr	r3, [pc, #424]	; (8005cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d910      	bls.n	8005b58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b36:	4b67      	ldr	r3, [pc, #412]	; (8005cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f023 020f 	bic.w	r2, r3, #15
 8005b3e:	4965      	ldr	r1, [pc, #404]	; (8005cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b46:	4b63      	ldr	r3, [pc, #396]	; (8005cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d001      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0b8      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d020      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b70:	4b59      	ldr	r3, [pc, #356]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	4a58      	ldr	r2, [pc, #352]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b88:	4b53      	ldr	r3, [pc, #332]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	4a52      	ldr	r2, [pc, #328]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b94:	4b50      	ldr	r3, [pc, #320]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	494d      	ldr	r1, [pc, #308]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d040      	beq.n	8005c34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d107      	bne.n	8005bca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bba:	4b47      	ldr	r3, [pc, #284]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d115      	bne.n	8005bf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e07f      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d107      	bne.n	8005be2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bd2:	4b41      	ldr	r3, [pc, #260]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d109      	bne.n	8005bf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e073      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be2:	4b3d      	ldr	r3, [pc, #244]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e06b      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bf2:	4b39      	ldr	r3, [pc, #228]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f023 0203 	bic.w	r2, r3, #3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	4936      	ldr	r1, [pc, #216]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c04:	f7fb ffb2 	bl	8001b6c <HAL_GetTick>
 8005c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c0a:	e00a      	b.n	8005c22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c0c:	f7fb ffae 	bl	8001b6c <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e053      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c22:	4b2d      	ldr	r3, [pc, #180]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 020c 	and.w	r2, r3, #12
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d1eb      	bne.n	8005c0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c34:	4b27      	ldr	r3, [pc, #156]	; (8005cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 030f 	and.w	r3, r3, #15
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d210      	bcs.n	8005c64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c42:	4b24      	ldr	r3, [pc, #144]	; (8005cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f023 020f 	bic.w	r2, r3, #15
 8005c4a:	4922      	ldr	r1, [pc, #136]	; (8005cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c52:	4b20      	ldr	r3, [pc, #128]	; (8005cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d001      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e032      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d008      	beq.n	8005c82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c70:	4b19      	ldr	r3, [pc, #100]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	4916      	ldr	r1, [pc, #88]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d009      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	490e      	ldr	r1, [pc, #56]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ca2:	f000 f821 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	490a      	ldr	r1, [pc, #40]	; (8005cdc <HAL_RCC_ClockConfig+0x1cc>)
 8005cb4:	5ccb      	ldrb	r3, [r1, r3]
 8005cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cba:	4a09      	ldr	r2, [pc, #36]	; (8005ce0 <HAL_RCC_ClockConfig+0x1d0>)
 8005cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005cbe:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <HAL_RCC_ClockConfig+0x1d4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fb ff0e 	bl	8001ae4 <HAL_InitTick>

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	40023c00 	.word	0x40023c00
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	080119fc 	.word	0x080119fc
 8005ce0:	20000000 	.word	0x20000000
 8005ce4:	20000004 	.word	0x20000004

08005ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cec:	b094      	sub	sp, #80	; 0x50
 8005cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d00:	4b79      	ldr	r3, [pc, #484]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 030c 	and.w	r3, r3, #12
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d00d      	beq.n	8005d28 <HAL_RCC_GetSysClockFreq+0x40>
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	f200 80e1 	bhi.w	8005ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0x34>
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d003      	beq.n	8005d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d1a:	e0db      	b.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d1c:	4b73      	ldr	r3, [pc, #460]	; (8005eec <HAL_RCC_GetSysClockFreq+0x204>)
 8005d1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d20:	e0db      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d22:	4b73      	ldr	r3, [pc, #460]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d26:	e0d8      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d28:	4b6f      	ldr	r3, [pc, #444]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d30:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005d32:	4b6d      	ldr	r3, [pc, #436]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d063      	beq.n	8005e06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d3e:	4b6a      	ldr	r3, [pc, #424]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	099b      	lsrs	r3, r3, #6
 8005d44:	2200      	movs	r2, #0
 8005d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d50:	633b      	str	r3, [r7, #48]	; 0x30
 8005d52:	2300      	movs	r3, #0
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
 8005d56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	f04f 0000 	mov.w	r0, #0
 8005d62:	f04f 0100 	mov.w	r1, #0
 8005d66:	0159      	lsls	r1, r3, #5
 8005d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d6c:	0150      	lsls	r0, r2, #5
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	4621      	mov	r1, r4
 8005d74:	1a51      	subs	r1, r2, r1
 8005d76:	6139      	str	r1, [r7, #16]
 8005d78:	4629      	mov	r1, r5
 8005d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d8c:	4659      	mov	r1, fp
 8005d8e:	018b      	lsls	r3, r1, #6
 8005d90:	4651      	mov	r1, sl
 8005d92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d96:	4651      	mov	r1, sl
 8005d98:	018a      	lsls	r2, r1, #6
 8005d9a:	4651      	mov	r1, sl
 8005d9c:	ebb2 0801 	subs.w	r8, r2, r1
 8005da0:	4659      	mov	r1, fp
 8005da2:	eb63 0901 	sbc.w	r9, r3, r1
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dba:	4690      	mov	r8, r2
 8005dbc:	4699      	mov	r9, r3
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	eb18 0303 	adds.w	r3, r8, r3
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	eb49 0303 	adc.w	r3, r9, r3
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dda:	4629      	mov	r1, r5
 8005ddc:	024b      	lsls	r3, r1, #9
 8005dde:	4621      	mov	r1, r4
 8005de0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005de4:	4621      	mov	r1, r4
 8005de6:	024a      	lsls	r2, r1, #9
 8005de8:	4610      	mov	r0, r2
 8005dea:	4619      	mov	r1, r3
 8005dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dee:	2200      	movs	r2, #0
 8005df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005df4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005df8:	f7fa fa72 	bl	80002e0 <__aeabi_uldivmod>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4613      	mov	r3, r2
 8005e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e04:	e058      	b.n	8005eb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e06:	4b38      	ldr	r3, [pc, #224]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	099b      	lsrs	r3, r3, #6
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	4611      	mov	r1, r2
 8005e12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e16:	623b      	str	r3, [r7, #32]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e20:	4642      	mov	r2, r8
 8005e22:	464b      	mov	r3, r9
 8005e24:	f04f 0000 	mov.w	r0, #0
 8005e28:	f04f 0100 	mov.w	r1, #0
 8005e2c:	0159      	lsls	r1, r3, #5
 8005e2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e32:	0150      	lsls	r0, r2, #5
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4641      	mov	r1, r8
 8005e3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e3e:	4649      	mov	r1, r9
 8005e40:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	f04f 0300 	mov.w	r3, #0
 8005e4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e58:	ebb2 040a 	subs.w	r4, r2, sl
 8005e5c:	eb63 050b 	sbc.w	r5, r3, fp
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	00eb      	lsls	r3, r5, #3
 8005e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e6e:	00e2      	lsls	r2, r4, #3
 8005e70:	4614      	mov	r4, r2
 8005e72:	461d      	mov	r5, r3
 8005e74:	4643      	mov	r3, r8
 8005e76:	18e3      	adds	r3, r4, r3
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	eb45 0303 	adc.w	r3, r5, r3
 8005e80:	607b      	str	r3, [r7, #4]
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e8e:	4629      	mov	r1, r5
 8005e90:	028b      	lsls	r3, r1, #10
 8005e92:	4621      	mov	r1, r4
 8005e94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e98:	4621      	mov	r1, r4
 8005e9a:	028a      	lsls	r2, r1, #10
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	61fa      	str	r2, [r7, #28]
 8005ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eac:	f7fa fa18 	bl	80002e0 <__aeabi_uldivmod>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	0c1b      	lsrs	r3, r3, #16
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005ec8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ed2:	e002      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ed4:	4b05      	ldr	r3, [pc, #20]	; (8005eec <HAL_RCC_GetSysClockFreq+0x204>)
 8005ed6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3750      	adds	r7, #80	; 0x50
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	00f42400 	.word	0x00f42400
 8005ef0:	007a1200 	.word	0x007a1200

08005ef4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ef8:	4b03      	ldr	r3, [pc, #12]	; (8005f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8005efa:	681b      	ldr	r3, [r3, #0]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	20000000 	.word	0x20000000

08005f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f10:	f7ff fff0 	bl	8005ef4 <HAL_RCC_GetHCLKFreq>
 8005f14:	4602      	mov	r2, r0
 8005f16:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	0a9b      	lsrs	r3, r3, #10
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	4903      	ldr	r1, [pc, #12]	; (8005f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f22:	5ccb      	ldrb	r3, [r1, r3]
 8005f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40023800 	.word	0x40023800
 8005f30:	08011a0c 	.word	0x08011a0c

08005f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f38:	f7ff ffdc 	bl	8005ef4 <HAL_RCC_GetHCLKFreq>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	0b5b      	lsrs	r3, r3, #13
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	4903      	ldr	r1, [pc, #12]	; (8005f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f4a:	5ccb      	ldrb	r3, [r1, r3]
 8005f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40023800 	.word	0x40023800
 8005f58:	08011a0c 	.word	0x08011a0c

08005f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d012      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f84:	4b69      	ldr	r3, [pc, #420]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	4a68      	ldr	r2, [pc, #416]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f8e:	6093      	str	r3, [r2, #8]
 8005f90:	4b66      	ldr	r3, [pc, #408]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f98:	4964      	ldr	r1, [pc, #400]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d017      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fb6:	4b5d      	ldr	r3, [pc, #372]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc4:	4959      	ldr	r1, [pc, #356]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fd4:	d101      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d017      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ff2:	4b4e      	ldr	r3, [pc, #312]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ff8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	494a      	ldr	r1, [pc, #296]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006010:	d101      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006012:	2301      	movs	r3, #1
 8006014:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800601e:	2301      	movs	r3, #1
 8006020:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800602e:	2301      	movs	r3, #1
 8006030:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 808b 	beq.w	8006156 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006040:	4b3a      	ldr	r3, [pc, #232]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	4a39      	ldr	r2, [pc, #228]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800604a:	6413      	str	r3, [r2, #64]	; 0x40
 800604c:	4b37      	ldr	r3, [pc, #220]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800604e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006058:	4b35      	ldr	r3, [pc, #212]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a34      	ldr	r2, [pc, #208]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800605e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006062:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006064:	f7fb fd82 	bl	8001b6c <HAL_GetTick>
 8006068:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800606a:	e008      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606c:	f7fb fd7e 	bl	8001b6c <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b64      	cmp	r3, #100	; 0x64
 8006078:	d901      	bls.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e38f      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800607e:	4b2c      	ldr	r3, [pc, #176]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0f0      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800608a:	4b28      	ldr	r3, [pc, #160]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800608c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006092:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d035      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d02e      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060a8:	4b20      	ldr	r3, [pc, #128]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060b2:	4b1e      	ldr	r3, [pc, #120]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	4a1d      	ldr	r2, [pc, #116]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060be:	4b1b      	ldr	r3, [pc, #108]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c2:	4a1a      	ldr	r2, [pc, #104]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80060ca:	4a18      	ldr	r2, [pc, #96]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80060d0:	4b16      	ldr	r3, [pc, #88]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d114      	bne.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060dc:	f7fb fd46 	bl	8001b6c <HAL_GetTick>
 80060e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e2:	e00a      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060e4:	f7fb fd42 	bl	8001b6c <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d901      	bls.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e351      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060fa:	4b0c      	ldr	r3, [pc, #48]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0ee      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006112:	d111      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006114:	4b05      	ldr	r3, [pc, #20]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006120:	4b04      	ldr	r3, [pc, #16]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006122:	400b      	ands	r3, r1
 8006124:	4901      	ldr	r1, [pc, #4]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006126:	4313      	orrs	r3, r2
 8006128:	608b      	str	r3, [r1, #8]
 800612a:	e00b      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800612c:	40023800 	.word	0x40023800
 8006130:	40007000 	.word	0x40007000
 8006134:	0ffffcff 	.word	0x0ffffcff
 8006138:	4bac      	ldr	r3, [pc, #688]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	4aab      	ldr	r2, [pc, #684]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800613e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006142:	6093      	str	r3, [r2, #8]
 8006144:	4ba9      	ldr	r3, [pc, #676]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006146:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006150:	49a6      	ldr	r1, [pc, #664]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006152:	4313      	orrs	r3, r2
 8006154:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0310 	and.w	r3, r3, #16
 800615e:	2b00      	cmp	r3, #0
 8006160:	d010      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006162:	4ba2      	ldr	r3, [pc, #648]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006168:	4aa0      	ldr	r2, [pc, #640]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800616a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800616e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006172:	4b9e      	ldr	r3, [pc, #632]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006174:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617c:	499b      	ldr	r1, [pc, #620]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006190:	4b96      	ldr	r3, [pc, #600]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800619e:	4993      	ldr	r1, [pc, #588]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061b2:	4b8e      	ldr	r3, [pc, #568]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061c0:	498a      	ldr	r1, [pc, #552]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061d4:	4b85      	ldr	r3, [pc, #532]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061e2:	4982      	ldr	r1, [pc, #520]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061f6:	4b7d      	ldr	r3, [pc, #500]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006204:	4979      	ldr	r1, [pc, #484]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006218:	4b74      	ldr	r3, [pc, #464]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621e:	f023 0203 	bic.w	r2, r3, #3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006226:	4971      	ldr	r1, [pc, #452]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800623a:	4b6c      	ldr	r3, [pc, #432]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800623c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006240:	f023 020c 	bic.w	r2, r3, #12
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006248:	4968      	ldr	r1, [pc, #416]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800625c:	4b63      	ldr	r3, [pc, #396]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006262:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800626a:	4960      	ldr	r1, [pc, #384]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800627e:	4b5b      	ldr	r3, [pc, #364]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006284:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628c:	4957      	ldr	r1, [pc, #348]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062a0:	4b52      	ldr	r3, [pc, #328]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ae:	494f      	ldr	r1, [pc, #316]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80062c2:	4b4a      	ldr	r3, [pc, #296]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d0:	4946      	ldr	r1, [pc, #280]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80062e4:	4b41      	ldr	r3, [pc, #260]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f2:	493e      	ldr	r1, [pc, #248]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006306:	4b39      	ldr	r3, [pc, #228]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006314:	4935      	ldr	r1, [pc, #212]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006328:	4b30      	ldr	r3, [pc, #192]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800632a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006336:	492d      	ldr	r1, [pc, #180]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d011      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800634a:	4b28      	ldr	r3, [pc, #160]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800634c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006350:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006358:	4924      	ldr	r1, [pc, #144]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006368:	d101      	bne.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800636a:	2301      	movs	r3, #1
 800636c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800637a:	2301      	movs	r3, #1
 800637c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800638a:	4b18      	ldr	r3, [pc, #96]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800638c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006390:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006398:	4914      	ldr	r1, [pc, #80]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800639a:	4313      	orrs	r3, r2
 800639c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00b      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80063ac:	4b0f      	ldr	r3, [pc, #60]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063bc:	490b      	ldr	r1, [pc, #44]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00f      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80063d0:	4b06      	ldr	r3, [pc, #24]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063e0:	4902      	ldr	r1, [pc, #8]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80063e8:	e002      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80063ea:	bf00      	nop
 80063ec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00b      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063fc:	4b8a      	ldr	r3, [pc, #552]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006402:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640c:	4986      	ldr	r1, [pc, #536]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800640e:	4313      	orrs	r3, r2
 8006410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00b      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006420:	4b81      	ldr	r3, [pc, #516]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006426:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006430:	497d      	ldr	r1, [pc, #500]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d006      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 80d6 	beq.w	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800644c:	4b76      	ldr	r3, [pc, #472]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a75      	ldr	r2, [pc, #468]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006452:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006456:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006458:	f7fb fb88 	bl	8001b6c <HAL_GetTick>
 800645c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800645e:	e008      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006460:	f7fb fb84 	bl	8001b6c <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b64      	cmp	r3, #100	; 0x64
 800646c:	d901      	bls.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e195      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006472:	4b6d      	ldr	r3, [pc, #436]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1f0      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d021      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648e:	2b00      	cmp	r3, #0
 8006490:	d11d      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006492:	4b65      	ldr	r3, [pc, #404]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006498:	0c1b      	lsrs	r3, r3, #16
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064a0:	4b61      	ldr	r3, [pc, #388]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a6:	0e1b      	lsrs	r3, r3, #24
 80064a8:	f003 030f 	and.w	r3, r3, #15
 80064ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	019a      	lsls	r2, r3, #6
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	041b      	lsls	r3, r3, #16
 80064b8:	431a      	orrs	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	061b      	lsls	r3, r3, #24
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	071b      	lsls	r3, r3, #28
 80064c6:	4958      	ldr	r1, [pc, #352]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d004      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064e2:	d00a      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d02e      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064f8:	d129      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80064fa:	4b4b      	ldr	r3, [pc, #300]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006500:	0c1b      	lsrs	r3, r3, #16
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006508:	4b47      	ldr	r3, [pc, #284]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800650a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800650e:	0f1b      	lsrs	r3, r3, #28
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	019a      	lsls	r2, r3, #6
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	041b      	lsls	r3, r3, #16
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	061b      	lsls	r3, r3, #24
 8006528:	431a      	orrs	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	071b      	lsls	r3, r3, #28
 800652e:	493e      	ldr	r1, [pc, #248]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006530:	4313      	orrs	r3, r2
 8006532:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006536:	4b3c      	ldr	r3, [pc, #240]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800653c:	f023 021f 	bic.w	r2, r3, #31
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	3b01      	subs	r3, #1
 8006546:	4938      	ldr	r1, [pc, #224]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006548:	4313      	orrs	r3, r2
 800654a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d01d      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800655a:	4b33      	ldr	r3, [pc, #204]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800655c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006560:	0e1b      	lsrs	r3, r3, #24
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006568:	4b2f      	ldr	r3, [pc, #188]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800656a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800656e:	0f1b      	lsrs	r3, r3, #28
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	019a      	lsls	r2, r3, #6
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	041b      	lsls	r3, r3, #16
 8006582:	431a      	orrs	r2, r3
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	061b      	lsls	r3, r3, #24
 8006588:	431a      	orrs	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	071b      	lsls	r3, r3, #28
 800658e:	4926      	ldr	r1, [pc, #152]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d011      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	019a      	lsls	r2, r3, #6
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	041b      	lsls	r3, r3, #16
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	061b      	lsls	r3, r3, #24
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	071b      	lsls	r3, r3, #28
 80065be:	491a      	ldr	r1, [pc, #104]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065c6:	4b18      	ldr	r3, [pc, #96]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a17      	ldr	r2, [pc, #92]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065d2:	f7fb facb 	bl	8001b6c <HAL_GetTick>
 80065d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065d8:	e008      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80065da:	f7fb fac7 	bl	8001b6c <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b64      	cmp	r3, #100	; 0x64
 80065e6:	d901      	bls.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e0d8      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065ec:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0f0      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	f040 80ce 	bne.w	800679c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006600:	4b09      	ldr	r3, [pc, #36]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a08      	ldr	r2, [pc, #32]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800660a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800660c:	f7fb faae 	bl	8001b6c <HAL_GetTick>
 8006610:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006612:	e00b      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006614:	f7fb faaa 	bl	8001b6c <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b64      	cmp	r3, #100	; 0x64
 8006620:	d904      	bls.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e0bb      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006626:	bf00      	nop
 8006628:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800662c:	4b5e      	ldr	r3, [pc, #376]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006638:	d0ec      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664a:	2b00      	cmp	r3, #0
 800664c:	d009      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006656:	2b00      	cmp	r3, #0
 8006658:	d02e      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d12a      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006662:	4b51      	ldr	r3, [pc, #324]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006668:	0c1b      	lsrs	r3, r3, #16
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006670:	4b4d      	ldr	r3, [pc, #308]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006676:	0f1b      	lsrs	r3, r3, #28
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	019a      	lsls	r2, r3, #6
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	041b      	lsls	r3, r3, #16
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	061b      	lsls	r3, r3, #24
 8006690:	431a      	orrs	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	071b      	lsls	r3, r3, #28
 8006696:	4944      	ldr	r1, [pc, #272]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006698:	4313      	orrs	r3, r2
 800669a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800669e:	4b42      	ldr	r3, [pc, #264]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ac:	3b01      	subs	r3, #1
 80066ae:	021b      	lsls	r3, r3, #8
 80066b0:	493d      	ldr	r1, [pc, #244]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d022      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066cc:	d11d      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066ce:	4b36      	ldr	r3, [pc, #216]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d4:	0e1b      	lsrs	r3, r3, #24
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066dc:	4b32      	ldr	r3, [pc, #200]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e2:	0f1b      	lsrs	r3, r3, #28
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	019a      	lsls	r2, r3, #6
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	041b      	lsls	r3, r3, #16
 80066f6:	431a      	orrs	r2, r3
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	061b      	lsls	r3, r3, #24
 80066fc:	431a      	orrs	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	071b      	lsls	r3, r3, #28
 8006702:	4929      	ldr	r1, [pc, #164]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006704:	4313      	orrs	r3, r2
 8006706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0308 	and.w	r3, r3, #8
 8006712:	2b00      	cmp	r3, #0
 8006714:	d028      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006716:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671c:	0e1b      	lsrs	r3, r3, #24
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006724:	4b20      	ldr	r3, [pc, #128]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672a:	0c1b      	lsrs	r3, r3, #16
 800672c:	f003 0303 	and.w	r3, r3, #3
 8006730:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	019a      	lsls	r2, r3, #6
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	431a      	orrs	r2, r3
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	061b      	lsls	r3, r3, #24
 8006742:	431a      	orrs	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	071b      	lsls	r3, r3, #28
 800674a:	4917      	ldr	r1, [pc, #92]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800674c:	4313      	orrs	r3, r2
 800674e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006752:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006758:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	4911      	ldr	r1, [pc, #68]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006762:	4313      	orrs	r3, r2
 8006764:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006768:	4b0f      	ldr	r3, [pc, #60]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a0e      	ldr	r2, [pc, #56]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800676e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006774:	f7fb f9fa 	bl	8001b6c <HAL_GetTick>
 8006778:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800677a:	e008      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800677c:	f7fb f9f6 	bl	8001b6c <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b64      	cmp	r3, #100	; 0x64
 8006788:	d901      	bls.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e007      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800678e:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800679a:	d1ef      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3720      	adds	r7, #32
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	40023800 	.word	0x40023800

080067ac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e022      	b.n	8006804 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d105      	bne.n	80067d6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7fa fdc1 	bl	8001358 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2203      	movs	r2, #3
 80067da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f814 	bl	800680c <HAL_SD_InitCard>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e00a      	b.n	8006804 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800680c:	b5b0      	push	{r4, r5, r7, lr}
 800680e:	b08e      	sub	sp, #56	; 0x38
 8006810:	af04      	add	r7, sp, #16
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006814:	2300      	movs	r3, #0
 8006816:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006818:	2300      	movs	r3, #0
 800681a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800681c:	2300      	movs	r3, #0
 800681e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006824:	2300      	movs	r3, #0
 8006826:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006828:	2376      	movs	r3, #118	; 0x76
 800682a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681d      	ldr	r5, [r3, #0]
 8006830:	466c      	mov	r4, sp
 8006832:	f107 0314 	add.w	r3, r7, #20
 8006836:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800683a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800683e:	f107 0308 	add.w	r3, r7, #8
 8006842:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006844:	4628      	mov	r0, r5
 8006846:	f001 fdc5 	bl	80083d4 <SDMMC_Init>
 800684a:	4603      	mov	r3, r0
 800684c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e059      	b.n	8006910 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800686a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4618      	mov	r0, r3
 8006872:	f001 fdf9 	bl	8008468 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006884:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006886:	2002      	movs	r0, #2
 8006888:	f7fb f97c 	bl	8001b84 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 ff59 	bl	8007744 <SD_PowerON>
 8006892:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00b      	beq.n	80068b2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	431a      	orrs	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e02e      	b.n	8006910 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fe78 	bl	80075a8 <SD_InitCard>
 80068b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00b      	beq.n	80068d8 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e01b      	b.n	8006910 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068e0:	4618      	mov	r0, r3
 80068e2:	f001 fe53 	bl	800858c <SDMMC_CmdBlockLength>
 80068e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00f      	beq.n	800690e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a09      	ldr	r2, [pc, #36]	; (8006918 <HAL_SD_InitCard+0x10c>)
 80068f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	431a      	orrs	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e000      	b.n	8006910 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3728      	adds	r7, #40	; 0x28
 8006914:	46bd      	mov	sp, r7
 8006916:	bdb0      	pop	{r4, r5, r7, pc}
 8006918:	004005ff 	.word	0x004005ff

0800691c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b08c      	sub	sp, #48	; 0x30
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d107      	bne.n	8006944 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e0c3      	b.n	8006acc <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b01      	cmp	r3, #1
 800694e:	f040 80bc 	bne.w	8006aca <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	441a      	add	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006962:	429a      	cmp	r2, r3
 8006964:	d907      	bls.n	8006976 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e0aa      	b.n	8006acc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2203      	movs	r2, #3
 800697a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2200      	movs	r2, #0
 8006984:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006994:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	4a4e      	ldr	r2, [pc, #312]	; (8006ad4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800699c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	4a4d      	ldr	r2, [pc, #308]	; (8006ad8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80069a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	2200      	movs	r2, #0
 80069ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	2200      	movs	r2, #0
 80069b4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3380      	adds	r3, #128	; 0x80
 80069dc:	4619      	mov	r1, r3
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	025b      	lsls	r3, r3, #9
 80069e4:	089b      	lsrs	r3, r3, #2
 80069e6:	f7fc f8b5 	bl	8002b54 <HAL_DMA_Start_IT>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d017      	beq.n	8006a20 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80069fe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a35      	ldr	r2, [pc, #212]	; (8006adc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e055      	b.n	8006acc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f042 0208 	orr.w	r2, r2, #8
 8006a2e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d002      	beq.n	8006a3e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	025b      	lsls	r3, r3, #9
 8006a3c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a42:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	025b      	lsls	r3, r3, #9
 8006a48:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006a4a:	2390      	movs	r3, #144	; 0x90
 8006a4c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006a4e:	2302      	movs	r3, #2
 8006a50:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006a56:	2301      	movs	r3, #1
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f107 0210 	add.w	r2, r7, #16
 8006a62:	4611      	mov	r1, r2
 8006a64:	4618      	mov	r0, r3
 8006a66:	f001 fd65 	bl	8008534 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d90a      	bls.n	8006a86 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2282      	movs	r2, #130	; 0x82
 8006a74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f001 fdc9 	bl	8008614 <SDMMC_CmdReadMultiBlock>
 8006a82:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006a84:	e009      	b.n	8006a9a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2281      	movs	r2, #129	; 0x81
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 fd9c 	bl	80085d0 <SDMMC_CmdReadSingleBlock>
 8006a98:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d012      	beq.n	8006ac6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a0d      	ldr	r2, [pc, #52]	; (8006adc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006aa6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e002      	b.n	8006acc <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	e000      	b.n	8006acc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006aca:	2302      	movs	r3, #2
  }
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3730      	adds	r7, #48	; 0x30
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	080073b7 	.word	0x080073b7
 8006ad8:	08007429 	.word	0x08007429
 8006adc:	004005ff 	.word	0x004005ff

08006ae0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08c      	sub	sp, #48	; 0x30
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d107      	bne.n	8006b08 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e0c6      	b.n	8006c96 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	f040 80bf 	bne.w	8006c94 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	441a      	add	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d907      	bls.n	8006b3a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e0ad      	b.n	8006c96 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2203      	movs	r2, #3
 8006b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2200      	movs	r2, #0
 8006b48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f042 021a 	orr.w	r2, r2, #26
 8006b58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5e:	4a50      	ldr	r2, [pc, #320]	; (8006ca0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006b60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b66:	4a4f      	ldr	r2, [pc, #316]	; (8006ca4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006b68:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	2200      	movs	r2, #0
 8006b70:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d002      	beq.n	8006b80 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	025b      	lsls	r3, r3, #9
 8006b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d90a      	bls.n	8006b9c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	22a0      	movs	r2, #160	; 0xa0
 8006b8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 fd82 	bl	800869c <SDMMC_CmdWriteMultiBlock>
 8006b98:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006b9a:	e009      	b.n	8006bb0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2290      	movs	r2, #144	; 0x90
 8006ba0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 fd55 	bl	8008658 <SDMMC_CmdWriteSingleBlock>
 8006bae:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d012      	beq.n	8006bdc <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a3b      	ldr	r2, [pc, #236]	; (8006ca8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006bbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e05c      	b.n	8006c96 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0208 	orr.w	r2, r2, #8
 8006bea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf0:	2240      	movs	r2, #64	; 0x40
 8006bf2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3380      	adds	r3, #128	; 0x80
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	025b      	lsls	r3, r3, #9
 8006c22:	089b      	lsrs	r3, r3, #2
 8006c24:	f7fb ff96 	bl	8002b54 <HAL_DMA_Start_IT>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d01a      	beq.n	8006c64 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 021a 	bic.w	r2, r2, #26
 8006c3c:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a19      	ldr	r2, [pc, #100]	; (8006ca8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006c44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e018      	b.n	8006c96 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c68:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	025b      	lsls	r3, r3, #9
 8006c6e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006c70:	2390      	movs	r3, #144	; 0x90
 8006c72:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f107 0210 	add.w	r2, r7, #16
 8006c88:	4611      	mov	r1, r2
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 fc52 	bl	8008534 <SDMMC_ConfigData>

      return HAL_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	e000      	b.n	8006c96 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006c94:	2302      	movs	r3, #2
  }
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3730      	adds	r7, #48	; 0x30
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	0800738d 	.word	0x0800738d
 8006ca4:	08007429 	.word	0x08007429
 8006ca8:	004005ff 	.word	0x004005ff

08006cac <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d008      	beq.n	8006cda <HAL_SD_IRQHandler+0x2e>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f003 0308 	and.w	r3, r3, #8
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fdec 	bl	80078b0 <SD_Read_IT>
 8006cd8:	e15a      	b.n	8006f90 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 808d 	beq.w	8006e04 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cf2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4b9a      	ldr	r3, [pc, #616]	; (8006f68 <HAL_SD_IRQHandler+0x2bc>)
 8006d00:	400b      	ands	r3, r1
 8006d02:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0201 	bic.w	r2, r2, #1
 8006d12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d039      	beq.n	8006d92 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d104      	bne.n	8006d32 <HAL_SD_IRQHandler+0x86>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d011      	beq.n	8006d56 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f001 fcd2 	bl	80086e0 <SDMMC_CmdStopTransfer>
 8006d3c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d008      	beq.n	8006d56 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f921 	bl	8006f98 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d5e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <HAL_SD_IRQHandler+0xd6>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f003 fd3c 	bl	800a800 <HAL_SD_RxCpltCallback>
 8006d88:	e102      	b.n	8006f90 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f003 fd2e 	bl	800a7ec <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006d90:	e0fe      	b.n	8006f90 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 80f9 	beq.w	8006f90 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d011      	beq.n	8006dcc <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f001 fc97 	bl	80086e0 <SDMMC_CmdStopTransfer>
 8006db2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d008      	beq.n	8006dcc <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f8e6 	bl	8006f98 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f040 80dc 	bne.w	8006f90 <HAL_SD_IRQHandler+0x2e4>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f040 80d6 	bne.w	8006f90 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0208 	bic.w	r2, r2, #8
 8006df2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f003 fcf5 	bl	800a7ec <HAL_SD_TxCpltCallback>
}
 8006e02:	e0c5      	b.n	8006f90 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d008      	beq.n	8006e24 <HAL_SD_IRQHandler+0x178>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f003 0308 	and.w	r3, r3, #8
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fd98 	bl	8007952 <SD_Write_IT>
 8006e22:	e0b5      	b.n	8006f90 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 80ae 	beq.w	8006f90 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d005      	beq.n	8006e4e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e46:	f043 0202 	orr.w	r2, r3, #2
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e54:	f003 0308 	and.w	r3, r3, #8
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	f043 0208 	orr.w	r2, r3, #8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d005      	beq.n	8006e82 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7a:	f043 0220 	orr.w	r2, r3, #32
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e88:	f003 0310 	and.w	r3, r3, #16
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e94:	f043 0210 	orr.w	r2, r3, #16
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f240 523a 	movw	r2, #1338	; 0x53a
 8006ea4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006eb4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f001 fc10 	bl	80086e0 <SDMMC_CmdStopTransfer>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f857 	bl	8006f98 <HAL_SD_ErrorCallback>
}
 8006eea:	e051      	b.n	8006f90 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d04c      	beq.n	8006f90 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f003 0310 	and.w	r3, r3, #16
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d104      	bne.n	8006f0a <HAL_SD_IRQHandler+0x25e>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d011      	beq.n	8006f2e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0e:	4a17      	ldr	r2, [pc, #92]	; (8006f6c <HAL_SD_IRQHandler+0x2c0>)
 8006f10:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fb fe7c 	bl	8002c14 <HAL_DMA_Abort_IT>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d036      	beq.n	8006f90 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 fad0 	bl	80074cc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f2c:	e030      	b.n	8006f90 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d104      	bne.n	8006f42 <HAL_SD_IRQHandler+0x296>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d018      	beq.n	8006f74 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	4a0a      	ldr	r2, [pc, #40]	; (8006f70 <HAL_SD_IRQHandler+0x2c4>)
 8006f48:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fb fe60 	bl	8002c14 <HAL_DMA_Abort_IT>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d01a      	beq.n	8006f90 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 faeb 	bl	800753a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f64:	e014      	b.n	8006f90 <HAL_SD_IRQHandler+0x2e4>
 8006f66:	bf00      	nop
 8006f68:	ffff3ec5 	.word	0xffff3ec5
 8006f6c:	080074cd 	.word	0x080074cd
 8006f70:	0800753b 	.word	0x0800753b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f003 fc25 	bl	800a7d8 <HAL_SD_AbortCallback>
}
 8006f8e:	e7ff      	b.n	8006f90 <HAL_SD_IRQHandler+0x2e4>
 8006f90:	bf00      	nop
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fba:	0f9b      	lsrs	r3, r3, #30
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fc6:	0e9b      	lsrs	r3, r3, #26
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fd8:	0e1b      	lsrs	r3, r3, #24
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	f003 0303 	and.w	r3, r3, #3
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fea:	0c1b      	lsrs	r3, r3, #16
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ff6:	0a1b      	lsrs	r3, r3, #8
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007002:	b2da      	uxtb	r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800700c:	0d1b      	lsrs	r3, r3, #20
 800700e:	b29a      	uxth	r2, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007018:	0c1b      	lsrs	r3, r3, #16
 800701a:	b2db      	uxtb	r3, r3
 800701c:	f003 030f 	and.w	r3, r3, #15
 8007020:	b2da      	uxtb	r2, r3
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800702a:	0bdb      	lsrs	r3, r3, #15
 800702c:	b2db      	uxtb	r3, r3
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	b2da      	uxtb	r2, r3
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800703c:	0b9b      	lsrs	r3, r3, #14
 800703e:	b2db      	uxtb	r3, r3
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	b2da      	uxtb	r2, r3
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800704e:	0b5b      	lsrs	r3, r3, #13
 8007050:	b2db      	uxtb	r3, r3
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	b2da      	uxtb	r2, r3
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007060:	0b1b      	lsrs	r3, r3, #12
 8007062:	b2db      	uxtb	r3, r3
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	b2da      	uxtb	r2, r3
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2200      	movs	r2, #0
 8007072:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007078:	2b00      	cmp	r3, #0
 800707a:	d163      	bne.n	8007144 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007080:	009a      	lsls	r2, r3, #2
 8007082:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007086:	4013      	ands	r3, r2
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800708c:	0f92      	lsrs	r2, r2, #30
 800708e:	431a      	orrs	r2, r3
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007098:	0edb      	lsrs	r3, r3, #27
 800709a:	b2db      	uxtb	r3, r3
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070aa:	0e1b      	lsrs	r3, r3, #24
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	f003 0307 	and.w	r3, r3, #7
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070bc:	0d5b      	lsrs	r3, r3, #21
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ce:	0c9b      	lsrs	r3, r3, #18
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e0:	0bdb      	lsrs	r3, r3, #15
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	7e1b      	ldrb	r3, [r3, #24]
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	3302      	adds	r3, #2
 8007104:	2201      	movs	r2, #1
 8007106:	fa02 f303 	lsl.w	r3, r2, r3
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800710e:	fb03 f202 	mul.w	r2, r3, r2
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	7a1b      	ldrb	r3, [r3, #8]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	f003 030f 	and.w	r3, r3, #15
 8007120:	2201      	movs	r2, #1
 8007122:	409a      	lsls	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007130:	0a52      	lsrs	r2, r2, #9
 8007132:	fb03 f202 	mul.w	r2, r3, r2
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007140:	661a      	str	r2, [r3, #96]	; 0x60
 8007142:	e031      	b.n	80071a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007148:	2b01      	cmp	r3, #1
 800714a:	d11d      	bne.n	8007188 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007150:	041b      	lsls	r3, r3, #16
 8007152:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800715a:	0c1b      	lsrs	r3, r3, #16
 800715c:	431a      	orrs	r2, r3
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	3301      	adds	r3, #1
 8007168:	029a      	lsls	r2, r3, #10
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800717c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	661a      	str	r2, [r3, #96]	; 0x60
 8007186:	e00f      	b.n	80071a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a58      	ldr	r2, [pc, #352]	; (80072f0 <HAL_SD_GetCardCSD+0x344>)
 800718e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e09d      	b.n	80072e4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ac:	0b9b      	lsrs	r3, r3, #14
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071be:	09db      	lsrs	r3, r3, #7
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e0:	0fdb      	lsrs	r3, r3, #31
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ec:	0f5b      	lsrs	r3, r3, #29
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	f003 0303 	and.w	r3, r3, #3
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fe:	0e9b      	lsrs	r3, r3, #26
 8007200:	b2db      	uxtb	r3, r3
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	b2da      	uxtb	r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007210:	0d9b      	lsrs	r3, r3, #22
 8007212:	b2db      	uxtb	r3, r3
 8007214:	f003 030f 	and.w	r3, r3, #15
 8007218:	b2da      	uxtb	r2, r3
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007222:	0d5b      	lsrs	r3, r3, #21
 8007224:	b2db      	uxtb	r3, r3
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	b2da      	uxtb	r2, r3
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723e:	0c1b      	lsrs	r3, r3, #16
 8007240:	b2db      	uxtb	r3, r3
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	b2da      	uxtb	r2, r3
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	0bdb      	lsrs	r3, r3, #15
 8007254:	b2db      	uxtb	r3, r3
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	b2da      	uxtb	r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007266:	0b9b      	lsrs	r3, r3, #14
 8007268:	b2db      	uxtb	r3, r3
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	b2da      	uxtb	r2, r3
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727a:	0b5b      	lsrs	r3, r3, #13
 800727c:	b2db      	uxtb	r3, r3
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	b2da      	uxtb	r2, r3
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728e:	0b1b      	lsrs	r3, r3, #12
 8007290:	b2db      	uxtb	r3, r3
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	b2da      	uxtb	r2, r3
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	0a9b      	lsrs	r3, r3, #10
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b6:	0a1b      	lsrs	r3, r3, #8
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	f003 0303 	and.w	r3, r3, #3
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	085b      	lsrs	r3, r3, #1
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	004005ff 	.word	0x004005ff

080072f4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007358:	f107 030c 	add.w	r3, r7, #12
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa7e 	bl	8007860 <SD_SendStatus>
 8007364:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d005      	beq.n	8007378 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	0a5b      	lsrs	r3, r3, #9
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007382:	693b      	ldr	r3, [r7, #16]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007398:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80073aa:	bf00      	nop
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c8:	2b82      	cmp	r3, #130	; 0x82
 80073ca:	d111      	bne.n	80073f0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f001 f985 	bl	80086e0 <SDMMC_CmdStopTransfer>
 80073d6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d008      	beq.n	80073f0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	431a      	orrs	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f7ff fdd4 	bl	8006f98 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0208 	bic.w	r2, r2, #8
 80073fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f240 523a 	movw	r2, #1338	; 0x53a
 8007408:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f003 f9f1 	bl	800a800 <HAL_SD_RxCpltCallback>
#endif
}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7fb fd98 	bl	8002f6c <HAL_DMA_GetError>
 800743c:	4603      	mov	r3, r0
 800743e:	2b02      	cmp	r3, #2
 8007440:	d03e      	beq.n	80074c0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007448:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007450:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d002      	beq.n	800745e <SD_DMAError+0x36>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d12d      	bne.n	80074ba <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a19      	ldr	r2, [pc, #100]	; (80074c8 <SD_DMAError+0xa0>)
 8007464:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007474:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007482:	6978      	ldr	r0, [r7, #20]
 8007484:	f7ff ff62 	bl	800734c <HAL_SD_GetCardState>
 8007488:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b06      	cmp	r3, #6
 800748e:	d002      	beq.n	8007496 <SD_DMAError+0x6e>
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b05      	cmp	r3, #5
 8007494:	d10a      	bne.n	80074ac <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f001 f920 	bl	80086e0 <SDMMC_CmdStopTransfer>
 80074a0:	4602      	mov	r2, r0
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	431a      	orrs	r2, r3
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2200      	movs	r2, #0
 80074b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80074ba:	6978      	ldr	r0, [r7, #20]
 80074bc:	f7ff fd6c 	bl	8006f98 <HAL_SD_ErrorCallback>
#endif
  }
}
 80074c0:	bf00      	nop
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	004005ff 	.word	0x004005ff

080074cc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f240 523a 	movw	r2, #1338	; 0x53a
 80074e2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f7ff ff31 	bl	800734c <HAL_SD_GetCardState>
 80074ea:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b06      	cmp	r3, #6
 80074fe:	d002      	beq.n	8007506 <SD_DMATxAbort+0x3a>
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2b05      	cmp	r3, #5
 8007504:	d10a      	bne.n	800751c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4618      	mov	r0, r3
 800750c:	f001 f8e8 	bl	80086e0 <SDMMC_CmdStopTransfer>
 8007510:	4602      	mov	r2, r0
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	431a      	orrs	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007520:	2b00      	cmp	r3, #0
 8007522:	d103      	bne.n	800752c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f003 f957 	bl	800a7d8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800752a:	e002      	b.n	8007532 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f7ff fd33 	bl	8006f98 <HAL_SD_ErrorCallback>
}
 8007532:	bf00      	nop
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007550:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f7ff fefa 	bl	800734c <HAL_SD_GetCardState>
 8007558:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b06      	cmp	r3, #6
 800756c:	d002      	beq.n	8007574 <SD_DMARxAbort+0x3a>
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b05      	cmp	r3, #5
 8007572:	d10a      	bne.n	800758a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4618      	mov	r0, r3
 800757a:	f001 f8b1 	bl	80086e0 <SDMMC_CmdStopTransfer>
 800757e:	4602      	mov	r2, r0
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007584:	431a      	orrs	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758e:	2b00      	cmp	r3, #0
 8007590:	d103      	bne.n	800759a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f003 f920 	bl	800a7d8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007598:	e002      	b.n	80075a0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7ff fcfc 	bl	8006f98 <HAL_SD_ErrorCallback>
}
 80075a0:	bf00      	nop
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075a8:	b5b0      	push	{r4, r5, r7, lr}
 80075aa:	b094      	sub	sp, #80	; 0x50
 80075ac:	af04      	add	r7, sp, #16
 80075ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80075b0:	2301      	movs	r3, #1
 80075b2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 ff63 	bl	8008484 <SDMMC_GetPowerState>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d102      	bne.n	80075ca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80075c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80075c8:	e0b8      	b.n	800773c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d02f      	beq.n	8007632 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 f94a 	bl	8008870 <SDMMC_CmdSendCID>
 80075dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <SD_InitCard+0x40>
    {
      return errorstate;
 80075e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e6:	e0a9      	b.n	800773c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2100      	movs	r1, #0
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 ff8d 	bl	800850e <SDMMC_GetResponse>
 80075f4:	4602      	mov	r2, r0
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2104      	movs	r1, #4
 8007600:	4618      	mov	r0, r3
 8007602:	f000 ff84 	bl	800850e <SDMMC_GetResponse>
 8007606:	4602      	mov	r2, r0
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2108      	movs	r1, #8
 8007612:	4618      	mov	r0, r3
 8007614:	f000 ff7b 	bl	800850e <SDMMC_GetResponse>
 8007618:	4602      	mov	r2, r0
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	210c      	movs	r1, #12
 8007624:	4618      	mov	r0, r3
 8007626:	f000 ff72 	bl	800850e <SDMMC_GetResponse>
 800762a:	4602      	mov	r2, r0
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007636:	2b03      	cmp	r3, #3
 8007638:	d00d      	beq.n	8007656 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f107 020e 	add.w	r2, r7, #14
 8007642:	4611      	mov	r1, r2
 8007644:	4618      	mov	r0, r3
 8007646:	f001 f950 	bl	80088ea <SDMMC_CmdSetRelAdd>
 800764a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800764c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <SD_InitCard+0xae>
    {
      return errorstate;
 8007652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007654:	e072      	b.n	800773c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765a:	2b03      	cmp	r3, #3
 800765c:	d036      	beq.n	80076cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800765e:	89fb      	ldrh	r3, [r7, #14]
 8007660:	461a      	mov	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800766e:	041b      	lsls	r3, r3, #16
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f001 f91a 	bl	80088ac <SDMMC_CmdSendCSD>
 8007678:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800767a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007682:	e05b      	b.n	800773c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2100      	movs	r1, #0
 800768a:	4618      	mov	r0, r3
 800768c:	f000 ff3f 	bl	800850e <SDMMC_GetResponse>
 8007690:	4602      	mov	r2, r0
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2104      	movs	r1, #4
 800769c:	4618      	mov	r0, r3
 800769e:	f000 ff36 	bl	800850e <SDMMC_GetResponse>
 80076a2:	4602      	mov	r2, r0
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2108      	movs	r1, #8
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 ff2d 	bl	800850e <SDMMC_GetResponse>
 80076b4:	4602      	mov	r2, r0
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	210c      	movs	r1, #12
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 ff24 	bl	800850e <SDMMC_GetResponse>
 80076c6:	4602      	mov	r2, r0
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2104      	movs	r1, #4
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 ff1b 	bl	800850e <SDMMC_GetResponse>
 80076d8:	4603      	mov	r3, r0
 80076da:	0d1a      	lsrs	r2, r3, #20
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80076e0:	f107 0310 	add.w	r3, r7, #16
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7ff fc60 	bl	8006fac <HAL_SD_GetCardCSD>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076f6:	e021      	b.n	800773c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6819      	ldr	r1, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007700:	041b      	lsls	r3, r3, #16
 8007702:	2200      	movs	r2, #0
 8007704:	461c      	mov	r4, r3
 8007706:	4615      	mov	r5, r2
 8007708:	4622      	mov	r2, r4
 800770a:	462b      	mov	r3, r5
 800770c:	4608      	mov	r0, r1
 800770e:	f001 f809 	bl	8008724 <SDMMC_CmdSelDesel>
 8007712:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <SD_InitCard+0x176>
  {
    return errorstate;
 800771a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800771c:	e00e      	b.n	800773c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681d      	ldr	r5, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	466c      	mov	r4, sp
 8007726:	f103 0210 	add.w	r2, r3, #16
 800772a:	ca07      	ldmia	r2, {r0, r1, r2}
 800772c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007730:	3304      	adds	r3, #4
 8007732:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007734:	4628      	mov	r0, r5
 8007736:	f000 fe4d 	bl	80083d4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3740      	adds	r7, #64	; 0x40
 8007740:	46bd      	mov	sp, r7
 8007742:	bdb0      	pop	{r4, r5, r7, pc}

08007744 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007750:	2300      	movs	r3, #0
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	2300      	movs	r3, #0
 8007756:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	f001 f804 	bl	800876a <SDMMC_CmdGoIdleState>
 8007762:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <SD_PowerON+0x2a>
  {
    return errorstate;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	e072      	b.n	8007854 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4618      	mov	r0, r3
 8007774:	f001 f817 	bl	80087a6 <SDMMC_CmdOperCond>
 8007778:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00d      	beq.n	800779c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 ffed 	bl	800876a <SDMMC_CmdGoIdleState>
 8007790:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d004      	beq.n	80077a2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	e05b      	b.n	8007854 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d137      	bne.n	800781a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2100      	movs	r1, #0
 80077b0:	4618      	mov	r0, r3
 80077b2:	f001 f817 	bl	80087e4 <SDMMC_CmdAppCommand>
 80077b6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d02d      	beq.n	800781a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077c2:	e047      	b.n	8007854 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2100      	movs	r1, #0
 80077ca:	4618      	mov	r0, r3
 80077cc:	f001 f80a 	bl	80087e4 <SDMMC_CmdAppCommand>
 80077d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <SD_PowerON+0x98>
    {
      return errorstate;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	e03b      	b.n	8007854 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	491e      	ldr	r1, [pc, #120]	; (800785c <SD_PowerON+0x118>)
 80077e2:	4618      	mov	r0, r3
 80077e4:	f001 f820 	bl	8008828 <SDMMC_CmdAppOperCommand>
 80077e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077f4:	e02e      	b.n	8007854 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2100      	movs	r1, #0
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 fe86 	bl	800850e <SDMMC_GetResponse>
 8007802:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	0fdb      	lsrs	r3, r3, #31
 8007808:	2b01      	cmp	r3, #1
 800780a:	d101      	bne.n	8007810 <SD_PowerON+0xcc>
 800780c:	2301      	movs	r3, #1
 800780e:	e000      	b.n	8007812 <SD_PowerON+0xce>
 8007810:	2300      	movs	r3, #0
 8007812:	613b      	str	r3, [r7, #16]

    count++;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	3301      	adds	r3, #1
 8007818:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007820:	4293      	cmp	r3, r2
 8007822:	d802      	bhi.n	800782a <SD_PowerON+0xe6>
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d0cc      	beq.n	80077c4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007830:	4293      	cmp	r3, r2
 8007832:	d902      	bls.n	800783a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007838:	e00c      	b.n	8007854 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	645a      	str	r2, [r3, #68]	; 0x44
 800784a:	e002      	b.n	8007852 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	c1100000 	.word	0xc1100000

08007860 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d102      	bne.n	8007876 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007870:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007874:	e018      	b.n	80078a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787e:	041b      	lsls	r3, r3, #16
 8007880:	4619      	mov	r1, r3
 8007882:	4610      	mov	r0, r2
 8007884:	f001 f852 	bl	800892c <SDMMC_CmdSendStatus>
 8007888:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	e009      	b.n	80078a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2100      	movs	r1, #0
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fe37 	bl	800850e <SDMMC_GetResponse>
 80078a0:	4602      	mov	r2, r0
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078bc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d03f      	beq.n	800794a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80078ca:	2300      	movs	r3, #0
 80078cc:	617b      	str	r3, [r7, #20]
 80078ce:	e033      	b.n	8007938 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 fda9 	bl	800842c <SDMMC_ReadFIFO>
 80078da:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3301      	adds	r3, #1
 80078e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	0a1b      	lsrs	r3, r3, #8
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3301      	adds	r3, #1
 80078fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	3b01      	subs	r3, #1
 8007904:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	0c1b      	lsrs	r3, r3, #16
 800790a:	b2da      	uxtb	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	3301      	adds	r3, #1
 8007914:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	3b01      	subs	r3, #1
 800791a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	0e1b      	lsrs	r3, r3, #24
 8007920:	b2da      	uxtb	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3301      	adds	r3, #1
 800792a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	3b01      	subs	r3, #1
 8007930:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	3301      	adds	r3, #1
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2b07      	cmp	r3, #7
 800793c:	d9c8      	bls.n	80078d0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800794a:	bf00      	nop
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b086      	sub	sp, #24
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d043      	beq.n	80079f4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800796c:	2300      	movs	r3, #0
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	e037      	b.n	80079e2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3301      	adds	r3, #1
 800797c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	3b01      	subs	r3, #1
 8007982:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	021a      	lsls	r2, r3, #8
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	4313      	orrs	r3, r2
 800798e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3301      	adds	r3, #1
 8007994:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	3b01      	subs	r3, #1
 800799a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	041a      	lsls	r2, r3, #16
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	061a      	lsls	r2, r3, #24
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	4313      	orrs	r3, r2
 80079be:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	3301      	adds	r3, #1
 80079c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f107 0208 	add.w	r2, r7, #8
 80079d4:	4611      	mov	r1, r2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fd35 	bl	8008446 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	3301      	adds	r3, #1
 80079e0:	617b      	str	r3, [r7, #20]
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b07      	cmp	r3, #7
 80079e6:	d9c4      	bls.n	8007972 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80079f4:	bf00      	nop
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e040      	b.n	8007a90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7f9 fda6 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2224      	movs	r2, #36	; 0x24
 8007a28:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 0201 	bic.w	r2, r2, #1
 8007a38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f8b0 	bl	8007ba0 <UART_SetConfig>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d101      	bne.n	8007a4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e022      	b.n	8007a90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fb08 	bl	8008068 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689a      	ldr	r2, [r3, #8]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0201 	orr.w	r2, r2, #1
 8007a86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fb8f 	bl	80081ac <UART_CheckIdleState>
 8007a8e:	4603      	mov	r3, r0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08a      	sub	sp, #40	; 0x28
 8007a9c:	af02      	add	r7, sp, #8
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	603b      	str	r3, [r7, #0]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aac:	2b20      	cmp	r3, #32
 8007aae:	d171      	bne.n	8007b94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d002      	beq.n	8007abc <HAL_UART_Transmit+0x24>
 8007ab6:	88fb      	ldrh	r3, [r7, #6]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e06a      	b.n	8007b96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2221      	movs	r2, #33	; 0x21
 8007acc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ace:	f7fa f84d 	bl	8001b6c <HAL_GetTick>
 8007ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	88fa      	ldrh	r2, [r7, #6]
 8007ad8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	88fa      	ldrh	r2, [r7, #6]
 8007ae0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aec:	d108      	bne.n	8007b00 <HAL_UART_Transmit+0x68>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d104      	bne.n	8007b00 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007af6:	2300      	movs	r3, #0
 8007af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	61bb      	str	r3, [r7, #24]
 8007afe:	e003      	b.n	8007b08 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b08:	e02c      	b.n	8007b64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2200      	movs	r2, #0
 8007b12:	2180      	movs	r1, #128	; 0x80
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 fb96 	bl	8008246 <UART_WaitOnFlagUntilTimeout>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e038      	b.n	8007b96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10b      	bne.n	8007b42 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	3302      	adds	r3, #2
 8007b3e:	61bb      	str	r3, [r7, #24]
 8007b40:	e007      	b.n	8007b52 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	781a      	ldrb	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1cc      	bne.n	8007b0a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	2200      	movs	r2, #0
 8007b78:	2140      	movs	r1, #64	; 0x40
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 fb63 	bl	8008246 <UART_WaitOnFlagUntilTimeout>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e005      	b.n	8007b96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	e000      	b.n	8007b96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007b94:	2302      	movs	r3, #2
  }
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3720      	adds	r7, #32
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	4ba6      	ldr	r3, [pc, #664]	; (8007e64 <UART_SetConfig+0x2c4>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	6812      	ldr	r2, [r2, #0]
 8007bd2:	6979      	ldr	r1, [r7, #20]
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a94      	ldr	r2, [pc, #592]	; (8007e68 <UART_SetConfig+0x2c8>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d120      	bne.n	8007c5e <UART_SetConfig+0xbe>
 8007c1c:	4b93      	ldr	r3, [pc, #588]	; (8007e6c <UART_SetConfig+0x2cc>)
 8007c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d816      	bhi.n	8007c58 <UART_SetConfig+0xb8>
 8007c2a:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <UART_SetConfig+0x90>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007c41 	.word	0x08007c41
 8007c34:	08007c4d 	.word	0x08007c4d
 8007c38:	08007c47 	.word	0x08007c47
 8007c3c:	08007c53 	.word	0x08007c53
 8007c40:	2301      	movs	r3, #1
 8007c42:	77fb      	strb	r3, [r7, #31]
 8007c44:	e150      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007c46:	2302      	movs	r3, #2
 8007c48:	77fb      	strb	r3, [r7, #31]
 8007c4a:	e14d      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	77fb      	strb	r3, [r7, #31]
 8007c50:	e14a      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007c52:	2308      	movs	r3, #8
 8007c54:	77fb      	strb	r3, [r7, #31]
 8007c56:	e147      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	77fb      	strb	r3, [r7, #31]
 8007c5c:	e144      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a83      	ldr	r2, [pc, #524]	; (8007e70 <UART_SetConfig+0x2d0>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d132      	bne.n	8007cce <UART_SetConfig+0x12e>
 8007c68:	4b80      	ldr	r3, [pc, #512]	; (8007e6c <UART_SetConfig+0x2cc>)
 8007c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6e:	f003 030c 	and.w	r3, r3, #12
 8007c72:	2b0c      	cmp	r3, #12
 8007c74:	d828      	bhi.n	8007cc8 <UART_SetConfig+0x128>
 8007c76:	a201      	add	r2, pc, #4	; (adr r2, 8007c7c <UART_SetConfig+0xdc>)
 8007c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7c:	08007cb1 	.word	0x08007cb1
 8007c80:	08007cc9 	.word	0x08007cc9
 8007c84:	08007cc9 	.word	0x08007cc9
 8007c88:	08007cc9 	.word	0x08007cc9
 8007c8c:	08007cbd 	.word	0x08007cbd
 8007c90:	08007cc9 	.word	0x08007cc9
 8007c94:	08007cc9 	.word	0x08007cc9
 8007c98:	08007cc9 	.word	0x08007cc9
 8007c9c:	08007cb7 	.word	0x08007cb7
 8007ca0:	08007cc9 	.word	0x08007cc9
 8007ca4:	08007cc9 	.word	0x08007cc9
 8007ca8:	08007cc9 	.word	0x08007cc9
 8007cac:	08007cc3 	.word	0x08007cc3
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	77fb      	strb	r3, [r7, #31]
 8007cb4:	e118      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	77fb      	strb	r3, [r7, #31]
 8007cba:	e115      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007cbc:	2304      	movs	r3, #4
 8007cbe:	77fb      	strb	r3, [r7, #31]
 8007cc0:	e112      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007cc2:	2308      	movs	r3, #8
 8007cc4:	77fb      	strb	r3, [r7, #31]
 8007cc6:	e10f      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007cc8:	2310      	movs	r3, #16
 8007cca:	77fb      	strb	r3, [r7, #31]
 8007ccc:	e10c      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a68      	ldr	r2, [pc, #416]	; (8007e74 <UART_SetConfig+0x2d4>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d120      	bne.n	8007d1a <UART_SetConfig+0x17a>
 8007cd8:	4b64      	ldr	r3, [pc, #400]	; (8007e6c <UART_SetConfig+0x2cc>)
 8007cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ce2:	2b30      	cmp	r3, #48	; 0x30
 8007ce4:	d013      	beq.n	8007d0e <UART_SetConfig+0x16e>
 8007ce6:	2b30      	cmp	r3, #48	; 0x30
 8007ce8:	d814      	bhi.n	8007d14 <UART_SetConfig+0x174>
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	d009      	beq.n	8007d02 <UART_SetConfig+0x162>
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	d810      	bhi.n	8007d14 <UART_SetConfig+0x174>
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <UART_SetConfig+0x15c>
 8007cf6:	2b10      	cmp	r3, #16
 8007cf8:	d006      	beq.n	8007d08 <UART_SetConfig+0x168>
 8007cfa:	e00b      	b.n	8007d14 <UART_SetConfig+0x174>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	77fb      	strb	r3, [r7, #31]
 8007d00:	e0f2      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d02:	2302      	movs	r3, #2
 8007d04:	77fb      	strb	r3, [r7, #31]
 8007d06:	e0ef      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d08:	2304      	movs	r3, #4
 8007d0a:	77fb      	strb	r3, [r7, #31]
 8007d0c:	e0ec      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d0e:	2308      	movs	r3, #8
 8007d10:	77fb      	strb	r3, [r7, #31]
 8007d12:	e0e9      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d14:	2310      	movs	r3, #16
 8007d16:	77fb      	strb	r3, [r7, #31]
 8007d18:	e0e6      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a56      	ldr	r2, [pc, #344]	; (8007e78 <UART_SetConfig+0x2d8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d120      	bne.n	8007d66 <UART_SetConfig+0x1c6>
 8007d24:	4b51      	ldr	r3, [pc, #324]	; (8007e6c <UART_SetConfig+0x2cc>)
 8007d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d30:	d013      	beq.n	8007d5a <UART_SetConfig+0x1ba>
 8007d32:	2bc0      	cmp	r3, #192	; 0xc0
 8007d34:	d814      	bhi.n	8007d60 <UART_SetConfig+0x1c0>
 8007d36:	2b80      	cmp	r3, #128	; 0x80
 8007d38:	d009      	beq.n	8007d4e <UART_SetConfig+0x1ae>
 8007d3a:	2b80      	cmp	r3, #128	; 0x80
 8007d3c:	d810      	bhi.n	8007d60 <UART_SetConfig+0x1c0>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <UART_SetConfig+0x1a8>
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d006      	beq.n	8007d54 <UART_SetConfig+0x1b4>
 8007d46:	e00b      	b.n	8007d60 <UART_SetConfig+0x1c0>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	77fb      	strb	r3, [r7, #31]
 8007d4c:	e0cc      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	77fb      	strb	r3, [r7, #31]
 8007d52:	e0c9      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d54:	2304      	movs	r3, #4
 8007d56:	77fb      	strb	r3, [r7, #31]
 8007d58:	e0c6      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d5a:	2308      	movs	r3, #8
 8007d5c:	77fb      	strb	r3, [r7, #31]
 8007d5e:	e0c3      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d60:	2310      	movs	r3, #16
 8007d62:	77fb      	strb	r3, [r7, #31]
 8007d64:	e0c0      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a44      	ldr	r2, [pc, #272]	; (8007e7c <UART_SetConfig+0x2dc>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d125      	bne.n	8007dbc <UART_SetConfig+0x21c>
 8007d70:	4b3e      	ldr	r3, [pc, #248]	; (8007e6c <UART_SetConfig+0x2cc>)
 8007d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d7e:	d017      	beq.n	8007db0 <UART_SetConfig+0x210>
 8007d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d84:	d817      	bhi.n	8007db6 <UART_SetConfig+0x216>
 8007d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d8a:	d00b      	beq.n	8007da4 <UART_SetConfig+0x204>
 8007d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d90:	d811      	bhi.n	8007db6 <UART_SetConfig+0x216>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <UART_SetConfig+0x1fe>
 8007d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d9a:	d006      	beq.n	8007daa <UART_SetConfig+0x20a>
 8007d9c:	e00b      	b.n	8007db6 <UART_SetConfig+0x216>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	77fb      	strb	r3, [r7, #31]
 8007da2:	e0a1      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007da4:	2302      	movs	r3, #2
 8007da6:	77fb      	strb	r3, [r7, #31]
 8007da8:	e09e      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007daa:	2304      	movs	r3, #4
 8007dac:	77fb      	strb	r3, [r7, #31]
 8007dae:	e09b      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007db0:	2308      	movs	r3, #8
 8007db2:	77fb      	strb	r3, [r7, #31]
 8007db4:	e098      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007db6:	2310      	movs	r3, #16
 8007db8:	77fb      	strb	r3, [r7, #31]
 8007dba:	e095      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a2f      	ldr	r2, [pc, #188]	; (8007e80 <UART_SetConfig+0x2e0>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d125      	bne.n	8007e12 <UART_SetConfig+0x272>
 8007dc6:	4b29      	ldr	r3, [pc, #164]	; (8007e6c <UART_SetConfig+0x2cc>)
 8007dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007dd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dd4:	d017      	beq.n	8007e06 <UART_SetConfig+0x266>
 8007dd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dda:	d817      	bhi.n	8007e0c <UART_SetConfig+0x26c>
 8007ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de0:	d00b      	beq.n	8007dfa <UART_SetConfig+0x25a>
 8007de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de6:	d811      	bhi.n	8007e0c <UART_SetConfig+0x26c>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <UART_SetConfig+0x254>
 8007dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007df0:	d006      	beq.n	8007e00 <UART_SetConfig+0x260>
 8007df2:	e00b      	b.n	8007e0c <UART_SetConfig+0x26c>
 8007df4:	2301      	movs	r3, #1
 8007df6:	77fb      	strb	r3, [r7, #31]
 8007df8:	e076      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	77fb      	strb	r3, [r7, #31]
 8007dfe:	e073      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e00:	2304      	movs	r3, #4
 8007e02:	77fb      	strb	r3, [r7, #31]
 8007e04:	e070      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e06:	2308      	movs	r3, #8
 8007e08:	77fb      	strb	r3, [r7, #31]
 8007e0a:	e06d      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e0c:	2310      	movs	r3, #16
 8007e0e:	77fb      	strb	r3, [r7, #31]
 8007e10:	e06a      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a1b      	ldr	r2, [pc, #108]	; (8007e84 <UART_SetConfig+0x2e4>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d138      	bne.n	8007e8e <UART_SetConfig+0x2ee>
 8007e1c:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <UART_SetConfig+0x2cc>)
 8007e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e22:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e2a:	d017      	beq.n	8007e5c <UART_SetConfig+0x2bc>
 8007e2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e30:	d82a      	bhi.n	8007e88 <UART_SetConfig+0x2e8>
 8007e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e36:	d00b      	beq.n	8007e50 <UART_SetConfig+0x2b0>
 8007e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e3c:	d824      	bhi.n	8007e88 <UART_SetConfig+0x2e8>
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <UART_SetConfig+0x2aa>
 8007e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e46:	d006      	beq.n	8007e56 <UART_SetConfig+0x2b6>
 8007e48:	e01e      	b.n	8007e88 <UART_SetConfig+0x2e8>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	77fb      	strb	r3, [r7, #31]
 8007e4e:	e04b      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e50:	2302      	movs	r3, #2
 8007e52:	77fb      	strb	r3, [r7, #31]
 8007e54:	e048      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e56:	2304      	movs	r3, #4
 8007e58:	77fb      	strb	r3, [r7, #31]
 8007e5a:	e045      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e5c:	2308      	movs	r3, #8
 8007e5e:	77fb      	strb	r3, [r7, #31]
 8007e60:	e042      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e62:	bf00      	nop
 8007e64:	efff69f3 	.word	0xefff69f3
 8007e68:	40011000 	.word	0x40011000
 8007e6c:	40023800 	.word	0x40023800
 8007e70:	40004400 	.word	0x40004400
 8007e74:	40004800 	.word	0x40004800
 8007e78:	40004c00 	.word	0x40004c00
 8007e7c:	40005000 	.word	0x40005000
 8007e80:	40011400 	.word	0x40011400
 8007e84:	40007800 	.word	0x40007800
 8007e88:	2310      	movs	r3, #16
 8007e8a:	77fb      	strb	r3, [r7, #31]
 8007e8c:	e02c      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a72      	ldr	r2, [pc, #456]	; (800805c <UART_SetConfig+0x4bc>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d125      	bne.n	8007ee4 <UART_SetConfig+0x344>
 8007e98:	4b71      	ldr	r3, [pc, #452]	; (8008060 <UART_SetConfig+0x4c0>)
 8007e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ea2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ea6:	d017      	beq.n	8007ed8 <UART_SetConfig+0x338>
 8007ea8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007eac:	d817      	bhi.n	8007ede <UART_SetConfig+0x33e>
 8007eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eb2:	d00b      	beq.n	8007ecc <UART_SetConfig+0x32c>
 8007eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eb8:	d811      	bhi.n	8007ede <UART_SetConfig+0x33e>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <UART_SetConfig+0x326>
 8007ebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ec2:	d006      	beq.n	8007ed2 <UART_SetConfig+0x332>
 8007ec4:	e00b      	b.n	8007ede <UART_SetConfig+0x33e>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	77fb      	strb	r3, [r7, #31]
 8007eca:	e00d      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007ecc:	2302      	movs	r3, #2
 8007ece:	77fb      	strb	r3, [r7, #31]
 8007ed0:	e00a      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007ed2:	2304      	movs	r3, #4
 8007ed4:	77fb      	strb	r3, [r7, #31]
 8007ed6:	e007      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007ed8:	2308      	movs	r3, #8
 8007eda:	77fb      	strb	r3, [r7, #31]
 8007edc:	e004      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007ede:	2310      	movs	r3, #16
 8007ee0:	77fb      	strb	r3, [r7, #31]
 8007ee2:	e001      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007ee4:	2310      	movs	r3, #16
 8007ee6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ef0:	d15b      	bne.n	8007faa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007ef2:	7ffb      	ldrb	r3, [r7, #31]
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	d828      	bhi.n	8007f4a <UART_SetConfig+0x3aa>
 8007ef8:	a201      	add	r2, pc, #4	; (adr r2, 8007f00 <UART_SetConfig+0x360>)
 8007efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efe:	bf00      	nop
 8007f00:	08007f25 	.word	0x08007f25
 8007f04:	08007f2d 	.word	0x08007f2d
 8007f08:	08007f35 	.word	0x08007f35
 8007f0c:	08007f4b 	.word	0x08007f4b
 8007f10:	08007f3b 	.word	0x08007f3b
 8007f14:	08007f4b 	.word	0x08007f4b
 8007f18:	08007f4b 	.word	0x08007f4b
 8007f1c:	08007f4b 	.word	0x08007f4b
 8007f20:	08007f43 	.word	0x08007f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f24:	f7fd fff2 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 8007f28:	61b8      	str	r0, [r7, #24]
        break;
 8007f2a:	e013      	b.n	8007f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f2c:	f7fe f802 	bl	8005f34 <HAL_RCC_GetPCLK2Freq>
 8007f30:	61b8      	str	r0, [r7, #24]
        break;
 8007f32:	e00f      	b.n	8007f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f34:	4b4b      	ldr	r3, [pc, #300]	; (8008064 <UART_SetConfig+0x4c4>)
 8007f36:	61bb      	str	r3, [r7, #24]
        break;
 8007f38:	e00c      	b.n	8007f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f3a:	f7fd fed5 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8007f3e:	61b8      	str	r0, [r7, #24]
        break;
 8007f40:	e008      	b.n	8007f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f46:	61bb      	str	r3, [r7, #24]
        break;
 8007f48:	e004      	b.n	8007f54 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	77bb      	strb	r3, [r7, #30]
        break;
 8007f52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d074      	beq.n	8008044 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	005a      	lsls	r2, r3, #1
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	085b      	lsrs	r3, r3, #1
 8007f64:	441a      	add	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	2b0f      	cmp	r3, #15
 8007f74:	d916      	bls.n	8007fa4 <UART_SetConfig+0x404>
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f7c:	d212      	bcs.n	8007fa4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	f023 030f 	bic.w	r3, r3, #15
 8007f86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	085b      	lsrs	r3, r3, #1
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	f003 0307 	and.w	r3, r3, #7
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	89fb      	ldrh	r3, [r7, #14]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	89fa      	ldrh	r2, [r7, #14]
 8007fa0:	60da      	str	r2, [r3, #12]
 8007fa2:	e04f      	b.n	8008044 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	77bb      	strb	r3, [r7, #30]
 8007fa8:	e04c      	b.n	8008044 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007faa:	7ffb      	ldrb	r3, [r7, #31]
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d828      	bhi.n	8008002 <UART_SetConfig+0x462>
 8007fb0:	a201      	add	r2, pc, #4	; (adr r2, 8007fb8 <UART_SetConfig+0x418>)
 8007fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb6:	bf00      	nop
 8007fb8:	08007fdd 	.word	0x08007fdd
 8007fbc:	08007fe5 	.word	0x08007fe5
 8007fc0:	08007fed 	.word	0x08007fed
 8007fc4:	08008003 	.word	0x08008003
 8007fc8:	08007ff3 	.word	0x08007ff3
 8007fcc:	08008003 	.word	0x08008003
 8007fd0:	08008003 	.word	0x08008003
 8007fd4:	08008003 	.word	0x08008003
 8007fd8:	08007ffb 	.word	0x08007ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fdc:	f7fd ff96 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 8007fe0:	61b8      	str	r0, [r7, #24]
        break;
 8007fe2:	e013      	b.n	800800c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fe4:	f7fd ffa6 	bl	8005f34 <HAL_RCC_GetPCLK2Freq>
 8007fe8:	61b8      	str	r0, [r7, #24]
        break;
 8007fea:	e00f      	b.n	800800c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fec:	4b1d      	ldr	r3, [pc, #116]	; (8008064 <UART_SetConfig+0x4c4>)
 8007fee:	61bb      	str	r3, [r7, #24]
        break;
 8007ff0:	e00c      	b.n	800800c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ff2:	f7fd fe79 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8007ff6:	61b8      	str	r0, [r7, #24]
        break;
 8007ff8:	e008      	b.n	800800c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ffe:	61bb      	str	r3, [r7, #24]
        break;
 8008000:	e004      	b.n	800800c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008002:	2300      	movs	r3, #0
 8008004:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	77bb      	strb	r3, [r7, #30]
        break;
 800800a:	bf00      	nop
    }

    if (pclk != 0U)
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d018      	beq.n	8008044 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	085a      	lsrs	r2, r3, #1
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	441a      	add	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	fbb2 f3f3 	udiv	r3, r2, r3
 8008024:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	2b0f      	cmp	r3, #15
 800802a:	d909      	bls.n	8008040 <UART_SetConfig+0x4a0>
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008032:	d205      	bcs.n	8008040 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	b29a      	uxth	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	60da      	str	r2, [r3, #12]
 800803e:	e001      	b.n	8008044 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008050:	7fbb      	ldrb	r3, [r7, #30]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3720      	adds	r7, #32
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	40007c00 	.word	0x40007c00
 8008060:	40023800 	.word	0x40023800
 8008064:	00f42400 	.word	0x00f42400

08008068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00a      	beq.n	8008092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00a      	beq.n	80080b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	f003 0304 	and.w	r3, r3, #4
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00a      	beq.n	80080d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	f003 0308 	and.w	r3, r3, #8
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00a      	beq.n	80080f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fc:	f003 0310 	and.w	r3, r3, #16
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00a      	beq.n	800811a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	430a      	orrs	r2, r1
 8008118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	f003 0320 	and.w	r3, r3, #32
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00a      	beq.n	800813c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008144:	2b00      	cmp	r3, #0
 8008146:	d01a      	beq.n	800817e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	430a      	orrs	r2, r1
 800815c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008166:	d10a      	bne.n	800817e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00a      	beq.n	80081a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	605a      	str	r2, [r3, #4]
  }
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af02      	add	r7, sp, #8
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081bc:	f7f9 fcd6 	bl	8001b6c <HAL_GetTick>
 80081c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0308 	and.w	r3, r3, #8
 80081cc:	2b08      	cmp	r3, #8
 80081ce:	d10e      	bne.n	80081ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f831 	bl	8008246 <UART_WaitOnFlagUntilTimeout>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e027      	b.n	800823e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	d10e      	bne.n	800821a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f81b 	bl	8008246 <UART_WaitOnFlagUntilTimeout>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e011      	b.n	800823e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2220      	movs	r2, #32
 8008224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b09c      	sub	sp, #112	; 0x70
 800824a:	af00      	add	r7, sp, #0
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	603b      	str	r3, [r7, #0]
 8008252:	4613      	mov	r3, r2
 8008254:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008256:	e0a7      	b.n	80083a8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800825a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800825e:	f000 80a3 	beq.w	80083a8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008262:	f7f9 fc83 	bl	8001b6c <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800826e:	429a      	cmp	r2, r3
 8008270:	d302      	bcc.n	8008278 <UART_WaitOnFlagUntilTimeout+0x32>
 8008272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008274:	2b00      	cmp	r3, #0
 8008276:	d13f      	bne.n	80082f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008288:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800828c:	667b      	str	r3, [r7, #100]	; 0x64
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008298:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800829c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e6      	bne.n	8008278 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3308      	adds	r3, #8
 80082b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	f023 0301 	bic.w	r3, r3, #1
 80082c0:	663b      	str	r3, [r7, #96]	; 0x60
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3308      	adds	r3, #8
 80082c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80082cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e5      	bne.n	80082aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2220      	movs	r2, #32
 80082e2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2220      	movs	r2, #32
 80082e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e068      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0304 	and.w	r3, r3, #4
 8008302:	2b00      	cmp	r3, #0
 8008304:	d050      	beq.n	80083a8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008314:	d148      	bne.n	80083a8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800831e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	e853 3f00 	ldrex	r3, [r3]
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008334:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800833e:	637b      	str	r3, [r7, #52]	; 0x34
 8008340:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1e6      	bne.n	8008320 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3308      	adds	r3, #8
 8008358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	613b      	str	r3, [r7, #16]
   return(result);
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f023 0301 	bic.w	r3, r3, #1
 8008368:	66bb      	str	r3, [r7, #104]	; 0x68
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3308      	adds	r3, #8
 8008370:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008372:	623a      	str	r2, [r7, #32]
 8008374:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	69f9      	ldr	r1, [r7, #28]
 8008378:	6a3a      	ldr	r2, [r7, #32]
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e5      	bne.n	8008352 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2220      	movs	r2, #32
 800838a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2220      	movs	r2, #32
 8008390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2220      	movs	r2, #32
 8008398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e010      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	69da      	ldr	r2, [r3, #28]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	4013      	ands	r3, r2
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	bf0c      	ite	eq
 80083b8:	2301      	moveq	r3, #1
 80083ba:	2300      	movne	r3, #0
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	461a      	mov	r2, r3
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	f43f af48 	beq.w	8008258 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3770      	adds	r7, #112	; 0x70
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80083d4:	b084      	sub	sp, #16
 80083d6:	b480      	push	{r7}
 80083d8:	b085      	sub	sp, #20
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	f107 001c 	add.w	r0, r7, #28
 80083e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80083ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80083ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80083ee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80083f2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80083f6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80083f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80083fa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80083fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80083fe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	4b07      	ldr	r3, [pc, #28]	; (8008428 <SDMMC_Init+0x54>)
 800840c:	4013      	ands	r3, r2
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	431a      	orrs	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	b004      	add	sp, #16
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	ffff8100 	.word	0xffff8100

0800842c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800843a:	4618      	mov	r0, r3
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2203      	movs	r2, #3
 8008474:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0303 	and.w	r3, r3, #3
}
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80084c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80084ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68da      	ldr	r2, [r3, #12]
 80084d6:	4b06      	ldr	r3, [pc, #24]	; (80084f0 <SDMMC_SendCommand+0x50>)
 80084d8:	4013      	ands	r3, r2
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	431a      	orrs	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	fffff000 	.word	0xfffff000

080084f4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	b2db      	uxtb	r3, r3
}
 8008502:	4618      	mov	r0, r3
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800850e:	b480      	push	{r7}
 8008510:	b085      	sub	sp, #20
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3314      	adds	r3, #20
 800851c:	461a      	mov	r2, r3
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	4413      	add	r3, r2
 8008522:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
}  
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	685a      	ldr	r2, [r3, #4]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800855a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008560:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008566:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	4313      	orrs	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008572:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	431a      	orrs	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800857e:	2300      	movs	r3, #0

}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800859a:	2310      	movs	r3, #16
 800859c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800859e:	2340      	movs	r3, #64	; 0x40
 80085a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085a2:	2300      	movs	r3, #0
 80085a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085ac:	f107 0308 	add.w	r3, r7, #8
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7ff ff74 	bl	80084a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80085b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80085bc:	2110      	movs	r1, #16
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f9d6 	bl	8008970 <SDMMC_GetCmdResp1>
 80085c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085c6:	69fb      	ldr	r3, [r7, #28]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3720      	adds	r7, #32
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b088      	sub	sp, #32
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80085de:	2311      	movs	r3, #17
 80085e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085e2:	2340      	movs	r3, #64	; 0x40
 80085e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085e6:	2300      	movs	r3, #0
 80085e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085f0:	f107 0308 	add.w	r3, r7, #8
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7ff ff52 	bl	80084a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80085fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008600:	2111      	movs	r1, #17
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f9b4 	bl	8008970 <SDMMC_GetCmdResp1>
 8008608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800860a:	69fb      	ldr	r3, [r7, #28]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3720      	adds	r7, #32
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008622:	2312      	movs	r3, #18
 8008624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008626:	2340      	movs	r3, #64	; 0x40
 8008628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800862a:	2300      	movs	r3, #0
 800862c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800862e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008632:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008634:	f107 0308 	add.w	r3, r7, #8
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7ff ff30 	bl	80084a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008640:	f241 3288 	movw	r2, #5000	; 0x1388
 8008644:	2112      	movs	r1, #18
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f992 	bl	8008970 <SDMMC_GetCmdResp1>
 800864c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800864e:	69fb      	ldr	r3, [r7, #28]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3720      	adds	r7, #32
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b088      	sub	sp, #32
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008666:	2318      	movs	r3, #24
 8008668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800866a:	2340      	movs	r3, #64	; 0x40
 800866c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008676:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008678:	f107 0308 	add.w	r3, r7, #8
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7ff ff0e 	bl	80084a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008684:	f241 3288 	movw	r2, #5000	; 0x1388
 8008688:	2118      	movs	r1, #24
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f970 	bl	8008970 <SDMMC_GetCmdResp1>
 8008690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008692:	69fb      	ldr	r3, [r7, #28]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3720      	adds	r7, #32
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b088      	sub	sp, #32
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80086aa:	2319      	movs	r3, #25
 80086ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086ae:	2340      	movs	r3, #64	; 0x40
 80086b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086b2:	2300      	movs	r3, #0
 80086b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086bc:	f107 0308 	add.w	r3, r7, #8
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7ff feec 	bl	80084a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80086c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086cc:	2119      	movs	r1, #25
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f94e 	bl	8008970 <SDMMC_GetCmdResp1>
 80086d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086d6:	69fb      	ldr	r3, [r7, #28]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3720      	adds	r7, #32
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b088      	sub	sp, #32
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80086ec:	230c      	movs	r3, #12
 80086ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086f0:	2340      	movs	r3, #64	; 0x40
 80086f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086f4:	2300      	movs	r3, #0
 80086f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086fe:	f107 0308 	add.w	r3, r7, #8
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff fecb 	bl	80084a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800870a:	4a05      	ldr	r2, [pc, #20]	; (8008720 <SDMMC_CmdStopTransfer+0x40>)
 800870c:	210c      	movs	r1, #12
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f92e 	bl	8008970 <SDMMC_GetCmdResp1>
 8008714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008716:	69fb      	ldr	r3, [r7, #28]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3720      	adds	r7, #32
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	05f5e100 	.word	0x05f5e100

08008724 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b08a      	sub	sp, #40	; 0x28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008734:	2307      	movs	r3, #7
 8008736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008738:	2340      	movs	r3, #64	; 0x40
 800873a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800873c:	2300      	movs	r3, #0
 800873e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008744:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008746:	f107 0310 	add.w	r3, r7, #16
 800874a:	4619      	mov	r1, r3
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f7ff fea7 	bl	80084a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008752:	f241 3288 	movw	r2, #5000	; 0x1388
 8008756:	2107      	movs	r1, #7
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 f909 	bl	8008970 <SDMMC_GetCmdResp1>
 800875e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008762:	4618      	mov	r0, r3
 8008764:	3728      	adds	r7, #40	; 0x28
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b088      	sub	sp, #32
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008772:	2300      	movs	r3, #0
 8008774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008776:	2300      	movs	r3, #0
 8008778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800877a:	2300      	movs	r3, #0
 800877c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800877e:	2300      	movs	r3, #0
 8008780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008786:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008788:	f107 0308 	add.w	r3, r7, #8
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff fe86 	bl	80084a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fb23 	bl	8008de0 <SDMMC_GetCmdError>
 800879a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800879c:	69fb      	ldr	r3, [r7, #28]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3720      	adds	r7, #32
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b088      	sub	sp, #32
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80087ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80087b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80087b4:	2308      	movs	r3, #8
 80087b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087b8:	2340      	movs	r3, #64	; 0x40
 80087ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087bc:	2300      	movs	r3, #0
 80087be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087c6:	f107 0308 	add.w	r3, r7, #8
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff fe67 	bl	80084a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fab6 	bl	8008d44 <SDMMC_GetCmdResp7>
 80087d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087da:	69fb      	ldr	r3, [r7, #28]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3720      	adds	r7, #32
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80087f2:	2337      	movs	r3, #55	; 0x37
 80087f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087f6:	2340      	movs	r3, #64	; 0x40
 80087f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087fa:	2300      	movs	r3, #0
 80087fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008802:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008804:	f107 0308 	add.w	r3, r7, #8
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7ff fe48 	bl	80084a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008810:	f241 3288 	movw	r2, #5000	; 0x1388
 8008814:	2137      	movs	r1, #55	; 0x37
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f8aa 	bl	8008970 <SDMMC_GetCmdResp1>
 800881c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800881e:	69fb      	ldr	r3, [r7, #28]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3720      	adds	r7, #32
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b088      	sub	sp, #32
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	4b0d      	ldr	r3, [pc, #52]	; (800886c <SDMMC_CmdAppOperCommand+0x44>)
 8008836:	4313      	orrs	r3, r2
 8008838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800883a:	2329      	movs	r3, #41	; 0x29
 800883c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800883e:	2340      	movs	r3, #64	; 0x40
 8008840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008842:	2300      	movs	r3, #0
 8008844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800884a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800884c:	f107 0308 	add.w	r3, r7, #8
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7ff fe24 	bl	80084a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f9bf 	bl	8008bdc <SDMMC_GetCmdResp3>
 800885e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008860:	69fb      	ldr	r3, [r7, #28]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3720      	adds	r7, #32
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	80100000 	.word	0x80100000

08008870 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b088      	sub	sp, #32
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800887c:	2302      	movs	r3, #2
 800887e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008880:	23c0      	movs	r3, #192	; 0xc0
 8008882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008884:	2300      	movs	r3, #0
 8008886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800888c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800888e:	f107 0308 	add.w	r3, r7, #8
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7ff fe03 	bl	80084a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f956 	bl	8008b4c <SDMMC_GetCmdResp2>
 80088a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088a2:	69fb      	ldr	r3, [r7, #28]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3720      	adds	r7, #32
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b088      	sub	sp, #32
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80088ba:	2309      	movs	r3, #9
 80088bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80088be:	23c0      	movs	r3, #192	; 0xc0
 80088c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088c2:	2300      	movs	r3, #0
 80088c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088cc:	f107 0308 	add.w	r3, r7, #8
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7ff fde4 	bl	80084a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f937 	bl	8008b4c <SDMMC_GetCmdResp2>
 80088de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088e0:	69fb      	ldr	r3, [r7, #28]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3720      	adds	r7, #32
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b088      	sub	sp, #32
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80088f8:	2303      	movs	r3, #3
 80088fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088fc:	2340      	movs	r3, #64	; 0x40
 80088fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008900:	2300      	movs	r3, #0
 8008902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008908:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800890a:	f107 0308 	add.w	r3, r7, #8
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7ff fdc5 	bl	80084a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	2103      	movs	r1, #3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f99c 	bl	8008c58 <SDMMC_GetCmdResp6>
 8008920:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008922:	69fb      	ldr	r3, [r7, #28]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3720      	adds	r7, #32
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b088      	sub	sp, #32
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800893a:	230d      	movs	r3, #13
 800893c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800893e:	2340      	movs	r3, #64	; 0x40
 8008940:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008942:	2300      	movs	r3, #0
 8008944:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800894a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800894c:	f107 0308 	add.w	r3, r7, #8
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7ff fda4 	bl	80084a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008958:	f241 3288 	movw	r2, #5000	; 0x1388
 800895c:	210d      	movs	r1, #13
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f806 	bl	8008970 <SDMMC_GetCmdResp1>
 8008964:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008966:	69fb      	ldr	r3, [r7, #28]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3720      	adds	r7, #32
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	460b      	mov	r3, r1
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800897e:	4b70      	ldr	r3, [pc, #448]	; (8008b40 <SDMMC_GetCmdResp1+0x1d0>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a70      	ldr	r2, [pc, #448]	; (8008b44 <SDMMC_GetCmdResp1+0x1d4>)
 8008984:	fba2 2303 	umull	r2, r3, r2, r3
 8008988:	0a5a      	lsrs	r2, r3, #9
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	fb02 f303 	mul.w	r3, r2, r3
 8008990:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	1e5a      	subs	r2, r3, #1
 8008996:	61fa      	str	r2, [r7, #28]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d102      	bne.n	80089a2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800899c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089a0:	e0c9      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0ef      	beq.n	8008992 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1ea      	bne.n	8008992 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c0:	f003 0304 	and.w	r3, r3, #4
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d004      	beq.n	80089d2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2204      	movs	r2, #4
 80089cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089ce:	2304      	movs	r3, #4
 80089d0:	e0b1      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d004      	beq.n	80089e8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2201      	movs	r2, #1
 80089e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e0a6      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	22c5      	movs	r2, #197	; 0xc5
 80089ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f7ff fd80 	bl	80084f4 <SDMMC_GetCommandResponse>
 80089f4:	4603      	mov	r3, r0
 80089f6:	461a      	mov	r2, r3
 80089f8:	7afb      	ldrb	r3, [r7, #11]
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d001      	beq.n	8008a02 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e099      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008a02:	2100      	movs	r1, #0
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f7ff fd82 	bl	800850e <SDMMC_GetResponse>
 8008a0a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	4b4e      	ldr	r3, [pc, #312]	; (8008b48 <SDMMC_GetCmdResp1+0x1d8>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008a16:	2300      	movs	r3, #0
 8008a18:	e08d      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	da02      	bge.n	8008a26 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a24:	e087      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008a30:	2340      	movs	r3, #64	; 0x40
 8008a32:	e080      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008a3e:	2380      	movs	r3, #128	; 0x80
 8008a40:	e079      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a50:	e071      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a60:	e069      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d002      	beq.n	8008a72 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a70:	e061      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008a7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a80:	e059      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a90:	e051      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008aa0:	e049      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d002      	beq.n	8008ab2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008aac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ab0:	e041      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008abc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ac0:	e039      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ad0:	e031      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d002      	beq.n	8008ae2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008adc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ae0:	e029      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008aec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008af0:	e021      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008afc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b00:	e019      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008b0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b10:	e011      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d002      	beq.n	8008b22 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008b1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008b20:	e009      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f003 0308 	and.w	r3, r3, #8
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d002      	beq.n	8008b32 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008b2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b30:	e001      	b.n	8008b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008b32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3720      	adds	r7, #32
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	20000000 	.word	0x20000000
 8008b44:	10624dd3 	.word	0x10624dd3
 8008b48:	fdffe008 	.word	0xfdffe008

08008b4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b54:	4b1f      	ldr	r3, [pc, #124]	; (8008bd4 <SDMMC_GetCmdResp2+0x88>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a1f      	ldr	r2, [pc, #124]	; (8008bd8 <SDMMC_GetCmdResp2+0x8c>)
 8008b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5e:	0a5b      	lsrs	r3, r3, #9
 8008b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b64:	fb02 f303 	mul.w	r3, r2, r3
 8008b68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	1e5a      	subs	r2, r3, #1
 8008b6e:	60fa      	str	r2, [r7, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d102      	bne.n	8008b7a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b78:	e026      	b.n	8008bc8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0ef      	beq.n	8008b6a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1ea      	bne.n	8008b6a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d004      	beq.n	8008baa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2204      	movs	r2, #4
 8008ba4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ba6:	2304      	movs	r3, #4
 8008ba8:	e00e      	b.n	8008bc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d004      	beq.n	8008bc0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e003      	b.n	8008bc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	22c5      	movs	r2, #197	; 0xc5
 8008bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	20000000 	.word	0x20000000
 8008bd8:	10624dd3 	.word	0x10624dd3

08008bdc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008be4:	4b1a      	ldr	r3, [pc, #104]	; (8008c50 <SDMMC_GetCmdResp3+0x74>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a1a      	ldr	r2, [pc, #104]	; (8008c54 <SDMMC_GetCmdResp3+0x78>)
 8008bea:	fba2 2303 	umull	r2, r3, r2, r3
 8008bee:	0a5b      	lsrs	r3, r3, #9
 8008bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bf4:	fb02 f303 	mul.w	r3, r2, r3
 8008bf8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	1e5a      	subs	r2, r3, #1
 8008bfe:	60fa      	str	r2, [r7, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d102      	bne.n	8008c0a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c08:	e01b      	b.n	8008c42 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0ef      	beq.n	8008bfa <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1ea      	bne.n	8008bfa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d004      	beq.n	8008c3a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2204      	movs	r2, #4
 8008c34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c36:	2304      	movs	r3, #4
 8008c38:	e003      	b.n	8008c42 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	22c5      	movs	r2, #197	; 0xc5
 8008c3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	20000000 	.word	0x20000000
 8008c54:	10624dd3 	.word	0x10624dd3

08008c58 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	460b      	mov	r3, r1
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c66:	4b35      	ldr	r3, [pc, #212]	; (8008d3c <SDMMC_GetCmdResp6+0xe4>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a35      	ldr	r2, [pc, #212]	; (8008d40 <SDMMC_GetCmdResp6+0xe8>)
 8008c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c70:	0a5b      	lsrs	r3, r3, #9
 8008c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c76:	fb02 f303 	mul.w	r3, r2, r3
 8008c7a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	1e5a      	subs	r2, r3, #1
 8008c80:	61fa      	str	r2, [r7, #28]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d102      	bne.n	8008c8c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c8a:	e052      	b.n	8008d32 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c90:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d0ef      	beq.n	8008c7c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1ea      	bne.n	8008c7c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008caa:	f003 0304 	and.w	r3, r3, #4
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d004      	beq.n	8008cbc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2204      	movs	r2, #4
 8008cb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008cb8:	2304      	movs	r3, #4
 8008cba:	e03a      	b.n	8008d32 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d004      	beq.n	8008cd2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e02f      	b.n	8008d32 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f7ff fc0e 	bl	80084f4 <SDMMC_GetCommandResponse>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	461a      	mov	r2, r3
 8008cdc:	7afb      	ldrb	r3, [r7, #11]
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d001      	beq.n	8008ce6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e025      	b.n	8008d32 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	22c5      	movs	r2, #197	; 0xc5
 8008cea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008cec:	2100      	movs	r1, #0
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f7ff fc0d 	bl	800850e <SDMMC_GetResponse>
 8008cf4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d106      	bne.n	8008d0e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	0c1b      	lsrs	r3, r3, #16
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	e011      	b.n	8008d32 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d1c:	e009      	b.n	8008d32 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d002      	beq.n	8008d2e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d2c:	e001      	b.n	8008d32 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3720      	adds	r7, #32
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000000 	.word	0x20000000
 8008d40:	10624dd3 	.word	0x10624dd3

08008d44 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d4c:	4b22      	ldr	r3, [pc, #136]	; (8008dd8 <SDMMC_GetCmdResp7+0x94>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a22      	ldr	r2, [pc, #136]	; (8008ddc <SDMMC_GetCmdResp7+0x98>)
 8008d52:	fba2 2303 	umull	r2, r3, r2, r3
 8008d56:	0a5b      	lsrs	r3, r3, #9
 8008d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d5c:	fb02 f303 	mul.w	r3, r2, r3
 8008d60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	1e5a      	subs	r2, r3, #1
 8008d66:	60fa      	str	r2, [r7, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d102      	bne.n	8008d72 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d70:	e02c      	b.n	8008dcc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d76:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0ef      	beq.n	8008d62 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1ea      	bne.n	8008d62 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d004      	beq.n	8008da2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2204      	movs	r2, #4
 8008d9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d9e:	2304      	movs	r3, #4
 8008da0:	e014      	b.n	8008dcc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d004      	beq.n	8008db8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e009      	b.n	8008dcc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d002      	beq.n	8008dca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2240      	movs	r2, #64	; 0x40
 8008dc8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008dca:	2300      	movs	r3, #0
  
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	20000000 	.word	0x20000000
 8008ddc:	10624dd3 	.word	0x10624dd3

08008de0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008de8:	4b11      	ldr	r3, [pc, #68]	; (8008e30 <SDMMC_GetCmdError+0x50>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a11      	ldr	r2, [pc, #68]	; (8008e34 <SDMMC_GetCmdError+0x54>)
 8008dee:	fba2 2303 	umull	r2, r3, r2, r3
 8008df2:	0a5b      	lsrs	r3, r3, #9
 8008df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df8:	fb02 f303 	mul.w	r3, r2, r3
 8008dfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	1e5a      	subs	r2, r3, #1
 8008e02:	60fa      	str	r2, [r7, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d102      	bne.n	8008e0e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e0c:	e009      	b.n	8008e22 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d0f1      	beq.n	8008dfe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	22c5      	movs	r2, #197	; 0xc5
 8008e1e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	20000000 	.word	0x20000000
 8008e34:	10624dd3 	.word	0x10624dd3

08008e38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e38:	b084      	sub	sp, #16
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	f107 001c 	add.w	r0, r7, #28
 8008e46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d120      	bne.n	8008e92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	4b20      	ldr	r3, [pc, #128]	; (8008ee4 <USB_CoreInit+0xac>)
 8008e62:	4013      	ands	r3, r2
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d105      	bne.n	8008e86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f001 fbee 	bl	800a668 <USB_CoreReset>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73fb      	strb	r3, [r7, #15]
 8008e90:	e010      	b.n	8008eb4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f001 fbe2 	bl	800a668 <USB_CoreReset>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d10b      	bne.n	8008ed2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f043 0206 	orr.w	r2, r3, #6
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f043 0220 	orr.w	r2, r3, #32
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ede:	b004      	add	sp, #16
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	ffbdffbf 	.word	0xffbdffbf

08008ee8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008ef6:	79fb      	ldrb	r3, [r7, #7]
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d165      	bne.n	8008fc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	4a41      	ldr	r2, [pc, #260]	; (8009004 <USB_SetTurnaroundTime+0x11c>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d906      	bls.n	8008f12 <USB_SetTurnaroundTime+0x2a>
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	4a40      	ldr	r2, [pc, #256]	; (8009008 <USB_SetTurnaroundTime+0x120>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d202      	bcs.n	8008f12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008f0c:	230f      	movs	r3, #15
 8008f0e:	617b      	str	r3, [r7, #20]
 8008f10:	e062      	b.n	8008fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	4a3c      	ldr	r2, [pc, #240]	; (8009008 <USB_SetTurnaroundTime+0x120>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d306      	bcc.n	8008f28 <USB_SetTurnaroundTime+0x40>
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	4a3b      	ldr	r2, [pc, #236]	; (800900c <USB_SetTurnaroundTime+0x124>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d202      	bcs.n	8008f28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008f22:	230e      	movs	r3, #14
 8008f24:	617b      	str	r3, [r7, #20]
 8008f26:	e057      	b.n	8008fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	4a38      	ldr	r2, [pc, #224]	; (800900c <USB_SetTurnaroundTime+0x124>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d306      	bcc.n	8008f3e <USB_SetTurnaroundTime+0x56>
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	4a37      	ldr	r2, [pc, #220]	; (8009010 <USB_SetTurnaroundTime+0x128>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d202      	bcs.n	8008f3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008f38:	230d      	movs	r3, #13
 8008f3a:	617b      	str	r3, [r7, #20]
 8008f3c:	e04c      	b.n	8008fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	4a33      	ldr	r2, [pc, #204]	; (8009010 <USB_SetTurnaroundTime+0x128>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d306      	bcc.n	8008f54 <USB_SetTurnaroundTime+0x6c>
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	4a32      	ldr	r2, [pc, #200]	; (8009014 <USB_SetTurnaroundTime+0x12c>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d802      	bhi.n	8008f54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008f4e:	230c      	movs	r3, #12
 8008f50:	617b      	str	r3, [r7, #20]
 8008f52:	e041      	b.n	8008fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	4a2f      	ldr	r2, [pc, #188]	; (8009014 <USB_SetTurnaroundTime+0x12c>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d906      	bls.n	8008f6a <USB_SetTurnaroundTime+0x82>
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	4a2e      	ldr	r2, [pc, #184]	; (8009018 <USB_SetTurnaroundTime+0x130>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d802      	bhi.n	8008f6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008f64:	230b      	movs	r3, #11
 8008f66:	617b      	str	r3, [r7, #20]
 8008f68:	e036      	b.n	8008fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	4a2a      	ldr	r2, [pc, #168]	; (8009018 <USB_SetTurnaroundTime+0x130>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d906      	bls.n	8008f80 <USB_SetTurnaroundTime+0x98>
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	4a29      	ldr	r2, [pc, #164]	; (800901c <USB_SetTurnaroundTime+0x134>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d802      	bhi.n	8008f80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008f7a:	230a      	movs	r3, #10
 8008f7c:	617b      	str	r3, [r7, #20]
 8008f7e:	e02b      	b.n	8008fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	4a26      	ldr	r2, [pc, #152]	; (800901c <USB_SetTurnaroundTime+0x134>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d906      	bls.n	8008f96 <USB_SetTurnaroundTime+0xae>
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	4a25      	ldr	r2, [pc, #148]	; (8009020 <USB_SetTurnaroundTime+0x138>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d202      	bcs.n	8008f96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008f90:	2309      	movs	r3, #9
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	e020      	b.n	8008fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	4a21      	ldr	r2, [pc, #132]	; (8009020 <USB_SetTurnaroundTime+0x138>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d306      	bcc.n	8008fac <USB_SetTurnaroundTime+0xc4>
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	4a20      	ldr	r2, [pc, #128]	; (8009024 <USB_SetTurnaroundTime+0x13c>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d802      	bhi.n	8008fac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008fa6:	2308      	movs	r3, #8
 8008fa8:	617b      	str	r3, [r7, #20]
 8008faa:	e015      	b.n	8008fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	4a1d      	ldr	r2, [pc, #116]	; (8009024 <USB_SetTurnaroundTime+0x13c>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d906      	bls.n	8008fc2 <USB_SetTurnaroundTime+0xda>
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	4a1c      	ldr	r2, [pc, #112]	; (8009028 <USB_SetTurnaroundTime+0x140>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d202      	bcs.n	8008fc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008fbc:	2307      	movs	r3, #7
 8008fbe:	617b      	str	r3, [r7, #20]
 8008fc0:	e00a      	b.n	8008fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008fc2:	2306      	movs	r3, #6
 8008fc4:	617b      	str	r3, [r7, #20]
 8008fc6:	e007      	b.n	8008fd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d102      	bne.n	8008fd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008fce:	2309      	movs	r3, #9
 8008fd0:	617b      	str	r3, [r7, #20]
 8008fd2:	e001      	b.n	8008fd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008fd4:	2309      	movs	r3, #9
 8008fd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	68da      	ldr	r2, [r3, #12]
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	029b      	lsls	r3, r3, #10
 8008fec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008ff0:	431a      	orrs	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	371c      	adds	r7, #28
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	00d8acbf 	.word	0x00d8acbf
 8009008:	00e4e1c0 	.word	0x00e4e1c0
 800900c:	00f42400 	.word	0x00f42400
 8009010:	01067380 	.word	0x01067380
 8009014:	011a499f 	.word	0x011a499f
 8009018:	01312cff 	.word	0x01312cff
 800901c:	014ca43f 	.word	0x014ca43f
 8009020:	016e3600 	.word	0x016e3600
 8009024:	01a6ab1f 	.word	0x01a6ab1f
 8009028:	01e84800 	.word	0x01e84800

0800902c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f043 0201 	orr.w	r2, r3, #1
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800904e:	b480      	push	{r7}
 8009050:	b083      	sub	sp, #12
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	f023 0201 	bic.w	r2, r3, #1
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	460b      	mov	r3, r1
 800907a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800907c:	2300      	movs	r3, #0
 800907e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800908c:	78fb      	ldrb	r3, [r7, #3]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d115      	bne.n	80090be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800909e:	2001      	movs	r0, #1
 80090a0:	f7f8 fd70 	bl	8001b84 <HAL_Delay>
      ms++;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	3301      	adds	r3, #1
 80090a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f001 fa4b 	bl	800a546 <USB_GetMode>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d01e      	beq.n	80090f4 <USB_SetCurrentMode+0x84>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2b31      	cmp	r3, #49	; 0x31
 80090ba:	d9f0      	bls.n	800909e <USB_SetCurrentMode+0x2e>
 80090bc:	e01a      	b.n	80090f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80090be:	78fb      	ldrb	r3, [r7, #3]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d115      	bne.n	80090f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090d0:	2001      	movs	r0, #1
 80090d2:	f7f8 fd57 	bl	8001b84 <HAL_Delay>
      ms++;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3301      	adds	r3, #1
 80090da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f001 fa32 	bl	800a546 <USB_GetMode>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d005      	beq.n	80090f4 <USB_SetCurrentMode+0x84>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b31      	cmp	r3, #49	; 0x31
 80090ec:	d9f0      	bls.n	80090d0 <USB_SetCurrentMode+0x60>
 80090ee:	e001      	b.n	80090f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e005      	b.n	8009100 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b32      	cmp	r3, #50	; 0x32
 80090f8:	d101      	bne.n	80090fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e000      	b.n	8009100 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009108:	b084      	sub	sp, #16
 800910a:	b580      	push	{r7, lr}
 800910c:	b086      	sub	sp, #24
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009122:	2300      	movs	r3, #0
 8009124:	613b      	str	r3, [r7, #16]
 8009126:	e009      	b.n	800913c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	3340      	adds	r3, #64	; 0x40
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4413      	add	r3, r2
 8009132:	2200      	movs	r2, #0
 8009134:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	3301      	adds	r3, #1
 800913a:	613b      	str	r3, [r7, #16]
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	2b0e      	cmp	r3, #14
 8009140:	d9f2      	bls.n	8009128 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d11c      	bne.n	8009182 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009156:	f043 0302 	orr.w	r3, r3, #2
 800915a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009160:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	601a      	str	r2, [r3, #0]
 8009180:	e005      	b.n	800918e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009186:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009194:	461a      	mov	r2, r3
 8009196:	2300      	movs	r3, #0
 8009198:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a0:	4619      	mov	r1, r3
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a8:	461a      	mov	r2, r3
 80091aa:	680b      	ldr	r3, [r1, #0]
 80091ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d10c      	bne.n	80091ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d104      	bne.n	80091c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80091ba:	2100      	movs	r1, #0
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f965 	bl	800948c <USB_SetDevSpeed>
 80091c2:	e008      	b.n	80091d6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80091c4:	2101      	movs	r1, #1
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f960 	bl	800948c <USB_SetDevSpeed>
 80091cc:	e003      	b.n	80091d6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80091ce:	2103      	movs	r1, #3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f95b 	bl	800948c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091d6:	2110      	movs	r1, #16
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f8f3 	bl	80093c4 <USB_FlushTxFifo>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f91f 	bl	800942c <USB_FlushRxFifo>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fe:	461a      	mov	r2, r3
 8009200:	2300      	movs	r3, #0
 8009202:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800920a:	461a      	mov	r2, r3
 800920c:	2300      	movs	r3, #0
 800920e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009216:	461a      	mov	r2, r3
 8009218:	2300      	movs	r3, #0
 800921a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800921c:	2300      	movs	r3, #0
 800921e:	613b      	str	r3, [r7, #16]
 8009220:	e043      	b.n	80092aa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	015a      	lsls	r2, r3, #5
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	4413      	add	r3, r2
 800922a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009234:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009238:	d118      	bne.n	800926c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10a      	bne.n	8009256 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924c:	461a      	mov	r2, r3
 800924e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009252:	6013      	str	r3, [r2, #0]
 8009254:	e013      	b.n	800927e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	015a      	lsls	r2, r3, #5
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	4413      	add	r3, r2
 800925e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009262:	461a      	mov	r2, r3
 8009264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009268:	6013      	str	r3, [r2, #0]
 800926a:	e008      	b.n	800927e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009278:	461a      	mov	r2, r3
 800927a:	2300      	movs	r3, #0
 800927c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	015a      	lsls	r2, r3, #5
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	4413      	add	r3, r2
 8009286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928a:	461a      	mov	r2, r3
 800928c:	2300      	movs	r3, #0
 800928e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929c:	461a      	mov	r2, r3
 800929e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	3301      	adds	r3, #1
 80092a8:	613b      	str	r3, [r7, #16]
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d3b7      	bcc.n	8009222 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092b2:	2300      	movs	r3, #0
 80092b4:	613b      	str	r3, [r7, #16]
 80092b6:	e043      	b.n	8009340 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092ce:	d118      	bne.n	8009302 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10a      	bne.n	80092ec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	015a      	lsls	r2, r3, #5
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e2:	461a      	mov	r2, r3
 80092e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	e013      	b.n	8009314 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	015a      	lsls	r2, r3, #5
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4413      	add	r3, r2
 80092f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f8:	461a      	mov	r2, r3
 80092fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	e008      	b.n	8009314 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	015a      	lsls	r2, r3, #5
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	4413      	add	r3, r2
 800930a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930e:	461a      	mov	r2, r3
 8009310:	2300      	movs	r3, #0
 8009312:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	015a      	lsls	r2, r3, #5
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4413      	add	r3, r2
 800931c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009320:	461a      	mov	r2, r3
 8009322:	2300      	movs	r3, #0
 8009324:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	4413      	add	r3, r2
 800932e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009332:	461a      	mov	r2, r3
 8009334:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009338:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	3301      	adds	r3, #1
 800933e:	613b      	str	r3, [r7, #16]
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	429a      	cmp	r2, r3
 8009346:	d3b7      	bcc.n	80092b8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800935a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009368:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936c:	2b00      	cmp	r3, #0
 800936e:	d105      	bne.n	800937c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	f043 0210 	orr.w	r2, r3, #16
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	699a      	ldr	r2, [r3, #24]
 8009380:	4b0e      	ldr	r3, [pc, #56]	; (80093bc <USB_DevInit+0x2b4>)
 8009382:	4313      	orrs	r3, r2
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938a:	2b00      	cmp	r3, #0
 800938c:	d005      	beq.n	800939a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	699b      	ldr	r3, [r3, #24]
 8009392:	f043 0208 	orr.w	r2, r3, #8
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800939a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800939c:	2b01      	cmp	r3, #1
 800939e:	d105      	bne.n	80093ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	699a      	ldr	r2, [r3, #24]
 80093a4:	4b06      	ldr	r3, [pc, #24]	; (80093c0 <USB_DevInit+0x2b8>)
 80093a6:	4313      	orrs	r3, r2
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093b8:	b004      	add	sp, #16
 80093ba:	4770      	bx	lr
 80093bc:	803c3800 	.word	0x803c3800
 80093c0:	40000004 	.word	0x40000004

080093c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	3301      	adds	r3, #1
 80093d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4a13      	ldr	r2, [pc, #76]	; (8009428 <USB_FlushTxFifo+0x64>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d901      	bls.n	80093e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e01b      	b.n	800941c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	daf2      	bge.n	80093d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80093ec:	2300      	movs	r3, #0
 80093ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	019b      	lsls	r3, r3, #6
 80093f4:	f043 0220 	orr.w	r2, r3, #32
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3301      	adds	r3, #1
 8009400:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	4a08      	ldr	r2, [pc, #32]	; (8009428 <USB_FlushTxFifo+0x64>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d901      	bls.n	800940e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e006      	b.n	800941c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	f003 0320 	and.w	r3, r3, #32
 8009416:	2b20      	cmp	r3, #32
 8009418:	d0f0      	beq.n	80093fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	00030d40 	.word	0x00030d40

0800942c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	3301      	adds	r3, #1
 800943c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	4a11      	ldr	r2, [pc, #68]	; (8009488 <USB_FlushRxFifo+0x5c>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d901      	bls.n	800944a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e018      	b.n	800947c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	2b00      	cmp	r3, #0
 8009450:	daf2      	bge.n	8009438 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2210      	movs	r2, #16
 800945a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	3301      	adds	r3, #1
 8009460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	4a08      	ldr	r2, [pc, #32]	; (8009488 <USB_FlushRxFifo+0x5c>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d901      	bls.n	800946e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e006      	b.n	800947c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f003 0310 	and.w	r3, r3, #16
 8009476:	2b10      	cmp	r3, #16
 8009478:	d0f0      	beq.n	800945c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	00030d40 	.word	0x00030d40

0800948c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	78fb      	ldrb	r3, [r7, #3]
 80094a6:	68f9      	ldr	r1, [r7, #12]
 80094a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094ac:	4313      	orrs	r3, r2
 80094ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80094be:	b480      	push	{r7}
 80094c0:	b087      	sub	sp, #28
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f003 0306 	and.w	r3, r3, #6
 80094d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d102      	bne.n	80094e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80094de:	2300      	movs	r3, #0
 80094e0:	75fb      	strb	r3, [r7, #23]
 80094e2:	e00a      	b.n	80094fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d002      	beq.n	80094f0 <USB_GetDevSpeed+0x32>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2b06      	cmp	r3, #6
 80094ee:	d102      	bne.n	80094f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80094f0:	2302      	movs	r3, #2
 80094f2:	75fb      	strb	r3, [r7, #23]
 80094f4:	e001      	b.n	80094fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80094f6:	230f      	movs	r3, #15
 80094f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	371c      	adds	r7, #28
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	785b      	ldrb	r3, [r3, #1]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d139      	bne.n	8009598 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952a:	69da      	ldr	r2, [r3, #28]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	f003 030f 	and.w	r3, r3, #15
 8009534:	2101      	movs	r1, #1
 8009536:	fa01 f303 	lsl.w	r3, r1, r3
 800953a:	b29b      	uxth	r3, r3
 800953c:	68f9      	ldr	r1, [r7, #12]
 800953e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009542:	4313      	orrs	r3, r2
 8009544:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4413      	add	r3, r2
 800954e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d153      	bne.n	8009604 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	4413      	add	r3, r2
 8009564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	791b      	ldrb	r3, [r3, #4]
 8009576:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009578:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	059b      	lsls	r3, r3, #22
 800957e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009580:	431a      	orrs	r2, r3
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	0159      	lsls	r1, r3, #5
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	440b      	add	r3, r1
 800958a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958e:	4619      	mov	r1, r3
 8009590:	4b20      	ldr	r3, [pc, #128]	; (8009614 <USB_ActivateEndpoint+0x10c>)
 8009592:	4313      	orrs	r3, r2
 8009594:	600b      	str	r3, [r1, #0]
 8009596:	e035      	b.n	8009604 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800959e:	69da      	ldr	r2, [r3, #28]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	f003 030f 	and.w	r3, r3, #15
 80095a8:	2101      	movs	r1, #1
 80095aa:	fa01 f303 	lsl.w	r3, r1, r3
 80095ae:	041b      	lsls	r3, r3, #16
 80095b0:	68f9      	ldr	r1, [r7, #12]
 80095b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095b6:	4313      	orrs	r3, r2
 80095b8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	015a      	lsls	r2, r3, #5
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	4413      	add	r3, r2
 80095c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d119      	bne.n	8009604 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	791b      	ldrb	r3, [r3, #4]
 80095ea:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80095ec:	430b      	orrs	r3, r1
 80095ee:	431a      	orrs	r2, r3
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	0159      	lsls	r1, r3, #5
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	440b      	add	r3, r1
 80095f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095fc:	4619      	mov	r1, r3
 80095fe:	4b05      	ldr	r3, [pc, #20]	; (8009614 <USB_ActivateEndpoint+0x10c>)
 8009600:	4313      	orrs	r3, r2
 8009602:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	10008000 	.word	0x10008000

08009618 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	785b      	ldrb	r3, [r3, #1]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d161      	bne.n	80096f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800964a:	d11f      	bne.n	800968c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	015a      	lsls	r2, r3, #5
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	4413      	add	r3, r2
 8009654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	0151      	lsls	r1, r2, #5
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	440a      	add	r2, r1
 8009662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009666:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800966a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	0151      	lsls	r1, r2, #5
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	440a      	add	r2, r1
 8009682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009686:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800968a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	f003 030f 	and.w	r3, r3, #15
 800969c:	2101      	movs	r1, #1
 800969e:	fa01 f303 	lsl.w	r3, r1, r3
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	43db      	mvns	r3, r3
 80096a6:	68f9      	ldr	r1, [r7, #12]
 80096a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096ac:	4013      	ands	r3, r2
 80096ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096b6:	69da      	ldr	r2, [r3, #28]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	f003 030f 	and.w	r3, r3, #15
 80096c0:	2101      	movs	r1, #1
 80096c2:	fa01 f303 	lsl.w	r3, r1, r3
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	43db      	mvns	r3, r3
 80096ca:	68f9      	ldr	r1, [r7, #12]
 80096cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096d0:	4013      	ands	r3, r2
 80096d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	0159      	lsls	r1, r3, #5
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	440b      	add	r3, r1
 80096ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ee:	4619      	mov	r1, r3
 80096f0:	4b35      	ldr	r3, [pc, #212]	; (80097c8 <USB_DeactivateEndpoint+0x1b0>)
 80096f2:	4013      	ands	r3, r2
 80096f4:	600b      	str	r3, [r1, #0]
 80096f6:	e060      	b.n	80097ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800970a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800970e:	d11f      	bne.n	8009750 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	0151      	lsls	r1, r2, #5
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	440a      	add	r2, r1
 8009726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800972a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800972e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	0151      	lsls	r1, r2, #5
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	440a      	add	r2, r1
 8009746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800974a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800974e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	f003 030f 	and.w	r3, r3, #15
 8009760:	2101      	movs	r1, #1
 8009762:	fa01 f303 	lsl.w	r3, r1, r3
 8009766:	041b      	lsls	r3, r3, #16
 8009768:	43db      	mvns	r3, r3
 800976a:	68f9      	ldr	r1, [r7, #12]
 800976c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009770:	4013      	ands	r3, r2
 8009772:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800977a:	69da      	ldr	r2, [r3, #28]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	f003 030f 	and.w	r3, r3, #15
 8009784:	2101      	movs	r1, #1
 8009786:	fa01 f303 	lsl.w	r3, r1, r3
 800978a:	041b      	lsls	r3, r3, #16
 800978c:	43db      	mvns	r3, r3
 800978e:	68f9      	ldr	r1, [r7, #12]
 8009790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009794:	4013      	ands	r3, r2
 8009796:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	0159      	lsls	r1, r3, #5
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	440b      	add	r3, r1
 80097ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b2:	4619      	mov	r1, r3
 80097b4:	4b05      	ldr	r3, [pc, #20]	; (80097cc <USB_DeactivateEndpoint+0x1b4>)
 80097b6:	4013      	ands	r3, r2
 80097b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	ec337800 	.word	0xec337800
 80097cc:	eff37800 	.word	0xeff37800

080097d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08a      	sub	sp, #40	; 0x28
 80097d4:	af02      	add	r7, sp, #8
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	4613      	mov	r3, r2
 80097dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	785b      	ldrb	r3, [r3, #1]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	f040 8163 	bne.w	8009ab8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d132      	bne.n	8009860 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	4413      	add	r3, r2
 8009802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009806:	691a      	ldr	r2, [r3, #16]
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	0159      	lsls	r1, r3, #5
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	440b      	add	r3, r1
 8009810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009814:	4619      	mov	r1, r3
 8009816:	4ba5      	ldr	r3, [pc, #660]	; (8009aac <USB_EPStartXfer+0x2dc>)
 8009818:	4013      	ands	r3, r2
 800981a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	015a      	lsls	r2, r3, #5
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	4413      	add	r3, r2
 8009824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	69ba      	ldr	r2, [r7, #24]
 800982c:	0151      	lsls	r1, r2, #5
 800982e:	69fa      	ldr	r2, [r7, #28]
 8009830:	440a      	add	r2, r1
 8009832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800983a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	015a      	lsls	r2, r3, #5
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	4413      	add	r3, r2
 8009844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009848:	691a      	ldr	r2, [r3, #16]
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	0159      	lsls	r1, r3, #5
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	440b      	add	r3, r1
 8009852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009856:	4619      	mov	r1, r3
 8009858:	4b95      	ldr	r3, [pc, #596]	; (8009ab0 <USB_EPStartXfer+0x2e0>)
 800985a:	4013      	ands	r3, r2
 800985c:	610b      	str	r3, [r1, #16]
 800985e:	e074      	b.n	800994a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	4413      	add	r3, r2
 8009868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800986c:	691a      	ldr	r2, [r3, #16]
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	0159      	lsls	r1, r3, #5
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	440b      	add	r3, r1
 8009876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800987a:	4619      	mov	r1, r3
 800987c:	4b8c      	ldr	r3, [pc, #560]	; (8009ab0 <USB_EPStartXfer+0x2e0>)
 800987e:	4013      	ands	r3, r2
 8009880:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	015a      	lsls	r2, r3, #5
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	4413      	add	r3, r2
 800988a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988e:	691a      	ldr	r2, [r3, #16]
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	0159      	lsls	r1, r3, #5
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	440b      	add	r3, r1
 8009898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989c:	4619      	mov	r1, r3
 800989e:	4b83      	ldr	r3, [pc, #524]	; (8009aac <USB_EPStartXfer+0x2dc>)
 80098a0:	4013      	ands	r3, r2
 80098a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	6999      	ldr	r1, [r3, #24]
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	440b      	add	r3, r1
 80098bc:	1e59      	subs	r1, r3, #1
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80098c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80098c8:	4b7a      	ldr	r3, [pc, #488]	; (8009ab4 <USB_EPStartXfer+0x2e4>)
 80098ca:	400b      	ands	r3, r1
 80098cc:	69b9      	ldr	r1, [r7, #24]
 80098ce:	0148      	lsls	r0, r1, #5
 80098d0:	69f9      	ldr	r1, [r7, #28]
 80098d2:	4401      	add	r1, r0
 80098d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80098d8:	4313      	orrs	r3, r2
 80098da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e8:	691a      	ldr	r2, [r3, #16]
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098f2:	69b9      	ldr	r1, [r7, #24]
 80098f4:	0148      	lsls	r0, r1, #5
 80098f6:	69f9      	ldr	r1, [r7, #28]
 80098f8:	4401      	add	r1, r0
 80098fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80098fe:	4313      	orrs	r3, r2
 8009900:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	791b      	ldrb	r3, [r3, #4]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d11f      	bne.n	800994a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	015a      	lsls	r2, r3, #5
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	4413      	add	r3, r2
 8009912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	69ba      	ldr	r2, [r7, #24]
 800991a:	0151      	lsls	r1, r2, #5
 800991c:	69fa      	ldr	r2, [r7, #28]
 800991e:	440a      	add	r2, r1
 8009920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009924:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009928:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	69ba      	ldr	r2, [r7, #24]
 800993a:	0151      	lsls	r1, r2, #5
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	440a      	add	r2, r1
 8009940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009944:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009948:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d14b      	bne.n	80099e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	695b      	ldr	r3, [r3, #20]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d009      	beq.n	800996c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009964:	461a      	mov	r2, r3
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	791b      	ldrb	r3, [r3, #4]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d128      	bne.n	80099c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009980:	2b00      	cmp	r3, #0
 8009982:	d110      	bne.n	80099a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	69ba      	ldr	r2, [r7, #24]
 8009994:	0151      	lsls	r1, r2, #5
 8009996:	69fa      	ldr	r2, [r7, #28]
 8009998:	440a      	add	r2, r1
 800999a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800999e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	e00f      	b.n	80099c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	69ba      	ldr	r2, [r7, #24]
 80099b6:	0151      	lsls	r1, r2, #5
 80099b8:	69fa      	ldr	r2, [r7, #28]
 80099ba:	440a      	add	r2, r1
 80099bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	015a      	lsls	r2, r3, #5
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	4413      	add	r3, r2
 80099ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	69ba      	ldr	r2, [r7, #24]
 80099d6:	0151      	lsls	r1, r2, #5
 80099d8:	69fa      	ldr	r2, [r7, #28]
 80099da:	440a      	add	r2, r1
 80099dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099e4:	6013      	str	r3, [r2, #0]
 80099e6:	e137      	b.n	8009c58 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	015a      	lsls	r2, r3, #5
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	4413      	add	r3, r2
 80099f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	69ba      	ldr	r2, [r7, #24]
 80099f8:	0151      	lsls	r1, r2, #5
 80099fa:	69fa      	ldr	r2, [r7, #28]
 80099fc:	440a      	add	r2, r1
 80099fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a06:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	791b      	ldrb	r3, [r3, #4]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d015      	beq.n	8009a3c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f000 811f 	beq.w	8009c58 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	f003 030f 	and.w	r3, r3, #15
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a30:	69f9      	ldr	r1, [r7, #28]
 8009a32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a36:	4313      	orrs	r3, r2
 8009a38:	634b      	str	r3, [r1, #52]	; 0x34
 8009a3a:	e10d      	b.n	8009c58 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d110      	bne.n	8009a6e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69ba      	ldr	r2, [r7, #24]
 8009a5c:	0151      	lsls	r1, r2, #5
 8009a5e:	69fa      	ldr	r2, [r7, #28]
 8009a60:	440a      	add	r2, r1
 8009a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a6a:	6013      	str	r3, [r2, #0]
 8009a6c:	e00f      	b.n	8009a8e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	015a      	lsls	r2, r3, #5
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	0151      	lsls	r1, r2, #5
 8009a80:	69fa      	ldr	r2, [r7, #28]
 8009a82:	440a      	add	r2, r1
 8009a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a8c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	6919      	ldr	r1, [r3, #16]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	781a      	ldrb	r2, [r3, #0]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	b298      	uxth	r0, r3
 8009a9c:	79fb      	ldrb	r3, [r7, #7]
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f000 faea 	bl	800a07c <USB_WritePacket>
 8009aa8:	e0d6      	b.n	8009c58 <USB_EPStartXfer+0x488>
 8009aaa:	bf00      	nop
 8009aac:	e007ffff 	.word	0xe007ffff
 8009ab0:	fff80000 	.word	0xfff80000
 8009ab4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	015a      	lsls	r2, r3, #5
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	4413      	add	r3, r2
 8009ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac4:	691a      	ldr	r2, [r3, #16]
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	0159      	lsls	r1, r3, #5
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	440b      	add	r3, r1
 8009ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	4b63      	ldr	r3, [pc, #396]	; (8009c64 <USB_EPStartXfer+0x494>)
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae6:	691a      	ldr	r2, [r3, #16]
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	0159      	lsls	r1, r3, #5
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	440b      	add	r3, r1
 8009af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af4:	4619      	mov	r1, r3
 8009af6:	4b5c      	ldr	r3, [pc, #368]	; (8009c68 <USB_EPStartXfer+0x498>)
 8009af8:	4013      	ands	r3, r2
 8009afa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d123      	bne.n	8009b4c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b10:	691a      	ldr	r2, [r3, #16]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b1a:	69b9      	ldr	r1, [r7, #24]
 8009b1c:	0148      	lsls	r0, r1, #5
 8009b1e:	69f9      	ldr	r1, [r7, #28]
 8009b20:	4401      	add	r1, r0
 8009b22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b26:	4313      	orrs	r3, r2
 8009b28:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	0151      	lsls	r1, r2, #5
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	440a      	add	r2, r1
 8009b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b48:	6113      	str	r3, [r2, #16]
 8009b4a:	e037      	b.n	8009bbc <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	699a      	ldr	r2, [r3, #24]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	4413      	add	r3, r2
 8009b56:	1e5a      	subs	r2, r3, #1
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b60:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	8afa      	ldrh	r2, [r7, #22]
 8009b68:	fb03 f202 	mul.w	r2, r3, r2
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b7c:	691a      	ldr	r2, [r3, #16]
 8009b7e:	8afb      	ldrh	r3, [r7, #22]
 8009b80:	04d9      	lsls	r1, r3, #19
 8009b82:	4b3a      	ldr	r3, [pc, #232]	; (8009c6c <USB_EPStartXfer+0x49c>)
 8009b84:	400b      	ands	r3, r1
 8009b86:	69b9      	ldr	r1, [r7, #24]
 8009b88:	0148      	lsls	r0, r1, #5
 8009b8a:	69f9      	ldr	r1, [r7, #28]
 8009b8c:	4401      	add	r1, r0
 8009b8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b92:	4313      	orrs	r3, r2
 8009b94:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	015a      	lsls	r2, r3, #5
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba2:	691a      	ldr	r2, [r3, #16]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	69db      	ldr	r3, [r3, #28]
 8009ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bac:	69b9      	ldr	r1, [r7, #24]
 8009bae:	0148      	lsls	r0, r1, #5
 8009bb0:	69f9      	ldr	r1, [r7, #28]
 8009bb2:	4401      	add	r1, r0
 8009bb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009bbc:	79fb      	ldrb	r3, [r7, #7]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d10d      	bne.n	8009bde <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d009      	beq.n	8009bde <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	6919      	ldr	r1, [r3, #16]
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	015a      	lsls	r2, r3, #5
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bda:	460a      	mov	r2, r1
 8009bdc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	791b      	ldrb	r3, [r3, #4]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d128      	bne.n	8009c38 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d110      	bne.n	8009c18 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	015a      	lsls	r2, r3, #5
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	69ba      	ldr	r2, [r7, #24]
 8009c06:	0151      	lsls	r1, r2, #5
 8009c08:	69fa      	ldr	r2, [r7, #28]
 8009c0a:	440a      	add	r2, r1
 8009c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	e00f      	b.n	8009c38 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	015a      	lsls	r2, r3, #5
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	4413      	add	r3, r2
 8009c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	69ba      	ldr	r2, [r7, #24]
 8009c28:	0151      	lsls	r1, r2, #5
 8009c2a:	69fa      	ldr	r2, [r7, #28]
 8009c2c:	440a      	add	r2, r1
 8009c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	69ba      	ldr	r2, [r7, #24]
 8009c48:	0151      	lsls	r1, r2, #5
 8009c4a:	69fa      	ldr	r2, [r7, #28]
 8009c4c:	440a      	add	r2, r1
 8009c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3720      	adds	r7, #32
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	fff80000 	.word	0xfff80000
 8009c68:	e007ffff 	.word	0xe007ffff
 8009c6c:	1ff80000 	.word	0x1ff80000

08009c70 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b087      	sub	sp, #28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	785b      	ldrb	r3, [r3, #1]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	f040 80ce 	bne.w	8009e2e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d132      	bne.n	8009d00 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	015a      	lsls	r2, r3, #5
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca6:	691a      	ldr	r2, [r3, #16]
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	0159      	lsls	r1, r3, #5
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	440b      	add	r3, r1
 8009cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	4b9a      	ldr	r3, [pc, #616]	; (8009f20 <USB_EP0StartXfer+0x2b0>)
 8009cb8:	4013      	ands	r3, r2
 8009cba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	015a      	lsls	r2, r3, #5
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc8:	691b      	ldr	r3, [r3, #16]
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	0151      	lsls	r1, r2, #5
 8009cce:	697a      	ldr	r2, [r7, #20]
 8009cd0:	440a      	add	r2, r1
 8009cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	015a      	lsls	r2, r3, #5
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce8:	691a      	ldr	r2, [r3, #16]
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	0159      	lsls	r1, r3, #5
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	440b      	add	r3, r1
 8009cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	4b8a      	ldr	r3, [pc, #552]	; (8009f24 <USB_EP0StartXfer+0x2b4>)
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	610b      	str	r3, [r1, #16]
 8009cfe:	e04e      	b.n	8009d9e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d0c:	691a      	ldr	r2, [r3, #16]
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	0159      	lsls	r1, r3, #5
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	440b      	add	r3, r1
 8009d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	4b81      	ldr	r3, [pc, #516]	; (8009f24 <USB_EP0StartXfer+0x2b4>)
 8009d1e:	4013      	ands	r3, r2
 8009d20:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d2e:	691a      	ldr	r2, [r3, #16]
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	0159      	lsls	r1, r3, #5
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	440b      	add	r3, r1
 8009d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	4b78      	ldr	r3, [pc, #480]	; (8009f20 <USB_EP0StartXfer+0x2b0>)
 8009d40:	4013      	ands	r3, r2
 8009d42:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	699a      	ldr	r2, [r3, #24]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d903      	bls.n	8009d58 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	0151      	lsls	r1, r2, #5
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	440a      	add	r2, r1
 8009d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	015a      	lsls	r2, r3, #5
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	4413      	add	r3, r2
 8009d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d84:	691a      	ldr	r2, [r3, #16]
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d8e:	6939      	ldr	r1, [r7, #16]
 8009d90:	0148      	lsls	r0, r1, #5
 8009d92:	6979      	ldr	r1, [r7, #20]
 8009d94:	4401      	add	r1, r0
 8009d96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009d9e:	79fb      	ldrb	r3, [r7, #7]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d11e      	bne.n	8009de2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	695b      	ldr	r3, [r3, #20]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d009      	beq.n	8009dc0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db8:	461a      	mov	r2, r3
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	693a      	ldr	r2, [r7, #16]
 8009dd0:	0151      	lsls	r1, r2, #5
 8009dd2:	697a      	ldr	r2, [r7, #20]
 8009dd4:	440a      	add	r2, r1
 8009dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009dde:	6013      	str	r3, [r2, #0]
 8009de0:	e097      	b.n	8009f12 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	015a      	lsls	r2, r3, #5
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	0151      	lsls	r1, r2, #5
 8009df4:	697a      	ldr	r2, [r7, #20]
 8009df6:	440a      	add	r2, r1
 8009df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e00:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f000 8083 	beq.w	8009f12 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	f003 030f 	and.w	r3, r3, #15
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e22:	6979      	ldr	r1, [r7, #20]
 8009e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	634b      	str	r3, [r1, #52]	; 0x34
 8009e2c:	e071      	b.n	8009f12 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	015a      	lsls	r2, r3, #5
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3a:	691a      	ldr	r2, [r3, #16]
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	0159      	lsls	r1, r3, #5
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	440b      	add	r3, r1
 8009e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4b36      	ldr	r3, [pc, #216]	; (8009f24 <USB_EP0StartXfer+0x2b4>)
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	015a      	lsls	r2, r3, #5
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e5c:	691a      	ldr	r2, [r3, #16]
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	0159      	lsls	r1, r3, #5
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	440b      	add	r3, r1
 8009e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4b2c      	ldr	r3, [pc, #176]	; (8009f20 <USB_EP0StartXfer+0x2b0>)
 8009e6e:	4013      	ands	r3, r2
 8009e70:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	699b      	ldr	r3, [r3, #24]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	68da      	ldr	r2, [r3, #12]
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	68da      	ldr	r2, [r3, #12]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	015a      	lsls	r2, r3, #5
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	4413      	add	r3, r2
 8009e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	0151      	lsls	r1, r2, #5
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	440a      	add	r2, r1
 8009ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ea4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ea8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	015a      	lsls	r2, r3, #5
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb6:	691a      	ldr	r2, [r3, #16]
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	69db      	ldr	r3, [r3, #28]
 8009ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ec0:	6939      	ldr	r1, [r7, #16]
 8009ec2:	0148      	lsls	r0, r1, #5
 8009ec4:	6979      	ldr	r1, [r7, #20]
 8009ec6:	4401      	add	r1, r0
 8009ec8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009ed0:	79fb      	ldrb	r3, [r7, #7]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d10d      	bne.n	8009ef2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d009      	beq.n	8009ef2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	6919      	ldr	r1, [r3, #16]
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	015a      	lsls	r2, r3, #5
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	4413      	add	r3, r2
 8009eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eee:	460a      	mov	r2, r1
 8009ef0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	015a      	lsls	r2, r3, #5
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	0151      	lsls	r1, r2, #5
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	440a      	add	r2, r1
 8009f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	371c      	adds	r7, #28
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	e007ffff 	.word	0xe007ffff
 8009f24:	fff80000 	.word	0xfff80000

08009f28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f36:	2300      	movs	r3, #0
 8009f38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	785b      	ldrb	r3, [r3, #1]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d14a      	bne.n	8009fdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	015a      	lsls	r2, r3, #5
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f5e:	f040 8086 	bne.w	800a06e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	015a      	lsls	r2, r3, #5
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	7812      	ldrb	r2, [r2, #0]
 8009f76:	0151      	lsls	r1, r2, #5
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	440a      	add	r2, r1
 8009f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	015a      	lsls	r2, r3, #5
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	4413      	add	r3, r2
 8009f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	7812      	ldrb	r2, [r2, #0]
 8009f9a:	0151      	lsls	r1, r2, #5
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	440a      	add	r2, r1
 8009fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3301      	adds	r3, #1
 8009fae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d902      	bls.n	8009fc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	75fb      	strb	r3, [r7, #23]
          break;
 8009fbe:	e056      	b.n	800a06e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fd8:	d0e7      	beq.n	8009faa <USB_EPStopXfer+0x82>
 8009fda:	e048      	b.n	800a06e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ff4:	d13b      	bne.n	800a06e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	683a      	ldr	r2, [r7, #0]
 800a008:	7812      	ldrb	r2, [r2, #0]
 800a00a:	0151      	lsls	r1, r2, #5
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	440a      	add	r2, r1
 800a010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a014:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a018:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	015a      	lsls	r2, r3, #5
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	4413      	add	r3, r2
 800a024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	7812      	ldrb	r2, [r2, #0]
 800a02e:	0151      	lsls	r1, r2, #5
 800a030:	693a      	ldr	r2, [r7, #16]
 800a032:	440a      	add	r2, r1
 800a034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a038:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a03c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	3301      	adds	r3, #1
 800a042:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f242 7210 	movw	r2, #10000	; 0x2710
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d902      	bls.n	800a054 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	75fb      	strb	r3, [r7, #23]
          break;
 800a052:	e00c      	b.n	800a06e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	015a      	lsls	r2, r3, #5
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	4413      	add	r3, r2
 800a05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a06c:	d0e7      	beq.n	800a03e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a06e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a070:	4618      	mov	r0, r3
 800a072:	371c      	adds	r7, #28
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b089      	sub	sp, #36	; 0x24
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	4611      	mov	r1, r2
 800a088:	461a      	mov	r2, r3
 800a08a:	460b      	mov	r3, r1
 800a08c:	71fb      	strb	r3, [r7, #7]
 800a08e:	4613      	mov	r3, r2
 800a090:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a09a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d123      	bne.n	800a0ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a0a2:	88bb      	ldrh	r3, [r7, #4]
 800a0a4:	3303      	adds	r3, #3
 800a0a6:	089b      	lsrs	r3, r3, #2
 800a0a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	61bb      	str	r3, [r7, #24]
 800a0ae:	e018      	b.n	800a0e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a0b0:	79fb      	ldrb	r3, [r7, #7]
 800a0b2:	031a      	lsls	r2, r3, #12
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0bc:	461a      	mov	r2, r3
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	61bb      	str	r3, [r7, #24]
 800a0e2:	69ba      	ldr	r2, [r7, #24]
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d3e2      	bcc.n	800a0b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3724      	adds	r7, #36	; 0x24
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b08b      	sub	sp, #44	; 0x2c
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	4613      	mov	r3, r2
 800a104:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a10e:	88fb      	ldrh	r3, [r7, #6]
 800a110:	089b      	lsrs	r3, r3, #2
 800a112:	b29b      	uxth	r3, r3
 800a114:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a116:	88fb      	ldrh	r3, [r7, #6]
 800a118:	f003 0303 	and.w	r3, r3, #3
 800a11c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a11e:	2300      	movs	r3, #0
 800a120:	623b      	str	r3, [r7, #32]
 800a122:	e014      	b.n	800a14e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	3301      	adds	r3, #1
 800a134:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	3301      	adds	r3, #1
 800a13a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13e:	3301      	adds	r3, #1
 800a140:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	3301      	adds	r3, #1
 800a146:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	3301      	adds	r3, #1
 800a14c:	623b      	str	r3, [r7, #32]
 800a14e:	6a3a      	ldr	r2, [r7, #32]
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	429a      	cmp	r2, r3
 800a154:	d3e6      	bcc.n	800a124 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a156:	8bfb      	ldrh	r3, [r7, #30]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d01e      	beq.n	800a19a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a166:	461a      	mov	r2, r3
 800a168:	f107 0310 	add.w	r3, r7, #16
 800a16c:	6812      	ldr	r2, [r2, #0]
 800a16e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	b2db      	uxtb	r3, r3
 800a176:	00db      	lsls	r3, r3, #3
 800a178:	fa22 f303 	lsr.w	r3, r2, r3
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	701a      	strb	r2, [r3, #0]
      i++;
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	3301      	adds	r3, #1
 800a186:	623b      	str	r3, [r7, #32]
      pDest++;
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	3301      	adds	r3, #1
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a18e:	8bfb      	ldrh	r3, [r7, #30]
 800a190:	3b01      	subs	r3, #1
 800a192:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a194:	8bfb      	ldrh	r3, [r7, #30]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1ea      	bne.n	800a170 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	372c      	adds	r7, #44	; 0x2c
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	785b      	ldrb	r3, [r3, #1]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d12c      	bne.n	800a21e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	db12      	blt.n	800a1fc <USB_EPSetStall+0x54>
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00f      	beq.n	800a1fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	015a      	lsls	r2, r3, #5
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	0151      	lsls	r1, r2, #5
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	440a      	add	r2, r1
 800a1f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a1fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	0151      	lsls	r1, r2, #5
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	440a      	add	r2, r1
 800a212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a216:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a21a:	6013      	str	r3, [r2, #0]
 800a21c:	e02b      	b.n	800a276 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	4413      	add	r3, r2
 800a226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	db12      	blt.n	800a256 <USB_EPSetStall+0xae>
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00f      	beq.n	800a256 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	015a      	lsls	r2, r3, #5
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	4413      	add	r3, r2
 800a23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	0151      	lsls	r1, r2, #5
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	440a      	add	r2, r1
 800a24c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a250:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a254:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	015a      	lsls	r2, r3, #5
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	4413      	add	r3, r2
 800a25e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	0151      	lsls	r1, r2, #5
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	440a      	add	r2, r1
 800a26c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a270:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a274:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3714      	adds	r7, #20
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	785b      	ldrb	r3, [r3, #1]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d128      	bne.n	800a2f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	015a      	lsls	r2, r3, #5
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68ba      	ldr	r2, [r7, #8]
 800a2b0:	0151      	lsls	r1, r2, #5
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	440a      	add	r2, r1
 800a2b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	791b      	ldrb	r3, [r3, #4]
 800a2c4:	2b03      	cmp	r3, #3
 800a2c6:	d003      	beq.n	800a2d0 <USB_EPClearStall+0x4c>
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	791b      	ldrb	r3, [r3, #4]
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d138      	bne.n	800a342 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	015a      	lsls	r2, r3, #5
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	0151      	lsls	r1, r2, #5
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	440a      	add	r2, r1
 800a2e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2ee:	6013      	str	r3, [r2, #0]
 800a2f0:	e027      	b.n	800a342 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	015a      	lsls	r2, r3, #5
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	0151      	lsls	r1, r2, #5
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	440a      	add	r2, r1
 800a308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a30c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a310:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	791b      	ldrb	r3, [r3, #4]
 800a316:	2b03      	cmp	r3, #3
 800a318:	d003      	beq.n	800a322 <USB_EPClearStall+0x9e>
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	791b      	ldrb	r3, [r3, #4]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d10f      	bne.n	800a342 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	015a      	lsls	r2, r3, #5
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	4413      	add	r3, r2
 800a32a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68ba      	ldr	r2, [r7, #8]
 800a332:	0151      	lsls	r1, r2, #5
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	440a      	add	r2, r1
 800a338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a33c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a340:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	460b      	mov	r3, r1
 800a35a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a36e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a372:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	78fb      	ldrb	r3, [r7, #3]
 800a37e:	011b      	lsls	r3, r3, #4
 800a380:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a384:	68f9      	ldr	r1, [r7, #12]
 800a386:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a38a:	4313      	orrs	r3, r2
 800a38c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3b6:	f023 0303 	bic.w	r3, r3, #3
 800a3ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3ca:	f023 0302 	bic.w	r3, r3, #2
 800a3ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b085      	sub	sp, #20
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3f8:	f023 0303 	bic.w	r3, r3, #3
 800a3fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a40c:	f043 0302 	orr.w	r3, r3, #2
 800a410:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	4013      	ands	r3, r2
 800a436:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a438:	68fb      	ldr	r3, [r7, #12]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr

0800a446 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a446:	b480      	push	{r7}
 800a448:	b085      	sub	sp, #20
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a462:	69db      	ldr	r3, [r3, #28]
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	4013      	ands	r3, r2
 800a468:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	0c1b      	lsrs	r3, r3, #16
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3714      	adds	r7, #20
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b085      	sub	sp, #20
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a496:	69db      	ldr	r3, [r3, #28]
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	4013      	ands	r3, r2
 800a49c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	b29b      	uxth	r3, r3
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3714      	adds	r7, #20
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b085      	sub	sp, #20
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a4be:	78fb      	ldrb	r3, [r7, #3]
 800a4c0:	015a      	lsls	r2, r3, #5
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	4013      	ands	r3, r2
 800a4da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a4dc:	68bb      	ldr	r3, [r7, #8]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3714      	adds	r7, #20
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b087      	sub	sp, #28
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a50c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a50e:	78fb      	ldrb	r3, [r7, #3]
 800a510:	f003 030f 	and.w	r3, r3, #15
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	fa22 f303 	lsr.w	r3, r2, r3
 800a51a:	01db      	lsls	r3, r3, #7
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	693a      	ldr	r2, [r7, #16]
 800a520:	4313      	orrs	r3, r2
 800a522:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a524:	78fb      	ldrb	r3, [r7, #3]
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	693a      	ldr	r2, [r7, #16]
 800a534:	4013      	ands	r3, r2
 800a536:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a538:	68bb      	ldr	r3, [r7, #8]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	371c      	adds	r7, #28
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a546:	b480      	push	{r7}
 800a548:	b083      	sub	sp, #12
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	f003 0301 	and.w	r3, r3, #1
}
 800a556:	4618      	mov	r0, r3
 800a558:	370c      	adds	r7, #12
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
	...

0800a564 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a57e:	4619      	mov	r1, r3
 800a580:	4b09      	ldr	r3, [pc, #36]	; (800a5a8 <USB_ActivateSetup+0x44>)
 800a582:	4013      	ands	r3, r2
 800a584:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3714      	adds	r7, #20
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	fffff800 	.word	0xfffff800

0800a5ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b087      	sub	sp, #28
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	333c      	adds	r3, #60	; 0x3c
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	4a26      	ldr	r2, [pc, #152]	; (800a664 <USB_EP0_OutStart+0xb8>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d90a      	bls.n	800a5e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5e0:	d101      	bne.n	800a5e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	e037      	b.n	800a656 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a600:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	697a      	ldr	r2, [r7, #20]
 800a610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a614:	f043 0318 	orr.w	r3, r3, #24
 800a618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a628:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a62c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a62e:	7afb      	ldrb	r3, [r7, #11]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d10f      	bne.n	800a654 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a63a:	461a      	mov	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a64e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	371c      	adds	r7, #28
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	4f54300a 	.word	0x4f54300a

0800a668 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a670:	2300      	movs	r3, #0
 800a672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	3301      	adds	r3, #1
 800a678:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	4a13      	ldr	r2, [pc, #76]	; (800a6cc <USB_CoreReset+0x64>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d901      	bls.n	800a686 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e01b      	b.n	800a6be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	daf2      	bge.n	800a674 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a68e:	2300      	movs	r3, #0
 800a690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	f043 0201 	orr.w	r2, r3, #1
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	4a09      	ldr	r2, [pc, #36]	; (800a6cc <USB_CoreReset+0x64>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d901      	bls.n	800a6b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e006      	b.n	800a6be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	f003 0301 	and.w	r3, r3, #1
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d0f0      	beq.n	800a69e <USB_CoreReset+0x36>

  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3714      	adds	r7, #20
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	00030d40 	.word	0x00030d40

0800a6d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a6d4:	4904      	ldr	r1, [pc, #16]	; (800a6e8 <MX_FATFS_Init+0x18>)
 800a6d6:	4805      	ldr	r0, [pc, #20]	; (800a6ec <MX_FATFS_Init+0x1c>)
 800a6d8:	f004 ffc4 	bl	800f664 <FATFS_LinkDriver>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	461a      	mov	r2, r3
 800a6e0:	4b03      	ldr	r3, [pc, #12]	; (800a6f0 <MX_FATFS_Init+0x20>)
 800a6e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a6e4:	bf00      	nop
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	200023fc 	.word	0x200023fc
 800a6ec:	08011a1c 	.word	0x08011a1c
 800a6f0:	200023f8 	.word	0x200023f8

0800a6f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a6f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a70e:	f000 f888 	bl	800a822 <BSP_SD_IsDetected>
 800a712:	4603      	mov	r3, r0
 800a714:	2b01      	cmp	r3, #1
 800a716:	d001      	beq.n	800a71c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a718:	2302      	movs	r3, #2
 800a71a:	e005      	b.n	800a728 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a71c:	4804      	ldr	r0, [pc, #16]	; (800a730 <BSP_SD_Init+0x2c>)
 800a71e:	f7fc f845 	bl	80067ac <HAL_SD_Init>
 800a722:	4603      	mov	r3, r0
 800a724:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a726:	79fb      	ldrb	r3, [r7, #7]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	20000200 	.word	0x20000200

0800a734 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	68f9      	ldr	r1, [r7, #12]
 800a74a:	4806      	ldr	r0, [pc, #24]	; (800a764 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a74c:	f7fc f8e6 	bl	800691c <HAL_SD_ReadBlocks_DMA>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a75a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	20000200 	.word	0x20000200

0800a768 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	68f9      	ldr	r1, [r7, #12]
 800a77e:	4806      	ldr	r0, [pc, #24]	; (800a798 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a780:	f7fc f9ae 	bl	8006ae0 <HAL_SD_WriteBlocks_DMA>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d001      	beq.n	800a78e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a78e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3718      	adds	r7, #24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	20000200 	.word	0x20000200

0800a79c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a7a0:	4805      	ldr	r0, [pc, #20]	; (800a7b8 <BSP_SD_GetCardState+0x1c>)
 800a7a2:	f7fc fdd3 	bl	800734c <HAL_SD_GetCardState>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b04      	cmp	r3, #4
 800a7aa:	bf14      	ite	ne
 800a7ac:	2301      	movne	r3, #1
 800a7ae:	2300      	moveq	r3, #0
 800a7b0:	b2db      	uxtb	r3, r3
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	20000200 	.word	0x20000200

0800a7bc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a7c4:	6879      	ldr	r1, [r7, #4]
 800a7c6:	4803      	ldr	r0, [pc, #12]	; (800a7d4 <BSP_SD_GetCardInfo+0x18>)
 800a7c8:	f7fc fd94 	bl	80072f4 <HAL_SD_GetCardInfo>
}
 800a7cc:	bf00      	nop
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	20000200 	.word	0x20000200

0800a7d8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a7e0:	f000 f818 	bl	800a814 <BSP_SD_AbortCallback>
}
 800a7e4:	bf00      	nop
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a7f4:	f000 f9a8 	bl	800ab48 <BSP_SD_WriteCpltCallback>
}
 800a7f8:	bf00      	nop
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a808:	f000 f9aa 	bl	800ab60 <BSP_SD_ReadCpltCallback>
}
 800a80c:	bf00      	nop
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a814:	b480      	push	{r7}
 800a816:	af00      	add	r7, sp, #0

}
 800a818:	bf00      	nop
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a828:	2301      	movs	r3, #1
 800a82a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a82c:	f000 f80c 	bl	800a848 <BSP_PlatformIsDetected>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d101      	bne.n	800a83a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a836:	2300      	movs	r3, #0
 800a838:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a83a:	79fb      	ldrb	r3, [r7, #7]
 800a83c:	b2db      	uxtb	r3, r3
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
	...

0800a848 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a84e:	2301      	movs	r3, #1
 800a850:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800a852:	2104      	movs	r1, #4
 800a854:	4806      	ldr	r0, [pc, #24]	; (800a870 <BSP_PlatformIsDetected+0x28>)
 800a856:	f7f8 fe21 	bl	800349c <HAL_GPIO_ReadPin>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d001      	beq.n	800a864 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a860:	2300      	movs	r3, #0
 800a862:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a864:	79fb      	ldrb	r3, [r7, #7]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	40021800 	.word	0x40021800

0800a874 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a87c:	f7f7 f976 	bl	8001b6c <HAL_GetTick>
 800a880:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a882:	e006      	b.n	800a892 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a884:	f7ff ff8a 	bl	800a79c <BSP_SD_GetCardState>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	e009      	b.n	800a8a6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a892:	f7f7 f96b 	bl	8001b6c <HAL_GetTick>
 800a896:	4602      	mov	r2, r0
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d8f0      	bhi.n	800a884 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a8a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
	...

0800a8b0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a8ba:	4b0b      	ldr	r3, [pc, #44]	; (800a8e8 <SD_CheckStatus+0x38>)
 800a8bc:	2201      	movs	r2, #1
 800a8be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a8c0:	f7ff ff6c 	bl	800a79c <BSP_SD_GetCardState>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d107      	bne.n	800a8da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a8ca:	4b07      	ldr	r3, [pc, #28]	; (800a8e8 <SD_CheckStatus+0x38>)
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	f023 0301 	bic.w	r3, r3, #1
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	4b04      	ldr	r3, [pc, #16]	; (800a8e8 <SD_CheckStatus+0x38>)
 800a8d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a8da:	4b03      	ldr	r3, [pc, #12]	; (800a8e8 <SD_CheckStatus+0x38>)
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	b2db      	uxtb	r3, r3
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3708      	adds	r7, #8
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	20000009 	.word	0x20000009

0800a8ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a8f6:	f7ff ff05 	bl	800a704 <BSP_SD_Init>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d107      	bne.n	800a910 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a900:	79fb      	ldrb	r3, [r7, #7]
 800a902:	4618      	mov	r0, r3
 800a904:	f7ff ffd4 	bl	800a8b0 <SD_CheckStatus>
 800a908:	4603      	mov	r3, r0
 800a90a:	461a      	mov	r2, r3
 800a90c:	4b04      	ldr	r3, [pc, #16]	; (800a920 <SD_initialize+0x34>)
 800a90e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a910:	4b03      	ldr	r3, [pc, #12]	; (800a920 <SD_initialize+0x34>)
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	b2db      	uxtb	r3, r3
}
 800a916:	4618      	mov	r0, r3
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20000009 	.word	0x20000009

0800a924 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a92e:	79fb      	ldrb	r3, [r7, #7]
 800a930:	4618      	mov	r0, r3
 800a932:	f7ff ffbd 	bl	800a8b0 <SD_CheckStatus>
 800a936:	4603      	mov	r3, r0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	60b9      	str	r1, [r7, #8]
 800a948:	607a      	str	r2, [r7, #4]
 800a94a:	603b      	str	r3, [r7, #0]
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a954:	f247 5030 	movw	r0, #30000	; 0x7530
 800a958:	f7ff ff8c 	bl	800a874 <SD_CheckStatusWithTimeout>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	da01      	bge.n	800a966 <SD_read+0x26>
  {
    return res;
 800a962:	7dfb      	ldrb	r3, [r7, #23]
 800a964:	e03b      	b.n	800a9de <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	6879      	ldr	r1, [r7, #4]
 800a96a:	68b8      	ldr	r0, [r7, #8]
 800a96c:	f7ff fee2 	bl	800a734 <BSP_SD_ReadBlocks_DMA>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d132      	bne.n	800a9dc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a976:	4b1c      	ldr	r3, [pc, #112]	; (800a9e8 <SD_read+0xa8>)
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a97c:	f7f7 f8f6 	bl	8001b6c <HAL_GetTick>
 800a980:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a982:	bf00      	nop
 800a984:	4b18      	ldr	r3, [pc, #96]	; (800a9e8 <SD_read+0xa8>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d108      	bne.n	800a99e <SD_read+0x5e>
 800a98c:	f7f7 f8ee 	bl	8001b6c <HAL_GetTick>
 800a990:	4602      	mov	r2, r0
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	f247 522f 	movw	r2, #29999	; 0x752f
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d9f2      	bls.n	800a984 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a99e:	4b12      	ldr	r3, [pc, #72]	; (800a9e8 <SD_read+0xa8>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d102      	bne.n	800a9ac <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	75fb      	strb	r3, [r7, #23]
 800a9aa:	e017      	b.n	800a9dc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a9ac:	4b0e      	ldr	r3, [pc, #56]	; (800a9e8 <SD_read+0xa8>)
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a9b2:	f7f7 f8db 	bl	8001b6c <HAL_GetTick>
 800a9b6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a9b8:	e007      	b.n	800a9ca <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a9ba:	f7ff feef 	bl	800a79c <BSP_SD_GetCardState>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d102      	bne.n	800a9ca <SD_read+0x8a>
          {
            res = RES_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a9c8:	e008      	b.n	800a9dc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a9ca:	f7f7 f8cf 	bl	8001b6c <HAL_GetTick>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	1ad3      	subs	r3, r2, r3
 800a9d4:	f247 522f 	movw	r2, #29999	; 0x752f
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d9ee      	bls.n	800a9ba <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3718      	adds	r7, #24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20002868 	.word	0x20002868

0800a9ec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60b9      	str	r1, [r7, #8]
 800a9f4:	607a      	str	r2, [r7, #4]
 800a9f6:	603b      	str	r3, [r7, #0]
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800aa00:	4b24      	ldr	r3, [pc, #144]	; (800aa94 <SD_write+0xa8>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aa06:	f247 5030 	movw	r0, #30000	; 0x7530
 800aa0a:	f7ff ff33 	bl	800a874 <SD_CheckStatusWithTimeout>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	da01      	bge.n	800aa18 <SD_write+0x2c>
  {
    return res;
 800aa14:	7dfb      	ldrb	r3, [r7, #23]
 800aa16:	e038      	b.n	800aa8a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800aa18:	683a      	ldr	r2, [r7, #0]
 800aa1a:	6879      	ldr	r1, [r7, #4]
 800aa1c:	68b8      	ldr	r0, [r7, #8]
 800aa1e:	f7ff fea3 	bl	800a768 <BSP_SD_WriteBlocks_DMA>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d12f      	bne.n	800aa88 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800aa28:	f7f7 f8a0 	bl	8001b6c <HAL_GetTick>
 800aa2c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aa2e:	bf00      	nop
 800aa30:	4b18      	ldr	r3, [pc, #96]	; (800aa94 <SD_write+0xa8>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d108      	bne.n	800aa4a <SD_write+0x5e>
 800aa38:	f7f7 f898 	bl	8001b6c <HAL_GetTick>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d9f2      	bls.n	800aa30 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800aa4a:	4b12      	ldr	r3, [pc, #72]	; (800aa94 <SD_write+0xa8>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d102      	bne.n	800aa58 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	75fb      	strb	r3, [r7, #23]
 800aa56:	e017      	b.n	800aa88 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800aa58:	4b0e      	ldr	r3, [pc, #56]	; (800aa94 <SD_write+0xa8>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800aa5e:	f7f7 f885 	bl	8001b6c <HAL_GetTick>
 800aa62:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aa64:	e007      	b.n	800aa76 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aa66:	f7ff fe99 	bl	800a79c <BSP_SD_GetCardState>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d102      	bne.n	800aa76 <SD_write+0x8a>
          {
            res = RES_OK;
 800aa70:	2300      	movs	r3, #0
 800aa72:	75fb      	strb	r3, [r7, #23]
            break;
 800aa74:	e008      	b.n	800aa88 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aa76:	f7f7 f879 	bl	8001b6c <HAL_GetTick>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d9ee      	bls.n	800aa66 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3718      	adds	r7, #24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	20002864 	.word	0x20002864

0800aa98 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08c      	sub	sp, #48	; 0x30
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	603a      	str	r2, [r7, #0]
 800aaa2:	71fb      	strb	r3, [r7, #7]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aaae:	4b25      	ldr	r3, [pc, #148]	; (800ab44 <SD_ioctl+0xac>)
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	f003 0301 	and.w	r3, r3, #1
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d001      	beq.n	800aac0 <SD_ioctl+0x28>
 800aabc:	2303      	movs	r3, #3
 800aabe:	e03c      	b.n	800ab3a <SD_ioctl+0xa2>

  switch (cmd)
 800aac0:	79bb      	ldrb	r3, [r7, #6]
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d834      	bhi.n	800ab30 <SD_ioctl+0x98>
 800aac6:	a201      	add	r2, pc, #4	; (adr r2, 800aacc <SD_ioctl+0x34>)
 800aac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aacc:	0800aadd 	.word	0x0800aadd
 800aad0:	0800aae5 	.word	0x0800aae5
 800aad4:	0800aafd 	.word	0x0800aafd
 800aad8:	0800ab17 	.word	0x0800ab17
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800aae2:	e028      	b.n	800ab36 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800aae4:	f107 030c 	add.w	r3, r7, #12
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7ff fe67 	bl	800a7bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800aaee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800aafa:	e01c      	b.n	800ab36 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800aafc:	f107 030c 	add.w	r3, r7, #12
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7ff fe5b 	bl	800a7bc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ab06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab14:	e00f      	b.n	800ab36 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab16:	f107 030c 	add.w	r3, r7, #12
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7ff fe4e 	bl	800a7bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ab20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab22:	0a5a      	lsrs	r2, r3, #9
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab2e:	e002      	b.n	800ab36 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ab30:	2304      	movs	r3, #4
 800ab32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ab36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3730      	adds	r7, #48	; 0x30
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	20000009 	.word	0x20000009

0800ab48 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ab4c:	4b03      	ldr	r3, [pc, #12]	; (800ab5c <BSP_SD_WriteCpltCallback+0x14>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	601a      	str	r2, [r3, #0]
}
 800ab52:	bf00      	nop
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	20002864 	.word	0x20002864

0800ab60 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ab60:	b480      	push	{r7}
 800ab62:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ab64:	4b03      	ldr	r3, [pc, #12]	; (800ab74 <BSP_SD_ReadCpltCallback+0x14>)
 800ab66:	2201      	movs	r2, #1
 800ab68:	601a      	str	r2, [r3, #0]
}
 800ab6a:	bf00      	nop
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr
 800ab74:	20002868 	.word	0x20002868

0800ab78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ab88:	f005 fbc8 	bl	801031c <malloc>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d109      	bne.n	800abaa <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	32b0      	adds	r2, #176	; 0xb0
 800aba0:	2100      	movs	r1, #0
 800aba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aba6:	2302      	movs	r3, #2
 800aba8:	e0d4      	b.n	800ad54 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800abaa:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800abae:	2100      	movs	r1, #0
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f005 fde2 	bl	801077a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	32b0      	adds	r2, #176	; 0xb0
 800abc0:	68f9      	ldr	r1, [r7, #12]
 800abc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	32b0      	adds	r2, #176	; 0xb0
 800abd0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	7c1b      	ldrb	r3, [r3, #16]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d138      	bne.n	800ac54 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800abe2:	4b5e      	ldr	r3, [pc, #376]	; (800ad5c <USBD_CDC_Init+0x1e4>)
 800abe4:	7819      	ldrb	r1, [r3, #0]
 800abe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abea:	2202      	movs	r2, #2
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f005 f9f2 	bl	800ffd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800abf2:	4b5a      	ldr	r3, [pc, #360]	; (800ad5c <USBD_CDC_Init+0x1e4>)
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	f003 020f 	and.w	r2, r3, #15
 800abfa:	6879      	ldr	r1, [r7, #4]
 800abfc:	4613      	mov	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	440b      	add	r3, r1
 800ac06:	3324      	adds	r3, #36	; 0x24
 800ac08:	2201      	movs	r2, #1
 800ac0a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac0c:	4b54      	ldr	r3, [pc, #336]	; (800ad60 <USBD_CDC_Init+0x1e8>)
 800ac0e:	7819      	ldrb	r1, [r3, #0]
 800ac10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac14:	2202      	movs	r2, #2
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f005 f9dd 	bl	800ffd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac1c:	4b50      	ldr	r3, [pc, #320]	; (800ad60 <USBD_CDC_Init+0x1e8>)
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	f003 020f 	and.w	r2, r3, #15
 800ac24:	6879      	ldr	r1, [r7, #4]
 800ac26:	4613      	mov	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	440b      	add	r3, r1
 800ac30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac34:	2201      	movs	r2, #1
 800ac36:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac38:	4b4a      	ldr	r3, [pc, #296]	; (800ad64 <USBD_CDC_Init+0x1ec>)
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	f003 020f 	and.w	r2, r3, #15
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	4613      	mov	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	440b      	add	r3, r1
 800ac4c:	3326      	adds	r3, #38	; 0x26
 800ac4e:	2210      	movs	r2, #16
 800ac50:	801a      	strh	r2, [r3, #0]
 800ac52:	e035      	b.n	800acc0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac54:	4b41      	ldr	r3, [pc, #260]	; (800ad5c <USBD_CDC_Init+0x1e4>)
 800ac56:	7819      	ldrb	r1, [r3, #0]
 800ac58:	2340      	movs	r3, #64	; 0x40
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f005 f9ba 	bl	800ffd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac62:	4b3e      	ldr	r3, [pc, #248]	; (800ad5c <USBD_CDC_Init+0x1e4>)
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	f003 020f 	and.w	r2, r3, #15
 800ac6a:	6879      	ldr	r1, [r7, #4]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	440b      	add	r3, r1
 800ac76:	3324      	adds	r3, #36	; 0x24
 800ac78:	2201      	movs	r2, #1
 800ac7a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac7c:	4b38      	ldr	r3, [pc, #224]	; (800ad60 <USBD_CDC_Init+0x1e8>)
 800ac7e:	7819      	ldrb	r1, [r3, #0]
 800ac80:	2340      	movs	r3, #64	; 0x40
 800ac82:	2202      	movs	r2, #2
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f005 f9a6 	bl	800ffd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac8a:	4b35      	ldr	r3, [pc, #212]	; (800ad60 <USBD_CDC_Init+0x1e8>)
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	f003 020f 	and.w	r2, r3, #15
 800ac92:	6879      	ldr	r1, [r7, #4]
 800ac94:	4613      	mov	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	440b      	add	r3, r1
 800ac9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aca2:	2201      	movs	r2, #1
 800aca4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aca6:	4b2f      	ldr	r3, [pc, #188]	; (800ad64 <USBD_CDC_Init+0x1ec>)
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	f003 020f 	and.w	r2, r3, #15
 800acae:	6879      	ldr	r1, [r7, #4]
 800acb0:	4613      	mov	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4413      	add	r3, r2
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	440b      	add	r3, r1
 800acba:	3326      	adds	r3, #38	; 0x26
 800acbc:	2210      	movs	r2, #16
 800acbe:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800acc0:	4b28      	ldr	r3, [pc, #160]	; (800ad64 <USBD_CDC_Init+0x1ec>)
 800acc2:	7819      	ldrb	r1, [r3, #0]
 800acc4:	2308      	movs	r3, #8
 800acc6:	2203      	movs	r2, #3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f005 f984 	bl	800ffd6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800acce:	4b25      	ldr	r3, [pc, #148]	; (800ad64 <USBD_CDC_Init+0x1ec>)
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	f003 020f 	and.w	r2, r3, #15
 800acd6:	6879      	ldr	r1, [r7, #4]
 800acd8:	4613      	mov	r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	4413      	add	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	440b      	add	r3, r1
 800ace2:	3324      	adds	r3, #36	; 0x24
 800ace4:	2201      	movs	r2, #1
 800ace6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2200      	movs	r2, #0
 800acec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	33b0      	adds	r3, #176	; 0xb0
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4413      	add	r3, r2
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d101      	bne.n	800ad22 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800ad1e:	2302      	movs	r3, #2
 800ad20:	e018      	b.n	800ad54 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	7c1b      	ldrb	r3, [r3, #16]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10a      	bne.n	800ad40 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad2a:	4b0d      	ldr	r3, [pc, #52]	; (800ad60 <USBD_CDC_Init+0x1e8>)
 800ad2c:	7819      	ldrb	r1, [r3, #0]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f005 fa3b 	bl	80101b4 <USBD_LL_PrepareReceive>
 800ad3e:	e008      	b.n	800ad52 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad40:	4b07      	ldr	r3, [pc, #28]	; (800ad60 <USBD_CDC_Init+0x1e8>)
 800ad42:	7819      	ldrb	r1, [r3, #0]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad4a:	2340      	movs	r3, #64	; 0x40
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f005 fa31 	bl	80101b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	20000093 	.word	0x20000093
 800ad60:	20000094 	.word	0x20000094
 800ad64:	20000095 	.word	0x20000095

0800ad68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	460b      	mov	r3, r1
 800ad72:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ad74:	4b3a      	ldr	r3, [pc, #232]	; (800ae60 <USBD_CDC_DeInit+0xf8>)
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f005 f951 	bl	8010022 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ad80:	4b37      	ldr	r3, [pc, #220]	; (800ae60 <USBD_CDC_DeInit+0xf8>)
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	f003 020f 	and.w	r2, r3, #15
 800ad88:	6879      	ldr	r1, [r7, #4]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	440b      	add	r3, r1
 800ad94:	3324      	adds	r3, #36	; 0x24
 800ad96:	2200      	movs	r2, #0
 800ad98:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ad9a:	4b32      	ldr	r3, [pc, #200]	; (800ae64 <USBD_CDC_DeInit+0xfc>)
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	4619      	mov	r1, r3
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f005 f93e 	bl	8010022 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ada6:	4b2f      	ldr	r3, [pc, #188]	; (800ae64 <USBD_CDC_DeInit+0xfc>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	f003 020f 	and.w	r2, r3, #15
 800adae:	6879      	ldr	r1, [r7, #4]
 800adb0:	4613      	mov	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4413      	add	r3, r2
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	440b      	add	r3, r1
 800adba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800adbe:	2200      	movs	r2, #0
 800adc0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800adc2:	4b29      	ldr	r3, [pc, #164]	; (800ae68 <USBD_CDC_DeInit+0x100>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f005 f92a 	bl	8010022 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800adce:	4b26      	ldr	r3, [pc, #152]	; (800ae68 <USBD_CDC_DeInit+0x100>)
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	f003 020f 	and.w	r2, r3, #15
 800add6:	6879      	ldr	r1, [r7, #4]
 800add8:	4613      	mov	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	4413      	add	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	440b      	add	r3, r1
 800ade2:	3324      	adds	r3, #36	; 0x24
 800ade4:	2200      	movs	r2, #0
 800ade6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ade8:	4b1f      	ldr	r3, [pc, #124]	; (800ae68 <USBD_CDC_DeInit+0x100>)
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	f003 020f 	and.w	r2, r3, #15
 800adf0:	6879      	ldr	r1, [r7, #4]
 800adf2:	4613      	mov	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4413      	add	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	440b      	add	r3, r1
 800adfc:	3326      	adds	r3, #38	; 0x26
 800adfe:	2200      	movs	r2, #0
 800ae00:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	32b0      	adds	r2, #176	; 0xb0
 800ae0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d01f      	beq.n	800ae54 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	33b0      	adds	r3, #176	; 0xb0
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	32b0      	adds	r2, #176	; 0xb0
 800ae32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f005 fa78 	bl	801032c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	32b0      	adds	r2, #176	; 0xb0
 800ae46:	2100      	movs	r1, #0
 800ae48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	20000093 	.word	0x20000093
 800ae64:	20000094 	.word	0x20000094
 800ae68:	20000095 	.word	0x20000095

0800ae6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b086      	sub	sp, #24
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	32b0      	adds	r2, #176	; 0xb0
 800ae80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ae86:	2300      	movs	r3, #0
 800ae88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	e0bf      	b.n	800b01c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d050      	beq.n	800af4a <USBD_CDC_Setup+0xde>
 800aea8:	2b20      	cmp	r3, #32
 800aeaa:	f040 80af 	bne.w	800b00c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	88db      	ldrh	r3, [r3, #6]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d03a      	beq.n	800af2c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	b25b      	sxtb	r3, r3
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	da1b      	bge.n	800aef8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	33b0      	adds	r3, #176	; 0xb0
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	4413      	add	r3, r2
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aed6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	88d2      	ldrh	r2, [r2, #6]
 800aedc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	88db      	ldrh	r3, [r3, #6]
 800aee2:	2b07      	cmp	r3, #7
 800aee4:	bf28      	it	cs
 800aee6:	2307      	movcs	r3, #7
 800aee8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	89fa      	ldrh	r2, [r7, #14]
 800aeee:	4619      	mov	r1, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f001 fdad 	bl	800ca50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aef6:	e090      	b.n	800b01a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	785a      	ldrb	r2, [r3, #1]
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	88db      	ldrh	r3, [r3, #6]
 800af06:	2b3f      	cmp	r3, #63	; 0x3f
 800af08:	d803      	bhi.n	800af12 <USBD_CDC_Setup+0xa6>
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	88db      	ldrh	r3, [r3, #6]
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	e000      	b.n	800af14 <USBD_CDC_Setup+0xa8>
 800af12:	2240      	movs	r2, #64	; 0x40
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af1a:	6939      	ldr	r1, [r7, #16]
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800af22:	461a      	mov	r2, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f001 fdbf 	bl	800caa8 <USBD_CtlPrepareRx>
      break;
 800af2a:	e076      	b.n	800b01a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	33b0      	adds	r3, #176	; 0xb0
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	7850      	ldrb	r0, [r2, #1]
 800af42:	2200      	movs	r2, #0
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	4798      	blx	r3
      break;
 800af48:	e067      	b.n	800b01a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	785b      	ldrb	r3, [r3, #1]
 800af4e:	2b0b      	cmp	r3, #11
 800af50:	d851      	bhi.n	800aff6 <USBD_CDC_Setup+0x18a>
 800af52:	a201      	add	r2, pc, #4	; (adr r2, 800af58 <USBD_CDC_Setup+0xec>)
 800af54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af58:	0800af89 	.word	0x0800af89
 800af5c:	0800b005 	.word	0x0800b005
 800af60:	0800aff7 	.word	0x0800aff7
 800af64:	0800aff7 	.word	0x0800aff7
 800af68:	0800aff7 	.word	0x0800aff7
 800af6c:	0800aff7 	.word	0x0800aff7
 800af70:	0800aff7 	.word	0x0800aff7
 800af74:	0800aff7 	.word	0x0800aff7
 800af78:	0800aff7 	.word	0x0800aff7
 800af7c:	0800aff7 	.word	0x0800aff7
 800af80:	0800afb3 	.word	0x0800afb3
 800af84:	0800afdd 	.word	0x0800afdd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b03      	cmp	r3, #3
 800af92:	d107      	bne.n	800afa4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800af94:	f107 030a 	add.w	r3, r7, #10
 800af98:	2202      	movs	r2, #2
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f001 fd57 	bl	800ca50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afa2:	e032      	b.n	800b00a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f001 fce1 	bl	800c96e <USBD_CtlError>
            ret = USBD_FAIL;
 800afac:	2303      	movs	r3, #3
 800afae:	75fb      	strb	r3, [r7, #23]
          break;
 800afb0:	e02b      	b.n	800b00a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	2b03      	cmp	r3, #3
 800afbc:	d107      	bne.n	800afce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800afbe:	f107 030d 	add.w	r3, r7, #13
 800afc2:	2201      	movs	r2, #1
 800afc4:	4619      	mov	r1, r3
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f001 fd42 	bl	800ca50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afcc:	e01d      	b.n	800b00a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f001 fccc 	bl	800c96e <USBD_CtlError>
            ret = USBD_FAIL;
 800afd6:	2303      	movs	r3, #3
 800afd8:	75fb      	strb	r3, [r7, #23]
          break;
 800afda:	e016      	b.n	800b00a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b03      	cmp	r3, #3
 800afe6:	d00f      	beq.n	800b008 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800afe8:	6839      	ldr	r1, [r7, #0]
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f001 fcbf 	bl	800c96e <USBD_CtlError>
            ret = USBD_FAIL;
 800aff0:	2303      	movs	r3, #3
 800aff2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aff4:	e008      	b.n	800b008 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f001 fcb8 	bl	800c96e <USBD_CtlError>
          ret = USBD_FAIL;
 800affe:	2303      	movs	r3, #3
 800b000:	75fb      	strb	r3, [r7, #23]
          break;
 800b002:	e002      	b.n	800b00a <USBD_CDC_Setup+0x19e>
          break;
 800b004:	bf00      	nop
 800b006:	e008      	b.n	800b01a <USBD_CDC_Setup+0x1ae>
          break;
 800b008:	bf00      	nop
      }
      break;
 800b00a:	e006      	b.n	800b01a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b00c:	6839      	ldr	r1, [r7, #0]
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f001 fcad 	bl	800c96e <USBD_CtlError>
      ret = USBD_FAIL;
 800b014:	2303      	movs	r3, #3
 800b016:	75fb      	strb	r3, [r7, #23]
      break;
 800b018:	bf00      	nop
  }

  return (uint8_t)ret;
 800b01a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3718      	adds	r7, #24
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	460b      	mov	r3, r1
 800b02e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b036:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	32b0      	adds	r2, #176	; 0xb0
 800b042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b04a:	2303      	movs	r3, #3
 800b04c:	e065      	b.n	800b11a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	32b0      	adds	r2, #176	; 0xb0
 800b058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b05c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b05e:	78fb      	ldrb	r3, [r7, #3]
 800b060:	f003 020f 	and.w	r2, r3, #15
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	4613      	mov	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	440b      	add	r3, r1
 800b070:	3318      	adds	r3, #24
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d02f      	beq.n	800b0d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b078:	78fb      	ldrb	r3, [r7, #3]
 800b07a:	f003 020f 	and.w	r2, r3, #15
 800b07e:	6879      	ldr	r1, [r7, #4]
 800b080:	4613      	mov	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	4413      	add	r3, r2
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	440b      	add	r3, r1
 800b08a:	3318      	adds	r3, #24
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	78fb      	ldrb	r3, [r7, #3]
 800b090:	f003 010f 	and.w	r1, r3, #15
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	460b      	mov	r3, r1
 800b098:	00db      	lsls	r3, r3, #3
 800b09a:	440b      	add	r3, r1
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	4403      	add	r3, r0
 800b0a0:	3348      	adds	r3, #72	; 0x48
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0a8:	fb01 f303 	mul.w	r3, r1, r3
 800b0ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d112      	bne.n	800b0d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b0b2:	78fb      	ldrb	r3, [r7, #3]
 800b0b4:	f003 020f 	and.w	r2, r3, #15
 800b0b8:	6879      	ldr	r1, [r7, #4]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	440b      	add	r3, r1
 800b0c4:	3318      	adds	r3, #24
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0ca:	78f9      	ldrb	r1, [r7, #3]
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f005 f84e 	bl	8010172 <USBD_LL_Transmit>
 800b0d6:	e01f      	b.n	800b118 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	33b0      	adds	r3, #176	; 0xb0
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d010      	beq.n	800b118 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	33b0      	adds	r3, #176	; 0xb0
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4413      	add	r3, r2
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b114:	78fa      	ldrb	r2, [r7, #3]
 800b116:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b084      	sub	sp, #16
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	460b      	mov	r3, r1
 800b12c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	32b0      	adds	r2, #176	; 0xb0
 800b138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b13c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	32b0      	adds	r2, #176	; 0xb0
 800b148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b150:	2303      	movs	r3, #3
 800b152:	e01a      	b.n	800b18a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b154:	78fb      	ldrb	r3, [r7, #3]
 800b156:	4619      	mov	r1, r3
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f005 f84c 	bl	80101f6 <USBD_LL_GetRxDataSize>
 800b15e:	4602      	mov	r2, r0
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	33b0      	adds	r3, #176	; 0xb0
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b184:	4611      	mov	r1, r2
 800b186:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b084      	sub	sp, #16
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	32b0      	adds	r2, #176	; 0xb0
 800b1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	e025      	b.n	800b200 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	33b0      	adds	r3, #176	; 0xb0
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d01a      	beq.n	800b1fe <USBD_CDC_EP0_RxReady+0x6c>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b1ce:	2bff      	cmp	r3, #255	; 0xff
 800b1d0:	d015      	beq.n	800b1fe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	33b0      	adds	r3, #176	; 0xb0
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b1ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1f2:	b292      	uxth	r2, r2
 800b1f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	22ff      	movs	r2, #255	; 0xff
 800b1fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b210:	2182      	movs	r1, #130	; 0x82
 800b212:	4818      	ldr	r0, [pc, #96]	; (800b274 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b214:	f000 fd49 	bl	800bcaa <USBD_GetEpDesc>
 800b218:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b21a:	2101      	movs	r1, #1
 800b21c:	4815      	ldr	r0, [pc, #84]	; (800b274 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b21e:	f000 fd44 	bl	800bcaa <USBD_GetEpDesc>
 800b222:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b224:	2181      	movs	r1, #129	; 0x81
 800b226:	4813      	ldr	r0, [pc, #76]	; (800b274 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b228:	f000 fd3f 	bl	800bcaa <USBD_GetEpDesc>
 800b22c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d002      	beq.n	800b23a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2210      	movs	r2, #16
 800b238:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d006      	beq.n	800b24e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	2200      	movs	r2, #0
 800b244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b248:	711a      	strb	r2, [r3, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d006      	beq.n	800b262 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b25c:	711a      	strb	r2, [r3, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2243      	movs	r2, #67	; 0x43
 800b266:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b268:	4b02      	ldr	r3, [pc, #8]	; (800b274 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20000050 	.word	0x20000050

0800b278 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b280:	2182      	movs	r1, #130	; 0x82
 800b282:	4818      	ldr	r0, [pc, #96]	; (800b2e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b284:	f000 fd11 	bl	800bcaa <USBD_GetEpDesc>
 800b288:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b28a:	2101      	movs	r1, #1
 800b28c:	4815      	ldr	r0, [pc, #84]	; (800b2e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b28e:	f000 fd0c 	bl	800bcaa <USBD_GetEpDesc>
 800b292:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b294:	2181      	movs	r1, #129	; 0x81
 800b296:	4813      	ldr	r0, [pc, #76]	; (800b2e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b298:	f000 fd07 	bl	800bcaa <USBD_GetEpDesc>
 800b29c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d002      	beq.n	800b2aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	2210      	movs	r2, #16
 800b2a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d006      	beq.n	800b2be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	711a      	strb	r2, [r3, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f042 0202 	orr.w	r2, r2, #2
 800b2bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d006      	beq.n	800b2d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	711a      	strb	r2, [r3, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f042 0202 	orr.w	r2, r2, #2
 800b2d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2243      	movs	r2, #67	; 0x43
 800b2d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2d8:	4b02      	ldr	r3, [pc, #8]	; (800b2e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3718      	adds	r7, #24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20000050 	.word	0x20000050

0800b2e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2f0:	2182      	movs	r1, #130	; 0x82
 800b2f2:	4818      	ldr	r0, [pc, #96]	; (800b354 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2f4:	f000 fcd9 	bl	800bcaa <USBD_GetEpDesc>
 800b2f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2fa:	2101      	movs	r1, #1
 800b2fc:	4815      	ldr	r0, [pc, #84]	; (800b354 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2fe:	f000 fcd4 	bl	800bcaa <USBD_GetEpDesc>
 800b302:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b304:	2181      	movs	r1, #129	; 0x81
 800b306:	4813      	ldr	r0, [pc, #76]	; (800b354 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b308:	f000 fccf 	bl	800bcaa <USBD_GetEpDesc>
 800b30c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d002      	beq.n	800b31a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2210      	movs	r2, #16
 800b318:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d006      	beq.n	800b32e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	2200      	movs	r2, #0
 800b324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b328:	711a      	strb	r2, [r3, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d006      	beq.n	800b342 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b33c:	711a      	strb	r2, [r3, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2243      	movs	r2, #67	; 0x43
 800b346:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b348:	4b02      	ldr	r3, [pc, #8]	; (800b354 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3718      	adds	r7, #24
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	20000050 	.word	0x20000050

0800b358 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	220a      	movs	r2, #10
 800b364:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b366:	4b03      	ldr	r3, [pc, #12]	; (800b374 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b368:	4618      	mov	r0, r3
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr
 800b374:	2000000c 	.word	0x2000000c

0800b378 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d101      	bne.n	800b38c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b388:	2303      	movs	r3, #3
 800b38a:	e009      	b.n	800b3a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	33b0      	adds	r3, #176	; 0xb0
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	4413      	add	r3, r2
 800b39a:	683a      	ldr	r2, [r7, #0]
 800b39c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	32b0      	adds	r2, #176	; 0xb0
 800b3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	e008      	b.n	800b3e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	371c      	adds	r7, #28
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	32b0      	adds	r2, #176	; 0xb0
 800b404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b408:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d101      	bne.n	800b414 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b410:	2303      	movs	r3, #3
 800b412:	e004      	b.n	800b41e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	683a      	ldr	r2, [r7, #0]
 800b418:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3714      	adds	r7, #20
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
	...

0800b42c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	32b0      	adds	r2, #176	; 0xb0
 800b43e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b442:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b444:	2301      	movs	r3, #1
 800b446:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b44e:	2303      	movs	r3, #3
 800b450:	e025      	b.n	800b49e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d11f      	bne.n	800b49c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	2201      	movs	r2, #1
 800b460:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b464:	4b10      	ldr	r3, [pc, #64]	; (800b4a8 <USBD_CDC_TransmitPacket+0x7c>)
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	f003 020f 	and.w	r2, r3, #15
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	4613      	mov	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	4403      	add	r3, r0
 800b47e:	3318      	adds	r3, #24
 800b480:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b482:	4b09      	ldr	r3, [pc, #36]	; (800b4a8 <USBD_CDC_TransmitPacket+0x7c>)
 800b484:	7819      	ldrb	r1, [r3, #0]
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f004 fe6d 	bl	8010172 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b498:	2300      	movs	r3, #0
 800b49a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	20000093 	.word	0x20000093

0800b4ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	32b0      	adds	r2, #176	; 0xb0
 800b4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	32b0      	adds	r2, #176	; 0xb0
 800b4ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	e018      	b.n	800b50c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	7c1b      	ldrb	r3, [r3, #16]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10a      	bne.n	800b4f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4e2:	4b0c      	ldr	r3, [pc, #48]	; (800b514 <USBD_CDC_ReceivePacket+0x68>)
 800b4e4:	7819      	ldrb	r1, [r3, #0]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f004 fe5f 	bl	80101b4 <USBD_LL_PrepareReceive>
 800b4f6:	e008      	b.n	800b50a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4f8:	4b06      	ldr	r3, [pc, #24]	; (800b514 <USBD_CDC_ReceivePacket+0x68>)
 800b4fa:	7819      	ldrb	r1, [r3, #0]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b502:	2340      	movs	r3, #64	; 0x40
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f004 fe55 	bl	80101b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	20000094 	.word	0x20000094

0800b518 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	4613      	mov	r3, r2
 800b524:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d101      	bne.n	800b530 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b52c:	2303      	movs	r3, #3
 800b52e:	e01f      	b.n	800b570 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2200      	movs	r2, #0
 800b544:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d003      	beq.n	800b556 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	79fa      	ldrb	r2, [r7, #7]
 800b562:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b564:	68f8      	ldr	r0, [r7, #12]
 800b566:	f004 fccf 	bl	800ff08 <USBD_LL_Init>
 800b56a:	4603      	mov	r3, r0
 800b56c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b56e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3718      	adds	r7, #24
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b582:	2300      	movs	r3, #0
 800b584:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d101      	bne.n	800b590 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b58c:	2303      	movs	r3, #3
 800b58e:	e025      	b.n	800b5dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	683a      	ldr	r2, [r7, #0]
 800b594:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	32ae      	adds	r2, #174	; 0xae
 800b5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00f      	beq.n	800b5cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	32ae      	adds	r2, #174	; 0xae
 800b5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5bc:	f107 020e 	add.w	r2, r7, #14
 800b5c0:	4610      	mov	r0, r2
 800b5c2:	4798      	blx	r3
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b5d2:	1c5a      	adds	r2, r3, #1
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f004 fcd7 	bl	800ffa0 <USBD_LL_Start>
 800b5f2:	4603      	mov	r3, r0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3708      	adds	r7, #8
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b604:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b606:	4618      	mov	r0, r3
 800b608:	370c      	adds	r7, #12
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	460b      	mov	r3, r1
 800b61c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b61e:	2300      	movs	r3, #0
 800b620:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d009      	beq.n	800b640 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	78fa      	ldrb	r2, [r7, #3]
 800b636:	4611      	mov	r1, r2
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	4798      	blx	r3
 800b63c:	4603      	mov	r3, r0
 800b63e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b640:	7bfb      	ldrb	r3, [r7, #15]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b084      	sub	sp, #16
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	460b      	mov	r3, r1
 800b654:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	78fa      	ldrb	r2, [r7, #3]
 800b664:	4611      	mov	r1, r2
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	4798      	blx	r3
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d001      	beq.n	800b674 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b670:	2303      	movs	r3, #3
 800b672:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b674:	7bfb      	ldrb	r3, [r7, #15]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b084      	sub	sp, #16
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	4618      	mov	r0, r3
 800b692:	f001 f932 	bl	800c8fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2201      	movs	r2, #1
 800b69a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b6b2:	f003 031f 	and.w	r3, r3, #31
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d01a      	beq.n	800b6f0 <USBD_LL_SetupStage+0x72>
 800b6ba:	2b02      	cmp	r3, #2
 800b6bc:	d822      	bhi.n	800b704 <USBD_LL_SetupStage+0x86>
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d002      	beq.n	800b6c8 <USBD_LL_SetupStage+0x4a>
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d00a      	beq.n	800b6dc <USBD_LL_SetupStage+0x5e>
 800b6c6:	e01d      	b.n	800b704 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 fb5f 	bl	800bd94 <USBD_StdDevReq>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b6da:	e020      	b.n	800b71e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 fbc7 	bl	800be78 <USBD_StdItfReq>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ee:	e016      	b.n	800b71e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 fc29 	bl	800bf50 <USBD_StdEPReq>
 800b6fe:	4603      	mov	r3, r0
 800b700:	73fb      	strb	r3, [r7, #15]
      break;
 800b702:	e00c      	b.n	800b71e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b70a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	4619      	mov	r1, r3
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f004 fca4 	bl	8010060 <USBD_LL_StallEP>
 800b718:	4603      	mov	r3, r0
 800b71a:	73fb      	strb	r3, [r7, #15]
      break;
 800b71c:	bf00      	nop
  }

  return ret;
 800b71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	460b      	mov	r3, r1
 800b732:	607a      	str	r2, [r7, #4]
 800b734:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b736:	2300      	movs	r3, #0
 800b738:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b73a:	7afb      	ldrb	r3, [r7, #11]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d16e      	bne.n	800b81e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b746:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b74e:	2b03      	cmp	r3, #3
 800b750:	f040 8098 	bne.w	800b884 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	689a      	ldr	r2, [r3, #8]
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d913      	bls.n	800b788 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	689a      	ldr	r2, [r3, #8]
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	1ad2      	subs	r2, r2, r3
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	68da      	ldr	r2, [r3, #12]
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	4293      	cmp	r3, r2
 800b778:	bf28      	it	cs
 800b77a:	4613      	movcs	r3, r2
 800b77c:	461a      	mov	r2, r3
 800b77e:	6879      	ldr	r1, [r7, #4]
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f001 f9ae 	bl	800cae2 <USBD_CtlContinueRx>
 800b786:	e07d      	b.n	800b884 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b78e:	f003 031f 	and.w	r3, r3, #31
 800b792:	2b02      	cmp	r3, #2
 800b794:	d014      	beq.n	800b7c0 <USBD_LL_DataOutStage+0x98>
 800b796:	2b02      	cmp	r3, #2
 800b798:	d81d      	bhi.n	800b7d6 <USBD_LL_DataOutStage+0xae>
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d002      	beq.n	800b7a4 <USBD_LL_DataOutStage+0x7c>
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d003      	beq.n	800b7aa <USBD_LL_DataOutStage+0x82>
 800b7a2:	e018      	b.n	800b7d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	75bb      	strb	r3, [r7, #22]
            break;
 800b7a8:	e018      	b.n	800b7dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f000 fa5e 	bl	800bc76 <USBD_CoreFindIF>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	75bb      	strb	r3, [r7, #22]
            break;
 800b7be:	e00d      	b.n	800b7dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f000 fa60 	bl	800bc90 <USBD_CoreFindEP>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	75bb      	strb	r3, [r7, #22]
            break;
 800b7d4:	e002      	b.n	800b7dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	75bb      	strb	r3, [r7, #22]
            break;
 800b7da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b7dc:	7dbb      	ldrb	r3, [r7, #22]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d119      	bne.n	800b816 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	2b03      	cmp	r3, #3
 800b7ec:	d113      	bne.n	800b816 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b7ee:	7dba      	ldrb	r2, [r7, #22]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	32ae      	adds	r2, #174	; 0xae
 800b7f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00b      	beq.n	800b816 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b7fe:	7dba      	ldrb	r2, [r7, #22]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b806:	7dba      	ldrb	r2, [r7, #22]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	32ae      	adds	r2, #174	; 0xae
 800b80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b810:	691b      	ldr	r3, [r3, #16]
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f001 f974 	bl	800cb04 <USBD_CtlSendStatus>
 800b81c:	e032      	b.n	800b884 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b81e:	7afb      	ldrb	r3, [r7, #11]
 800b820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b824:	b2db      	uxtb	r3, r3
 800b826:	4619      	mov	r1, r3
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f000 fa31 	bl	800bc90 <USBD_CoreFindEP>
 800b82e:	4603      	mov	r3, r0
 800b830:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b832:	7dbb      	ldrb	r3, [r7, #22]
 800b834:	2bff      	cmp	r3, #255	; 0xff
 800b836:	d025      	beq.n	800b884 <USBD_LL_DataOutStage+0x15c>
 800b838:	7dbb      	ldrb	r3, [r7, #22]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d122      	bne.n	800b884 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b844:	b2db      	uxtb	r3, r3
 800b846:	2b03      	cmp	r3, #3
 800b848:	d117      	bne.n	800b87a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b84a:	7dba      	ldrb	r2, [r7, #22]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	32ae      	adds	r2, #174	; 0xae
 800b850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b854:	699b      	ldr	r3, [r3, #24]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00f      	beq.n	800b87a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b85a:	7dba      	ldrb	r2, [r7, #22]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b862:	7dba      	ldrb	r2, [r7, #22]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	32ae      	adds	r2, #174	; 0xae
 800b868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86c:	699b      	ldr	r3, [r3, #24]
 800b86e:	7afa      	ldrb	r2, [r7, #11]
 800b870:	4611      	mov	r1, r2
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	4798      	blx	r3
 800b876:	4603      	mov	r3, r0
 800b878:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b87a:	7dfb      	ldrb	r3, [r7, #23]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d001      	beq.n	800b884 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b880:	7dfb      	ldrb	r3, [r7, #23]
 800b882:	e000      	b.n	800b886 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3718      	adds	r7, #24
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b88e:	b580      	push	{r7, lr}
 800b890:	b086      	sub	sp, #24
 800b892:	af00      	add	r7, sp, #0
 800b894:	60f8      	str	r0, [r7, #12]
 800b896:	460b      	mov	r3, r1
 800b898:	607a      	str	r2, [r7, #4]
 800b89a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b89c:	7afb      	ldrb	r3, [r7, #11]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d16f      	bne.n	800b982 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3314      	adds	r3, #20
 800b8a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8ae:	2b02      	cmp	r3, #2
 800b8b0:	d15a      	bne.n	800b968 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	689a      	ldr	r2, [r3, #8]
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d914      	bls.n	800b8e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	689a      	ldr	r2, [r3, #8]
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	1ad2      	subs	r2, r2, r3
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	6879      	ldr	r1, [r7, #4]
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f001 f8d6 	bl	800ca86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8da:	2300      	movs	r3, #0
 800b8dc:	2200      	movs	r2, #0
 800b8de:	2100      	movs	r1, #0
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f004 fc67 	bl	80101b4 <USBD_LL_PrepareReceive>
 800b8e6:	e03f      	b.n	800b968 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	68da      	ldr	r2, [r3, #12]
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d11c      	bne.n	800b92e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	685a      	ldr	r2, [r3, #4]
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d316      	bcc.n	800b92e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d20f      	bcs.n	800b92e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b90e:	2200      	movs	r2, #0
 800b910:	2100      	movs	r1, #0
 800b912:	68f8      	ldr	r0, [r7, #12]
 800b914:	f001 f8b7 	bl	800ca86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b920:	2300      	movs	r3, #0
 800b922:	2200      	movs	r2, #0
 800b924:	2100      	movs	r1, #0
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f004 fc44 	bl	80101b4 <USBD_LL_PrepareReceive>
 800b92c:	e01c      	b.n	800b968 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b934:	b2db      	uxtb	r3, r3
 800b936:	2b03      	cmp	r3, #3
 800b938:	d10f      	bne.n	800b95a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d009      	beq.n	800b95a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b95a:	2180      	movs	r1, #128	; 0x80
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f004 fb7f 	bl	8010060 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f001 f8e1 	bl	800cb2a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d03a      	beq.n	800b9e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f7ff fe42 	bl	800b5fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2200      	movs	r2, #0
 800b97c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b980:	e032      	b.n	800b9e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b982:	7afb      	ldrb	r3, [r7, #11]
 800b984:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	4619      	mov	r1, r3
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f000 f97f 	bl	800bc90 <USBD_CoreFindEP>
 800b992:	4603      	mov	r3, r0
 800b994:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b996:	7dfb      	ldrb	r3, [r7, #23]
 800b998:	2bff      	cmp	r3, #255	; 0xff
 800b99a:	d025      	beq.n	800b9e8 <USBD_LL_DataInStage+0x15a>
 800b99c:	7dfb      	ldrb	r3, [r7, #23]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d122      	bne.n	800b9e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	2b03      	cmp	r3, #3
 800b9ac:	d11c      	bne.n	800b9e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b9ae:	7dfa      	ldrb	r2, [r7, #23]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	32ae      	adds	r2, #174	; 0xae
 800b9b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d014      	beq.n	800b9e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b9be:	7dfa      	ldrb	r2, [r7, #23]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b9c6:	7dfa      	ldrb	r2, [r7, #23]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	32ae      	adds	r2, #174	; 0xae
 800b9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	7afa      	ldrb	r2, [r7, #11]
 800b9d4:	4611      	mov	r1, r2
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	4798      	blx	r3
 800b9da:	4603      	mov	r3, r0
 800b9dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b9de:	7dbb      	ldrb	r3, [r7, #22]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b9e4:	7dbb      	ldrb	r3, [r7, #22]
 800b9e6:	e000      	b.n	800b9ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3718      	adds	r7, #24
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b084      	sub	sp, #16
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2201      	movs	r2, #1
 800ba02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d014      	beq.n	800ba58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00e      	beq.n	800ba58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	6852      	ldr	r2, [r2, #4]
 800ba46:	b2d2      	uxtb	r2, r2
 800ba48:	4611      	mov	r1, r2
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	4798      	blx	r3
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d001      	beq.n	800ba58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba54:	2303      	movs	r3, #3
 800ba56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba58:	2340      	movs	r3, #64	; 0x40
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f004 fab9 	bl	800ffd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2240      	movs	r2, #64	; 0x40
 800ba70:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba74:	2340      	movs	r3, #64	; 0x40
 800ba76:	2200      	movs	r2, #0
 800ba78:	2180      	movs	r1, #128	; 0x80
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f004 faab 	bl	800ffd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2240      	movs	r2, #64	; 0x40
 800ba8a:	621a      	str	r2, [r3, #32]

  return ret;
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ba96:	b480      	push	{r7}
 800ba98:	b083      	sub	sp, #12
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	78fa      	ldrb	r2, [r7, #3]
 800baa6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bab6:	b480      	push	{r7}
 800bab8:	b083      	sub	sp, #12
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bac4:	b2da      	uxtb	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2204      	movs	r2, #4
 800bad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	370c      	adds	r7, #12
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr

0800bae2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bae2:	b480      	push	{r7}
 800bae4:	b083      	sub	sp, #12
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	2b04      	cmp	r3, #4
 800baf4:	d106      	bne.n	800bb04 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bafc:	b2da      	uxtb	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	370c      	adds	r7, #12
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	2b03      	cmp	r3, #3
 800bb24:	d110      	bne.n	800bb48 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d00b      	beq.n	800bb48 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb36:	69db      	ldr	r3, [r3, #28]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d005      	beq.n	800bb48 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb42:	69db      	ldr	r3, [r3, #28]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb48:	2300      	movs	r3, #0
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	32ae      	adds	r2, #174	; 0xae
 800bb68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d101      	bne.n	800bb74 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb70:	2303      	movs	r3, #3
 800bb72:	e01c      	b.n	800bbae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b03      	cmp	r3, #3
 800bb7e:	d115      	bne.n	800bbac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	32ae      	adds	r2, #174	; 0xae
 800bb8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb8e:	6a1b      	ldr	r3, [r3, #32]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00b      	beq.n	800bbac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	32ae      	adds	r2, #174	; 0xae
 800bb9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba2:	6a1b      	ldr	r3, [r3, #32]
 800bba4:	78fa      	ldrb	r2, [r7, #3]
 800bba6:	4611      	mov	r1, r2
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b082      	sub	sp, #8
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	32ae      	adds	r2, #174	; 0xae
 800bbcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d101      	bne.n	800bbd8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	e01c      	b.n	800bc12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	2b03      	cmp	r3, #3
 800bbe2:	d115      	bne.n	800bc10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	32ae      	adds	r2, #174	; 0xae
 800bbee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00b      	beq.n	800bc10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	32ae      	adds	r2, #174	; 0xae
 800bc02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc08:	78fa      	ldrb	r2, [r7, #3]
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc1a:	b480      	push	{r7}
 800bc1c:	b083      	sub	sp, #12
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc22:	2300      	movs	r3, #0
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00e      	beq.n	800bc6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	6852      	ldr	r2, [r2, #4]
 800bc5a:	b2d2      	uxtb	r2, r2
 800bc5c:	4611      	mov	r1, r2
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	4798      	blx	r3
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d001      	beq.n	800bc6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bc68:	2303      	movs	r3, #3
 800bc6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b083      	sub	sp, #12
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	460b      	mov	r3, r1
 800bc80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bc82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	460b      	mov	r3, r1
 800bc9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bc9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b086      	sub	sp, #24
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	885b      	ldrh	r3, [r3, #2]
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d920      	bls.n	800bd14 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bcda:	e013      	b.n	800bd04 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bcdc:	f107 030a 	add.w	r3, r7, #10
 800bce0:	4619      	mov	r1, r3
 800bce2:	6978      	ldr	r0, [r7, #20]
 800bce4:	f000 f81b 	bl	800bd1e <USBD_GetNextDesc>
 800bce8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	785b      	ldrb	r3, [r3, #1]
 800bcee:	2b05      	cmp	r3, #5
 800bcf0:	d108      	bne.n	800bd04 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	789b      	ldrb	r3, [r3, #2]
 800bcfa:	78fa      	ldrb	r2, [r7, #3]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d008      	beq.n	800bd12 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd00:	2300      	movs	r3, #0
 800bd02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	885b      	ldrh	r3, [r3, #2]
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	897b      	ldrh	r3, [r7, #10]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d8e5      	bhi.n	800bcdc <USBD_GetEpDesc+0x32>
 800bd10:	e000      	b.n	800bd14 <USBD_GetEpDesc+0x6a>
          break;
 800bd12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd14:	693b      	ldr	r3, [r7, #16]
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3718      	adds	r7, #24
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd1e:	b480      	push	{r7}
 800bd20:	b085      	sub	sp, #20
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	881a      	ldrh	r2, [r3, #0]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	4413      	add	r3, r2
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	461a      	mov	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4413      	add	r3, r2
 800bd48:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3714      	adds	r7, #20
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b087      	sub	sp, #28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd76:	8a3b      	ldrh	r3, [r7, #16]
 800bd78:	021b      	lsls	r3, r3, #8
 800bd7a:	b21a      	sxth	r2, r3
 800bd7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd80:	4313      	orrs	r3, r2
 800bd82:	b21b      	sxth	r3, r3
 800bd84:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd86:	89fb      	ldrh	r3, [r7, #14]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	371c      	adds	r7, #28
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bdaa:	2b40      	cmp	r3, #64	; 0x40
 800bdac:	d005      	beq.n	800bdba <USBD_StdDevReq+0x26>
 800bdae:	2b40      	cmp	r3, #64	; 0x40
 800bdb0:	d857      	bhi.n	800be62 <USBD_StdDevReq+0xce>
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00f      	beq.n	800bdd6 <USBD_StdDevReq+0x42>
 800bdb6:	2b20      	cmp	r3, #32
 800bdb8:	d153      	bne.n	800be62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	32ae      	adds	r2, #174	; 0xae
 800bdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	4798      	blx	r3
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	73fb      	strb	r3, [r7, #15]
      break;
 800bdd4:	e04a      	b.n	800be6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	785b      	ldrb	r3, [r3, #1]
 800bdda:	2b09      	cmp	r3, #9
 800bddc:	d83b      	bhi.n	800be56 <USBD_StdDevReq+0xc2>
 800bdde:	a201      	add	r2, pc, #4	; (adr r2, 800bde4 <USBD_StdDevReq+0x50>)
 800bde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde4:	0800be39 	.word	0x0800be39
 800bde8:	0800be4d 	.word	0x0800be4d
 800bdec:	0800be57 	.word	0x0800be57
 800bdf0:	0800be43 	.word	0x0800be43
 800bdf4:	0800be57 	.word	0x0800be57
 800bdf8:	0800be17 	.word	0x0800be17
 800bdfc:	0800be0d 	.word	0x0800be0d
 800be00:	0800be57 	.word	0x0800be57
 800be04:	0800be2f 	.word	0x0800be2f
 800be08:	0800be21 	.word	0x0800be21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be0c:	6839      	ldr	r1, [r7, #0]
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 fa3c 	bl	800c28c <USBD_GetDescriptor>
          break;
 800be14:	e024      	b.n	800be60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be16:	6839      	ldr	r1, [r7, #0]
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fbcb 	bl	800c5b4 <USBD_SetAddress>
          break;
 800be1e:	e01f      	b.n	800be60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fc0a 	bl	800c63c <USBD_SetConfig>
 800be28:	4603      	mov	r3, r0
 800be2a:	73fb      	strb	r3, [r7, #15]
          break;
 800be2c:	e018      	b.n	800be60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fcad 	bl	800c790 <USBD_GetConfig>
          break;
 800be36:	e013      	b.n	800be60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be38:	6839      	ldr	r1, [r7, #0]
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fcde 	bl	800c7fc <USBD_GetStatus>
          break;
 800be40:	e00e      	b.n	800be60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be42:	6839      	ldr	r1, [r7, #0]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fd0d 	bl	800c864 <USBD_SetFeature>
          break;
 800be4a:	e009      	b.n	800be60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 fd31 	bl	800c8b6 <USBD_ClrFeature>
          break;
 800be54:	e004      	b.n	800be60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be56:	6839      	ldr	r1, [r7, #0]
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 fd88 	bl	800c96e <USBD_CtlError>
          break;
 800be5e:	bf00      	nop
      }
      break;
 800be60:	e004      	b.n	800be6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 fd82 	bl	800c96e <USBD_CtlError>
      break;
 800be6a:	bf00      	nop
  }

  return ret;
 800be6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop

0800be78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be8e:	2b40      	cmp	r3, #64	; 0x40
 800be90:	d005      	beq.n	800be9e <USBD_StdItfReq+0x26>
 800be92:	2b40      	cmp	r3, #64	; 0x40
 800be94:	d852      	bhi.n	800bf3c <USBD_StdItfReq+0xc4>
 800be96:	2b00      	cmp	r3, #0
 800be98:	d001      	beq.n	800be9e <USBD_StdItfReq+0x26>
 800be9a:	2b20      	cmp	r3, #32
 800be9c:	d14e      	bne.n	800bf3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	3b01      	subs	r3, #1
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d840      	bhi.n	800bf2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	889b      	ldrh	r3, [r3, #4]
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d836      	bhi.n	800bf24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	889b      	ldrh	r3, [r3, #4]
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	4619      	mov	r1, r3
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7ff fed9 	bl	800bc76 <USBD_CoreFindIF>
 800bec4:	4603      	mov	r3, r0
 800bec6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bec8:	7bbb      	ldrb	r3, [r7, #14]
 800beca:	2bff      	cmp	r3, #255	; 0xff
 800becc:	d01d      	beq.n	800bf0a <USBD_StdItfReq+0x92>
 800bece:	7bbb      	ldrb	r3, [r7, #14]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d11a      	bne.n	800bf0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bed4:	7bba      	ldrb	r2, [r7, #14]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	32ae      	adds	r2, #174	; 0xae
 800beda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00f      	beq.n	800bf04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bee4:	7bba      	ldrb	r2, [r7, #14]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800beec:	7bba      	ldrb	r2, [r7, #14]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	32ae      	adds	r2, #174	; 0xae
 800bef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	6839      	ldr	r1, [r7, #0]
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	4798      	blx	r3
 800befe:	4603      	mov	r3, r0
 800bf00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf02:	e004      	b.n	800bf0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf04:	2303      	movs	r3, #3
 800bf06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf08:	e001      	b.n	800bf0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	88db      	ldrh	r3, [r3, #6]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d110      	bne.n	800bf38 <USBD_StdItfReq+0xc0>
 800bf16:	7bfb      	ldrb	r3, [r7, #15]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d10d      	bne.n	800bf38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fdf1 	bl	800cb04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf22:	e009      	b.n	800bf38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 fd21 	bl	800c96e <USBD_CtlError>
          break;
 800bf2c:	e004      	b.n	800bf38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 fd1c 	bl	800c96e <USBD_CtlError>
          break;
 800bf36:	e000      	b.n	800bf3a <USBD_StdItfReq+0xc2>
          break;
 800bf38:	bf00      	nop
      }
      break;
 800bf3a:	e004      	b.n	800bf46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fd15 	bl	800c96e <USBD_CtlError>
      break;
 800bf44:	bf00      	nop
  }

  return ret;
 800bf46:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	889b      	ldrh	r3, [r3, #4]
 800bf62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf6c:	2b40      	cmp	r3, #64	; 0x40
 800bf6e:	d007      	beq.n	800bf80 <USBD_StdEPReq+0x30>
 800bf70:	2b40      	cmp	r3, #64	; 0x40
 800bf72:	f200 817f 	bhi.w	800c274 <USBD_StdEPReq+0x324>
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d02a      	beq.n	800bfd0 <USBD_StdEPReq+0x80>
 800bf7a:	2b20      	cmp	r3, #32
 800bf7c:	f040 817a 	bne.w	800c274 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf80:	7bbb      	ldrb	r3, [r7, #14]
 800bf82:	4619      	mov	r1, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7ff fe83 	bl	800bc90 <USBD_CoreFindEP>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf8e:	7b7b      	ldrb	r3, [r7, #13]
 800bf90:	2bff      	cmp	r3, #255	; 0xff
 800bf92:	f000 8174 	beq.w	800c27e <USBD_StdEPReq+0x32e>
 800bf96:	7b7b      	ldrb	r3, [r7, #13]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f040 8170 	bne.w	800c27e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bf9e:	7b7a      	ldrb	r2, [r7, #13]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bfa6:	7b7a      	ldrb	r2, [r7, #13]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	32ae      	adds	r2, #174	; 0xae
 800bfac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f000 8163 	beq.w	800c27e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bfb8:	7b7a      	ldrb	r2, [r7, #13]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	32ae      	adds	r2, #174	; 0xae
 800bfbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	4798      	blx	r3
 800bfca:	4603      	mov	r3, r0
 800bfcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bfce:	e156      	b.n	800c27e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	785b      	ldrb	r3, [r3, #1]
 800bfd4:	2b03      	cmp	r3, #3
 800bfd6:	d008      	beq.n	800bfea <USBD_StdEPReq+0x9a>
 800bfd8:	2b03      	cmp	r3, #3
 800bfda:	f300 8145 	bgt.w	800c268 <USBD_StdEPReq+0x318>
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f000 809b 	beq.w	800c11a <USBD_StdEPReq+0x1ca>
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d03c      	beq.n	800c062 <USBD_StdEPReq+0x112>
 800bfe8:	e13e      	b.n	800c268 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	2b02      	cmp	r3, #2
 800bff4:	d002      	beq.n	800bffc <USBD_StdEPReq+0xac>
 800bff6:	2b03      	cmp	r3, #3
 800bff8:	d016      	beq.n	800c028 <USBD_StdEPReq+0xd8>
 800bffa:	e02c      	b.n	800c056 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bffc:	7bbb      	ldrb	r3, [r7, #14]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00d      	beq.n	800c01e <USBD_StdEPReq+0xce>
 800c002:	7bbb      	ldrb	r3, [r7, #14]
 800c004:	2b80      	cmp	r3, #128	; 0x80
 800c006:	d00a      	beq.n	800c01e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c008:	7bbb      	ldrb	r3, [r7, #14]
 800c00a:	4619      	mov	r1, r3
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f004 f827 	bl	8010060 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c012:	2180      	movs	r1, #128	; 0x80
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f004 f823 	bl	8010060 <USBD_LL_StallEP>
 800c01a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c01c:	e020      	b.n	800c060 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c01e:	6839      	ldr	r1, [r7, #0]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 fca4 	bl	800c96e <USBD_CtlError>
              break;
 800c026:	e01b      	b.n	800c060 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	885b      	ldrh	r3, [r3, #2]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10e      	bne.n	800c04e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c030:	7bbb      	ldrb	r3, [r7, #14]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00b      	beq.n	800c04e <USBD_StdEPReq+0xfe>
 800c036:	7bbb      	ldrb	r3, [r7, #14]
 800c038:	2b80      	cmp	r3, #128	; 0x80
 800c03a:	d008      	beq.n	800c04e <USBD_StdEPReq+0xfe>
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	88db      	ldrh	r3, [r3, #6]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d104      	bne.n	800c04e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	4619      	mov	r1, r3
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f004 f809 	bl	8010060 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 fd58 	bl	800cb04 <USBD_CtlSendStatus>

              break;
 800c054:	e004      	b.n	800c060 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fc88 	bl	800c96e <USBD_CtlError>
              break;
 800c05e:	bf00      	nop
          }
          break;
 800c060:	e107      	b.n	800c272 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	d002      	beq.n	800c074 <USBD_StdEPReq+0x124>
 800c06e:	2b03      	cmp	r3, #3
 800c070:	d016      	beq.n	800c0a0 <USBD_StdEPReq+0x150>
 800c072:	e04b      	b.n	800c10c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c074:	7bbb      	ldrb	r3, [r7, #14]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00d      	beq.n	800c096 <USBD_StdEPReq+0x146>
 800c07a:	7bbb      	ldrb	r3, [r7, #14]
 800c07c:	2b80      	cmp	r3, #128	; 0x80
 800c07e:	d00a      	beq.n	800c096 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c080:	7bbb      	ldrb	r3, [r7, #14]
 800c082:	4619      	mov	r1, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f003 ffeb 	bl	8010060 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c08a:	2180      	movs	r1, #128	; 0x80
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f003 ffe7 	bl	8010060 <USBD_LL_StallEP>
 800c092:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c094:	e040      	b.n	800c118 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fc68 	bl	800c96e <USBD_CtlError>
              break;
 800c09e:	e03b      	b.n	800c118 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	885b      	ldrh	r3, [r3, #2]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d136      	bne.n	800c116 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
 800c0aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d004      	beq.n	800c0bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f003 fff1 	bl	801009e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fd21 	bl	800cb04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0c2:	7bbb      	ldrb	r3, [r7, #14]
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7ff fde2 	bl	800bc90 <USBD_CoreFindEP>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0d0:	7b7b      	ldrb	r3, [r7, #13]
 800c0d2:	2bff      	cmp	r3, #255	; 0xff
 800c0d4:	d01f      	beq.n	800c116 <USBD_StdEPReq+0x1c6>
 800c0d6:	7b7b      	ldrb	r3, [r7, #13]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d11c      	bne.n	800c116 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c0dc:	7b7a      	ldrb	r2, [r7, #13]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c0e4:	7b7a      	ldrb	r2, [r7, #13]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	32ae      	adds	r2, #174	; 0xae
 800c0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d010      	beq.n	800c116 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c0f4:	7b7a      	ldrb	r2, [r7, #13]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	32ae      	adds	r2, #174	; 0xae
 800c0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	6839      	ldr	r1, [r7, #0]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	4798      	blx	r3
 800c106:	4603      	mov	r3, r0
 800c108:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c10a:	e004      	b.n	800c116 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c10c:	6839      	ldr	r1, [r7, #0]
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fc2d 	bl	800c96e <USBD_CtlError>
              break;
 800c114:	e000      	b.n	800c118 <USBD_StdEPReq+0x1c8>
              break;
 800c116:	bf00      	nop
          }
          break;
 800c118:	e0ab      	b.n	800c272 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c120:	b2db      	uxtb	r3, r3
 800c122:	2b02      	cmp	r3, #2
 800c124:	d002      	beq.n	800c12c <USBD_StdEPReq+0x1dc>
 800c126:	2b03      	cmp	r3, #3
 800c128:	d032      	beq.n	800c190 <USBD_StdEPReq+0x240>
 800c12a:	e097      	b.n	800c25c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d007      	beq.n	800c142 <USBD_StdEPReq+0x1f2>
 800c132:	7bbb      	ldrb	r3, [r7, #14]
 800c134:	2b80      	cmp	r3, #128	; 0x80
 800c136:	d004      	beq.n	800c142 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c138:	6839      	ldr	r1, [r7, #0]
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 fc17 	bl	800c96e <USBD_CtlError>
                break;
 800c140:	e091      	b.n	800c266 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c146:	2b00      	cmp	r3, #0
 800c148:	da0b      	bge.n	800c162 <USBD_StdEPReq+0x212>
 800c14a:	7bbb      	ldrb	r3, [r7, #14]
 800c14c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c150:	4613      	mov	r3, r2
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	3310      	adds	r3, #16
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	4413      	add	r3, r2
 800c15e:	3304      	adds	r3, #4
 800c160:	e00b      	b.n	800c17a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c162:	7bbb      	ldrb	r3, [r7, #14]
 800c164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c168:	4613      	mov	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4413      	add	r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	4413      	add	r3, r2
 800c178:	3304      	adds	r3, #4
 800c17a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	2200      	movs	r2, #0
 800c180:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	2202      	movs	r2, #2
 800c186:	4619      	mov	r1, r3
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fc61 	bl	800ca50 <USBD_CtlSendData>
              break;
 800c18e:	e06a      	b.n	800c266 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c194:	2b00      	cmp	r3, #0
 800c196:	da11      	bge.n	800c1bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c198:	7bbb      	ldrb	r3, [r7, #14]
 800c19a:	f003 020f 	and.w	r2, r3, #15
 800c19e:	6879      	ldr	r1, [r7, #4]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4413      	add	r3, r2
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	440b      	add	r3, r1
 800c1aa:	3324      	adds	r3, #36	; 0x24
 800c1ac:	881b      	ldrh	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d117      	bne.n	800c1e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1b2:	6839      	ldr	r1, [r7, #0]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fbda 	bl	800c96e <USBD_CtlError>
                  break;
 800c1ba:	e054      	b.n	800c266 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1bc:	7bbb      	ldrb	r3, [r7, #14]
 800c1be:	f003 020f 	and.w	r2, r3, #15
 800c1c2:	6879      	ldr	r1, [r7, #4]
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	4413      	add	r3, r2
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	440b      	add	r3, r1
 800c1ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c1d2:	881b      	ldrh	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d104      	bne.n	800c1e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fbc7 	bl	800c96e <USBD_CtlError>
                  break;
 800c1e0:	e041      	b.n	800c266 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	da0b      	bge.n	800c202 <USBD_StdEPReq+0x2b2>
 800c1ea:	7bbb      	ldrb	r3, [r7, #14]
 800c1ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	3310      	adds	r3, #16
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	3304      	adds	r3, #4
 800c200:	e00b      	b.n	800c21a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c202:	7bbb      	ldrb	r3, [r7, #14]
 800c204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c208:	4613      	mov	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	4413      	add	r3, r2
 800c218:	3304      	adds	r3, #4
 800c21a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d002      	beq.n	800c228 <USBD_StdEPReq+0x2d8>
 800c222:	7bbb      	ldrb	r3, [r7, #14]
 800c224:	2b80      	cmp	r3, #128	; 0x80
 800c226:	d103      	bne.n	800c230 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	2200      	movs	r2, #0
 800c22c:	601a      	str	r2, [r3, #0]
 800c22e:	e00e      	b.n	800c24e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c230:	7bbb      	ldrb	r3, [r7, #14]
 800c232:	4619      	mov	r1, r3
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f003 ff51 	bl	80100dc <USBD_LL_IsStallEP>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d003      	beq.n	800c248 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	2201      	movs	r2, #1
 800c244:	601a      	str	r2, [r3, #0]
 800c246:	e002      	b.n	800c24e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	2200      	movs	r2, #0
 800c24c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	2202      	movs	r2, #2
 800c252:	4619      	mov	r1, r3
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fbfb 	bl	800ca50 <USBD_CtlSendData>
              break;
 800c25a:	e004      	b.n	800c266 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c25c:	6839      	ldr	r1, [r7, #0]
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 fb85 	bl	800c96e <USBD_CtlError>
              break;
 800c264:	bf00      	nop
          }
          break;
 800c266:	e004      	b.n	800c272 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c268:	6839      	ldr	r1, [r7, #0]
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 fb7f 	bl	800c96e <USBD_CtlError>
          break;
 800c270:	bf00      	nop
      }
      break;
 800c272:	e005      	b.n	800c280 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c274:	6839      	ldr	r1, [r7, #0]
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 fb79 	bl	800c96e <USBD_CtlError>
      break;
 800c27c:	e000      	b.n	800c280 <USBD_StdEPReq+0x330>
      break;
 800c27e:	bf00      	nop
  }

  return ret;
 800c280:	7bfb      	ldrb	r3, [r7, #15]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
	...

0800c28c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c296:	2300      	movs	r3, #0
 800c298:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c29a:	2300      	movs	r3, #0
 800c29c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	885b      	ldrh	r3, [r3, #2]
 800c2a6:	0a1b      	lsrs	r3, r3, #8
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	2b0e      	cmp	r3, #14
 800c2ae:	f200 8152 	bhi.w	800c556 <USBD_GetDescriptor+0x2ca>
 800c2b2:	a201      	add	r2, pc, #4	; (adr r2, 800c2b8 <USBD_GetDescriptor+0x2c>)
 800c2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b8:	0800c329 	.word	0x0800c329
 800c2bc:	0800c341 	.word	0x0800c341
 800c2c0:	0800c381 	.word	0x0800c381
 800c2c4:	0800c557 	.word	0x0800c557
 800c2c8:	0800c557 	.word	0x0800c557
 800c2cc:	0800c4f7 	.word	0x0800c4f7
 800c2d0:	0800c523 	.word	0x0800c523
 800c2d4:	0800c557 	.word	0x0800c557
 800c2d8:	0800c557 	.word	0x0800c557
 800c2dc:	0800c557 	.word	0x0800c557
 800c2e0:	0800c557 	.word	0x0800c557
 800c2e4:	0800c557 	.word	0x0800c557
 800c2e8:	0800c557 	.word	0x0800c557
 800c2ec:	0800c557 	.word	0x0800c557
 800c2f0:	0800c2f5 	.word	0x0800c2f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2fa:	69db      	ldr	r3, [r3, #28]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00b      	beq.n	800c318 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c306:	69db      	ldr	r3, [r3, #28]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	7c12      	ldrb	r2, [r2, #16]
 800c30c:	f107 0108 	add.w	r1, r7, #8
 800c310:	4610      	mov	r0, r2
 800c312:	4798      	blx	r3
 800c314:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c316:	e126      	b.n	800c566 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c318:	6839      	ldr	r1, [r7, #0]
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 fb27 	bl	800c96e <USBD_CtlError>
        err++;
 800c320:	7afb      	ldrb	r3, [r7, #11]
 800c322:	3301      	adds	r3, #1
 800c324:	72fb      	strb	r3, [r7, #11]
      break;
 800c326:	e11e      	b.n	800c566 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	7c12      	ldrb	r2, [r2, #16]
 800c334:	f107 0108 	add.w	r1, r7, #8
 800c338:	4610      	mov	r0, r2
 800c33a:	4798      	blx	r3
 800c33c:	60f8      	str	r0, [r7, #12]
      break;
 800c33e:	e112      	b.n	800c566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	7c1b      	ldrb	r3, [r3, #16]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d10d      	bne.n	800c364 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c350:	f107 0208 	add.w	r2, r7, #8
 800c354:	4610      	mov	r0, r2
 800c356:	4798      	blx	r3
 800c358:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	3301      	adds	r3, #1
 800c35e:	2202      	movs	r2, #2
 800c360:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c362:	e100      	b.n	800c566 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36c:	f107 0208 	add.w	r2, r7, #8
 800c370:	4610      	mov	r0, r2
 800c372:	4798      	blx	r3
 800c374:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	3301      	adds	r3, #1
 800c37a:	2202      	movs	r2, #2
 800c37c:	701a      	strb	r2, [r3, #0]
      break;
 800c37e:	e0f2      	b.n	800c566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	885b      	ldrh	r3, [r3, #2]
 800c384:	b2db      	uxtb	r3, r3
 800c386:	2b05      	cmp	r3, #5
 800c388:	f200 80ac 	bhi.w	800c4e4 <USBD_GetDescriptor+0x258>
 800c38c:	a201      	add	r2, pc, #4	; (adr r2, 800c394 <USBD_GetDescriptor+0x108>)
 800c38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c392:	bf00      	nop
 800c394:	0800c3ad 	.word	0x0800c3ad
 800c398:	0800c3e1 	.word	0x0800c3e1
 800c39c:	0800c415 	.word	0x0800c415
 800c3a0:	0800c449 	.word	0x0800c449
 800c3a4:	0800c47d 	.word	0x0800c47d
 800c3a8:	0800c4b1 	.word	0x0800c4b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00b      	beq.n	800c3d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	7c12      	ldrb	r2, [r2, #16]
 800c3c4:	f107 0108 	add.w	r1, r7, #8
 800c3c8:	4610      	mov	r0, r2
 800c3ca:	4798      	blx	r3
 800c3cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ce:	e091      	b.n	800c4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3d0:	6839      	ldr	r1, [r7, #0]
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 facb 	bl	800c96e <USBD_CtlError>
            err++;
 800c3d8:	7afb      	ldrb	r3, [r7, #11]
 800c3da:	3301      	adds	r3, #1
 800c3dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c3de:	e089      	b.n	800c4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00b      	beq.n	800c404 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	7c12      	ldrb	r2, [r2, #16]
 800c3f8:	f107 0108 	add.w	r1, r7, #8
 800c3fc:	4610      	mov	r0, r2
 800c3fe:	4798      	blx	r3
 800c400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c402:	e077      	b.n	800c4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c404:	6839      	ldr	r1, [r7, #0]
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 fab1 	bl	800c96e <USBD_CtlError>
            err++;
 800c40c:	7afb      	ldrb	r3, [r7, #11]
 800c40e:	3301      	adds	r3, #1
 800c410:	72fb      	strb	r3, [r7, #11]
          break;
 800c412:	e06f      	b.n	800c4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00b      	beq.n	800c438 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	7c12      	ldrb	r2, [r2, #16]
 800c42c:	f107 0108 	add.w	r1, r7, #8
 800c430:	4610      	mov	r0, r2
 800c432:	4798      	blx	r3
 800c434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c436:	e05d      	b.n	800c4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fa97 	bl	800c96e <USBD_CtlError>
            err++;
 800c440:	7afb      	ldrb	r3, [r7, #11]
 800c442:	3301      	adds	r3, #1
 800c444:	72fb      	strb	r3, [r7, #11]
          break;
 800c446:	e055      	b.n	800c4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00b      	beq.n	800c46c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	7c12      	ldrb	r2, [r2, #16]
 800c460:	f107 0108 	add.w	r1, r7, #8
 800c464:	4610      	mov	r0, r2
 800c466:	4798      	blx	r3
 800c468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c46a:	e043      	b.n	800c4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c46c:	6839      	ldr	r1, [r7, #0]
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fa7d 	bl	800c96e <USBD_CtlError>
            err++;
 800c474:	7afb      	ldrb	r3, [r7, #11]
 800c476:	3301      	adds	r3, #1
 800c478:	72fb      	strb	r3, [r7, #11]
          break;
 800c47a:	e03b      	b.n	800c4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c482:	695b      	ldr	r3, [r3, #20]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00b      	beq.n	800c4a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c48e:	695b      	ldr	r3, [r3, #20]
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	7c12      	ldrb	r2, [r2, #16]
 800c494:	f107 0108 	add.w	r1, r7, #8
 800c498:	4610      	mov	r0, r2
 800c49a:	4798      	blx	r3
 800c49c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c49e:	e029      	b.n	800c4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 fa63 	bl	800c96e <USBD_CtlError>
            err++;
 800c4a8:	7afb      	ldrb	r3, [r7, #11]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c4ae:	e021      	b.n	800c4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4b6:	699b      	ldr	r3, [r3, #24]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00b      	beq.n	800c4d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4c2:	699b      	ldr	r3, [r3, #24]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	7c12      	ldrb	r2, [r2, #16]
 800c4c8:	f107 0108 	add.w	r1, r7, #8
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	4798      	blx	r3
 800c4d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4d2:	e00f      	b.n	800c4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4d4:	6839      	ldr	r1, [r7, #0]
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fa49 	bl	800c96e <USBD_CtlError>
            err++;
 800c4dc:	7afb      	ldrb	r3, [r7, #11]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4e2:	e007      	b.n	800c4f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c4e4:	6839      	ldr	r1, [r7, #0]
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 fa41 	bl	800c96e <USBD_CtlError>
          err++;
 800c4ec:	7afb      	ldrb	r3, [r7, #11]
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c4f2:	bf00      	nop
      }
      break;
 800c4f4:	e037      	b.n	800c566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	7c1b      	ldrb	r3, [r3, #16]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d109      	bne.n	800c512 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c506:	f107 0208 	add.w	r2, r7, #8
 800c50a:	4610      	mov	r0, r2
 800c50c:	4798      	blx	r3
 800c50e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c510:	e029      	b.n	800c566 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c512:	6839      	ldr	r1, [r7, #0]
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 fa2a 	bl	800c96e <USBD_CtlError>
        err++;
 800c51a:	7afb      	ldrb	r3, [r7, #11]
 800c51c:	3301      	adds	r3, #1
 800c51e:	72fb      	strb	r3, [r7, #11]
      break;
 800c520:	e021      	b.n	800c566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	7c1b      	ldrb	r3, [r3, #16]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d10d      	bne.n	800c546 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c532:	f107 0208 	add.w	r2, r7, #8
 800c536:	4610      	mov	r0, r2
 800c538:	4798      	blx	r3
 800c53a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	3301      	adds	r3, #1
 800c540:	2207      	movs	r2, #7
 800c542:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c544:	e00f      	b.n	800c566 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c546:	6839      	ldr	r1, [r7, #0]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 fa10 	bl	800c96e <USBD_CtlError>
        err++;
 800c54e:	7afb      	ldrb	r3, [r7, #11]
 800c550:	3301      	adds	r3, #1
 800c552:	72fb      	strb	r3, [r7, #11]
      break;
 800c554:	e007      	b.n	800c566 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c556:	6839      	ldr	r1, [r7, #0]
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 fa08 	bl	800c96e <USBD_CtlError>
      err++;
 800c55e:	7afb      	ldrb	r3, [r7, #11]
 800c560:	3301      	adds	r3, #1
 800c562:	72fb      	strb	r3, [r7, #11]
      break;
 800c564:	bf00      	nop
  }

  if (err != 0U)
 800c566:	7afb      	ldrb	r3, [r7, #11]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d11e      	bne.n	800c5aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	88db      	ldrh	r3, [r3, #6]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d016      	beq.n	800c5a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c574:	893b      	ldrh	r3, [r7, #8]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00e      	beq.n	800c598 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	88da      	ldrh	r2, [r3, #6]
 800c57e:	893b      	ldrh	r3, [r7, #8]
 800c580:	4293      	cmp	r3, r2
 800c582:	bf28      	it	cs
 800c584:	4613      	movcs	r3, r2
 800c586:	b29b      	uxth	r3, r3
 800c588:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c58a:	893b      	ldrh	r3, [r7, #8]
 800c58c:	461a      	mov	r2, r3
 800c58e:	68f9      	ldr	r1, [r7, #12]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 fa5d 	bl	800ca50 <USBD_CtlSendData>
 800c596:	e009      	b.n	800c5ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c598:	6839      	ldr	r1, [r7, #0]
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 f9e7 	bl	800c96e <USBD_CtlError>
 800c5a0:	e004      	b.n	800c5ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 faae 	bl	800cb04 <USBD_CtlSendStatus>
 800c5a8:	e000      	b.n	800c5ac <USBD_GetDescriptor+0x320>
    return;
 800c5aa:	bf00      	nop
  }
}
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop

0800c5b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	889b      	ldrh	r3, [r3, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d131      	bne.n	800c62a <USBD_SetAddress+0x76>
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	88db      	ldrh	r3, [r3, #6]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d12d      	bne.n	800c62a <USBD_SetAddress+0x76>
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	885b      	ldrh	r3, [r3, #2]
 800c5d2:	2b7f      	cmp	r3, #127	; 0x7f
 800c5d4:	d829      	bhi.n	800c62a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	885b      	ldrh	r3, [r3, #2]
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	2b03      	cmp	r3, #3
 800c5ec:	d104      	bne.n	800c5f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c5ee:	6839      	ldr	r1, [r7, #0]
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 f9bc 	bl	800c96e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5f6:	e01d      	b.n	800c634 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	7bfa      	ldrb	r2, [r7, #15]
 800c5fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c600:	7bfb      	ldrb	r3, [r7, #15]
 800c602:	4619      	mov	r1, r3
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f003 fd95 	bl	8010134 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 fa7a 	bl	800cb04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c610:	7bfb      	ldrb	r3, [r7, #15]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d004      	beq.n	800c620 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2202      	movs	r2, #2
 800c61a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c61e:	e009      	b.n	800c634 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c628:	e004      	b.n	800c634 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c62a:	6839      	ldr	r1, [r7, #0]
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 f99e 	bl	800c96e <USBD_CtlError>
  }
}
 800c632:	bf00      	nop
 800c634:	bf00      	nop
 800c636:	3710      	adds	r7, #16
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c646:	2300      	movs	r3, #0
 800c648:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	885b      	ldrh	r3, [r3, #2]
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	4b4e      	ldr	r3, [pc, #312]	; (800c78c <USBD_SetConfig+0x150>)
 800c652:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c654:	4b4d      	ldr	r3, [pc, #308]	; (800c78c <USBD_SetConfig+0x150>)
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d905      	bls.n	800c668 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c65c:	6839      	ldr	r1, [r7, #0]
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 f985 	bl	800c96e <USBD_CtlError>
    return USBD_FAIL;
 800c664:	2303      	movs	r3, #3
 800c666:	e08c      	b.n	800c782 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	2b02      	cmp	r3, #2
 800c672:	d002      	beq.n	800c67a <USBD_SetConfig+0x3e>
 800c674:	2b03      	cmp	r3, #3
 800c676:	d029      	beq.n	800c6cc <USBD_SetConfig+0x90>
 800c678:	e075      	b.n	800c766 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c67a:	4b44      	ldr	r3, [pc, #272]	; (800c78c <USBD_SetConfig+0x150>)
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d020      	beq.n	800c6c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c682:	4b42      	ldr	r3, [pc, #264]	; (800c78c <USBD_SetConfig+0x150>)
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	461a      	mov	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c68c:	4b3f      	ldr	r3, [pc, #252]	; (800c78c <USBD_SetConfig+0x150>)
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	4619      	mov	r1, r3
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7fe ffbd 	bl	800b612 <USBD_SetClassConfig>
 800c698:	4603      	mov	r3, r0
 800c69a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c69c:	7bfb      	ldrb	r3, [r7, #15]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d008      	beq.n	800c6b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 f962 	bl	800c96e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2202      	movs	r2, #2
 800c6ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6b2:	e065      	b.n	800c780 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 fa25 	bl	800cb04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2203      	movs	r2, #3
 800c6be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c6c2:	e05d      	b.n	800c780 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 fa1d 	bl	800cb04 <USBD_CtlSendStatus>
      break;
 800c6ca:	e059      	b.n	800c780 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6cc:	4b2f      	ldr	r3, [pc, #188]	; (800c78c <USBD_SetConfig+0x150>)
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d112      	bne.n	800c6fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2202      	movs	r2, #2
 800c6d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c6dc:	4b2b      	ldr	r3, [pc, #172]	; (800c78c <USBD_SetConfig+0x150>)
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6e6:	4b29      	ldr	r3, [pc, #164]	; (800c78c <USBD_SetConfig+0x150>)
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f7fe ffac 	bl	800b64a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 fa06 	bl	800cb04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6f8:	e042      	b.n	800c780 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c6fa:	4b24      	ldr	r3, [pc, #144]	; (800c78c <USBD_SetConfig+0x150>)
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	461a      	mov	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	429a      	cmp	r2, r3
 800c706:	d02a      	beq.n	800c75e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	4619      	mov	r1, r3
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f7fe ff9a 	bl	800b64a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c716:	4b1d      	ldr	r3, [pc, #116]	; (800c78c <USBD_SetConfig+0x150>)
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c720:	4b1a      	ldr	r3, [pc, #104]	; (800c78c <USBD_SetConfig+0x150>)
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	4619      	mov	r1, r3
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f7fe ff73 	bl	800b612 <USBD_SetClassConfig>
 800c72c:	4603      	mov	r3, r0
 800c72e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c730:	7bfb      	ldrb	r3, [r7, #15]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d00f      	beq.n	800c756 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c736:	6839      	ldr	r1, [r7, #0]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f918 	bl	800c96e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	b2db      	uxtb	r3, r3
 800c744:	4619      	mov	r1, r3
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7fe ff7f 	bl	800b64a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2202      	movs	r2, #2
 800c750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c754:	e014      	b.n	800c780 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f9d4 	bl	800cb04 <USBD_CtlSendStatus>
      break;
 800c75c:	e010      	b.n	800c780 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f9d0 	bl	800cb04 <USBD_CtlSendStatus>
      break;
 800c764:	e00c      	b.n	800c780 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c766:	6839      	ldr	r1, [r7, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f900 	bl	800c96e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c76e:	4b07      	ldr	r3, [pc, #28]	; (800c78c <USBD_SetConfig+0x150>)
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	4619      	mov	r1, r3
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f7fe ff68 	bl	800b64a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c77a:	2303      	movs	r3, #3
 800c77c:	73fb      	strb	r3, [r7, #15]
      break;
 800c77e:	bf00      	nop
  }

  return ret;
 800c780:	7bfb      	ldrb	r3, [r7, #15]
}
 800c782:	4618      	mov	r0, r3
 800c784:	3710      	adds	r7, #16
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	2000286c 	.word	0x2000286c

0800c790 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	88db      	ldrh	r3, [r3, #6]
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d004      	beq.n	800c7ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 f8e2 	bl	800c96e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7aa:	e023      	b.n	800c7f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	2b02      	cmp	r3, #2
 800c7b6:	dc02      	bgt.n	800c7be <USBD_GetConfig+0x2e>
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	dc03      	bgt.n	800c7c4 <USBD_GetConfig+0x34>
 800c7bc:	e015      	b.n	800c7ea <USBD_GetConfig+0x5a>
 800c7be:	2b03      	cmp	r3, #3
 800c7c0:	d00b      	beq.n	800c7da <USBD_GetConfig+0x4a>
 800c7c2:	e012      	b.n	800c7ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	3308      	adds	r3, #8
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 f93c 	bl	800ca50 <USBD_CtlSendData>
        break;
 800c7d8:	e00c      	b.n	800c7f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	3304      	adds	r3, #4
 800c7de:	2201      	movs	r2, #1
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f934 	bl	800ca50 <USBD_CtlSendData>
        break;
 800c7e8:	e004      	b.n	800c7f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c7ea:	6839      	ldr	r1, [r7, #0]
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 f8be 	bl	800c96e <USBD_CtlError>
        break;
 800c7f2:	bf00      	nop
}
 800c7f4:	bf00      	nop
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	3b01      	subs	r3, #1
 800c810:	2b02      	cmp	r3, #2
 800c812:	d81e      	bhi.n	800c852 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	88db      	ldrh	r3, [r3, #6]
 800c818:	2b02      	cmp	r3, #2
 800c81a:	d004      	beq.n	800c826 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f8a5 	bl	800c96e <USBD_CtlError>
        break;
 800c824:	e01a      	b.n	800c85c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2201      	movs	r2, #1
 800c82a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c832:	2b00      	cmp	r3, #0
 800c834:	d005      	beq.n	800c842 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	f043 0202 	orr.w	r2, r3, #2
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	330c      	adds	r3, #12
 800c846:	2202      	movs	r2, #2
 800c848:	4619      	mov	r1, r3
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f900 	bl	800ca50 <USBD_CtlSendData>
      break;
 800c850:	e004      	b.n	800c85c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f88a 	bl	800c96e <USBD_CtlError>
      break;
 800c85a:	bf00      	nop
  }
}
 800c85c:	bf00      	nop
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	885b      	ldrh	r3, [r3, #2]
 800c872:	2b01      	cmp	r3, #1
 800c874:	d107      	bne.n	800c886 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f940 	bl	800cb04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c884:	e013      	b.n	800c8ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	885b      	ldrh	r3, [r3, #2]
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	d10b      	bne.n	800c8a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	889b      	ldrh	r3, [r3, #4]
 800c892:	0a1b      	lsrs	r3, r3, #8
 800c894:	b29b      	uxth	r3, r3
 800c896:	b2da      	uxtb	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 f930 	bl	800cb04 <USBD_CtlSendStatus>
}
 800c8a4:	e003      	b.n	800c8ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8a6:	6839      	ldr	r1, [r7, #0]
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f860 	bl	800c96e <USBD_CtlError>
}
 800c8ae:	bf00      	nop
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b082      	sub	sp, #8
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
 800c8be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d80b      	bhi.n	800c8e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	885b      	ldrh	r3, [r3, #2]
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d10c      	bne.n	800c8f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 f910 	bl	800cb04 <USBD_CtlSendStatus>
      }
      break;
 800c8e4:	e004      	b.n	800c8f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c8e6:	6839      	ldr	r1, [r7, #0]
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 f840 	bl	800c96e <USBD_CtlError>
      break;
 800c8ee:	e000      	b.n	800c8f2 <USBD_ClrFeature+0x3c>
      break;
 800c8f0:	bf00      	nop
  }
}
 800c8f2:	bf00      	nop
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	781a      	ldrb	r2, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	3301      	adds	r3, #1
 800c914:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	781a      	ldrb	r2, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	3301      	adds	r3, #1
 800c922:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f7ff fa17 	bl	800bd58 <SWAPBYTE>
 800c92a:	4603      	mov	r3, r0
 800c92c:	461a      	mov	r2, r3
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	3301      	adds	r3, #1
 800c936:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	3301      	adds	r3, #1
 800c93c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f7ff fa0a 	bl	800bd58 <SWAPBYTE>
 800c944:	4603      	mov	r3, r0
 800c946:	461a      	mov	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	3301      	adds	r3, #1
 800c950:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	3301      	adds	r3, #1
 800c956:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f7ff f9fd 	bl	800bd58 <SWAPBYTE>
 800c95e:	4603      	mov	r3, r0
 800c960:	461a      	mov	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	80da      	strh	r2, [r3, #6]
}
 800c966:	bf00      	nop
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b082      	sub	sp, #8
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
 800c976:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c978:	2180      	movs	r1, #128	; 0x80
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f003 fb70 	bl	8010060 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c980:	2100      	movs	r1, #0
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f003 fb6c 	bl	8010060 <USBD_LL_StallEP>
}
 800c988:	bf00      	nop
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c99c:	2300      	movs	r3, #0
 800c99e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d036      	beq.n	800ca14 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9aa:	6938      	ldr	r0, [r7, #16]
 800c9ac:	f000 f836 	bl	800ca1c <USBD_GetLen>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	005b      	lsls	r3, r3, #1
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9be:	7dfb      	ldrb	r3, [r7, #23]
 800c9c0:	68ba      	ldr	r2, [r7, #8]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	687a      	ldr	r2, [r7, #4]
 800c9c6:	7812      	ldrb	r2, [r2, #0]
 800c9c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9ca:	7dfb      	ldrb	r3, [r7, #23]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c9d0:	7dfb      	ldrb	r3, [r7, #23]
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	2203      	movs	r2, #3
 800c9d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9da:	7dfb      	ldrb	r3, [r7, #23]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c9e0:	e013      	b.n	800ca0a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c9e2:	7dfb      	ldrb	r3, [r7, #23]
 800c9e4:	68ba      	ldr	r2, [r7, #8]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	7812      	ldrb	r2, [r2, #0]
 800c9ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	613b      	str	r3, [r7, #16]
    idx++;
 800c9f4:	7dfb      	ldrb	r3, [r7, #23]
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c9fa:	7dfb      	ldrb	r3, [r7, #23]
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	4413      	add	r3, r2
 800ca00:	2200      	movs	r2, #0
 800ca02:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
 800ca06:	3301      	adds	r3, #1
 800ca08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1e7      	bne.n	800c9e2 <USBD_GetString+0x52>
 800ca12:	e000      	b.n	800ca16 <USBD_GetString+0x86>
    return;
 800ca14:	bf00      	nop
  }
}
 800ca16:	3718      	adds	r7, #24
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca24:	2300      	movs	r3, #0
 800ca26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca2c:	e005      	b.n	800ca3a <USBD_GetLen+0x1e>
  {
    len++;
 800ca2e:	7bfb      	ldrb	r3, [r7, #15]
 800ca30:	3301      	adds	r3, #1
 800ca32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	3301      	adds	r3, #1
 800ca38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1f5      	bne.n	800ca2e <USBD_GetLen+0x12>
  }

  return len;
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3714      	adds	r7, #20
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2202      	movs	r2, #2
 800ca60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	2100      	movs	r1, #0
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f003 fb7b 	bl	8010172 <USBD_LL_Transmit>

  return USBD_OK;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b084      	sub	sp, #16
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	60f8      	str	r0, [r7, #12]
 800ca8e:	60b9      	str	r1, [r7, #8]
 800ca90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	68ba      	ldr	r2, [r7, #8]
 800ca96:	2100      	movs	r1, #0
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	f003 fb6a 	bl	8010172 <USBD_LL_Transmit>

  return USBD_OK;
 800ca9e:	2300      	movs	r3, #0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3710      	adds	r7, #16
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2203      	movs	r2, #3
 800cab8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	2100      	movs	r1, #0
 800cad2:	68f8      	ldr	r0, [r7, #12]
 800cad4:	f003 fb6e 	bl	80101b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cad8:	2300      	movs	r3, #0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b084      	sub	sp, #16
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	60f8      	str	r0, [r7, #12]
 800caea:	60b9      	str	r1, [r7, #8]
 800caec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	2100      	movs	r1, #0
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	f003 fb5d 	bl	80101b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2204      	movs	r2, #4
 800cb10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb14:	2300      	movs	r3, #0
 800cb16:	2200      	movs	r2, #0
 800cb18:	2100      	movs	r1, #0
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f003 fb29 	bl	8010172 <USBD_LL_Transmit>

  return USBD_OK;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b082      	sub	sp, #8
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2205      	movs	r2, #5
 800cb36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	2100      	movs	r1, #0
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f003 fb37 	bl	80101b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	4603      	mov	r3, r0
 800cb58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cb5a:	79fb      	ldrb	r3, [r7, #7]
 800cb5c:	4a08      	ldr	r2, [pc, #32]	; (800cb80 <disk_status+0x30>)
 800cb5e:	009b      	lsls	r3, r3, #2
 800cb60:	4413      	add	r3, r2
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	79fa      	ldrb	r2, [r7, #7]
 800cb68:	4905      	ldr	r1, [pc, #20]	; (800cb80 <disk_status+0x30>)
 800cb6a:	440a      	add	r2, r1
 800cb6c:	7a12      	ldrb	r2, [r2, #8]
 800cb6e:	4610      	mov	r0, r2
 800cb70:	4798      	blx	r3
 800cb72:	4603      	mov	r3, r0
 800cb74:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3710      	adds	r7, #16
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	20002a98 	.word	0x20002a98

0800cb84 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cb92:	79fb      	ldrb	r3, [r7, #7]
 800cb94:	4a0d      	ldr	r2, [pc, #52]	; (800cbcc <disk_initialize+0x48>)
 800cb96:	5cd3      	ldrb	r3, [r2, r3]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d111      	bne.n	800cbc0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cb9c:	79fb      	ldrb	r3, [r7, #7]
 800cb9e:	4a0b      	ldr	r2, [pc, #44]	; (800cbcc <disk_initialize+0x48>)
 800cba0:	2101      	movs	r1, #1
 800cba2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cba4:	79fb      	ldrb	r3, [r7, #7]
 800cba6:	4a09      	ldr	r2, [pc, #36]	; (800cbcc <disk_initialize+0x48>)
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	4413      	add	r3, r2
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	79fa      	ldrb	r2, [r7, #7]
 800cbb2:	4906      	ldr	r1, [pc, #24]	; (800cbcc <disk_initialize+0x48>)
 800cbb4:	440a      	add	r2, r1
 800cbb6:	7a12      	ldrb	r2, [r2, #8]
 800cbb8:	4610      	mov	r0, r2
 800cbba:	4798      	blx	r3
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	20002a98 	.word	0x20002a98

0800cbd0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cbd0:	b590      	push	{r4, r7, lr}
 800cbd2:	b087      	sub	sp, #28
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	60b9      	str	r1, [r7, #8]
 800cbd8:	607a      	str	r2, [r7, #4]
 800cbda:	603b      	str	r3, [r7, #0]
 800cbdc:	4603      	mov	r3, r0
 800cbde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cbe0:	7bfb      	ldrb	r3, [r7, #15]
 800cbe2:	4a0a      	ldr	r2, [pc, #40]	; (800cc0c <disk_read+0x3c>)
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	689c      	ldr	r4, [r3, #8]
 800cbec:	7bfb      	ldrb	r3, [r7, #15]
 800cbee:	4a07      	ldr	r2, [pc, #28]	; (800cc0c <disk_read+0x3c>)
 800cbf0:	4413      	add	r3, r2
 800cbf2:	7a18      	ldrb	r0, [r3, #8]
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	68b9      	ldr	r1, [r7, #8]
 800cbfa:	47a0      	blx	r4
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc00:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	371c      	adds	r7, #28
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd90      	pop	{r4, r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20002a98 	.word	0x20002a98

0800cc10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cc10:	b590      	push	{r4, r7, lr}
 800cc12:	b087      	sub	sp, #28
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60b9      	str	r1, [r7, #8]
 800cc18:	607a      	str	r2, [r7, #4]
 800cc1a:	603b      	str	r3, [r7, #0]
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
 800cc22:	4a0a      	ldr	r2, [pc, #40]	; (800cc4c <disk_write+0x3c>)
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	4413      	add	r3, r2
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	68dc      	ldr	r4, [r3, #12]
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
 800cc2e:	4a07      	ldr	r2, [pc, #28]	; (800cc4c <disk_write+0x3c>)
 800cc30:	4413      	add	r3, r2
 800cc32:	7a18      	ldrb	r0, [r3, #8]
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	68b9      	ldr	r1, [r7, #8]
 800cc3a:	47a0      	blx	r4
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc40:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	371c      	adds	r7, #28
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd90      	pop	{r4, r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	20002a98 	.word	0x20002a98

0800cc50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	4603      	mov	r3, r0
 800cc58:	603a      	str	r2, [r7, #0]
 800cc5a:	71fb      	strb	r3, [r7, #7]
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cc60:	79fb      	ldrb	r3, [r7, #7]
 800cc62:	4a09      	ldr	r2, [pc, #36]	; (800cc88 <disk_ioctl+0x38>)
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	691b      	ldr	r3, [r3, #16]
 800cc6c:	79fa      	ldrb	r2, [r7, #7]
 800cc6e:	4906      	ldr	r1, [pc, #24]	; (800cc88 <disk_ioctl+0x38>)
 800cc70:	440a      	add	r2, r1
 800cc72:	7a10      	ldrb	r0, [r2, #8]
 800cc74:	79b9      	ldrb	r1, [r7, #6]
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	4798      	blx	r3
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	73fb      	strb	r3, [r7, #15]
  return res;
 800cc7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3710      	adds	r7, #16
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	20002a98 	.word	0x20002a98

0800cc8c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	3301      	adds	r3, #1
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cc9c:	89fb      	ldrh	r3, [r7, #14]
 800cc9e:	021b      	lsls	r3, r3, #8
 800cca0:	b21a      	sxth	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	b21b      	sxth	r3, r3
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	b21b      	sxth	r3, r3
 800ccac:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ccae:	89fb      	ldrh	r3, [r7, #14]
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3714      	adds	r7, #20
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	3303      	adds	r3, #3
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	021b      	lsls	r3, r3, #8
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	3202      	adds	r2, #2
 800ccd4:	7812      	ldrb	r2, [r2, #0]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	021b      	lsls	r3, r3, #8
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	3201      	adds	r2, #1
 800cce2:	7812      	ldrb	r2, [r2, #0]
 800cce4:	4313      	orrs	r3, r2
 800cce6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	021b      	lsls	r3, r3, #8
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	7812      	ldrb	r2, [r2, #0]
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	60fb      	str	r3, [r7, #12]
	return rv;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3714      	adds	r7, #20
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr

0800cd02 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cd02:	b480      	push	{r7}
 800cd04:	b083      	sub	sp, #12
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	1c5a      	adds	r2, r3, #1
 800cd12:	607a      	str	r2, [r7, #4]
 800cd14:	887a      	ldrh	r2, [r7, #2]
 800cd16:	b2d2      	uxtb	r2, r2
 800cd18:	701a      	strb	r2, [r3, #0]
 800cd1a:	887b      	ldrh	r3, [r7, #2]
 800cd1c:	0a1b      	lsrs	r3, r3, #8
 800cd1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	1c5a      	adds	r2, r3, #1
 800cd24:	607a      	str	r2, [r7, #4]
 800cd26:	887a      	ldrh	r2, [r7, #2]
 800cd28:	b2d2      	uxtb	r2, r2
 800cd2a:	701a      	strb	r2, [r3, #0]
}
 800cd2c:	bf00      	nop
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	1c5a      	adds	r2, r3, #1
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	683a      	ldr	r2, [r7, #0]
 800cd4a:	b2d2      	uxtb	r2, r2
 800cd4c:	701a      	strb	r2, [r3, #0]
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	0a1b      	lsrs	r3, r3, #8
 800cd52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	1c5a      	adds	r2, r3, #1
 800cd58:	607a      	str	r2, [r7, #4]
 800cd5a:	683a      	ldr	r2, [r7, #0]
 800cd5c:	b2d2      	uxtb	r2, r2
 800cd5e:	701a      	strb	r2, [r3, #0]
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	0a1b      	lsrs	r3, r3, #8
 800cd64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	1c5a      	adds	r2, r3, #1
 800cd6a:	607a      	str	r2, [r7, #4]
 800cd6c:	683a      	ldr	r2, [r7, #0]
 800cd6e:	b2d2      	uxtb	r2, r2
 800cd70:	701a      	strb	r2, [r3, #0]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	0a1b      	lsrs	r3, r3, #8
 800cd76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	1c5a      	adds	r2, r3, #1
 800cd7c:	607a      	str	r2, [r7, #4]
 800cd7e:	683a      	ldr	r2, [r7, #0]
 800cd80:	b2d2      	uxtb	r2, r2
 800cd82:	701a      	strb	r2, [r3, #0]
}
 800cd84:	bf00      	nop
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cd90:	b480      	push	{r7}
 800cd92:	b087      	sub	sp, #28
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00d      	beq.n	800cdc6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cdaa:	693a      	ldr	r2, [r7, #16]
 800cdac:	1c53      	adds	r3, r2, #1
 800cdae:	613b      	str	r3, [r7, #16]
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	1c59      	adds	r1, r3, #1
 800cdb4:	6179      	str	r1, [r7, #20]
 800cdb6:	7812      	ldrb	r2, [r2, #0]
 800cdb8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	607b      	str	r3, [r7, #4]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d1f1      	bne.n	800cdaa <mem_cpy+0x1a>
	}
}
 800cdc6:	bf00      	nop
 800cdc8:	371c      	adds	r7, #28
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr

0800cdd2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cdd2:	b480      	push	{r7}
 800cdd4:	b087      	sub	sp, #28
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	60f8      	str	r0, [r7, #12]
 800cdda:	60b9      	str	r1, [r7, #8]
 800cddc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	1c5a      	adds	r2, r3, #1
 800cde6:	617a      	str	r2, [r7, #20]
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	b2d2      	uxtb	r2, r2
 800cdec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	607b      	str	r3, [r7, #4]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d1f3      	bne.n	800cde2 <mem_set+0x10>
}
 800cdfa:	bf00      	nop
 800cdfc:	bf00      	nop
 800cdfe:	371c      	adds	r7, #28
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ce08:	b480      	push	{r7}
 800ce0a:	b089      	sub	sp, #36	; 0x24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	61fb      	str	r3, [r7, #28]
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ce20:	69fb      	ldr	r3, [r7, #28]
 800ce22:	1c5a      	adds	r2, r3, #1
 800ce24:	61fa      	str	r2, [r7, #28]
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	4619      	mov	r1, r3
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	1c5a      	adds	r2, r3, #1
 800ce2e:	61ba      	str	r2, [r7, #24]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	1acb      	subs	r3, r1, r3
 800ce34:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	607b      	str	r3, [r7, #4]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d002      	beq.n	800ce48 <mem_cmp+0x40>
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d0eb      	beq.n	800ce20 <mem_cmp+0x18>

	return r;
 800ce48:	697b      	ldr	r3, [r7, #20]
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3724      	adds	r7, #36	; 0x24
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr

0800ce56 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ce56:	b480      	push	{r7}
 800ce58:	b083      	sub	sp, #12
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ce60:	e002      	b.n	800ce68 <chk_chr+0x12>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	3301      	adds	r3, #1
 800ce66:	607b      	str	r3, [r7, #4]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d005      	beq.n	800ce7c <chk_chr+0x26>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	461a      	mov	r2, r3
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d1f2      	bne.n	800ce62 <chk_chr+0xc>
	return *str;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	781b      	ldrb	r3, [r3, #0]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b085      	sub	sp, #20
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ce96:	2300      	movs	r3, #0
 800ce98:	60bb      	str	r3, [r7, #8]
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	60fb      	str	r3, [r7, #12]
 800ce9e:	e029      	b.n	800cef4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cea0:	4a27      	ldr	r2, [pc, #156]	; (800cf40 <chk_lock+0xb4>)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	011b      	lsls	r3, r3, #4
 800cea6:	4413      	add	r3, r2
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d01d      	beq.n	800ceea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ceae:	4a24      	ldr	r2, [pc, #144]	; (800cf40 <chk_lock+0xb4>)
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	011b      	lsls	r3, r3, #4
 800ceb4:	4413      	add	r3, r2
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d116      	bne.n	800ceee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cec0:	4a1f      	ldr	r2, [pc, #124]	; (800cf40 <chk_lock+0xb4>)
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	011b      	lsls	r3, r3, #4
 800cec6:	4413      	add	r3, r2
 800cec8:	3304      	adds	r3, #4
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d10c      	bne.n	800ceee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ced4:	4a1a      	ldr	r2, [pc, #104]	; (800cf40 <chk_lock+0xb4>)
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	011b      	lsls	r3, r3, #4
 800ceda:	4413      	add	r3, r2
 800cedc:	3308      	adds	r3, #8
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d102      	bne.n	800ceee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cee8:	e007      	b.n	800cefa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ceea:	2301      	movs	r3, #1
 800ceec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	3301      	adds	r3, #1
 800cef2:	60fb      	str	r3, [r7, #12]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d9d2      	bls.n	800cea0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	d109      	bne.n	800cf14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d102      	bne.n	800cf0c <chk_lock+0x80>
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	d101      	bne.n	800cf10 <chk_lock+0x84>
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	e010      	b.n	800cf32 <chk_lock+0xa6>
 800cf10:	2312      	movs	r3, #18
 800cf12:	e00e      	b.n	800cf32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d108      	bne.n	800cf2c <chk_lock+0xa0>
 800cf1a:	4a09      	ldr	r2, [pc, #36]	; (800cf40 <chk_lock+0xb4>)
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	011b      	lsls	r3, r3, #4
 800cf20:	4413      	add	r3, r2
 800cf22:	330c      	adds	r3, #12
 800cf24:	881b      	ldrh	r3, [r3, #0]
 800cf26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf2a:	d101      	bne.n	800cf30 <chk_lock+0xa4>
 800cf2c:	2310      	movs	r3, #16
 800cf2e:	e000      	b.n	800cf32 <chk_lock+0xa6>
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3714      	adds	r7, #20
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop
 800cf40:	20002878 	.word	0x20002878

0800cf44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	607b      	str	r3, [r7, #4]
 800cf4e:	e002      	b.n	800cf56 <enq_lock+0x12>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	3301      	adds	r3, #1
 800cf54:	607b      	str	r3, [r7, #4]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d806      	bhi.n	800cf6a <enq_lock+0x26>
 800cf5c:	4a09      	ldr	r2, [pc, #36]	; (800cf84 <enq_lock+0x40>)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	011b      	lsls	r3, r3, #4
 800cf62:	4413      	add	r3, r2
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d1f2      	bne.n	800cf50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	bf14      	ite	ne
 800cf70:	2301      	movne	r3, #1
 800cf72:	2300      	moveq	r3, #0
 800cf74:	b2db      	uxtb	r3, r3
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	370c      	adds	r7, #12
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	20002878 	.word	0x20002878

0800cf88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b085      	sub	sp, #20
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cf92:	2300      	movs	r3, #0
 800cf94:	60fb      	str	r3, [r7, #12]
 800cf96:	e01f      	b.n	800cfd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cf98:	4a41      	ldr	r2, [pc, #260]	; (800d0a0 <inc_lock+0x118>)
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	011b      	lsls	r3, r3, #4
 800cf9e:	4413      	add	r3, r2
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d113      	bne.n	800cfd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cfaa:	4a3d      	ldr	r2, [pc, #244]	; (800d0a0 <inc_lock+0x118>)
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	011b      	lsls	r3, r3, #4
 800cfb0:	4413      	add	r3, r2
 800cfb2:	3304      	adds	r3, #4
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d109      	bne.n	800cfd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cfbe:	4a38      	ldr	r2, [pc, #224]	; (800d0a0 <inc_lock+0x118>)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	011b      	lsls	r3, r3, #4
 800cfc4:	4413      	add	r3, r2
 800cfc6:	3308      	adds	r3, #8
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d006      	beq.n	800cfe0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	60fb      	str	r3, [r7, #12]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d9dc      	bls.n	800cf98 <inc_lock+0x10>
 800cfde:	e000      	b.n	800cfe2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cfe0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d132      	bne.n	800d04e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	60fb      	str	r3, [r7, #12]
 800cfec:	e002      	b.n	800cff4 <inc_lock+0x6c>
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	3301      	adds	r3, #1
 800cff2:	60fb      	str	r3, [r7, #12]
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d806      	bhi.n	800d008 <inc_lock+0x80>
 800cffa:	4a29      	ldr	r2, [pc, #164]	; (800d0a0 <inc_lock+0x118>)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	011b      	lsls	r3, r3, #4
 800d000:	4413      	add	r3, r2
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d1f2      	bne.n	800cfee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2b02      	cmp	r3, #2
 800d00c:	d101      	bne.n	800d012 <inc_lock+0x8a>
 800d00e:	2300      	movs	r3, #0
 800d010:	e040      	b.n	800d094 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	4922      	ldr	r1, [pc, #136]	; (800d0a0 <inc_lock+0x118>)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	011b      	lsls	r3, r3, #4
 800d01c:	440b      	add	r3, r1
 800d01e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	689a      	ldr	r2, [r3, #8]
 800d024:	491e      	ldr	r1, [pc, #120]	; (800d0a0 <inc_lock+0x118>)
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	011b      	lsls	r3, r3, #4
 800d02a:	440b      	add	r3, r1
 800d02c:	3304      	adds	r3, #4
 800d02e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	695a      	ldr	r2, [r3, #20]
 800d034:	491a      	ldr	r1, [pc, #104]	; (800d0a0 <inc_lock+0x118>)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	011b      	lsls	r3, r3, #4
 800d03a:	440b      	add	r3, r1
 800d03c:	3308      	adds	r3, #8
 800d03e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d040:	4a17      	ldr	r2, [pc, #92]	; (800d0a0 <inc_lock+0x118>)
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	011b      	lsls	r3, r3, #4
 800d046:	4413      	add	r3, r2
 800d048:	330c      	adds	r3, #12
 800d04a:	2200      	movs	r2, #0
 800d04c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d009      	beq.n	800d068 <inc_lock+0xe0>
 800d054:	4a12      	ldr	r2, [pc, #72]	; (800d0a0 <inc_lock+0x118>)
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	011b      	lsls	r3, r3, #4
 800d05a:	4413      	add	r3, r2
 800d05c:	330c      	adds	r3, #12
 800d05e:	881b      	ldrh	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d001      	beq.n	800d068 <inc_lock+0xe0>
 800d064:	2300      	movs	r3, #0
 800d066:	e015      	b.n	800d094 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d108      	bne.n	800d080 <inc_lock+0xf8>
 800d06e:	4a0c      	ldr	r2, [pc, #48]	; (800d0a0 <inc_lock+0x118>)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	011b      	lsls	r3, r3, #4
 800d074:	4413      	add	r3, r2
 800d076:	330c      	adds	r3, #12
 800d078:	881b      	ldrh	r3, [r3, #0]
 800d07a:	3301      	adds	r3, #1
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	e001      	b.n	800d084 <inc_lock+0xfc>
 800d080:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d084:	4906      	ldr	r1, [pc, #24]	; (800d0a0 <inc_lock+0x118>)
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	011b      	lsls	r3, r3, #4
 800d08a:	440b      	add	r3, r1
 800d08c:	330c      	adds	r3, #12
 800d08e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	3301      	adds	r3, #1
}
 800d094:	4618      	mov	r0, r3
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr
 800d0a0:	20002878 	.word	0x20002878

0800d0a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	607b      	str	r3, [r7, #4]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d825      	bhi.n	800d104 <dec_lock+0x60>
		n = Files[i].ctr;
 800d0b8:	4a17      	ldr	r2, [pc, #92]	; (800d118 <dec_lock+0x74>)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	011b      	lsls	r3, r3, #4
 800d0be:	4413      	add	r3, r2
 800d0c0:	330c      	adds	r3, #12
 800d0c2:	881b      	ldrh	r3, [r3, #0]
 800d0c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d0c6:	89fb      	ldrh	r3, [r7, #14]
 800d0c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0cc:	d101      	bne.n	800d0d2 <dec_lock+0x2e>
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d0d2:	89fb      	ldrh	r3, [r7, #14]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d002      	beq.n	800d0de <dec_lock+0x3a>
 800d0d8:	89fb      	ldrh	r3, [r7, #14]
 800d0da:	3b01      	subs	r3, #1
 800d0dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d0de:	4a0e      	ldr	r2, [pc, #56]	; (800d118 <dec_lock+0x74>)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	011b      	lsls	r3, r3, #4
 800d0e4:	4413      	add	r3, r2
 800d0e6:	330c      	adds	r3, #12
 800d0e8:	89fa      	ldrh	r2, [r7, #14]
 800d0ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d0ec:	89fb      	ldrh	r3, [r7, #14]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d105      	bne.n	800d0fe <dec_lock+0x5a>
 800d0f2:	4a09      	ldr	r2, [pc, #36]	; (800d118 <dec_lock+0x74>)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	011b      	lsls	r3, r3, #4
 800d0f8:	4413      	add	r3, r2
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d0fe:	2300      	movs	r3, #0
 800d100:	737b      	strb	r3, [r7, #13]
 800d102:	e001      	b.n	800d108 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d104:	2302      	movs	r3, #2
 800d106:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d108:	7b7b      	ldrb	r3, [r7, #13]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3714      	adds	r7, #20
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	20002878 	.word	0x20002878

0800d11c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d124:	2300      	movs	r3, #0
 800d126:	60fb      	str	r3, [r7, #12]
 800d128:	e010      	b.n	800d14c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d12a:	4a0d      	ldr	r2, [pc, #52]	; (800d160 <clear_lock+0x44>)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	011b      	lsls	r3, r3, #4
 800d130:	4413      	add	r3, r2
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	429a      	cmp	r2, r3
 800d138:	d105      	bne.n	800d146 <clear_lock+0x2a>
 800d13a:	4a09      	ldr	r2, [pc, #36]	; (800d160 <clear_lock+0x44>)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	011b      	lsls	r3, r3, #4
 800d140:	4413      	add	r3, r2
 800d142:	2200      	movs	r2, #0
 800d144:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	3301      	adds	r3, #1
 800d14a:	60fb      	str	r3, [r7, #12]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d9eb      	bls.n	800d12a <clear_lock+0xe>
	}
}
 800d152:	bf00      	nop
 800d154:	bf00      	nop
 800d156:	3714      	adds	r7, #20
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr
 800d160:	20002878 	.word	0x20002878

0800d164 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b086      	sub	sp, #24
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	78db      	ldrb	r3, [r3, #3]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d034      	beq.n	800d1e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d17c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	7858      	ldrb	r0, [r3, #1]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d188:	2301      	movs	r3, #1
 800d18a:	697a      	ldr	r2, [r7, #20]
 800d18c:	f7ff fd40 	bl	800cc10 <disk_write>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d002      	beq.n	800d19c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d196:	2301      	movs	r3, #1
 800d198:	73fb      	strb	r3, [r7, #15]
 800d19a:	e022      	b.n	800d1e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a6:	697a      	ldr	r2, [r7, #20]
 800d1a8:	1ad2      	subs	r2, r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	69db      	ldr	r3, [r3, #28]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d217      	bcs.n	800d1e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	789b      	ldrb	r3, [r3, #2]
 800d1b6:	613b      	str	r3, [r7, #16]
 800d1b8:	e010      	b.n	800d1dc <sync_window+0x78>
					wsect += fs->fsize;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	69db      	ldr	r3, [r3, #28]
 800d1be:	697a      	ldr	r2, [r7, #20]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	7858      	ldrb	r0, [r3, #1]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	697a      	ldr	r2, [r7, #20]
 800d1d2:	f7ff fd1d 	bl	800cc10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	613b      	str	r3, [r7, #16]
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d8eb      	bhi.n	800d1ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3718      	adds	r7, #24
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1fe:	683a      	ldr	r2, [r7, #0]
 800d200:	429a      	cmp	r2, r3
 800d202:	d01b      	beq.n	800d23c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f7ff ffad 	bl	800d164 <sync_window>
 800d20a:	4603      	mov	r3, r0
 800d20c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d20e:	7bfb      	ldrb	r3, [r7, #15]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d113      	bne.n	800d23c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	7858      	ldrb	r0, [r3, #1]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d21e:	2301      	movs	r3, #1
 800d220:	683a      	ldr	r2, [r7, #0]
 800d222:	f7ff fcd5 	bl	800cbd0 <disk_read>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d004      	beq.n	800d236 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d22c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d230:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d232:	2301      	movs	r3, #1
 800d234:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	683a      	ldr	r2, [r7, #0]
 800d23a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
	...

0800d248 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f7ff ff87 	bl	800d164 <sync_window>
 800d256:	4603      	mov	r3, r0
 800d258:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d25a:	7bfb      	ldrb	r3, [r7, #15]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d158      	bne.n	800d312 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	2b03      	cmp	r3, #3
 800d266:	d148      	bne.n	800d2fa <sync_fs+0xb2>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	791b      	ldrb	r3, [r3, #4]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d144      	bne.n	800d2fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	3334      	adds	r3, #52	; 0x34
 800d274:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d278:	2100      	movs	r1, #0
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7ff fda9 	bl	800cdd2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	3334      	adds	r3, #52	; 0x34
 800d284:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d288:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7ff fd38 	bl	800cd02 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	3334      	adds	r3, #52	; 0x34
 800d296:	4921      	ldr	r1, [pc, #132]	; (800d31c <sync_fs+0xd4>)
 800d298:	4618      	mov	r0, r3
 800d29a:	f7ff fd4d 	bl	800cd38 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	3334      	adds	r3, #52	; 0x34
 800d2a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d2a6:	491e      	ldr	r1, [pc, #120]	; (800d320 <sync_fs+0xd8>)
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7ff fd45 	bl	800cd38 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	3334      	adds	r3, #52	; 0x34
 800d2b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	695b      	ldr	r3, [r3, #20]
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	4610      	mov	r0, r2
 800d2be:	f7ff fd3b 	bl	800cd38 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	3334      	adds	r3, #52	; 0x34
 800d2c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	691b      	ldr	r3, [r3, #16]
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	f7ff fd31 	bl	800cd38 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6a1b      	ldr	r3, [r3, #32]
 800d2da:	1c5a      	adds	r2, r3, #1
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	7858      	ldrb	r0, [r3, #1]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	f7ff fc8e 	bl	800cc10 <disk_write>
			fs->fsi_flag = 0;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	785b      	ldrb	r3, [r3, #1]
 800d2fe:	2200      	movs	r2, #0
 800d300:	2100      	movs	r1, #0
 800d302:	4618      	mov	r0, r3
 800d304:	f7ff fca4 	bl	800cc50 <disk_ioctl>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <sync_fs+0xca>
 800d30e:	2301      	movs	r3, #1
 800d310:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d312:	7bfb      	ldrb	r3, [r7, #15]
}
 800d314:	4618      	mov	r0, r3
 800d316:	3710      	adds	r7, #16
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	41615252 	.word	0x41615252
 800d320:	61417272 	.word	0x61417272

0800d324 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	3b02      	subs	r3, #2
 800d332:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	699b      	ldr	r3, [r3, #24]
 800d338:	3b02      	subs	r3, #2
 800d33a:	683a      	ldr	r2, [r7, #0]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d301      	bcc.n	800d344 <clust2sect+0x20>
 800d340:	2300      	movs	r3, #0
 800d342:	e008      	b.n	800d356 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	895b      	ldrh	r3, [r3, #10]
 800d348:	461a      	mov	r2, r3
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	fb03 f202 	mul.w	r2, r3, r2
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d354:	4413      	add	r3, r2
}
 800d356:	4618      	mov	r0, r3
 800d358:	370c      	adds	r7, #12
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr

0800d362 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d362:	b580      	push	{r7, lr}
 800d364:	b086      	sub	sp, #24
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
 800d36a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d904      	bls.n	800d382 <get_fat+0x20>
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	699b      	ldr	r3, [r3, #24]
 800d37c:	683a      	ldr	r2, [r7, #0]
 800d37e:	429a      	cmp	r2, r3
 800d380:	d302      	bcc.n	800d388 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d382:	2301      	movs	r3, #1
 800d384:	617b      	str	r3, [r7, #20]
 800d386:	e08f      	b.n	800d4a8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d38c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	2b03      	cmp	r3, #3
 800d394:	d062      	beq.n	800d45c <get_fat+0xfa>
 800d396:	2b03      	cmp	r3, #3
 800d398:	dc7c      	bgt.n	800d494 <get_fat+0x132>
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d002      	beq.n	800d3a4 <get_fat+0x42>
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	d042      	beq.n	800d428 <get_fat+0xc6>
 800d3a2:	e077      	b.n	800d494 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	60fb      	str	r3, [r7, #12]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	085b      	lsrs	r3, r3, #1
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	4413      	add	r3, r2
 800d3b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	0a5b      	lsrs	r3, r3, #9
 800d3ba:	4413      	add	r3, r2
 800d3bc:	4619      	mov	r1, r3
 800d3be:	6938      	ldr	r0, [r7, #16]
 800d3c0:	f7ff ff14 	bl	800d1ec <move_window>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d167      	bne.n	800d49a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	1c5a      	adds	r2, r3, #1
 800d3ce:	60fa      	str	r2, [r7, #12]
 800d3d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3d4:	693a      	ldr	r2, [r7, #16]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	0a5b      	lsrs	r3, r3, #9
 800d3e6:	4413      	add	r3, r2
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	6938      	ldr	r0, [r7, #16]
 800d3ec:	f7ff fefe 	bl	800d1ec <move_window>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d153      	bne.n	800d49e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3fc:	693a      	ldr	r2, [r7, #16]
 800d3fe:	4413      	add	r3, r2
 800d400:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d404:	021b      	lsls	r3, r3, #8
 800d406:	461a      	mov	r2, r3
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	4313      	orrs	r3, r2
 800d40c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	f003 0301 	and.w	r3, r3, #1
 800d414:	2b00      	cmp	r3, #0
 800d416:	d002      	beq.n	800d41e <get_fat+0xbc>
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	091b      	lsrs	r3, r3, #4
 800d41c:	e002      	b.n	800d424 <get_fat+0xc2>
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d424:	617b      	str	r3, [r7, #20]
			break;
 800d426:	e03f      	b.n	800d4a8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	0a1b      	lsrs	r3, r3, #8
 800d430:	4413      	add	r3, r2
 800d432:	4619      	mov	r1, r3
 800d434:	6938      	ldr	r0, [r7, #16]
 800d436:	f7ff fed9 	bl	800d1ec <move_window>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d130      	bne.n	800d4a2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	005b      	lsls	r3, r3, #1
 800d44a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d44e:	4413      	add	r3, r2
 800d450:	4618      	mov	r0, r3
 800d452:	f7ff fc1b 	bl	800cc8c <ld_word>
 800d456:	4603      	mov	r3, r0
 800d458:	617b      	str	r3, [r7, #20]
			break;
 800d45a:	e025      	b.n	800d4a8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	09db      	lsrs	r3, r3, #7
 800d464:	4413      	add	r3, r2
 800d466:	4619      	mov	r1, r3
 800d468:	6938      	ldr	r0, [r7, #16]
 800d46a:	f7ff febf 	bl	800d1ec <move_window>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d118      	bne.n	800d4a6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d482:	4413      	add	r3, r2
 800d484:	4618      	mov	r0, r3
 800d486:	f7ff fc19 	bl	800ccbc <ld_dword>
 800d48a:	4603      	mov	r3, r0
 800d48c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d490:	617b      	str	r3, [r7, #20]
			break;
 800d492:	e009      	b.n	800d4a8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d494:	2301      	movs	r3, #1
 800d496:	617b      	str	r3, [r7, #20]
 800d498:	e006      	b.n	800d4a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d49a:	bf00      	nop
 800d49c:	e004      	b.n	800d4a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d49e:	bf00      	nop
 800d4a0:	e002      	b.n	800d4a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d4a2:	bf00      	nop
 800d4a4:	e000      	b.n	800d4a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4a6:	bf00      	nop
		}
	}

	return val;
 800d4a8:	697b      	ldr	r3, [r7, #20]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3718      	adds	r7, #24
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d4b2:	b590      	push	{r4, r7, lr}
 800d4b4:	b089      	sub	sp, #36	; 0x24
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	60f8      	str	r0, [r7, #12]
 800d4ba:	60b9      	str	r1, [r7, #8]
 800d4bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d4be:	2302      	movs	r3, #2
 800d4c0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	f240 80d9 	bls.w	800d67c <put_fat+0x1ca>
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	699b      	ldr	r3, [r3, #24]
 800d4ce:	68ba      	ldr	r2, [r7, #8]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	f080 80d3 	bcs.w	800d67c <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	2b03      	cmp	r3, #3
 800d4dc:	f000 8096 	beq.w	800d60c <put_fat+0x15a>
 800d4e0:	2b03      	cmp	r3, #3
 800d4e2:	f300 80cb 	bgt.w	800d67c <put_fat+0x1ca>
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d002      	beq.n	800d4f0 <put_fat+0x3e>
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	d06e      	beq.n	800d5cc <put_fat+0x11a>
 800d4ee:	e0c5      	b.n	800d67c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	61bb      	str	r3, [r7, #24]
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	085b      	lsrs	r3, r3, #1
 800d4f8:	69ba      	ldr	r2, [r7, #24]
 800d4fa:	4413      	add	r3, r2
 800d4fc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	0a5b      	lsrs	r3, r3, #9
 800d506:	4413      	add	r3, r2
 800d508:	4619      	mov	r1, r3
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	f7ff fe6e 	bl	800d1ec <move_window>
 800d510:	4603      	mov	r3, r0
 800d512:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d514:	7ffb      	ldrb	r3, [r7, #31]
 800d516:	2b00      	cmp	r3, #0
 800d518:	f040 80a9 	bne.w	800d66e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	1c59      	adds	r1, r3, #1
 800d526:	61b9      	str	r1, [r7, #24]
 800d528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d52c:	4413      	add	r3, r2
 800d52e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	f003 0301 	and.w	r3, r3, #1
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00d      	beq.n	800d556 <put_fat+0xa4>
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	b25b      	sxtb	r3, r3
 800d540:	f003 030f 	and.w	r3, r3, #15
 800d544:	b25a      	sxtb	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	011b      	lsls	r3, r3, #4
 800d54c:	b25b      	sxtb	r3, r3
 800d54e:	4313      	orrs	r3, r2
 800d550:	b25b      	sxtb	r3, r3
 800d552:	b2db      	uxtb	r3, r3
 800d554:	e001      	b.n	800d55a <put_fat+0xa8>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	697a      	ldr	r2, [r7, #20]
 800d55c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2201      	movs	r2, #1
 800d562:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	0a5b      	lsrs	r3, r3, #9
 800d56c:	4413      	add	r3, r2
 800d56e:	4619      	mov	r1, r3
 800d570:	68f8      	ldr	r0, [r7, #12]
 800d572:	f7ff fe3b 	bl	800d1ec <move_window>
 800d576:	4603      	mov	r3, r0
 800d578:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d57a:	7ffb      	ldrb	r3, [r7, #31]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d178      	bne.n	800d672 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d58c:	4413      	add	r3, r2
 800d58e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	f003 0301 	and.w	r3, r3, #1
 800d596:	2b00      	cmp	r3, #0
 800d598:	d003      	beq.n	800d5a2 <put_fat+0xf0>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	091b      	lsrs	r3, r3, #4
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	e00e      	b.n	800d5c0 <put_fat+0x10e>
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	b25b      	sxtb	r3, r3
 800d5a8:	f023 030f 	bic.w	r3, r3, #15
 800d5ac:	b25a      	sxtb	r2, r3
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	0a1b      	lsrs	r3, r3, #8
 800d5b2:	b25b      	sxtb	r3, r3
 800d5b4:	f003 030f 	and.w	r3, r3, #15
 800d5b8:	b25b      	sxtb	r3, r3
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	b25b      	sxtb	r3, r3
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	697a      	ldr	r2, [r7, #20]
 800d5c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	70da      	strb	r2, [r3, #3]
			break;
 800d5ca:	e057      	b.n	800d67c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	0a1b      	lsrs	r3, r3, #8
 800d5d4:	4413      	add	r3, r2
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	68f8      	ldr	r0, [r7, #12]
 800d5da:	f7ff fe07 	bl	800d1ec <move_window>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5e2:	7ffb      	ldrb	r3, [r7, #31]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d146      	bne.n	800d676 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	005b      	lsls	r3, r3, #1
 800d5f2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d5f6:	4413      	add	r3, r2
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	b292      	uxth	r2, r2
 800d5fc:	4611      	mov	r1, r2
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7ff fb7f 	bl	800cd02 <st_word>
			fs->wflag = 1;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2201      	movs	r2, #1
 800d608:	70da      	strb	r2, [r3, #3]
			break;
 800d60a:	e037      	b.n	800d67c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	09db      	lsrs	r3, r3, #7
 800d614:	4413      	add	r3, r2
 800d616:	4619      	mov	r1, r3
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f7ff fde7 	bl	800d1ec <move_window>
 800d61e:	4603      	mov	r3, r0
 800d620:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d622:	7ffb      	ldrb	r3, [r7, #31]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d128      	bne.n	800d67a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d63c:	4413      	add	r3, r2
 800d63e:	4618      	mov	r0, r3
 800d640:	f7ff fb3c 	bl	800ccbc <ld_dword>
 800d644:	4603      	mov	r3, r0
 800d646:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d64a:	4323      	orrs	r3, r4
 800d64c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d65c:	4413      	add	r3, r2
 800d65e:	6879      	ldr	r1, [r7, #4]
 800d660:	4618      	mov	r0, r3
 800d662:	f7ff fb69 	bl	800cd38 <st_dword>
			fs->wflag = 1;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2201      	movs	r2, #1
 800d66a:	70da      	strb	r2, [r3, #3]
			break;
 800d66c:	e006      	b.n	800d67c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d66e:	bf00      	nop
 800d670:	e004      	b.n	800d67c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d672:	bf00      	nop
 800d674:	e002      	b.n	800d67c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d676:	bf00      	nop
 800d678:	e000      	b.n	800d67c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d67a:	bf00      	nop
		}
	}
	return res;
 800d67c:	7ffb      	ldrb	r3, [r7, #31]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3724      	adds	r7, #36	; 0x24
 800d682:	46bd      	mov	sp, r7
 800d684:	bd90      	pop	{r4, r7, pc}

0800d686 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b088      	sub	sp, #32
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	60f8      	str	r0, [r7, #12]
 800d68e:	60b9      	str	r1, [r7, #8]
 800d690:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d692:	2300      	movs	r3, #0
 800d694:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d904      	bls.n	800d6ac <remove_chain+0x26>
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	699b      	ldr	r3, [r3, #24]
 800d6a6:	68ba      	ldr	r2, [r7, #8]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d301      	bcc.n	800d6b0 <remove_chain+0x2a>
 800d6ac:	2302      	movs	r3, #2
 800d6ae:	e04b      	b.n	800d748 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d00c      	beq.n	800d6d0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d6b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6ba:	6879      	ldr	r1, [r7, #4]
 800d6bc:	69b8      	ldr	r0, [r7, #24]
 800d6be:	f7ff fef8 	bl	800d4b2 <put_fat>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d6c6:	7ffb      	ldrb	r3, [r7, #31]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <remove_chain+0x4a>
 800d6cc:	7ffb      	ldrb	r3, [r7, #31]
 800d6ce:	e03b      	b.n	800d748 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d6d0:	68b9      	ldr	r1, [r7, #8]
 800d6d2:	68f8      	ldr	r0, [r7, #12]
 800d6d4:	f7ff fe45 	bl	800d362 <get_fat>
 800d6d8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d031      	beq.n	800d744 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d101      	bne.n	800d6ea <remove_chain+0x64>
 800d6e6:	2302      	movs	r3, #2
 800d6e8:	e02e      	b.n	800d748 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6f0:	d101      	bne.n	800d6f6 <remove_chain+0x70>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e028      	b.n	800d748 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	68b9      	ldr	r1, [r7, #8]
 800d6fa:	69b8      	ldr	r0, [r7, #24]
 800d6fc:	f7ff fed9 	bl	800d4b2 <put_fat>
 800d700:	4603      	mov	r3, r0
 800d702:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d704:	7ffb      	ldrb	r3, [r7, #31]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d001      	beq.n	800d70e <remove_chain+0x88>
 800d70a:	7ffb      	ldrb	r3, [r7, #31]
 800d70c:	e01c      	b.n	800d748 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	695a      	ldr	r2, [r3, #20]
 800d712:	69bb      	ldr	r3, [r7, #24]
 800d714:	699b      	ldr	r3, [r3, #24]
 800d716:	3b02      	subs	r3, #2
 800d718:	429a      	cmp	r2, r3
 800d71a:	d20b      	bcs.n	800d734 <remove_chain+0xae>
			fs->free_clst++;
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	695b      	ldr	r3, [r3, #20]
 800d720:	1c5a      	adds	r2, r3, #1
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	791b      	ldrb	r3, [r3, #4]
 800d72a:	f043 0301 	orr.w	r3, r3, #1
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	699b      	ldr	r3, [r3, #24]
 800d73c:	68ba      	ldr	r2, [r7, #8]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d3c6      	bcc.n	800d6d0 <remove_chain+0x4a>
 800d742:	e000      	b.n	800d746 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d744:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d746:	2300      	movs	r3, #0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3720      	adds	r7, #32
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b088      	sub	sp, #32
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d10d      	bne.n	800d782 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	691b      	ldr	r3, [r3, #16]
 800d76a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d004      	beq.n	800d77c <create_chain+0x2c>
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	699b      	ldr	r3, [r3, #24]
 800d776:	69ba      	ldr	r2, [r7, #24]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d31b      	bcc.n	800d7b4 <create_chain+0x64>
 800d77c:	2301      	movs	r3, #1
 800d77e:	61bb      	str	r3, [r7, #24]
 800d780:	e018      	b.n	800d7b4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d782:	6839      	ldr	r1, [r7, #0]
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f7ff fdec 	bl	800d362 <get_fat>
 800d78a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d801      	bhi.n	800d796 <create_chain+0x46>
 800d792:	2301      	movs	r3, #1
 800d794:	e070      	b.n	800d878 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d79c:	d101      	bne.n	800d7a2 <create_chain+0x52>
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	e06a      	b.n	800d878 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	699b      	ldr	r3, [r3, #24]
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d201      	bcs.n	800d7b0 <create_chain+0x60>
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	e063      	b.n	800d878 <create_chain+0x128>
		scl = clst;
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	699b      	ldr	r3, [r3, #24]
 800d7c2:	69fa      	ldr	r2, [r7, #28]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d307      	bcc.n	800d7d8 <create_chain+0x88>
				ncl = 2;
 800d7c8:	2302      	movs	r3, #2
 800d7ca:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d7cc:	69fa      	ldr	r2, [r7, #28]
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d901      	bls.n	800d7d8 <create_chain+0x88>
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	e04f      	b.n	800d878 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d7d8:	69f9      	ldr	r1, [r7, #28]
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f7ff fdc1 	bl	800d362 <get_fat>
 800d7e0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d00e      	beq.n	800d806 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d003      	beq.n	800d7f6 <create_chain+0xa6>
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7f4:	d101      	bne.n	800d7fa <create_chain+0xaa>
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	e03e      	b.n	800d878 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d7fa:	69fa      	ldr	r2, [r7, #28]
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d1da      	bne.n	800d7b8 <create_chain+0x68>
 800d802:	2300      	movs	r3, #0
 800d804:	e038      	b.n	800d878 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d806:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d80c:	69f9      	ldr	r1, [r7, #28]
 800d80e:	6938      	ldr	r0, [r7, #16]
 800d810:	f7ff fe4f 	bl	800d4b2 <put_fat>
 800d814:	4603      	mov	r3, r0
 800d816:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d818:	7dfb      	ldrb	r3, [r7, #23]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d109      	bne.n	800d832 <create_chain+0xe2>
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d006      	beq.n	800d832 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d824:	69fa      	ldr	r2, [r7, #28]
 800d826:	6839      	ldr	r1, [r7, #0]
 800d828:	6938      	ldr	r0, [r7, #16]
 800d82a:	f7ff fe42 	bl	800d4b2 <put_fat>
 800d82e:	4603      	mov	r3, r0
 800d830:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d832:	7dfb      	ldrb	r3, [r7, #23]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d116      	bne.n	800d866 <create_chain+0x116>
		fs->last_clst = ncl;
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	69fa      	ldr	r2, [r7, #28]
 800d83c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	695a      	ldr	r2, [r3, #20]
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	699b      	ldr	r3, [r3, #24]
 800d846:	3b02      	subs	r3, #2
 800d848:	429a      	cmp	r2, r3
 800d84a:	d804      	bhi.n	800d856 <create_chain+0x106>
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	695b      	ldr	r3, [r3, #20]
 800d850:	1e5a      	subs	r2, r3, #1
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	791b      	ldrb	r3, [r3, #4]
 800d85a:	f043 0301 	orr.w	r3, r3, #1
 800d85e:	b2da      	uxtb	r2, r3
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	711a      	strb	r2, [r3, #4]
 800d864:	e007      	b.n	800d876 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d866:	7dfb      	ldrb	r3, [r7, #23]
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d102      	bne.n	800d872 <create_chain+0x122>
 800d86c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d870:	e000      	b.n	800d874 <create_chain+0x124>
 800d872:	2301      	movs	r3, #1
 800d874:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d876:	69fb      	ldr	r3, [r7, #28]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3720      	adds	r7, #32
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d880:	b480      	push	{r7}
 800d882:	b087      	sub	sp, #28
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d894:	3304      	adds	r3, #4
 800d896:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	0a5b      	lsrs	r3, r3, #9
 800d89c:	68fa      	ldr	r2, [r7, #12]
 800d89e:	8952      	ldrh	r2, [r2, #10]
 800d8a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	1d1a      	adds	r2, r3, #4
 800d8aa:	613a      	str	r2, [r7, #16]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d101      	bne.n	800d8ba <clmt_clust+0x3a>
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	e010      	b.n	800d8dc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d8ba:	697a      	ldr	r2, [r7, #20]
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d307      	bcc.n	800d8d2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d8c2:	697a      	ldr	r2, [r7, #20]
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	1ad3      	subs	r3, r2, r3
 800d8c8:	617b      	str	r3, [r7, #20]
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	3304      	adds	r3, #4
 800d8ce:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d8d0:	e7e9      	b.n	800d8a6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d8d2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	681a      	ldr	r2, [r3, #0]
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	4413      	add	r3, r2
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	371c      	adds	r7, #28
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d8fe:	d204      	bcs.n	800d90a <dir_sdi+0x22>
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	f003 031f 	and.w	r3, r3, #31
 800d906:	2b00      	cmp	r3, #0
 800d908:	d001      	beq.n	800d90e <dir_sdi+0x26>
		return FR_INT_ERR;
 800d90a:	2302      	movs	r3, #2
 800d90c:	e063      	b.n	800d9d6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	683a      	ldr	r2, [r7, #0]
 800d912:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d106      	bne.n	800d92e <dir_sdi+0x46>
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	2b02      	cmp	r3, #2
 800d926:	d902      	bls.n	800d92e <dir_sdi+0x46>
		clst = fs->dirbase;
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d92c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d10c      	bne.n	800d94e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	095b      	lsrs	r3, r3, #5
 800d938:	693a      	ldr	r2, [r7, #16]
 800d93a:	8912      	ldrh	r2, [r2, #8]
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d301      	bcc.n	800d944 <dir_sdi+0x5c>
 800d940:	2302      	movs	r3, #2
 800d942:	e048      	b.n	800d9d6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	61da      	str	r2, [r3, #28]
 800d94c:	e029      	b.n	800d9a2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	895b      	ldrh	r3, [r3, #10]
 800d952:	025b      	lsls	r3, r3, #9
 800d954:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d956:	e019      	b.n	800d98c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6979      	ldr	r1, [r7, #20]
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7ff fd00 	bl	800d362 <get_fat>
 800d962:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d96a:	d101      	bne.n	800d970 <dir_sdi+0x88>
 800d96c:	2301      	movs	r3, #1
 800d96e:	e032      	b.n	800d9d6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	2b01      	cmp	r3, #1
 800d974:	d904      	bls.n	800d980 <dir_sdi+0x98>
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	699b      	ldr	r3, [r3, #24]
 800d97a:	697a      	ldr	r2, [r7, #20]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d301      	bcc.n	800d984 <dir_sdi+0x9c>
 800d980:	2302      	movs	r3, #2
 800d982:	e028      	b.n	800d9d6 <dir_sdi+0xee>
			ofs -= csz;
 800d984:	683a      	ldr	r2, [r7, #0]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d98c:	683a      	ldr	r2, [r7, #0]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	429a      	cmp	r2, r3
 800d992:	d2e1      	bcs.n	800d958 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d994:	6979      	ldr	r1, [r7, #20]
 800d996:	6938      	ldr	r0, [r7, #16]
 800d998:	f7ff fcc4 	bl	800d324 <clust2sect>
 800d99c:	4602      	mov	r2, r0
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	697a      	ldr	r2, [r7, #20]
 800d9a6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	69db      	ldr	r3, [r3, #28]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d101      	bne.n	800d9b4 <dir_sdi+0xcc>
 800d9b0:	2302      	movs	r3, #2
 800d9b2:	e010      	b.n	800d9d6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	69da      	ldr	r2, [r3, #28]
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	0a5b      	lsrs	r3, r3, #9
 800d9bc:	441a      	add	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ce:	441a      	add	r2, r3
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d9d4:	2300      	movs	r3, #0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3718      	adds	r7, #24
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b086      	sub	sp, #24
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
 800d9e6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	3320      	adds	r3, #32
 800d9f4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	69db      	ldr	r3, [r3, #28]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d003      	beq.n	800da06 <dir_next+0x28>
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da04:	d301      	bcc.n	800da0a <dir_next+0x2c>
 800da06:	2304      	movs	r3, #4
 800da08:	e0aa      	b.n	800db60 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da10:	2b00      	cmp	r3, #0
 800da12:	f040 8098 	bne.w	800db46 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	69db      	ldr	r3, [r3, #28]
 800da1a:	1c5a      	adds	r2, r3, #1
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	699b      	ldr	r3, [r3, #24]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d10b      	bne.n	800da40 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	095b      	lsrs	r3, r3, #5
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	8912      	ldrh	r2, [r2, #8]
 800da30:	4293      	cmp	r3, r2
 800da32:	f0c0 8088 	bcc.w	800db46 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	61da      	str	r2, [r3, #28]
 800da3c:	2304      	movs	r3, #4
 800da3e:	e08f      	b.n	800db60 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	0a5b      	lsrs	r3, r3, #9
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	8952      	ldrh	r2, [r2, #10]
 800da48:	3a01      	subs	r2, #1
 800da4a:	4013      	ands	r3, r2
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d17a      	bne.n	800db46 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	699b      	ldr	r3, [r3, #24]
 800da56:	4619      	mov	r1, r3
 800da58:	4610      	mov	r0, r2
 800da5a:	f7ff fc82 	bl	800d362 <get_fat>
 800da5e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	2b01      	cmp	r3, #1
 800da64:	d801      	bhi.n	800da6a <dir_next+0x8c>
 800da66:	2302      	movs	r3, #2
 800da68:	e07a      	b.n	800db60 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da70:	d101      	bne.n	800da76 <dir_next+0x98>
 800da72:	2301      	movs	r3, #1
 800da74:	e074      	b.n	800db60 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	699b      	ldr	r3, [r3, #24]
 800da7a:	697a      	ldr	r2, [r7, #20]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d358      	bcc.n	800db32 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d104      	bne.n	800da90 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	61da      	str	r2, [r3, #28]
 800da8c:	2304      	movs	r3, #4
 800da8e:	e067      	b.n	800db60 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	699b      	ldr	r3, [r3, #24]
 800da96:	4619      	mov	r1, r3
 800da98:	4610      	mov	r0, r2
 800da9a:	f7ff fe59 	bl	800d750 <create_chain>
 800da9e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d101      	bne.n	800daaa <dir_next+0xcc>
 800daa6:	2307      	movs	r3, #7
 800daa8:	e05a      	b.n	800db60 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	2b01      	cmp	r3, #1
 800daae:	d101      	bne.n	800dab4 <dir_next+0xd6>
 800dab0:	2302      	movs	r3, #2
 800dab2:	e055      	b.n	800db60 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800daba:	d101      	bne.n	800dac0 <dir_next+0xe2>
 800dabc:	2301      	movs	r3, #1
 800dabe:	e04f      	b.n	800db60 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dac0:	68f8      	ldr	r0, [r7, #12]
 800dac2:	f7ff fb4f 	bl	800d164 <sync_window>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d001      	beq.n	800dad0 <dir_next+0xf2>
 800dacc:	2301      	movs	r3, #1
 800dace:	e047      	b.n	800db60 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	3334      	adds	r3, #52	; 0x34
 800dad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dad8:	2100      	movs	r1, #0
 800dada:	4618      	mov	r0, r3
 800dadc:	f7ff f979 	bl	800cdd2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dae0:	2300      	movs	r3, #0
 800dae2:	613b      	str	r3, [r7, #16]
 800dae4:	6979      	ldr	r1, [r7, #20]
 800dae6:	68f8      	ldr	r0, [r7, #12]
 800dae8:	f7ff fc1c 	bl	800d324 <clust2sect>
 800daec:	4602      	mov	r2, r0
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	631a      	str	r2, [r3, #48]	; 0x30
 800daf2:	e012      	b.n	800db1a <dir_next+0x13c>
						fs->wflag = 1;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2201      	movs	r2, #1
 800daf8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f7ff fb32 	bl	800d164 <sync_window>
 800db00:	4603      	mov	r3, r0
 800db02:	2b00      	cmp	r3, #0
 800db04:	d001      	beq.n	800db0a <dir_next+0x12c>
 800db06:	2301      	movs	r3, #1
 800db08:	e02a      	b.n	800db60 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	3301      	adds	r3, #1
 800db0e:	613b      	str	r3, [r7, #16]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db14:	1c5a      	adds	r2, r3, #1
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	631a      	str	r2, [r3, #48]	; 0x30
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	895b      	ldrh	r3, [r3, #10]
 800db1e:	461a      	mov	r2, r3
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	4293      	cmp	r3, r2
 800db24:	d3e6      	bcc.n	800daf4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	1ad2      	subs	r2, r2, r3
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	697a      	ldr	r2, [r7, #20]
 800db36:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800db38:	6979      	ldr	r1, [r7, #20]
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f7ff fbf2 	bl	800d324 <clust2sect>
 800db40:	4602      	mov	r2, r0
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	68ba      	ldr	r2, [r7, #8]
 800db4a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db58:	441a      	add	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800db5e:	2300      	movs	r3, #0
}
 800db60:	4618      	mov	r0, r3
 800db62:	3718      	adds	r7, #24
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b086      	sub	sp, #24
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800db78:	2100      	movs	r1, #0
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f7ff feb4 	bl	800d8e8 <dir_sdi>
 800db80:	4603      	mov	r3, r0
 800db82:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800db84:	7dfb      	ldrb	r3, [r7, #23]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d12b      	bne.n	800dbe2 <dir_alloc+0x7a>
		n = 0;
 800db8a:	2300      	movs	r3, #0
 800db8c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	69db      	ldr	r3, [r3, #28]
 800db92:	4619      	mov	r1, r3
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f7ff fb29 	bl	800d1ec <move_window>
 800db9a:	4603      	mov	r3, r0
 800db9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800db9e:	7dfb      	ldrb	r3, [r7, #23]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d11d      	bne.n	800dbe0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6a1b      	ldr	r3, [r3, #32]
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	2be5      	cmp	r3, #229	; 0xe5
 800dbac:	d004      	beq.n	800dbb8 <dir_alloc+0x50>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6a1b      	ldr	r3, [r3, #32]
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d107      	bne.n	800dbc8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	613b      	str	r3, [r7, #16]
 800dbbe:	693a      	ldr	r2, [r7, #16]
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d102      	bne.n	800dbcc <dir_alloc+0x64>
 800dbc6:	e00c      	b.n	800dbe2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dbc8:	2300      	movs	r3, #0
 800dbca:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dbcc:	2101      	movs	r1, #1
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff ff05 	bl	800d9de <dir_next>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dbd8:	7dfb      	ldrb	r3, [r7, #23]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d0d7      	beq.n	800db8e <dir_alloc+0x26>
 800dbde:	e000      	b.n	800dbe2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dbe0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dbe2:	7dfb      	ldrb	r3, [r7, #23]
 800dbe4:	2b04      	cmp	r3, #4
 800dbe6:	d101      	bne.n	800dbec <dir_alloc+0x84>
 800dbe8:	2307      	movs	r3, #7
 800dbea:	75fb      	strb	r3, [r7, #23]
	return res;
 800dbec:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3718      	adds	r7, #24
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b084      	sub	sp, #16
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
 800dbfe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	331a      	adds	r3, #26
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7ff f841 	bl	800cc8c <ld_word>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	2b03      	cmp	r3, #3
 800dc14:	d109      	bne.n	800dc2a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	3314      	adds	r3, #20
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7ff f836 	bl	800cc8c <ld_word>
 800dc20:	4603      	mov	r3, r0
 800dc22:	041b      	lsls	r3, r3, #16
 800dc24:	68fa      	ldr	r2, [r7, #12]
 800dc26:	4313      	orrs	r3, r2
 800dc28:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	331a      	adds	r3, #26
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	b292      	uxth	r2, r2
 800dc48:	4611      	mov	r1, r2
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7ff f859 	bl	800cd02 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	2b03      	cmp	r3, #3
 800dc56:	d109      	bne.n	800dc6c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	f103 0214 	add.w	r2, r3, #20
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	0c1b      	lsrs	r3, r3, #16
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	4619      	mov	r1, r3
 800dc66:	4610      	mov	r0, r2
 800dc68:	f7ff f84b 	bl	800cd02 <st_word>
	}
}
 800dc6c:	bf00      	nop
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dc74:	b590      	push	{r4, r7, lr}
 800dc76:	b087      	sub	sp, #28
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	331a      	adds	r3, #26
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7ff f802 	bl	800cc8c <ld_word>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d001      	beq.n	800dc92 <cmp_lfn+0x1e>
 800dc8e:	2300      	movs	r3, #0
 800dc90:	e059      	b.n	800dd46 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc9a:	1e5a      	subs	r2, r3, #1
 800dc9c:	4613      	mov	r3, r2
 800dc9e:	005b      	lsls	r3, r3, #1
 800dca0:	4413      	add	r3, r2
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	4413      	add	r3, r2
 800dca6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dca8:	2301      	movs	r3, #1
 800dcaa:	81fb      	strh	r3, [r7, #14]
 800dcac:	2300      	movs	r3, #0
 800dcae:	613b      	str	r3, [r7, #16]
 800dcb0:	e033      	b.n	800dd1a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dcb2:	4a27      	ldr	r2, [pc, #156]	; (800dd50 <cmp_lfn+0xdc>)
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	4413      	add	r3, r2
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	461a      	mov	r2, r3
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	4413      	add	r3, r2
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fe ffe3 	bl	800cc8c <ld_word>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dcca:	89fb      	ldrh	r3, [r7, #14]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d01a      	beq.n	800dd06 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	2bfe      	cmp	r3, #254	; 0xfe
 800dcd4:	d812      	bhi.n	800dcfc <cmp_lfn+0x88>
 800dcd6:	89bb      	ldrh	r3, [r7, #12]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f001 fd0f 	bl	800f6fc <ff_wtoupper>
 800dcde:	4603      	mov	r3, r0
 800dce0:	461c      	mov	r4, r3
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	1c5a      	adds	r2, r3, #1
 800dce6:	617a      	str	r2, [r7, #20]
 800dce8:	005b      	lsls	r3, r3, #1
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	4413      	add	r3, r2
 800dcee:	881b      	ldrh	r3, [r3, #0]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f001 fd03 	bl	800f6fc <ff_wtoupper>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	429c      	cmp	r4, r3
 800dcfa:	d001      	beq.n	800dd00 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	e022      	b.n	800dd46 <cmp_lfn+0xd2>
			}
			wc = uc;
 800dd00:	89bb      	ldrh	r3, [r7, #12]
 800dd02:	81fb      	strh	r3, [r7, #14]
 800dd04:	e006      	b.n	800dd14 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dd06:	89bb      	ldrh	r3, [r7, #12]
 800dd08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d001      	beq.n	800dd14 <cmp_lfn+0xa0>
 800dd10:	2300      	movs	r3, #0
 800dd12:	e018      	b.n	800dd46 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	3301      	adds	r3, #1
 800dd18:	613b      	str	r3, [r7, #16]
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	2b0c      	cmp	r3, #12
 800dd1e:	d9c8      	bls.n	800dcb2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00b      	beq.n	800dd44 <cmp_lfn+0xd0>
 800dd2c:	89fb      	ldrh	r3, [r7, #14]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d008      	beq.n	800dd44 <cmp_lfn+0xd0>
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	005b      	lsls	r3, r3, #1
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	4413      	add	r3, r2
 800dd3a:	881b      	ldrh	r3, [r3, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d001      	beq.n	800dd44 <cmp_lfn+0xd0>
 800dd40:	2300      	movs	r3, #0
 800dd42:	e000      	b.n	800dd46 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800dd44:	2301      	movs	r3, #1
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	371c      	adds	r7, #28
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd90      	pop	{r4, r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	08011ab0 	.word	0x08011ab0

0800dd54 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b088      	sub	sp, #32
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	4611      	mov	r1, r2
 800dd60:	461a      	mov	r2, r3
 800dd62:	460b      	mov	r3, r1
 800dd64:	71fb      	strb	r3, [r7, #7]
 800dd66:	4613      	mov	r3, r2
 800dd68:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	330d      	adds	r3, #13
 800dd6e:	79ba      	ldrb	r2, [r7, #6]
 800dd70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	330b      	adds	r3, #11
 800dd76:	220f      	movs	r2, #15
 800dd78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	330c      	adds	r3, #12
 800dd7e:	2200      	movs	r2, #0
 800dd80:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	331a      	adds	r3, #26
 800dd86:	2100      	movs	r1, #0
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7fe ffba 	bl	800cd02 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800dd8e:	79fb      	ldrb	r3, [r7, #7]
 800dd90:	1e5a      	subs	r2, r3, #1
 800dd92:	4613      	mov	r3, r2
 800dd94:	005b      	lsls	r3, r3, #1
 800dd96:	4413      	add	r3, r2
 800dd98:	009b      	lsls	r3, r3, #2
 800dd9a:	4413      	add	r3, r2
 800dd9c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	82fb      	strh	r3, [r7, #22]
 800dda2:	2300      	movs	r3, #0
 800dda4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800dda6:	8afb      	ldrh	r3, [r7, #22]
 800dda8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d007      	beq.n	800ddc0 <put_lfn+0x6c>
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	1c5a      	adds	r2, r3, #1
 800ddb4:	61fa      	str	r2, [r7, #28]
 800ddb6:	005b      	lsls	r3, r3, #1
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	4413      	add	r3, r2
 800ddbc:	881b      	ldrh	r3, [r3, #0]
 800ddbe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ddc0:	4a17      	ldr	r2, [pc, #92]	; (800de20 <put_lfn+0xcc>)
 800ddc2:	69bb      	ldr	r3, [r7, #24]
 800ddc4:	4413      	add	r3, r2
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	461a      	mov	r2, r3
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	4413      	add	r3, r2
 800ddce:	8afa      	ldrh	r2, [r7, #22]
 800ddd0:	4611      	mov	r1, r2
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7fe ff95 	bl	800cd02 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ddd8:	8afb      	ldrh	r3, [r7, #22]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d102      	bne.n	800dde4 <put_lfn+0x90>
 800ddde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dde2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	3301      	adds	r3, #1
 800dde8:	61bb      	str	r3, [r7, #24]
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	2b0c      	cmp	r3, #12
 800ddee:	d9da      	bls.n	800dda6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ddf0:	8afb      	ldrh	r3, [r7, #22]
 800ddf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d006      	beq.n	800de08 <put_lfn+0xb4>
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	005b      	lsls	r3, r3, #1
 800ddfe:	68fa      	ldr	r2, [r7, #12]
 800de00:	4413      	add	r3, r2
 800de02:	881b      	ldrh	r3, [r3, #0]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d103      	bne.n	800de10 <put_lfn+0xbc>
 800de08:	79fb      	ldrb	r3, [r7, #7]
 800de0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de0e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	79fa      	ldrb	r2, [r7, #7]
 800de14:	701a      	strb	r2, [r3, #0]
}
 800de16:	bf00      	nop
 800de18:	3720      	adds	r7, #32
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	08011ab0 	.word	0x08011ab0

0800de24 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b08c      	sub	sp, #48	; 0x30
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
 800de30:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800de32:	220b      	movs	r2, #11
 800de34:	68b9      	ldr	r1, [r7, #8]
 800de36:	68f8      	ldr	r0, [r7, #12]
 800de38:	f7fe ffaa 	bl	800cd90 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	2b05      	cmp	r3, #5
 800de40:	d929      	bls.n	800de96 <gen_numname+0x72>
		sr = seq;
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800de46:	e020      	b.n	800de8a <gen_numname+0x66>
			wc = *lfn++;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	1c9a      	adds	r2, r3, #2
 800de4c:	607a      	str	r2, [r7, #4]
 800de4e:	881b      	ldrh	r3, [r3, #0]
 800de50:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800de52:	2300      	movs	r3, #0
 800de54:	62bb      	str	r3, [r7, #40]	; 0x28
 800de56:	e015      	b.n	800de84 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800de58:	69fb      	ldr	r3, [r7, #28]
 800de5a:	005a      	lsls	r2, r3, #1
 800de5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de5e:	f003 0301 	and.w	r3, r3, #1
 800de62:	4413      	add	r3, r2
 800de64:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800de66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de68:	085b      	lsrs	r3, r3, #1
 800de6a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de72:	2b00      	cmp	r3, #0
 800de74:	d003      	beq.n	800de7e <gen_numname+0x5a>
 800de76:	69fa      	ldr	r2, [r7, #28]
 800de78:	4b30      	ldr	r3, [pc, #192]	; (800df3c <gen_numname+0x118>)
 800de7a:	4053      	eors	r3, r2
 800de7c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800de7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de80:	3301      	adds	r3, #1
 800de82:	62bb      	str	r3, [r7, #40]	; 0x28
 800de84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de86:	2b0f      	cmp	r3, #15
 800de88:	d9e6      	bls.n	800de58 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	881b      	ldrh	r3, [r3, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d1da      	bne.n	800de48 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800de96:	2307      	movs	r3, #7
 800de98:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	f003 030f 	and.w	r3, r3, #15
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	3330      	adds	r3, #48	; 0x30
 800dea6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800deaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800deae:	2b39      	cmp	r3, #57	; 0x39
 800deb0:	d904      	bls.n	800debc <gen_numname+0x98>
 800deb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800deb6:	3307      	adds	r3, #7
 800deb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800debc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debe:	1e5a      	subs	r2, r3, #1
 800dec0:	62ba      	str	r2, [r7, #40]	; 0x28
 800dec2:	3330      	adds	r3, #48	; 0x30
 800dec4:	443b      	add	r3, r7
 800dec6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800deca:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	091b      	lsrs	r3, r3, #4
 800ded2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d1df      	bne.n	800de9a <gen_numname+0x76>
	ns[i] = '~';
 800deda:	f107 0214 	add.w	r2, r7, #20
 800dede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee0:	4413      	add	r3, r2
 800dee2:	227e      	movs	r2, #126	; 0x7e
 800dee4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800dee6:	2300      	movs	r3, #0
 800dee8:	627b      	str	r3, [r7, #36]	; 0x24
 800deea:	e002      	b.n	800def2 <gen_numname+0xce>
 800deec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deee:	3301      	adds	r3, #1
 800def0:	627b      	str	r3, [r7, #36]	; 0x24
 800def2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800def4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def6:	429a      	cmp	r2, r3
 800def8:	d205      	bcs.n	800df06 <gen_numname+0xe2>
 800defa:	68fa      	ldr	r2, [r7, #12]
 800defc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defe:	4413      	add	r3, r2
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	2b20      	cmp	r3, #32
 800df04:	d1f2      	bne.n	800deec <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800df06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df08:	2b07      	cmp	r3, #7
 800df0a:	d807      	bhi.n	800df1c <gen_numname+0xf8>
 800df0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0e:	1c5a      	adds	r2, r3, #1
 800df10:	62ba      	str	r2, [r7, #40]	; 0x28
 800df12:	3330      	adds	r3, #48	; 0x30
 800df14:	443b      	add	r3, r7
 800df16:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800df1a:	e000      	b.n	800df1e <gen_numname+0xfa>
 800df1c:	2120      	movs	r1, #32
 800df1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df20:	1c5a      	adds	r2, r3, #1
 800df22:	627a      	str	r2, [r7, #36]	; 0x24
 800df24:	68fa      	ldr	r2, [r7, #12]
 800df26:	4413      	add	r3, r2
 800df28:	460a      	mov	r2, r1
 800df2a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800df2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2e:	2b07      	cmp	r3, #7
 800df30:	d9e9      	bls.n	800df06 <gen_numname+0xe2>
}
 800df32:	bf00      	nop
 800df34:	bf00      	nop
 800df36:	3730      	adds	r7, #48	; 0x30
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	00011021 	.word	0x00011021

0800df40 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800df40:	b480      	push	{r7}
 800df42:	b085      	sub	sp, #20
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800df48:	2300      	movs	r3, #0
 800df4a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800df4c:	230b      	movs	r3, #11
 800df4e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800df50:	7bfb      	ldrb	r3, [r7, #15]
 800df52:	b2da      	uxtb	r2, r3
 800df54:	0852      	lsrs	r2, r2, #1
 800df56:	01db      	lsls	r3, r3, #7
 800df58:	4313      	orrs	r3, r2
 800df5a:	b2da      	uxtb	r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	1c59      	adds	r1, r3, #1
 800df60:	6079      	str	r1, [r7, #4]
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	4413      	add	r3, r2
 800df66:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	3b01      	subs	r3, #1
 800df6c:	60bb      	str	r3, [r7, #8]
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d1ed      	bne.n	800df50 <sum_sfn+0x10>
	return sum;
 800df74:	7bfb      	ldrb	r3, [r7, #15]
}
 800df76:	4618      	mov	r0, r3
 800df78:	3714      	adds	r7, #20
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr

0800df82 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b086      	sub	sp, #24
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800df90:	2100      	movs	r1, #0
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7ff fca8 	bl	800d8e8 <dir_sdi>
 800df98:	4603      	mov	r3, r0
 800df9a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800df9c:	7dfb      	ldrb	r3, [r7, #23]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d001      	beq.n	800dfa6 <dir_find+0x24>
 800dfa2:	7dfb      	ldrb	r3, [r7, #23]
 800dfa4:	e0a9      	b.n	800e0fa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dfa6:	23ff      	movs	r3, #255	; 0xff
 800dfa8:	753b      	strb	r3, [r7, #20]
 800dfaa:	7d3b      	ldrb	r3, [r7, #20]
 800dfac:	757b      	strb	r3, [r7, #21]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfb4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	69db      	ldr	r3, [r3, #28]
 800dfba:	4619      	mov	r1, r3
 800dfbc:	6938      	ldr	r0, [r7, #16]
 800dfbe:	f7ff f915 	bl	800d1ec <move_window>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dfc6:	7dfb      	ldrb	r3, [r7, #23]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	f040 8090 	bne.w	800e0ee <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a1b      	ldr	r3, [r3, #32]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dfd6:	7dbb      	ldrb	r3, [r7, #22]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d102      	bne.n	800dfe2 <dir_find+0x60>
 800dfdc:	2304      	movs	r3, #4
 800dfde:	75fb      	strb	r3, [r7, #23]
 800dfe0:	e08a      	b.n	800e0f8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6a1b      	ldr	r3, [r3, #32]
 800dfe6:	330b      	adds	r3, #11
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dfee:	73fb      	strb	r3, [r7, #15]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	7bfa      	ldrb	r2, [r7, #15]
 800dff4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800dff6:	7dbb      	ldrb	r3, [r7, #22]
 800dff8:	2be5      	cmp	r3, #229	; 0xe5
 800dffa:	d007      	beq.n	800e00c <dir_find+0x8a>
 800dffc:	7bfb      	ldrb	r3, [r7, #15]
 800dffe:	f003 0308 	and.w	r3, r3, #8
 800e002:	2b00      	cmp	r3, #0
 800e004:	d009      	beq.n	800e01a <dir_find+0x98>
 800e006:	7bfb      	ldrb	r3, [r7, #15]
 800e008:	2b0f      	cmp	r3, #15
 800e00a:	d006      	beq.n	800e01a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e00c:	23ff      	movs	r3, #255	; 0xff
 800e00e:	757b      	strb	r3, [r7, #21]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e016:	631a      	str	r2, [r3, #48]	; 0x30
 800e018:	e05e      	b.n	800e0d8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e01a:	7bfb      	ldrb	r3, [r7, #15]
 800e01c:	2b0f      	cmp	r3, #15
 800e01e:	d136      	bne.n	800e08e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d154      	bne.n	800e0d8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e02e:	7dbb      	ldrb	r3, [r7, #22]
 800e030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00d      	beq.n	800e054 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6a1b      	ldr	r3, [r3, #32]
 800e03c:	7b5b      	ldrb	r3, [r3, #13]
 800e03e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e040:	7dbb      	ldrb	r3, [r7, #22]
 800e042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e046:	75bb      	strb	r3, [r7, #22]
 800e048:	7dbb      	ldrb	r3, [r7, #22]
 800e04a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	695a      	ldr	r2, [r3, #20]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e054:	7dba      	ldrb	r2, [r7, #22]
 800e056:	7d7b      	ldrb	r3, [r7, #21]
 800e058:	429a      	cmp	r2, r3
 800e05a:	d115      	bne.n	800e088 <dir_find+0x106>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6a1b      	ldr	r3, [r3, #32]
 800e060:	330d      	adds	r3, #13
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	7d3a      	ldrb	r2, [r7, #20]
 800e066:	429a      	cmp	r2, r3
 800e068:	d10e      	bne.n	800e088 <dir_find+0x106>
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	68da      	ldr	r2, [r3, #12]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6a1b      	ldr	r3, [r3, #32]
 800e072:	4619      	mov	r1, r3
 800e074:	4610      	mov	r0, r2
 800e076:	f7ff fdfd 	bl	800dc74 <cmp_lfn>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d003      	beq.n	800e088 <dir_find+0x106>
 800e080:	7d7b      	ldrb	r3, [r7, #21]
 800e082:	3b01      	subs	r3, #1
 800e084:	b2db      	uxtb	r3, r3
 800e086:	e000      	b.n	800e08a <dir_find+0x108>
 800e088:	23ff      	movs	r3, #255	; 0xff
 800e08a:	757b      	strb	r3, [r7, #21]
 800e08c:	e024      	b.n	800e0d8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e08e:	7d7b      	ldrb	r3, [r7, #21]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d109      	bne.n	800e0a8 <dir_find+0x126>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6a1b      	ldr	r3, [r3, #32]
 800e098:	4618      	mov	r0, r3
 800e09a:	f7ff ff51 	bl	800df40 <sum_sfn>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	7d3b      	ldrb	r3, [r7, #20]
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d024      	beq.n	800e0f2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e0ae:	f003 0301 	and.w	r3, r3, #1
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d10a      	bne.n	800e0cc <dir_find+0x14a>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6a18      	ldr	r0, [r3, #32]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	3324      	adds	r3, #36	; 0x24
 800e0be:	220b      	movs	r2, #11
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	f7fe fea1 	bl	800ce08 <mem_cmp>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d014      	beq.n	800e0f6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e0cc:	23ff      	movs	r3, #255	; 0xff
 800e0ce:	757b      	strb	r3, [r7, #21]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0d6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e0d8:	2100      	movs	r1, #0
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f7ff fc7f 	bl	800d9de <dir_next>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e0e4:	7dfb      	ldrb	r3, [r7, #23]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	f43f af65 	beq.w	800dfb6 <dir_find+0x34>
 800e0ec:	e004      	b.n	800e0f8 <dir_find+0x176>
		if (res != FR_OK) break;
 800e0ee:	bf00      	nop
 800e0f0:	e002      	b.n	800e0f8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e0f2:	bf00      	nop
 800e0f4:	e000      	b.n	800e0f8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e0f6:	bf00      	nop

	return res;
 800e0f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3718      	adds	r7, #24
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
	...

0800e104 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b08c      	sub	sp, #48	; 0x30
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e118:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d001      	beq.n	800e124 <dir_register+0x20>
 800e120:	2306      	movs	r3, #6
 800e122:	e0e0      	b.n	800e2e6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e124:	2300      	movs	r3, #0
 800e126:	627b      	str	r3, [r7, #36]	; 0x24
 800e128:	e002      	b.n	800e130 <dir_register+0x2c>
 800e12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12c:	3301      	adds	r3, #1
 800e12e:	627b      	str	r3, [r7, #36]	; 0x24
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	68da      	ldr	r2, [r3, #12]
 800e134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e136:	005b      	lsls	r3, r3, #1
 800e138:	4413      	add	r3, r2
 800e13a:	881b      	ldrh	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d1f4      	bne.n	800e12a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e146:	f107 030c 	add.w	r3, r7, #12
 800e14a:	220c      	movs	r2, #12
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fe fe1f 	bl	800cd90 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e152:	7dfb      	ldrb	r3, [r7, #23]
 800e154:	f003 0301 	and.w	r3, r3, #1
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d032      	beq.n	800e1c2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2240      	movs	r2, #64	; 0x40
 800e160:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e164:	2301      	movs	r3, #1
 800e166:	62bb      	str	r3, [r7, #40]	; 0x28
 800e168:	e016      	b.n	800e198 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	68da      	ldr	r2, [r3, #12]
 800e174:	f107 010c 	add.w	r1, r7, #12
 800e178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17a:	f7ff fe53 	bl	800de24 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f7ff feff 	bl	800df82 <dir_find>
 800e184:	4603      	mov	r3, r0
 800e186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e18a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d106      	bne.n	800e1a0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e194:	3301      	adds	r3, #1
 800e196:	62bb      	str	r3, [r7, #40]	; 0x28
 800e198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19a:	2b63      	cmp	r3, #99	; 0x63
 800e19c:	d9e5      	bls.n	800e16a <dir_register+0x66>
 800e19e:	e000      	b.n	800e1a2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800e1a0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a4:	2b64      	cmp	r3, #100	; 0x64
 800e1a6:	d101      	bne.n	800e1ac <dir_register+0xa8>
 800e1a8:	2307      	movs	r3, #7
 800e1aa:	e09c      	b.n	800e2e6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e1ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1b0:	2b04      	cmp	r3, #4
 800e1b2:	d002      	beq.n	800e1ba <dir_register+0xb6>
 800e1b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1b8:	e095      	b.n	800e2e6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e1ba:	7dfa      	ldrb	r2, [r7, #23]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e1c2:	7dfb      	ldrb	r3, [r7, #23]
 800e1c4:	f003 0302 	and.w	r3, r3, #2
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d007      	beq.n	800e1dc <dir_register+0xd8>
 800e1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ce:	330c      	adds	r3, #12
 800e1d0:	4a47      	ldr	r2, [pc, #284]	; (800e2f0 <dir_register+0x1ec>)
 800e1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e1d6:	089b      	lsrs	r3, r3, #2
 800e1d8:	3301      	adds	r3, #1
 800e1da:	e000      	b.n	800e1de <dir_register+0xda>
 800e1dc:	2301      	movs	r3, #1
 800e1de:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e1e0:	6a39      	ldr	r1, [r7, #32]
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f7ff fcc0 	bl	800db68 <dir_alloc>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e1ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d148      	bne.n	800e288 <dir_register+0x184>
 800e1f6:	6a3b      	ldr	r3, [r7, #32]
 800e1f8:	3b01      	subs	r3, #1
 800e1fa:	623b      	str	r3, [r7, #32]
 800e1fc:	6a3b      	ldr	r3, [r7, #32]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d042      	beq.n	800e288 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	695a      	ldr	r2, [r3, #20]
 800e206:	6a3b      	ldr	r3, [r7, #32]
 800e208:	015b      	lsls	r3, r3, #5
 800e20a:	1ad3      	subs	r3, r2, r3
 800e20c:	4619      	mov	r1, r3
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7ff fb6a 	bl	800d8e8 <dir_sdi>
 800e214:	4603      	mov	r3, r0
 800e216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e21a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d132      	bne.n	800e288 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	3324      	adds	r3, #36	; 0x24
 800e226:	4618      	mov	r0, r3
 800e228:	f7ff fe8a 	bl	800df40 <sum_sfn>
 800e22c:	4603      	mov	r3, r0
 800e22e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	69db      	ldr	r3, [r3, #28]
 800e234:	4619      	mov	r1, r3
 800e236:	69f8      	ldr	r0, [r7, #28]
 800e238:	f7fe ffd8 	bl	800d1ec <move_window>
 800e23c:	4603      	mov	r3, r0
 800e23e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e246:	2b00      	cmp	r3, #0
 800e248:	d11d      	bne.n	800e286 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	68d8      	ldr	r0, [r3, #12]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6a19      	ldr	r1, [r3, #32]
 800e252:	6a3b      	ldr	r3, [r7, #32]
 800e254:	b2da      	uxtb	r2, r3
 800e256:	7efb      	ldrb	r3, [r7, #27]
 800e258:	f7ff fd7c 	bl	800dd54 <put_lfn>
				fs->wflag = 1;
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	2201      	movs	r2, #1
 800e260:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e262:	2100      	movs	r1, #0
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f7ff fbba 	bl	800d9de <dir_next>
 800e26a:	4603      	mov	r3, r0
 800e26c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e270:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e274:	2b00      	cmp	r3, #0
 800e276:	d107      	bne.n	800e288 <dir_register+0x184>
 800e278:	6a3b      	ldr	r3, [r7, #32]
 800e27a:	3b01      	subs	r3, #1
 800e27c:	623b      	str	r3, [r7, #32]
 800e27e:	6a3b      	ldr	r3, [r7, #32]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d1d5      	bne.n	800e230 <dir_register+0x12c>
 800e284:	e000      	b.n	800e288 <dir_register+0x184>
				if (res != FR_OK) break;
 800e286:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e288:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d128      	bne.n	800e2e2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	69db      	ldr	r3, [r3, #28]
 800e294:	4619      	mov	r1, r3
 800e296:	69f8      	ldr	r0, [r7, #28]
 800e298:	f7fe ffa8 	bl	800d1ec <move_window>
 800e29c:	4603      	mov	r3, r0
 800e29e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e2a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d11b      	bne.n	800e2e2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6a1b      	ldr	r3, [r3, #32]
 800e2ae:	2220      	movs	r2, #32
 800e2b0:	2100      	movs	r1, #0
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fe fd8d 	bl	800cdd2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a18      	ldr	r0, [r3, #32]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	3324      	adds	r3, #36	; 0x24
 800e2c0:	220b      	movs	r2, #11
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	f7fe fd64 	bl	800cd90 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6a1b      	ldr	r3, [r3, #32]
 800e2d2:	330c      	adds	r3, #12
 800e2d4:	f002 0218 	and.w	r2, r2, #24
 800e2d8:	b2d2      	uxtb	r2, r2
 800e2da:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	2201      	movs	r2, #1
 800e2e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e2e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3730      	adds	r7, #48	; 0x30
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	4ec4ec4f 	.word	0x4ec4ec4f

0800e2f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b08a      	sub	sp, #40	; 0x28
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	613b      	str	r3, [r7, #16]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	60fb      	str	r3, [r7, #12]
 800e30c:	2300      	movs	r3, #0
 800e30e:	617b      	str	r3, [r7, #20]
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	1c5a      	adds	r2, r3, #1
 800e318:	61ba      	str	r2, [r7, #24]
 800e31a:	693a      	ldr	r2, [r7, #16]
 800e31c:	4413      	add	r3, r2
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e324:	2b1f      	cmp	r3, #31
 800e326:	d940      	bls.n	800e3aa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e32a:	2b2f      	cmp	r3, #47	; 0x2f
 800e32c:	d006      	beq.n	800e33c <create_name+0x48>
 800e32e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e330:	2b5c      	cmp	r3, #92	; 0x5c
 800e332:	d110      	bne.n	800e356 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e334:	e002      	b.n	800e33c <create_name+0x48>
 800e336:	69bb      	ldr	r3, [r7, #24]
 800e338:	3301      	adds	r3, #1
 800e33a:	61bb      	str	r3, [r7, #24]
 800e33c:	693a      	ldr	r2, [r7, #16]
 800e33e:	69bb      	ldr	r3, [r7, #24]
 800e340:	4413      	add	r3, r2
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	2b2f      	cmp	r3, #47	; 0x2f
 800e346:	d0f6      	beq.n	800e336 <create_name+0x42>
 800e348:	693a      	ldr	r2, [r7, #16]
 800e34a:	69bb      	ldr	r3, [r7, #24]
 800e34c:	4413      	add	r3, r2
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	2b5c      	cmp	r3, #92	; 0x5c
 800e352:	d0f0      	beq.n	800e336 <create_name+0x42>
			break;
 800e354:	e02a      	b.n	800e3ac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	2bfe      	cmp	r3, #254	; 0xfe
 800e35a:	d901      	bls.n	800e360 <create_name+0x6c>
 800e35c:	2306      	movs	r3, #6
 800e35e:	e17d      	b.n	800e65c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e362:	b2db      	uxtb	r3, r3
 800e364:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e368:	2101      	movs	r1, #1
 800e36a:	4618      	mov	r0, r3
 800e36c:	f001 f98a 	bl	800f684 <ff_convert>
 800e370:	4603      	mov	r3, r0
 800e372:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e374:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e376:	2b00      	cmp	r3, #0
 800e378:	d101      	bne.n	800e37e <create_name+0x8a>
 800e37a:	2306      	movs	r3, #6
 800e37c:	e16e      	b.n	800e65c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e37e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e380:	2b7f      	cmp	r3, #127	; 0x7f
 800e382:	d809      	bhi.n	800e398 <create_name+0xa4>
 800e384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e386:	4619      	mov	r1, r3
 800e388:	488d      	ldr	r0, [pc, #564]	; (800e5c0 <create_name+0x2cc>)
 800e38a:	f7fe fd64 	bl	800ce56 <chk_chr>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <create_name+0xa4>
 800e394:	2306      	movs	r3, #6
 800e396:	e161      	b.n	800e65c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	1c5a      	adds	r2, r3, #1
 800e39c:	617a      	str	r2, [r7, #20]
 800e39e:	005b      	lsls	r3, r3, #1
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e3a6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e3a8:	e7b4      	b.n	800e314 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e3aa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e3ac:	693a      	ldr	r2, [r7, #16]
 800e3ae:	69bb      	ldr	r3, [r7, #24]
 800e3b0:	441a      	add	r2, r3
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e3b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3b8:	2b1f      	cmp	r3, #31
 800e3ba:	d801      	bhi.n	800e3c0 <create_name+0xcc>
 800e3bc:	2304      	movs	r3, #4
 800e3be:	e000      	b.n	800e3c2 <create_name+0xce>
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e3c6:	e011      	b.n	800e3ec <create_name+0xf8>
		w = lfn[di - 1];
 800e3c8:	697a      	ldr	r2, [r7, #20]
 800e3ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e3ce:	4413      	add	r3, r2
 800e3d0:	005b      	lsls	r3, r3, #1
 800e3d2:	68fa      	ldr	r2, [r7, #12]
 800e3d4:	4413      	add	r3, r2
 800e3d6:	881b      	ldrh	r3, [r3, #0]
 800e3d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e3da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3dc:	2b20      	cmp	r3, #32
 800e3de:	d002      	beq.n	800e3e6 <create_name+0xf2>
 800e3e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3e2:	2b2e      	cmp	r3, #46	; 0x2e
 800e3e4:	d106      	bne.n	800e3f4 <create_name+0x100>
		di--;
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	3b01      	subs	r3, #1
 800e3ea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d1ea      	bne.n	800e3c8 <create_name+0xd4>
 800e3f2:	e000      	b.n	800e3f6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e3f4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	005b      	lsls	r3, r3, #1
 800e3fa:	68fa      	ldr	r2, [r7, #12]
 800e3fc:	4413      	add	r3, r2
 800e3fe:	2200      	movs	r2, #0
 800e400:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d101      	bne.n	800e40c <create_name+0x118>
 800e408:	2306      	movs	r3, #6
 800e40a:	e127      	b.n	800e65c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	3324      	adds	r3, #36	; 0x24
 800e410:	220b      	movs	r2, #11
 800e412:	2120      	movs	r1, #32
 800e414:	4618      	mov	r0, r3
 800e416:	f7fe fcdc 	bl	800cdd2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e41a:	2300      	movs	r3, #0
 800e41c:	61bb      	str	r3, [r7, #24]
 800e41e:	e002      	b.n	800e426 <create_name+0x132>
 800e420:	69bb      	ldr	r3, [r7, #24]
 800e422:	3301      	adds	r3, #1
 800e424:	61bb      	str	r3, [r7, #24]
 800e426:	69bb      	ldr	r3, [r7, #24]
 800e428:	005b      	lsls	r3, r3, #1
 800e42a:	68fa      	ldr	r2, [r7, #12]
 800e42c:	4413      	add	r3, r2
 800e42e:	881b      	ldrh	r3, [r3, #0]
 800e430:	2b20      	cmp	r3, #32
 800e432:	d0f5      	beq.n	800e420 <create_name+0x12c>
 800e434:	69bb      	ldr	r3, [r7, #24]
 800e436:	005b      	lsls	r3, r3, #1
 800e438:	68fa      	ldr	r2, [r7, #12]
 800e43a:	4413      	add	r3, r2
 800e43c:	881b      	ldrh	r3, [r3, #0]
 800e43e:	2b2e      	cmp	r3, #46	; 0x2e
 800e440:	d0ee      	beq.n	800e420 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d009      	beq.n	800e45c <create_name+0x168>
 800e448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e44c:	f043 0303 	orr.w	r3, r3, #3
 800e450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e454:	e002      	b.n	800e45c <create_name+0x168>
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	3b01      	subs	r3, #1
 800e45a:	617b      	str	r3, [r7, #20]
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d009      	beq.n	800e476 <create_name+0x182>
 800e462:	697a      	ldr	r2, [r7, #20]
 800e464:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e468:	4413      	add	r3, r2
 800e46a:	005b      	lsls	r3, r3, #1
 800e46c:	68fa      	ldr	r2, [r7, #12]
 800e46e:	4413      	add	r3, r2
 800e470:	881b      	ldrh	r3, [r3, #0]
 800e472:	2b2e      	cmp	r3, #46	; 0x2e
 800e474:	d1ef      	bne.n	800e456 <create_name+0x162>

	i = b = 0; ni = 8;
 800e476:	2300      	movs	r3, #0
 800e478:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e47c:	2300      	movs	r3, #0
 800e47e:	623b      	str	r3, [r7, #32]
 800e480:	2308      	movs	r3, #8
 800e482:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	1c5a      	adds	r2, r3, #1
 800e488:	61ba      	str	r2, [r7, #24]
 800e48a:	005b      	lsls	r3, r3, #1
 800e48c:	68fa      	ldr	r2, [r7, #12]
 800e48e:	4413      	add	r3, r2
 800e490:	881b      	ldrh	r3, [r3, #0]
 800e492:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e494:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e496:	2b00      	cmp	r3, #0
 800e498:	f000 8090 	beq.w	800e5bc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e49c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e49e:	2b20      	cmp	r3, #32
 800e4a0:	d006      	beq.n	800e4b0 <create_name+0x1bc>
 800e4a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4a4:	2b2e      	cmp	r3, #46	; 0x2e
 800e4a6:	d10a      	bne.n	800e4be <create_name+0x1ca>
 800e4a8:	69ba      	ldr	r2, [r7, #24]
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d006      	beq.n	800e4be <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4b4:	f043 0303 	orr.w	r3, r3, #3
 800e4b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4bc:	e07d      	b.n	800e5ba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e4be:	6a3a      	ldr	r2, [r7, #32]
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d203      	bcs.n	800e4ce <create_name+0x1da>
 800e4c6:	69ba      	ldr	r2, [r7, #24]
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d123      	bne.n	800e516 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	2b0b      	cmp	r3, #11
 800e4d2:	d106      	bne.n	800e4e2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e4d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4d8:	f043 0303 	orr.w	r3, r3, #3
 800e4dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4e0:	e075      	b.n	800e5ce <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e4e2:	69ba      	ldr	r2, [r7, #24]
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d005      	beq.n	800e4f6 <create_name+0x202>
 800e4ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4ee:	f043 0303 	orr.w	r3, r3, #3
 800e4f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e4f6:	69ba      	ldr	r2, [r7, #24]
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d866      	bhi.n	800e5cc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	61bb      	str	r3, [r7, #24]
 800e502:	2308      	movs	r3, #8
 800e504:	623b      	str	r3, [r7, #32]
 800e506:	230b      	movs	r3, #11
 800e508:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e50a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e514:	e051      	b.n	800e5ba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e516:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e518:	2b7f      	cmp	r3, #127	; 0x7f
 800e51a:	d914      	bls.n	800e546 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e51c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e51e:	2100      	movs	r1, #0
 800e520:	4618      	mov	r0, r3
 800e522:	f001 f8af 	bl	800f684 <ff_convert>
 800e526:	4603      	mov	r3, r0
 800e528:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e52a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d004      	beq.n	800e53a <create_name+0x246>
 800e530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e532:	3b80      	subs	r3, #128	; 0x80
 800e534:	4a23      	ldr	r2, [pc, #140]	; (800e5c4 <create_name+0x2d0>)
 800e536:	5cd3      	ldrb	r3, [r2, r3]
 800e538:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e53a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e53e:	f043 0302 	orr.w	r3, r3, #2
 800e542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d007      	beq.n	800e55c <create_name+0x268>
 800e54c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e54e:	4619      	mov	r1, r3
 800e550:	481d      	ldr	r0, [pc, #116]	; (800e5c8 <create_name+0x2d4>)
 800e552:	f7fe fc80 	bl	800ce56 <chk_chr>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d008      	beq.n	800e56e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e55c:	235f      	movs	r3, #95	; 0x5f
 800e55e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e564:	f043 0303 	orr.w	r3, r3, #3
 800e568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e56c:	e01b      	b.n	800e5a6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e56e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e570:	2b40      	cmp	r3, #64	; 0x40
 800e572:	d909      	bls.n	800e588 <create_name+0x294>
 800e574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e576:	2b5a      	cmp	r3, #90	; 0x5a
 800e578:	d806      	bhi.n	800e588 <create_name+0x294>
					b |= 2;
 800e57a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e57e:	f043 0302 	orr.w	r3, r3, #2
 800e582:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e586:	e00e      	b.n	800e5a6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e588:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e58a:	2b60      	cmp	r3, #96	; 0x60
 800e58c:	d90b      	bls.n	800e5a6 <create_name+0x2b2>
 800e58e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e590:	2b7a      	cmp	r3, #122	; 0x7a
 800e592:	d808      	bhi.n	800e5a6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e594:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e598:	f043 0301 	orr.w	r3, r3, #1
 800e59c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e5a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5a2:	3b20      	subs	r3, #32
 800e5a4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e5a6:	6a3b      	ldr	r3, [r7, #32]
 800e5a8:	1c5a      	adds	r2, r3, #1
 800e5aa:	623a      	str	r2, [r7, #32]
 800e5ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e5ae:	b2d1      	uxtb	r1, r2
 800e5b0:	687a      	ldr	r2, [r7, #4]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	460a      	mov	r2, r1
 800e5b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e5ba:	e763      	b.n	800e484 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e5bc:	bf00      	nop
 800e5be:	e006      	b.n	800e5ce <create_name+0x2da>
 800e5c0:	0801196c 	.word	0x0801196c
 800e5c4:	08011a30 	.word	0x08011a30
 800e5c8:	08011978 	.word	0x08011978
			if (si > di) break;			/* No extension */
 800e5cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e5d4:	2be5      	cmp	r3, #229	; 0xe5
 800e5d6:	d103      	bne.n	800e5e0 <create_name+0x2ec>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2205      	movs	r2, #5
 800e5dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	2b08      	cmp	r3, #8
 800e5e4:	d104      	bne.n	800e5f0 <create_name+0x2fc>
 800e5e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5ea:	009b      	lsls	r3, r3, #2
 800e5ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e5f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5f4:	f003 030c 	and.w	r3, r3, #12
 800e5f8:	2b0c      	cmp	r3, #12
 800e5fa:	d005      	beq.n	800e608 <create_name+0x314>
 800e5fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e600:	f003 0303 	and.w	r3, r3, #3
 800e604:	2b03      	cmp	r3, #3
 800e606:	d105      	bne.n	800e614 <create_name+0x320>
 800e608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e60c:	f043 0302 	orr.w	r3, r3, #2
 800e610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e618:	f003 0302 	and.w	r3, r3, #2
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d117      	bne.n	800e650 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e620:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e624:	f003 0303 	and.w	r3, r3, #3
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d105      	bne.n	800e638 <create_name+0x344>
 800e62c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e630:	f043 0310 	orr.w	r3, r3, #16
 800e634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e638:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e63c:	f003 030c 	and.w	r3, r3, #12
 800e640:	2b04      	cmp	r3, #4
 800e642:	d105      	bne.n	800e650 <create_name+0x35c>
 800e644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e648:	f043 0308 	orr.w	r3, r3, #8
 800e64c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e656:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e65a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3728      	adds	r7, #40	; 0x28
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b086      	sub	sp, #24
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e678:	e002      	b.n	800e680 <follow_path+0x1c>
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	3301      	adds	r3, #1
 800e67e:	603b      	str	r3, [r7, #0]
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	2b2f      	cmp	r3, #47	; 0x2f
 800e686:	d0f8      	beq.n	800e67a <follow_path+0x16>
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	2b5c      	cmp	r3, #92	; 0x5c
 800e68e:	d0f4      	beq.n	800e67a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	2200      	movs	r2, #0
 800e694:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	2b1f      	cmp	r3, #31
 800e69c:	d80a      	bhi.n	800e6b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2280      	movs	r2, #128	; 0x80
 800e6a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f7ff f91d 	bl	800d8e8 <dir_sdi>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	75fb      	strb	r3, [r7, #23]
 800e6b2:	e043      	b.n	800e73c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e6b4:	463b      	mov	r3, r7
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f7ff fe1b 	bl	800e2f4 <create_name>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e6c2:	7dfb      	ldrb	r3, [r7, #23]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d134      	bne.n	800e732 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f7ff fc5a 	bl	800df82 <dir_find>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e6d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e6da:	7dfb      	ldrb	r3, [r7, #23]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00a      	beq.n	800e6f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e6e0:	7dfb      	ldrb	r3, [r7, #23]
 800e6e2:	2b04      	cmp	r3, #4
 800e6e4:	d127      	bne.n	800e736 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e6e6:	7afb      	ldrb	r3, [r7, #11]
 800e6e8:	f003 0304 	and.w	r3, r3, #4
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d122      	bne.n	800e736 <follow_path+0xd2>
 800e6f0:	2305      	movs	r3, #5
 800e6f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e6f4:	e01f      	b.n	800e736 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e6f6:	7afb      	ldrb	r3, [r7, #11]
 800e6f8:	f003 0304 	and.w	r3, r3, #4
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d11c      	bne.n	800e73a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	799b      	ldrb	r3, [r3, #6]
 800e704:	f003 0310 	and.w	r3, r3, #16
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d102      	bne.n	800e712 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e70c:	2305      	movs	r3, #5
 800e70e:	75fb      	strb	r3, [r7, #23]
 800e710:	e014      	b.n	800e73c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	695b      	ldr	r3, [r3, #20]
 800e71c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e720:	4413      	add	r3, r2
 800e722:	4619      	mov	r1, r3
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f7ff fa66 	bl	800dbf6 <ld_clust>
 800e72a:	4602      	mov	r2, r0
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e730:	e7c0      	b.n	800e6b4 <follow_path+0x50>
			if (res != FR_OK) break;
 800e732:	bf00      	nop
 800e734:	e002      	b.n	800e73c <follow_path+0xd8>
				break;
 800e736:	bf00      	nop
 800e738:	e000      	b.n	800e73c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e73a:	bf00      	nop
			}
		}
	}

	return res;
 800e73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3718      	adds	r7, #24
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e746:	b480      	push	{r7}
 800e748:	b087      	sub	sp, #28
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e74e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e752:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d031      	beq.n	800e7c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	617b      	str	r3, [r7, #20]
 800e762:	e002      	b.n	800e76a <get_ldnumber+0x24>
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	3301      	adds	r3, #1
 800e768:	617b      	str	r3, [r7, #20]
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	2b1f      	cmp	r3, #31
 800e770:	d903      	bls.n	800e77a <get_ldnumber+0x34>
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	2b3a      	cmp	r3, #58	; 0x3a
 800e778:	d1f4      	bne.n	800e764 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	2b3a      	cmp	r3, #58	; 0x3a
 800e780:	d11c      	bne.n	800e7bc <get_ldnumber+0x76>
			tp = *path;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	1c5a      	adds	r2, r3, #1
 800e78c:	60fa      	str	r2, [r7, #12]
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	3b30      	subs	r3, #48	; 0x30
 800e792:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	2b09      	cmp	r3, #9
 800e798:	d80e      	bhi.n	800e7b8 <get_ldnumber+0x72>
 800e79a:	68fa      	ldr	r2, [r7, #12]
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d10a      	bne.n	800e7b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d107      	bne.n	800e7b8 <get_ldnumber+0x72>
					vol = (int)i;
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	617b      	str	r3, [r7, #20]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	697a      	ldr	r2, [r7, #20]
 800e7b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	e002      	b.n	800e7c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e7bc:	2300      	movs	r3, #0
 800e7be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e7c0:	693b      	ldr	r3, [r7, #16]
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	371c      	adds	r7, #28
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr
	...

0800e7d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b082      	sub	sp, #8
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	70da      	strb	r2, [r3, #3]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7e6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e7e8:	6839      	ldr	r1, [r7, #0]
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f7fe fcfe 	bl	800d1ec <move_window>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d001      	beq.n	800e7fa <check_fs+0x2a>
 800e7f6:	2304      	movs	r3, #4
 800e7f8:	e038      	b.n	800e86c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	3334      	adds	r3, #52	; 0x34
 800e7fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e802:	4618      	mov	r0, r3
 800e804:	f7fe fa42 	bl	800cc8c <ld_word>
 800e808:	4603      	mov	r3, r0
 800e80a:	461a      	mov	r2, r3
 800e80c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e810:	429a      	cmp	r2, r3
 800e812:	d001      	beq.n	800e818 <check_fs+0x48>
 800e814:	2303      	movs	r3, #3
 800e816:	e029      	b.n	800e86c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e81e:	2be9      	cmp	r3, #233	; 0xe9
 800e820:	d009      	beq.n	800e836 <check_fs+0x66>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e828:	2beb      	cmp	r3, #235	; 0xeb
 800e82a:	d11e      	bne.n	800e86a <check_fs+0x9a>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e832:	2b90      	cmp	r3, #144	; 0x90
 800e834:	d119      	bne.n	800e86a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	3334      	adds	r3, #52	; 0x34
 800e83a:	3336      	adds	r3, #54	; 0x36
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7fe fa3d 	bl	800ccbc <ld_dword>
 800e842:	4603      	mov	r3, r0
 800e844:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e848:	4a0a      	ldr	r2, [pc, #40]	; (800e874 <check_fs+0xa4>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d101      	bne.n	800e852 <check_fs+0x82>
 800e84e:	2300      	movs	r3, #0
 800e850:	e00c      	b.n	800e86c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	3334      	adds	r3, #52	; 0x34
 800e856:	3352      	adds	r3, #82	; 0x52
 800e858:	4618      	mov	r0, r3
 800e85a:	f7fe fa2f 	bl	800ccbc <ld_dword>
 800e85e:	4603      	mov	r3, r0
 800e860:	4a05      	ldr	r2, [pc, #20]	; (800e878 <check_fs+0xa8>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d101      	bne.n	800e86a <check_fs+0x9a>
 800e866:	2300      	movs	r3, #0
 800e868:	e000      	b.n	800e86c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e86a:	2302      	movs	r3, #2
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3708      	adds	r7, #8
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	00544146 	.word	0x00544146
 800e878:	33544146 	.word	0x33544146

0800e87c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b096      	sub	sp, #88	; 0x58
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	4613      	mov	r3, r2
 800e888:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	2200      	movs	r2, #0
 800e88e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f7ff ff58 	bl	800e746 <get_ldnumber>
 800e896:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	da01      	bge.n	800e8a2 <find_volume+0x26>
 800e89e:	230b      	movs	r3, #11
 800e8a0:	e230      	b.n	800ed04 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e8a2:	4aa1      	ldr	r2, [pc, #644]	; (800eb28 <find_volume+0x2ac>)
 800e8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d101      	bne.n	800e8b6 <find_volume+0x3a>
 800e8b2:	230c      	movs	r3, #12
 800e8b4:	e226      	b.n	800ed04 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e8bc:	79fb      	ldrb	r3, [r7, #7]
 800e8be:	f023 0301 	bic.w	r3, r3, #1
 800e8c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d01a      	beq.n	800e902 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ce:	785b      	ldrb	r3, [r3, #1]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fe f93d 	bl	800cb50 <disk_status>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e8dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8e0:	f003 0301 	and.w	r3, r3, #1
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d10c      	bne.n	800e902 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e8e8:	79fb      	ldrb	r3, [r7, #7]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d007      	beq.n	800e8fe <find_volume+0x82>
 800e8ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8f2:	f003 0304 	and.w	r3, r3, #4
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d001      	beq.n	800e8fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e8fa:	230a      	movs	r3, #10
 800e8fc:	e202      	b.n	800ed04 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800e8fe:	2300      	movs	r3, #0
 800e900:	e200      	b.n	800ed04 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e904:	2200      	movs	r2, #0
 800e906:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e90a:	b2da      	uxtb	r2, r3
 800e90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e912:	785b      	ldrb	r3, [r3, #1]
 800e914:	4618      	mov	r0, r3
 800e916:	f7fe f935 	bl	800cb84 <disk_initialize>
 800e91a:	4603      	mov	r3, r0
 800e91c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e920:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e924:	f003 0301 	and.w	r3, r3, #1
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d001      	beq.n	800e930 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e92c:	2303      	movs	r3, #3
 800e92e:	e1e9      	b.n	800ed04 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e930:	79fb      	ldrb	r3, [r7, #7]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d007      	beq.n	800e946 <find_volume+0xca>
 800e936:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e93a:	f003 0304 	and.w	r3, r3, #4
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d001      	beq.n	800e946 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e942:	230a      	movs	r3, #10
 800e944:	e1de      	b.n	800ed04 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e946:	2300      	movs	r3, #0
 800e948:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e94a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e94c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e94e:	f7ff ff3f 	bl	800e7d0 <check_fs>
 800e952:	4603      	mov	r3, r0
 800e954:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e958:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e95c:	2b02      	cmp	r3, #2
 800e95e:	d149      	bne.n	800e9f4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e960:	2300      	movs	r3, #0
 800e962:	643b      	str	r3, [r7, #64]	; 0x40
 800e964:	e01e      	b.n	800e9a4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e968:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e96c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e96e:	011b      	lsls	r3, r3, #4
 800e970:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e974:	4413      	add	r3, r2
 800e976:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97a:	3304      	adds	r3, #4
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d006      	beq.n	800e990 <find_volume+0x114>
 800e982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e984:	3308      	adds	r3, #8
 800e986:	4618      	mov	r0, r3
 800e988:	f7fe f998 	bl	800ccbc <ld_dword>
 800e98c:	4602      	mov	r2, r0
 800e98e:	e000      	b.n	800e992 <find_volume+0x116>
 800e990:	2200      	movs	r2, #0
 800e992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	3358      	adds	r3, #88	; 0x58
 800e998:	443b      	add	r3, r7
 800e99a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e99e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	643b      	str	r3, [r7, #64]	; 0x40
 800e9a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9a6:	2b03      	cmp	r3, #3
 800e9a8:	d9dd      	bls.n	800e966 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e9ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d002      	beq.n	800e9ba <find_volume+0x13e>
 800e9b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9b6:	3b01      	subs	r3, #1
 800e9b8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e9ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9bc:	009b      	lsls	r3, r3, #2
 800e9be:	3358      	adds	r3, #88	; 0x58
 800e9c0:	443b      	add	r3, r7
 800e9c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e9c6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e9c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d005      	beq.n	800e9da <find_volume+0x15e>
 800e9ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e9d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e9d2:	f7ff fefd 	bl	800e7d0 <check_fs>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	e000      	b.n	800e9dc <find_volume+0x160>
 800e9da:	2303      	movs	r3, #3
 800e9dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e9e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d905      	bls.n	800e9f4 <find_volume+0x178>
 800e9e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	643b      	str	r3, [r7, #64]	; 0x40
 800e9ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9f0:	2b03      	cmp	r3, #3
 800e9f2:	d9e2      	bls.n	800e9ba <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e9f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e9f8:	2b04      	cmp	r3, #4
 800e9fa:	d101      	bne.n	800ea00 <find_volume+0x184>
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	e181      	b.n	800ed04 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ea00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d901      	bls.n	800ea0c <find_volume+0x190>
 800ea08:	230d      	movs	r3, #13
 800ea0a:	e17b      	b.n	800ed04 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ea0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0e:	3334      	adds	r3, #52	; 0x34
 800ea10:	330b      	adds	r3, #11
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7fe f93a 	bl	800cc8c <ld_word>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea1e:	d001      	beq.n	800ea24 <find_volume+0x1a8>
 800ea20:	230d      	movs	r3, #13
 800ea22:	e16f      	b.n	800ed04 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ea24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea26:	3334      	adds	r3, #52	; 0x34
 800ea28:	3316      	adds	r3, #22
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe f92e 	bl	800cc8c <ld_word>
 800ea30:	4603      	mov	r3, r0
 800ea32:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ea34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d106      	bne.n	800ea48 <find_volume+0x1cc>
 800ea3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea3c:	3334      	adds	r3, #52	; 0x34
 800ea3e:	3324      	adds	r3, #36	; 0x24
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7fe f93b 	bl	800ccbc <ld_dword>
 800ea46:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ea48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ea4c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ea4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea50:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ea54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea56:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ea58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea5a:	789b      	ldrb	r3, [r3, #2]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d005      	beq.n	800ea6c <find_volume+0x1f0>
 800ea60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea62:	789b      	ldrb	r3, [r3, #2]
 800ea64:	2b02      	cmp	r3, #2
 800ea66:	d001      	beq.n	800ea6c <find_volume+0x1f0>
 800ea68:	230d      	movs	r3, #13
 800ea6a:	e14b      	b.n	800ed04 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ea6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea6e:	789b      	ldrb	r3, [r3, #2]
 800ea70:	461a      	mov	r2, r3
 800ea72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea74:	fb02 f303 	mul.w	r3, r2, r3
 800ea78:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ea7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ea80:	b29a      	uxth	r2, r3
 800ea82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea84:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ea86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea88:	895b      	ldrh	r3, [r3, #10]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d008      	beq.n	800eaa0 <find_volume+0x224>
 800ea8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea90:	895b      	ldrh	r3, [r3, #10]
 800ea92:	461a      	mov	r2, r3
 800ea94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea96:	895b      	ldrh	r3, [r3, #10]
 800ea98:	3b01      	subs	r3, #1
 800ea9a:	4013      	ands	r3, r2
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d001      	beq.n	800eaa4 <find_volume+0x228>
 800eaa0:	230d      	movs	r3, #13
 800eaa2:	e12f      	b.n	800ed04 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800eaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa6:	3334      	adds	r3, #52	; 0x34
 800eaa8:	3311      	adds	r3, #17
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fe f8ee 	bl	800cc8c <ld_word>
 800eab0:	4603      	mov	r3, r0
 800eab2:	461a      	mov	r2, r3
 800eab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800eab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaba:	891b      	ldrh	r3, [r3, #8]
 800eabc:	f003 030f 	and.w	r3, r3, #15
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <find_volume+0x24e>
 800eac6:	230d      	movs	r3, #13
 800eac8:	e11c      	b.n	800ed04 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800eaca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eacc:	3334      	adds	r3, #52	; 0x34
 800eace:	3313      	adds	r3, #19
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7fe f8db 	bl	800cc8c <ld_word>
 800ead6:	4603      	mov	r3, r0
 800ead8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800eada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d106      	bne.n	800eaee <find_volume+0x272>
 800eae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae2:	3334      	adds	r3, #52	; 0x34
 800eae4:	3320      	adds	r3, #32
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7fe f8e8 	bl	800ccbc <ld_dword>
 800eaec:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800eaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf0:	3334      	adds	r3, #52	; 0x34
 800eaf2:	330e      	adds	r3, #14
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f7fe f8c9 	bl	800cc8c <ld_word>
 800eafa:	4603      	mov	r3, r0
 800eafc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800eafe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d101      	bne.n	800eb08 <find_volume+0x28c>
 800eb04:	230d      	movs	r3, #13
 800eb06:	e0fd      	b.n	800ed04 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800eb08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eb0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb0c:	4413      	add	r3, r2
 800eb0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb10:	8912      	ldrh	r2, [r2, #8]
 800eb12:	0912      	lsrs	r2, r2, #4
 800eb14:	b292      	uxth	r2, r2
 800eb16:	4413      	add	r3, r2
 800eb18:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800eb1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d204      	bcs.n	800eb2c <find_volume+0x2b0>
 800eb22:	230d      	movs	r3, #13
 800eb24:	e0ee      	b.n	800ed04 <find_volume+0x488>
 800eb26:	bf00      	nop
 800eb28:	20002870 	.word	0x20002870
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800eb2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb34:	8952      	ldrh	r2, [r2, #10]
 800eb36:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb3a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d101      	bne.n	800eb46 <find_volume+0x2ca>
 800eb42:	230d      	movs	r3, #13
 800eb44:	e0de      	b.n	800ed04 <find_volume+0x488>
		fmt = FS_FAT32;
 800eb46:	2303      	movs	r3, #3
 800eb48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800eb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d802      	bhi.n	800eb5c <find_volume+0x2e0>
 800eb56:	2302      	movs	r3, #2
 800eb58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d802      	bhi.n	800eb6c <find_volume+0x2f0>
 800eb66:	2301      	movs	r3, #1
 800eb68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800eb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6e:	1c9a      	adds	r2, r3, #2
 800eb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb72:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800eb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb78:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eb7a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eb7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb7e:	441a      	add	r2, r3
 800eb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb82:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800eb84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb88:	441a      	add	r2, r3
 800eb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb8c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800eb8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb92:	2b03      	cmp	r3, #3
 800eb94:	d11e      	bne.n	800ebd4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800eb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb98:	3334      	adds	r3, #52	; 0x34
 800eb9a:	332a      	adds	r3, #42	; 0x2a
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7fe f875 	bl	800cc8c <ld_word>
 800eba2:	4603      	mov	r3, r0
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d001      	beq.n	800ebac <find_volume+0x330>
 800eba8:	230d      	movs	r3, #13
 800ebaa:	e0ab      	b.n	800ed04 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ebac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebae:	891b      	ldrh	r3, [r3, #8]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d001      	beq.n	800ebb8 <find_volume+0x33c>
 800ebb4:	230d      	movs	r3, #13
 800ebb6:	e0a5      	b.n	800ed04 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ebb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebba:	3334      	adds	r3, #52	; 0x34
 800ebbc:	332c      	adds	r3, #44	; 0x2c
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7fe f87c 	bl	800ccbc <ld_dword>
 800ebc4:	4602      	mov	r2, r0
 800ebc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ebca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebcc:	699b      	ldr	r3, [r3, #24]
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	647b      	str	r3, [r7, #68]	; 0x44
 800ebd2:	e01f      	b.n	800ec14 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ebd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd6:	891b      	ldrh	r3, [r3, #8]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d101      	bne.n	800ebe0 <find_volume+0x364>
 800ebdc:	230d      	movs	r3, #13
 800ebde:	e091      	b.n	800ed04 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ebe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebe6:	441a      	add	r2, r3
 800ebe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebea:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ebec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebf0:	2b02      	cmp	r3, #2
 800ebf2:	d103      	bne.n	800ebfc <find_volume+0x380>
 800ebf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf6:	699b      	ldr	r3, [r3, #24]
 800ebf8:	005b      	lsls	r3, r3, #1
 800ebfa:	e00a      	b.n	800ec12 <find_volume+0x396>
 800ebfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfe:	699a      	ldr	r2, [r3, #24]
 800ec00:	4613      	mov	r3, r2
 800ec02:	005b      	lsls	r3, r3, #1
 800ec04:	4413      	add	r3, r2
 800ec06:	085a      	lsrs	r2, r3, #1
 800ec08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec0a:	699b      	ldr	r3, [r3, #24]
 800ec0c:	f003 0301 	and.w	r3, r3, #1
 800ec10:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ec12:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ec14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec16:	69da      	ldr	r2, [r3, #28]
 800ec18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec1a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ec1e:	0a5b      	lsrs	r3, r3, #9
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d201      	bcs.n	800ec28 <find_volume+0x3ac>
 800ec24:	230d      	movs	r3, #13
 800ec26:	e06d      	b.n	800ed04 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ec28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec2e:	615a      	str	r2, [r3, #20]
 800ec30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec32:	695a      	ldr	r2, [r3, #20]
 800ec34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec36:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ec38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3a:	2280      	movs	r2, #128	; 0x80
 800ec3c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ec3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec42:	2b03      	cmp	r3, #3
 800ec44:	d149      	bne.n	800ecda <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ec46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec48:	3334      	adds	r3, #52	; 0x34
 800ec4a:	3330      	adds	r3, #48	; 0x30
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7fe f81d 	bl	800cc8c <ld_word>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	d140      	bne.n	800ecda <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ec58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec60:	f7fe fac4 	bl	800d1ec <move_window>
 800ec64:	4603      	mov	r3, r0
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d137      	bne.n	800ecda <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ec6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ec70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec72:	3334      	adds	r3, #52	; 0x34
 800ec74:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fe f807 	bl	800cc8c <ld_word>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	461a      	mov	r2, r3
 800ec82:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d127      	bne.n	800ecda <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ec8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8c:	3334      	adds	r3, #52	; 0x34
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7fe f814 	bl	800ccbc <ld_dword>
 800ec94:	4603      	mov	r3, r0
 800ec96:	4a1d      	ldr	r2, [pc, #116]	; (800ed0c <find_volume+0x490>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d11e      	bne.n	800ecda <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ec9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9e:	3334      	adds	r3, #52	; 0x34
 800eca0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7fe f809 	bl	800ccbc <ld_dword>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	4a18      	ldr	r2, [pc, #96]	; (800ed10 <find_volume+0x494>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d113      	bne.n	800ecda <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ecb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb4:	3334      	adds	r3, #52	; 0x34
 800ecb6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7fd fffe 	bl	800ccbc <ld_dword>
 800ecc0:	4602      	mov	r2, r0
 800ecc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ecc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc8:	3334      	adds	r3, #52	; 0x34
 800ecca:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fd fff4 	bl	800ccbc <ld_dword>
 800ecd4:	4602      	mov	r2, r0
 800ecd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ecda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecdc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ece0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ece2:	4b0c      	ldr	r3, [pc, #48]	; (800ed14 <find_volume+0x498>)
 800ece4:	881b      	ldrh	r3, [r3, #0]
 800ece6:	3301      	adds	r3, #1
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	4b0a      	ldr	r3, [pc, #40]	; (800ed14 <find_volume+0x498>)
 800ecec:	801a      	strh	r2, [r3, #0]
 800ecee:	4b09      	ldr	r3, [pc, #36]	; (800ed14 <find_volume+0x498>)
 800ecf0:	881a      	ldrh	r2, [r3, #0]
 800ecf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ecf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf8:	4a07      	ldr	r2, [pc, #28]	; (800ed18 <find_volume+0x49c>)
 800ecfa:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ecfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ecfe:	f7fe fa0d 	bl	800d11c <clear_lock>
#endif
	return FR_OK;
 800ed02:	2300      	movs	r3, #0
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3758      	adds	r7, #88	; 0x58
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}
 800ed0c:	41615252 	.word	0x41615252
 800ed10:	61417272 	.word	0x61417272
 800ed14:	20002874 	.word	0x20002874
 800ed18:	20002898 	.word	0x20002898

0800ed1c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ed26:	2309      	movs	r3, #9
 800ed28:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d01c      	beq.n	800ed6a <validate+0x4e>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d018      	beq.n	800ed6a <validate+0x4e>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d013      	beq.n	800ed6a <validate+0x4e>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	889a      	ldrh	r2, [r3, #4]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	88db      	ldrh	r3, [r3, #6]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d10c      	bne.n	800ed6a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	785b      	ldrb	r3, [r3, #1]
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fd fefa 	bl	800cb50 <disk_status>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	f003 0301 	and.w	r3, r3, #1
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d101      	bne.n	800ed6a <validate+0x4e>
			res = FR_OK;
 800ed66:	2300      	movs	r3, #0
 800ed68:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ed6a:	7bfb      	ldrb	r3, [r7, #15]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d102      	bne.n	800ed76 <validate+0x5a>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	e000      	b.n	800ed78 <validate+0x5c>
 800ed76:	2300      	movs	r3, #0
 800ed78:	683a      	ldr	r2, [r7, #0]
 800ed7a:	6013      	str	r3, [r2, #0]
	return res;
 800ed7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3710      	adds	r7, #16
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
	...

0800ed88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b088      	sub	sp, #32
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	60f8      	str	r0, [r7, #12]
 800ed90:	60b9      	str	r1, [r7, #8]
 800ed92:	4613      	mov	r3, r2
 800ed94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ed9a:	f107 0310 	add.w	r3, r7, #16
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7ff fcd1 	bl	800e746 <get_ldnumber>
 800eda4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800eda6:	69fb      	ldr	r3, [r7, #28]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	da01      	bge.n	800edb0 <f_mount+0x28>
 800edac:	230b      	movs	r3, #11
 800edae:	e02b      	b.n	800ee08 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800edb0:	4a17      	ldr	r2, [pc, #92]	; (800ee10 <f_mount+0x88>)
 800edb2:	69fb      	ldr	r3, [r7, #28]
 800edb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edb8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800edba:	69bb      	ldr	r3, [r7, #24]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d005      	beq.n	800edcc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800edc0:	69b8      	ldr	r0, [r7, #24]
 800edc2:	f7fe f9ab 	bl	800d11c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	2200      	movs	r2, #0
 800edca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d002      	beq.n	800edd8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2200      	movs	r2, #0
 800edd6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800edd8:	68fa      	ldr	r2, [r7, #12]
 800edda:	490d      	ldr	r1, [pc, #52]	; (800ee10 <f_mount+0x88>)
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d002      	beq.n	800edee <f_mount+0x66>
 800ede8:	79fb      	ldrb	r3, [r7, #7]
 800edea:	2b01      	cmp	r3, #1
 800edec:	d001      	beq.n	800edf2 <f_mount+0x6a>
 800edee:	2300      	movs	r3, #0
 800edf0:	e00a      	b.n	800ee08 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800edf2:	f107 010c 	add.w	r1, r7, #12
 800edf6:	f107 0308 	add.w	r3, r7, #8
 800edfa:	2200      	movs	r2, #0
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7ff fd3d 	bl	800e87c <find_volume>
 800ee02:	4603      	mov	r3, r0
 800ee04:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ee06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3720      	adds	r7, #32
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}
 800ee10:	20002870 	.word	0x20002870

0800ee14 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b09a      	sub	sp, #104	; 0x68
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	60f8      	str	r0, [r7, #12]
 800ee1c:	60b9      	str	r1, [r7, #8]
 800ee1e:	4613      	mov	r3, r2
 800ee20:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d101      	bne.n	800ee2c <f_open+0x18>
 800ee28:	2309      	movs	r3, #9
 800ee2a:	e1ad      	b.n	800f188 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ee2c:	79fb      	ldrb	r3, [r7, #7]
 800ee2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee32:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ee34:	79fa      	ldrb	r2, [r7, #7]
 800ee36:	f107 0114 	add.w	r1, r7, #20
 800ee3a:	f107 0308 	add.w	r3, r7, #8
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7ff fd1c 	bl	800e87c <find_volume>
 800ee44:	4603      	mov	r3, r0
 800ee46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ee4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	f040 8191 	bne.w	800f176 <f_open+0x362>
		dj.obj.fs = fs;
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ee58:	68ba      	ldr	r2, [r7, #8]
 800ee5a:	f107 0318 	add.w	r3, r7, #24
 800ee5e:	4611      	mov	r1, r2
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7ff fbff 	bl	800e664 <follow_path>
 800ee66:	4603      	mov	r3, r0
 800ee68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ee6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d11a      	bne.n	800eeaa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ee74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ee78:	b25b      	sxtb	r3, r3
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	da03      	bge.n	800ee86 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ee7e:	2306      	movs	r3, #6
 800ee80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ee84:	e011      	b.n	800eeaa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ee86:	79fb      	ldrb	r3, [r7, #7]
 800ee88:	f023 0301 	bic.w	r3, r3, #1
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	bf14      	ite	ne
 800ee90:	2301      	movne	r3, #1
 800ee92:	2300      	moveq	r3, #0
 800ee94:	b2db      	uxtb	r3, r3
 800ee96:	461a      	mov	r2, r3
 800ee98:	f107 0318 	add.w	r3, r7, #24
 800ee9c:	4611      	mov	r1, r2
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7fd fff4 	bl	800ce8c <chk_lock>
 800eea4:	4603      	mov	r3, r0
 800eea6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800eeaa:	79fb      	ldrb	r3, [r7, #7]
 800eeac:	f003 031c 	and.w	r3, r3, #28
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d07f      	beq.n	800efb4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800eeb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d017      	beq.n	800eeec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800eebc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eec0:	2b04      	cmp	r3, #4
 800eec2:	d10e      	bne.n	800eee2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800eec4:	f7fe f83e 	bl	800cf44 <enq_lock>
 800eec8:	4603      	mov	r3, r0
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d006      	beq.n	800eedc <f_open+0xc8>
 800eece:	f107 0318 	add.w	r3, r7, #24
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7ff f916 	bl	800e104 <dir_register>
 800eed8:	4603      	mov	r3, r0
 800eeda:	e000      	b.n	800eede <f_open+0xca>
 800eedc:	2312      	movs	r3, #18
 800eede:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eee2:	79fb      	ldrb	r3, [r7, #7]
 800eee4:	f043 0308 	orr.w	r3, r3, #8
 800eee8:	71fb      	strb	r3, [r7, #7]
 800eeea:	e010      	b.n	800ef0e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eeec:	7fbb      	ldrb	r3, [r7, #30]
 800eeee:	f003 0311 	and.w	r3, r3, #17
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d003      	beq.n	800eefe <f_open+0xea>
					res = FR_DENIED;
 800eef6:	2307      	movs	r3, #7
 800eef8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eefc:	e007      	b.n	800ef0e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eefe:	79fb      	ldrb	r3, [r7, #7]
 800ef00:	f003 0304 	and.w	r3, r3, #4
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d002      	beq.n	800ef0e <f_open+0xfa>
 800ef08:	2308      	movs	r3, #8
 800ef0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ef0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d168      	bne.n	800efe8 <f_open+0x1d4>
 800ef16:	79fb      	ldrb	r3, [r7, #7]
 800ef18:	f003 0308 	and.w	r3, r3, #8
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d063      	beq.n	800efe8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ef20:	f7fb fbe8 	bl	800a6f4 <get_fattime>
 800ef24:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ef26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef28:	330e      	adds	r3, #14
 800ef2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7fd ff03 	bl	800cd38 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ef32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef34:	3316      	adds	r3, #22
 800ef36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7fd fefd 	bl	800cd38 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ef3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef40:	330b      	adds	r3, #11
 800ef42:	2220      	movs	r2, #32
 800ef44:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef4a:	4611      	mov	r1, r2
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f7fe fe52 	bl	800dbf6 <ld_clust>
 800ef52:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef58:	2200      	movs	r2, #0
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fe fe6a 	bl	800dc34 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ef60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef62:	331c      	adds	r3, #28
 800ef64:	2100      	movs	r1, #0
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fd fee6 	bl	800cd38 <st_dword>
					fs->wflag = 1;
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ef72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d037      	beq.n	800efe8 <f_open+0x1d4>
						dw = fs->winsect;
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef7c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ef7e:	f107 0318 	add.w	r3, r7, #24
 800ef82:	2200      	movs	r2, #0
 800ef84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fe fb7d 	bl	800d686 <remove_chain>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ef92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d126      	bne.n	800efe8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fe f924 	bl	800d1ec <move_window>
 800efa4:	4603      	mov	r3, r0
 800efa6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800efae:	3a01      	subs	r2, #1
 800efb0:	611a      	str	r2, [r3, #16]
 800efb2:	e019      	b.n	800efe8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800efb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d115      	bne.n	800efe8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800efbc:	7fbb      	ldrb	r3, [r7, #30]
 800efbe:	f003 0310 	and.w	r3, r3, #16
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d003      	beq.n	800efce <f_open+0x1ba>
					res = FR_NO_FILE;
 800efc6:	2304      	movs	r3, #4
 800efc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800efcc:	e00c      	b.n	800efe8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800efce:	79fb      	ldrb	r3, [r7, #7]
 800efd0:	f003 0302 	and.w	r3, r3, #2
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d007      	beq.n	800efe8 <f_open+0x1d4>
 800efd8:	7fbb      	ldrb	r3, [r7, #30]
 800efda:	f003 0301 	and.w	r3, r3, #1
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d002      	beq.n	800efe8 <f_open+0x1d4>
						res = FR_DENIED;
 800efe2:	2307      	movs	r3, #7
 800efe4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800efe8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800efec:	2b00      	cmp	r3, #0
 800efee:	d128      	bne.n	800f042 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800eff0:	79fb      	ldrb	r3, [r7, #7]
 800eff2:	f003 0308 	and.w	r3, r3, #8
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d003      	beq.n	800f002 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800effa:	79fb      	ldrb	r3, [r7, #7]
 800effc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f000:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f00a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f010:	79fb      	ldrb	r3, [r7, #7]
 800f012:	f023 0301 	bic.w	r3, r3, #1
 800f016:	2b00      	cmp	r3, #0
 800f018:	bf14      	ite	ne
 800f01a:	2301      	movne	r3, #1
 800f01c:	2300      	moveq	r3, #0
 800f01e:	b2db      	uxtb	r3, r3
 800f020:	461a      	mov	r2, r3
 800f022:	f107 0318 	add.w	r3, r7, #24
 800f026:	4611      	mov	r1, r2
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fd ffad 	bl	800cf88 <inc_lock>
 800f02e:	4602      	mov	r2, r0
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	691b      	ldr	r3, [r3, #16]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d102      	bne.n	800f042 <f_open+0x22e>
 800f03c:	2302      	movs	r3, #2
 800f03e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f042:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f046:	2b00      	cmp	r3, #0
 800f048:	f040 8095 	bne.w	800f176 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f050:	4611      	mov	r1, r2
 800f052:	4618      	mov	r0, r3
 800f054:	f7fe fdcf 	bl	800dbf6 <ld_clust>
 800f058:	4602      	mov	r2, r0
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f060:	331c      	adds	r3, #28
 800f062:	4618      	mov	r0, r3
 800f064:	f7fd fe2a 	bl	800ccbc <ld_dword>
 800f068:	4602      	mov	r2, r0
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2200      	movs	r2, #0
 800f072:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f074:	697a      	ldr	r2, [r7, #20]
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	88da      	ldrh	r2, [r3, #6]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	79fa      	ldrb	r2, [r7, #7]
 800f086:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	2200      	movs	r2, #0
 800f08c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2200      	movs	r2, #0
 800f092:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2200      	movs	r2, #0
 800f098:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	3330      	adds	r3, #48	; 0x30
 800f09e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7fd fe94 	bl	800cdd2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f0aa:	79fb      	ldrb	r3, [r7, #7]
 800f0ac:	f003 0320 	and.w	r3, r3, #32
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d060      	beq.n	800f176 <f_open+0x362>
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	68db      	ldr	r3, [r3, #12]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d05c      	beq.n	800f176 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	68da      	ldr	r2, [r3, #12]
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	895b      	ldrh	r3, [r3, #10]
 800f0c8:	025b      	lsls	r3, r3, #9
 800f0ca:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	689b      	ldr	r3, [r3, #8]
 800f0d0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	68db      	ldr	r3, [r3, #12]
 800f0d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0d8:	e016      	b.n	800f108 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7fe f93f 	bl	800d362 <get_fat>
 800f0e4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f0e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d802      	bhi.n	800f0f2 <f_open+0x2de>
 800f0ec:	2302      	movs	r3, #2
 800f0ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f0f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0f8:	d102      	bne.n	800f100 <f_open+0x2ec>
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f100:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f104:	1ad3      	subs	r3, r2, r3
 800f106:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f108:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d103      	bne.n	800f118 <f_open+0x304>
 800f110:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f114:	429a      	cmp	r2, r3
 800f116:	d8e0      	bhi.n	800f0da <f_open+0x2c6>
				}
				fp->clust = clst;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f11c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f11e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f122:	2b00      	cmp	r3, #0
 800f124:	d127      	bne.n	800f176 <f_open+0x362>
 800f126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d022      	beq.n	800f176 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f134:	4618      	mov	r0, r3
 800f136:	f7fe f8f5 	bl	800d324 <clust2sect>
 800f13a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f13c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d103      	bne.n	800f14a <f_open+0x336>
						res = FR_INT_ERR;
 800f142:	2302      	movs	r3, #2
 800f144:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f148:	e015      	b.n	800f176 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f14a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f14c:	0a5a      	lsrs	r2, r3, #9
 800f14e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f150:	441a      	add	r2, r3
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	7858      	ldrb	r0, [r3, #1]
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	6a1a      	ldr	r2, [r3, #32]
 800f164:	2301      	movs	r3, #1
 800f166:	f7fd fd33 	bl	800cbd0 <disk_read>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d002      	beq.n	800f176 <f_open+0x362>
 800f170:	2301      	movs	r3, #1
 800f172:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f176:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d002      	beq.n	800f184 <f_open+0x370>
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2200      	movs	r2, #0
 800f182:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f184:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3768      	adds	r7, #104	; 0x68
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b08c      	sub	sp, #48	; 0x30
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	607a      	str	r2, [r7, #4]
 800f19c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f107 0210 	add.w	r2, r7, #16
 800f1ae:	4611      	mov	r1, r2
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7ff fdb3 	bl	800ed1c <validate>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f1bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d107      	bne.n	800f1d4 <f_write+0x44>
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	7d5b      	ldrb	r3, [r3, #21]
 800f1c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f1cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d002      	beq.n	800f1da <f_write+0x4a>
 800f1d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f1d8:	e14b      	b.n	800f472 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	7d1b      	ldrb	r3, [r3, #20]
 800f1de:	f003 0302 	and.w	r3, r3, #2
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d101      	bne.n	800f1ea <f_write+0x5a>
 800f1e6:	2307      	movs	r3, #7
 800f1e8:	e143      	b.n	800f472 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	699a      	ldr	r2, [r3, #24]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	441a      	add	r2, r3
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	699b      	ldr	r3, [r3, #24]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	f080 812d 	bcs.w	800f456 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	699b      	ldr	r3, [r3, #24]
 800f200:	43db      	mvns	r3, r3
 800f202:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f204:	e127      	b.n	800f456 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	699b      	ldr	r3, [r3, #24]
 800f20a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f20e:	2b00      	cmp	r3, #0
 800f210:	f040 80e3 	bne.w	800f3da <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	699b      	ldr	r3, [r3, #24]
 800f218:	0a5b      	lsrs	r3, r3, #9
 800f21a:	693a      	ldr	r2, [r7, #16]
 800f21c:	8952      	ldrh	r2, [r2, #10]
 800f21e:	3a01      	subs	r2, #1
 800f220:	4013      	ands	r3, r2
 800f222:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f224:	69bb      	ldr	r3, [r7, #24]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d143      	bne.n	800f2b2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	699b      	ldr	r3, [r3, #24]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d10c      	bne.n	800f24c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	689b      	ldr	r3, [r3, #8]
 800f236:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d11a      	bne.n	800f274 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2100      	movs	r1, #0
 800f242:	4618      	mov	r0, r3
 800f244:	f7fe fa84 	bl	800d750 <create_chain>
 800f248:	62b8      	str	r0, [r7, #40]	; 0x28
 800f24a:	e013      	b.n	800f274 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f250:	2b00      	cmp	r3, #0
 800f252:	d007      	beq.n	800f264 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	699b      	ldr	r3, [r3, #24]
 800f258:	4619      	mov	r1, r3
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	f7fe fb10 	bl	800d880 <clmt_clust>
 800f260:	62b8      	str	r0, [r7, #40]	; 0x28
 800f262:	e007      	b.n	800f274 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f264:	68fa      	ldr	r2, [r7, #12]
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	69db      	ldr	r3, [r3, #28]
 800f26a:	4619      	mov	r1, r3
 800f26c:	4610      	mov	r0, r2
 800f26e:	f7fe fa6f 	bl	800d750 <create_chain>
 800f272:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f276:	2b00      	cmp	r3, #0
 800f278:	f000 80f2 	beq.w	800f460 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27e:	2b01      	cmp	r3, #1
 800f280:	d104      	bne.n	800f28c <f_write+0xfc>
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2202      	movs	r2, #2
 800f286:	755a      	strb	r2, [r3, #21]
 800f288:	2302      	movs	r3, #2
 800f28a:	e0f2      	b.n	800f472 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f292:	d104      	bne.n	800f29e <f_write+0x10e>
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	2201      	movs	r2, #1
 800f298:	755a      	strb	r2, [r3, #21]
 800f29a:	2301      	movs	r3, #1
 800f29c:	e0e9      	b.n	800f472 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2a2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	689b      	ldr	r3, [r3, #8]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d102      	bne.n	800f2b2 <f_write+0x122>
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2b0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	7d1b      	ldrb	r3, [r3, #20]
 800f2b6:	b25b      	sxtb	r3, r3
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	da18      	bge.n	800f2ee <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	7858      	ldrb	r0, [r3, #1]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	6a1a      	ldr	r2, [r3, #32]
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	f7fd fca0 	bl	800cc10 <disk_write>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d004      	beq.n	800f2e0 <f_write+0x150>
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2201      	movs	r2, #1
 800f2da:	755a      	strb	r2, [r3, #21]
 800f2dc:	2301      	movs	r3, #1
 800f2de:	e0c8      	b.n	800f472 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	7d1b      	ldrb	r3, [r3, #20]
 800f2e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2e8:	b2da      	uxtb	r2, r3
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f2ee:	693a      	ldr	r2, [r7, #16]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	69db      	ldr	r3, [r3, #28]
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	4610      	mov	r0, r2
 800f2f8:	f7fe f814 	bl	800d324 <clust2sect>
 800f2fc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d104      	bne.n	800f30e <f_write+0x17e>
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2202      	movs	r2, #2
 800f308:	755a      	strb	r2, [r3, #21]
 800f30a:	2302      	movs	r3, #2
 800f30c:	e0b1      	b.n	800f472 <f_write+0x2e2>
			sect += csect;
 800f30e:	697a      	ldr	r2, [r7, #20]
 800f310:	69bb      	ldr	r3, [r7, #24]
 800f312:	4413      	add	r3, r2
 800f314:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	0a5b      	lsrs	r3, r3, #9
 800f31a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f31c:	6a3b      	ldr	r3, [r7, #32]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d03c      	beq.n	800f39c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f322:	69ba      	ldr	r2, [r7, #24]
 800f324:	6a3b      	ldr	r3, [r7, #32]
 800f326:	4413      	add	r3, r2
 800f328:	693a      	ldr	r2, [r7, #16]
 800f32a:	8952      	ldrh	r2, [r2, #10]
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d905      	bls.n	800f33c <f_write+0x1ac>
					cc = fs->csize - csect;
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	895b      	ldrh	r3, [r3, #10]
 800f334:	461a      	mov	r2, r3
 800f336:	69bb      	ldr	r3, [r7, #24]
 800f338:	1ad3      	subs	r3, r2, r3
 800f33a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	7858      	ldrb	r0, [r3, #1]
 800f340:	6a3b      	ldr	r3, [r7, #32]
 800f342:	697a      	ldr	r2, [r7, #20]
 800f344:	69f9      	ldr	r1, [r7, #28]
 800f346:	f7fd fc63 	bl	800cc10 <disk_write>
 800f34a:	4603      	mov	r3, r0
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d004      	beq.n	800f35a <f_write+0x1ca>
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2201      	movs	r2, #1
 800f354:	755a      	strb	r2, [r3, #21]
 800f356:	2301      	movs	r3, #1
 800f358:	e08b      	b.n	800f472 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6a1a      	ldr	r2, [r3, #32]
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	1ad3      	subs	r3, r2, r3
 800f362:	6a3a      	ldr	r2, [r7, #32]
 800f364:	429a      	cmp	r2, r3
 800f366:	d915      	bls.n	800f394 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	6a1a      	ldr	r2, [r3, #32]
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	1ad3      	subs	r3, r2, r3
 800f376:	025b      	lsls	r3, r3, #9
 800f378:	69fa      	ldr	r2, [r7, #28]
 800f37a:	4413      	add	r3, r2
 800f37c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f380:	4619      	mov	r1, r3
 800f382:	f7fd fd05 	bl	800cd90 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	7d1b      	ldrb	r3, [r3, #20]
 800f38a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f38e:	b2da      	uxtb	r2, r3
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f394:	6a3b      	ldr	r3, [r7, #32]
 800f396:	025b      	lsls	r3, r3, #9
 800f398:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f39a:	e03f      	b.n	800f41c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	6a1b      	ldr	r3, [r3, #32]
 800f3a0:	697a      	ldr	r2, [r7, #20]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d016      	beq.n	800f3d4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	699a      	ldr	r2, [r3, #24]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d210      	bcs.n	800f3d4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	7858      	ldrb	r0, [r3, #1]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f3bc:	2301      	movs	r3, #1
 800f3be:	697a      	ldr	r2, [r7, #20]
 800f3c0:	f7fd fc06 	bl	800cbd0 <disk_read>
 800f3c4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d004      	beq.n	800f3d4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	755a      	strb	r2, [r3, #21]
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	e04e      	b.n	800f472 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	697a      	ldr	r2, [r7, #20]
 800f3d8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	699b      	ldr	r3, [r3, #24]
 800f3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3e2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f3e6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f3e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d901      	bls.n	800f3f4 <f_write+0x264>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	699b      	ldr	r3, [r3, #24]
 800f3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f402:	4413      	add	r3, r2
 800f404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f406:	69f9      	ldr	r1, [r7, #28]
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fd fcc1 	bl	800cd90 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	7d1b      	ldrb	r3, [r3, #20]
 800f412:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f416:	b2da      	uxtb	r2, r3
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f41c:	69fa      	ldr	r2, [r7, #28]
 800f41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f420:	4413      	add	r3, r2
 800f422:	61fb      	str	r3, [r7, #28]
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	699a      	ldr	r2, [r3, #24]
 800f428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42a:	441a      	add	r2, r3
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	619a      	str	r2, [r3, #24]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	68da      	ldr	r2, [r3, #12]
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	699b      	ldr	r3, [r3, #24]
 800f438:	429a      	cmp	r2, r3
 800f43a:	bf38      	it	cc
 800f43c:	461a      	movcc	r2, r3
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	60da      	str	r2, [r3, #12]
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	681a      	ldr	r2, [r3, #0]
 800f446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f448:	441a      	add	r2, r3
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	601a      	str	r2, [r3, #0]
 800f44e:	687a      	ldr	r2, [r7, #4]
 800f450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f452:	1ad3      	subs	r3, r2, r3
 800f454:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	f47f aed4 	bne.w	800f206 <f_write+0x76>
 800f45e:	e000      	b.n	800f462 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f460:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	7d1b      	ldrb	r3, [r3, #20]
 800f466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f46a:	b2da      	uxtb	r2, r3
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f470:	2300      	movs	r3, #0
}
 800f472:	4618      	mov	r0, r3
 800f474:	3730      	adds	r7, #48	; 0x30
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}

0800f47a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f47a:	b580      	push	{r7, lr}
 800f47c:	b086      	sub	sp, #24
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f107 0208 	add.w	r2, r7, #8
 800f488:	4611      	mov	r1, r2
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7ff fc46 	bl	800ed1c <validate>
 800f490:	4603      	mov	r3, r0
 800f492:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f494:	7dfb      	ldrb	r3, [r7, #23]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d168      	bne.n	800f56c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	7d1b      	ldrb	r3, [r3, #20]
 800f49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d062      	beq.n	800f56c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	7d1b      	ldrb	r3, [r3, #20]
 800f4aa:	b25b      	sxtb	r3, r3
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	da15      	bge.n	800f4dc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	7858      	ldrb	r0, [r3, #1]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6a1a      	ldr	r2, [r3, #32]
 800f4be:	2301      	movs	r3, #1
 800f4c0:	f7fd fba6 	bl	800cc10 <disk_write>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d001      	beq.n	800f4ce <f_sync+0x54>
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	e04f      	b.n	800f56e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	7d1b      	ldrb	r3, [r3, #20]
 800f4d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4d6:	b2da      	uxtb	r2, r3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f4dc:	f7fb f90a 	bl	800a6f4 <get_fattime>
 800f4e0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f4e2:	68ba      	ldr	r2, [r7, #8]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	4610      	mov	r0, r2
 800f4ec:	f7fd fe7e 	bl	800d1ec <move_window>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f4f4:	7dfb      	ldrb	r3, [r7, #23]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d138      	bne.n	800f56c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4fe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	330b      	adds	r3, #11
 800f504:	781a      	ldrb	r2, [r3, #0]
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	330b      	adds	r3, #11
 800f50a:	f042 0220 	orr.w	r2, r2, #32
 800f50e:	b2d2      	uxtb	r2, r2
 800f510:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6818      	ldr	r0, [r3, #0]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	689b      	ldr	r3, [r3, #8]
 800f51a:	461a      	mov	r2, r3
 800f51c:	68f9      	ldr	r1, [r7, #12]
 800f51e:	f7fe fb89 	bl	800dc34 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f103 021c 	add.w	r2, r3, #28
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	4619      	mov	r1, r3
 800f52e:	4610      	mov	r0, r2
 800f530:	f7fd fc02 	bl	800cd38 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	3316      	adds	r3, #22
 800f538:	6939      	ldr	r1, [r7, #16]
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7fd fbfc 	bl	800cd38 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	3312      	adds	r3, #18
 800f544:	2100      	movs	r1, #0
 800f546:	4618      	mov	r0, r3
 800f548:	f7fd fbdb 	bl	800cd02 <st_word>
					fs->wflag = 1;
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	2201      	movs	r2, #1
 800f550:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	4618      	mov	r0, r3
 800f556:	f7fd fe77 	bl	800d248 <sync_fs>
 800f55a:	4603      	mov	r3, r0
 800f55c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	7d1b      	ldrb	r3, [r3, #20]
 800f562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f566:	b2da      	uxtb	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f56c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3718      	adds	r7, #24
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}

0800f576 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f576:	b580      	push	{r7, lr}
 800f578:	b084      	sub	sp, #16
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f7ff ff7b 	bl	800f47a <f_sync>
 800f584:	4603      	mov	r3, r0
 800f586:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f588:	7bfb      	ldrb	r3, [r7, #15]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d118      	bne.n	800f5c0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f107 0208 	add.w	r2, r7, #8
 800f594:	4611      	mov	r1, r2
 800f596:	4618      	mov	r0, r3
 800f598:	f7ff fbc0 	bl	800ed1c <validate>
 800f59c:	4603      	mov	r3, r0
 800f59e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f5a0:	7bfb      	ldrb	r3, [r7, #15]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d10c      	bne.n	800f5c0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	691b      	ldr	r3, [r3, #16]
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7fd fd7a 	bl	800d0a4 <dec_lock>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f5b4:	7bfb      	ldrb	r3, [r7, #15]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d102      	bne.n	800f5c0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3710      	adds	r7, #16
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
	...

0800f5cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b087      	sub	sp, #28
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f5da:	2301      	movs	r3, #1
 800f5dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f5e2:	4b1f      	ldr	r3, [pc, #124]	; (800f660 <FATFS_LinkDriverEx+0x94>)
 800f5e4:	7a5b      	ldrb	r3, [r3, #9]
 800f5e6:	b2db      	uxtb	r3, r3
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d131      	bne.n	800f650 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f5ec:	4b1c      	ldr	r3, [pc, #112]	; (800f660 <FATFS_LinkDriverEx+0x94>)
 800f5ee:	7a5b      	ldrb	r3, [r3, #9]
 800f5f0:	b2db      	uxtb	r3, r3
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	4b1a      	ldr	r3, [pc, #104]	; (800f660 <FATFS_LinkDriverEx+0x94>)
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f5fa:	4b19      	ldr	r3, [pc, #100]	; (800f660 <FATFS_LinkDriverEx+0x94>)
 800f5fc:	7a5b      	ldrb	r3, [r3, #9]
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	4a17      	ldr	r2, [pc, #92]	; (800f660 <FATFS_LinkDriverEx+0x94>)
 800f602:	009b      	lsls	r3, r3, #2
 800f604:	4413      	add	r3, r2
 800f606:	68fa      	ldr	r2, [r7, #12]
 800f608:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f60a:	4b15      	ldr	r3, [pc, #84]	; (800f660 <FATFS_LinkDriverEx+0x94>)
 800f60c:	7a5b      	ldrb	r3, [r3, #9]
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	461a      	mov	r2, r3
 800f612:	4b13      	ldr	r3, [pc, #76]	; (800f660 <FATFS_LinkDriverEx+0x94>)
 800f614:	4413      	add	r3, r2
 800f616:	79fa      	ldrb	r2, [r7, #7]
 800f618:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f61a:	4b11      	ldr	r3, [pc, #68]	; (800f660 <FATFS_LinkDriverEx+0x94>)
 800f61c:	7a5b      	ldrb	r3, [r3, #9]
 800f61e:	b2db      	uxtb	r3, r3
 800f620:	1c5a      	adds	r2, r3, #1
 800f622:	b2d1      	uxtb	r1, r2
 800f624:	4a0e      	ldr	r2, [pc, #56]	; (800f660 <FATFS_LinkDriverEx+0x94>)
 800f626:	7251      	strb	r1, [r2, #9]
 800f628:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f62a:	7dbb      	ldrb	r3, [r7, #22]
 800f62c:	3330      	adds	r3, #48	; 0x30
 800f62e:	b2da      	uxtb	r2, r3
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	3301      	adds	r3, #1
 800f638:	223a      	movs	r2, #58	; 0x3a
 800f63a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	3302      	adds	r3, #2
 800f640:	222f      	movs	r2, #47	; 0x2f
 800f642:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	3303      	adds	r3, #3
 800f648:	2200      	movs	r2, #0
 800f64a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f64c:	2300      	movs	r3, #0
 800f64e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f650:	7dfb      	ldrb	r3, [r7, #23]
}
 800f652:	4618      	mov	r0, r3
 800f654:	371c      	adds	r7, #28
 800f656:	46bd      	mov	sp, r7
 800f658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65c:	4770      	bx	lr
 800f65e:	bf00      	nop
 800f660:	20002a98 	.word	0x20002a98

0800f664 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f66e:	2200      	movs	r2, #0
 800f670:	6839      	ldr	r1, [r7, #0]
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f7ff ffaa 	bl	800f5cc <FATFS_LinkDriverEx>
 800f678:	4603      	mov	r3, r0
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3708      	adds	r7, #8
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
	...

0800f684 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f684:	b480      	push	{r7}
 800f686:	b085      	sub	sp, #20
 800f688:	af00      	add	r7, sp, #0
 800f68a:	4603      	mov	r3, r0
 800f68c:	6039      	str	r1, [r7, #0]
 800f68e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f690:	88fb      	ldrh	r3, [r7, #6]
 800f692:	2b7f      	cmp	r3, #127	; 0x7f
 800f694:	d802      	bhi.n	800f69c <ff_convert+0x18>
		c = chr;
 800f696:	88fb      	ldrh	r3, [r7, #6]
 800f698:	81fb      	strh	r3, [r7, #14]
 800f69a:	e025      	b.n	800f6e8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d00b      	beq.n	800f6ba <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f6a2:	88fb      	ldrh	r3, [r7, #6]
 800f6a4:	2bff      	cmp	r3, #255	; 0xff
 800f6a6:	d805      	bhi.n	800f6b4 <ff_convert+0x30>
 800f6a8:	88fb      	ldrh	r3, [r7, #6]
 800f6aa:	3b80      	subs	r3, #128	; 0x80
 800f6ac:	4a12      	ldr	r2, [pc, #72]	; (800f6f8 <ff_convert+0x74>)
 800f6ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6b2:	e000      	b.n	800f6b6 <ff_convert+0x32>
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	81fb      	strh	r3, [r7, #14]
 800f6b8:	e016      	b.n	800f6e8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	81fb      	strh	r3, [r7, #14]
 800f6be:	e009      	b.n	800f6d4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f6c0:	89fb      	ldrh	r3, [r7, #14]
 800f6c2:	4a0d      	ldr	r2, [pc, #52]	; (800f6f8 <ff_convert+0x74>)
 800f6c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6c8:	88fa      	ldrh	r2, [r7, #6]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d006      	beq.n	800f6dc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f6ce:	89fb      	ldrh	r3, [r7, #14]
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	81fb      	strh	r3, [r7, #14]
 800f6d4:	89fb      	ldrh	r3, [r7, #14]
 800f6d6:	2b7f      	cmp	r3, #127	; 0x7f
 800f6d8:	d9f2      	bls.n	800f6c0 <ff_convert+0x3c>
 800f6da:	e000      	b.n	800f6de <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f6dc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f6de:	89fb      	ldrh	r3, [r7, #14]
 800f6e0:	3380      	adds	r3, #128	; 0x80
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f6e8:	89fb      	ldrh	r3, [r7, #14]
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3714      	adds	r7, #20
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f4:	4770      	bx	lr
 800f6f6:	bf00      	nop
 800f6f8:	08011ac0 	.word	0x08011ac0

0800f6fc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b087      	sub	sp, #28
 800f700:	af00      	add	r7, sp, #0
 800f702:	4603      	mov	r3, r0
 800f704:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f706:	88fb      	ldrh	r3, [r7, #6]
 800f708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f70c:	d201      	bcs.n	800f712 <ff_wtoupper+0x16>
 800f70e:	4b3e      	ldr	r3, [pc, #248]	; (800f808 <ff_wtoupper+0x10c>)
 800f710:	e000      	b.n	800f714 <ff_wtoupper+0x18>
 800f712:	4b3e      	ldr	r3, [pc, #248]	; (800f80c <ff_wtoupper+0x110>)
 800f714:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	1c9a      	adds	r2, r3, #2
 800f71a:	617a      	str	r2, [r7, #20]
 800f71c:	881b      	ldrh	r3, [r3, #0]
 800f71e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f720:	8a7b      	ldrh	r3, [r7, #18]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d068      	beq.n	800f7f8 <ff_wtoupper+0xfc>
 800f726:	88fa      	ldrh	r2, [r7, #6]
 800f728:	8a7b      	ldrh	r3, [r7, #18]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d364      	bcc.n	800f7f8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	1c9a      	adds	r2, r3, #2
 800f732:	617a      	str	r2, [r7, #20]
 800f734:	881b      	ldrh	r3, [r3, #0]
 800f736:	823b      	strh	r3, [r7, #16]
 800f738:	8a3b      	ldrh	r3, [r7, #16]
 800f73a:	0a1b      	lsrs	r3, r3, #8
 800f73c:	81fb      	strh	r3, [r7, #14]
 800f73e:	8a3b      	ldrh	r3, [r7, #16]
 800f740:	b2db      	uxtb	r3, r3
 800f742:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f744:	88fa      	ldrh	r2, [r7, #6]
 800f746:	8a79      	ldrh	r1, [r7, #18]
 800f748:	8a3b      	ldrh	r3, [r7, #16]
 800f74a:	440b      	add	r3, r1
 800f74c:	429a      	cmp	r2, r3
 800f74e:	da49      	bge.n	800f7e4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f750:	89fb      	ldrh	r3, [r7, #14]
 800f752:	2b08      	cmp	r3, #8
 800f754:	d84f      	bhi.n	800f7f6 <ff_wtoupper+0xfa>
 800f756:	a201      	add	r2, pc, #4	; (adr r2, 800f75c <ff_wtoupper+0x60>)
 800f758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f75c:	0800f781 	.word	0x0800f781
 800f760:	0800f793 	.word	0x0800f793
 800f764:	0800f7a9 	.word	0x0800f7a9
 800f768:	0800f7b1 	.word	0x0800f7b1
 800f76c:	0800f7b9 	.word	0x0800f7b9
 800f770:	0800f7c1 	.word	0x0800f7c1
 800f774:	0800f7c9 	.word	0x0800f7c9
 800f778:	0800f7d1 	.word	0x0800f7d1
 800f77c:	0800f7d9 	.word	0x0800f7d9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f780:	88fa      	ldrh	r2, [r7, #6]
 800f782:	8a7b      	ldrh	r3, [r7, #18]
 800f784:	1ad3      	subs	r3, r2, r3
 800f786:	005b      	lsls	r3, r3, #1
 800f788:	697a      	ldr	r2, [r7, #20]
 800f78a:	4413      	add	r3, r2
 800f78c:	881b      	ldrh	r3, [r3, #0]
 800f78e:	80fb      	strh	r3, [r7, #6]
 800f790:	e027      	b.n	800f7e2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f792:	88fa      	ldrh	r2, [r7, #6]
 800f794:	8a7b      	ldrh	r3, [r7, #18]
 800f796:	1ad3      	subs	r3, r2, r3
 800f798:	b29b      	uxth	r3, r3
 800f79a:	f003 0301 	and.w	r3, r3, #1
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	88fa      	ldrh	r2, [r7, #6]
 800f7a2:	1ad3      	subs	r3, r2, r3
 800f7a4:	80fb      	strh	r3, [r7, #6]
 800f7a6:	e01c      	b.n	800f7e2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f7a8:	88fb      	ldrh	r3, [r7, #6]
 800f7aa:	3b10      	subs	r3, #16
 800f7ac:	80fb      	strh	r3, [r7, #6]
 800f7ae:	e018      	b.n	800f7e2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f7b0:	88fb      	ldrh	r3, [r7, #6]
 800f7b2:	3b20      	subs	r3, #32
 800f7b4:	80fb      	strh	r3, [r7, #6]
 800f7b6:	e014      	b.n	800f7e2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f7b8:	88fb      	ldrh	r3, [r7, #6]
 800f7ba:	3b30      	subs	r3, #48	; 0x30
 800f7bc:	80fb      	strh	r3, [r7, #6]
 800f7be:	e010      	b.n	800f7e2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f7c0:	88fb      	ldrh	r3, [r7, #6]
 800f7c2:	3b1a      	subs	r3, #26
 800f7c4:	80fb      	strh	r3, [r7, #6]
 800f7c6:	e00c      	b.n	800f7e2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f7c8:	88fb      	ldrh	r3, [r7, #6]
 800f7ca:	3308      	adds	r3, #8
 800f7cc:	80fb      	strh	r3, [r7, #6]
 800f7ce:	e008      	b.n	800f7e2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f7d0:	88fb      	ldrh	r3, [r7, #6]
 800f7d2:	3b50      	subs	r3, #80	; 0x50
 800f7d4:	80fb      	strh	r3, [r7, #6]
 800f7d6:	e004      	b.n	800f7e2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f7d8:	88fb      	ldrh	r3, [r7, #6]
 800f7da:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f7de:	80fb      	strh	r3, [r7, #6]
 800f7e0:	bf00      	nop
			}
			break;
 800f7e2:	e008      	b.n	800f7f6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f7e4:	89fb      	ldrh	r3, [r7, #14]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d195      	bne.n	800f716 <ff_wtoupper+0x1a>
 800f7ea:	8a3b      	ldrh	r3, [r7, #16]
 800f7ec:	005b      	lsls	r3, r3, #1
 800f7ee:	697a      	ldr	r2, [r7, #20]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f7f4:	e78f      	b.n	800f716 <ff_wtoupper+0x1a>
			break;
 800f7f6:	bf00      	nop
	}

	return chr;
 800f7f8:	88fb      	ldrh	r3, [r7, #6]
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	371c      	adds	r7, #28
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr
 800f806:	bf00      	nop
 800f808:	08011bc0 	.word	0x08011bc0
 800f80c:	08011db4 	.word	0x08011db4

0800f810 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f814:	2200      	movs	r2, #0
 800f816:	4912      	ldr	r1, [pc, #72]	; (800f860 <MX_USB_DEVICE_Init+0x50>)
 800f818:	4812      	ldr	r0, [pc, #72]	; (800f864 <MX_USB_DEVICE_Init+0x54>)
 800f81a:	f7fb fe7d 	bl	800b518 <USBD_Init>
 800f81e:	4603      	mov	r3, r0
 800f820:	2b00      	cmp	r3, #0
 800f822:	d001      	beq.n	800f828 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f824:	f7f1 fcb6 	bl	8001194 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f828:	490f      	ldr	r1, [pc, #60]	; (800f868 <MX_USB_DEVICE_Init+0x58>)
 800f82a:	480e      	ldr	r0, [pc, #56]	; (800f864 <MX_USB_DEVICE_Init+0x54>)
 800f82c:	f7fb fea4 	bl	800b578 <USBD_RegisterClass>
 800f830:	4603      	mov	r3, r0
 800f832:	2b00      	cmp	r3, #0
 800f834:	d001      	beq.n	800f83a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f836:	f7f1 fcad 	bl	8001194 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f83a:	490c      	ldr	r1, [pc, #48]	; (800f86c <MX_USB_DEVICE_Init+0x5c>)
 800f83c:	4809      	ldr	r0, [pc, #36]	; (800f864 <MX_USB_DEVICE_Init+0x54>)
 800f83e:	f7fb fd9b 	bl	800b378 <USBD_CDC_RegisterInterface>
 800f842:	4603      	mov	r3, r0
 800f844:	2b00      	cmp	r3, #0
 800f846:	d001      	beq.n	800f84c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f848:	f7f1 fca4 	bl	8001194 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f84c:	4805      	ldr	r0, [pc, #20]	; (800f864 <MX_USB_DEVICE_Init+0x54>)
 800f84e:	f7fb fec9 	bl	800b5e4 <USBD_Start>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	d001      	beq.n	800f85c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f858:	f7f1 fc9c 	bl	8001194 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f85c:	bf00      	nop
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	200000ac 	.word	0x200000ac
 800f864:	20002aa4 	.word	0x20002aa4
 800f868:	20000018 	.word	0x20000018
 800f86c:	20000098 	.word	0x20000098

0800f870 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f874:	2200      	movs	r2, #0
 800f876:	4905      	ldr	r1, [pc, #20]	; (800f88c <CDC_Init_FS+0x1c>)
 800f878:	4805      	ldr	r0, [pc, #20]	; (800f890 <CDC_Init_FS+0x20>)
 800f87a:	f7fb fd97 	bl	800b3ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f87e:	4905      	ldr	r1, [pc, #20]	; (800f894 <CDC_Init_FS+0x24>)
 800f880:	4803      	ldr	r0, [pc, #12]	; (800f890 <CDC_Init_FS+0x20>)
 800f882:	f7fb fdb5 	bl	800b3f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f886:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f888:	4618      	mov	r0, r3
 800f88a:	bd80      	pop	{r7, pc}
 800f88c:	20003580 	.word	0x20003580
 800f890:	20002aa4 	.word	0x20002aa4
 800f894:	20002d80 	.word	0x20002d80

0800f898 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f898:	b480      	push	{r7}
 800f89a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f89c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a6:	4770      	bx	lr

0800f8a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f8a8:	b480      	push	{r7}
 800f8aa:	b083      	sub	sp, #12
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	6039      	str	r1, [r7, #0]
 800f8b2:	71fb      	strb	r3, [r7, #7]
 800f8b4:	4613      	mov	r3, r2
 800f8b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f8b8:	79fb      	ldrb	r3, [r7, #7]
 800f8ba:	2b23      	cmp	r3, #35	; 0x23
 800f8bc:	d84a      	bhi.n	800f954 <CDC_Control_FS+0xac>
 800f8be:	a201      	add	r2, pc, #4	; (adr r2, 800f8c4 <CDC_Control_FS+0x1c>)
 800f8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8c4:	0800f955 	.word	0x0800f955
 800f8c8:	0800f955 	.word	0x0800f955
 800f8cc:	0800f955 	.word	0x0800f955
 800f8d0:	0800f955 	.word	0x0800f955
 800f8d4:	0800f955 	.word	0x0800f955
 800f8d8:	0800f955 	.word	0x0800f955
 800f8dc:	0800f955 	.word	0x0800f955
 800f8e0:	0800f955 	.word	0x0800f955
 800f8e4:	0800f955 	.word	0x0800f955
 800f8e8:	0800f955 	.word	0x0800f955
 800f8ec:	0800f955 	.word	0x0800f955
 800f8f0:	0800f955 	.word	0x0800f955
 800f8f4:	0800f955 	.word	0x0800f955
 800f8f8:	0800f955 	.word	0x0800f955
 800f8fc:	0800f955 	.word	0x0800f955
 800f900:	0800f955 	.word	0x0800f955
 800f904:	0800f955 	.word	0x0800f955
 800f908:	0800f955 	.word	0x0800f955
 800f90c:	0800f955 	.word	0x0800f955
 800f910:	0800f955 	.word	0x0800f955
 800f914:	0800f955 	.word	0x0800f955
 800f918:	0800f955 	.word	0x0800f955
 800f91c:	0800f955 	.word	0x0800f955
 800f920:	0800f955 	.word	0x0800f955
 800f924:	0800f955 	.word	0x0800f955
 800f928:	0800f955 	.word	0x0800f955
 800f92c:	0800f955 	.word	0x0800f955
 800f930:	0800f955 	.word	0x0800f955
 800f934:	0800f955 	.word	0x0800f955
 800f938:	0800f955 	.word	0x0800f955
 800f93c:	0800f955 	.word	0x0800f955
 800f940:	0800f955 	.word	0x0800f955
 800f944:	0800f955 	.word	0x0800f955
 800f948:	0800f955 	.word	0x0800f955
 800f94c:	0800f955 	.word	0x0800f955
 800f950:	0800f955 	.word	0x0800f955
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f954:	bf00      	nop
  }

  return (USBD_OK);
 800f956:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f958:	4618      	mov	r0, r3
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f96e:	6879      	ldr	r1, [r7, #4]
 800f970:	4805      	ldr	r0, [pc, #20]	; (800f988 <CDC_Receive_FS+0x24>)
 800f972:	f7fb fd3d 	bl	800b3f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f976:	4804      	ldr	r0, [pc, #16]	; (800f988 <CDC_Receive_FS+0x24>)
 800f978:	f7fb fd98 	bl	800b4ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f97c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3708      	adds	r7, #8
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	20002aa4 	.word	0x20002aa4

0800f98c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b084      	sub	sp, #16
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	460b      	mov	r3, r1
 800f996:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f998:	2300      	movs	r3, #0
 800f99a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f99c:	4b0d      	ldr	r3, [pc, #52]	; (800f9d4 <CDC_Transmit_FS+0x48>)
 800f99e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d001      	beq.n	800f9b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	e00b      	b.n	800f9ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f9b2:	887b      	ldrh	r3, [r7, #2]
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	6879      	ldr	r1, [r7, #4]
 800f9b8:	4806      	ldr	r0, [pc, #24]	; (800f9d4 <CDC_Transmit_FS+0x48>)
 800f9ba:	f7fb fcf7 	bl	800b3ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f9be:	4805      	ldr	r0, [pc, #20]	; (800f9d4 <CDC_Transmit_FS+0x48>)
 800f9c0:	f7fb fd34 	bl	800b42c <USBD_CDC_TransmitPacket>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3710      	adds	r7, #16
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	20002aa4 	.word	0x20002aa4

0800f9d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b087      	sub	sp, #28
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	4613      	mov	r3, r2
 800f9e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f9ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	371c      	adds	r7, #28
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr
	...

0800f9fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b083      	sub	sp, #12
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	4603      	mov	r3, r0
 800fa04:	6039      	str	r1, [r7, #0]
 800fa06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	2212      	movs	r2, #18
 800fa0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fa0e:	4b03      	ldr	r3, [pc, #12]	; (800fa1c <USBD_FS_DeviceDescriptor+0x20>)
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	370c      	adds	r7, #12
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr
 800fa1c:	200000cc 	.word	0x200000cc

0800fa20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	4603      	mov	r3, r0
 800fa28:	6039      	str	r1, [r7, #0]
 800fa2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	2204      	movs	r2, #4
 800fa30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fa32:	4b03      	ldr	r3, [pc, #12]	; (800fa40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	370c      	adds	r7, #12
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr
 800fa40:	200000ec 	.word	0x200000ec

0800fa44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	6039      	str	r1, [r7, #0]
 800fa4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fa50:	79fb      	ldrb	r3, [r7, #7]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d105      	bne.n	800fa62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fa56:	683a      	ldr	r2, [r7, #0]
 800fa58:	4907      	ldr	r1, [pc, #28]	; (800fa78 <USBD_FS_ProductStrDescriptor+0x34>)
 800fa5a:	4808      	ldr	r0, [pc, #32]	; (800fa7c <USBD_FS_ProductStrDescriptor+0x38>)
 800fa5c:	f7fc ff98 	bl	800c990 <USBD_GetString>
 800fa60:	e004      	b.n	800fa6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fa62:	683a      	ldr	r2, [r7, #0]
 800fa64:	4904      	ldr	r1, [pc, #16]	; (800fa78 <USBD_FS_ProductStrDescriptor+0x34>)
 800fa66:	4805      	ldr	r0, [pc, #20]	; (800fa7c <USBD_FS_ProductStrDescriptor+0x38>)
 800fa68:	f7fc ff92 	bl	800c990 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa6c:	4b02      	ldr	r3, [pc, #8]	; (800fa78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3708      	adds	r7, #8
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	20003d80 	.word	0x20003d80
 800fa7c:	080119b4 	.word	0x080119b4

0800fa80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	4603      	mov	r3, r0
 800fa88:	6039      	str	r1, [r7, #0]
 800fa8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fa8c:	683a      	ldr	r2, [r7, #0]
 800fa8e:	4904      	ldr	r1, [pc, #16]	; (800faa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fa90:	4804      	ldr	r0, [pc, #16]	; (800faa4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fa92:	f7fc ff7d 	bl	800c990 <USBD_GetString>
  return USBD_StrDesc;
 800fa96:	4b02      	ldr	r3, [pc, #8]	; (800faa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3708      	adds	r7, #8
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	20003d80 	.word	0x20003d80
 800faa4:	080119cc 	.word	0x080119cc

0800faa8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	4603      	mov	r3, r0
 800fab0:	6039      	str	r1, [r7, #0]
 800fab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	221a      	movs	r2, #26
 800fab8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800faba:	f000 f855 	bl	800fb68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fabe:	4b02      	ldr	r3, [pc, #8]	; (800fac8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	200000f0 	.word	0x200000f0

0800facc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	4603      	mov	r3, r0
 800fad4:	6039      	str	r1, [r7, #0]
 800fad6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fad8:	79fb      	ldrb	r3, [r7, #7]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d105      	bne.n	800faea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fade:	683a      	ldr	r2, [r7, #0]
 800fae0:	4907      	ldr	r1, [pc, #28]	; (800fb00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fae2:	4808      	ldr	r0, [pc, #32]	; (800fb04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fae4:	f7fc ff54 	bl	800c990 <USBD_GetString>
 800fae8:	e004      	b.n	800faf4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800faea:	683a      	ldr	r2, [r7, #0]
 800faec:	4904      	ldr	r1, [pc, #16]	; (800fb00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800faee:	4805      	ldr	r0, [pc, #20]	; (800fb04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800faf0:	f7fc ff4e 	bl	800c990 <USBD_GetString>
  }
  return USBD_StrDesc;
 800faf4:	4b02      	ldr	r3, [pc, #8]	; (800fb00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3708      	adds	r7, #8
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	20003d80 	.word	0x20003d80
 800fb04:	080119e0 	.word	0x080119e0

0800fb08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	4603      	mov	r3, r0
 800fb10:	6039      	str	r1, [r7, #0]
 800fb12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fb14:	79fb      	ldrb	r3, [r7, #7]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d105      	bne.n	800fb26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb1a:	683a      	ldr	r2, [r7, #0]
 800fb1c:	4907      	ldr	r1, [pc, #28]	; (800fb3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb1e:	4808      	ldr	r0, [pc, #32]	; (800fb40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb20:	f7fc ff36 	bl	800c990 <USBD_GetString>
 800fb24:	e004      	b.n	800fb30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb26:	683a      	ldr	r2, [r7, #0]
 800fb28:	4904      	ldr	r1, [pc, #16]	; (800fb3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb2a:	4805      	ldr	r0, [pc, #20]	; (800fb40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb2c:	f7fc ff30 	bl	800c990 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb30:	4b02      	ldr	r3, [pc, #8]	; (800fb3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3708      	adds	r7, #8
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	20003d80 	.word	0x20003d80
 800fb40:	080119ec 	.word	0x080119ec

0800fb44 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	6039      	str	r1, [r7, #0]
 800fb4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	220c      	movs	r2, #12
 800fb54:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800fb56:	4b03      	ldr	r3, [pc, #12]	; (800fb64 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	370c      	adds	r7, #12
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr
 800fb64:	200000e0 	.word	0x200000e0

0800fb68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fb6e:	4b0f      	ldr	r3, [pc, #60]	; (800fbac <Get_SerialNum+0x44>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fb74:	4b0e      	ldr	r3, [pc, #56]	; (800fbb0 <Get_SerialNum+0x48>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fb7a:	4b0e      	ldr	r3, [pc, #56]	; (800fbb4 <Get_SerialNum+0x4c>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fb80:	68fa      	ldr	r2, [r7, #12]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	4413      	add	r3, r2
 800fb86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d009      	beq.n	800fba2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fb8e:	2208      	movs	r2, #8
 800fb90:	4909      	ldr	r1, [pc, #36]	; (800fbb8 <Get_SerialNum+0x50>)
 800fb92:	68f8      	ldr	r0, [r7, #12]
 800fb94:	f000 f814 	bl	800fbc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fb98:	2204      	movs	r2, #4
 800fb9a:	4908      	ldr	r1, [pc, #32]	; (800fbbc <Get_SerialNum+0x54>)
 800fb9c:	68b8      	ldr	r0, [r7, #8]
 800fb9e:	f000 f80f 	bl	800fbc0 <IntToUnicode>
  }
}
 800fba2:	bf00      	nop
 800fba4:	3710      	adds	r7, #16
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	1ff0f420 	.word	0x1ff0f420
 800fbb0:	1ff0f424 	.word	0x1ff0f424
 800fbb4:	1ff0f428 	.word	0x1ff0f428
 800fbb8:	200000f2 	.word	0x200000f2
 800fbbc:	20000102 	.word	0x20000102

0800fbc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b087      	sub	sp, #28
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	60f8      	str	r0, [r7, #12]
 800fbc8:	60b9      	str	r1, [r7, #8]
 800fbca:	4613      	mov	r3, r2
 800fbcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	75fb      	strb	r3, [r7, #23]
 800fbd6:	e027      	b.n	800fc28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	0f1b      	lsrs	r3, r3, #28
 800fbdc:	2b09      	cmp	r3, #9
 800fbde:	d80b      	bhi.n	800fbf8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	0f1b      	lsrs	r3, r3, #28
 800fbe4:	b2da      	uxtb	r2, r3
 800fbe6:	7dfb      	ldrb	r3, [r7, #23]
 800fbe8:	005b      	lsls	r3, r3, #1
 800fbea:	4619      	mov	r1, r3
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	440b      	add	r3, r1
 800fbf0:	3230      	adds	r2, #48	; 0x30
 800fbf2:	b2d2      	uxtb	r2, r2
 800fbf4:	701a      	strb	r2, [r3, #0]
 800fbf6:	e00a      	b.n	800fc0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	0f1b      	lsrs	r3, r3, #28
 800fbfc:	b2da      	uxtb	r2, r3
 800fbfe:	7dfb      	ldrb	r3, [r7, #23]
 800fc00:	005b      	lsls	r3, r3, #1
 800fc02:	4619      	mov	r1, r3
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	440b      	add	r3, r1
 800fc08:	3237      	adds	r2, #55	; 0x37
 800fc0a:	b2d2      	uxtb	r2, r2
 800fc0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	011b      	lsls	r3, r3, #4
 800fc12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fc14:	7dfb      	ldrb	r3, [r7, #23]
 800fc16:	005b      	lsls	r3, r3, #1
 800fc18:	3301      	adds	r3, #1
 800fc1a:	68ba      	ldr	r2, [r7, #8]
 800fc1c:	4413      	add	r3, r2
 800fc1e:	2200      	movs	r2, #0
 800fc20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fc22:	7dfb      	ldrb	r3, [r7, #23]
 800fc24:	3301      	adds	r3, #1
 800fc26:	75fb      	strb	r3, [r7, #23]
 800fc28:	7dfa      	ldrb	r2, [r7, #23]
 800fc2a:	79fb      	ldrb	r3, [r7, #7]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d3d3      	bcc.n	800fbd8 <IntToUnicode+0x18>
  }
}
 800fc30:	bf00      	nop
 800fc32:	bf00      	nop
 800fc34:	371c      	adds	r7, #28
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr
	...

0800fc40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b0ae      	sub	sp, #184	; 0xb8
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	601a      	str	r2, [r3, #0]
 800fc50:	605a      	str	r2, [r3, #4]
 800fc52:	609a      	str	r2, [r3, #8]
 800fc54:	60da      	str	r2, [r3, #12]
 800fc56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fc58:	f107 0314 	add.w	r3, r7, #20
 800fc5c:	2290      	movs	r2, #144	; 0x90
 800fc5e:	2100      	movs	r1, #0
 800fc60:	4618      	mov	r0, r3
 800fc62:	f000 fd8a 	bl	801077a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fc6e:	d151      	bne.n	800fd14 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800fc70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fc74:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800fc76:	2300      	movs	r3, #0
 800fc78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fc7c:	f107 0314 	add.w	r3, r7, #20
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7f6 f96b 	bl	8005f5c <HAL_RCCEx_PeriphCLKConfig>
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d001      	beq.n	800fc90 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800fc8c:	f7f1 fa82 	bl	8001194 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fc90:	4b22      	ldr	r3, [pc, #136]	; (800fd1c <HAL_PCD_MspInit+0xdc>)
 800fc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc94:	4a21      	ldr	r2, [pc, #132]	; (800fd1c <HAL_PCD_MspInit+0xdc>)
 800fc96:	f043 0301 	orr.w	r3, r3, #1
 800fc9a:	6313      	str	r3, [r2, #48]	; 0x30
 800fc9c:	4b1f      	ldr	r3, [pc, #124]	; (800fd1c <HAL_PCD_MspInit+0xdc>)
 800fc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fca0:	f003 0301 	and.w	r3, r3, #1
 800fca4:	613b      	str	r3, [r7, #16]
 800fca6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fca8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fcac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fcb0:	2302      	movs	r3, #2
 800fcb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fcbc:	2303      	movs	r3, #3
 800fcbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fcc2:	230a      	movs	r3, #10
 800fcc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fcc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fccc:	4619      	mov	r1, r3
 800fcce:	4814      	ldr	r0, [pc, #80]	; (800fd20 <HAL_PCD_MspInit+0xe0>)
 800fcd0:	f7f3 fa38 	bl	8003144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fcd4:	4b11      	ldr	r3, [pc, #68]	; (800fd1c <HAL_PCD_MspInit+0xdc>)
 800fcd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcd8:	4a10      	ldr	r2, [pc, #64]	; (800fd1c <HAL_PCD_MspInit+0xdc>)
 800fcda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcde:	6353      	str	r3, [r2, #52]	; 0x34
 800fce0:	4b0e      	ldr	r3, [pc, #56]	; (800fd1c <HAL_PCD_MspInit+0xdc>)
 800fce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fce8:	60fb      	str	r3, [r7, #12]
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	4b0b      	ldr	r3, [pc, #44]	; (800fd1c <HAL_PCD_MspInit+0xdc>)
 800fcee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcf0:	4a0a      	ldr	r2, [pc, #40]	; (800fd1c <HAL_PCD_MspInit+0xdc>)
 800fcf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fcf6:	6453      	str	r3, [r2, #68]	; 0x44
 800fcf8:	4b08      	ldr	r3, [pc, #32]	; (800fd1c <HAL_PCD_MspInit+0xdc>)
 800fcfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd00:	60bb      	str	r3, [r7, #8]
 800fd02:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fd04:	2200      	movs	r2, #0
 800fd06:	2100      	movs	r1, #0
 800fd08:	2043      	movs	r0, #67	; 0x43
 800fd0a:	f7f2 fe3e 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fd0e:	2043      	movs	r0, #67	; 0x43
 800fd10:	f7f2 fe57 	bl	80029c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fd14:	bf00      	nop
 800fd16:	37b8      	adds	r7, #184	; 0xb8
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	40023800 	.word	0x40023800
 800fd20:	40020000 	.word	0x40020000

0800fd24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fd38:	4619      	mov	r1, r3
 800fd3a:	4610      	mov	r0, r2
 800fd3c:	f7fb fc9f 	bl	800b67e <USBD_LL_SetupStage>
}
 800fd40:	bf00      	nop
 800fd42:	3708      	adds	r7, #8
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b082      	sub	sp, #8
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	460b      	mov	r3, r1
 800fd52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800fd5a:	78fa      	ldrb	r2, [r7, #3]
 800fd5c:	6879      	ldr	r1, [r7, #4]
 800fd5e:	4613      	mov	r3, r2
 800fd60:	00db      	lsls	r3, r3, #3
 800fd62:	4413      	add	r3, r2
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	440b      	add	r3, r1
 800fd68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	78fb      	ldrb	r3, [r7, #3]
 800fd70:	4619      	mov	r1, r3
 800fd72:	f7fb fcd9 	bl	800b728 <USBD_LL_DataOutStage>
}
 800fd76:	bf00      	nop
 800fd78:	3708      	adds	r7, #8
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}

0800fd7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd7e:	b580      	push	{r7, lr}
 800fd80:	b082      	sub	sp, #8
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	6078      	str	r0, [r7, #4]
 800fd86:	460b      	mov	r3, r1
 800fd88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800fd90:	78fa      	ldrb	r2, [r7, #3]
 800fd92:	6879      	ldr	r1, [r7, #4]
 800fd94:	4613      	mov	r3, r2
 800fd96:	00db      	lsls	r3, r3, #3
 800fd98:	4413      	add	r3, r2
 800fd9a:	009b      	lsls	r3, r3, #2
 800fd9c:	440b      	add	r3, r1
 800fd9e:	334c      	adds	r3, #76	; 0x4c
 800fda0:	681a      	ldr	r2, [r3, #0]
 800fda2:	78fb      	ldrb	r3, [r7, #3]
 800fda4:	4619      	mov	r1, r3
 800fda6:	f7fb fd72 	bl	800b88e <USBD_LL_DataInStage>
}
 800fdaa:	bf00      	nop
 800fdac:	3708      	adds	r7, #8
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b082      	sub	sp, #8
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7fb fea6 	bl	800bb12 <USBD_LL_SOF>
}
 800fdc6:	bf00      	nop
 800fdc8:	3708      	adds	r7, #8
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}

0800fdce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b084      	sub	sp, #16
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d102      	bne.n	800fde8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fde2:	2300      	movs	r3, #0
 800fde4:	73fb      	strb	r3, [r7, #15]
 800fde6:	e008      	b.n	800fdfa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	68db      	ldr	r3, [r3, #12]
 800fdec:	2b02      	cmp	r3, #2
 800fdee:	d102      	bne.n	800fdf6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	73fb      	strb	r3, [r7, #15]
 800fdf4:	e001      	b.n	800fdfa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fdf6:	f7f1 f9cd 	bl	8001194 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fe00:	7bfa      	ldrb	r2, [r7, #15]
 800fe02:	4611      	mov	r1, r2
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7fb fe46 	bl	800ba96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7fb fdee 	bl	800b9f2 <USBD_LL_Reset>
}
 800fe16:	bf00      	nop
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
	...

0800fe20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f7fb fe41 	bl	800bab6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	6812      	ldr	r2, [r2, #0]
 800fe42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fe46:	f043 0301 	orr.w	r3, r3, #1
 800fe4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	6a1b      	ldr	r3, [r3, #32]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d005      	beq.n	800fe60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fe54:	4b04      	ldr	r3, [pc, #16]	; (800fe68 <HAL_PCD_SuspendCallback+0x48>)
 800fe56:	691b      	ldr	r3, [r3, #16]
 800fe58:	4a03      	ldr	r2, [pc, #12]	; (800fe68 <HAL_PCD_SuspendCallback+0x48>)
 800fe5a:	f043 0306 	orr.w	r3, r3, #6
 800fe5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fe60:	bf00      	nop
 800fe62:	3708      	adds	r7, #8
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	e000ed00 	.word	0xe000ed00

0800fe6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7fb fe31 	bl	800bae2 <USBD_LL_Resume>
}
 800fe80:	bf00      	nop
 800fe82:	3708      	adds	r7, #8
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}

0800fe88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	460b      	mov	r3, r1
 800fe92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fe9a:	78fa      	ldrb	r2, [r7, #3]
 800fe9c:	4611      	mov	r1, r2
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7fb fe89 	bl	800bbb6 <USBD_LL_IsoOUTIncomplete>
}
 800fea4:	bf00      	nop
 800fea6:	3708      	adds	r7, #8
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	460b      	mov	r3, r1
 800feb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800febe:	78fa      	ldrb	r2, [r7, #3]
 800fec0:	4611      	mov	r1, r2
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7fb fe45 	bl	800bb52 <USBD_LL_IsoINIncomplete>
}
 800fec8:	bf00      	nop
 800feca:	3708      	adds	r7, #8
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}

0800fed0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fb fe9b 	bl	800bc1a <USBD_LL_DevConnected>
}
 800fee4:	bf00      	nop
 800fee6:	3708      	adds	r7, #8
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fb fe98 	bl	800bc30 <USBD_LL_DevDisconnected>
}
 800ff00:	bf00      	nop
 800ff02:	3708      	adds	r7, #8
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d13c      	bne.n	800ff92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ff18:	4a20      	ldr	r2, [pc, #128]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	4a1e      	ldr	r2, [pc, #120]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff24:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ff28:	4b1c      	ldr	r3, [pc, #112]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ff2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ff30:	4b1a      	ldr	r3, [pc, #104]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff32:	2206      	movs	r2, #6
 800ff34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ff36:	4b19      	ldr	r3, [pc, #100]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff38:	2202      	movs	r2, #2
 800ff3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ff3c:	4b17      	ldr	r3, [pc, #92]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff3e:	2200      	movs	r2, #0
 800ff40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ff42:	4b16      	ldr	r3, [pc, #88]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff44:	2202      	movs	r2, #2
 800ff46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ff48:	4b14      	ldr	r3, [pc, #80]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ff4e:	4b13      	ldr	r3, [pc, #76]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff50:	2200      	movs	r2, #0
 800ff52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ff54:	4b11      	ldr	r3, [pc, #68]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff56:	2200      	movs	r2, #0
 800ff58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ff5a:	4b10      	ldr	r3, [pc, #64]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ff60:	4b0e      	ldr	r3, [pc, #56]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff62:	2200      	movs	r2, #0
 800ff64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ff66:	480d      	ldr	r0, [pc, #52]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff68:	f7f4 f86b 	bl	8004042 <HAL_PCD_Init>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d001      	beq.n	800ff76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ff72:	f7f1 f90f 	bl	8001194 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ff76:	2180      	movs	r1, #128	; 0x80
 800ff78:	4808      	ldr	r0, [pc, #32]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff7a:	f7f5 fae6 	bl	800554a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ff7e:	2240      	movs	r2, #64	; 0x40
 800ff80:	2100      	movs	r1, #0
 800ff82:	4806      	ldr	r0, [pc, #24]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff84:	f7f5 fa9a 	bl	80054bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ff88:	2280      	movs	r2, #128	; 0x80
 800ff8a:	2101      	movs	r1, #1
 800ff8c:	4803      	ldr	r0, [pc, #12]	; (800ff9c <USBD_LL_Init+0x94>)
 800ff8e:	f7f5 fa95 	bl	80054bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ff92:	2300      	movs	r3, #0
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3708      	adds	r7, #8
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	20003f80 	.word	0x20003f80

0800ffa0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffac:	2300      	movs	r3, #0
 800ffae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7f4 f967 	bl	800428a <HAL_PCD_Start>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffc0:	7bfb      	ldrb	r3, [r7, #15]
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f000 f97e 	bl	80102c4 <USBD_Get_USB_Status>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffce:	4618      	mov	r0, r3
 800ffd0:	3710      	adds	r7, #16
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}

0800ffd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ffd6:	b580      	push	{r7, lr}
 800ffd8:	b084      	sub	sp, #16
 800ffda:	af00      	add	r7, sp, #0
 800ffdc:	6078      	str	r0, [r7, #4]
 800ffde:	4608      	mov	r0, r1
 800ffe0:	4611      	mov	r1, r2
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	70fb      	strb	r3, [r7, #3]
 800ffe8:	460b      	mov	r3, r1
 800ffea:	70bb      	strb	r3, [r7, #2]
 800ffec:	4613      	mov	r3, r2
 800ffee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fff0:	2300      	movs	r3, #0
 800fff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fff4:	2300      	movs	r3, #0
 800fff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fffe:	78bb      	ldrb	r3, [r7, #2]
 8010000:	883a      	ldrh	r2, [r7, #0]
 8010002:	78f9      	ldrb	r1, [r7, #3]
 8010004:	f7f4 fe54 	bl	8004cb0 <HAL_PCD_EP_Open>
 8010008:	4603      	mov	r3, r0
 801000a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801000c:	7bfb      	ldrb	r3, [r7, #15]
 801000e:	4618      	mov	r0, r3
 8010010:	f000 f958 	bl	80102c4 <USBD_Get_USB_Status>
 8010014:	4603      	mov	r3, r0
 8010016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010018:	7bbb      	ldrb	r3, [r7, #14]
}
 801001a:	4618      	mov	r0, r3
 801001c:	3710      	adds	r7, #16
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}

08010022 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010022:	b580      	push	{r7, lr}
 8010024:	b084      	sub	sp, #16
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
 801002a:	460b      	mov	r3, r1
 801002c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801002e:	2300      	movs	r3, #0
 8010030:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010032:	2300      	movs	r3, #0
 8010034:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801003c:	78fa      	ldrb	r2, [r7, #3]
 801003e:	4611      	mov	r1, r2
 8010040:	4618      	mov	r0, r3
 8010042:	f7f4 fe9d 	bl	8004d80 <HAL_PCD_EP_Close>
 8010046:	4603      	mov	r3, r0
 8010048:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801004a:	7bfb      	ldrb	r3, [r7, #15]
 801004c:	4618      	mov	r0, r3
 801004e:	f000 f939 	bl	80102c4 <USBD_Get_USB_Status>
 8010052:	4603      	mov	r3, r0
 8010054:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010056:	7bbb      	ldrb	r3, [r7, #14]
}
 8010058:	4618      	mov	r0, r3
 801005a:	3710      	adds	r7, #16
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}

08010060 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	460b      	mov	r3, r1
 801006a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801006c:	2300      	movs	r3, #0
 801006e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010070:	2300      	movs	r3, #0
 8010072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801007a:	78fa      	ldrb	r2, [r7, #3]
 801007c:	4611      	mov	r1, r2
 801007e:	4618      	mov	r0, r3
 8010080:	f7f4 ff75 	bl	8004f6e <HAL_PCD_EP_SetStall>
 8010084:	4603      	mov	r3, r0
 8010086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010088:	7bfb      	ldrb	r3, [r7, #15]
 801008a:	4618      	mov	r0, r3
 801008c:	f000 f91a 	bl	80102c4 <USBD_Get_USB_Status>
 8010090:	4603      	mov	r3, r0
 8010092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010094:	7bbb      	ldrb	r3, [r7, #14]
}
 8010096:	4618      	mov	r0, r3
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801009e:	b580      	push	{r7, lr}
 80100a0:	b084      	sub	sp, #16
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
 80100a6:	460b      	mov	r3, r1
 80100a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100aa:	2300      	movs	r3, #0
 80100ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100ae:	2300      	movs	r3, #0
 80100b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80100b8:	78fa      	ldrb	r2, [r7, #3]
 80100ba:	4611      	mov	r1, r2
 80100bc:	4618      	mov	r0, r3
 80100be:	f7f4 ffba 	bl	8005036 <HAL_PCD_EP_ClrStall>
 80100c2:	4603      	mov	r3, r0
 80100c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100c6:	7bfb      	ldrb	r3, [r7, #15]
 80100c8:	4618      	mov	r0, r3
 80100ca:	f000 f8fb 	bl	80102c4 <USBD_Get_USB_Status>
 80100ce:	4603      	mov	r3, r0
 80100d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	3710      	adds	r7, #16
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}

080100dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100dc:	b480      	push	{r7}
 80100de:	b085      	sub	sp, #20
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	460b      	mov	r3, r1
 80100e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80100ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80100f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	da0b      	bge.n	8010110 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80100f8:	78fb      	ldrb	r3, [r7, #3]
 80100fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80100fe:	68f9      	ldr	r1, [r7, #12]
 8010100:	4613      	mov	r3, r2
 8010102:	00db      	lsls	r3, r3, #3
 8010104:	4413      	add	r3, r2
 8010106:	009b      	lsls	r3, r3, #2
 8010108:	440b      	add	r3, r1
 801010a:	333e      	adds	r3, #62	; 0x3e
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	e00b      	b.n	8010128 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010110:	78fb      	ldrb	r3, [r7, #3]
 8010112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010116:	68f9      	ldr	r1, [r7, #12]
 8010118:	4613      	mov	r3, r2
 801011a:	00db      	lsls	r3, r3, #3
 801011c:	4413      	add	r3, r2
 801011e:	009b      	lsls	r3, r3, #2
 8010120:	440b      	add	r3, r1
 8010122:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010126:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010128:	4618      	mov	r0, r3
 801012a:	3714      	adds	r7, #20
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr

08010134 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b084      	sub	sp, #16
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	460b      	mov	r3, r1
 801013e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010140:	2300      	movs	r3, #0
 8010142:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010144:	2300      	movs	r3, #0
 8010146:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801014e:	78fa      	ldrb	r2, [r7, #3]
 8010150:	4611      	mov	r1, r2
 8010152:	4618      	mov	r0, r3
 8010154:	f7f4 fd87 	bl	8004c66 <HAL_PCD_SetAddress>
 8010158:	4603      	mov	r3, r0
 801015a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801015c:	7bfb      	ldrb	r3, [r7, #15]
 801015e:	4618      	mov	r0, r3
 8010160:	f000 f8b0 	bl	80102c4 <USBD_Get_USB_Status>
 8010164:	4603      	mov	r3, r0
 8010166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010168:	7bbb      	ldrb	r3, [r7, #14]
}
 801016a:	4618      	mov	r0, r3
 801016c:	3710      	adds	r7, #16
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010172:	b580      	push	{r7, lr}
 8010174:	b086      	sub	sp, #24
 8010176:	af00      	add	r7, sp, #0
 8010178:	60f8      	str	r0, [r7, #12]
 801017a:	607a      	str	r2, [r7, #4]
 801017c:	603b      	str	r3, [r7, #0]
 801017e:	460b      	mov	r3, r1
 8010180:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010182:	2300      	movs	r3, #0
 8010184:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010186:	2300      	movs	r3, #0
 8010188:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010190:	7af9      	ldrb	r1, [r7, #11]
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	687a      	ldr	r2, [r7, #4]
 8010196:	f7f4 fea0 	bl	8004eda <HAL_PCD_EP_Transmit>
 801019a:	4603      	mov	r3, r0
 801019c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801019e:	7dfb      	ldrb	r3, [r7, #23]
 80101a0:	4618      	mov	r0, r3
 80101a2:	f000 f88f 	bl	80102c4 <USBD_Get_USB_Status>
 80101a6:	4603      	mov	r3, r0
 80101a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80101aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3718      	adds	r7, #24
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}

080101b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b086      	sub	sp, #24
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	60f8      	str	r0, [r7, #12]
 80101bc:	607a      	str	r2, [r7, #4]
 80101be:	603b      	str	r3, [r7, #0]
 80101c0:	460b      	mov	r3, r1
 80101c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101c4:	2300      	movs	r3, #0
 80101c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101c8:	2300      	movs	r3, #0
 80101ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80101d2:	7af9      	ldrb	r1, [r7, #11]
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	f7f4 fe1c 	bl	8004e14 <HAL_PCD_EP_Receive>
 80101dc:	4603      	mov	r3, r0
 80101de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101e0:	7dfb      	ldrb	r3, [r7, #23]
 80101e2:	4618      	mov	r0, r3
 80101e4:	f000 f86e 	bl	80102c4 <USBD_Get_USB_Status>
 80101e8:	4603      	mov	r3, r0
 80101ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80101ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3718      	adds	r7, #24
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b082      	sub	sp, #8
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
 80101fe:	460b      	mov	r3, r1
 8010200:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010208:	78fa      	ldrb	r2, [r7, #3]
 801020a:	4611      	mov	r1, r2
 801020c:	4618      	mov	r0, r3
 801020e:	f7f4 fe4c 	bl	8004eaa <HAL_PCD_EP_GetRxCount>
 8010212:	4603      	mov	r3, r0
}
 8010214:	4618      	mov	r0, r3
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	460b      	mov	r3, r1
 8010226:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010228:	78fb      	ldrb	r3, [r7, #3]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d002      	beq.n	8010234 <HAL_PCDEx_LPM_Callback+0x18>
 801022e:	2b01      	cmp	r3, #1
 8010230:	d01f      	beq.n	8010272 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010232:	e03b      	b.n	80102ac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6a1b      	ldr	r3, [r3, #32]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d007      	beq.n	801024c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801023c:	f000 f83c 	bl	80102b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010240:	4b1c      	ldr	r3, [pc, #112]	; (80102b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8010242:	691b      	ldr	r3, [r3, #16]
 8010244:	4a1b      	ldr	r2, [pc, #108]	; (80102b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8010246:	f023 0306 	bic.w	r3, r3, #6
 801024a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	687a      	ldr	r2, [r7, #4]
 8010258:	6812      	ldr	r2, [r2, #0]
 801025a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801025e:	f023 0301 	bic.w	r3, r3, #1
 8010262:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801026a:	4618      	mov	r0, r3
 801026c:	f7fb fc39 	bl	800bae2 <USBD_LL_Resume>
    break;
 8010270:	e01c      	b.n	80102ac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	687a      	ldr	r2, [r7, #4]
 801027e:	6812      	ldr	r2, [r2, #0]
 8010280:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010284:	f043 0301 	orr.w	r3, r3, #1
 8010288:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010290:	4618      	mov	r0, r3
 8010292:	f7fb fc10 	bl	800bab6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6a1b      	ldr	r3, [r3, #32]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d005      	beq.n	80102aa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801029e:	4b05      	ldr	r3, [pc, #20]	; (80102b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80102a0:	691b      	ldr	r3, [r3, #16]
 80102a2:	4a04      	ldr	r2, [pc, #16]	; (80102b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80102a4:	f043 0306 	orr.w	r3, r3, #6
 80102a8:	6113      	str	r3, [r2, #16]
    break;
 80102aa:	bf00      	nop
}
 80102ac:	bf00      	nop
 80102ae:	3708      	adds	r7, #8
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}
 80102b4:	e000ed00 	.word	0xe000ed00

080102b8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80102bc:	f7f0 fc1c 	bl	8000af8 <SystemClock_Config>
}
 80102c0:	bf00      	nop
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80102c4:	b480      	push	{r7}
 80102c6:	b085      	sub	sp, #20
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	4603      	mov	r3, r0
 80102cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102ce:	2300      	movs	r3, #0
 80102d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80102d2:	79fb      	ldrb	r3, [r7, #7]
 80102d4:	2b03      	cmp	r3, #3
 80102d6:	d817      	bhi.n	8010308 <USBD_Get_USB_Status+0x44>
 80102d8:	a201      	add	r2, pc, #4	; (adr r2, 80102e0 <USBD_Get_USB_Status+0x1c>)
 80102da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102de:	bf00      	nop
 80102e0:	080102f1 	.word	0x080102f1
 80102e4:	080102f7 	.word	0x080102f7
 80102e8:	080102fd 	.word	0x080102fd
 80102ec:	08010303 	.word	0x08010303
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80102f0:	2300      	movs	r3, #0
 80102f2:	73fb      	strb	r3, [r7, #15]
    break;
 80102f4:	e00b      	b.n	801030e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80102f6:	2303      	movs	r3, #3
 80102f8:	73fb      	strb	r3, [r7, #15]
    break;
 80102fa:	e008      	b.n	801030e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80102fc:	2301      	movs	r3, #1
 80102fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010300:	e005      	b.n	801030e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010302:	2303      	movs	r3, #3
 8010304:	73fb      	strb	r3, [r7, #15]
    break;
 8010306:	e002      	b.n	801030e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010308:	2303      	movs	r3, #3
 801030a:	73fb      	strb	r3, [r7, #15]
    break;
 801030c:	bf00      	nop
  }
  return usb_status;
 801030e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010310:	4618      	mov	r0, r3
 8010312:	3714      	adds	r7, #20
 8010314:	46bd      	mov	sp, r7
 8010316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031a:	4770      	bx	lr

0801031c <malloc>:
 801031c:	4b02      	ldr	r3, [pc, #8]	; (8010328 <malloc+0xc>)
 801031e:	4601      	mov	r1, r0
 8010320:	6818      	ldr	r0, [r3, #0]
 8010322:	f000 b82b 	b.w	801037c <_malloc_r>
 8010326:	bf00      	nop
 8010328:	20000164 	.word	0x20000164

0801032c <free>:
 801032c:	4b02      	ldr	r3, [pc, #8]	; (8010338 <free+0xc>)
 801032e:	4601      	mov	r1, r0
 8010330:	6818      	ldr	r0, [r3, #0]
 8010332:	f000 ba69 	b.w	8010808 <_free_r>
 8010336:	bf00      	nop
 8010338:	20000164 	.word	0x20000164

0801033c <sbrk_aligned>:
 801033c:	b570      	push	{r4, r5, r6, lr}
 801033e:	4e0e      	ldr	r6, [pc, #56]	; (8010378 <sbrk_aligned+0x3c>)
 8010340:	460c      	mov	r4, r1
 8010342:	6831      	ldr	r1, [r6, #0]
 8010344:	4605      	mov	r5, r0
 8010346:	b911      	cbnz	r1, 801034e <sbrk_aligned+0x12>
 8010348:	f000 fa20 	bl	801078c <_sbrk_r>
 801034c:	6030      	str	r0, [r6, #0]
 801034e:	4621      	mov	r1, r4
 8010350:	4628      	mov	r0, r5
 8010352:	f000 fa1b 	bl	801078c <_sbrk_r>
 8010356:	1c43      	adds	r3, r0, #1
 8010358:	d00a      	beq.n	8010370 <sbrk_aligned+0x34>
 801035a:	1cc4      	adds	r4, r0, #3
 801035c:	f024 0403 	bic.w	r4, r4, #3
 8010360:	42a0      	cmp	r0, r4
 8010362:	d007      	beq.n	8010374 <sbrk_aligned+0x38>
 8010364:	1a21      	subs	r1, r4, r0
 8010366:	4628      	mov	r0, r5
 8010368:	f000 fa10 	bl	801078c <_sbrk_r>
 801036c:	3001      	adds	r0, #1
 801036e:	d101      	bne.n	8010374 <sbrk_aligned+0x38>
 8010370:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010374:	4620      	mov	r0, r4
 8010376:	bd70      	pop	{r4, r5, r6, pc}
 8010378:	2000448c 	.word	0x2000448c

0801037c <_malloc_r>:
 801037c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010380:	1ccd      	adds	r5, r1, #3
 8010382:	f025 0503 	bic.w	r5, r5, #3
 8010386:	3508      	adds	r5, #8
 8010388:	2d0c      	cmp	r5, #12
 801038a:	bf38      	it	cc
 801038c:	250c      	movcc	r5, #12
 801038e:	2d00      	cmp	r5, #0
 8010390:	4607      	mov	r7, r0
 8010392:	db01      	blt.n	8010398 <_malloc_r+0x1c>
 8010394:	42a9      	cmp	r1, r5
 8010396:	d905      	bls.n	80103a4 <_malloc_r+0x28>
 8010398:	230c      	movs	r3, #12
 801039a:	603b      	str	r3, [r7, #0]
 801039c:	2600      	movs	r6, #0
 801039e:	4630      	mov	r0, r6
 80103a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010478 <_malloc_r+0xfc>
 80103a8:	f000 f89c 	bl	80104e4 <__malloc_lock>
 80103ac:	f8d8 3000 	ldr.w	r3, [r8]
 80103b0:	461c      	mov	r4, r3
 80103b2:	bb5c      	cbnz	r4, 801040c <_malloc_r+0x90>
 80103b4:	4629      	mov	r1, r5
 80103b6:	4638      	mov	r0, r7
 80103b8:	f7ff ffc0 	bl	801033c <sbrk_aligned>
 80103bc:	1c43      	adds	r3, r0, #1
 80103be:	4604      	mov	r4, r0
 80103c0:	d155      	bne.n	801046e <_malloc_r+0xf2>
 80103c2:	f8d8 4000 	ldr.w	r4, [r8]
 80103c6:	4626      	mov	r6, r4
 80103c8:	2e00      	cmp	r6, #0
 80103ca:	d145      	bne.n	8010458 <_malloc_r+0xdc>
 80103cc:	2c00      	cmp	r4, #0
 80103ce:	d048      	beq.n	8010462 <_malloc_r+0xe6>
 80103d0:	6823      	ldr	r3, [r4, #0]
 80103d2:	4631      	mov	r1, r6
 80103d4:	4638      	mov	r0, r7
 80103d6:	eb04 0903 	add.w	r9, r4, r3
 80103da:	f000 f9d7 	bl	801078c <_sbrk_r>
 80103de:	4581      	cmp	r9, r0
 80103e0:	d13f      	bne.n	8010462 <_malloc_r+0xe6>
 80103e2:	6821      	ldr	r1, [r4, #0]
 80103e4:	1a6d      	subs	r5, r5, r1
 80103e6:	4629      	mov	r1, r5
 80103e8:	4638      	mov	r0, r7
 80103ea:	f7ff ffa7 	bl	801033c <sbrk_aligned>
 80103ee:	3001      	adds	r0, #1
 80103f0:	d037      	beq.n	8010462 <_malloc_r+0xe6>
 80103f2:	6823      	ldr	r3, [r4, #0]
 80103f4:	442b      	add	r3, r5
 80103f6:	6023      	str	r3, [r4, #0]
 80103f8:	f8d8 3000 	ldr.w	r3, [r8]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d038      	beq.n	8010472 <_malloc_r+0xf6>
 8010400:	685a      	ldr	r2, [r3, #4]
 8010402:	42a2      	cmp	r2, r4
 8010404:	d12b      	bne.n	801045e <_malloc_r+0xe2>
 8010406:	2200      	movs	r2, #0
 8010408:	605a      	str	r2, [r3, #4]
 801040a:	e00f      	b.n	801042c <_malloc_r+0xb0>
 801040c:	6822      	ldr	r2, [r4, #0]
 801040e:	1b52      	subs	r2, r2, r5
 8010410:	d41f      	bmi.n	8010452 <_malloc_r+0xd6>
 8010412:	2a0b      	cmp	r2, #11
 8010414:	d917      	bls.n	8010446 <_malloc_r+0xca>
 8010416:	1961      	adds	r1, r4, r5
 8010418:	42a3      	cmp	r3, r4
 801041a:	6025      	str	r5, [r4, #0]
 801041c:	bf18      	it	ne
 801041e:	6059      	strne	r1, [r3, #4]
 8010420:	6863      	ldr	r3, [r4, #4]
 8010422:	bf08      	it	eq
 8010424:	f8c8 1000 	streq.w	r1, [r8]
 8010428:	5162      	str	r2, [r4, r5]
 801042a:	604b      	str	r3, [r1, #4]
 801042c:	4638      	mov	r0, r7
 801042e:	f104 060b 	add.w	r6, r4, #11
 8010432:	f000 f85d 	bl	80104f0 <__malloc_unlock>
 8010436:	f026 0607 	bic.w	r6, r6, #7
 801043a:	1d23      	adds	r3, r4, #4
 801043c:	1af2      	subs	r2, r6, r3
 801043e:	d0ae      	beq.n	801039e <_malloc_r+0x22>
 8010440:	1b9b      	subs	r3, r3, r6
 8010442:	50a3      	str	r3, [r4, r2]
 8010444:	e7ab      	b.n	801039e <_malloc_r+0x22>
 8010446:	42a3      	cmp	r3, r4
 8010448:	6862      	ldr	r2, [r4, #4]
 801044a:	d1dd      	bne.n	8010408 <_malloc_r+0x8c>
 801044c:	f8c8 2000 	str.w	r2, [r8]
 8010450:	e7ec      	b.n	801042c <_malloc_r+0xb0>
 8010452:	4623      	mov	r3, r4
 8010454:	6864      	ldr	r4, [r4, #4]
 8010456:	e7ac      	b.n	80103b2 <_malloc_r+0x36>
 8010458:	4634      	mov	r4, r6
 801045a:	6876      	ldr	r6, [r6, #4]
 801045c:	e7b4      	b.n	80103c8 <_malloc_r+0x4c>
 801045e:	4613      	mov	r3, r2
 8010460:	e7cc      	b.n	80103fc <_malloc_r+0x80>
 8010462:	230c      	movs	r3, #12
 8010464:	603b      	str	r3, [r7, #0]
 8010466:	4638      	mov	r0, r7
 8010468:	f000 f842 	bl	80104f0 <__malloc_unlock>
 801046c:	e797      	b.n	801039e <_malloc_r+0x22>
 801046e:	6025      	str	r5, [r4, #0]
 8010470:	e7dc      	b.n	801042c <_malloc_r+0xb0>
 8010472:	605b      	str	r3, [r3, #4]
 8010474:	deff      	udf	#255	; 0xff
 8010476:	bf00      	nop
 8010478:	20004488 	.word	0x20004488

0801047c <sniprintf>:
 801047c:	b40c      	push	{r2, r3}
 801047e:	b530      	push	{r4, r5, lr}
 8010480:	4b17      	ldr	r3, [pc, #92]	; (80104e0 <sniprintf+0x64>)
 8010482:	1e0c      	subs	r4, r1, #0
 8010484:	681d      	ldr	r5, [r3, #0]
 8010486:	b09d      	sub	sp, #116	; 0x74
 8010488:	da08      	bge.n	801049c <sniprintf+0x20>
 801048a:	238b      	movs	r3, #139	; 0x8b
 801048c:	602b      	str	r3, [r5, #0]
 801048e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010492:	b01d      	add	sp, #116	; 0x74
 8010494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010498:	b002      	add	sp, #8
 801049a:	4770      	bx	lr
 801049c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80104a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80104a4:	bf14      	ite	ne
 80104a6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80104aa:	4623      	moveq	r3, r4
 80104ac:	9304      	str	r3, [sp, #16]
 80104ae:	9307      	str	r3, [sp, #28]
 80104b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80104b4:	9002      	str	r0, [sp, #8]
 80104b6:	9006      	str	r0, [sp, #24]
 80104b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80104bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80104be:	ab21      	add	r3, sp, #132	; 0x84
 80104c0:	a902      	add	r1, sp, #8
 80104c2:	4628      	mov	r0, r5
 80104c4:	9301      	str	r3, [sp, #4]
 80104c6:	f000 fa45 	bl	8010954 <_svfiprintf_r>
 80104ca:	1c43      	adds	r3, r0, #1
 80104cc:	bfbc      	itt	lt
 80104ce:	238b      	movlt	r3, #139	; 0x8b
 80104d0:	602b      	strlt	r3, [r5, #0]
 80104d2:	2c00      	cmp	r4, #0
 80104d4:	d0dd      	beq.n	8010492 <sniprintf+0x16>
 80104d6:	9b02      	ldr	r3, [sp, #8]
 80104d8:	2200      	movs	r2, #0
 80104da:	701a      	strb	r2, [r3, #0]
 80104dc:	e7d9      	b.n	8010492 <sniprintf+0x16>
 80104de:	bf00      	nop
 80104e0:	20000164 	.word	0x20000164

080104e4 <__malloc_lock>:
 80104e4:	4801      	ldr	r0, [pc, #4]	; (80104ec <__malloc_lock+0x8>)
 80104e6:	f000 b98c 	b.w	8010802 <__retarget_lock_acquire_recursive>
 80104ea:	bf00      	nop
 80104ec:	200045cc 	.word	0x200045cc

080104f0 <__malloc_unlock>:
 80104f0:	4801      	ldr	r0, [pc, #4]	; (80104f8 <__malloc_unlock+0x8>)
 80104f2:	f000 b987 	b.w	8010804 <__retarget_lock_release_recursive>
 80104f6:	bf00      	nop
 80104f8:	200045cc 	.word	0x200045cc

080104fc <std>:
 80104fc:	2300      	movs	r3, #0
 80104fe:	b510      	push	{r4, lr}
 8010500:	4604      	mov	r4, r0
 8010502:	e9c0 3300 	strd	r3, r3, [r0]
 8010506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801050a:	6083      	str	r3, [r0, #8]
 801050c:	8181      	strh	r1, [r0, #12]
 801050e:	6643      	str	r3, [r0, #100]	; 0x64
 8010510:	81c2      	strh	r2, [r0, #14]
 8010512:	6183      	str	r3, [r0, #24]
 8010514:	4619      	mov	r1, r3
 8010516:	2208      	movs	r2, #8
 8010518:	305c      	adds	r0, #92	; 0x5c
 801051a:	f000 f92e 	bl	801077a <memset>
 801051e:	4b0d      	ldr	r3, [pc, #52]	; (8010554 <std+0x58>)
 8010520:	6263      	str	r3, [r4, #36]	; 0x24
 8010522:	4b0d      	ldr	r3, [pc, #52]	; (8010558 <std+0x5c>)
 8010524:	62a3      	str	r3, [r4, #40]	; 0x28
 8010526:	4b0d      	ldr	r3, [pc, #52]	; (801055c <std+0x60>)
 8010528:	62e3      	str	r3, [r4, #44]	; 0x2c
 801052a:	4b0d      	ldr	r3, [pc, #52]	; (8010560 <std+0x64>)
 801052c:	6323      	str	r3, [r4, #48]	; 0x30
 801052e:	4b0d      	ldr	r3, [pc, #52]	; (8010564 <std+0x68>)
 8010530:	6224      	str	r4, [r4, #32]
 8010532:	429c      	cmp	r4, r3
 8010534:	d006      	beq.n	8010544 <std+0x48>
 8010536:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801053a:	4294      	cmp	r4, r2
 801053c:	d002      	beq.n	8010544 <std+0x48>
 801053e:	33d0      	adds	r3, #208	; 0xd0
 8010540:	429c      	cmp	r4, r3
 8010542:	d105      	bne.n	8010550 <std+0x54>
 8010544:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801054c:	f000 b958 	b.w	8010800 <__retarget_lock_init_recursive>
 8010550:	bd10      	pop	{r4, pc}
 8010552:	bf00      	nop
 8010554:	08011255 	.word	0x08011255
 8010558:	08011277 	.word	0x08011277
 801055c:	080112af 	.word	0x080112af
 8010560:	080112d3 	.word	0x080112d3
 8010564:	20004490 	.word	0x20004490

08010568 <stdio_exit_handler>:
 8010568:	4a02      	ldr	r2, [pc, #8]	; (8010574 <stdio_exit_handler+0xc>)
 801056a:	4903      	ldr	r1, [pc, #12]	; (8010578 <stdio_exit_handler+0x10>)
 801056c:	4803      	ldr	r0, [pc, #12]	; (801057c <stdio_exit_handler+0x14>)
 801056e:	f000 b869 	b.w	8010644 <_fwalk_sglue>
 8010572:	bf00      	nop
 8010574:	2000010c 	.word	0x2000010c
 8010578:	08011205 	.word	0x08011205
 801057c:	20000118 	.word	0x20000118

08010580 <cleanup_stdio>:
 8010580:	6841      	ldr	r1, [r0, #4]
 8010582:	4b0c      	ldr	r3, [pc, #48]	; (80105b4 <cleanup_stdio+0x34>)
 8010584:	4299      	cmp	r1, r3
 8010586:	b510      	push	{r4, lr}
 8010588:	4604      	mov	r4, r0
 801058a:	d001      	beq.n	8010590 <cleanup_stdio+0x10>
 801058c:	f000 fe3a 	bl	8011204 <_fflush_r>
 8010590:	68a1      	ldr	r1, [r4, #8]
 8010592:	4b09      	ldr	r3, [pc, #36]	; (80105b8 <cleanup_stdio+0x38>)
 8010594:	4299      	cmp	r1, r3
 8010596:	d002      	beq.n	801059e <cleanup_stdio+0x1e>
 8010598:	4620      	mov	r0, r4
 801059a:	f000 fe33 	bl	8011204 <_fflush_r>
 801059e:	68e1      	ldr	r1, [r4, #12]
 80105a0:	4b06      	ldr	r3, [pc, #24]	; (80105bc <cleanup_stdio+0x3c>)
 80105a2:	4299      	cmp	r1, r3
 80105a4:	d004      	beq.n	80105b0 <cleanup_stdio+0x30>
 80105a6:	4620      	mov	r0, r4
 80105a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105ac:	f000 be2a 	b.w	8011204 <_fflush_r>
 80105b0:	bd10      	pop	{r4, pc}
 80105b2:	bf00      	nop
 80105b4:	20004490 	.word	0x20004490
 80105b8:	200044f8 	.word	0x200044f8
 80105bc:	20004560 	.word	0x20004560

080105c0 <global_stdio_init.part.0>:
 80105c0:	b510      	push	{r4, lr}
 80105c2:	4b0b      	ldr	r3, [pc, #44]	; (80105f0 <global_stdio_init.part.0+0x30>)
 80105c4:	4c0b      	ldr	r4, [pc, #44]	; (80105f4 <global_stdio_init.part.0+0x34>)
 80105c6:	4a0c      	ldr	r2, [pc, #48]	; (80105f8 <global_stdio_init.part.0+0x38>)
 80105c8:	601a      	str	r2, [r3, #0]
 80105ca:	4620      	mov	r0, r4
 80105cc:	2200      	movs	r2, #0
 80105ce:	2104      	movs	r1, #4
 80105d0:	f7ff ff94 	bl	80104fc <std>
 80105d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80105d8:	2201      	movs	r2, #1
 80105da:	2109      	movs	r1, #9
 80105dc:	f7ff ff8e 	bl	80104fc <std>
 80105e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80105e4:	2202      	movs	r2, #2
 80105e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105ea:	2112      	movs	r1, #18
 80105ec:	f7ff bf86 	b.w	80104fc <std>
 80105f0:	200045c8 	.word	0x200045c8
 80105f4:	20004490 	.word	0x20004490
 80105f8:	08010569 	.word	0x08010569

080105fc <__sfp_lock_acquire>:
 80105fc:	4801      	ldr	r0, [pc, #4]	; (8010604 <__sfp_lock_acquire+0x8>)
 80105fe:	f000 b900 	b.w	8010802 <__retarget_lock_acquire_recursive>
 8010602:	bf00      	nop
 8010604:	200045cd 	.word	0x200045cd

08010608 <__sfp_lock_release>:
 8010608:	4801      	ldr	r0, [pc, #4]	; (8010610 <__sfp_lock_release+0x8>)
 801060a:	f000 b8fb 	b.w	8010804 <__retarget_lock_release_recursive>
 801060e:	bf00      	nop
 8010610:	200045cd 	.word	0x200045cd

08010614 <__sinit>:
 8010614:	b510      	push	{r4, lr}
 8010616:	4604      	mov	r4, r0
 8010618:	f7ff fff0 	bl	80105fc <__sfp_lock_acquire>
 801061c:	6a23      	ldr	r3, [r4, #32]
 801061e:	b11b      	cbz	r3, 8010628 <__sinit+0x14>
 8010620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010624:	f7ff bff0 	b.w	8010608 <__sfp_lock_release>
 8010628:	4b04      	ldr	r3, [pc, #16]	; (801063c <__sinit+0x28>)
 801062a:	6223      	str	r3, [r4, #32]
 801062c:	4b04      	ldr	r3, [pc, #16]	; (8010640 <__sinit+0x2c>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d1f5      	bne.n	8010620 <__sinit+0xc>
 8010634:	f7ff ffc4 	bl	80105c0 <global_stdio_init.part.0>
 8010638:	e7f2      	b.n	8010620 <__sinit+0xc>
 801063a:	bf00      	nop
 801063c:	08010581 	.word	0x08010581
 8010640:	200045c8 	.word	0x200045c8

08010644 <_fwalk_sglue>:
 8010644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010648:	4607      	mov	r7, r0
 801064a:	4688      	mov	r8, r1
 801064c:	4614      	mov	r4, r2
 801064e:	2600      	movs	r6, #0
 8010650:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010654:	f1b9 0901 	subs.w	r9, r9, #1
 8010658:	d505      	bpl.n	8010666 <_fwalk_sglue+0x22>
 801065a:	6824      	ldr	r4, [r4, #0]
 801065c:	2c00      	cmp	r4, #0
 801065e:	d1f7      	bne.n	8010650 <_fwalk_sglue+0xc>
 8010660:	4630      	mov	r0, r6
 8010662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010666:	89ab      	ldrh	r3, [r5, #12]
 8010668:	2b01      	cmp	r3, #1
 801066a:	d907      	bls.n	801067c <_fwalk_sglue+0x38>
 801066c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010670:	3301      	adds	r3, #1
 8010672:	d003      	beq.n	801067c <_fwalk_sglue+0x38>
 8010674:	4629      	mov	r1, r5
 8010676:	4638      	mov	r0, r7
 8010678:	47c0      	blx	r8
 801067a:	4306      	orrs	r6, r0
 801067c:	3568      	adds	r5, #104	; 0x68
 801067e:	e7e9      	b.n	8010654 <_fwalk_sglue+0x10>

08010680 <iprintf>:
 8010680:	b40f      	push	{r0, r1, r2, r3}
 8010682:	b507      	push	{r0, r1, r2, lr}
 8010684:	4906      	ldr	r1, [pc, #24]	; (80106a0 <iprintf+0x20>)
 8010686:	ab04      	add	r3, sp, #16
 8010688:	6808      	ldr	r0, [r1, #0]
 801068a:	f853 2b04 	ldr.w	r2, [r3], #4
 801068e:	6881      	ldr	r1, [r0, #8]
 8010690:	9301      	str	r3, [sp, #4]
 8010692:	f000 fa87 	bl	8010ba4 <_vfiprintf_r>
 8010696:	b003      	add	sp, #12
 8010698:	f85d eb04 	ldr.w	lr, [sp], #4
 801069c:	b004      	add	sp, #16
 801069e:	4770      	bx	lr
 80106a0:	20000164 	.word	0x20000164

080106a4 <_puts_r>:
 80106a4:	6a03      	ldr	r3, [r0, #32]
 80106a6:	b570      	push	{r4, r5, r6, lr}
 80106a8:	6884      	ldr	r4, [r0, #8]
 80106aa:	4605      	mov	r5, r0
 80106ac:	460e      	mov	r6, r1
 80106ae:	b90b      	cbnz	r3, 80106b4 <_puts_r+0x10>
 80106b0:	f7ff ffb0 	bl	8010614 <__sinit>
 80106b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106b6:	07db      	lsls	r3, r3, #31
 80106b8:	d405      	bmi.n	80106c6 <_puts_r+0x22>
 80106ba:	89a3      	ldrh	r3, [r4, #12]
 80106bc:	0598      	lsls	r0, r3, #22
 80106be:	d402      	bmi.n	80106c6 <_puts_r+0x22>
 80106c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106c2:	f000 f89e 	bl	8010802 <__retarget_lock_acquire_recursive>
 80106c6:	89a3      	ldrh	r3, [r4, #12]
 80106c8:	0719      	lsls	r1, r3, #28
 80106ca:	d513      	bpl.n	80106f4 <_puts_r+0x50>
 80106cc:	6923      	ldr	r3, [r4, #16]
 80106ce:	b18b      	cbz	r3, 80106f4 <_puts_r+0x50>
 80106d0:	3e01      	subs	r6, #1
 80106d2:	68a3      	ldr	r3, [r4, #8]
 80106d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80106d8:	3b01      	subs	r3, #1
 80106da:	60a3      	str	r3, [r4, #8]
 80106dc:	b9e9      	cbnz	r1, 801071a <_puts_r+0x76>
 80106de:	2b00      	cmp	r3, #0
 80106e0:	da2e      	bge.n	8010740 <_puts_r+0x9c>
 80106e2:	4622      	mov	r2, r4
 80106e4:	210a      	movs	r1, #10
 80106e6:	4628      	mov	r0, r5
 80106e8:	f000 fe26 	bl	8011338 <__swbuf_r>
 80106ec:	3001      	adds	r0, #1
 80106ee:	d007      	beq.n	8010700 <_puts_r+0x5c>
 80106f0:	250a      	movs	r5, #10
 80106f2:	e007      	b.n	8010704 <_puts_r+0x60>
 80106f4:	4621      	mov	r1, r4
 80106f6:	4628      	mov	r0, r5
 80106f8:	f000 fe5c 	bl	80113b4 <__swsetup_r>
 80106fc:	2800      	cmp	r0, #0
 80106fe:	d0e7      	beq.n	80106d0 <_puts_r+0x2c>
 8010700:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010706:	07da      	lsls	r2, r3, #31
 8010708:	d405      	bmi.n	8010716 <_puts_r+0x72>
 801070a:	89a3      	ldrh	r3, [r4, #12]
 801070c:	059b      	lsls	r3, r3, #22
 801070e:	d402      	bmi.n	8010716 <_puts_r+0x72>
 8010710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010712:	f000 f877 	bl	8010804 <__retarget_lock_release_recursive>
 8010716:	4628      	mov	r0, r5
 8010718:	bd70      	pop	{r4, r5, r6, pc}
 801071a:	2b00      	cmp	r3, #0
 801071c:	da04      	bge.n	8010728 <_puts_r+0x84>
 801071e:	69a2      	ldr	r2, [r4, #24]
 8010720:	429a      	cmp	r2, r3
 8010722:	dc06      	bgt.n	8010732 <_puts_r+0x8e>
 8010724:	290a      	cmp	r1, #10
 8010726:	d004      	beq.n	8010732 <_puts_r+0x8e>
 8010728:	6823      	ldr	r3, [r4, #0]
 801072a:	1c5a      	adds	r2, r3, #1
 801072c:	6022      	str	r2, [r4, #0]
 801072e:	7019      	strb	r1, [r3, #0]
 8010730:	e7cf      	b.n	80106d2 <_puts_r+0x2e>
 8010732:	4622      	mov	r2, r4
 8010734:	4628      	mov	r0, r5
 8010736:	f000 fdff 	bl	8011338 <__swbuf_r>
 801073a:	3001      	adds	r0, #1
 801073c:	d1c9      	bne.n	80106d2 <_puts_r+0x2e>
 801073e:	e7df      	b.n	8010700 <_puts_r+0x5c>
 8010740:	6823      	ldr	r3, [r4, #0]
 8010742:	250a      	movs	r5, #10
 8010744:	1c5a      	adds	r2, r3, #1
 8010746:	6022      	str	r2, [r4, #0]
 8010748:	701d      	strb	r5, [r3, #0]
 801074a:	e7db      	b.n	8010704 <_puts_r+0x60>

0801074c <puts>:
 801074c:	4b02      	ldr	r3, [pc, #8]	; (8010758 <puts+0xc>)
 801074e:	4601      	mov	r1, r0
 8010750:	6818      	ldr	r0, [r3, #0]
 8010752:	f7ff bfa7 	b.w	80106a4 <_puts_r>
 8010756:	bf00      	nop
 8010758:	20000164 	.word	0x20000164

0801075c <strcat>:
 801075c:	b510      	push	{r4, lr}
 801075e:	4602      	mov	r2, r0
 8010760:	7814      	ldrb	r4, [r2, #0]
 8010762:	4613      	mov	r3, r2
 8010764:	3201      	adds	r2, #1
 8010766:	2c00      	cmp	r4, #0
 8010768:	d1fa      	bne.n	8010760 <strcat+0x4>
 801076a:	3b01      	subs	r3, #1
 801076c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010770:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010774:	2a00      	cmp	r2, #0
 8010776:	d1f9      	bne.n	801076c <strcat+0x10>
 8010778:	bd10      	pop	{r4, pc}

0801077a <memset>:
 801077a:	4402      	add	r2, r0
 801077c:	4603      	mov	r3, r0
 801077e:	4293      	cmp	r3, r2
 8010780:	d100      	bne.n	8010784 <memset+0xa>
 8010782:	4770      	bx	lr
 8010784:	f803 1b01 	strb.w	r1, [r3], #1
 8010788:	e7f9      	b.n	801077e <memset+0x4>
	...

0801078c <_sbrk_r>:
 801078c:	b538      	push	{r3, r4, r5, lr}
 801078e:	4d06      	ldr	r5, [pc, #24]	; (80107a8 <_sbrk_r+0x1c>)
 8010790:	2300      	movs	r3, #0
 8010792:	4604      	mov	r4, r0
 8010794:	4608      	mov	r0, r1
 8010796:	602b      	str	r3, [r5, #0]
 8010798:	f7f1 f836 	bl	8001808 <_sbrk>
 801079c:	1c43      	adds	r3, r0, #1
 801079e:	d102      	bne.n	80107a6 <_sbrk_r+0x1a>
 80107a0:	682b      	ldr	r3, [r5, #0]
 80107a2:	b103      	cbz	r3, 80107a6 <_sbrk_r+0x1a>
 80107a4:	6023      	str	r3, [r4, #0]
 80107a6:	bd38      	pop	{r3, r4, r5, pc}
 80107a8:	200045d0 	.word	0x200045d0

080107ac <__errno>:
 80107ac:	4b01      	ldr	r3, [pc, #4]	; (80107b4 <__errno+0x8>)
 80107ae:	6818      	ldr	r0, [r3, #0]
 80107b0:	4770      	bx	lr
 80107b2:	bf00      	nop
 80107b4:	20000164 	.word	0x20000164

080107b8 <__libc_init_array>:
 80107b8:	b570      	push	{r4, r5, r6, lr}
 80107ba:	4d0d      	ldr	r5, [pc, #52]	; (80107f0 <__libc_init_array+0x38>)
 80107bc:	4c0d      	ldr	r4, [pc, #52]	; (80107f4 <__libc_init_array+0x3c>)
 80107be:	1b64      	subs	r4, r4, r5
 80107c0:	10a4      	asrs	r4, r4, #2
 80107c2:	2600      	movs	r6, #0
 80107c4:	42a6      	cmp	r6, r4
 80107c6:	d109      	bne.n	80107dc <__libc_init_array+0x24>
 80107c8:	4d0b      	ldr	r5, [pc, #44]	; (80107f8 <__libc_init_array+0x40>)
 80107ca:	4c0c      	ldr	r4, [pc, #48]	; (80107fc <__libc_init_array+0x44>)
 80107cc:	f000 ff44 	bl	8011658 <_init>
 80107d0:	1b64      	subs	r4, r4, r5
 80107d2:	10a4      	asrs	r4, r4, #2
 80107d4:	2600      	movs	r6, #0
 80107d6:	42a6      	cmp	r6, r4
 80107d8:	d105      	bne.n	80107e6 <__libc_init_array+0x2e>
 80107da:	bd70      	pop	{r4, r5, r6, pc}
 80107dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80107e0:	4798      	blx	r3
 80107e2:	3601      	adds	r6, #1
 80107e4:	e7ee      	b.n	80107c4 <__libc_init_array+0xc>
 80107e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80107ea:	4798      	blx	r3
 80107ec:	3601      	adds	r6, #1
 80107ee:	e7f2      	b.n	80107d6 <__libc_init_array+0x1e>
 80107f0:	08011eac 	.word	0x08011eac
 80107f4:	08011eac 	.word	0x08011eac
 80107f8:	08011eac 	.word	0x08011eac
 80107fc:	08011eb0 	.word	0x08011eb0

08010800 <__retarget_lock_init_recursive>:
 8010800:	4770      	bx	lr

08010802 <__retarget_lock_acquire_recursive>:
 8010802:	4770      	bx	lr

08010804 <__retarget_lock_release_recursive>:
 8010804:	4770      	bx	lr
	...

08010808 <_free_r>:
 8010808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801080a:	2900      	cmp	r1, #0
 801080c:	d044      	beq.n	8010898 <_free_r+0x90>
 801080e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010812:	9001      	str	r0, [sp, #4]
 8010814:	2b00      	cmp	r3, #0
 8010816:	f1a1 0404 	sub.w	r4, r1, #4
 801081a:	bfb8      	it	lt
 801081c:	18e4      	addlt	r4, r4, r3
 801081e:	f7ff fe61 	bl	80104e4 <__malloc_lock>
 8010822:	4a1e      	ldr	r2, [pc, #120]	; (801089c <_free_r+0x94>)
 8010824:	9801      	ldr	r0, [sp, #4]
 8010826:	6813      	ldr	r3, [r2, #0]
 8010828:	b933      	cbnz	r3, 8010838 <_free_r+0x30>
 801082a:	6063      	str	r3, [r4, #4]
 801082c:	6014      	str	r4, [r2, #0]
 801082e:	b003      	add	sp, #12
 8010830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010834:	f7ff be5c 	b.w	80104f0 <__malloc_unlock>
 8010838:	42a3      	cmp	r3, r4
 801083a:	d908      	bls.n	801084e <_free_r+0x46>
 801083c:	6825      	ldr	r5, [r4, #0]
 801083e:	1961      	adds	r1, r4, r5
 8010840:	428b      	cmp	r3, r1
 8010842:	bf01      	itttt	eq
 8010844:	6819      	ldreq	r1, [r3, #0]
 8010846:	685b      	ldreq	r3, [r3, #4]
 8010848:	1949      	addeq	r1, r1, r5
 801084a:	6021      	streq	r1, [r4, #0]
 801084c:	e7ed      	b.n	801082a <_free_r+0x22>
 801084e:	461a      	mov	r2, r3
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	b10b      	cbz	r3, 8010858 <_free_r+0x50>
 8010854:	42a3      	cmp	r3, r4
 8010856:	d9fa      	bls.n	801084e <_free_r+0x46>
 8010858:	6811      	ldr	r1, [r2, #0]
 801085a:	1855      	adds	r5, r2, r1
 801085c:	42a5      	cmp	r5, r4
 801085e:	d10b      	bne.n	8010878 <_free_r+0x70>
 8010860:	6824      	ldr	r4, [r4, #0]
 8010862:	4421      	add	r1, r4
 8010864:	1854      	adds	r4, r2, r1
 8010866:	42a3      	cmp	r3, r4
 8010868:	6011      	str	r1, [r2, #0]
 801086a:	d1e0      	bne.n	801082e <_free_r+0x26>
 801086c:	681c      	ldr	r4, [r3, #0]
 801086e:	685b      	ldr	r3, [r3, #4]
 8010870:	6053      	str	r3, [r2, #4]
 8010872:	440c      	add	r4, r1
 8010874:	6014      	str	r4, [r2, #0]
 8010876:	e7da      	b.n	801082e <_free_r+0x26>
 8010878:	d902      	bls.n	8010880 <_free_r+0x78>
 801087a:	230c      	movs	r3, #12
 801087c:	6003      	str	r3, [r0, #0]
 801087e:	e7d6      	b.n	801082e <_free_r+0x26>
 8010880:	6825      	ldr	r5, [r4, #0]
 8010882:	1961      	adds	r1, r4, r5
 8010884:	428b      	cmp	r3, r1
 8010886:	bf04      	itt	eq
 8010888:	6819      	ldreq	r1, [r3, #0]
 801088a:	685b      	ldreq	r3, [r3, #4]
 801088c:	6063      	str	r3, [r4, #4]
 801088e:	bf04      	itt	eq
 8010890:	1949      	addeq	r1, r1, r5
 8010892:	6021      	streq	r1, [r4, #0]
 8010894:	6054      	str	r4, [r2, #4]
 8010896:	e7ca      	b.n	801082e <_free_r+0x26>
 8010898:	b003      	add	sp, #12
 801089a:	bd30      	pop	{r4, r5, pc}
 801089c:	20004488 	.word	0x20004488

080108a0 <__ssputs_r>:
 80108a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108a4:	688e      	ldr	r6, [r1, #8]
 80108a6:	461f      	mov	r7, r3
 80108a8:	42be      	cmp	r6, r7
 80108aa:	680b      	ldr	r3, [r1, #0]
 80108ac:	4682      	mov	sl, r0
 80108ae:	460c      	mov	r4, r1
 80108b0:	4690      	mov	r8, r2
 80108b2:	d82c      	bhi.n	801090e <__ssputs_r+0x6e>
 80108b4:	898a      	ldrh	r2, [r1, #12]
 80108b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80108ba:	d026      	beq.n	801090a <__ssputs_r+0x6a>
 80108bc:	6965      	ldr	r5, [r4, #20]
 80108be:	6909      	ldr	r1, [r1, #16]
 80108c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108c4:	eba3 0901 	sub.w	r9, r3, r1
 80108c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80108cc:	1c7b      	adds	r3, r7, #1
 80108ce:	444b      	add	r3, r9
 80108d0:	106d      	asrs	r5, r5, #1
 80108d2:	429d      	cmp	r5, r3
 80108d4:	bf38      	it	cc
 80108d6:	461d      	movcc	r5, r3
 80108d8:	0553      	lsls	r3, r2, #21
 80108da:	d527      	bpl.n	801092c <__ssputs_r+0x8c>
 80108dc:	4629      	mov	r1, r5
 80108de:	f7ff fd4d 	bl	801037c <_malloc_r>
 80108e2:	4606      	mov	r6, r0
 80108e4:	b360      	cbz	r0, 8010940 <__ssputs_r+0xa0>
 80108e6:	6921      	ldr	r1, [r4, #16]
 80108e8:	464a      	mov	r2, r9
 80108ea:	f000 fe9f 	bl	801162c <memcpy>
 80108ee:	89a3      	ldrh	r3, [r4, #12]
 80108f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80108f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108f8:	81a3      	strh	r3, [r4, #12]
 80108fa:	6126      	str	r6, [r4, #16]
 80108fc:	6165      	str	r5, [r4, #20]
 80108fe:	444e      	add	r6, r9
 8010900:	eba5 0509 	sub.w	r5, r5, r9
 8010904:	6026      	str	r6, [r4, #0]
 8010906:	60a5      	str	r5, [r4, #8]
 8010908:	463e      	mov	r6, r7
 801090a:	42be      	cmp	r6, r7
 801090c:	d900      	bls.n	8010910 <__ssputs_r+0x70>
 801090e:	463e      	mov	r6, r7
 8010910:	6820      	ldr	r0, [r4, #0]
 8010912:	4632      	mov	r2, r6
 8010914:	4641      	mov	r1, r8
 8010916:	f000 fe07 	bl	8011528 <memmove>
 801091a:	68a3      	ldr	r3, [r4, #8]
 801091c:	1b9b      	subs	r3, r3, r6
 801091e:	60a3      	str	r3, [r4, #8]
 8010920:	6823      	ldr	r3, [r4, #0]
 8010922:	4433      	add	r3, r6
 8010924:	6023      	str	r3, [r4, #0]
 8010926:	2000      	movs	r0, #0
 8010928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801092c:	462a      	mov	r2, r5
 801092e:	f000 fcd4 	bl	80112da <_realloc_r>
 8010932:	4606      	mov	r6, r0
 8010934:	2800      	cmp	r0, #0
 8010936:	d1e0      	bne.n	80108fa <__ssputs_r+0x5a>
 8010938:	6921      	ldr	r1, [r4, #16]
 801093a:	4650      	mov	r0, sl
 801093c:	f7ff ff64 	bl	8010808 <_free_r>
 8010940:	230c      	movs	r3, #12
 8010942:	f8ca 3000 	str.w	r3, [sl]
 8010946:	89a3      	ldrh	r3, [r4, #12]
 8010948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801094c:	81a3      	strh	r3, [r4, #12]
 801094e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010952:	e7e9      	b.n	8010928 <__ssputs_r+0x88>

08010954 <_svfiprintf_r>:
 8010954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010958:	4698      	mov	r8, r3
 801095a:	898b      	ldrh	r3, [r1, #12]
 801095c:	061b      	lsls	r3, r3, #24
 801095e:	b09d      	sub	sp, #116	; 0x74
 8010960:	4607      	mov	r7, r0
 8010962:	460d      	mov	r5, r1
 8010964:	4614      	mov	r4, r2
 8010966:	d50e      	bpl.n	8010986 <_svfiprintf_r+0x32>
 8010968:	690b      	ldr	r3, [r1, #16]
 801096a:	b963      	cbnz	r3, 8010986 <_svfiprintf_r+0x32>
 801096c:	2140      	movs	r1, #64	; 0x40
 801096e:	f7ff fd05 	bl	801037c <_malloc_r>
 8010972:	6028      	str	r0, [r5, #0]
 8010974:	6128      	str	r0, [r5, #16]
 8010976:	b920      	cbnz	r0, 8010982 <_svfiprintf_r+0x2e>
 8010978:	230c      	movs	r3, #12
 801097a:	603b      	str	r3, [r7, #0]
 801097c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010980:	e0d0      	b.n	8010b24 <_svfiprintf_r+0x1d0>
 8010982:	2340      	movs	r3, #64	; 0x40
 8010984:	616b      	str	r3, [r5, #20]
 8010986:	2300      	movs	r3, #0
 8010988:	9309      	str	r3, [sp, #36]	; 0x24
 801098a:	2320      	movs	r3, #32
 801098c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010990:	f8cd 800c 	str.w	r8, [sp, #12]
 8010994:	2330      	movs	r3, #48	; 0x30
 8010996:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010b3c <_svfiprintf_r+0x1e8>
 801099a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801099e:	f04f 0901 	mov.w	r9, #1
 80109a2:	4623      	mov	r3, r4
 80109a4:	469a      	mov	sl, r3
 80109a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109aa:	b10a      	cbz	r2, 80109b0 <_svfiprintf_r+0x5c>
 80109ac:	2a25      	cmp	r2, #37	; 0x25
 80109ae:	d1f9      	bne.n	80109a4 <_svfiprintf_r+0x50>
 80109b0:	ebba 0b04 	subs.w	fp, sl, r4
 80109b4:	d00b      	beq.n	80109ce <_svfiprintf_r+0x7a>
 80109b6:	465b      	mov	r3, fp
 80109b8:	4622      	mov	r2, r4
 80109ba:	4629      	mov	r1, r5
 80109bc:	4638      	mov	r0, r7
 80109be:	f7ff ff6f 	bl	80108a0 <__ssputs_r>
 80109c2:	3001      	adds	r0, #1
 80109c4:	f000 80a9 	beq.w	8010b1a <_svfiprintf_r+0x1c6>
 80109c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109ca:	445a      	add	r2, fp
 80109cc:	9209      	str	r2, [sp, #36]	; 0x24
 80109ce:	f89a 3000 	ldrb.w	r3, [sl]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	f000 80a1 	beq.w	8010b1a <_svfiprintf_r+0x1c6>
 80109d8:	2300      	movs	r3, #0
 80109da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109e2:	f10a 0a01 	add.w	sl, sl, #1
 80109e6:	9304      	str	r3, [sp, #16]
 80109e8:	9307      	str	r3, [sp, #28]
 80109ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109ee:	931a      	str	r3, [sp, #104]	; 0x68
 80109f0:	4654      	mov	r4, sl
 80109f2:	2205      	movs	r2, #5
 80109f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109f8:	4850      	ldr	r0, [pc, #320]	; (8010b3c <_svfiprintf_r+0x1e8>)
 80109fa:	f7ef fc21 	bl	8000240 <memchr>
 80109fe:	9a04      	ldr	r2, [sp, #16]
 8010a00:	b9d8      	cbnz	r0, 8010a3a <_svfiprintf_r+0xe6>
 8010a02:	06d0      	lsls	r0, r2, #27
 8010a04:	bf44      	itt	mi
 8010a06:	2320      	movmi	r3, #32
 8010a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a0c:	0711      	lsls	r1, r2, #28
 8010a0e:	bf44      	itt	mi
 8010a10:	232b      	movmi	r3, #43	; 0x2b
 8010a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a16:	f89a 3000 	ldrb.w	r3, [sl]
 8010a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8010a1c:	d015      	beq.n	8010a4a <_svfiprintf_r+0xf6>
 8010a1e:	9a07      	ldr	r2, [sp, #28]
 8010a20:	4654      	mov	r4, sl
 8010a22:	2000      	movs	r0, #0
 8010a24:	f04f 0c0a 	mov.w	ip, #10
 8010a28:	4621      	mov	r1, r4
 8010a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a2e:	3b30      	subs	r3, #48	; 0x30
 8010a30:	2b09      	cmp	r3, #9
 8010a32:	d94d      	bls.n	8010ad0 <_svfiprintf_r+0x17c>
 8010a34:	b1b0      	cbz	r0, 8010a64 <_svfiprintf_r+0x110>
 8010a36:	9207      	str	r2, [sp, #28]
 8010a38:	e014      	b.n	8010a64 <_svfiprintf_r+0x110>
 8010a3a:	eba0 0308 	sub.w	r3, r0, r8
 8010a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8010a42:	4313      	orrs	r3, r2
 8010a44:	9304      	str	r3, [sp, #16]
 8010a46:	46a2      	mov	sl, r4
 8010a48:	e7d2      	b.n	80109f0 <_svfiprintf_r+0x9c>
 8010a4a:	9b03      	ldr	r3, [sp, #12]
 8010a4c:	1d19      	adds	r1, r3, #4
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	9103      	str	r1, [sp, #12]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	bfbb      	ittet	lt
 8010a56:	425b      	neglt	r3, r3
 8010a58:	f042 0202 	orrlt.w	r2, r2, #2
 8010a5c:	9307      	strge	r3, [sp, #28]
 8010a5e:	9307      	strlt	r3, [sp, #28]
 8010a60:	bfb8      	it	lt
 8010a62:	9204      	strlt	r2, [sp, #16]
 8010a64:	7823      	ldrb	r3, [r4, #0]
 8010a66:	2b2e      	cmp	r3, #46	; 0x2e
 8010a68:	d10c      	bne.n	8010a84 <_svfiprintf_r+0x130>
 8010a6a:	7863      	ldrb	r3, [r4, #1]
 8010a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8010a6e:	d134      	bne.n	8010ada <_svfiprintf_r+0x186>
 8010a70:	9b03      	ldr	r3, [sp, #12]
 8010a72:	1d1a      	adds	r2, r3, #4
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	9203      	str	r2, [sp, #12]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	bfb8      	it	lt
 8010a7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010a80:	3402      	adds	r4, #2
 8010a82:	9305      	str	r3, [sp, #20]
 8010a84:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010b4c <_svfiprintf_r+0x1f8>
 8010a88:	7821      	ldrb	r1, [r4, #0]
 8010a8a:	2203      	movs	r2, #3
 8010a8c:	4650      	mov	r0, sl
 8010a8e:	f7ef fbd7 	bl	8000240 <memchr>
 8010a92:	b138      	cbz	r0, 8010aa4 <_svfiprintf_r+0x150>
 8010a94:	9b04      	ldr	r3, [sp, #16]
 8010a96:	eba0 000a 	sub.w	r0, r0, sl
 8010a9a:	2240      	movs	r2, #64	; 0x40
 8010a9c:	4082      	lsls	r2, r0
 8010a9e:	4313      	orrs	r3, r2
 8010aa0:	3401      	adds	r4, #1
 8010aa2:	9304      	str	r3, [sp, #16]
 8010aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010aa8:	4825      	ldr	r0, [pc, #148]	; (8010b40 <_svfiprintf_r+0x1ec>)
 8010aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010aae:	2206      	movs	r2, #6
 8010ab0:	f7ef fbc6 	bl	8000240 <memchr>
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	d038      	beq.n	8010b2a <_svfiprintf_r+0x1d6>
 8010ab8:	4b22      	ldr	r3, [pc, #136]	; (8010b44 <_svfiprintf_r+0x1f0>)
 8010aba:	bb1b      	cbnz	r3, 8010b04 <_svfiprintf_r+0x1b0>
 8010abc:	9b03      	ldr	r3, [sp, #12]
 8010abe:	3307      	adds	r3, #7
 8010ac0:	f023 0307 	bic.w	r3, r3, #7
 8010ac4:	3308      	adds	r3, #8
 8010ac6:	9303      	str	r3, [sp, #12]
 8010ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010aca:	4433      	add	r3, r6
 8010acc:	9309      	str	r3, [sp, #36]	; 0x24
 8010ace:	e768      	b.n	80109a2 <_svfiprintf_r+0x4e>
 8010ad0:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ad4:	460c      	mov	r4, r1
 8010ad6:	2001      	movs	r0, #1
 8010ad8:	e7a6      	b.n	8010a28 <_svfiprintf_r+0xd4>
 8010ada:	2300      	movs	r3, #0
 8010adc:	3401      	adds	r4, #1
 8010ade:	9305      	str	r3, [sp, #20]
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	f04f 0c0a 	mov.w	ip, #10
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010aec:	3a30      	subs	r2, #48	; 0x30
 8010aee:	2a09      	cmp	r2, #9
 8010af0:	d903      	bls.n	8010afa <_svfiprintf_r+0x1a6>
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d0c6      	beq.n	8010a84 <_svfiprintf_r+0x130>
 8010af6:	9105      	str	r1, [sp, #20]
 8010af8:	e7c4      	b.n	8010a84 <_svfiprintf_r+0x130>
 8010afa:	fb0c 2101 	mla	r1, ip, r1, r2
 8010afe:	4604      	mov	r4, r0
 8010b00:	2301      	movs	r3, #1
 8010b02:	e7f0      	b.n	8010ae6 <_svfiprintf_r+0x192>
 8010b04:	ab03      	add	r3, sp, #12
 8010b06:	9300      	str	r3, [sp, #0]
 8010b08:	462a      	mov	r2, r5
 8010b0a:	4b0f      	ldr	r3, [pc, #60]	; (8010b48 <_svfiprintf_r+0x1f4>)
 8010b0c:	a904      	add	r1, sp, #16
 8010b0e:	4638      	mov	r0, r7
 8010b10:	f3af 8000 	nop.w
 8010b14:	1c42      	adds	r2, r0, #1
 8010b16:	4606      	mov	r6, r0
 8010b18:	d1d6      	bne.n	8010ac8 <_svfiprintf_r+0x174>
 8010b1a:	89ab      	ldrh	r3, [r5, #12]
 8010b1c:	065b      	lsls	r3, r3, #25
 8010b1e:	f53f af2d 	bmi.w	801097c <_svfiprintf_r+0x28>
 8010b22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b24:	b01d      	add	sp, #116	; 0x74
 8010b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b2a:	ab03      	add	r3, sp, #12
 8010b2c:	9300      	str	r3, [sp, #0]
 8010b2e:	462a      	mov	r2, r5
 8010b30:	4b05      	ldr	r3, [pc, #20]	; (8010b48 <_svfiprintf_r+0x1f4>)
 8010b32:	a904      	add	r1, sp, #16
 8010b34:	4638      	mov	r0, r7
 8010b36:	f000 f9bd 	bl	8010eb4 <_printf_i>
 8010b3a:	e7eb      	b.n	8010b14 <_svfiprintf_r+0x1c0>
 8010b3c:	08011e70 	.word	0x08011e70
 8010b40:	08011e7a 	.word	0x08011e7a
 8010b44:	00000000 	.word	0x00000000
 8010b48:	080108a1 	.word	0x080108a1
 8010b4c:	08011e76 	.word	0x08011e76

08010b50 <__sfputc_r>:
 8010b50:	6893      	ldr	r3, [r2, #8]
 8010b52:	3b01      	subs	r3, #1
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	b410      	push	{r4}
 8010b58:	6093      	str	r3, [r2, #8]
 8010b5a:	da08      	bge.n	8010b6e <__sfputc_r+0x1e>
 8010b5c:	6994      	ldr	r4, [r2, #24]
 8010b5e:	42a3      	cmp	r3, r4
 8010b60:	db01      	blt.n	8010b66 <__sfputc_r+0x16>
 8010b62:	290a      	cmp	r1, #10
 8010b64:	d103      	bne.n	8010b6e <__sfputc_r+0x1e>
 8010b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b6a:	f000 bbe5 	b.w	8011338 <__swbuf_r>
 8010b6e:	6813      	ldr	r3, [r2, #0]
 8010b70:	1c58      	adds	r0, r3, #1
 8010b72:	6010      	str	r0, [r2, #0]
 8010b74:	7019      	strb	r1, [r3, #0]
 8010b76:	4608      	mov	r0, r1
 8010b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b7c:	4770      	bx	lr

08010b7e <__sfputs_r>:
 8010b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b80:	4606      	mov	r6, r0
 8010b82:	460f      	mov	r7, r1
 8010b84:	4614      	mov	r4, r2
 8010b86:	18d5      	adds	r5, r2, r3
 8010b88:	42ac      	cmp	r4, r5
 8010b8a:	d101      	bne.n	8010b90 <__sfputs_r+0x12>
 8010b8c:	2000      	movs	r0, #0
 8010b8e:	e007      	b.n	8010ba0 <__sfputs_r+0x22>
 8010b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b94:	463a      	mov	r2, r7
 8010b96:	4630      	mov	r0, r6
 8010b98:	f7ff ffda 	bl	8010b50 <__sfputc_r>
 8010b9c:	1c43      	adds	r3, r0, #1
 8010b9e:	d1f3      	bne.n	8010b88 <__sfputs_r+0xa>
 8010ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010ba4 <_vfiprintf_r>:
 8010ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba8:	460d      	mov	r5, r1
 8010baa:	b09d      	sub	sp, #116	; 0x74
 8010bac:	4614      	mov	r4, r2
 8010bae:	4698      	mov	r8, r3
 8010bb0:	4606      	mov	r6, r0
 8010bb2:	b118      	cbz	r0, 8010bbc <_vfiprintf_r+0x18>
 8010bb4:	6a03      	ldr	r3, [r0, #32]
 8010bb6:	b90b      	cbnz	r3, 8010bbc <_vfiprintf_r+0x18>
 8010bb8:	f7ff fd2c 	bl	8010614 <__sinit>
 8010bbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bbe:	07d9      	lsls	r1, r3, #31
 8010bc0:	d405      	bmi.n	8010bce <_vfiprintf_r+0x2a>
 8010bc2:	89ab      	ldrh	r3, [r5, #12]
 8010bc4:	059a      	lsls	r2, r3, #22
 8010bc6:	d402      	bmi.n	8010bce <_vfiprintf_r+0x2a>
 8010bc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bca:	f7ff fe1a 	bl	8010802 <__retarget_lock_acquire_recursive>
 8010bce:	89ab      	ldrh	r3, [r5, #12]
 8010bd0:	071b      	lsls	r3, r3, #28
 8010bd2:	d501      	bpl.n	8010bd8 <_vfiprintf_r+0x34>
 8010bd4:	692b      	ldr	r3, [r5, #16]
 8010bd6:	b99b      	cbnz	r3, 8010c00 <_vfiprintf_r+0x5c>
 8010bd8:	4629      	mov	r1, r5
 8010bda:	4630      	mov	r0, r6
 8010bdc:	f000 fbea 	bl	80113b4 <__swsetup_r>
 8010be0:	b170      	cbz	r0, 8010c00 <_vfiprintf_r+0x5c>
 8010be2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010be4:	07dc      	lsls	r4, r3, #31
 8010be6:	d504      	bpl.n	8010bf2 <_vfiprintf_r+0x4e>
 8010be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bec:	b01d      	add	sp, #116	; 0x74
 8010bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf2:	89ab      	ldrh	r3, [r5, #12]
 8010bf4:	0598      	lsls	r0, r3, #22
 8010bf6:	d4f7      	bmi.n	8010be8 <_vfiprintf_r+0x44>
 8010bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bfa:	f7ff fe03 	bl	8010804 <__retarget_lock_release_recursive>
 8010bfe:	e7f3      	b.n	8010be8 <_vfiprintf_r+0x44>
 8010c00:	2300      	movs	r3, #0
 8010c02:	9309      	str	r3, [sp, #36]	; 0x24
 8010c04:	2320      	movs	r3, #32
 8010c06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c0e:	2330      	movs	r3, #48	; 0x30
 8010c10:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010dc4 <_vfiprintf_r+0x220>
 8010c14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c18:	f04f 0901 	mov.w	r9, #1
 8010c1c:	4623      	mov	r3, r4
 8010c1e:	469a      	mov	sl, r3
 8010c20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c24:	b10a      	cbz	r2, 8010c2a <_vfiprintf_r+0x86>
 8010c26:	2a25      	cmp	r2, #37	; 0x25
 8010c28:	d1f9      	bne.n	8010c1e <_vfiprintf_r+0x7a>
 8010c2a:	ebba 0b04 	subs.w	fp, sl, r4
 8010c2e:	d00b      	beq.n	8010c48 <_vfiprintf_r+0xa4>
 8010c30:	465b      	mov	r3, fp
 8010c32:	4622      	mov	r2, r4
 8010c34:	4629      	mov	r1, r5
 8010c36:	4630      	mov	r0, r6
 8010c38:	f7ff ffa1 	bl	8010b7e <__sfputs_r>
 8010c3c:	3001      	adds	r0, #1
 8010c3e:	f000 80a9 	beq.w	8010d94 <_vfiprintf_r+0x1f0>
 8010c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c44:	445a      	add	r2, fp
 8010c46:	9209      	str	r2, [sp, #36]	; 0x24
 8010c48:	f89a 3000 	ldrb.w	r3, [sl]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	f000 80a1 	beq.w	8010d94 <_vfiprintf_r+0x1f0>
 8010c52:	2300      	movs	r3, #0
 8010c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c5c:	f10a 0a01 	add.w	sl, sl, #1
 8010c60:	9304      	str	r3, [sp, #16]
 8010c62:	9307      	str	r3, [sp, #28]
 8010c64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c68:	931a      	str	r3, [sp, #104]	; 0x68
 8010c6a:	4654      	mov	r4, sl
 8010c6c:	2205      	movs	r2, #5
 8010c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c72:	4854      	ldr	r0, [pc, #336]	; (8010dc4 <_vfiprintf_r+0x220>)
 8010c74:	f7ef fae4 	bl	8000240 <memchr>
 8010c78:	9a04      	ldr	r2, [sp, #16]
 8010c7a:	b9d8      	cbnz	r0, 8010cb4 <_vfiprintf_r+0x110>
 8010c7c:	06d1      	lsls	r1, r2, #27
 8010c7e:	bf44      	itt	mi
 8010c80:	2320      	movmi	r3, #32
 8010c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c86:	0713      	lsls	r3, r2, #28
 8010c88:	bf44      	itt	mi
 8010c8a:	232b      	movmi	r3, #43	; 0x2b
 8010c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c90:	f89a 3000 	ldrb.w	r3, [sl]
 8010c94:	2b2a      	cmp	r3, #42	; 0x2a
 8010c96:	d015      	beq.n	8010cc4 <_vfiprintf_r+0x120>
 8010c98:	9a07      	ldr	r2, [sp, #28]
 8010c9a:	4654      	mov	r4, sl
 8010c9c:	2000      	movs	r0, #0
 8010c9e:	f04f 0c0a 	mov.w	ip, #10
 8010ca2:	4621      	mov	r1, r4
 8010ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ca8:	3b30      	subs	r3, #48	; 0x30
 8010caa:	2b09      	cmp	r3, #9
 8010cac:	d94d      	bls.n	8010d4a <_vfiprintf_r+0x1a6>
 8010cae:	b1b0      	cbz	r0, 8010cde <_vfiprintf_r+0x13a>
 8010cb0:	9207      	str	r2, [sp, #28]
 8010cb2:	e014      	b.n	8010cde <_vfiprintf_r+0x13a>
 8010cb4:	eba0 0308 	sub.w	r3, r0, r8
 8010cb8:	fa09 f303 	lsl.w	r3, r9, r3
 8010cbc:	4313      	orrs	r3, r2
 8010cbe:	9304      	str	r3, [sp, #16]
 8010cc0:	46a2      	mov	sl, r4
 8010cc2:	e7d2      	b.n	8010c6a <_vfiprintf_r+0xc6>
 8010cc4:	9b03      	ldr	r3, [sp, #12]
 8010cc6:	1d19      	adds	r1, r3, #4
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	9103      	str	r1, [sp, #12]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	bfbb      	ittet	lt
 8010cd0:	425b      	neglt	r3, r3
 8010cd2:	f042 0202 	orrlt.w	r2, r2, #2
 8010cd6:	9307      	strge	r3, [sp, #28]
 8010cd8:	9307      	strlt	r3, [sp, #28]
 8010cda:	bfb8      	it	lt
 8010cdc:	9204      	strlt	r2, [sp, #16]
 8010cde:	7823      	ldrb	r3, [r4, #0]
 8010ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8010ce2:	d10c      	bne.n	8010cfe <_vfiprintf_r+0x15a>
 8010ce4:	7863      	ldrb	r3, [r4, #1]
 8010ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8010ce8:	d134      	bne.n	8010d54 <_vfiprintf_r+0x1b0>
 8010cea:	9b03      	ldr	r3, [sp, #12]
 8010cec:	1d1a      	adds	r2, r3, #4
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	9203      	str	r2, [sp, #12]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	bfb8      	it	lt
 8010cf6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010cfa:	3402      	adds	r4, #2
 8010cfc:	9305      	str	r3, [sp, #20]
 8010cfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010dd4 <_vfiprintf_r+0x230>
 8010d02:	7821      	ldrb	r1, [r4, #0]
 8010d04:	2203      	movs	r2, #3
 8010d06:	4650      	mov	r0, sl
 8010d08:	f7ef fa9a 	bl	8000240 <memchr>
 8010d0c:	b138      	cbz	r0, 8010d1e <_vfiprintf_r+0x17a>
 8010d0e:	9b04      	ldr	r3, [sp, #16]
 8010d10:	eba0 000a 	sub.w	r0, r0, sl
 8010d14:	2240      	movs	r2, #64	; 0x40
 8010d16:	4082      	lsls	r2, r0
 8010d18:	4313      	orrs	r3, r2
 8010d1a:	3401      	adds	r4, #1
 8010d1c:	9304      	str	r3, [sp, #16]
 8010d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d22:	4829      	ldr	r0, [pc, #164]	; (8010dc8 <_vfiprintf_r+0x224>)
 8010d24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d28:	2206      	movs	r2, #6
 8010d2a:	f7ef fa89 	bl	8000240 <memchr>
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	d03f      	beq.n	8010db2 <_vfiprintf_r+0x20e>
 8010d32:	4b26      	ldr	r3, [pc, #152]	; (8010dcc <_vfiprintf_r+0x228>)
 8010d34:	bb1b      	cbnz	r3, 8010d7e <_vfiprintf_r+0x1da>
 8010d36:	9b03      	ldr	r3, [sp, #12]
 8010d38:	3307      	adds	r3, #7
 8010d3a:	f023 0307 	bic.w	r3, r3, #7
 8010d3e:	3308      	adds	r3, #8
 8010d40:	9303      	str	r3, [sp, #12]
 8010d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d44:	443b      	add	r3, r7
 8010d46:	9309      	str	r3, [sp, #36]	; 0x24
 8010d48:	e768      	b.n	8010c1c <_vfiprintf_r+0x78>
 8010d4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d4e:	460c      	mov	r4, r1
 8010d50:	2001      	movs	r0, #1
 8010d52:	e7a6      	b.n	8010ca2 <_vfiprintf_r+0xfe>
 8010d54:	2300      	movs	r3, #0
 8010d56:	3401      	adds	r4, #1
 8010d58:	9305      	str	r3, [sp, #20]
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	f04f 0c0a 	mov.w	ip, #10
 8010d60:	4620      	mov	r0, r4
 8010d62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d66:	3a30      	subs	r2, #48	; 0x30
 8010d68:	2a09      	cmp	r2, #9
 8010d6a:	d903      	bls.n	8010d74 <_vfiprintf_r+0x1d0>
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d0c6      	beq.n	8010cfe <_vfiprintf_r+0x15a>
 8010d70:	9105      	str	r1, [sp, #20]
 8010d72:	e7c4      	b.n	8010cfe <_vfiprintf_r+0x15a>
 8010d74:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d78:	4604      	mov	r4, r0
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	e7f0      	b.n	8010d60 <_vfiprintf_r+0x1bc>
 8010d7e:	ab03      	add	r3, sp, #12
 8010d80:	9300      	str	r3, [sp, #0]
 8010d82:	462a      	mov	r2, r5
 8010d84:	4b12      	ldr	r3, [pc, #72]	; (8010dd0 <_vfiprintf_r+0x22c>)
 8010d86:	a904      	add	r1, sp, #16
 8010d88:	4630      	mov	r0, r6
 8010d8a:	f3af 8000 	nop.w
 8010d8e:	4607      	mov	r7, r0
 8010d90:	1c78      	adds	r0, r7, #1
 8010d92:	d1d6      	bne.n	8010d42 <_vfiprintf_r+0x19e>
 8010d94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d96:	07d9      	lsls	r1, r3, #31
 8010d98:	d405      	bmi.n	8010da6 <_vfiprintf_r+0x202>
 8010d9a:	89ab      	ldrh	r3, [r5, #12]
 8010d9c:	059a      	lsls	r2, r3, #22
 8010d9e:	d402      	bmi.n	8010da6 <_vfiprintf_r+0x202>
 8010da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010da2:	f7ff fd2f 	bl	8010804 <__retarget_lock_release_recursive>
 8010da6:	89ab      	ldrh	r3, [r5, #12]
 8010da8:	065b      	lsls	r3, r3, #25
 8010daa:	f53f af1d 	bmi.w	8010be8 <_vfiprintf_r+0x44>
 8010dae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010db0:	e71c      	b.n	8010bec <_vfiprintf_r+0x48>
 8010db2:	ab03      	add	r3, sp, #12
 8010db4:	9300      	str	r3, [sp, #0]
 8010db6:	462a      	mov	r2, r5
 8010db8:	4b05      	ldr	r3, [pc, #20]	; (8010dd0 <_vfiprintf_r+0x22c>)
 8010dba:	a904      	add	r1, sp, #16
 8010dbc:	4630      	mov	r0, r6
 8010dbe:	f000 f879 	bl	8010eb4 <_printf_i>
 8010dc2:	e7e4      	b.n	8010d8e <_vfiprintf_r+0x1ea>
 8010dc4:	08011e70 	.word	0x08011e70
 8010dc8:	08011e7a 	.word	0x08011e7a
 8010dcc:	00000000 	.word	0x00000000
 8010dd0:	08010b7f 	.word	0x08010b7f
 8010dd4:	08011e76 	.word	0x08011e76

08010dd8 <_printf_common>:
 8010dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ddc:	4616      	mov	r6, r2
 8010dde:	4699      	mov	r9, r3
 8010de0:	688a      	ldr	r2, [r1, #8]
 8010de2:	690b      	ldr	r3, [r1, #16]
 8010de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010de8:	4293      	cmp	r3, r2
 8010dea:	bfb8      	it	lt
 8010dec:	4613      	movlt	r3, r2
 8010dee:	6033      	str	r3, [r6, #0]
 8010df0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010df4:	4607      	mov	r7, r0
 8010df6:	460c      	mov	r4, r1
 8010df8:	b10a      	cbz	r2, 8010dfe <_printf_common+0x26>
 8010dfa:	3301      	adds	r3, #1
 8010dfc:	6033      	str	r3, [r6, #0]
 8010dfe:	6823      	ldr	r3, [r4, #0]
 8010e00:	0699      	lsls	r1, r3, #26
 8010e02:	bf42      	ittt	mi
 8010e04:	6833      	ldrmi	r3, [r6, #0]
 8010e06:	3302      	addmi	r3, #2
 8010e08:	6033      	strmi	r3, [r6, #0]
 8010e0a:	6825      	ldr	r5, [r4, #0]
 8010e0c:	f015 0506 	ands.w	r5, r5, #6
 8010e10:	d106      	bne.n	8010e20 <_printf_common+0x48>
 8010e12:	f104 0a19 	add.w	sl, r4, #25
 8010e16:	68e3      	ldr	r3, [r4, #12]
 8010e18:	6832      	ldr	r2, [r6, #0]
 8010e1a:	1a9b      	subs	r3, r3, r2
 8010e1c:	42ab      	cmp	r3, r5
 8010e1e:	dc26      	bgt.n	8010e6e <_printf_common+0x96>
 8010e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e24:	1e13      	subs	r3, r2, #0
 8010e26:	6822      	ldr	r2, [r4, #0]
 8010e28:	bf18      	it	ne
 8010e2a:	2301      	movne	r3, #1
 8010e2c:	0692      	lsls	r2, r2, #26
 8010e2e:	d42b      	bmi.n	8010e88 <_printf_common+0xb0>
 8010e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e34:	4649      	mov	r1, r9
 8010e36:	4638      	mov	r0, r7
 8010e38:	47c0      	blx	r8
 8010e3a:	3001      	adds	r0, #1
 8010e3c:	d01e      	beq.n	8010e7c <_printf_common+0xa4>
 8010e3e:	6823      	ldr	r3, [r4, #0]
 8010e40:	6922      	ldr	r2, [r4, #16]
 8010e42:	f003 0306 	and.w	r3, r3, #6
 8010e46:	2b04      	cmp	r3, #4
 8010e48:	bf02      	ittt	eq
 8010e4a:	68e5      	ldreq	r5, [r4, #12]
 8010e4c:	6833      	ldreq	r3, [r6, #0]
 8010e4e:	1aed      	subeq	r5, r5, r3
 8010e50:	68a3      	ldr	r3, [r4, #8]
 8010e52:	bf0c      	ite	eq
 8010e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e58:	2500      	movne	r5, #0
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	bfc4      	itt	gt
 8010e5e:	1a9b      	subgt	r3, r3, r2
 8010e60:	18ed      	addgt	r5, r5, r3
 8010e62:	2600      	movs	r6, #0
 8010e64:	341a      	adds	r4, #26
 8010e66:	42b5      	cmp	r5, r6
 8010e68:	d11a      	bne.n	8010ea0 <_printf_common+0xc8>
 8010e6a:	2000      	movs	r0, #0
 8010e6c:	e008      	b.n	8010e80 <_printf_common+0xa8>
 8010e6e:	2301      	movs	r3, #1
 8010e70:	4652      	mov	r2, sl
 8010e72:	4649      	mov	r1, r9
 8010e74:	4638      	mov	r0, r7
 8010e76:	47c0      	blx	r8
 8010e78:	3001      	adds	r0, #1
 8010e7a:	d103      	bne.n	8010e84 <_printf_common+0xac>
 8010e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e84:	3501      	adds	r5, #1
 8010e86:	e7c6      	b.n	8010e16 <_printf_common+0x3e>
 8010e88:	18e1      	adds	r1, r4, r3
 8010e8a:	1c5a      	adds	r2, r3, #1
 8010e8c:	2030      	movs	r0, #48	; 0x30
 8010e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010e92:	4422      	add	r2, r4
 8010e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010e9c:	3302      	adds	r3, #2
 8010e9e:	e7c7      	b.n	8010e30 <_printf_common+0x58>
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	4622      	mov	r2, r4
 8010ea4:	4649      	mov	r1, r9
 8010ea6:	4638      	mov	r0, r7
 8010ea8:	47c0      	blx	r8
 8010eaa:	3001      	adds	r0, #1
 8010eac:	d0e6      	beq.n	8010e7c <_printf_common+0xa4>
 8010eae:	3601      	adds	r6, #1
 8010eb0:	e7d9      	b.n	8010e66 <_printf_common+0x8e>
	...

08010eb4 <_printf_i>:
 8010eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010eb8:	7e0f      	ldrb	r7, [r1, #24]
 8010eba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010ebc:	2f78      	cmp	r7, #120	; 0x78
 8010ebe:	4691      	mov	r9, r2
 8010ec0:	4680      	mov	r8, r0
 8010ec2:	460c      	mov	r4, r1
 8010ec4:	469a      	mov	sl, r3
 8010ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010eca:	d807      	bhi.n	8010edc <_printf_i+0x28>
 8010ecc:	2f62      	cmp	r7, #98	; 0x62
 8010ece:	d80a      	bhi.n	8010ee6 <_printf_i+0x32>
 8010ed0:	2f00      	cmp	r7, #0
 8010ed2:	f000 80d4 	beq.w	801107e <_printf_i+0x1ca>
 8010ed6:	2f58      	cmp	r7, #88	; 0x58
 8010ed8:	f000 80c0 	beq.w	801105c <_printf_i+0x1a8>
 8010edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010ee4:	e03a      	b.n	8010f5c <_printf_i+0xa8>
 8010ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010eea:	2b15      	cmp	r3, #21
 8010eec:	d8f6      	bhi.n	8010edc <_printf_i+0x28>
 8010eee:	a101      	add	r1, pc, #4	; (adr r1, 8010ef4 <_printf_i+0x40>)
 8010ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010ef4:	08010f4d 	.word	0x08010f4d
 8010ef8:	08010f61 	.word	0x08010f61
 8010efc:	08010edd 	.word	0x08010edd
 8010f00:	08010edd 	.word	0x08010edd
 8010f04:	08010edd 	.word	0x08010edd
 8010f08:	08010edd 	.word	0x08010edd
 8010f0c:	08010f61 	.word	0x08010f61
 8010f10:	08010edd 	.word	0x08010edd
 8010f14:	08010edd 	.word	0x08010edd
 8010f18:	08010edd 	.word	0x08010edd
 8010f1c:	08010edd 	.word	0x08010edd
 8010f20:	08011065 	.word	0x08011065
 8010f24:	08010f8d 	.word	0x08010f8d
 8010f28:	0801101f 	.word	0x0801101f
 8010f2c:	08010edd 	.word	0x08010edd
 8010f30:	08010edd 	.word	0x08010edd
 8010f34:	08011087 	.word	0x08011087
 8010f38:	08010edd 	.word	0x08010edd
 8010f3c:	08010f8d 	.word	0x08010f8d
 8010f40:	08010edd 	.word	0x08010edd
 8010f44:	08010edd 	.word	0x08010edd
 8010f48:	08011027 	.word	0x08011027
 8010f4c:	682b      	ldr	r3, [r5, #0]
 8010f4e:	1d1a      	adds	r2, r3, #4
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	602a      	str	r2, [r5, #0]
 8010f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	e09f      	b.n	80110a0 <_printf_i+0x1ec>
 8010f60:	6820      	ldr	r0, [r4, #0]
 8010f62:	682b      	ldr	r3, [r5, #0]
 8010f64:	0607      	lsls	r7, r0, #24
 8010f66:	f103 0104 	add.w	r1, r3, #4
 8010f6a:	6029      	str	r1, [r5, #0]
 8010f6c:	d501      	bpl.n	8010f72 <_printf_i+0xbe>
 8010f6e:	681e      	ldr	r6, [r3, #0]
 8010f70:	e003      	b.n	8010f7a <_printf_i+0xc6>
 8010f72:	0646      	lsls	r6, r0, #25
 8010f74:	d5fb      	bpl.n	8010f6e <_printf_i+0xba>
 8010f76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010f7a:	2e00      	cmp	r6, #0
 8010f7c:	da03      	bge.n	8010f86 <_printf_i+0xd2>
 8010f7e:	232d      	movs	r3, #45	; 0x2d
 8010f80:	4276      	negs	r6, r6
 8010f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f86:	485a      	ldr	r0, [pc, #360]	; (80110f0 <_printf_i+0x23c>)
 8010f88:	230a      	movs	r3, #10
 8010f8a:	e012      	b.n	8010fb2 <_printf_i+0xfe>
 8010f8c:	682b      	ldr	r3, [r5, #0]
 8010f8e:	6820      	ldr	r0, [r4, #0]
 8010f90:	1d19      	adds	r1, r3, #4
 8010f92:	6029      	str	r1, [r5, #0]
 8010f94:	0605      	lsls	r5, r0, #24
 8010f96:	d501      	bpl.n	8010f9c <_printf_i+0xe8>
 8010f98:	681e      	ldr	r6, [r3, #0]
 8010f9a:	e002      	b.n	8010fa2 <_printf_i+0xee>
 8010f9c:	0641      	lsls	r1, r0, #25
 8010f9e:	d5fb      	bpl.n	8010f98 <_printf_i+0xe4>
 8010fa0:	881e      	ldrh	r6, [r3, #0]
 8010fa2:	4853      	ldr	r0, [pc, #332]	; (80110f0 <_printf_i+0x23c>)
 8010fa4:	2f6f      	cmp	r7, #111	; 0x6f
 8010fa6:	bf0c      	ite	eq
 8010fa8:	2308      	moveq	r3, #8
 8010faa:	230a      	movne	r3, #10
 8010fac:	2100      	movs	r1, #0
 8010fae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010fb2:	6865      	ldr	r5, [r4, #4]
 8010fb4:	60a5      	str	r5, [r4, #8]
 8010fb6:	2d00      	cmp	r5, #0
 8010fb8:	bfa2      	ittt	ge
 8010fba:	6821      	ldrge	r1, [r4, #0]
 8010fbc:	f021 0104 	bicge.w	r1, r1, #4
 8010fc0:	6021      	strge	r1, [r4, #0]
 8010fc2:	b90e      	cbnz	r6, 8010fc8 <_printf_i+0x114>
 8010fc4:	2d00      	cmp	r5, #0
 8010fc6:	d04b      	beq.n	8011060 <_printf_i+0x1ac>
 8010fc8:	4615      	mov	r5, r2
 8010fca:	fbb6 f1f3 	udiv	r1, r6, r3
 8010fce:	fb03 6711 	mls	r7, r3, r1, r6
 8010fd2:	5dc7      	ldrb	r7, [r0, r7]
 8010fd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010fd8:	4637      	mov	r7, r6
 8010fda:	42bb      	cmp	r3, r7
 8010fdc:	460e      	mov	r6, r1
 8010fde:	d9f4      	bls.n	8010fca <_printf_i+0x116>
 8010fe0:	2b08      	cmp	r3, #8
 8010fe2:	d10b      	bne.n	8010ffc <_printf_i+0x148>
 8010fe4:	6823      	ldr	r3, [r4, #0]
 8010fe6:	07de      	lsls	r6, r3, #31
 8010fe8:	d508      	bpl.n	8010ffc <_printf_i+0x148>
 8010fea:	6923      	ldr	r3, [r4, #16]
 8010fec:	6861      	ldr	r1, [r4, #4]
 8010fee:	4299      	cmp	r1, r3
 8010ff0:	bfde      	ittt	le
 8010ff2:	2330      	movle	r3, #48	; 0x30
 8010ff4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010ff8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010ffc:	1b52      	subs	r2, r2, r5
 8010ffe:	6122      	str	r2, [r4, #16]
 8011000:	f8cd a000 	str.w	sl, [sp]
 8011004:	464b      	mov	r3, r9
 8011006:	aa03      	add	r2, sp, #12
 8011008:	4621      	mov	r1, r4
 801100a:	4640      	mov	r0, r8
 801100c:	f7ff fee4 	bl	8010dd8 <_printf_common>
 8011010:	3001      	adds	r0, #1
 8011012:	d14a      	bne.n	80110aa <_printf_i+0x1f6>
 8011014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011018:	b004      	add	sp, #16
 801101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801101e:	6823      	ldr	r3, [r4, #0]
 8011020:	f043 0320 	orr.w	r3, r3, #32
 8011024:	6023      	str	r3, [r4, #0]
 8011026:	4833      	ldr	r0, [pc, #204]	; (80110f4 <_printf_i+0x240>)
 8011028:	2778      	movs	r7, #120	; 0x78
 801102a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801102e:	6823      	ldr	r3, [r4, #0]
 8011030:	6829      	ldr	r1, [r5, #0]
 8011032:	061f      	lsls	r7, r3, #24
 8011034:	f851 6b04 	ldr.w	r6, [r1], #4
 8011038:	d402      	bmi.n	8011040 <_printf_i+0x18c>
 801103a:	065f      	lsls	r7, r3, #25
 801103c:	bf48      	it	mi
 801103e:	b2b6      	uxthmi	r6, r6
 8011040:	07df      	lsls	r7, r3, #31
 8011042:	bf48      	it	mi
 8011044:	f043 0320 	orrmi.w	r3, r3, #32
 8011048:	6029      	str	r1, [r5, #0]
 801104a:	bf48      	it	mi
 801104c:	6023      	strmi	r3, [r4, #0]
 801104e:	b91e      	cbnz	r6, 8011058 <_printf_i+0x1a4>
 8011050:	6823      	ldr	r3, [r4, #0]
 8011052:	f023 0320 	bic.w	r3, r3, #32
 8011056:	6023      	str	r3, [r4, #0]
 8011058:	2310      	movs	r3, #16
 801105a:	e7a7      	b.n	8010fac <_printf_i+0xf8>
 801105c:	4824      	ldr	r0, [pc, #144]	; (80110f0 <_printf_i+0x23c>)
 801105e:	e7e4      	b.n	801102a <_printf_i+0x176>
 8011060:	4615      	mov	r5, r2
 8011062:	e7bd      	b.n	8010fe0 <_printf_i+0x12c>
 8011064:	682b      	ldr	r3, [r5, #0]
 8011066:	6826      	ldr	r6, [r4, #0]
 8011068:	6961      	ldr	r1, [r4, #20]
 801106a:	1d18      	adds	r0, r3, #4
 801106c:	6028      	str	r0, [r5, #0]
 801106e:	0635      	lsls	r5, r6, #24
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	d501      	bpl.n	8011078 <_printf_i+0x1c4>
 8011074:	6019      	str	r1, [r3, #0]
 8011076:	e002      	b.n	801107e <_printf_i+0x1ca>
 8011078:	0670      	lsls	r0, r6, #25
 801107a:	d5fb      	bpl.n	8011074 <_printf_i+0x1c0>
 801107c:	8019      	strh	r1, [r3, #0]
 801107e:	2300      	movs	r3, #0
 8011080:	6123      	str	r3, [r4, #16]
 8011082:	4615      	mov	r5, r2
 8011084:	e7bc      	b.n	8011000 <_printf_i+0x14c>
 8011086:	682b      	ldr	r3, [r5, #0]
 8011088:	1d1a      	adds	r2, r3, #4
 801108a:	602a      	str	r2, [r5, #0]
 801108c:	681d      	ldr	r5, [r3, #0]
 801108e:	6862      	ldr	r2, [r4, #4]
 8011090:	2100      	movs	r1, #0
 8011092:	4628      	mov	r0, r5
 8011094:	f7ef f8d4 	bl	8000240 <memchr>
 8011098:	b108      	cbz	r0, 801109e <_printf_i+0x1ea>
 801109a:	1b40      	subs	r0, r0, r5
 801109c:	6060      	str	r0, [r4, #4]
 801109e:	6863      	ldr	r3, [r4, #4]
 80110a0:	6123      	str	r3, [r4, #16]
 80110a2:	2300      	movs	r3, #0
 80110a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110a8:	e7aa      	b.n	8011000 <_printf_i+0x14c>
 80110aa:	6923      	ldr	r3, [r4, #16]
 80110ac:	462a      	mov	r2, r5
 80110ae:	4649      	mov	r1, r9
 80110b0:	4640      	mov	r0, r8
 80110b2:	47d0      	blx	sl
 80110b4:	3001      	adds	r0, #1
 80110b6:	d0ad      	beq.n	8011014 <_printf_i+0x160>
 80110b8:	6823      	ldr	r3, [r4, #0]
 80110ba:	079b      	lsls	r3, r3, #30
 80110bc:	d413      	bmi.n	80110e6 <_printf_i+0x232>
 80110be:	68e0      	ldr	r0, [r4, #12]
 80110c0:	9b03      	ldr	r3, [sp, #12]
 80110c2:	4298      	cmp	r0, r3
 80110c4:	bfb8      	it	lt
 80110c6:	4618      	movlt	r0, r3
 80110c8:	e7a6      	b.n	8011018 <_printf_i+0x164>
 80110ca:	2301      	movs	r3, #1
 80110cc:	4632      	mov	r2, r6
 80110ce:	4649      	mov	r1, r9
 80110d0:	4640      	mov	r0, r8
 80110d2:	47d0      	blx	sl
 80110d4:	3001      	adds	r0, #1
 80110d6:	d09d      	beq.n	8011014 <_printf_i+0x160>
 80110d8:	3501      	adds	r5, #1
 80110da:	68e3      	ldr	r3, [r4, #12]
 80110dc:	9903      	ldr	r1, [sp, #12]
 80110de:	1a5b      	subs	r3, r3, r1
 80110e0:	42ab      	cmp	r3, r5
 80110e2:	dcf2      	bgt.n	80110ca <_printf_i+0x216>
 80110e4:	e7eb      	b.n	80110be <_printf_i+0x20a>
 80110e6:	2500      	movs	r5, #0
 80110e8:	f104 0619 	add.w	r6, r4, #25
 80110ec:	e7f5      	b.n	80110da <_printf_i+0x226>
 80110ee:	bf00      	nop
 80110f0:	08011e81 	.word	0x08011e81
 80110f4:	08011e92 	.word	0x08011e92

080110f8 <__sflush_r>:
 80110f8:	898a      	ldrh	r2, [r1, #12]
 80110fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110fe:	4605      	mov	r5, r0
 8011100:	0710      	lsls	r0, r2, #28
 8011102:	460c      	mov	r4, r1
 8011104:	d458      	bmi.n	80111b8 <__sflush_r+0xc0>
 8011106:	684b      	ldr	r3, [r1, #4]
 8011108:	2b00      	cmp	r3, #0
 801110a:	dc05      	bgt.n	8011118 <__sflush_r+0x20>
 801110c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801110e:	2b00      	cmp	r3, #0
 8011110:	dc02      	bgt.n	8011118 <__sflush_r+0x20>
 8011112:	2000      	movs	r0, #0
 8011114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801111a:	2e00      	cmp	r6, #0
 801111c:	d0f9      	beq.n	8011112 <__sflush_r+0x1a>
 801111e:	2300      	movs	r3, #0
 8011120:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011124:	682f      	ldr	r7, [r5, #0]
 8011126:	6a21      	ldr	r1, [r4, #32]
 8011128:	602b      	str	r3, [r5, #0]
 801112a:	d032      	beq.n	8011192 <__sflush_r+0x9a>
 801112c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801112e:	89a3      	ldrh	r3, [r4, #12]
 8011130:	075a      	lsls	r2, r3, #29
 8011132:	d505      	bpl.n	8011140 <__sflush_r+0x48>
 8011134:	6863      	ldr	r3, [r4, #4]
 8011136:	1ac0      	subs	r0, r0, r3
 8011138:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801113a:	b10b      	cbz	r3, 8011140 <__sflush_r+0x48>
 801113c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801113e:	1ac0      	subs	r0, r0, r3
 8011140:	2300      	movs	r3, #0
 8011142:	4602      	mov	r2, r0
 8011144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011146:	6a21      	ldr	r1, [r4, #32]
 8011148:	4628      	mov	r0, r5
 801114a:	47b0      	blx	r6
 801114c:	1c43      	adds	r3, r0, #1
 801114e:	89a3      	ldrh	r3, [r4, #12]
 8011150:	d106      	bne.n	8011160 <__sflush_r+0x68>
 8011152:	6829      	ldr	r1, [r5, #0]
 8011154:	291d      	cmp	r1, #29
 8011156:	d82b      	bhi.n	80111b0 <__sflush_r+0xb8>
 8011158:	4a29      	ldr	r2, [pc, #164]	; (8011200 <__sflush_r+0x108>)
 801115a:	410a      	asrs	r2, r1
 801115c:	07d6      	lsls	r6, r2, #31
 801115e:	d427      	bmi.n	80111b0 <__sflush_r+0xb8>
 8011160:	2200      	movs	r2, #0
 8011162:	6062      	str	r2, [r4, #4]
 8011164:	04d9      	lsls	r1, r3, #19
 8011166:	6922      	ldr	r2, [r4, #16]
 8011168:	6022      	str	r2, [r4, #0]
 801116a:	d504      	bpl.n	8011176 <__sflush_r+0x7e>
 801116c:	1c42      	adds	r2, r0, #1
 801116e:	d101      	bne.n	8011174 <__sflush_r+0x7c>
 8011170:	682b      	ldr	r3, [r5, #0]
 8011172:	b903      	cbnz	r3, 8011176 <__sflush_r+0x7e>
 8011174:	6560      	str	r0, [r4, #84]	; 0x54
 8011176:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011178:	602f      	str	r7, [r5, #0]
 801117a:	2900      	cmp	r1, #0
 801117c:	d0c9      	beq.n	8011112 <__sflush_r+0x1a>
 801117e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011182:	4299      	cmp	r1, r3
 8011184:	d002      	beq.n	801118c <__sflush_r+0x94>
 8011186:	4628      	mov	r0, r5
 8011188:	f7ff fb3e 	bl	8010808 <_free_r>
 801118c:	2000      	movs	r0, #0
 801118e:	6360      	str	r0, [r4, #52]	; 0x34
 8011190:	e7c0      	b.n	8011114 <__sflush_r+0x1c>
 8011192:	2301      	movs	r3, #1
 8011194:	4628      	mov	r0, r5
 8011196:	47b0      	blx	r6
 8011198:	1c41      	adds	r1, r0, #1
 801119a:	d1c8      	bne.n	801112e <__sflush_r+0x36>
 801119c:	682b      	ldr	r3, [r5, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d0c5      	beq.n	801112e <__sflush_r+0x36>
 80111a2:	2b1d      	cmp	r3, #29
 80111a4:	d001      	beq.n	80111aa <__sflush_r+0xb2>
 80111a6:	2b16      	cmp	r3, #22
 80111a8:	d101      	bne.n	80111ae <__sflush_r+0xb6>
 80111aa:	602f      	str	r7, [r5, #0]
 80111ac:	e7b1      	b.n	8011112 <__sflush_r+0x1a>
 80111ae:	89a3      	ldrh	r3, [r4, #12]
 80111b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111b4:	81a3      	strh	r3, [r4, #12]
 80111b6:	e7ad      	b.n	8011114 <__sflush_r+0x1c>
 80111b8:	690f      	ldr	r7, [r1, #16]
 80111ba:	2f00      	cmp	r7, #0
 80111bc:	d0a9      	beq.n	8011112 <__sflush_r+0x1a>
 80111be:	0793      	lsls	r3, r2, #30
 80111c0:	680e      	ldr	r6, [r1, #0]
 80111c2:	bf08      	it	eq
 80111c4:	694b      	ldreq	r3, [r1, #20]
 80111c6:	600f      	str	r7, [r1, #0]
 80111c8:	bf18      	it	ne
 80111ca:	2300      	movne	r3, #0
 80111cc:	eba6 0807 	sub.w	r8, r6, r7
 80111d0:	608b      	str	r3, [r1, #8]
 80111d2:	f1b8 0f00 	cmp.w	r8, #0
 80111d6:	dd9c      	ble.n	8011112 <__sflush_r+0x1a>
 80111d8:	6a21      	ldr	r1, [r4, #32]
 80111da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80111dc:	4643      	mov	r3, r8
 80111de:	463a      	mov	r2, r7
 80111e0:	4628      	mov	r0, r5
 80111e2:	47b0      	blx	r6
 80111e4:	2800      	cmp	r0, #0
 80111e6:	dc06      	bgt.n	80111f6 <__sflush_r+0xfe>
 80111e8:	89a3      	ldrh	r3, [r4, #12]
 80111ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111ee:	81a3      	strh	r3, [r4, #12]
 80111f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111f4:	e78e      	b.n	8011114 <__sflush_r+0x1c>
 80111f6:	4407      	add	r7, r0
 80111f8:	eba8 0800 	sub.w	r8, r8, r0
 80111fc:	e7e9      	b.n	80111d2 <__sflush_r+0xda>
 80111fe:	bf00      	nop
 8011200:	dfbffffe 	.word	0xdfbffffe

08011204 <_fflush_r>:
 8011204:	b538      	push	{r3, r4, r5, lr}
 8011206:	690b      	ldr	r3, [r1, #16]
 8011208:	4605      	mov	r5, r0
 801120a:	460c      	mov	r4, r1
 801120c:	b913      	cbnz	r3, 8011214 <_fflush_r+0x10>
 801120e:	2500      	movs	r5, #0
 8011210:	4628      	mov	r0, r5
 8011212:	bd38      	pop	{r3, r4, r5, pc}
 8011214:	b118      	cbz	r0, 801121e <_fflush_r+0x1a>
 8011216:	6a03      	ldr	r3, [r0, #32]
 8011218:	b90b      	cbnz	r3, 801121e <_fflush_r+0x1a>
 801121a:	f7ff f9fb 	bl	8010614 <__sinit>
 801121e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d0f3      	beq.n	801120e <_fflush_r+0xa>
 8011226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011228:	07d0      	lsls	r0, r2, #31
 801122a:	d404      	bmi.n	8011236 <_fflush_r+0x32>
 801122c:	0599      	lsls	r1, r3, #22
 801122e:	d402      	bmi.n	8011236 <_fflush_r+0x32>
 8011230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011232:	f7ff fae6 	bl	8010802 <__retarget_lock_acquire_recursive>
 8011236:	4628      	mov	r0, r5
 8011238:	4621      	mov	r1, r4
 801123a:	f7ff ff5d 	bl	80110f8 <__sflush_r>
 801123e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011240:	07da      	lsls	r2, r3, #31
 8011242:	4605      	mov	r5, r0
 8011244:	d4e4      	bmi.n	8011210 <_fflush_r+0xc>
 8011246:	89a3      	ldrh	r3, [r4, #12]
 8011248:	059b      	lsls	r3, r3, #22
 801124a:	d4e1      	bmi.n	8011210 <_fflush_r+0xc>
 801124c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801124e:	f7ff fad9 	bl	8010804 <__retarget_lock_release_recursive>
 8011252:	e7dd      	b.n	8011210 <_fflush_r+0xc>

08011254 <__sread>:
 8011254:	b510      	push	{r4, lr}
 8011256:	460c      	mov	r4, r1
 8011258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801125c:	f000 f9c2 	bl	80115e4 <_read_r>
 8011260:	2800      	cmp	r0, #0
 8011262:	bfab      	itete	ge
 8011264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011266:	89a3      	ldrhlt	r3, [r4, #12]
 8011268:	181b      	addge	r3, r3, r0
 801126a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801126e:	bfac      	ite	ge
 8011270:	6563      	strge	r3, [r4, #84]	; 0x54
 8011272:	81a3      	strhlt	r3, [r4, #12]
 8011274:	bd10      	pop	{r4, pc}

08011276 <__swrite>:
 8011276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801127a:	461f      	mov	r7, r3
 801127c:	898b      	ldrh	r3, [r1, #12]
 801127e:	05db      	lsls	r3, r3, #23
 8011280:	4605      	mov	r5, r0
 8011282:	460c      	mov	r4, r1
 8011284:	4616      	mov	r6, r2
 8011286:	d505      	bpl.n	8011294 <__swrite+0x1e>
 8011288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801128c:	2302      	movs	r3, #2
 801128e:	2200      	movs	r2, #0
 8011290:	f000 f996 	bl	80115c0 <_lseek_r>
 8011294:	89a3      	ldrh	r3, [r4, #12]
 8011296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801129a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801129e:	81a3      	strh	r3, [r4, #12]
 80112a0:	4632      	mov	r2, r6
 80112a2:	463b      	mov	r3, r7
 80112a4:	4628      	mov	r0, r5
 80112a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112aa:	f000 b9ad 	b.w	8011608 <_write_r>

080112ae <__sseek>:
 80112ae:	b510      	push	{r4, lr}
 80112b0:	460c      	mov	r4, r1
 80112b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112b6:	f000 f983 	bl	80115c0 <_lseek_r>
 80112ba:	1c43      	adds	r3, r0, #1
 80112bc:	89a3      	ldrh	r3, [r4, #12]
 80112be:	bf15      	itete	ne
 80112c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80112c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80112c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80112ca:	81a3      	strheq	r3, [r4, #12]
 80112cc:	bf18      	it	ne
 80112ce:	81a3      	strhne	r3, [r4, #12]
 80112d0:	bd10      	pop	{r4, pc}

080112d2 <__sclose>:
 80112d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112d6:	f000 b941 	b.w	801155c <_close_r>

080112da <_realloc_r>:
 80112da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112de:	4680      	mov	r8, r0
 80112e0:	4614      	mov	r4, r2
 80112e2:	460e      	mov	r6, r1
 80112e4:	b921      	cbnz	r1, 80112f0 <_realloc_r+0x16>
 80112e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112ea:	4611      	mov	r1, r2
 80112ec:	f7ff b846 	b.w	801037c <_malloc_r>
 80112f0:	b92a      	cbnz	r2, 80112fe <_realloc_r+0x24>
 80112f2:	f7ff fa89 	bl	8010808 <_free_r>
 80112f6:	4625      	mov	r5, r4
 80112f8:	4628      	mov	r0, r5
 80112fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112fe:	f000 f9a3 	bl	8011648 <_malloc_usable_size_r>
 8011302:	4284      	cmp	r4, r0
 8011304:	4607      	mov	r7, r0
 8011306:	d802      	bhi.n	801130e <_realloc_r+0x34>
 8011308:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801130c:	d812      	bhi.n	8011334 <_realloc_r+0x5a>
 801130e:	4621      	mov	r1, r4
 8011310:	4640      	mov	r0, r8
 8011312:	f7ff f833 	bl	801037c <_malloc_r>
 8011316:	4605      	mov	r5, r0
 8011318:	2800      	cmp	r0, #0
 801131a:	d0ed      	beq.n	80112f8 <_realloc_r+0x1e>
 801131c:	42bc      	cmp	r4, r7
 801131e:	4622      	mov	r2, r4
 8011320:	4631      	mov	r1, r6
 8011322:	bf28      	it	cs
 8011324:	463a      	movcs	r2, r7
 8011326:	f000 f981 	bl	801162c <memcpy>
 801132a:	4631      	mov	r1, r6
 801132c:	4640      	mov	r0, r8
 801132e:	f7ff fa6b 	bl	8010808 <_free_r>
 8011332:	e7e1      	b.n	80112f8 <_realloc_r+0x1e>
 8011334:	4635      	mov	r5, r6
 8011336:	e7df      	b.n	80112f8 <_realloc_r+0x1e>

08011338 <__swbuf_r>:
 8011338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801133a:	460e      	mov	r6, r1
 801133c:	4614      	mov	r4, r2
 801133e:	4605      	mov	r5, r0
 8011340:	b118      	cbz	r0, 801134a <__swbuf_r+0x12>
 8011342:	6a03      	ldr	r3, [r0, #32]
 8011344:	b90b      	cbnz	r3, 801134a <__swbuf_r+0x12>
 8011346:	f7ff f965 	bl	8010614 <__sinit>
 801134a:	69a3      	ldr	r3, [r4, #24]
 801134c:	60a3      	str	r3, [r4, #8]
 801134e:	89a3      	ldrh	r3, [r4, #12]
 8011350:	071a      	lsls	r2, r3, #28
 8011352:	d525      	bpl.n	80113a0 <__swbuf_r+0x68>
 8011354:	6923      	ldr	r3, [r4, #16]
 8011356:	b31b      	cbz	r3, 80113a0 <__swbuf_r+0x68>
 8011358:	6823      	ldr	r3, [r4, #0]
 801135a:	6922      	ldr	r2, [r4, #16]
 801135c:	1a98      	subs	r0, r3, r2
 801135e:	6963      	ldr	r3, [r4, #20]
 8011360:	b2f6      	uxtb	r6, r6
 8011362:	4283      	cmp	r3, r0
 8011364:	4637      	mov	r7, r6
 8011366:	dc04      	bgt.n	8011372 <__swbuf_r+0x3a>
 8011368:	4621      	mov	r1, r4
 801136a:	4628      	mov	r0, r5
 801136c:	f7ff ff4a 	bl	8011204 <_fflush_r>
 8011370:	b9e0      	cbnz	r0, 80113ac <__swbuf_r+0x74>
 8011372:	68a3      	ldr	r3, [r4, #8]
 8011374:	3b01      	subs	r3, #1
 8011376:	60a3      	str	r3, [r4, #8]
 8011378:	6823      	ldr	r3, [r4, #0]
 801137a:	1c5a      	adds	r2, r3, #1
 801137c:	6022      	str	r2, [r4, #0]
 801137e:	701e      	strb	r6, [r3, #0]
 8011380:	6962      	ldr	r2, [r4, #20]
 8011382:	1c43      	adds	r3, r0, #1
 8011384:	429a      	cmp	r2, r3
 8011386:	d004      	beq.n	8011392 <__swbuf_r+0x5a>
 8011388:	89a3      	ldrh	r3, [r4, #12]
 801138a:	07db      	lsls	r3, r3, #31
 801138c:	d506      	bpl.n	801139c <__swbuf_r+0x64>
 801138e:	2e0a      	cmp	r6, #10
 8011390:	d104      	bne.n	801139c <__swbuf_r+0x64>
 8011392:	4621      	mov	r1, r4
 8011394:	4628      	mov	r0, r5
 8011396:	f7ff ff35 	bl	8011204 <_fflush_r>
 801139a:	b938      	cbnz	r0, 80113ac <__swbuf_r+0x74>
 801139c:	4638      	mov	r0, r7
 801139e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113a0:	4621      	mov	r1, r4
 80113a2:	4628      	mov	r0, r5
 80113a4:	f000 f806 	bl	80113b4 <__swsetup_r>
 80113a8:	2800      	cmp	r0, #0
 80113aa:	d0d5      	beq.n	8011358 <__swbuf_r+0x20>
 80113ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80113b0:	e7f4      	b.n	801139c <__swbuf_r+0x64>
	...

080113b4 <__swsetup_r>:
 80113b4:	b538      	push	{r3, r4, r5, lr}
 80113b6:	4b2a      	ldr	r3, [pc, #168]	; (8011460 <__swsetup_r+0xac>)
 80113b8:	4605      	mov	r5, r0
 80113ba:	6818      	ldr	r0, [r3, #0]
 80113bc:	460c      	mov	r4, r1
 80113be:	b118      	cbz	r0, 80113c8 <__swsetup_r+0x14>
 80113c0:	6a03      	ldr	r3, [r0, #32]
 80113c2:	b90b      	cbnz	r3, 80113c8 <__swsetup_r+0x14>
 80113c4:	f7ff f926 	bl	8010614 <__sinit>
 80113c8:	89a3      	ldrh	r3, [r4, #12]
 80113ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113ce:	0718      	lsls	r0, r3, #28
 80113d0:	d422      	bmi.n	8011418 <__swsetup_r+0x64>
 80113d2:	06d9      	lsls	r1, r3, #27
 80113d4:	d407      	bmi.n	80113e6 <__swsetup_r+0x32>
 80113d6:	2309      	movs	r3, #9
 80113d8:	602b      	str	r3, [r5, #0]
 80113da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80113de:	81a3      	strh	r3, [r4, #12]
 80113e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80113e4:	e034      	b.n	8011450 <__swsetup_r+0x9c>
 80113e6:	0758      	lsls	r0, r3, #29
 80113e8:	d512      	bpl.n	8011410 <__swsetup_r+0x5c>
 80113ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113ec:	b141      	cbz	r1, 8011400 <__swsetup_r+0x4c>
 80113ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113f2:	4299      	cmp	r1, r3
 80113f4:	d002      	beq.n	80113fc <__swsetup_r+0x48>
 80113f6:	4628      	mov	r0, r5
 80113f8:	f7ff fa06 	bl	8010808 <_free_r>
 80113fc:	2300      	movs	r3, #0
 80113fe:	6363      	str	r3, [r4, #52]	; 0x34
 8011400:	89a3      	ldrh	r3, [r4, #12]
 8011402:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011406:	81a3      	strh	r3, [r4, #12]
 8011408:	2300      	movs	r3, #0
 801140a:	6063      	str	r3, [r4, #4]
 801140c:	6923      	ldr	r3, [r4, #16]
 801140e:	6023      	str	r3, [r4, #0]
 8011410:	89a3      	ldrh	r3, [r4, #12]
 8011412:	f043 0308 	orr.w	r3, r3, #8
 8011416:	81a3      	strh	r3, [r4, #12]
 8011418:	6923      	ldr	r3, [r4, #16]
 801141a:	b94b      	cbnz	r3, 8011430 <__swsetup_r+0x7c>
 801141c:	89a3      	ldrh	r3, [r4, #12]
 801141e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011426:	d003      	beq.n	8011430 <__swsetup_r+0x7c>
 8011428:	4621      	mov	r1, r4
 801142a:	4628      	mov	r0, r5
 801142c:	f000 f840 	bl	80114b0 <__smakebuf_r>
 8011430:	89a0      	ldrh	r0, [r4, #12]
 8011432:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011436:	f010 0301 	ands.w	r3, r0, #1
 801143a:	d00a      	beq.n	8011452 <__swsetup_r+0x9e>
 801143c:	2300      	movs	r3, #0
 801143e:	60a3      	str	r3, [r4, #8]
 8011440:	6963      	ldr	r3, [r4, #20]
 8011442:	425b      	negs	r3, r3
 8011444:	61a3      	str	r3, [r4, #24]
 8011446:	6923      	ldr	r3, [r4, #16]
 8011448:	b943      	cbnz	r3, 801145c <__swsetup_r+0xa8>
 801144a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801144e:	d1c4      	bne.n	80113da <__swsetup_r+0x26>
 8011450:	bd38      	pop	{r3, r4, r5, pc}
 8011452:	0781      	lsls	r1, r0, #30
 8011454:	bf58      	it	pl
 8011456:	6963      	ldrpl	r3, [r4, #20]
 8011458:	60a3      	str	r3, [r4, #8]
 801145a:	e7f4      	b.n	8011446 <__swsetup_r+0x92>
 801145c:	2000      	movs	r0, #0
 801145e:	e7f7      	b.n	8011450 <__swsetup_r+0x9c>
 8011460:	20000164 	.word	0x20000164

08011464 <__swhatbuf_r>:
 8011464:	b570      	push	{r4, r5, r6, lr}
 8011466:	460c      	mov	r4, r1
 8011468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801146c:	2900      	cmp	r1, #0
 801146e:	b096      	sub	sp, #88	; 0x58
 8011470:	4615      	mov	r5, r2
 8011472:	461e      	mov	r6, r3
 8011474:	da0d      	bge.n	8011492 <__swhatbuf_r+0x2e>
 8011476:	89a3      	ldrh	r3, [r4, #12]
 8011478:	f013 0f80 	tst.w	r3, #128	; 0x80
 801147c:	f04f 0100 	mov.w	r1, #0
 8011480:	bf0c      	ite	eq
 8011482:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011486:	2340      	movne	r3, #64	; 0x40
 8011488:	2000      	movs	r0, #0
 801148a:	6031      	str	r1, [r6, #0]
 801148c:	602b      	str	r3, [r5, #0]
 801148e:	b016      	add	sp, #88	; 0x58
 8011490:	bd70      	pop	{r4, r5, r6, pc}
 8011492:	466a      	mov	r2, sp
 8011494:	f000 f872 	bl	801157c <_fstat_r>
 8011498:	2800      	cmp	r0, #0
 801149a:	dbec      	blt.n	8011476 <__swhatbuf_r+0x12>
 801149c:	9901      	ldr	r1, [sp, #4]
 801149e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80114a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80114a6:	4259      	negs	r1, r3
 80114a8:	4159      	adcs	r1, r3
 80114aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114ae:	e7eb      	b.n	8011488 <__swhatbuf_r+0x24>

080114b0 <__smakebuf_r>:
 80114b0:	898b      	ldrh	r3, [r1, #12]
 80114b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114b4:	079d      	lsls	r5, r3, #30
 80114b6:	4606      	mov	r6, r0
 80114b8:	460c      	mov	r4, r1
 80114ba:	d507      	bpl.n	80114cc <__smakebuf_r+0x1c>
 80114bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80114c0:	6023      	str	r3, [r4, #0]
 80114c2:	6123      	str	r3, [r4, #16]
 80114c4:	2301      	movs	r3, #1
 80114c6:	6163      	str	r3, [r4, #20]
 80114c8:	b002      	add	sp, #8
 80114ca:	bd70      	pop	{r4, r5, r6, pc}
 80114cc:	ab01      	add	r3, sp, #4
 80114ce:	466a      	mov	r2, sp
 80114d0:	f7ff ffc8 	bl	8011464 <__swhatbuf_r>
 80114d4:	9900      	ldr	r1, [sp, #0]
 80114d6:	4605      	mov	r5, r0
 80114d8:	4630      	mov	r0, r6
 80114da:	f7fe ff4f 	bl	801037c <_malloc_r>
 80114de:	b948      	cbnz	r0, 80114f4 <__smakebuf_r+0x44>
 80114e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114e4:	059a      	lsls	r2, r3, #22
 80114e6:	d4ef      	bmi.n	80114c8 <__smakebuf_r+0x18>
 80114e8:	f023 0303 	bic.w	r3, r3, #3
 80114ec:	f043 0302 	orr.w	r3, r3, #2
 80114f0:	81a3      	strh	r3, [r4, #12]
 80114f2:	e7e3      	b.n	80114bc <__smakebuf_r+0xc>
 80114f4:	89a3      	ldrh	r3, [r4, #12]
 80114f6:	6020      	str	r0, [r4, #0]
 80114f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114fc:	81a3      	strh	r3, [r4, #12]
 80114fe:	9b00      	ldr	r3, [sp, #0]
 8011500:	6163      	str	r3, [r4, #20]
 8011502:	9b01      	ldr	r3, [sp, #4]
 8011504:	6120      	str	r0, [r4, #16]
 8011506:	b15b      	cbz	r3, 8011520 <__smakebuf_r+0x70>
 8011508:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801150c:	4630      	mov	r0, r6
 801150e:	f000 f847 	bl	80115a0 <_isatty_r>
 8011512:	b128      	cbz	r0, 8011520 <__smakebuf_r+0x70>
 8011514:	89a3      	ldrh	r3, [r4, #12]
 8011516:	f023 0303 	bic.w	r3, r3, #3
 801151a:	f043 0301 	orr.w	r3, r3, #1
 801151e:	81a3      	strh	r3, [r4, #12]
 8011520:	89a3      	ldrh	r3, [r4, #12]
 8011522:	431d      	orrs	r5, r3
 8011524:	81a5      	strh	r5, [r4, #12]
 8011526:	e7cf      	b.n	80114c8 <__smakebuf_r+0x18>

08011528 <memmove>:
 8011528:	4288      	cmp	r0, r1
 801152a:	b510      	push	{r4, lr}
 801152c:	eb01 0402 	add.w	r4, r1, r2
 8011530:	d902      	bls.n	8011538 <memmove+0x10>
 8011532:	4284      	cmp	r4, r0
 8011534:	4623      	mov	r3, r4
 8011536:	d807      	bhi.n	8011548 <memmove+0x20>
 8011538:	1e43      	subs	r3, r0, #1
 801153a:	42a1      	cmp	r1, r4
 801153c:	d008      	beq.n	8011550 <memmove+0x28>
 801153e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011542:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011546:	e7f8      	b.n	801153a <memmove+0x12>
 8011548:	4402      	add	r2, r0
 801154a:	4601      	mov	r1, r0
 801154c:	428a      	cmp	r2, r1
 801154e:	d100      	bne.n	8011552 <memmove+0x2a>
 8011550:	bd10      	pop	{r4, pc}
 8011552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011556:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801155a:	e7f7      	b.n	801154c <memmove+0x24>

0801155c <_close_r>:
 801155c:	b538      	push	{r3, r4, r5, lr}
 801155e:	4d06      	ldr	r5, [pc, #24]	; (8011578 <_close_r+0x1c>)
 8011560:	2300      	movs	r3, #0
 8011562:	4604      	mov	r4, r0
 8011564:	4608      	mov	r0, r1
 8011566:	602b      	str	r3, [r5, #0]
 8011568:	f7f0 f919 	bl	800179e <_close>
 801156c:	1c43      	adds	r3, r0, #1
 801156e:	d102      	bne.n	8011576 <_close_r+0x1a>
 8011570:	682b      	ldr	r3, [r5, #0]
 8011572:	b103      	cbz	r3, 8011576 <_close_r+0x1a>
 8011574:	6023      	str	r3, [r4, #0]
 8011576:	bd38      	pop	{r3, r4, r5, pc}
 8011578:	200045d0 	.word	0x200045d0

0801157c <_fstat_r>:
 801157c:	b538      	push	{r3, r4, r5, lr}
 801157e:	4d07      	ldr	r5, [pc, #28]	; (801159c <_fstat_r+0x20>)
 8011580:	2300      	movs	r3, #0
 8011582:	4604      	mov	r4, r0
 8011584:	4608      	mov	r0, r1
 8011586:	4611      	mov	r1, r2
 8011588:	602b      	str	r3, [r5, #0]
 801158a:	f7f0 f914 	bl	80017b6 <_fstat>
 801158e:	1c43      	adds	r3, r0, #1
 8011590:	d102      	bne.n	8011598 <_fstat_r+0x1c>
 8011592:	682b      	ldr	r3, [r5, #0]
 8011594:	b103      	cbz	r3, 8011598 <_fstat_r+0x1c>
 8011596:	6023      	str	r3, [r4, #0]
 8011598:	bd38      	pop	{r3, r4, r5, pc}
 801159a:	bf00      	nop
 801159c:	200045d0 	.word	0x200045d0

080115a0 <_isatty_r>:
 80115a0:	b538      	push	{r3, r4, r5, lr}
 80115a2:	4d06      	ldr	r5, [pc, #24]	; (80115bc <_isatty_r+0x1c>)
 80115a4:	2300      	movs	r3, #0
 80115a6:	4604      	mov	r4, r0
 80115a8:	4608      	mov	r0, r1
 80115aa:	602b      	str	r3, [r5, #0]
 80115ac:	f7f0 f913 	bl	80017d6 <_isatty>
 80115b0:	1c43      	adds	r3, r0, #1
 80115b2:	d102      	bne.n	80115ba <_isatty_r+0x1a>
 80115b4:	682b      	ldr	r3, [r5, #0]
 80115b6:	b103      	cbz	r3, 80115ba <_isatty_r+0x1a>
 80115b8:	6023      	str	r3, [r4, #0]
 80115ba:	bd38      	pop	{r3, r4, r5, pc}
 80115bc:	200045d0 	.word	0x200045d0

080115c0 <_lseek_r>:
 80115c0:	b538      	push	{r3, r4, r5, lr}
 80115c2:	4d07      	ldr	r5, [pc, #28]	; (80115e0 <_lseek_r+0x20>)
 80115c4:	4604      	mov	r4, r0
 80115c6:	4608      	mov	r0, r1
 80115c8:	4611      	mov	r1, r2
 80115ca:	2200      	movs	r2, #0
 80115cc:	602a      	str	r2, [r5, #0]
 80115ce:	461a      	mov	r2, r3
 80115d0:	f7f0 f90c 	bl	80017ec <_lseek>
 80115d4:	1c43      	adds	r3, r0, #1
 80115d6:	d102      	bne.n	80115de <_lseek_r+0x1e>
 80115d8:	682b      	ldr	r3, [r5, #0]
 80115da:	b103      	cbz	r3, 80115de <_lseek_r+0x1e>
 80115dc:	6023      	str	r3, [r4, #0]
 80115de:	bd38      	pop	{r3, r4, r5, pc}
 80115e0:	200045d0 	.word	0x200045d0

080115e4 <_read_r>:
 80115e4:	b538      	push	{r3, r4, r5, lr}
 80115e6:	4d07      	ldr	r5, [pc, #28]	; (8011604 <_read_r+0x20>)
 80115e8:	4604      	mov	r4, r0
 80115ea:	4608      	mov	r0, r1
 80115ec:	4611      	mov	r1, r2
 80115ee:	2200      	movs	r2, #0
 80115f0:	602a      	str	r2, [r5, #0]
 80115f2:	461a      	mov	r2, r3
 80115f4:	f7f0 f89a 	bl	800172c <_read>
 80115f8:	1c43      	adds	r3, r0, #1
 80115fa:	d102      	bne.n	8011602 <_read_r+0x1e>
 80115fc:	682b      	ldr	r3, [r5, #0]
 80115fe:	b103      	cbz	r3, 8011602 <_read_r+0x1e>
 8011600:	6023      	str	r3, [r4, #0]
 8011602:	bd38      	pop	{r3, r4, r5, pc}
 8011604:	200045d0 	.word	0x200045d0

08011608 <_write_r>:
 8011608:	b538      	push	{r3, r4, r5, lr}
 801160a:	4d07      	ldr	r5, [pc, #28]	; (8011628 <_write_r+0x20>)
 801160c:	4604      	mov	r4, r0
 801160e:	4608      	mov	r0, r1
 8011610:	4611      	mov	r1, r2
 8011612:	2200      	movs	r2, #0
 8011614:	602a      	str	r2, [r5, #0]
 8011616:	461a      	mov	r2, r3
 8011618:	f7f0 f8a5 	bl	8001766 <_write>
 801161c:	1c43      	adds	r3, r0, #1
 801161e:	d102      	bne.n	8011626 <_write_r+0x1e>
 8011620:	682b      	ldr	r3, [r5, #0]
 8011622:	b103      	cbz	r3, 8011626 <_write_r+0x1e>
 8011624:	6023      	str	r3, [r4, #0]
 8011626:	bd38      	pop	{r3, r4, r5, pc}
 8011628:	200045d0 	.word	0x200045d0

0801162c <memcpy>:
 801162c:	440a      	add	r2, r1
 801162e:	4291      	cmp	r1, r2
 8011630:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011634:	d100      	bne.n	8011638 <memcpy+0xc>
 8011636:	4770      	bx	lr
 8011638:	b510      	push	{r4, lr}
 801163a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801163e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011642:	4291      	cmp	r1, r2
 8011644:	d1f9      	bne.n	801163a <memcpy+0xe>
 8011646:	bd10      	pop	{r4, pc}

08011648 <_malloc_usable_size_r>:
 8011648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801164c:	1f18      	subs	r0, r3, #4
 801164e:	2b00      	cmp	r3, #0
 8011650:	bfbc      	itt	lt
 8011652:	580b      	ldrlt	r3, [r1, r0]
 8011654:	18c0      	addlt	r0, r0, r3
 8011656:	4770      	bx	lr

08011658 <_init>:
 8011658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801165a:	bf00      	nop
 801165c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801165e:	bc08      	pop	{r3}
 8011660:	469e      	mov	lr, r3
 8011662:	4770      	bx	lr

08011664 <_fini>:
 8011664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011666:	bf00      	nop
 8011668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801166a:	bc08      	pop	{r3}
 801166c:	469e      	mov	lr, r3
 801166e:	4770      	bx	lr
