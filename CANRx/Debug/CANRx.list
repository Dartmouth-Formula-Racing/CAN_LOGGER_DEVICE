
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056b0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080058b0  080058b0  000158b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800591c  0800591c  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005924  08005924  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800592c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000068  08005994  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000108  08005a34  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000818  200001a8  08005ad4  000201a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200009c0  08005ad4  000209c0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201d6  2**0
                  CONTENTS, READONLY
 15 .debug_info   00013745  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000028e8  00000000  00000000  0003395e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000f40  00000000  00000000  00036248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000bad  00000000  00000000  00037188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029d9d  00000000  00000000  00037d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00011a72  00000000  00000000  00061ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fe845  00000000  00000000  00073544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004730  00000000  00000000  00171d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  001764bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a8 	.word	0x200001a8
 800021c:	00000000 	.word	0x00000000
 8000220:	08005898 	.word	0x08005898

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ac 	.word	0x200001ac
 800023c:	08005898 	.word	0x08005898

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fdce 	bl	8001182 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f833 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f985 	bl	80008f8 <MX_GPIO_Init>
  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80005ee:	2101      	movs	r1, #1
 80005f0:	4815      	ldr	r0, [pc, #84]	; (8000648 <main+0x6c>)
 80005f2:	f001 ff7e 	bl	80024f2 <HAL_GPIO_TogglePin>

  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80005f6:	2101      	movs	r1, #1
 80005f8:	4813      	ldr	r0, [pc, #76]	; (8000648 <main+0x6c>)
 80005fa:	f001 ff7a 	bl	80024f2 <HAL_GPIO_TogglePin>

  MX_CAN1_Init();
 80005fe:	f000 f899 	bl	8000734 <MX_CAN1_Init>
  CAN_Filter_Config();
 8000602:	f000 fa1b 	bl	8000a3c <CAN_Filter_Config>

  MX_ETH_Init();
 8000606:	f000 f8cb 	bl	80007a0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800060a:	f000 f917 	bl	800083c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800060e:	f000 f945 	bl	800089c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000612:	480e      	ldr	r0, [pc, #56]	; (800064c <main+0x70>)
 8000614:	f001 f81e 	bl	8001654 <HAL_CAN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int received = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
  int timestamp = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	603b      	str	r3, [r7, #0]
	while (1)
	{
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  CAN_Rx(timestamp);
 8000620:	6838      	ldr	r0, [r7, #0]
 8000622:	f000 fa55 	bl	8000ad0 <CAN_Rx>
	  timestamp = timestamp + 10;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	330a      	adds	r3, #10
 800062a:	603b      	str	r3, [r7, #0]
	  if(++received > 10) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3301      	adds	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0a      	cmp	r3, #10
 8000636:	ddf3      	ble.n	8000620 <main+0x44>
		  HAL_GPIO_TogglePin(RedLED_GPIO_Port, RedLED_Pin);
 8000638:	2101      	movs	r1, #1
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <main+0x6c>)
 800063c:	f001 ff59 	bl	80024f2 <HAL_GPIO_TogglePin>
		  received = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
	  CAN_Rx(timestamp);
 8000644:	e7ec      	b.n	8000620 <main+0x44>
 8000646:	bf00      	nop
 8000648:	40020400 	.word	0x40020400
 800064c:	200001fc 	.word	0x200001fc

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2234      	movs	r2, #52	; 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 faba 	bl	8004bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000674:	f002 f8a0 	bl	80027b8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	4b2c      	ldr	r3, [pc, #176]	; (800072c <SystemClock_Config+0xdc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a2b      	ldr	r2, [pc, #172]	; (800072c <SystemClock_Config+0xdc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <SystemClock_Config+0xdc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <SystemClock_Config+0xe0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000698:	4a25      	ldr	r2, [pc, #148]	; (8000730 <SystemClock_Config+0xe0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <SystemClock_Config+0xe0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006c4:	2360      	movs	r3, #96	; 0x60
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 f8cd 	bl	8002878 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e4:	f000 fa44 	bl	8000b70 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e8:	f002 f876 	bl	80027d8 <HAL_PWREx_EnableOverDrive>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006f2:	f000 fa3d 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2103      	movs	r1, #3
 8000712:	4618      	mov	r0, r3
 8000714:	f002 fb5e 	bl	8002dd4 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800071e:	f000 fa27 	bl	8000b70 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_CAN1_Init+0x64>)
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <MX_CAN1_Init+0x68>)
 800073c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_CAN1_Init+0x64>)
 8000740:	2206      	movs	r2, #6
 8000742:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_CAN1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_CAN1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_CAN1_Init+0x64>)
 8000752:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000756:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_CAN1_Init+0x64>)
 800075a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800075e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_CAN1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_CAN1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_CAN1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_CAN1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_CAN1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_CAN1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_CAN1_Init+0x64>)
 8000786:	f000 fd7d 	bl	8001284 <HAL_CAN_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000790:	f000 f9ee 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001fc 	.word	0x200001fc
 800079c:	40006400 	.word	0x40006400

080007a0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_ETH_Init+0x84>)
 80007a6:	4a20      	ldr	r2, [pc, #128]	; (8000828 <MX_ETH_Init+0x88>)
 80007a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_ETH_Init+0x8c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_ETH_Init+0x8c>)
 80007b2:	2280      	movs	r2, #128	; 0x80
 80007b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_ETH_Init+0x8c>)
 80007b8:	22e1      	movs	r2, #225	; 0xe1
 80007ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_ETH_Init+0x8c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_ETH_Init+0x8c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_ETH_Init+0x8c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ETH_Init+0x84>)
 80007d0:	4a16      	ldr	r2, [pc, #88]	; (800082c <MX_ETH_Init+0x8c>)
 80007d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_ETH_Init+0x84>)
 80007d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007da:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_ETH_Init+0x84>)
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <MX_ETH_Init+0x90>)
 80007e0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_ETH_Init+0x84>)
 80007e4:	4a13      	ldr	r2, [pc, #76]	; (8000834 <MX_ETH_Init+0x94>)
 80007e6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_ETH_Init+0x84>)
 80007ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007ee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <MX_ETH_Init+0x84>)
 80007f2:	f001 f993 	bl	8001b1c <HAL_ETH_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007fc:	f000 f9b8 	bl	8000b70 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000800:	2238      	movs	r2, #56	; 0x38
 8000802:	2100      	movs	r1, #0
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_ETH_Init+0x98>)
 8000806:	f004 f9e7 	bl	8004bd8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_ETH_Init+0x98>)
 800080c:	2221      	movs	r2, #33	; 0x21
 800080e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_ETH_Init+0x98>)
 8000812:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000816:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MX_ETH_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000224 	.word	0x20000224
 8000828:	40028000 	.word	0x40028000
 800082c:	20000864 	.word	0x20000864
 8000830:	20000108 	.word	0x20000108
 8000834:	20000068 	.word	0x20000068
 8000838:	200001c4 	.word	0x200001c4

0800083c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_USART3_UART_Init+0x58>)
 8000842:	4a15      	ldr	r2, [pc, #84]	; (8000898 <MX_USART3_UART_Init+0x5c>)
 8000844:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_USART3_UART_Init+0x58>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USART3_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_USART3_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USART3_UART_Init+0x58>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USART3_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USART3_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USART3_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USART3_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USART3_UART_Init+0x58>)
 8000880:	f003 f8f6 	bl	8003a70 <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800088a:	f000 f971 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200002d4 	.word	0x200002d4
 8000898:	40004800 	.word	0x40004800

0800089c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008aa:	2206      	movs	r2, #6
 80008ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b0:	2202      	movs	r2, #2
 80008b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	2202      	movs	r2, #2
 80008be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e0:	f001 fe21 	bl	8002526 <HAL_PCD_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 f941 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000035c 	.word	0x2000035c

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	; 0x30
 80008fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	4b47      	ldr	r3, [pc, #284]	; (8000a2c <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a46      	ldr	r2, [pc, #280]	; (8000a2c <MX_GPIO_Init+0x134>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b44      	ldr	r3, [pc, #272]	; (8000a2c <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	61bb      	str	r3, [r7, #24]
 8000924:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000926:	4b41      	ldr	r3, [pc, #260]	; (8000a2c <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a40      	ldr	r2, [pc, #256]	; (8000a2c <MX_GPIO_Init+0x134>)
 800092c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b3e      	ldr	r3, [pc, #248]	; (8000a2c <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b3b      	ldr	r3, [pc, #236]	; (8000a2c <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a3a      	ldr	r2, [pc, #232]	; (8000a2c <MX_GPIO_Init+0x134>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b38      	ldr	r3, [pc, #224]	; (8000a2c <MX_GPIO_Init+0x134>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <MX_GPIO_Init+0x134>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a34      	ldr	r2, [pc, #208]	; (8000a2c <MX_GPIO_Init+0x134>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b32      	ldr	r3, [pc, #200]	; (8000a2c <MX_GPIO_Init+0x134>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <MX_GPIO_Init+0x134>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a2e      	ldr	r2, [pc, #184]	; (8000a2c <MX_GPIO_Init+0x134>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <MX_GPIO_Init+0x134>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000986:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <MX_GPIO_Init+0x134>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a28      	ldr	r2, [pc, #160]	; (8000a2c <MX_GPIO_Init+0x134>)
 800098c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_GPIO_Init+0x134>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a4:	4822      	ldr	r0, [pc, #136]	; (8000a30 <MX_GPIO_Init+0x138>)
 80009a6:	f001 fd8b 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	4821      	ldr	r0, [pc, #132]	; (8000a34 <MX_GPIO_Init+0x13c>)
 80009b0:	f001 fd86 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	481b      	ldr	r0, [pc, #108]	; (8000a38 <MX_GPIO_Init+0x140>)
 80009cc:	f001 fbcc 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009d0:	f244 0381 	movw	r3, #16513	; 0x4081
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_GPIO_Init+0x138>)
 80009ea:	f001 fbbd 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	480b      	ldr	r0, [pc, #44]	; (8000a34 <MX_GPIO_Init+0x13c>)
 8000a06:	f001 fbaf 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_GPIO_Init+0x13c>)
 8000a1e:	f001 fba3 	bl	8002168 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a22:	bf00      	nop
 8000a24:	3730      	adds	r7, #48	; 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020400 	.word	0x40020400
 8000a34:	40021800 	.word	0x40021800
 8000a38:	40020800 	.word	0x40020800

08000a3c <CAN_Filter_Config>:

/* USER CODE BEGIN 4 */
void CAN_Filter_Config(void){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 8000a46:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5)  | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 8000a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 8000a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a58:	0a1a      	lsrs	r2, r3, #8
 8000a5a:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000a5e:	4013      	ands	r3, r2
 8000a60:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5)  | (filter_mask >> (32 - 5))) & 0xFFFF;
 8000a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a64:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 8000a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6e:	0a1a      	lsrs	r2, r3, #8
 8000a70:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000a74:	4013      	ands	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_ConfigFilter(&hcan1, &filter) != HAL_OK){
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <CAN_Filter_Config+0x6c>)
 8000a92:	f000 fcf3 	bl	800147c <HAL_CAN_ConfigFilter>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <CAN_Filter_Config+0x64>
			Error_Handler();
 8000a9c:	f000 f868 	bl	8000b70 <Error_Handler>
		}
}
 8000aa0:	bf00      	nop
 8000aa2:	3730      	adds	r7, #48	; 0x30
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200001fc 	.word	0x200001fc

08000aac <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000ab4:	1d39      	adds	r1, r7, #4
 8000ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aba:	2201      	movs	r2, #1
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <__io_putchar+0x20>)
 8000abe:	f003 f825 	bl	8003b0c <HAL_UART_Transmit>

  return ch;
 8000ac2:	687b      	ldr	r3, [r7, #4]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200002d4 	.word	0x200002d4

08000ad0 <CAN_Rx>:

void CAN_Rx(int ts) {
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b093      	sub	sp, #76	; 0x4c
 8000ad4:	af04      	add	r7, sp, #16
 8000ad6:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_msg[8];
	while(! HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0));
 8000ad8:	bf00      	nop
 8000ada:	2100      	movs	r1, #0
 8000adc:	4822      	ldr	r0, [pc, #136]	; (8000b68 <CAN_Rx+0x98>)
 8000ade:	f000 ff0f 	bl	8001900 <HAL_CAN_GetRxFifoFillLevel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0f8      	beq.n	8000ada <CAN_Rx+0xa>
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK) {
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	f107 0214 	add.w	r2, r7, #20
 8000af0:	2100      	movs	r1, #0
 8000af2:	481d      	ldr	r0, [pc, #116]	; (8000b68 <CAN_Rx+0x98>)
 8000af4:	f000 fdf2 	bl	80016dc <HAL_CAN_GetRxMessage>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <CAN_Rx+0x32>
		Error_Handler();
 8000afe:	f000 f837 	bl	8000b70 <Error_Handler>
	}
	uint16_t data1 = (rcvd_msg[0]<< 8) +rcvd_msg[1];
 8000b02:	7b3b      	ldrb	r3, [r7, #12]
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	7b7b      	ldrb	r3, [r7, #13]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	4413      	add	r3, r2
 8000b10:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t data2 = (rcvd_msg[2]<< 8) +rcvd_msg[3];
 8000b12:	7bbb      	ldrb	r3, [r7, #14]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	4413      	add	r3, r2
 8000b20:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t data3 = (rcvd_msg[4]<< 8) +rcvd_msg[5];
 8000b22:	7c3b      	ldrb	r3, [r7, #16]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	021b      	lsls	r3, r3, #8
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	7c7b      	ldrb	r3, [r7, #17]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	4413      	add	r3, r2
 8000b30:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t data4 = (rcvd_msg[6]<< 8) +rcvd_msg[7];
 8000b32:	7cbb      	ldrb	r3, [r7, #18]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	7cfb      	ldrb	r3, [r7, #19]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	4413      	add	r3, r2
 8000b40:	863b      	strh	r3, [r7, #48]	; 0x30

	printf("\n(%d.0) X %08X#%04X%04X%04X%04X", ts, RxHeader.ExtId, data1, data2, data3, data4);
 8000b42:	69b8      	ldr	r0, [r7, #24]
 8000b44:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 8000b46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000b48:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8000b4a:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8000b4c:	9102      	str	r1, [sp, #8]
 8000b4e:	9201      	str	r2, [sp, #4]
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	4623      	mov	r3, r4
 8000b54:	4602      	mov	r2, r0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <CAN_Rx+0x9c>)
 8000b5a:	f004 f82b 	bl	8004bb4 <iprintf>

}
 8000b5e:	bf00      	nop
 8000b60:	373c      	adds	r7, #60	; 0x3c
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd90      	pop	{r4, r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200001fc 	.word	0x200001fc
 8000b6c:	080058b0 	.word	0x080058b0

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <HAL_CAN_MspInit+0x7c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d127      	bne.n	8000c36 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_CAN_MspInit+0x80>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a16      	ldr	r2, [pc, #88]	; (8000c44 <HAL_CAN_MspInit+0x80>)
 8000bec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_CAN_MspInit+0x80>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_CAN_MspInit+0x80>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <HAL_CAN_MspInit+0x80>)
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_CAN_MspInit+0x80>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c16:	2303      	movs	r3, #3
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c26:	2309      	movs	r3, #9
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <HAL_CAN_MspInit+0x84>)
 8000c32:	f001 fa99 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	; 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40006400 	.word	0x40006400
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020c00 	.word	0x40020c00

08000c4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a4e      	ldr	r2, [pc, #312]	; (8000da4 <HAL_ETH_MspInit+0x158>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	f040 8096 	bne.w	8000d9c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c70:	4b4d      	ldr	r3, [pc, #308]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	4a4c      	ldr	r2, [pc, #304]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000c76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7c:	4b4a      	ldr	r3, [pc, #296]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c84:	623b      	str	r3, [r7, #32]
 8000c86:	6a3b      	ldr	r3, [r7, #32]
 8000c88:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a46      	ldr	r2, [pc, #280]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000c8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b44      	ldr	r3, [pc, #272]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	4b41      	ldr	r3, [pc, #260]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	4a40      	ldr	r2, [pc, #256]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000ca6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000caa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cac:	4b3e      	ldr	r3, [pc, #248]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb8:	4b3b      	ldr	r3, [pc, #236]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	4a3a      	ldr	r2, [pc, #232]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc4:	4b38      	ldr	r3, [pc, #224]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b35      	ldr	r3, [pc, #212]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a34      	ldr	r2, [pc, #208]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
 8000cdc:	4b32      	ldr	r3, [pc, #200]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	4a2e      	ldr	r2, [pc, #184]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cee:	f043 0302 	orr.w	r3, r3, #2
 8000cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d00:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4a28      	ldr	r2, [pc, #160]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0c:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d18:	2332      	movs	r3, #50	; 0x32
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d28:	230b      	movs	r3, #11
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	481e      	ldr	r0, [pc, #120]	; (8000dac <HAL_ETH_MspInit+0x160>)
 8000d34:	f001 fa18 	bl	8002168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d38:	2386      	movs	r3, #134	; 0x86
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d48:	230b      	movs	r3, #11
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4817      	ldr	r0, [pc, #92]	; (8000db0 <HAL_ETH_MspInit+0x164>)
 8000d54:	f001 fa08 	bl	8002168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d6a:	230b      	movs	r3, #11
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	480f      	ldr	r0, [pc, #60]	; (8000db4 <HAL_ETH_MspInit+0x168>)
 8000d76:	f001 f9f7 	bl	8002168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d8c:	230b      	movs	r3, #11
 8000d8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4808      	ldr	r0, [pc, #32]	; (8000db8 <HAL_ETH_MspInit+0x16c>)
 8000d98:	f001 f9e6 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3738      	adds	r7, #56	; 0x38
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40028000 	.word	0x40028000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020800 	.word	0x40020800
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020400 	.word	0x40020400
 8000db8:	40021800 	.word	0x40021800

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0ae      	sub	sp, #184	; 0xb8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2290      	movs	r2, #144	; 0x90
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 fefb 	bl	8004bd8 <memset>
  if(huart->Instance==USART3)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a22      	ldr	r2, [pc, #136]	; (8000e70 <HAL_UART_MspInit+0xb4>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d13c      	bne.n	8000e66 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 fa10 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e06:	f7ff feb3 	bl	8000b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a13      	ldr	r2, [pc, #76]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e54:	2307      	movs	r3, #7
 8000e56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_UART_MspInit+0xbc>)
 8000e62:	f001 f981 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e66:	bf00      	nop
 8000e68:	37b8      	adds	r7, #184	; 0xb8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40004800 	.word	0x40004800
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020c00 	.word	0x40020c00

08000e7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b0ae      	sub	sp, #184	; 0xb8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2290      	movs	r2, #144	; 0x90
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fe9b 	bl	8004bd8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eaa:	d159      	bne.n	8000f60 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000eac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000eb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 f9af 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ec8:	f7ff fe52 	bl	8000b70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a25      	ldr	r2, [pc, #148]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed8:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ee4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000efe:	230a      	movs	r3, #10
 8000f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4818      	ldr	r0, [pc, #96]	; (8000f6c <HAL_PCD_MspInit+0xf0>)
 8000f0c:	f001 f92c 	bl	8002168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4810      	ldr	r0, [pc, #64]	; (8000f6c <HAL_PCD_MspInit+0xf0>)
 8000f2c:	f001 f91c 	bl	8002168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f34:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3a:	6353      	str	r3, [r2, #52]	; 0x34
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f52:	6453      	str	r3, [r2, #68]	; 0x44
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	37b8      	adds	r7, #184	; 0xb8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 f91e 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	e00a      	b.n	8000fec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fd6:	f3af 8000 	nop.w
 8000fda:	4601      	mov	r1, r0
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	60ba      	str	r2, [r7, #8]
 8000fe2:	b2ca      	uxtb	r2, r1
 8000fe4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dbf0      	blt.n	8000fd6 <_read+0x12>
  }

  return len;
 8000ff4:	687b      	ldr	r3, [r7, #4]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	e009      	b.n	8001024 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	60ba      	str	r2, [r7, #8]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fd47 	bl	8000aac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbf1      	blt.n	8001010 <_write+0x12>
  }
  return len;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_close>:

int _close(int file)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800105e:	605a      	str	r2, [r3, #4]
  return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <_isatty>:

int _isatty(int file)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <_sbrk+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <_sbrk+0x60>)
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <_sbrk+0x64>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <_sbrk+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d207      	bcs.n	80010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d0:	f003 fd8a 	bl	8004be8 <__errno>
 80010d4:	4603      	mov	r3, r0
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010de:	e009      	b.n	80010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <_sbrk+0x64>)
 80010f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20080000 	.word	0x20080000
 8001100:	00000400 	.word	0x00000400
 8001104:	2000086c 	.word	0x2000086c
 8001108:	200009c0 	.word	0x200009c0

0800110c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001168 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001136:	490e      	ldr	r1, [pc, #56]	; (8001170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800114c:	4c0b      	ldr	r4, [pc, #44]	; (800117c <LoopFillZerobss+0x26>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800115a:	f7ff ffd7 	bl	800110c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115e:	f003 fd49 	bl	8004bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff fa3b 	bl	80005dc <main>
  bx  lr    
 8001166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001174:	0800592c 	.word	0x0800592c
  ldr r2, =_sbss
 8001178:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 800117c:	200009c0 	.word	0x200009c0

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>

08001182 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001186:	2003      	movs	r0, #3
 8001188:	f000 fc94 	bl	8001ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118c:	2000      	movs	r0, #0
 800118e:	f000 f805 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001192:	f7ff fcf3 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fca1 	bl	8001b02 <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d8:	f000 fc77 	bl	8001aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	20000870 	.word	0x20000870

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000870 	.word	0x20000870

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_Delay+0x44>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001262:	bf00      	nop
 8001264:	f7ff ffde 	bl	8001224 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008

08001284 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e0ed      	b.n	8001472 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d102      	bne.n	80012a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff fc8e 	bl	8000bc4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0201 	orr.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b8:	f7ff ffb4 	bl	8001224 <HAL_GetTick>
 80012bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012be:	e012      	b.n	80012e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012c0:	f7ff ffb0 	bl	8001224 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b0a      	cmp	r3, #10
 80012cc:	d90b      	bls.n	80012e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2205      	movs	r2, #5
 80012de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0c5      	b.n	8001472 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0e5      	beq.n	80012c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0202 	bic.w	r2, r2, #2
 8001302:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001304:	f7ff ff8e 	bl	8001224 <HAL_GetTick>
 8001308:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800130a:	e012      	b.n	8001332 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800130c:	f7ff ff8a 	bl	8001224 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b0a      	cmp	r3, #10
 8001318:	d90b      	bls.n	8001332 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2205      	movs	r2, #5
 800132a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e09f      	b.n	8001472 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1e5      	bne.n	800130c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7e1b      	ldrb	r3, [r3, #24]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d108      	bne.n	800135a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e007      	b.n	800136a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7e5b      	ldrb	r3, [r3, #25]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d108      	bne.n	8001384 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e007      	b.n	8001394 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001392:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7e9b      	ldrb	r3, [r3, #26]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d108      	bne.n	80013ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0220 	orr.w	r2, r2, #32
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e007      	b.n	80013be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0220 	bic.w	r2, r2, #32
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7edb      	ldrb	r3, [r3, #27]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d108      	bne.n	80013d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0210 	bic.w	r2, r2, #16
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e007      	b.n	80013e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0210 	orr.w	r2, r2, #16
 80013e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7f1b      	ldrb	r3, [r3, #28]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d108      	bne.n	8001402 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0208 	orr.w	r2, r2, #8
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e007      	b.n	8001412 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0208 	bic.w	r2, r2, #8
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7f5b      	ldrb	r3, [r3, #29]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d108      	bne.n	800142c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 0204 	orr.w	r2, r2, #4
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e007      	b.n	800143c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0204 	bic.w	r2, r2, #4
 800143a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	ea42 0103 	orr.w	r1, r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001492:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001494:	7cfb      	ldrb	r3, [r7, #19]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d003      	beq.n	80014a2 <HAL_CAN_ConfigFilter+0x26>
 800149a:	7cfb      	ldrb	r3, [r7, #19]
 800149c:	2b02      	cmp	r3, #2
 800149e:	f040 80c7 	bne.w	8001630 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a69      	ldr	r2, [pc, #420]	; (800164c <HAL_CAN_ConfigFilter+0x1d0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d001      	beq.n	80014b0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80014ac:	4b68      	ldr	r3, [pc, #416]	; (8001650 <HAL_CAN_ConfigFilter+0x1d4>)
 80014ae:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	4a63      	ldr	r2, [pc, #396]	; (8001650 <HAL_CAN_ConfigFilter+0x1d4>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d111      	bne.n	80014ec <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014ce:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	431a      	orrs	r2, r3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	2201      	movs	r2, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	43db      	mvns	r3, r3
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d123      	bne.n	800155e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	401a      	ands	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001538:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3248      	adds	r2, #72	; 0x48
 800153e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001552:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001554:	6979      	ldr	r1, [r7, #20]
 8001556:	3348      	adds	r3, #72	; 0x48
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d122      	bne.n	80015ac <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	431a      	orrs	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001586:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3248      	adds	r2, #72	; 0x48
 800158c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015a2:	6979      	ldr	r1, [r7, #20]
 80015a4:	3348      	adds	r3, #72	; 0x48
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d109      	bne.n	80015c8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43db      	mvns	r3, r3
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015c6:	e007      	b.n	80015d8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d109      	bne.n	80015f4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80015f2:	e007      	b.n	8001604 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d107      	bne.n	800161c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	431a      	orrs	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001622:	f023 0201 	bic.w	r2, r3, #1
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	e006      	b.n	800163e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
  }
}
 800163e:	4618      	mov	r0, r3
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40003400 	.word	0x40003400
 8001650:	40006400 	.word	0x40006400

08001654 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d12e      	bne.n	80016c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2202      	movs	r2, #2
 800166c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0201 	bic.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001680:	f7ff fdd0 	bl	8001224 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001686:	e012      	b.n	80016ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001688:	f7ff fdcc 	bl	8001224 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b0a      	cmp	r3, #10
 8001694:	d90b      	bls.n	80016ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2205      	movs	r2, #5
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e012      	b.n	80016d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e5      	bne.n	8001688 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e006      	b.n	80016d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
  }
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d003      	beq.n	8001700 <HAL_CAN_GetRxMessage+0x24>
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	f040 80f3 	bne.w	80018e6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10e      	bne.n	8001724 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d116      	bne.n	8001742 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0e7      	b.n	80018f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d107      	bne.n	8001742 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0d8      	b.n	80018f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	331b      	adds	r3, #27
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	4413      	add	r3, r2
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0204 	and.w	r2, r3, #4
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10c      	bne.n	800177a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	331b      	adds	r3, #27
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	4413      	add	r3, r2
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	0d5b      	lsrs	r3, r3, #21
 8001770:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e00b      	b.n	8001792 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	331b      	adds	r3, #27
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	4413      	add	r3, r2
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	08db      	lsrs	r3, r3, #3
 800178a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	331b      	adds	r3, #27
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	4413      	add	r3, r2
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0202 	and.w	r2, r3, #2
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	331b      	adds	r3, #27
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	4413      	add	r3, r2
 80017b4:	3304      	adds	r3, #4
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 020f 	and.w	r2, r3, #15
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	331b      	adds	r3, #27
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	4413      	add	r3, r2
 80017cc:	3304      	adds	r3, #4
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	331b      	adds	r3, #27
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	4413      	add	r3, r2
 80017e4:	3304      	adds	r3, #4
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0c1b      	lsrs	r3, r3, #16
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	4413      	add	r3, r2
 80017fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	4413      	add	r3, r2
 8001810:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	0a1a      	lsrs	r2, r3, #8
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	4413      	add	r3, r2
 800182a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	0c1a      	lsrs	r2, r3, #16
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	3302      	adds	r3, #2
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	4413      	add	r3, r2
 8001844:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	0e1a      	lsrs	r2, r3, #24
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	3303      	adds	r3, #3
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	4413      	add	r3, r2
 800185e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	3304      	adds	r3, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4413      	add	r3, r2
 8001876:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0a1a      	lsrs	r2, r3, #8
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	3305      	adds	r3, #5
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	4413      	add	r3, r2
 8001890:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	0c1a      	lsrs	r2, r3, #16
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	3306      	adds	r3, #6
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	4413      	add	r3, r2
 80018aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	0e1a      	lsrs	r2, r3, #24
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	3307      	adds	r3, #7
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d108      	bne.n	80018d2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0220 	orr.w	r2, r2, #32
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	e007      	b.n	80018e2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f042 0220 	orr.w	r2, r2, #32
 80018e0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e006      	b.n	80018f4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
  }
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001914:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d002      	beq.n	8001922 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800191c:	7afb      	ldrb	r3, [r7, #11]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d10f      	bne.n	8001942 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d106      	bne.n	8001936 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e005      	b.n	8001942 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <__NVIC_SetPriorityGrouping+0x40>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800196c:	4013      	ands	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	4313      	orrs	r3, r2
 800197c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <__NVIC_SetPriorityGrouping+0x40>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	60d3      	str	r3, [r2, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00
 8001994:	05fa0000 	.word	0x05fa0000

08001998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <__NVIC_GetPriorityGrouping+0x18>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f003 0307 	and.w	r3, r3, #7
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0a      	blt.n	80019de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	490c      	ldr	r1, [pc, #48]	; (8001a00 <__NVIC_SetPriority+0x4c>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	440b      	add	r3, r1
 80019d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019dc:	e00a      	b.n	80019f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4908      	ldr	r1, [pc, #32]	; (8001a04 <__NVIC_SetPriority+0x50>)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	3b04      	subs	r3, #4
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	761a      	strb	r2, [r3, #24]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f1c3 0307 	rsb	r3, r3, #7
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	bf28      	it	cs
 8001a26:	2304      	movcs	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d902      	bls.n	8001a38 <NVIC_EncodePriority+0x30>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3b03      	subs	r3, #3
 8001a36:	e000      	b.n	8001a3a <NVIC_EncodePriority+0x32>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43d9      	mvns	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	4313      	orrs	r3, r2
         );
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3724      	adds	r7, #36	; 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a80:	d301      	bcc.n	8001a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00f      	b.n	8001aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <SysTick_Config+0x40>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8e:	210f      	movs	r1, #15
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a94:	f7ff ff8e 	bl	80019b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <SysTick_Config+0x40>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9e:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <SysTick_Config+0x40>)
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	e000e010 	.word	0xe000e010

08001ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff47 	bl	8001950 <__NVIC_SetPriorityGrouping>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001adc:	f7ff ff5c 	bl	8001998 <__NVIC_GetPriorityGrouping>
 8001ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff ff8e 	bl	8001a08 <NVIC_EncodePriority>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff5d 	bl	80019b4 <__NVIC_SetPriority>
}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffb0 	bl	8001a70 <SysTick_Config>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06a      	b.n	8001c04 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d106      	bne.n	8001b46 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2223      	movs	r2, #35	; 0x23
 8001b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff f883 	bl	8000c4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <HAL_ETH_Init+0xf0>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4a30      	ldr	r2, [pc, #192]	; (8001c0c <HAL_ETH_Init+0xf0>)
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b50:	6453      	str	r3, [r2, #68]	; 0x44
 8001b52:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <HAL_ETH_Init+0xf0>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <HAL_ETH_Init+0xf4>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4a2b      	ldr	r2, [pc, #172]	; (8001c10 <HAL_ETH_Init+0xf4>)
 8001b64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b68:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b6a:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <HAL_ETH_Init+0xf4>)
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4927      	ldr	r1, [pc, #156]	; (8001c10 <HAL_ETH_Init+0xf4>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <HAL_ETH_Init+0xf4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b94:	f7ff fb46 	bl	8001224 <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b9a:	e011      	b.n	8001bc0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001b9c:	f7ff fb42 	bl	8001224 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001baa:	d909      	bls.n	8001bc0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2204      	movs	r2, #4
 8001bb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	22e0      	movs	r2, #224	; 0xe0
 8001bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e021      	b.n	8001c04 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1e4      	bne.n	8001b9c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f958 	bl	8001e88 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f9ff 	bl	8001fdc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fa55 	bl	800208e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	461a      	mov	r2, r3
 8001bea:	2100      	movs	r1, #0
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f9bd 	bl	8001f6c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40013800 	.word	0x40013800

08001c14 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4b51      	ldr	r3, [pc, #324]	; (8001d70 <ETH_SetMACConfig+0x15c>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	7c1b      	ldrb	r3, [r3, #16]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <ETH_SetMACConfig+0x28>
 8001c36:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c3a:	e000      	b.n	8001c3e <ETH_SetMACConfig+0x2a>
 8001c3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	7c5b      	ldrb	r3, [r3, #17]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <ETH_SetMACConfig+0x38>
 8001c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c4a:	e000      	b.n	8001c4e <ETH_SetMACConfig+0x3a>
 8001c4c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c4e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c54:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	7fdb      	ldrb	r3, [r3, #31]
 8001c5a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c5c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	7f92      	ldrb	r2, [r2, #30]
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	d102      	bne.n	8001c72 <ETH_SetMACConfig+0x5e>
 8001c6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c70:	e000      	b.n	8001c74 <ETH_SetMACConfig+0x60>
 8001c72:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	7f1b      	ldrb	r3, [r3, #28]
 8001c7a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c7c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	791b      	ldrb	r3, [r3, #4]
 8001c88:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c92:	2a00      	cmp	r2, #0
 8001c94:	d102      	bne.n	8001c9c <ETH_SetMACConfig+0x88>
 8001c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9a:	e000      	b.n	8001c9e <ETH_SetMACConfig+0x8a>
 8001c9c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c9e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	7bdb      	ldrb	r3, [r3, #15]
 8001ca4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ca6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cb4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff fab4 	bl	800123c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cea:	4013      	ands	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001cfa:	2a00      	cmp	r2, #0
 8001cfc:	d101      	bne.n	8001d02 <ETH_SetMACConfig+0xee>
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	e000      	b.n	8001d04 <ETH_SetMACConfig+0xf0>
 8001d02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d04:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001d12:	2a01      	cmp	r2, #1
 8001d14:	d101      	bne.n	8001d1a <ETH_SetMACConfig+0x106>
 8001d16:	2208      	movs	r2, #8
 8001d18:	e000      	b.n	8001d1c <ETH_SetMACConfig+0x108>
 8001d1a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d1c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001d24:	2a01      	cmp	r2, #1
 8001d26:	d101      	bne.n	8001d2c <ETH_SetMACConfig+0x118>
 8001d28:	2204      	movs	r2, #4
 8001d2a:	e000      	b.n	8001d2e <ETH_SetMACConfig+0x11a>
 8001d2c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001d36:	2a01      	cmp	r2, #1
 8001d38:	d101      	bne.n	8001d3e <ETH_SetMACConfig+0x12a>
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	e000      	b.n	8001d40 <ETH_SetMACConfig+0x12c>
 8001d3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d40:	4313      	orrs	r3, r2
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7ff fa6f 	bl	800123c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	619a      	str	r2, [r3, #24]
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	ff20810f 	.word	0xff20810f

08001d74 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <ETH_SetDMAConfig+0x110>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	7b1b      	ldrb	r3, [r3, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <ETH_SetDMAConfig+0x2c>
 8001d9a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d9e:	e000      	b.n	8001da2 <ETH_SetDMAConfig+0x2e>
 8001da0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	7b5b      	ldrb	r3, [r3, #13]
 8001da6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001da8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	7f52      	ldrb	r2, [r2, #29]
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d102      	bne.n	8001db8 <ETH_SetDMAConfig+0x44>
 8001db2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001db6:	e000      	b.n	8001dba <ETH_SetDMAConfig+0x46>
 8001db8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	7b9b      	ldrb	r3, [r3, #14]
 8001dc0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dc2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dc8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	7f1b      	ldrb	r3, [r3, #28]
 8001dce:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001dd0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	7f9b      	ldrb	r3, [r3, #30]
 8001dd6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dd8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dde:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001de8:	4313      	orrs	r3, r2
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df8:	461a      	mov	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff fa16 	bl	800123c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e18:	461a      	mov	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	791b      	ldrb	r3, [r3, #4]
 8001e22:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e28:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e2e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e34:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e3c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e3e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e46:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e4c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e5a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7ff f9e7 	bl	800123c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	f8de3f23 	.word	0xf8de3f23

08001e88 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b0a6      	sub	sp, #152	; 0x98
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001e96:	2301      	movs	r3, #1
 8001e98:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001eea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eee:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001efc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f00:	4619      	mov	r1, r3
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fe86 	bl	8001c14 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f10:	2301      	movs	r3, #1
 8001f12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f16:	2301      	movs	r3, #1
 8001f18:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f34:	2301      	movs	r3, #1
 8001f36:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f3c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ff08 	bl	8001d74 <ETH_SetDMAConfig>
}
 8001f64:	bf00      	nop
 8001f66:	3798      	adds	r7, #152	; 0x98
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3305      	adds	r3, #5
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	3204      	adds	r2, #4
 8001f84:	7812      	ldrb	r2, [r2, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <ETH_MACAddressConfig+0x68>)
 8001f8e:	4413      	add	r3, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3303      	adds	r3, #3
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	061a      	lsls	r2, r3, #24
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	041b      	lsls	r3, r3, #16
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3301      	adds	r3, #1
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	7812      	ldrb	r2, [r2, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <ETH_MACAddressConfig+0x6c>)
 8001fbe:	4413      	add	r3, r2
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	6013      	str	r3, [r2, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	371c      	adds	r7, #28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40028040 	.word	0x40028040
 8001fd8:	40028044 	.word	0x40028044

08001fdc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e03e      	b.n	8002068 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68d9      	ldr	r1, [r3, #12]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2200      	movs	r2, #0
 8002006:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2200      	movs	r2, #0
 8002012:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	3206      	adds	r2, #6
 800201c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d80c      	bhi.n	800204c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68d9      	ldr	r1, [r3, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	461a      	mov	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	e004      	b.n	8002056 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	461a      	mov	r2, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3301      	adds	r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d9bd      	bls.n	8001fea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002080:	611a      	str	r2, [r3, #16]
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	e046      	b.n	800212a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6919      	ldr	r1, [r3, #16]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2200      	movs	r2, #0
 80020b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2200      	movs	r2, #0
 80020ca:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2200      	movs	r2, #0
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020d8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80020e0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	3212      	adds	r2, #18
 80020f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d80c      	bhi.n	800211a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6919      	ldr	r1, [r3, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	461a      	mov	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	60da      	str	r2, [r3, #12]
 8002118:	e004      	b.n	8002124 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	461a      	mov	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3301      	adds	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d9b5      	bls.n	800209c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800215a:	60da      	str	r2, [r3, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	e175      	b.n	8002474 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002188:	2201      	movs	r2, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	f040 8164 	bne.w	800246e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d005      	beq.n	80021be <HAL_GPIO_Init+0x56>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d130      	bne.n	8002220 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f4:	2201      	movs	r2, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 0201 	and.w	r2, r3, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b03      	cmp	r3, #3
 800222a:	d017      	beq.n	800225c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d123      	bne.n	80022b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	08da      	lsrs	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3208      	adds	r2, #8
 8002270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	220f      	movs	r2, #15
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	69b9      	ldr	r1, [r7, #24]
 80022ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0203 	and.w	r2, r3, #3
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80be 	beq.w	800246e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	4b66      	ldr	r3, [pc, #408]	; (800248c <HAL_GPIO_Init+0x324>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	4a65      	ldr	r2, [pc, #404]	; (800248c <HAL_GPIO_Init+0x324>)
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fc:	6453      	str	r3, [r2, #68]	; 0x44
 80022fe:	4b63      	ldr	r3, [pc, #396]	; (800248c <HAL_GPIO_Init+0x324>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800230a:	4a61      	ldr	r2, [pc, #388]	; (8002490 <HAL_GPIO_Init+0x328>)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3302      	adds	r3, #2
 8002312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	220f      	movs	r2, #15
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a58      	ldr	r2, [pc, #352]	; (8002494 <HAL_GPIO_Init+0x32c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d037      	beq.n	80023a6 <HAL_GPIO_Init+0x23e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a57      	ldr	r2, [pc, #348]	; (8002498 <HAL_GPIO_Init+0x330>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d031      	beq.n	80023a2 <HAL_GPIO_Init+0x23a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a56      	ldr	r2, [pc, #344]	; (800249c <HAL_GPIO_Init+0x334>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d02b      	beq.n	800239e <HAL_GPIO_Init+0x236>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a55      	ldr	r2, [pc, #340]	; (80024a0 <HAL_GPIO_Init+0x338>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d025      	beq.n	800239a <HAL_GPIO_Init+0x232>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a54      	ldr	r2, [pc, #336]	; (80024a4 <HAL_GPIO_Init+0x33c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01f      	beq.n	8002396 <HAL_GPIO_Init+0x22e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a53      	ldr	r2, [pc, #332]	; (80024a8 <HAL_GPIO_Init+0x340>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d019      	beq.n	8002392 <HAL_GPIO_Init+0x22a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_GPIO_Init+0x344>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d013      	beq.n	800238e <HAL_GPIO_Init+0x226>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a51      	ldr	r2, [pc, #324]	; (80024b0 <HAL_GPIO_Init+0x348>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00d      	beq.n	800238a <HAL_GPIO_Init+0x222>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a50      	ldr	r2, [pc, #320]	; (80024b4 <HAL_GPIO_Init+0x34c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <HAL_GPIO_Init+0x21e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4f      	ldr	r2, [pc, #316]	; (80024b8 <HAL_GPIO_Init+0x350>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d101      	bne.n	8002382 <HAL_GPIO_Init+0x21a>
 800237e:	2309      	movs	r3, #9
 8002380:	e012      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 8002382:	230a      	movs	r3, #10
 8002384:	e010      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 8002386:	2308      	movs	r3, #8
 8002388:	e00e      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 800238a:	2307      	movs	r3, #7
 800238c:	e00c      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 800238e:	2306      	movs	r3, #6
 8002390:	e00a      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 8002392:	2305      	movs	r3, #5
 8002394:	e008      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 8002396:	2304      	movs	r3, #4
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 800239a:	2303      	movs	r3, #3
 800239c:	e004      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 800239e:	2302      	movs	r3, #2
 80023a0:	e002      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 80023a6:	2300      	movs	r3, #0
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	f002 0203 	and.w	r2, r2, #3
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	4093      	lsls	r3, r2
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023b8:	4935      	ldr	r1, [pc, #212]	; (8002490 <HAL_GPIO_Init+0x328>)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023c6:	4b3d      	ldr	r3, [pc, #244]	; (80024bc <HAL_GPIO_Init+0x354>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ea:	4a34      	ldr	r2, [pc, #208]	; (80024bc <HAL_GPIO_Init+0x354>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f0:	4b32      	ldr	r3, [pc, #200]	; (80024bc <HAL_GPIO_Init+0x354>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002414:	4a29      	ldr	r2, [pc, #164]	; (80024bc <HAL_GPIO_Init+0x354>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800241a:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_GPIO_Init+0x354>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800243e:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <HAL_GPIO_Init+0x354>)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002444:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_GPIO_Init+0x354>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002468:	4a14      	ldr	r2, [pc, #80]	; (80024bc <HAL_GPIO_Init+0x354>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3301      	adds	r3, #1
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b0f      	cmp	r3, #15
 8002478:	f67f ae86 	bls.w	8002188 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	40013800 	.word	0x40013800
 8002494:	40020000 	.word	0x40020000
 8002498:	40020400 	.word	0x40020400
 800249c:	40020800 	.word	0x40020800
 80024a0:	40020c00 	.word	0x40020c00
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40021400 	.word	0x40021400
 80024ac:	40021800 	.word	0x40021800
 80024b0:	40021c00 	.word	0x40021c00
 80024b4:	40022000 	.word	0x40022000
 80024b8:	40022400 	.word	0x40022400
 80024bc:	40013c00 	.word	0x40013c00

080024c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d0:	787b      	ldrb	r3, [r7, #1]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024dc:	e003      	b.n	80024e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	041a      	lsls	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	619a      	str	r2, [r3, #24]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002504:	887a      	ldrh	r2, [r7, #2]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4013      	ands	r3, r2
 800250a:	041a      	lsls	r2, r3, #16
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	43d9      	mvns	r1, r3
 8002510:	887b      	ldrh	r3, [r7, #2]
 8002512:	400b      	ands	r3, r1
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	619a      	str	r2, [r3, #24]
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002526:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002528:	b08f      	sub	sp, #60	; 0x3c
 800252a:	af0a      	add	r7, sp, #40	; 0x28
 800252c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e116      	b.n	8002766 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe fc92 	bl	8000e7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2203      	movs	r2, #3
 800255c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f001 ffbe 	bl	80044f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	603b      	str	r3, [r7, #0]
 8002582:	687e      	ldr	r6, [r7, #4]
 8002584:	466d      	mov	r5, sp
 8002586:	f106 0410 	add.w	r4, r6, #16
 800258a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800258c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800258e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002592:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002596:	e885 0003 	stmia.w	r5, {r0, r1}
 800259a:	1d33      	adds	r3, r6, #4
 800259c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800259e:	6838      	ldr	r0, [r7, #0]
 80025a0:	f001 ff52 	bl	8004448 <USB_CoreInit>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0d7      	b.n	8002766 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f001 ffac 	bl	800451a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	73fb      	strb	r3, [r7, #15]
 80025c6:	e04a      	b.n	800265e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025c8:	7bfa      	ldrb	r2, [r7, #15]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	333d      	adds	r3, #61	; 0x3d
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	333c      	adds	r3, #60	; 0x3c
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	b298      	uxth	r0, r3
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	3344      	adds	r3, #68	; 0x44
 8002604:	4602      	mov	r2, r0
 8002606:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	3340      	adds	r3, #64	; 0x40
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800261c:	7bfa      	ldrb	r2, [r7, #15]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	3348      	adds	r3, #72	; 0x48
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	334c      	adds	r3, #76	; 0x4c
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	3354      	adds	r3, #84	; 0x54
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	3301      	adds	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	429a      	cmp	r2, r3
 8002666:	d3af      	bcc.n	80025c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	e044      	b.n	80026f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800266e:	7bfa      	ldrb	r2, [r7, #15]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800269a:	7bfa      	ldrb	r2, [r7, #15]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026dc:	7bfa      	ldrb	r2, [r7, #15]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	3301      	adds	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d3b5      	bcc.n	800266e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	687e      	ldr	r6, [r7, #4]
 800270a:	466d      	mov	r5, sp
 800270c:	f106 0410 	add.w	r4, r6, #16
 8002710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002718:	e894 0003 	ldmia.w	r4, {r0, r1}
 800271c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002720:	1d33      	adds	r3, r6, #4
 8002722:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002724:	6838      	ldr	r0, [r7, #0]
 8002726:	f001 ff45 	bl	80045b4 <USB_DevInit>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e014      	b.n	8002766 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2b01      	cmp	r3, #1
 8002752:	d102      	bne.n	800275a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f80b 	bl	8002770 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f002 f903 	bl	800496a <USB_DevDisconnect>

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002770 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	10000003 	.word	0x10000003

080027b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c6:	6013      	str	r3, [r2, #0]
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40007000 	.word	0x40007000

080027d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	4b23      	ldr	r3, [pc, #140]	; (8002870 <HAL_PWREx_EnableOverDrive+0x98>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a22      	ldr	r2, [pc, #136]	; (8002870 <HAL_PWREx_EnableOverDrive+0x98>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_PWREx_EnableOverDrive+0x98>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027fa:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002806:	f7fe fd0d 	bl	8001224 <HAL_GetTick>
 800280a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800280c:	e009      	b.n	8002822 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800280e:	f7fe fd09 	bl	8001224 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800281c:	d901      	bls.n	8002822 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e022      	b.n	8002868 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002822:	4b14      	ldr	r3, [pc, #80]	; (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282e:	d1ee      	bne.n	800280e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800283c:	f7fe fcf2 	bl	8001224 <HAL_GetTick>
 8002840:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002842:	e009      	b.n	8002858 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002844:	f7fe fcee 	bl	8001224 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002852:	d901      	bls.n	8002858 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e007      	b.n	8002868 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002864:	d1ee      	bne.n	8002844 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40023800 	.word	0x40023800
 8002874:	40007000 	.word	0x40007000

08002878 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002880:	2300      	movs	r3, #0
 8002882:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e29b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8087 	beq.w	80029aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800289c:	4b96      	ldr	r3, [pc, #600]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 030c 	and.w	r3, r3, #12
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d00c      	beq.n	80028c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a8:	4b93      	ldr	r3, [pc, #588]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d112      	bne.n	80028da <HAL_RCC_OscConfig+0x62>
 80028b4:	4b90      	ldr	r3, [pc, #576]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c0:	d10b      	bne.n	80028da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c2:	4b8d      	ldr	r3, [pc, #564]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d06c      	beq.n	80029a8 <HAL_RCC_OscConfig+0x130>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d168      	bne.n	80029a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e275      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x7a>
 80028e4:	4b84      	ldr	r3, [pc, #528]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a83      	ldr	r2, [pc, #524]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	e02e      	b.n	8002950 <HAL_RCC_OscConfig+0xd8>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x9c>
 80028fa:	4b7f      	ldr	r3, [pc, #508]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a7e      	ldr	r2, [pc, #504]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b7c      	ldr	r3, [pc, #496]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a7b      	ldr	r2, [pc, #492]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 800290c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e01d      	b.n	8002950 <HAL_RCC_OscConfig+0xd8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0xc0>
 800291e:	4b76      	ldr	r3, [pc, #472]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a75      	ldr	r2, [pc, #468]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b73      	ldr	r3, [pc, #460]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a72      	ldr	r2, [pc, #456]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e00b      	b.n	8002950 <HAL_RCC_OscConfig+0xd8>
 8002938:	4b6f      	ldr	r3, [pc, #444]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a6e      	ldr	r2, [pc, #440]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 800293e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	4b6c      	ldr	r3, [pc, #432]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a6b      	ldr	r2, [pc, #428]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 800294a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d013      	beq.n	8002980 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe fc64 	bl	8001224 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002960:	f7fe fc60 	bl	8001224 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e229      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b61      	ldr	r3, [pc, #388]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0xe8>
 800297e:	e014      	b.n	80029aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fc50 	bl	8001224 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002988:	f7fe fc4c 	bl	8001224 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	; 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e215      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299a:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x110>
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d069      	beq.n	8002a8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029b6:	4b50      	ldr	r3, [pc, #320]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00b      	beq.n	80029da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c2:	4b4d      	ldr	r3, [pc, #308]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d11c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x190>
 80029ce:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d116      	bne.n	8002a08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d005      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e1e9      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f2:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	493d      	ldr	r1, [pc, #244]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a06:	e040      	b.n	8002a8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d023      	beq.n	8002a58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a10:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a38      	ldr	r2, [pc, #224]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fc02 	bl	8001224 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a24:	f7fe fbfe 	bl	8001224 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e1c7      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a36:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4929      	ldr	r1, [pc, #164]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
 8002a56:	e018      	b.n	8002a8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a58:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a26      	ldr	r2, [pc, #152]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe fbde 	bl	8001224 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6c:	f7fe fbda 	bl	8001224 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e1a3      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d038      	beq.n	8002b08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d019      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fbbb 	bl	8001224 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab2:	f7fe fbb7 	bl	8001224 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e180      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x23a>
 8002ad0:	e01a      	b.n	8002b08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad6:	4a08      	ldr	r2, [pc, #32]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fe fba1 	bl	8001224 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae6:	f7fe fb9d 	bl	8001224 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d903      	bls.n	8002afc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e166      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
 8002af8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afc:	4b92      	ldr	r3, [pc, #584]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80a4 	beq.w	8002c5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b16:	4b8c      	ldr	r3, [pc, #560]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10d      	bne.n	8002b3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b89      	ldr	r3, [pc, #548]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	4a88      	ldr	r2, [pc, #544]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2e:	4b86      	ldr	r3, [pc, #536]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b3e:	4b83      	ldr	r3, [pc, #524]	; (8002d4c <HAL_RCC_OscConfig+0x4d4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d118      	bne.n	8002b7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b4a:	4b80      	ldr	r3, [pc, #512]	; (8002d4c <HAL_RCC_OscConfig+0x4d4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a7f      	ldr	r2, [pc, #508]	; (8002d4c <HAL_RCC_OscConfig+0x4d4>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b56:	f7fe fb65 	bl	8001224 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5e:	f7fe fb61 	bl	8001224 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b64      	cmp	r3, #100	; 0x64
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e12a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b70:	4b76      	ldr	r3, [pc, #472]	; (8002d4c <HAL_RCC_OscConfig+0x4d4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x31a>
 8002b84:	4b70      	ldr	r3, [pc, #448]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a6f      	ldr	r2, [pc, #444]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	e02d      	b.n	8002bee <HAL_RCC_OscConfig+0x376>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x33c>
 8002b9a:	4b6b      	ldr	r3, [pc, #428]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	4a6a      	ldr	r2, [pc, #424]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba6:	4b68      	ldr	r3, [pc, #416]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	4a67      	ldr	r2, [pc, #412]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002bac:	f023 0304 	bic.w	r3, r3, #4
 8002bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb2:	e01c      	b.n	8002bee <HAL_RCC_OscConfig+0x376>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x35e>
 8002bbc:	4b62      	ldr	r3, [pc, #392]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	4a61      	ldr	r2, [pc, #388]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc8:	4b5f      	ldr	r3, [pc, #380]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	4a5e      	ldr	r2, [pc, #376]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd4:	e00b      	b.n	8002bee <HAL_RCC_OscConfig+0x376>
 8002bd6:	4b5c      	ldr	r3, [pc, #368]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	4a5b      	ldr	r2, [pc, #364]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	6713      	str	r3, [r2, #112]	; 0x70
 8002be2:	4b59      	ldr	r3, [pc, #356]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	4a58      	ldr	r2, [pc, #352]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002be8:	f023 0304 	bic.w	r3, r3, #4
 8002bec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d015      	beq.n	8002c22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fb15 	bl	8001224 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7fe fb11 	bl	8001224 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0d8      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c14:	4b4c      	ldr	r3, [pc, #304]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ee      	beq.n	8002bfe <HAL_RCC_OscConfig+0x386>
 8002c20:	e014      	b.n	8002c4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7fe faff 	bl	8001224 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fe fafb 	bl	8001224 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e0c2      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c40:	4b41      	ldr	r3, [pc, #260]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ee      	bne.n	8002c2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c4c:	7dfb      	ldrb	r3, [r7, #23]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d105      	bne.n	8002c5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c52:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	4a3c      	ldr	r2, [pc, #240]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80ae 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c68:	4b37      	ldr	r3, [pc, #220]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d06d      	beq.n	8002d50 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d14b      	bne.n	8002d14 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7c:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a31      	ldr	r2, [pc, #196]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe facc 	bl	8001224 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c90:	f7fe fac8 	bl	8001224 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e091      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	019b      	lsls	r3, r3, #6
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	041b      	lsls	r3, r3, #16
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	071b      	lsls	r3, r3, #28
 8002cda:	491b      	ldr	r1, [pc, #108]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce0:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe fa9a 	bl	8001224 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe fa96 	bl	8001224 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e05f      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x47c>
 8002d12:	e057      	b.n	8002dc4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fa80 	bl	8001224 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d28:	f7fe fa7c 	bl	8001224 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e045      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x4b0>
 8002d46:	e03d      	b.n	8002dc4 <HAL_RCC_OscConfig+0x54c>
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d50:	4b1f      	ldr	r3, [pc, #124]	; (8002dd0 <HAL_RCC_OscConfig+0x558>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d030      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d129      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d122      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d80:	4013      	ands	r3, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d119      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d10f      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d107      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800

08002dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0d0      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dec:	4b6a      	ldr	r3, [pc, #424]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d910      	bls.n	8002e1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b67      	ldr	r3, [pc, #412]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 020f 	bic.w	r2, r3, #15
 8002e02:	4965      	ldr	r1, [pc, #404]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b63      	ldr	r3, [pc, #396]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0b8      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d020      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e34:	4b59      	ldr	r3, [pc, #356]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4a58      	ldr	r2, [pc, #352]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e4c:	4b53      	ldr	r3, [pc, #332]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a52      	ldr	r2, [pc, #328]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e58:	4b50      	ldr	r3, [pc, #320]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	494d      	ldr	r1, [pc, #308]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d040      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d115      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e07f      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e96:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e073      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	4b3d      	ldr	r3, [pc, #244]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e06b      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb6:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f023 0203 	bic.w	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4936      	ldr	r1, [pc, #216]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec8:	f7fe f9ac 	bl	8001224 <HAL_GetTick>
 8002ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed0:	f7fe f9a8 	bl	8001224 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e053      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	4b2d      	ldr	r3, [pc, #180]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 020c 	and.w	r2, r3, #12
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d1eb      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef8:	4b27      	ldr	r3, [pc, #156]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d210      	bcs.n	8002f28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f06:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 020f 	bic.w	r2, r3, #15
 8002f0e:	4922      	ldr	r1, [pc, #136]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f16:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e032      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f34:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4916      	ldr	r1, [pc, #88]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	490e      	ldr	r1, [pc, #56]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f66:	f000 f821 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	490a      	ldr	r1, [pc, #40]	; (8002fa0 <HAL_RCC_ClockConfig+0x1cc>)
 8002f78:	5ccb      	ldrb	r3, [r1, r3]
 8002f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7e:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <HAL_RCC_ClockConfig+0x1d0>)
 8002f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_RCC_ClockConfig+0x1d4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe f908 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40023c00 	.word	0x40023c00
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	080058d0 	.word	0x080058d0
 8002fa4:	20000000 	.word	0x20000000
 8002fa8:	20000004 	.word	0x20000004

08002fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb0:	b094      	sub	sp, #80	; 0x50
 8002fb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fb8:	2300      	movs	r3, #0
 8002fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc4:	4b79      	ldr	r3, [pc, #484]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d00d      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0x40>
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	f200 80e1 	bhi.w	8003198 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fde:	e0db      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe0:	4b73      	ldr	r3, [pc, #460]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fe2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fe4:	e0db      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fe6:	4b73      	ldr	r3, [pc, #460]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fea:	e0d8      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fec:	4b6f      	ldr	r3, [pc, #444]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ff4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ff6:	4b6d      	ldr	r3, [pc, #436]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d063      	beq.n	80030ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003002:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	2200      	movs	r2, #0
 800300a:	63bb      	str	r3, [r7, #56]	; 0x38
 800300c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003014:	633b      	str	r3, [r7, #48]	; 0x30
 8003016:	2300      	movs	r3, #0
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
 800301a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800301e:	4622      	mov	r2, r4
 8003020:	462b      	mov	r3, r5
 8003022:	f04f 0000 	mov.w	r0, #0
 8003026:	f04f 0100 	mov.w	r1, #0
 800302a:	0159      	lsls	r1, r3, #5
 800302c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003030:	0150      	lsls	r0, r2, #5
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4621      	mov	r1, r4
 8003038:	1a51      	subs	r1, r2, r1
 800303a:	6139      	str	r1, [r7, #16]
 800303c:	4629      	mov	r1, r5
 800303e:	eb63 0301 	sbc.w	r3, r3, r1
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003050:	4659      	mov	r1, fp
 8003052:	018b      	lsls	r3, r1, #6
 8003054:	4651      	mov	r1, sl
 8003056:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800305a:	4651      	mov	r1, sl
 800305c:	018a      	lsls	r2, r1, #6
 800305e:	4651      	mov	r1, sl
 8003060:	ebb2 0801 	subs.w	r8, r2, r1
 8003064:	4659      	mov	r1, fp
 8003066:	eb63 0901 	sbc.w	r9, r3, r1
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800307a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800307e:	4690      	mov	r8, r2
 8003080:	4699      	mov	r9, r3
 8003082:	4623      	mov	r3, r4
 8003084:	eb18 0303 	adds.w	r3, r8, r3
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	462b      	mov	r3, r5
 800308c:	eb49 0303 	adc.w	r3, r9, r3
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800309e:	4629      	mov	r1, r5
 80030a0:	024b      	lsls	r3, r1, #9
 80030a2:	4621      	mov	r1, r4
 80030a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030a8:	4621      	mov	r1, r4
 80030aa:	024a      	lsls	r2, r1, #9
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b2:	2200      	movs	r2, #0
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030bc:	f7fd f910 	bl	80002e0 <__aeabi_uldivmod>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4613      	mov	r3, r2
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c8:	e058      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ca:	4b38      	ldr	r3, [pc, #224]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	099b      	lsrs	r3, r3, #6
 80030d0:	2200      	movs	r2, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	4611      	mov	r1, r2
 80030d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030da:	623b      	str	r3, [r7, #32]
 80030dc:	2300      	movs	r3, #0
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
 80030e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030e4:	4642      	mov	r2, r8
 80030e6:	464b      	mov	r3, r9
 80030e8:	f04f 0000 	mov.w	r0, #0
 80030ec:	f04f 0100 	mov.w	r1, #0
 80030f0:	0159      	lsls	r1, r3, #5
 80030f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030f6:	0150      	lsls	r0, r2, #5
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4641      	mov	r1, r8
 80030fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003102:	4649      	mov	r1, r9
 8003104:	eb63 0b01 	sbc.w	fp, r3, r1
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003114:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003118:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800311c:	ebb2 040a 	subs.w	r4, r2, sl
 8003120:	eb63 050b 	sbc.w	r5, r3, fp
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	00eb      	lsls	r3, r5, #3
 800312e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003132:	00e2      	lsls	r2, r4, #3
 8003134:	4614      	mov	r4, r2
 8003136:	461d      	mov	r5, r3
 8003138:	4643      	mov	r3, r8
 800313a:	18e3      	adds	r3, r4, r3
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	464b      	mov	r3, r9
 8003140:	eb45 0303 	adc.w	r3, r5, r3
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003152:	4629      	mov	r1, r5
 8003154:	028b      	lsls	r3, r1, #10
 8003156:	4621      	mov	r1, r4
 8003158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800315c:	4621      	mov	r1, r4
 800315e:	028a      	lsls	r2, r1, #10
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003166:	2200      	movs	r2, #0
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	61fa      	str	r2, [r7, #28]
 800316c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003170:	f7fd f8b6 	bl	80002e0 <__aeabi_uldivmod>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4613      	mov	r3, r2
 800317a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	3301      	adds	r3, #1
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800318c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800318e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003196:	e002      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800319a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800319c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800319e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3750      	adds	r7, #80	; 0x50
 80031a4:	46bd      	mov	sp, r7
 80031a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800
 80031b0:	00f42400 	.word	0x00f42400
 80031b4:	007a1200 	.word	0x007a1200

080031b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <HAL_RCC_GetHCLKFreq+0x14>)
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000000 	.word	0x20000000

080031d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d4:	f7ff fff0 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0a9b      	lsrs	r3, r3, #10
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4903      	ldr	r1, [pc, #12]	; (80031f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	080058e0 	.word	0x080058e0

080031f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031fc:	f7ff ffdc 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	0b5b      	lsrs	r3, r3, #13
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4903      	ldr	r1, [pc, #12]	; (800321c <HAL_RCC_GetPCLK2Freq+0x24>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40023800 	.word	0x40023800
 800321c:	080058e0 	.word	0x080058e0

08003220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d012      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003248:	4b69      	ldr	r3, [pc, #420]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a68      	ldr	r2, [pc, #416]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003252:	6093      	str	r3, [r2, #8]
 8003254:	4b66      	ldr	r3, [pc, #408]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325c:	4964      	ldr	r1, [pc, #400]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800326a:	2301      	movs	r3, #1
 800326c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d017      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800327a:	4b5d      	ldr	r3, [pc, #372]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003280:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003288:	4959      	ldr	r1, [pc, #356]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003294:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003298:	d101      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800329a:	2301      	movs	r3, #1
 800329c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032a6:	2301      	movs	r3, #1
 80032a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d017      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032b6:	4b4e      	ldr	r3, [pc, #312]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	494a      	ldr	r1, [pc, #296]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d4:	d101      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032d6:	2301      	movs	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032e2:	2301      	movs	r3, #1
 80032e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032f2:	2301      	movs	r3, #1
 80032f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 808b 	beq.w	800341a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003304:	4b3a      	ldr	r3, [pc, #232]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	4a39      	ldr	r2, [pc, #228]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330e:	6413      	str	r3, [r2, #64]	; 0x40
 8003310:	4b37      	ldr	r3, [pc, #220]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800331c:	4b35      	ldr	r3, [pc, #212]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a34      	ldr	r2, [pc, #208]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003326:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003328:	f7fd ff7c 	bl	8001224 <HAL_GetTick>
 800332c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003330:	f7fd ff78 	bl	8001224 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	; 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e38f      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003342:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800334e:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003356:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d035      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	429a      	cmp	r2, r3
 800336a:	d02e      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800336c:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003374:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003376:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003382:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	4a1a      	ldr	r2, [pc, #104]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800338e:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003394:	4b16      	ldr	r3, [pc, #88]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d114      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fd ff40 	bl	8001224 <HAL_GetTick>
 80033a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a6:	e00a      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a8:	f7fd ff3c 	bl	8001224 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e351      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033be:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0ee      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033d6:	d111      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033e6:	400b      	ands	r3, r1
 80033e8:	4901      	ldr	r1, [pc, #4]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
 80033ee:	e00b      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40007000 	.word	0x40007000
 80033f8:	0ffffcff 	.word	0x0ffffcff
 80033fc:	4bac      	ldr	r3, [pc, #688]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4aab      	ldr	r2, [pc, #684]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003402:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003406:	6093      	str	r3, [r2, #8]
 8003408:	4ba9      	ldr	r3, [pc, #676]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800340a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003414:	49a6      	ldr	r1, [pc, #664]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003416:	4313      	orrs	r3, r2
 8003418:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	d010      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003426:	4ba2      	ldr	r3, [pc, #648]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800342c:	4aa0      	ldr	r2, [pc, #640]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003432:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003436:	4b9e      	ldr	r3, [pc, #632]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003438:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	499b      	ldr	r1, [pc, #620]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003454:	4b96      	ldr	r3, [pc, #600]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003462:	4993      	ldr	r1, [pc, #588]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003476:	4b8e      	ldr	r3, [pc, #568]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003484:	498a      	ldr	r1, [pc, #552]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003498:	4b85      	ldr	r3, [pc, #532]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a6:	4982      	ldr	r1, [pc, #520]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034ba:	4b7d      	ldr	r3, [pc, #500]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c8:	4979      	ldr	r1, [pc, #484]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034dc:	4b74      	ldr	r3, [pc, #464]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	f023 0203 	bic.w	r2, r3, #3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	4971      	ldr	r1, [pc, #452]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034fe:	4b6c      	ldr	r3, [pc, #432]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f023 020c 	bic.w	r2, r3, #12
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350c:	4968      	ldr	r1, [pc, #416]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003520:	4b63      	ldr	r3, [pc, #396]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352e:	4960      	ldr	r1, [pc, #384]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003542:	4b5b      	ldr	r3, [pc, #364]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003550:	4957      	ldr	r1, [pc, #348]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003564:	4b52      	ldr	r3, [pc, #328]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	494f      	ldr	r1, [pc, #316]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003586:	4b4a      	ldr	r3, [pc, #296]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	4946      	ldr	r1, [pc, #280]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035a8:	4b41      	ldr	r3, [pc, #260]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	493e      	ldr	r1, [pc, #248]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035ca:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d8:	4935      	ldr	r1, [pc, #212]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035ec:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035fa:	492d      	ldr	r1, [pc, #180]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d011      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800360e:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800361c:	4924      	ldr	r1, [pc, #144]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800362c:	d101      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800362e:	2301      	movs	r3, #1
 8003630:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800363e:	2301      	movs	r3, #1
 8003640:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800364e:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003654:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365c:	4914      	ldr	r1, [pc, #80]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00b      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003680:	490b      	ldr	r1, [pc, #44]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00f      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a4:	4902      	ldr	r1, [pc, #8]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036ac:	e002      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036c0:	4b8a      	ldr	r3, [pc, #552]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	4986      	ldr	r1, [pc, #536]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036e4:	4b81      	ldr	r3, [pc, #516]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f4:	497d      	ldr	r1, [pc, #500]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d006      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80d6 	beq.w	80038bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003710:	4b76      	ldr	r3, [pc, #472]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a75      	ldr	r2, [pc, #468]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003716:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800371a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371c:	f7fd fd82 	bl	8001224 <HAL_GetTick>
 8003720:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003724:	f7fd fd7e 	bl	8001224 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e195      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003736:	4b6d      	ldr	r3, [pc, #436]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d021      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	2b00      	cmp	r3, #0
 8003754:	d11d      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003756:	4b65      	ldr	r3, [pc, #404]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800375c:	0c1b      	lsrs	r3, r3, #16
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003764:	4b61      	ldr	r3, [pc, #388]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376a:	0e1b      	lsrs	r3, r3, #24
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	019a      	lsls	r2, r3, #6
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	041b      	lsls	r3, r3, #16
 800377c:	431a      	orrs	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	061b      	lsls	r3, r3, #24
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	071b      	lsls	r3, r3, #28
 800378a:	4958      	ldr	r1, [pc, #352]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d004      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d02e      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037bc:	d129      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037be:	4b4b      	ldr	r3, [pc, #300]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037cc:	4b47      	ldr	r3, [pc, #284]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d2:	0f1b      	lsrs	r3, r3, #28
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	019a      	lsls	r2, r3, #6
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	041b      	lsls	r3, r3, #16
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	061b      	lsls	r3, r3, #24
 80037ec:	431a      	orrs	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	071b      	lsls	r3, r3, #28
 80037f2:	493e      	ldr	r1, [pc, #248]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037fa:	4b3c      	ldr	r3, [pc, #240]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003800:	f023 021f 	bic.w	r2, r3, #31
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	3b01      	subs	r3, #1
 800380a:	4938      	ldr	r1, [pc, #224]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01d      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800381e:	4b33      	ldr	r3, [pc, #204]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003824:	0e1b      	lsrs	r3, r3, #24
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800382c:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003832:	0f1b      	lsrs	r3, r3, #28
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	019a      	lsls	r2, r3, #6
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	431a      	orrs	r2, r3
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	061b      	lsls	r3, r3, #24
 800384c:	431a      	orrs	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	071b      	lsls	r3, r3, #28
 8003852:	4926      	ldr	r1, [pc, #152]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d011      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	019a      	lsls	r2, r3, #6
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	041b      	lsls	r3, r3, #16
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	061b      	lsls	r3, r3, #24
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	071b      	lsls	r3, r3, #28
 8003882:	491a      	ldr	r1, [pc, #104]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800388a:	4b18      	ldr	r3, [pc, #96]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a17      	ldr	r2, [pc, #92]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003890:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003896:	f7fd fcc5 	bl	8001224 <HAL_GetTick>
 800389a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800389e:	f7fd fcc1 	bl	8001224 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b64      	cmp	r3, #100	; 0x64
 80038aa:	d901      	bls.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e0d8      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038b0:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	f040 80ce 	bne.w	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a08      	ldr	r2, [pc, #32]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d0:	f7fd fca8 	bl	8001224 <HAL_GetTick>
 80038d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038d6:	e00b      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038d8:	f7fd fca4 	bl	8001224 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b64      	cmp	r3, #100	; 0x64
 80038e4:	d904      	bls.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e0bb      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038f0:	4b5e      	ldr	r3, [pc, #376]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038fc:	d0ec      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800391a:	2b00      	cmp	r3, #0
 800391c:	d02e      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d12a      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003926:	4b51      	ldr	r3, [pc, #324]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003934:	4b4d      	ldr	r3, [pc, #308]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	0f1b      	lsrs	r3, r3, #28
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	019a      	lsls	r2, r3, #6
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	041b      	lsls	r3, r3, #16
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	061b      	lsls	r3, r3, #24
 8003954:	431a      	orrs	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	071b      	lsls	r3, r3, #28
 800395a:	4944      	ldr	r1, [pc, #272]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003962:	4b42      	ldr	r3, [pc, #264]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003968:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	493d      	ldr	r1, [pc, #244]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d022      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800398c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003990:	d11d      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003992:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	0e1b      	lsrs	r3, r3, #24
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039a0:	4b32      	ldr	r3, [pc, #200]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	0f1b      	lsrs	r3, r3, #28
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	019a      	lsls	r2, r3, #6
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	431a      	orrs	r2, r3
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	061b      	lsls	r3, r3, #24
 80039c0:	431a      	orrs	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	071b      	lsls	r3, r3, #28
 80039c6:	4929      	ldr	r1, [pc, #164]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d028      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039da:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e0:	0e1b      	lsrs	r3, r3, #24
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039e8:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	0c1b      	lsrs	r3, r3, #16
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	019a      	lsls	r2, r3, #6
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	041b      	lsls	r3, r3, #16
 8003a00:	431a      	orrs	r2, r3
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	061b      	lsls	r3, r3, #24
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	071b      	lsls	r3, r3, #28
 8003a0e:	4917      	ldr	r1, [pc, #92]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a16:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	4911      	ldr	r1, [pc, #68]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a2c:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0e      	ldr	r2, [pc, #56]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a38:	f7fd fbf4 	bl	8001224 <HAL_GetTick>
 8003a3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a40:	f7fd fbf0 	bl	8001224 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e007      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a5e:	d1ef      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800

08003a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e040      	b.n	8003b04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd f992 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2224      	movs	r2, #36	; 0x24
 8003a9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0201 	bic.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f8b0 	bl	8003c14 <UART_SetConfig>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e022      	b.n	8003b04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fb08 	bl	80040dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fb8f 	bl	8004220 <UART_CheckIdleState>
 8003b02:	4603      	mov	r3, r0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d171      	bne.n	8003c08 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_UART_Transmit+0x24>
 8003b2a:	88fb      	ldrh	r3, [r7, #6]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e06a      	b.n	8003c0a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2221      	movs	r2, #33	; 0x21
 8003b40:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b42:	f7fd fb6f 	bl	8001224 <HAL_GetTick>
 8003b46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	88fa      	ldrh	r2, [r7, #6]
 8003b4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	88fa      	ldrh	r2, [r7, #6]
 8003b54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b60:	d108      	bne.n	8003b74 <HAL_UART_Transmit+0x68>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d104      	bne.n	8003b74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	e003      	b.n	8003b7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b7c:	e02c      	b.n	8003bd8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2200      	movs	r2, #0
 8003b86:	2180      	movs	r1, #128	; 0x80
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fb96 	bl	80042ba <UART_WaitOnFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e038      	b.n	8003c0a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10b      	bne.n	8003bb6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	e007      	b.n	8003bc6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	781a      	ldrb	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1cc      	bne.n	8003b7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2200      	movs	r2, #0
 8003bec:	2140      	movs	r1, #64	; 0x40
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 fb63 	bl	80042ba <UART_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e005      	b.n	8003c0a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e000      	b.n	8003c0a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
  }
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	4ba6      	ldr	r3, [pc, #664]	; (8003ed8 <UART_SetConfig+0x2c4>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	6979      	ldr	r1, [r7, #20]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a94      	ldr	r2, [pc, #592]	; (8003edc <UART_SetConfig+0x2c8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d120      	bne.n	8003cd2 <UART_SetConfig+0xbe>
 8003c90:	4b93      	ldr	r3, [pc, #588]	; (8003ee0 <UART_SetConfig+0x2cc>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d816      	bhi.n	8003ccc <UART_SetConfig+0xb8>
 8003c9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <UART_SetConfig+0x90>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003cb5 	.word	0x08003cb5
 8003ca8:	08003cc1 	.word	0x08003cc1
 8003cac:	08003cbb 	.word	0x08003cbb
 8003cb0:	08003cc7 	.word	0x08003cc7
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	e150      	b.n	8003f5c <UART_SetConfig+0x348>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	77fb      	strb	r3, [r7, #31]
 8003cbe:	e14d      	b.n	8003f5c <UART_SetConfig+0x348>
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e14a      	b.n	8003f5c <UART_SetConfig+0x348>
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e147      	b.n	8003f5c <UART_SetConfig+0x348>
 8003ccc:	2310      	movs	r3, #16
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e144      	b.n	8003f5c <UART_SetConfig+0x348>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a83      	ldr	r2, [pc, #524]	; (8003ee4 <UART_SetConfig+0x2d0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d132      	bne.n	8003d42 <UART_SetConfig+0x12e>
 8003cdc:	4b80      	ldr	r3, [pc, #512]	; (8003ee0 <UART_SetConfig+0x2cc>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b0c      	cmp	r3, #12
 8003ce8:	d828      	bhi.n	8003d3c <UART_SetConfig+0x128>
 8003cea:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <UART_SetConfig+0xdc>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d25 	.word	0x08003d25
 8003cf4:	08003d3d 	.word	0x08003d3d
 8003cf8:	08003d3d 	.word	0x08003d3d
 8003cfc:	08003d3d 	.word	0x08003d3d
 8003d00:	08003d31 	.word	0x08003d31
 8003d04:	08003d3d 	.word	0x08003d3d
 8003d08:	08003d3d 	.word	0x08003d3d
 8003d0c:	08003d3d 	.word	0x08003d3d
 8003d10:	08003d2b 	.word	0x08003d2b
 8003d14:	08003d3d 	.word	0x08003d3d
 8003d18:	08003d3d 	.word	0x08003d3d
 8003d1c:	08003d3d 	.word	0x08003d3d
 8003d20:	08003d37 	.word	0x08003d37
 8003d24:	2300      	movs	r3, #0
 8003d26:	77fb      	strb	r3, [r7, #31]
 8003d28:	e118      	b.n	8003f5c <UART_SetConfig+0x348>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e115      	b.n	8003f5c <UART_SetConfig+0x348>
 8003d30:	2304      	movs	r3, #4
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e112      	b.n	8003f5c <UART_SetConfig+0x348>
 8003d36:	2308      	movs	r3, #8
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e10f      	b.n	8003f5c <UART_SetConfig+0x348>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e10c      	b.n	8003f5c <UART_SetConfig+0x348>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a68      	ldr	r2, [pc, #416]	; (8003ee8 <UART_SetConfig+0x2d4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d120      	bne.n	8003d8e <UART_SetConfig+0x17a>
 8003d4c:	4b64      	ldr	r3, [pc, #400]	; (8003ee0 <UART_SetConfig+0x2cc>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d56:	2b30      	cmp	r3, #48	; 0x30
 8003d58:	d013      	beq.n	8003d82 <UART_SetConfig+0x16e>
 8003d5a:	2b30      	cmp	r3, #48	; 0x30
 8003d5c:	d814      	bhi.n	8003d88 <UART_SetConfig+0x174>
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d009      	beq.n	8003d76 <UART_SetConfig+0x162>
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d810      	bhi.n	8003d88 <UART_SetConfig+0x174>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <UART_SetConfig+0x15c>
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	d006      	beq.n	8003d7c <UART_SetConfig+0x168>
 8003d6e:	e00b      	b.n	8003d88 <UART_SetConfig+0x174>
 8003d70:	2300      	movs	r3, #0
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e0f2      	b.n	8003f5c <UART_SetConfig+0x348>
 8003d76:	2302      	movs	r3, #2
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e0ef      	b.n	8003f5c <UART_SetConfig+0x348>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e0ec      	b.n	8003f5c <UART_SetConfig+0x348>
 8003d82:	2308      	movs	r3, #8
 8003d84:	77fb      	strb	r3, [r7, #31]
 8003d86:	e0e9      	b.n	8003f5c <UART_SetConfig+0x348>
 8003d88:	2310      	movs	r3, #16
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e0e6      	b.n	8003f5c <UART_SetConfig+0x348>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a56      	ldr	r2, [pc, #344]	; (8003eec <UART_SetConfig+0x2d8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d120      	bne.n	8003dda <UART_SetConfig+0x1c6>
 8003d98:	4b51      	ldr	r3, [pc, #324]	; (8003ee0 <UART_SetConfig+0x2cc>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003da2:	2bc0      	cmp	r3, #192	; 0xc0
 8003da4:	d013      	beq.n	8003dce <UART_SetConfig+0x1ba>
 8003da6:	2bc0      	cmp	r3, #192	; 0xc0
 8003da8:	d814      	bhi.n	8003dd4 <UART_SetConfig+0x1c0>
 8003daa:	2b80      	cmp	r3, #128	; 0x80
 8003dac:	d009      	beq.n	8003dc2 <UART_SetConfig+0x1ae>
 8003dae:	2b80      	cmp	r3, #128	; 0x80
 8003db0:	d810      	bhi.n	8003dd4 <UART_SetConfig+0x1c0>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <UART_SetConfig+0x1a8>
 8003db6:	2b40      	cmp	r3, #64	; 0x40
 8003db8:	d006      	beq.n	8003dc8 <UART_SetConfig+0x1b4>
 8003dba:	e00b      	b.n	8003dd4 <UART_SetConfig+0x1c0>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e0cc      	b.n	8003f5c <UART_SetConfig+0x348>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e0c9      	b.n	8003f5c <UART_SetConfig+0x348>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e0c6      	b.n	8003f5c <UART_SetConfig+0x348>
 8003dce:	2308      	movs	r3, #8
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e0c3      	b.n	8003f5c <UART_SetConfig+0x348>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e0c0      	b.n	8003f5c <UART_SetConfig+0x348>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a44      	ldr	r2, [pc, #272]	; (8003ef0 <UART_SetConfig+0x2dc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d125      	bne.n	8003e30 <UART_SetConfig+0x21c>
 8003de4:	4b3e      	ldr	r3, [pc, #248]	; (8003ee0 <UART_SetConfig+0x2cc>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df2:	d017      	beq.n	8003e24 <UART_SetConfig+0x210>
 8003df4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df8:	d817      	bhi.n	8003e2a <UART_SetConfig+0x216>
 8003dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfe:	d00b      	beq.n	8003e18 <UART_SetConfig+0x204>
 8003e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e04:	d811      	bhi.n	8003e2a <UART_SetConfig+0x216>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <UART_SetConfig+0x1fe>
 8003e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0e:	d006      	beq.n	8003e1e <UART_SetConfig+0x20a>
 8003e10:	e00b      	b.n	8003e2a <UART_SetConfig+0x216>
 8003e12:	2300      	movs	r3, #0
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	e0a1      	b.n	8003f5c <UART_SetConfig+0x348>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	77fb      	strb	r3, [r7, #31]
 8003e1c:	e09e      	b.n	8003f5c <UART_SetConfig+0x348>
 8003e1e:	2304      	movs	r3, #4
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e09b      	b.n	8003f5c <UART_SetConfig+0x348>
 8003e24:	2308      	movs	r3, #8
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e098      	b.n	8003f5c <UART_SetConfig+0x348>
 8003e2a:	2310      	movs	r3, #16
 8003e2c:	77fb      	strb	r3, [r7, #31]
 8003e2e:	e095      	b.n	8003f5c <UART_SetConfig+0x348>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2f      	ldr	r2, [pc, #188]	; (8003ef4 <UART_SetConfig+0x2e0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d125      	bne.n	8003e86 <UART_SetConfig+0x272>
 8003e3a:	4b29      	ldr	r3, [pc, #164]	; (8003ee0 <UART_SetConfig+0x2cc>)
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e48:	d017      	beq.n	8003e7a <UART_SetConfig+0x266>
 8003e4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e4e:	d817      	bhi.n	8003e80 <UART_SetConfig+0x26c>
 8003e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e54:	d00b      	beq.n	8003e6e <UART_SetConfig+0x25a>
 8003e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e5a:	d811      	bhi.n	8003e80 <UART_SetConfig+0x26c>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <UART_SetConfig+0x254>
 8003e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e64:	d006      	beq.n	8003e74 <UART_SetConfig+0x260>
 8003e66:	e00b      	b.n	8003e80 <UART_SetConfig+0x26c>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e076      	b.n	8003f5c <UART_SetConfig+0x348>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e073      	b.n	8003f5c <UART_SetConfig+0x348>
 8003e74:	2304      	movs	r3, #4
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e070      	b.n	8003f5c <UART_SetConfig+0x348>
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e06d      	b.n	8003f5c <UART_SetConfig+0x348>
 8003e80:	2310      	movs	r3, #16
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	e06a      	b.n	8003f5c <UART_SetConfig+0x348>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1b      	ldr	r2, [pc, #108]	; (8003ef8 <UART_SetConfig+0x2e4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d138      	bne.n	8003f02 <UART_SetConfig+0x2ee>
 8003e90:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <UART_SetConfig+0x2cc>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003e9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e9e:	d017      	beq.n	8003ed0 <UART_SetConfig+0x2bc>
 8003ea0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ea4:	d82a      	bhi.n	8003efc <UART_SetConfig+0x2e8>
 8003ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eaa:	d00b      	beq.n	8003ec4 <UART_SetConfig+0x2b0>
 8003eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb0:	d824      	bhi.n	8003efc <UART_SetConfig+0x2e8>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <UART_SetConfig+0x2aa>
 8003eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eba:	d006      	beq.n	8003eca <UART_SetConfig+0x2b6>
 8003ebc:	e01e      	b.n	8003efc <UART_SetConfig+0x2e8>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	77fb      	strb	r3, [r7, #31]
 8003ec2:	e04b      	b.n	8003f5c <UART_SetConfig+0x348>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e048      	b.n	8003f5c <UART_SetConfig+0x348>
 8003eca:	2304      	movs	r3, #4
 8003ecc:	77fb      	strb	r3, [r7, #31]
 8003ece:	e045      	b.n	8003f5c <UART_SetConfig+0x348>
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	77fb      	strb	r3, [r7, #31]
 8003ed4:	e042      	b.n	8003f5c <UART_SetConfig+0x348>
 8003ed6:	bf00      	nop
 8003ed8:	efff69f3 	.word	0xefff69f3
 8003edc:	40011000 	.word	0x40011000
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40004400 	.word	0x40004400
 8003ee8:	40004800 	.word	0x40004800
 8003eec:	40004c00 	.word	0x40004c00
 8003ef0:	40005000 	.word	0x40005000
 8003ef4:	40011400 	.word	0x40011400
 8003ef8:	40007800 	.word	0x40007800
 8003efc:	2310      	movs	r3, #16
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e02c      	b.n	8003f5c <UART_SetConfig+0x348>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a72      	ldr	r2, [pc, #456]	; (80040d0 <UART_SetConfig+0x4bc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d125      	bne.n	8003f58 <UART_SetConfig+0x344>
 8003f0c:	4b71      	ldr	r3, [pc, #452]	; (80040d4 <UART_SetConfig+0x4c0>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f1a:	d017      	beq.n	8003f4c <UART_SetConfig+0x338>
 8003f1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f20:	d817      	bhi.n	8003f52 <UART_SetConfig+0x33e>
 8003f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f26:	d00b      	beq.n	8003f40 <UART_SetConfig+0x32c>
 8003f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2c:	d811      	bhi.n	8003f52 <UART_SetConfig+0x33e>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <UART_SetConfig+0x326>
 8003f32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f36:	d006      	beq.n	8003f46 <UART_SetConfig+0x332>
 8003f38:	e00b      	b.n	8003f52 <UART_SetConfig+0x33e>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	77fb      	strb	r3, [r7, #31]
 8003f3e:	e00d      	b.n	8003f5c <UART_SetConfig+0x348>
 8003f40:	2302      	movs	r3, #2
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	e00a      	b.n	8003f5c <UART_SetConfig+0x348>
 8003f46:	2304      	movs	r3, #4
 8003f48:	77fb      	strb	r3, [r7, #31]
 8003f4a:	e007      	b.n	8003f5c <UART_SetConfig+0x348>
 8003f4c:	2308      	movs	r3, #8
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e004      	b.n	8003f5c <UART_SetConfig+0x348>
 8003f52:	2310      	movs	r3, #16
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	e001      	b.n	8003f5c <UART_SetConfig+0x348>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f64:	d15b      	bne.n	800401e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003f66:	7ffb      	ldrb	r3, [r7, #31]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d828      	bhi.n	8003fbe <UART_SetConfig+0x3aa>
 8003f6c:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <UART_SetConfig+0x360>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003f99 	.word	0x08003f99
 8003f78:	08003fa1 	.word	0x08003fa1
 8003f7c:	08003fa9 	.word	0x08003fa9
 8003f80:	08003fbf 	.word	0x08003fbf
 8003f84:	08003faf 	.word	0x08003faf
 8003f88:	08003fbf 	.word	0x08003fbf
 8003f8c:	08003fbf 	.word	0x08003fbf
 8003f90:	08003fbf 	.word	0x08003fbf
 8003f94:	08003fb7 	.word	0x08003fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f98:	f7ff f91a 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 8003f9c:	61b8      	str	r0, [r7, #24]
        break;
 8003f9e:	e013      	b.n	8003fc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa0:	f7ff f92a 	bl	80031f8 <HAL_RCC_GetPCLK2Freq>
 8003fa4:	61b8      	str	r0, [r7, #24]
        break;
 8003fa6:	e00f      	b.n	8003fc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fa8:	4b4b      	ldr	r3, [pc, #300]	; (80040d8 <UART_SetConfig+0x4c4>)
 8003faa:	61bb      	str	r3, [r7, #24]
        break;
 8003fac:	e00c      	b.n	8003fc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fae:	f7fe fffd 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8003fb2:	61b8      	str	r0, [r7, #24]
        break;
 8003fb4:	e008      	b.n	8003fc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fba:	61bb      	str	r3, [r7, #24]
        break;
 8003fbc:	e004      	b.n	8003fc8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	77bb      	strb	r3, [r7, #30]
        break;
 8003fc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d074      	beq.n	80040b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	005a      	lsls	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	085b      	lsrs	r3, r3, #1
 8003fd8:	441a      	add	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	2b0f      	cmp	r3, #15
 8003fe8:	d916      	bls.n	8004018 <UART_SetConfig+0x404>
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff0:	d212      	bcs.n	8004018 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	f023 030f 	bic.w	r3, r3, #15
 8003ffa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	b29b      	uxth	r3, r3
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	b29a      	uxth	r2, r3
 8004008:	89fb      	ldrh	r3, [r7, #14]
 800400a:	4313      	orrs	r3, r2
 800400c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	89fa      	ldrh	r2, [r7, #14]
 8004014:	60da      	str	r2, [r3, #12]
 8004016:	e04f      	b.n	80040b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	77bb      	strb	r3, [r7, #30]
 800401c:	e04c      	b.n	80040b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800401e:	7ffb      	ldrb	r3, [r7, #31]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d828      	bhi.n	8004076 <UART_SetConfig+0x462>
 8004024:	a201      	add	r2, pc, #4	; (adr r2, 800402c <UART_SetConfig+0x418>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	08004051 	.word	0x08004051
 8004030:	08004059 	.word	0x08004059
 8004034:	08004061 	.word	0x08004061
 8004038:	08004077 	.word	0x08004077
 800403c:	08004067 	.word	0x08004067
 8004040:	08004077 	.word	0x08004077
 8004044:	08004077 	.word	0x08004077
 8004048:	08004077 	.word	0x08004077
 800404c:	0800406f 	.word	0x0800406f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004050:	f7ff f8be 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 8004054:	61b8      	str	r0, [r7, #24]
        break;
 8004056:	e013      	b.n	8004080 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004058:	f7ff f8ce 	bl	80031f8 <HAL_RCC_GetPCLK2Freq>
 800405c:	61b8      	str	r0, [r7, #24]
        break;
 800405e:	e00f      	b.n	8004080 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004060:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <UART_SetConfig+0x4c4>)
 8004062:	61bb      	str	r3, [r7, #24]
        break;
 8004064:	e00c      	b.n	8004080 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004066:	f7fe ffa1 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 800406a:	61b8      	str	r0, [r7, #24]
        break;
 800406c:	e008      	b.n	8004080 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800406e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004072:	61bb      	str	r3, [r7, #24]
        break;
 8004074:	e004      	b.n	8004080 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	77bb      	strb	r3, [r7, #30]
        break;
 800407e:	bf00      	nop
    }

    if (pclk != 0U)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d018      	beq.n	80040b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	085a      	lsrs	r2, r3, #1
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	441a      	add	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b0f      	cmp	r3, #15
 800409e:	d909      	bls.n	80040b4 <UART_SetConfig+0x4a0>
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a6:	d205      	bcs.n	80040b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	e001      	b.n	80040b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40007c00 	.word	0x40007c00
 80040d4:	40023800 	.word	0x40023800
 80040d8:	00f42400 	.word	0x00f42400

080040dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01a      	beq.n	80041f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041da:	d10a      	bne.n	80041f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	605a      	str	r2, [r3, #4]
  }
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af02      	add	r7, sp, #8
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004230:	f7fc fff8 	bl	8001224 <HAL_GetTick>
 8004234:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b08      	cmp	r3, #8
 8004242:	d10e      	bne.n	8004262 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f831 	bl	80042ba <UART_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e027      	b.n	80042b2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b04      	cmp	r3, #4
 800426e:	d10e      	bne.n	800428e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f81b 	bl	80042ba <UART_WaitOnFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e011      	b.n	80042b2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b09c      	sub	sp, #112	; 0x70
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	603b      	str	r3, [r7, #0]
 80042c6:	4613      	mov	r3, r2
 80042c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ca:	e0a7      	b.n	800441c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d2:	f000 80a3 	beq.w	800441c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d6:	f7fc ffa5 	bl	8001224 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d302      	bcc.n	80042ec <UART_WaitOnFlagUntilTimeout+0x32>
 80042e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d13f      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004300:	667b      	str	r3, [r7, #100]	; 0x64
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800430a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800430c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004310:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1e6      	bne.n	80042ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3308      	adds	r3, #8
 8004324:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	f023 0301 	bic.w	r3, r3, #1
 8004334:	663b      	str	r3, [r7, #96]	; 0x60
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3308      	adds	r3, #8
 800433c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800433e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004340:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800434c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e5      	bne.n	800431e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e068      	b.n	800443e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d050      	beq.n	800441c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004388:	d148      	bne.n	800441c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004392:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b2:	637b      	str	r3, [r7, #52]	; 0x34
 80043b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e6      	bne.n	8004394 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3308      	adds	r3, #8
 80043cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	613b      	str	r3, [r7, #16]
   return(result);
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f023 0301 	bic.w	r3, r3, #1
 80043dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3308      	adds	r3, #8
 80043e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043e6:	623a      	str	r2, [r7, #32]
 80043e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	69f9      	ldr	r1, [r7, #28]
 80043ec:	6a3a      	ldr	r2, [r7, #32]
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e5      	bne.n	80043c6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e010      	b.n	800443e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69da      	ldr	r2, [r3, #28]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4013      	ands	r3, r2
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	429a      	cmp	r2, r3
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	429a      	cmp	r2, r3
 8004438:	f43f af48 	beq.w	80042cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3770      	adds	r7, #112	; 0x70
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004448:	b084      	sub	sp, #16
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	f107 001c 	add.w	r0, r7, #28
 8004456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	2b01      	cmp	r3, #1
 800445e:	d120      	bne.n	80044a2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004464:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <USB_CoreInit+0xac>)
 8004472:	4013      	ands	r3, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004486:	2b01      	cmp	r3, #1
 8004488:	d105      	bne.n	8004496 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fa96 	bl	80049c8 <USB_CoreReset>
 800449c:	4603      	mov	r3, r0
 800449e:	73fb      	strb	r3, [r7, #15]
 80044a0:	e010      	b.n	80044c4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fa8a 	bl	80049c8 <USB_CoreReset>
 80044b4:	4603      	mov	r3, r0
 80044b6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d10b      	bne.n	80044e2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f043 0206 	orr.w	r2, r3, #6
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f043 0220 	orr.w	r2, r3, #32
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044ee:	b004      	add	sp, #16
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	ffbdffbf 	.word	0xffbdffbf

080044f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f023 0201 	bic.w	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	460b      	mov	r3, r1
 8004524:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d115      	bne.n	8004568 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004548:	2001      	movs	r0, #1
 800454a:	f7fc fe77 	bl	800123c <HAL_Delay>
      ms++;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3301      	adds	r3, #1
 8004552:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 fa29 	bl	80049ac <USB_GetMode>
 800455a:	4603      	mov	r3, r0
 800455c:	2b01      	cmp	r3, #1
 800455e:	d01e      	beq.n	800459e <USB_SetCurrentMode+0x84>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b31      	cmp	r3, #49	; 0x31
 8004564:	d9f0      	bls.n	8004548 <USB_SetCurrentMode+0x2e>
 8004566:	e01a      	b.n	800459e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d115      	bne.n	800459a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800457a:	2001      	movs	r0, #1
 800457c:	f7fc fe5e 	bl	800123c <HAL_Delay>
      ms++;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3301      	adds	r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fa10 	bl	80049ac <USB_GetMode>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <USB_SetCurrentMode+0x84>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b31      	cmp	r3, #49	; 0x31
 8004596:	d9f0      	bls.n	800457a <USB_SetCurrentMode+0x60>
 8004598:	e001      	b.n	800459e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e005      	b.n	80045aa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b32      	cmp	r3, #50	; 0x32
 80045a2:	d101      	bne.n	80045a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045b4:	b084      	sub	sp, #16
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b086      	sub	sp, #24
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	e009      	b.n	80045e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	3340      	adds	r3, #64	; 0x40
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	2200      	movs	r2, #0
 80045e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	3301      	adds	r3, #1
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b0e      	cmp	r3, #14
 80045ec:	d9f2      	bls.n	80045d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d11c      	bne.n	800462e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004602:	f043 0302 	orr.w	r3, r3, #2
 8004606:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	e005      	b.n	800463a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004640:	461a      	mov	r2, r3
 8004642:	2300      	movs	r3, #0
 8004644:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464c:	4619      	mov	r1, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004654:	461a      	mov	r2, r3
 8004656:	680b      	ldr	r3, [r1, #0]
 8004658:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800465a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465c:	2b01      	cmp	r3, #1
 800465e:	d10c      	bne.n	800467a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d104      	bne.n	8004670 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004666:	2100      	movs	r1, #0
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f965 	bl	8004938 <USB_SetDevSpeed>
 800466e:	e008      	b.n	8004682 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004670:	2101      	movs	r1, #1
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f960 	bl	8004938 <USB_SetDevSpeed>
 8004678:	e003      	b.n	8004682 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800467a:	2103      	movs	r1, #3
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f95b 	bl	8004938 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004682:	2110      	movs	r1, #16
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f8f3 	bl	8004870 <USB_FlushTxFifo>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f91f 	bl	80048d8 <USB_FlushRxFifo>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046aa:	461a      	mov	r2, r3
 80046ac:	2300      	movs	r3, #0
 80046ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b6:	461a      	mov	r2, r3
 80046b8:	2300      	movs	r3, #0
 80046ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c2:	461a      	mov	r2, r3
 80046c4:	2300      	movs	r3, #0
 80046c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046c8:	2300      	movs	r3, #0
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	e043      	b.n	8004756 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046e4:	d118      	bne.n	8004718 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10a      	bne.n	8004702 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f8:	461a      	mov	r2, r3
 80046fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	e013      	b.n	800472a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470e:	461a      	mov	r2, r3
 8004710:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	e008      	b.n	800472a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	461a      	mov	r2, r3
 8004726:	2300      	movs	r3, #0
 8004728:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004736:	461a      	mov	r2, r3
 8004738:	2300      	movs	r3, #0
 800473a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004748:	461a      	mov	r2, r3
 800474a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800474e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	3301      	adds	r3, #1
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	429a      	cmp	r2, r3
 800475c:	d3b7      	bcc.n	80046ce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800475e:	2300      	movs	r3, #0
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	e043      	b.n	80047ec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800477a:	d118      	bne.n	80047ae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10a      	bne.n	8004798 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478e:	461a      	mov	r2, r3
 8004790:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	e013      	b.n	80047c0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a4:	461a      	mov	r2, r3
 80047a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	e008      	b.n	80047c0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ba:	461a      	mov	r2, r3
 80047bc:	2300      	movs	r3, #0
 80047be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047cc:	461a      	mov	r2, r3
 80047ce:	2300      	movs	r3, #0
 80047d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047de:	461a      	mov	r2, r3
 80047e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	3301      	adds	r3, #1
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d3b7      	bcc.n	8004764 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004806:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004814:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	2b00      	cmp	r3, #0
 800481a:	d105      	bne.n	8004828 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f043 0210 	orr.w	r2, r3, #16
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <USB_DevInit+0x2b4>)
 800482e:	4313      	orrs	r3, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f043 0208 	orr.w	r2, r3, #8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004848:	2b01      	cmp	r3, #1
 800484a:	d105      	bne.n	8004858 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	4b06      	ldr	r3, [pc, #24]	; (800486c <USB_DevInit+0x2b8>)
 8004852:	4313      	orrs	r3, r2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004858:	7dfb      	ldrb	r3, [r7, #23]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004864:	b004      	add	sp, #16
 8004866:	4770      	bx	lr
 8004868:	803c3800 	.word	0x803c3800
 800486c:	40000004 	.word	0x40000004

08004870 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3301      	adds	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4a13      	ldr	r2, [pc, #76]	; (80048d4 <USB_FlushTxFifo+0x64>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d901      	bls.n	8004890 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e01b      	b.n	80048c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	daf2      	bge.n	800487e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	019b      	lsls	r3, r3, #6
 80048a0:	f043 0220 	orr.w	r2, r3, #32
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3301      	adds	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <USB_FlushTxFifo+0x64>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e006      	b.n	80048c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d0f0      	beq.n	80048a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	00030d40 	.word	0x00030d40

080048d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3301      	adds	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4a11      	ldr	r2, [pc, #68]	; (8004934 <USB_FlushRxFifo+0x5c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e018      	b.n	8004928 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	daf2      	bge.n	80048e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2210      	movs	r2, #16
 8004906:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3301      	adds	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4a08      	ldr	r2, [pc, #32]	; (8004934 <USB_FlushRxFifo+0x5c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e006      	b.n	8004928 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b10      	cmp	r3, #16
 8004924:	d0f0      	beq.n	8004908 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	00030d40 	.word	0x00030d40

08004938 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	68f9      	ldr	r1, [r7, #12]
 8004954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004958:	4313      	orrs	r3, r2
 800495a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800496a:	b480      	push	{r7}
 800496c:	b085      	sub	sp, #20
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004984:	f023 0303 	bic.w	r3, r3, #3
 8004988:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004998:	f043 0302 	orr.w	r3, r3, #2
 800499c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f003 0301 	and.w	r3, r3, #1
}
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3301      	adds	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a13      	ldr	r2, [pc, #76]	; (8004a2c <USB_CoreReset+0x64>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e01b      	b.n	8004a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	daf2      	bge.n	80049d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f043 0201 	orr.w	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3301      	adds	r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <USB_CoreReset+0x64>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d901      	bls.n	8004a10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e006      	b.n	8004a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d0f0      	beq.n	80049fe <USB_CoreReset+0x36>

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	00030d40 	.word	0x00030d40

08004a30 <std>:
 8004a30:	2300      	movs	r3, #0
 8004a32:	b510      	push	{r4, lr}
 8004a34:	4604      	mov	r4, r0
 8004a36:	e9c0 3300 	strd	r3, r3, [r0]
 8004a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a3e:	6083      	str	r3, [r0, #8]
 8004a40:	8181      	strh	r1, [r0, #12]
 8004a42:	6643      	str	r3, [r0, #100]	; 0x64
 8004a44:	81c2      	strh	r2, [r0, #14]
 8004a46:	6183      	str	r3, [r0, #24]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	305c      	adds	r0, #92	; 0x5c
 8004a4e:	f000 f8c3 	bl	8004bd8 <memset>
 8004a52:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <std+0x58>)
 8004a54:	6263      	str	r3, [r4, #36]	; 0x24
 8004a56:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <std+0x5c>)
 8004a58:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <std+0x60>)
 8004a5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <std+0x64>)
 8004a60:	6323      	str	r3, [r4, #48]	; 0x30
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <std+0x68>)
 8004a64:	6224      	str	r4, [r4, #32]
 8004a66:	429c      	cmp	r4, r3
 8004a68:	d006      	beq.n	8004a78 <std+0x48>
 8004a6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004a6e:	4294      	cmp	r4, r2
 8004a70:	d002      	beq.n	8004a78 <std+0x48>
 8004a72:	33d0      	adds	r3, #208	; 0xd0
 8004a74:	429c      	cmp	r4, r3
 8004a76:	d105      	bne.n	8004a84 <std+0x54>
 8004a78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a80:	f000 b8dc 	b.w	8004c3c <__retarget_lock_init_recursive>
 8004a84:	bd10      	pop	{r4, pc}
 8004a86:	bf00      	nop
 8004a88:	0800549d 	.word	0x0800549d
 8004a8c:	080054bf 	.word	0x080054bf
 8004a90:	080054f7 	.word	0x080054f7
 8004a94:	0800551b 	.word	0x0800551b
 8004a98:	20000874 	.word	0x20000874

08004a9c <stdio_exit_handler>:
 8004a9c:	4a02      	ldr	r2, [pc, #8]	; (8004aa8 <stdio_exit_handler+0xc>)
 8004a9e:	4903      	ldr	r1, [pc, #12]	; (8004aac <stdio_exit_handler+0x10>)
 8004aa0:	4803      	ldr	r0, [pc, #12]	; (8004ab0 <stdio_exit_handler+0x14>)
 8004aa2:	f000 b869 	b.w	8004b78 <_fwalk_sglue>
 8004aa6:	bf00      	nop
 8004aa8:	2000000c 	.word	0x2000000c
 8004aac:	08005435 	.word	0x08005435
 8004ab0:	20000018 	.word	0x20000018

08004ab4 <cleanup_stdio>:
 8004ab4:	6841      	ldr	r1, [r0, #4]
 8004ab6:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <cleanup_stdio+0x34>)
 8004ab8:	4299      	cmp	r1, r3
 8004aba:	b510      	push	{r4, lr}
 8004abc:	4604      	mov	r4, r0
 8004abe:	d001      	beq.n	8004ac4 <cleanup_stdio+0x10>
 8004ac0:	f000 fcb8 	bl	8005434 <_fflush_r>
 8004ac4:	68a1      	ldr	r1, [r4, #8]
 8004ac6:	4b09      	ldr	r3, [pc, #36]	; (8004aec <cleanup_stdio+0x38>)
 8004ac8:	4299      	cmp	r1, r3
 8004aca:	d002      	beq.n	8004ad2 <cleanup_stdio+0x1e>
 8004acc:	4620      	mov	r0, r4
 8004ace:	f000 fcb1 	bl	8005434 <_fflush_r>
 8004ad2:	68e1      	ldr	r1, [r4, #12]
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <cleanup_stdio+0x3c>)
 8004ad6:	4299      	cmp	r1, r3
 8004ad8:	d004      	beq.n	8004ae4 <cleanup_stdio+0x30>
 8004ada:	4620      	mov	r0, r4
 8004adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ae0:	f000 bca8 	b.w	8005434 <_fflush_r>
 8004ae4:	bd10      	pop	{r4, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000874 	.word	0x20000874
 8004aec:	200008dc 	.word	0x200008dc
 8004af0:	20000944 	.word	0x20000944

08004af4 <global_stdio_init.part.0>:
 8004af4:	b510      	push	{r4, lr}
 8004af6:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <global_stdio_init.part.0+0x30>)
 8004af8:	4c0b      	ldr	r4, [pc, #44]	; (8004b28 <global_stdio_init.part.0+0x34>)
 8004afa:	4a0c      	ldr	r2, [pc, #48]	; (8004b2c <global_stdio_init.part.0+0x38>)
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	4620      	mov	r0, r4
 8004b00:	2200      	movs	r2, #0
 8004b02:	2104      	movs	r1, #4
 8004b04:	f7ff ff94 	bl	8004a30 <std>
 8004b08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	2109      	movs	r1, #9
 8004b10:	f7ff ff8e 	bl	8004a30 <std>
 8004b14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004b18:	2202      	movs	r2, #2
 8004b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b1e:	2112      	movs	r1, #18
 8004b20:	f7ff bf86 	b.w	8004a30 <std>
 8004b24:	200009ac 	.word	0x200009ac
 8004b28:	20000874 	.word	0x20000874
 8004b2c:	08004a9d 	.word	0x08004a9d

08004b30 <__sfp_lock_acquire>:
 8004b30:	4801      	ldr	r0, [pc, #4]	; (8004b38 <__sfp_lock_acquire+0x8>)
 8004b32:	f000 b884 	b.w	8004c3e <__retarget_lock_acquire_recursive>
 8004b36:	bf00      	nop
 8004b38:	200009b1 	.word	0x200009b1

08004b3c <__sfp_lock_release>:
 8004b3c:	4801      	ldr	r0, [pc, #4]	; (8004b44 <__sfp_lock_release+0x8>)
 8004b3e:	f000 b87f 	b.w	8004c40 <__retarget_lock_release_recursive>
 8004b42:	bf00      	nop
 8004b44:	200009b1 	.word	0x200009b1

08004b48 <__sinit>:
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	f7ff fff0 	bl	8004b30 <__sfp_lock_acquire>
 8004b50:	6a23      	ldr	r3, [r4, #32]
 8004b52:	b11b      	cbz	r3, 8004b5c <__sinit+0x14>
 8004b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b58:	f7ff bff0 	b.w	8004b3c <__sfp_lock_release>
 8004b5c:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <__sinit+0x28>)
 8004b5e:	6223      	str	r3, [r4, #32]
 8004b60:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <__sinit+0x2c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1f5      	bne.n	8004b54 <__sinit+0xc>
 8004b68:	f7ff ffc4 	bl	8004af4 <global_stdio_init.part.0>
 8004b6c:	e7f2      	b.n	8004b54 <__sinit+0xc>
 8004b6e:	bf00      	nop
 8004b70:	08004ab5 	.word	0x08004ab5
 8004b74:	200009ac 	.word	0x200009ac

08004b78 <_fwalk_sglue>:
 8004b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b7c:	4607      	mov	r7, r0
 8004b7e:	4688      	mov	r8, r1
 8004b80:	4614      	mov	r4, r2
 8004b82:	2600      	movs	r6, #0
 8004b84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b88:	f1b9 0901 	subs.w	r9, r9, #1
 8004b8c:	d505      	bpl.n	8004b9a <_fwalk_sglue+0x22>
 8004b8e:	6824      	ldr	r4, [r4, #0]
 8004b90:	2c00      	cmp	r4, #0
 8004b92:	d1f7      	bne.n	8004b84 <_fwalk_sglue+0xc>
 8004b94:	4630      	mov	r0, r6
 8004b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b9a:	89ab      	ldrh	r3, [r5, #12]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d907      	bls.n	8004bb0 <_fwalk_sglue+0x38>
 8004ba0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	d003      	beq.n	8004bb0 <_fwalk_sglue+0x38>
 8004ba8:	4629      	mov	r1, r5
 8004baa:	4638      	mov	r0, r7
 8004bac:	47c0      	blx	r8
 8004bae:	4306      	orrs	r6, r0
 8004bb0:	3568      	adds	r5, #104	; 0x68
 8004bb2:	e7e9      	b.n	8004b88 <_fwalk_sglue+0x10>

08004bb4 <iprintf>:
 8004bb4:	b40f      	push	{r0, r1, r2, r3}
 8004bb6:	b507      	push	{r0, r1, r2, lr}
 8004bb8:	4906      	ldr	r1, [pc, #24]	; (8004bd4 <iprintf+0x20>)
 8004bba:	ab04      	add	r3, sp, #16
 8004bbc:	6808      	ldr	r0, [r1, #0]
 8004bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bc2:	6881      	ldr	r1, [r0, #8]
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	f000 f865 	bl	8004c94 <_vfiprintf_r>
 8004bca:	b003      	add	sp, #12
 8004bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bd0:	b004      	add	sp, #16
 8004bd2:	4770      	bx	lr
 8004bd4:	20000064 	.word	0x20000064

08004bd8 <memset>:
 8004bd8:	4402      	add	r2, r0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d100      	bne.n	8004be2 <memset+0xa>
 8004be0:	4770      	bx	lr
 8004be2:	f803 1b01 	strb.w	r1, [r3], #1
 8004be6:	e7f9      	b.n	8004bdc <memset+0x4>

08004be8 <__errno>:
 8004be8:	4b01      	ldr	r3, [pc, #4]	; (8004bf0 <__errno+0x8>)
 8004bea:	6818      	ldr	r0, [r3, #0]
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000064 	.word	0x20000064

08004bf4 <__libc_init_array>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	4d0d      	ldr	r5, [pc, #52]	; (8004c2c <__libc_init_array+0x38>)
 8004bf8:	4c0d      	ldr	r4, [pc, #52]	; (8004c30 <__libc_init_array+0x3c>)
 8004bfa:	1b64      	subs	r4, r4, r5
 8004bfc:	10a4      	asrs	r4, r4, #2
 8004bfe:	2600      	movs	r6, #0
 8004c00:	42a6      	cmp	r6, r4
 8004c02:	d109      	bne.n	8004c18 <__libc_init_array+0x24>
 8004c04:	4d0b      	ldr	r5, [pc, #44]	; (8004c34 <__libc_init_array+0x40>)
 8004c06:	4c0c      	ldr	r4, [pc, #48]	; (8004c38 <__libc_init_array+0x44>)
 8004c08:	f000 fe46 	bl	8005898 <_init>
 8004c0c:	1b64      	subs	r4, r4, r5
 8004c0e:	10a4      	asrs	r4, r4, #2
 8004c10:	2600      	movs	r6, #0
 8004c12:	42a6      	cmp	r6, r4
 8004c14:	d105      	bne.n	8004c22 <__libc_init_array+0x2e>
 8004c16:	bd70      	pop	{r4, r5, r6, pc}
 8004c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1c:	4798      	blx	r3
 8004c1e:	3601      	adds	r6, #1
 8004c20:	e7ee      	b.n	8004c00 <__libc_init_array+0xc>
 8004c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c26:	4798      	blx	r3
 8004c28:	3601      	adds	r6, #1
 8004c2a:	e7f2      	b.n	8004c12 <__libc_init_array+0x1e>
 8004c2c:	08005924 	.word	0x08005924
 8004c30:	08005924 	.word	0x08005924
 8004c34:	08005924 	.word	0x08005924
 8004c38:	08005928 	.word	0x08005928

08004c3c <__retarget_lock_init_recursive>:
 8004c3c:	4770      	bx	lr

08004c3e <__retarget_lock_acquire_recursive>:
 8004c3e:	4770      	bx	lr

08004c40 <__retarget_lock_release_recursive>:
 8004c40:	4770      	bx	lr

08004c42 <__sfputc_r>:
 8004c42:	6893      	ldr	r3, [r2, #8]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	b410      	push	{r4}
 8004c4a:	6093      	str	r3, [r2, #8]
 8004c4c:	da08      	bge.n	8004c60 <__sfputc_r+0x1e>
 8004c4e:	6994      	ldr	r4, [r2, #24]
 8004c50:	42a3      	cmp	r3, r4
 8004c52:	db01      	blt.n	8004c58 <__sfputc_r+0x16>
 8004c54:	290a      	cmp	r1, #10
 8004c56:	d103      	bne.n	8004c60 <__sfputc_r+0x1e>
 8004c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c5c:	f000 bc61 	b.w	8005522 <__swbuf_r>
 8004c60:	6813      	ldr	r3, [r2, #0]
 8004c62:	1c58      	adds	r0, r3, #1
 8004c64:	6010      	str	r0, [r2, #0]
 8004c66:	7019      	strb	r1, [r3, #0]
 8004c68:	4608      	mov	r0, r1
 8004c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <__sfputs_r>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	4606      	mov	r6, r0
 8004c74:	460f      	mov	r7, r1
 8004c76:	4614      	mov	r4, r2
 8004c78:	18d5      	adds	r5, r2, r3
 8004c7a:	42ac      	cmp	r4, r5
 8004c7c:	d101      	bne.n	8004c82 <__sfputs_r+0x12>
 8004c7e:	2000      	movs	r0, #0
 8004c80:	e007      	b.n	8004c92 <__sfputs_r+0x22>
 8004c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c86:	463a      	mov	r2, r7
 8004c88:	4630      	mov	r0, r6
 8004c8a:	f7ff ffda 	bl	8004c42 <__sfputc_r>
 8004c8e:	1c43      	adds	r3, r0, #1
 8004c90:	d1f3      	bne.n	8004c7a <__sfputs_r+0xa>
 8004c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c94 <_vfiprintf_r>:
 8004c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c98:	460d      	mov	r5, r1
 8004c9a:	b09d      	sub	sp, #116	; 0x74
 8004c9c:	4614      	mov	r4, r2
 8004c9e:	4698      	mov	r8, r3
 8004ca0:	4606      	mov	r6, r0
 8004ca2:	b118      	cbz	r0, 8004cac <_vfiprintf_r+0x18>
 8004ca4:	6a03      	ldr	r3, [r0, #32]
 8004ca6:	b90b      	cbnz	r3, 8004cac <_vfiprintf_r+0x18>
 8004ca8:	f7ff ff4e 	bl	8004b48 <__sinit>
 8004cac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cae:	07d9      	lsls	r1, r3, #31
 8004cb0:	d405      	bmi.n	8004cbe <_vfiprintf_r+0x2a>
 8004cb2:	89ab      	ldrh	r3, [r5, #12]
 8004cb4:	059a      	lsls	r2, r3, #22
 8004cb6:	d402      	bmi.n	8004cbe <_vfiprintf_r+0x2a>
 8004cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cba:	f7ff ffc0 	bl	8004c3e <__retarget_lock_acquire_recursive>
 8004cbe:	89ab      	ldrh	r3, [r5, #12]
 8004cc0:	071b      	lsls	r3, r3, #28
 8004cc2:	d501      	bpl.n	8004cc8 <_vfiprintf_r+0x34>
 8004cc4:	692b      	ldr	r3, [r5, #16]
 8004cc6:	b99b      	cbnz	r3, 8004cf0 <_vfiprintf_r+0x5c>
 8004cc8:	4629      	mov	r1, r5
 8004cca:	4630      	mov	r0, r6
 8004ccc:	f000 fc66 	bl	800559c <__swsetup_r>
 8004cd0:	b170      	cbz	r0, 8004cf0 <_vfiprintf_r+0x5c>
 8004cd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cd4:	07dc      	lsls	r4, r3, #31
 8004cd6:	d504      	bpl.n	8004ce2 <_vfiprintf_r+0x4e>
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cdc:	b01d      	add	sp, #116	; 0x74
 8004cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce2:	89ab      	ldrh	r3, [r5, #12]
 8004ce4:	0598      	lsls	r0, r3, #22
 8004ce6:	d4f7      	bmi.n	8004cd8 <_vfiprintf_r+0x44>
 8004ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cea:	f7ff ffa9 	bl	8004c40 <__retarget_lock_release_recursive>
 8004cee:	e7f3      	b.n	8004cd8 <_vfiprintf_r+0x44>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf4:	2320      	movs	r3, #32
 8004cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cfe:	2330      	movs	r3, #48	; 0x30
 8004d00:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004eb4 <_vfiprintf_r+0x220>
 8004d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d08:	f04f 0901 	mov.w	r9, #1
 8004d0c:	4623      	mov	r3, r4
 8004d0e:	469a      	mov	sl, r3
 8004d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d14:	b10a      	cbz	r2, 8004d1a <_vfiprintf_r+0x86>
 8004d16:	2a25      	cmp	r2, #37	; 0x25
 8004d18:	d1f9      	bne.n	8004d0e <_vfiprintf_r+0x7a>
 8004d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8004d1e:	d00b      	beq.n	8004d38 <_vfiprintf_r+0xa4>
 8004d20:	465b      	mov	r3, fp
 8004d22:	4622      	mov	r2, r4
 8004d24:	4629      	mov	r1, r5
 8004d26:	4630      	mov	r0, r6
 8004d28:	f7ff ffa2 	bl	8004c70 <__sfputs_r>
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	f000 80a9 	beq.w	8004e84 <_vfiprintf_r+0x1f0>
 8004d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d34:	445a      	add	r2, fp
 8004d36:	9209      	str	r2, [sp, #36]	; 0x24
 8004d38:	f89a 3000 	ldrb.w	r3, [sl]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 80a1 	beq.w	8004e84 <_vfiprintf_r+0x1f0>
 8004d42:	2300      	movs	r3, #0
 8004d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d4c:	f10a 0a01 	add.w	sl, sl, #1
 8004d50:	9304      	str	r3, [sp, #16]
 8004d52:	9307      	str	r3, [sp, #28]
 8004d54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d58:	931a      	str	r3, [sp, #104]	; 0x68
 8004d5a:	4654      	mov	r4, sl
 8004d5c:	2205      	movs	r2, #5
 8004d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d62:	4854      	ldr	r0, [pc, #336]	; (8004eb4 <_vfiprintf_r+0x220>)
 8004d64:	f7fb fa6c 	bl	8000240 <memchr>
 8004d68:	9a04      	ldr	r2, [sp, #16]
 8004d6a:	b9d8      	cbnz	r0, 8004da4 <_vfiprintf_r+0x110>
 8004d6c:	06d1      	lsls	r1, r2, #27
 8004d6e:	bf44      	itt	mi
 8004d70:	2320      	movmi	r3, #32
 8004d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d76:	0713      	lsls	r3, r2, #28
 8004d78:	bf44      	itt	mi
 8004d7a:	232b      	movmi	r3, #43	; 0x2b
 8004d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d80:	f89a 3000 	ldrb.w	r3, [sl]
 8004d84:	2b2a      	cmp	r3, #42	; 0x2a
 8004d86:	d015      	beq.n	8004db4 <_vfiprintf_r+0x120>
 8004d88:	9a07      	ldr	r2, [sp, #28]
 8004d8a:	4654      	mov	r4, sl
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	f04f 0c0a 	mov.w	ip, #10
 8004d92:	4621      	mov	r1, r4
 8004d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d98:	3b30      	subs	r3, #48	; 0x30
 8004d9a:	2b09      	cmp	r3, #9
 8004d9c:	d94d      	bls.n	8004e3a <_vfiprintf_r+0x1a6>
 8004d9e:	b1b0      	cbz	r0, 8004dce <_vfiprintf_r+0x13a>
 8004da0:	9207      	str	r2, [sp, #28]
 8004da2:	e014      	b.n	8004dce <_vfiprintf_r+0x13a>
 8004da4:	eba0 0308 	sub.w	r3, r0, r8
 8004da8:	fa09 f303 	lsl.w	r3, r9, r3
 8004dac:	4313      	orrs	r3, r2
 8004dae:	9304      	str	r3, [sp, #16]
 8004db0:	46a2      	mov	sl, r4
 8004db2:	e7d2      	b.n	8004d5a <_vfiprintf_r+0xc6>
 8004db4:	9b03      	ldr	r3, [sp, #12]
 8004db6:	1d19      	adds	r1, r3, #4
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	9103      	str	r1, [sp, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bfbb      	ittet	lt
 8004dc0:	425b      	neglt	r3, r3
 8004dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8004dc6:	9307      	strge	r3, [sp, #28]
 8004dc8:	9307      	strlt	r3, [sp, #28]
 8004dca:	bfb8      	it	lt
 8004dcc:	9204      	strlt	r2, [sp, #16]
 8004dce:	7823      	ldrb	r3, [r4, #0]
 8004dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8004dd2:	d10c      	bne.n	8004dee <_vfiprintf_r+0x15a>
 8004dd4:	7863      	ldrb	r3, [r4, #1]
 8004dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8004dd8:	d134      	bne.n	8004e44 <_vfiprintf_r+0x1b0>
 8004dda:	9b03      	ldr	r3, [sp, #12]
 8004ddc:	1d1a      	adds	r2, r3, #4
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	9203      	str	r2, [sp, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bfb8      	it	lt
 8004de6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004dea:	3402      	adds	r4, #2
 8004dec:	9305      	str	r3, [sp, #20]
 8004dee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004ec4 <_vfiprintf_r+0x230>
 8004df2:	7821      	ldrb	r1, [r4, #0]
 8004df4:	2203      	movs	r2, #3
 8004df6:	4650      	mov	r0, sl
 8004df8:	f7fb fa22 	bl	8000240 <memchr>
 8004dfc:	b138      	cbz	r0, 8004e0e <_vfiprintf_r+0x17a>
 8004dfe:	9b04      	ldr	r3, [sp, #16]
 8004e00:	eba0 000a 	sub.w	r0, r0, sl
 8004e04:	2240      	movs	r2, #64	; 0x40
 8004e06:	4082      	lsls	r2, r0
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	3401      	adds	r4, #1
 8004e0c:	9304      	str	r3, [sp, #16]
 8004e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e12:	4829      	ldr	r0, [pc, #164]	; (8004eb8 <_vfiprintf_r+0x224>)
 8004e14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e18:	2206      	movs	r2, #6
 8004e1a:	f7fb fa11 	bl	8000240 <memchr>
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d03f      	beq.n	8004ea2 <_vfiprintf_r+0x20e>
 8004e22:	4b26      	ldr	r3, [pc, #152]	; (8004ebc <_vfiprintf_r+0x228>)
 8004e24:	bb1b      	cbnz	r3, 8004e6e <_vfiprintf_r+0x1da>
 8004e26:	9b03      	ldr	r3, [sp, #12]
 8004e28:	3307      	adds	r3, #7
 8004e2a:	f023 0307 	bic.w	r3, r3, #7
 8004e2e:	3308      	adds	r3, #8
 8004e30:	9303      	str	r3, [sp, #12]
 8004e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e34:	443b      	add	r3, r7
 8004e36:	9309      	str	r3, [sp, #36]	; 0x24
 8004e38:	e768      	b.n	8004d0c <_vfiprintf_r+0x78>
 8004e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e3e:	460c      	mov	r4, r1
 8004e40:	2001      	movs	r0, #1
 8004e42:	e7a6      	b.n	8004d92 <_vfiprintf_r+0xfe>
 8004e44:	2300      	movs	r3, #0
 8004e46:	3401      	adds	r4, #1
 8004e48:	9305      	str	r3, [sp, #20]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	f04f 0c0a 	mov.w	ip, #10
 8004e50:	4620      	mov	r0, r4
 8004e52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e56:	3a30      	subs	r2, #48	; 0x30
 8004e58:	2a09      	cmp	r2, #9
 8004e5a:	d903      	bls.n	8004e64 <_vfiprintf_r+0x1d0>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0c6      	beq.n	8004dee <_vfiprintf_r+0x15a>
 8004e60:	9105      	str	r1, [sp, #20]
 8004e62:	e7c4      	b.n	8004dee <_vfiprintf_r+0x15a>
 8004e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e68:	4604      	mov	r4, r0
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e7f0      	b.n	8004e50 <_vfiprintf_r+0x1bc>
 8004e6e:	ab03      	add	r3, sp, #12
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	462a      	mov	r2, r5
 8004e74:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <_vfiprintf_r+0x22c>)
 8004e76:	a904      	add	r1, sp, #16
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f3af 8000 	nop.w
 8004e7e:	4607      	mov	r7, r0
 8004e80:	1c78      	adds	r0, r7, #1
 8004e82:	d1d6      	bne.n	8004e32 <_vfiprintf_r+0x19e>
 8004e84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e86:	07d9      	lsls	r1, r3, #31
 8004e88:	d405      	bmi.n	8004e96 <_vfiprintf_r+0x202>
 8004e8a:	89ab      	ldrh	r3, [r5, #12]
 8004e8c:	059a      	lsls	r2, r3, #22
 8004e8e:	d402      	bmi.n	8004e96 <_vfiprintf_r+0x202>
 8004e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e92:	f7ff fed5 	bl	8004c40 <__retarget_lock_release_recursive>
 8004e96:	89ab      	ldrh	r3, [r5, #12]
 8004e98:	065b      	lsls	r3, r3, #25
 8004e9a:	f53f af1d 	bmi.w	8004cd8 <_vfiprintf_r+0x44>
 8004e9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ea0:	e71c      	b.n	8004cdc <_vfiprintf_r+0x48>
 8004ea2:	ab03      	add	r3, sp, #12
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	462a      	mov	r2, r5
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <_vfiprintf_r+0x22c>)
 8004eaa:	a904      	add	r1, sp, #16
 8004eac:	4630      	mov	r0, r6
 8004eae:	f000 f919 	bl	80050e4 <_printf_i>
 8004eb2:	e7e4      	b.n	8004e7e <_vfiprintf_r+0x1ea>
 8004eb4:	080058e8 	.word	0x080058e8
 8004eb8:	080058f2 	.word	0x080058f2
 8004ebc:	00000000 	.word	0x00000000
 8004ec0:	08004c71 	.word	0x08004c71
 8004ec4:	080058ee 	.word	0x080058ee

08004ec8 <sbrk_aligned>:
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	4e0e      	ldr	r6, [pc, #56]	; (8004f04 <sbrk_aligned+0x3c>)
 8004ecc:	460c      	mov	r4, r1
 8004ece:	6831      	ldr	r1, [r6, #0]
 8004ed0:	4605      	mov	r5, r0
 8004ed2:	b911      	cbnz	r1, 8004eda <sbrk_aligned+0x12>
 8004ed4:	f000 fc72 	bl	80057bc <_sbrk_r>
 8004ed8:	6030      	str	r0, [r6, #0]
 8004eda:	4621      	mov	r1, r4
 8004edc:	4628      	mov	r0, r5
 8004ede:	f000 fc6d 	bl	80057bc <_sbrk_r>
 8004ee2:	1c43      	adds	r3, r0, #1
 8004ee4:	d00a      	beq.n	8004efc <sbrk_aligned+0x34>
 8004ee6:	1cc4      	adds	r4, r0, #3
 8004ee8:	f024 0403 	bic.w	r4, r4, #3
 8004eec:	42a0      	cmp	r0, r4
 8004eee:	d007      	beq.n	8004f00 <sbrk_aligned+0x38>
 8004ef0:	1a21      	subs	r1, r4, r0
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f000 fc62 	bl	80057bc <_sbrk_r>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d101      	bne.n	8004f00 <sbrk_aligned+0x38>
 8004efc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f00:	4620      	mov	r0, r4
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
 8004f04:	200009b8 	.word	0x200009b8

08004f08 <_malloc_r>:
 8004f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f0c:	1ccd      	adds	r5, r1, #3
 8004f0e:	f025 0503 	bic.w	r5, r5, #3
 8004f12:	3508      	adds	r5, #8
 8004f14:	2d0c      	cmp	r5, #12
 8004f16:	bf38      	it	cc
 8004f18:	250c      	movcc	r5, #12
 8004f1a:	2d00      	cmp	r5, #0
 8004f1c:	4607      	mov	r7, r0
 8004f1e:	db01      	blt.n	8004f24 <_malloc_r+0x1c>
 8004f20:	42a9      	cmp	r1, r5
 8004f22:	d905      	bls.n	8004f30 <_malloc_r+0x28>
 8004f24:	230c      	movs	r3, #12
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	2600      	movs	r6, #0
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005004 <_malloc_r+0xfc>
 8004f34:	f000 faa6 	bl	8005484 <__malloc_lock>
 8004f38:	f8d8 3000 	ldr.w	r3, [r8]
 8004f3c:	461c      	mov	r4, r3
 8004f3e:	bb5c      	cbnz	r4, 8004f98 <_malloc_r+0x90>
 8004f40:	4629      	mov	r1, r5
 8004f42:	4638      	mov	r0, r7
 8004f44:	f7ff ffc0 	bl	8004ec8 <sbrk_aligned>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	d155      	bne.n	8004ffa <_malloc_r+0xf2>
 8004f4e:	f8d8 4000 	ldr.w	r4, [r8]
 8004f52:	4626      	mov	r6, r4
 8004f54:	2e00      	cmp	r6, #0
 8004f56:	d145      	bne.n	8004fe4 <_malloc_r+0xdc>
 8004f58:	2c00      	cmp	r4, #0
 8004f5a:	d048      	beq.n	8004fee <_malloc_r+0xe6>
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4638      	mov	r0, r7
 8004f62:	eb04 0903 	add.w	r9, r4, r3
 8004f66:	f000 fc29 	bl	80057bc <_sbrk_r>
 8004f6a:	4581      	cmp	r9, r0
 8004f6c:	d13f      	bne.n	8004fee <_malloc_r+0xe6>
 8004f6e:	6821      	ldr	r1, [r4, #0]
 8004f70:	1a6d      	subs	r5, r5, r1
 8004f72:	4629      	mov	r1, r5
 8004f74:	4638      	mov	r0, r7
 8004f76:	f7ff ffa7 	bl	8004ec8 <sbrk_aligned>
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d037      	beq.n	8004fee <_malloc_r+0xe6>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	442b      	add	r3, r5
 8004f82:	6023      	str	r3, [r4, #0]
 8004f84:	f8d8 3000 	ldr.w	r3, [r8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d038      	beq.n	8004ffe <_malloc_r+0xf6>
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	42a2      	cmp	r2, r4
 8004f90:	d12b      	bne.n	8004fea <_malloc_r+0xe2>
 8004f92:	2200      	movs	r2, #0
 8004f94:	605a      	str	r2, [r3, #4]
 8004f96:	e00f      	b.n	8004fb8 <_malloc_r+0xb0>
 8004f98:	6822      	ldr	r2, [r4, #0]
 8004f9a:	1b52      	subs	r2, r2, r5
 8004f9c:	d41f      	bmi.n	8004fde <_malloc_r+0xd6>
 8004f9e:	2a0b      	cmp	r2, #11
 8004fa0:	d917      	bls.n	8004fd2 <_malloc_r+0xca>
 8004fa2:	1961      	adds	r1, r4, r5
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	6025      	str	r5, [r4, #0]
 8004fa8:	bf18      	it	ne
 8004faa:	6059      	strne	r1, [r3, #4]
 8004fac:	6863      	ldr	r3, [r4, #4]
 8004fae:	bf08      	it	eq
 8004fb0:	f8c8 1000 	streq.w	r1, [r8]
 8004fb4:	5162      	str	r2, [r4, r5]
 8004fb6:	604b      	str	r3, [r1, #4]
 8004fb8:	4638      	mov	r0, r7
 8004fba:	f104 060b 	add.w	r6, r4, #11
 8004fbe:	f000 fa67 	bl	8005490 <__malloc_unlock>
 8004fc2:	f026 0607 	bic.w	r6, r6, #7
 8004fc6:	1d23      	adds	r3, r4, #4
 8004fc8:	1af2      	subs	r2, r6, r3
 8004fca:	d0ae      	beq.n	8004f2a <_malloc_r+0x22>
 8004fcc:	1b9b      	subs	r3, r3, r6
 8004fce:	50a3      	str	r3, [r4, r2]
 8004fd0:	e7ab      	b.n	8004f2a <_malloc_r+0x22>
 8004fd2:	42a3      	cmp	r3, r4
 8004fd4:	6862      	ldr	r2, [r4, #4]
 8004fd6:	d1dd      	bne.n	8004f94 <_malloc_r+0x8c>
 8004fd8:	f8c8 2000 	str.w	r2, [r8]
 8004fdc:	e7ec      	b.n	8004fb8 <_malloc_r+0xb0>
 8004fde:	4623      	mov	r3, r4
 8004fe0:	6864      	ldr	r4, [r4, #4]
 8004fe2:	e7ac      	b.n	8004f3e <_malloc_r+0x36>
 8004fe4:	4634      	mov	r4, r6
 8004fe6:	6876      	ldr	r6, [r6, #4]
 8004fe8:	e7b4      	b.n	8004f54 <_malloc_r+0x4c>
 8004fea:	4613      	mov	r3, r2
 8004fec:	e7cc      	b.n	8004f88 <_malloc_r+0x80>
 8004fee:	230c      	movs	r3, #12
 8004ff0:	603b      	str	r3, [r7, #0]
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	f000 fa4c 	bl	8005490 <__malloc_unlock>
 8004ff8:	e797      	b.n	8004f2a <_malloc_r+0x22>
 8004ffa:	6025      	str	r5, [r4, #0]
 8004ffc:	e7dc      	b.n	8004fb8 <_malloc_r+0xb0>
 8004ffe:	605b      	str	r3, [r3, #4]
 8005000:	deff      	udf	#255	; 0xff
 8005002:	bf00      	nop
 8005004:	200009b4 	.word	0x200009b4

08005008 <_printf_common>:
 8005008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	4616      	mov	r6, r2
 800500e:	4699      	mov	r9, r3
 8005010:	688a      	ldr	r2, [r1, #8]
 8005012:	690b      	ldr	r3, [r1, #16]
 8005014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005018:	4293      	cmp	r3, r2
 800501a:	bfb8      	it	lt
 800501c:	4613      	movlt	r3, r2
 800501e:	6033      	str	r3, [r6, #0]
 8005020:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005024:	4607      	mov	r7, r0
 8005026:	460c      	mov	r4, r1
 8005028:	b10a      	cbz	r2, 800502e <_printf_common+0x26>
 800502a:	3301      	adds	r3, #1
 800502c:	6033      	str	r3, [r6, #0]
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	0699      	lsls	r1, r3, #26
 8005032:	bf42      	ittt	mi
 8005034:	6833      	ldrmi	r3, [r6, #0]
 8005036:	3302      	addmi	r3, #2
 8005038:	6033      	strmi	r3, [r6, #0]
 800503a:	6825      	ldr	r5, [r4, #0]
 800503c:	f015 0506 	ands.w	r5, r5, #6
 8005040:	d106      	bne.n	8005050 <_printf_common+0x48>
 8005042:	f104 0a19 	add.w	sl, r4, #25
 8005046:	68e3      	ldr	r3, [r4, #12]
 8005048:	6832      	ldr	r2, [r6, #0]
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	42ab      	cmp	r3, r5
 800504e:	dc26      	bgt.n	800509e <_printf_common+0x96>
 8005050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005054:	1e13      	subs	r3, r2, #0
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	bf18      	it	ne
 800505a:	2301      	movne	r3, #1
 800505c:	0692      	lsls	r2, r2, #26
 800505e:	d42b      	bmi.n	80050b8 <_printf_common+0xb0>
 8005060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005064:	4649      	mov	r1, r9
 8005066:	4638      	mov	r0, r7
 8005068:	47c0      	blx	r8
 800506a:	3001      	adds	r0, #1
 800506c:	d01e      	beq.n	80050ac <_printf_common+0xa4>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	6922      	ldr	r2, [r4, #16]
 8005072:	f003 0306 	and.w	r3, r3, #6
 8005076:	2b04      	cmp	r3, #4
 8005078:	bf02      	ittt	eq
 800507a:	68e5      	ldreq	r5, [r4, #12]
 800507c:	6833      	ldreq	r3, [r6, #0]
 800507e:	1aed      	subeq	r5, r5, r3
 8005080:	68a3      	ldr	r3, [r4, #8]
 8005082:	bf0c      	ite	eq
 8005084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005088:	2500      	movne	r5, #0
 800508a:	4293      	cmp	r3, r2
 800508c:	bfc4      	itt	gt
 800508e:	1a9b      	subgt	r3, r3, r2
 8005090:	18ed      	addgt	r5, r5, r3
 8005092:	2600      	movs	r6, #0
 8005094:	341a      	adds	r4, #26
 8005096:	42b5      	cmp	r5, r6
 8005098:	d11a      	bne.n	80050d0 <_printf_common+0xc8>
 800509a:	2000      	movs	r0, #0
 800509c:	e008      	b.n	80050b0 <_printf_common+0xa8>
 800509e:	2301      	movs	r3, #1
 80050a0:	4652      	mov	r2, sl
 80050a2:	4649      	mov	r1, r9
 80050a4:	4638      	mov	r0, r7
 80050a6:	47c0      	blx	r8
 80050a8:	3001      	adds	r0, #1
 80050aa:	d103      	bne.n	80050b4 <_printf_common+0xac>
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b4:	3501      	adds	r5, #1
 80050b6:	e7c6      	b.n	8005046 <_printf_common+0x3e>
 80050b8:	18e1      	adds	r1, r4, r3
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	2030      	movs	r0, #48	; 0x30
 80050be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050c2:	4422      	add	r2, r4
 80050c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050cc:	3302      	adds	r3, #2
 80050ce:	e7c7      	b.n	8005060 <_printf_common+0x58>
 80050d0:	2301      	movs	r3, #1
 80050d2:	4622      	mov	r2, r4
 80050d4:	4649      	mov	r1, r9
 80050d6:	4638      	mov	r0, r7
 80050d8:	47c0      	blx	r8
 80050da:	3001      	adds	r0, #1
 80050dc:	d0e6      	beq.n	80050ac <_printf_common+0xa4>
 80050de:	3601      	adds	r6, #1
 80050e0:	e7d9      	b.n	8005096 <_printf_common+0x8e>
	...

080050e4 <_printf_i>:
 80050e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	7e0f      	ldrb	r7, [r1, #24]
 80050ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050ec:	2f78      	cmp	r7, #120	; 0x78
 80050ee:	4691      	mov	r9, r2
 80050f0:	4680      	mov	r8, r0
 80050f2:	460c      	mov	r4, r1
 80050f4:	469a      	mov	sl, r3
 80050f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050fa:	d807      	bhi.n	800510c <_printf_i+0x28>
 80050fc:	2f62      	cmp	r7, #98	; 0x62
 80050fe:	d80a      	bhi.n	8005116 <_printf_i+0x32>
 8005100:	2f00      	cmp	r7, #0
 8005102:	f000 80d4 	beq.w	80052ae <_printf_i+0x1ca>
 8005106:	2f58      	cmp	r7, #88	; 0x58
 8005108:	f000 80c0 	beq.w	800528c <_printf_i+0x1a8>
 800510c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005114:	e03a      	b.n	800518c <_printf_i+0xa8>
 8005116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800511a:	2b15      	cmp	r3, #21
 800511c:	d8f6      	bhi.n	800510c <_printf_i+0x28>
 800511e:	a101      	add	r1, pc, #4	; (adr r1, 8005124 <_printf_i+0x40>)
 8005120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005124:	0800517d 	.word	0x0800517d
 8005128:	08005191 	.word	0x08005191
 800512c:	0800510d 	.word	0x0800510d
 8005130:	0800510d 	.word	0x0800510d
 8005134:	0800510d 	.word	0x0800510d
 8005138:	0800510d 	.word	0x0800510d
 800513c:	08005191 	.word	0x08005191
 8005140:	0800510d 	.word	0x0800510d
 8005144:	0800510d 	.word	0x0800510d
 8005148:	0800510d 	.word	0x0800510d
 800514c:	0800510d 	.word	0x0800510d
 8005150:	08005295 	.word	0x08005295
 8005154:	080051bd 	.word	0x080051bd
 8005158:	0800524f 	.word	0x0800524f
 800515c:	0800510d 	.word	0x0800510d
 8005160:	0800510d 	.word	0x0800510d
 8005164:	080052b7 	.word	0x080052b7
 8005168:	0800510d 	.word	0x0800510d
 800516c:	080051bd 	.word	0x080051bd
 8005170:	0800510d 	.word	0x0800510d
 8005174:	0800510d 	.word	0x0800510d
 8005178:	08005257 	.word	0x08005257
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	1d1a      	adds	r2, r3, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	602a      	str	r2, [r5, #0]
 8005184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800518c:	2301      	movs	r3, #1
 800518e:	e09f      	b.n	80052d0 <_printf_i+0x1ec>
 8005190:	6820      	ldr	r0, [r4, #0]
 8005192:	682b      	ldr	r3, [r5, #0]
 8005194:	0607      	lsls	r7, r0, #24
 8005196:	f103 0104 	add.w	r1, r3, #4
 800519a:	6029      	str	r1, [r5, #0]
 800519c:	d501      	bpl.n	80051a2 <_printf_i+0xbe>
 800519e:	681e      	ldr	r6, [r3, #0]
 80051a0:	e003      	b.n	80051aa <_printf_i+0xc6>
 80051a2:	0646      	lsls	r6, r0, #25
 80051a4:	d5fb      	bpl.n	800519e <_printf_i+0xba>
 80051a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80051aa:	2e00      	cmp	r6, #0
 80051ac:	da03      	bge.n	80051b6 <_printf_i+0xd2>
 80051ae:	232d      	movs	r3, #45	; 0x2d
 80051b0:	4276      	negs	r6, r6
 80051b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b6:	485a      	ldr	r0, [pc, #360]	; (8005320 <_printf_i+0x23c>)
 80051b8:	230a      	movs	r3, #10
 80051ba:	e012      	b.n	80051e2 <_printf_i+0xfe>
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	6820      	ldr	r0, [r4, #0]
 80051c0:	1d19      	adds	r1, r3, #4
 80051c2:	6029      	str	r1, [r5, #0]
 80051c4:	0605      	lsls	r5, r0, #24
 80051c6:	d501      	bpl.n	80051cc <_printf_i+0xe8>
 80051c8:	681e      	ldr	r6, [r3, #0]
 80051ca:	e002      	b.n	80051d2 <_printf_i+0xee>
 80051cc:	0641      	lsls	r1, r0, #25
 80051ce:	d5fb      	bpl.n	80051c8 <_printf_i+0xe4>
 80051d0:	881e      	ldrh	r6, [r3, #0]
 80051d2:	4853      	ldr	r0, [pc, #332]	; (8005320 <_printf_i+0x23c>)
 80051d4:	2f6f      	cmp	r7, #111	; 0x6f
 80051d6:	bf0c      	ite	eq
 80051d8:	2308      	moveq	r3, #8
 80051da:	230a      	movne	r3, #10
 80051dc:	2100      	movs	r1, #0
 80051de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051e2:	6865      	ldr	r5, [r4, #4]
 80051e4:	60a5      	str	r5, [r4, #8]
 80051e6:	2d00      	cmp	r5, #0
 80051e8:	bfa2      	ittt	ge
 80051ea:	6821      	ldrge	r1, [r4, #0]
 80051ec:	f021 0104 	bicge.w	r1, r1, #4
 80051f0:	6021      	strge	r1, [r4, #0]
 80051f2:	b90e      	cbnz	r6, 80051f8 <_printf_i+0x114>
 80051f4:	2d00      	cmp	r5, #0
 80051f6:	d04b      	beq.n	8005290 <_printf_i+0x1ac>
 80051f8:	4615      	mov	r5, r2
 80051fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80051fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005202:	5dc7      	ldrb	r7, [r0, r7]
 8005204:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005208:	4637      	mov	r7, r6
 800520a:	42bb      	cmp	r3, r7
 800520c:	460e      	mov	r6, r1
 800520e:	d9f4      	bls.n	80051fa <_printf_i+0x116>
 8005210:	2b08      	cmp	r3, #8
 8005212:	d10b      	bne.n	800522c <_printf_i+0x148>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	07de      	lsls	r6, r3, #31
 8005218:	d508      	bpl.n	800522c <_printf_i+0x148>
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	6861      	ldr	r1, [r4, #4]
 800521e:	4299      	cmp	r1, r3
 8005220:	bfde      	ittt	le
 8005222:	2330      	movle	r3, #48	; 0x30
 8005224:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005228:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800522c:	1b52      	subs	r2, r2, r5
 800522e:	6122      	str	r2, [r4, #16]
 8005230:	f8cd a000 	str.w	sl, [sp]
 8005234:	464b      	mov	r3, r9
 8005236:	aa03      	add	r2, sp, #12
 8005238:	4621      	mov	r1, r4
 800523a:	4640      	mov	r0, r8
 800523c:	f7ff fee4 	bl	8005008 <_printf_common>
 8005240:	3001      	adds	r0, #1
 8005242:	d14a      	bne.n	80052da <_printf_i+0x1f6>
 8005244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005248:	b004      	add	sp, #16
 800524a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	f043 0320 	orr.w	r3, r3, #32
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	4833      	ldr	r0, [pc, #204]	; (8005324 <_printf_i+0x240>)
 8005258:	2778      	movs	r7, #120	; 0x78
 800525a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	6829      	ldr	r1, [r5, #0]
 8005262:	061f      	lsls	r7, r3, #24
 8005264:	f851 6b04 	ldr.w	r6, [r1], #4
 8005268:	d402      	bmi.n	8005270 <_printf_i+0x18c>
 800526a:	065f      	lsls	r7, r3, #25
 800526c:	bf48      	it	mi
 800526e:	b2b6      	uxthmi	r6, r6
 8005270:	07df      	lsls	r7, r3, #31
 8005272:	bf48      	it	mi
 8005274:	f043 0320 	orrmi.w	r3, r3, #32
 8005278:	6029      	str	r1, [r5, #0]
 800527a:	bf48      	it	mi
 800527c:	6023      	strmi	r3, [r4, #0]
 800527e:	b91e      	cbnz	r6, 8005288 <_printf_i+0x1a4>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	f023 0320 	bic.w	r3, r3, #32
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	2310      	movs	r3, #16
 800528a:	e7a7      	b.n	80051dc <_printf_i+0xf8>
 800528c:	4824      	ldr	r0, [pc, #144]	; (8005320 <_printf_i+0x23c>)
 800528e:	e7e4      	b.n	800525a <_printf_i+0x176>
 8005290:	4615      	mov	r5, r2
 8005292:	e7bd      	b.n	8005210 <_printf_i+0x12c>
 8005294:	682b      	ldr	r3, [r5, #0]
 8005296:	6826      	ldr	r6, [r4, #0]
 8005298:	6961      	ldr	r1, [r4, #20]
 800529a:	1d18      	adds	r0, r3, #4
 800529c:	6028      	str	r0, [r5, #0]
 800529e:	0635      	lsls	r5, r6, #24
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	d501      	bpl.n	80052a8 <_printf_i+0x1c4>
 80052a4:	6019      	str	r1, [r3, #0]
 80052a6:	e002      	b.n	80052ae <_printf_i+0x1ca>
 80052a8:	0670      	lsls	r0, r6, #25
 80052aa:	d5fb      	bpl.n	80052a4 <_printf_i+0x1c0>
 80052ac:	8019      	strh	r1, [r3, #0]
 80052ae:	2300      	movs	r3, #0
 80052b0:	6123      	str	r3, [r4, #16]
 80052b2:	4615      	mov	r5, r2
 80052b4:	e7bc      	b.n	8005230 <_printf_i+0x14c>
 80052b6:	682b      	ldr	r3, [r5, #0]
 80052b8:	1d1a      	adds	r2, r3, #4
 80052ba:	602a      	str	r2, [r5, #0]
 80052bc:	681d      	ldr	r5, [r3, #0]
 80052be:	6862      	ldr	r2, [r4, #4]
 80052c0:	2100      	movs	r1, #0
 80052c2:	4628      	mov	r0, r5
 80052c4:	f7fa ffbc 	bl	8000240 <memchr>
 80052c8:	b108      	cbz	r0, 80052ce <_printf_i+0x1ea>
 80052ca:	1b40      	subs	r0, r0, r5
 80052cc:	6060      	str	r0, [r4, #4]
 80052ce:	6863      	ldr	r3, [r4, #4]
 80052d0:	6123      	str	r3, [r4, #16]
 80052d2:	2300      	movs	r3, #0
 80052d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d8:	e7aa      	b.n	8005230 <_printf_i+0x14c>
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	462a      	mov	r2, r5
 80052de:	4649      	mov	r1, r9
 80052e0:	4640      	mov	r0, r8
 80052e2:	47d0      	blx	sl
 80052e4:	3001      	adds	r0, #1
 80052e6:	d0ad      	beq.n	8005244 <_printf_i+0x160>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	079b      	lsls	r3, r3, #30
 80052ec:	d413      	bmi.n	8005316 <_printf_i+0x232>
 80052ee:	68e0      	ldr	r0, [r4, #12]
 80052f0:	9b03      	ldr	r3, [sp, #12]
 80052f2:	4298      	cmp	r0, r3
 80052f4:	bfb8      	it	lt
 80052f6:	4618      	movlt	r0, r3
 80052f8:	e7a6      	b.n	8005248 <_printf_i+0x164>
 80052fa:	2301      	movs	r3, #1
 80052fc:	4632      	mov	r2, r6
 80052fe:	4649      	mov	r1, r9
 8005300:	4640      	mov	r0, r8
 8005302:	47d0      	blx	sl
 8005304:	3001      	adds	r0, #1
 8005306:	d09d      	beq.n	8005244 <_printf_i+0x160>
 8005308:	3501      	adds	r5, #1
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	9903      	ldr	r1, [sp, #12]
 800530e:	1a5b      	subs	r3, r3, r1
 8005310:	42ab      	cmp	r3, r5
 8005312:	dcf2      	bgt.n	80052fa <_printf_i+0x216>
 8005314:	e7eb      	b.n	80052ee <_printf_i+0x20a>
 8005316:	2500      	movs	r5, #0
 8005318:	f104 0619 	add.w	r6, r4, #25
 800531c:	e7f5      	b.n	800530a <_printf_i+0x226>
 800531e:	bf00      	nop
 8005320:	080058f9 	.word	0x080058f9
 8005324:	0800590a 	.word	0x0800590a

08005328 <__sflush_r>:
 8005328:	898a      	ldrh	r2, [r1, #12]
 800532a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800532e:	4605      	mov	r5, r0
 8005330:	0710      	lsls	r0, r2, #28
 8005332:	460c      	mov	r4, r1
 8005334:	d458      	bmi.n	80053e8 <__sflush_r+0xc0>
 8005336:	684b      	ldr	r3, [r1, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	dc05      	bgt.n	8005348 <__sflush_r+0x20>
 800533c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	dc02      	bgt.n	8005348 <__sflush_r+0x20>
 8005342:	2000      	movs	r0, #0
 8005344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800534a:	2e00      	cmp	r6, #0
 800534c:	d0f9      	beq.n	8005342 <__sflush_r+0x1a>
 800534e:	2300      	movs	r3, #0
 8005350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005354:	682f      	ldr	r7, [r5, #0]
 8005356:	6a21      	ldr	r1, [r4, #32]
 8005358:	602b      	str	r3, [r5, #0]
 800535a:	d032      	beq.n	80053c2 <__sflush_r+0x9a>
 800535c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800535e:	89a3      	ldrh	r3, [r4, #12]
 8005360:	075a      	lsls	r2, r3, #29
 8005362:	d505      	bpl.n	8005370 <__sflush_r+0x48>
 8005364:	6863      	ldr	r3, [r4, #4]
 8005366:	1ac0      	subs	r0, r0, r3
 8005368:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800536a:	b10b      	cbz	r3, 8005370 <__sflush_r+0x48>
 800536c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800536e:	1ac0      	subs	r0, r0, r3
 8005370:	2300      	movs	r3, #0
 8005372:	4602      	mov	r2, r0
 8005374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005376:	6a21      	ldr	r1, [r4, #32]
 8005378:	4628      	mov	r0, r5
 800537a:	47b0      	blx	r6
 800537c:	1c43      	adds	r3, r0, #1
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	d106      	bne.n	8005390 <__sflush_r+0x68>
 8005382:	6829      	ldr	r1, [r5, #0]
 8005384:	291d      	cmp	r1, #29
 8005386:	d82b      	bhi.n	80053e0 <__sflush_r+0xb8>
 8005388:	4a29      	ldr	r2, [pc, #164]	; (8005430 <__sflush_r+0x108>)
 800538a:	410a      	asrs	r2, r1
 800538c:	07d6      	lsls	r6, r2, #31
 800538e:	d427      	bmi.n	80053e0 <__sflush_r+0xb8>
 8005390:	2200      	movs	r2, #0
 8005392:	6062      	str	r2, [r4, #4]
 8005394:	04d9      	lsls	r1, r3, #19
 8005396:	6922      	ldr	r2, [r4, #16]
 8005398:	6022      	str	r2, [r4, #0]
 800539a:	d504      	bpl.n	80053a6 <__sflush_r+0x7e>
 800539c:	1c42      	adds	r2, r0, #1
 800539e:	d101      	bne.n	80053a4 <__sflush_r+0x7c>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	b903      	cbnz	r3, 80053a6 <__sflush_r+0x7e>
 80053a4:	6560      	str	r0, [r4, #84]	; 0x54
 80053a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053a8:	602f      	str	r7, [r5, #0]
 80053aa:	2900      	cmp	r1, #0
 80053ac:	d0c9      	beq.n	8005342 <__sflush_r+0x1a>
 80053ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053b2:	4299      	cmp	r1, r3
 80053b4:	d002      	beq.n	80053bc <__sflush_r+0x94>
 80053b6:	4628      	mov	r0, r5
 80053b8:	f000 fa22 	bl	8005800 <_free_r>
 80053bc:	2000      	movs	r0, #0
 80053be:	6360      	str	r0, [r4, #52]	; 0x34
 80053c0:	e7c0      	b.n	8005344 <__sflush_r+0x1c>
 80053c2:	2301      	movs	r3, #1
 80053c4:	4628      	mov	r0, r5
 80053c6:	47b0      	blx	r6
 80053c8:	1c41      	adds	r1, r0, #1
 80053ca:	d1c8      	bne.n	800535e <__sflush_r+0x36>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0c5      	beq.n	800535e <__sflush_r+0x36>
 80053d2:	2b1d      	cmp	r3, #29
 80053d4:	d001      	beq.n	80053da <__sflush_r+0xb2>
 80053d6:	2b16      	cmp	r3, #22
 80053d8:	d101      	bne.n	80053de <__sflush_r+0xb6>
 80053da:	602f      	str	r7, [r5, #0]
 80053dc:	e7b1      	b.n	8005342 <__sflush_r+0x1a>
 80053de:	89a3      	ldrh	r3, [r4, #12]
 80053e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053e4:	81a3      	strh	r3, [r4, #12]
 80053e6:	e7ad      	b.n	8005344 <__sflush_r+0x1c>
 80053e8:	690f      	ldr	r7, [r1, #16]
 80053ea:	2f00      	cmp	r7, #0
 80053ec:	d0a9      	beq.n	8005342 <__sflush_r+0x1a>
 80053ee:	0793      	lsls	r3, r2, #30
 80053f0:	680e      	ldr	r6, [r1, #0]
 80053f2:	bf08      	it	eq
 80053f4:	694b      	ldreq	r3, [r1, #20]
 80053f6:	600f      	str	r7, [r1, #0]
 80053f8:	bf18      	it	ne
 80053fa:	2300      	movne	r3, #0
 80053fc:	eba6 0807 	sub.w	r8, r6, r7
 8005400:	608b      	str	r3, [r1, #8]
 8005402:	f1b8 0f00 	cmp.w	r8, #0
 8005406:	dd9c      	ble.n	8005342 <__sflush_r+0x1a>
 8005408:	6a21      	ldr	r1, [r4, #32]
 800540a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800540c:	4643      	mov	r3, r8
 800540e:	463a      	mov	r2, r7
 8005410:	4628      	mov	r0, r5
 8005412:	47b0      	blx	r6
 8005414:	2800      	cmp	r0, #0
 8005416:	dc06      	bgt.n	8005426 <__sflush_r+0xfe>
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800541e:	81a3      	strh	r3, [r4, #12]
 8005420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005424:	e78e      	b.n	8005344 <__sflush_r+0x1c>
 8005426:	4407      	add	r7, r0
 8005428:	eba8 0800 	sub.w	r8, r8, r0
 800542c:	e7e9      	b.n	8005402 <__sflush_r+0xda>
 800542e:	bf00      	nop
 8005430:	dfbffffe 	.word	0xdfbffffe

08005434 <_fflush_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	690b      	ldr	r3, [r1, #16]
 8005438:	4605      	mov	r5, r0
 800543a:	460c      	mov	r4, r1
 800543c:	b913      	cbnz	r3, 8005444 <_fflush_r+0x10>
 800543e:	2500      	movs	r5, #0
 8005440:	4628      	mov	r0, r5
 8005442:	bd38      	pop	{r3, r4, r5, pc}
 8005444:	b118      	cbz	r0, 800544e <_fflush_r+0x1a>
 8005446:	6a03      	ldr	r3, [r0, #32]
 8005448:	b90b      	cbnz	r3, 800544e <_fflush_r+0x1a>
 800544a:	f7ff fb7d 	bl	8004b48 <__sinit>
 800544e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0f3      	beq.n	800543e <_fflush_r+0xa>
 8005456:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005458:	07d0      	lsls	r0, r2, #31
 800545a:	d404      	bmi.n	8005466 <_fflush_r+0x32>
 800545c:	0599      	lsls	r1, r3, #22
 800545e:	d402      	bmi.n	8005466 <_fflush_r+0x32>
 8005460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005462:	f7ff fbec 	bl	8004c3e <__retarget_lock_acquire_recursive>
 8005466:	4628      	mov	r0, r5
 8005468:	4621      	mov	r1, r4
 800546a:	f7ff ff5d 	bl	8005328 <__sflush_r>
 800546e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005470:	07da      	lsls	r2, r3, #31
 8005472:	4605      	mov	r5, r0
 8005474:	d4e4      	bmi.n	8005440 <_fflush_r+0xc>
 8005476:	89a3      	ldrh	r3, [r4, #12]
 8005478:	059b      	lsls	r3, r3, #22
 800547a:	d4e1      	bmi.n	8005440 <_fflush_r+0xc>
 800547c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800547e:	f7ff fbdf 	bl	8004c40 <__retarget_lock_release_recursive>
 8005482:	e7dd      	b.n	8005440 <_fflush_r+0xc>

08005484 <__malloc_lock>:
 8005484:	4801      	ldr	r0, [pc, #4]	; (800548c <__malloc_lock+0x8>)
 8005486:	f7ff bbda 	b.w	8004c3e <__retarget_lock_acquire_recursive>
 800548a:	bf00      	nop
 800548c:	200009b0 	.word	0x200009b0

08005490 <__malloc_unlock>:
 8005490:	4801      	ldr	r0, [pc, #4]	; (8005498 <__malloc_unlock+0x8>)
 8005492:	f7ff bbd5 	b.w	8004c40 <__retarget_lock_release_recursive>
 8005496:	bf00      	nop
 8005498:	200009b0 	.word	0x200009b0

0800549c <__sread>:
 800549c:	b510      	push	{r4, lr}
 800549e:	460c      	mov	r4, r1
 80054a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a4:	f000 f978 	bl	8005798 <_read_r>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	bfab      	itete	ge
 80054ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054ae:	89a3      	ldrhlt	r3, [r4, #12]
 80054b0:	181b      	addge	r3, r3, r0
 80054b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054b6:	bfac      	ite	ge
 80054b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80054ba:	81a3      	strhlt	r3, [r4, #12]
 80054bc:	bd10      	pop	{r4, pc}

080054be <__swrite>:
 80054be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c2:	461f      	mov	r7, r3
 80054c4:	898b      	ldrh	r3, [r1, #12]
 80054c6:	05db      	lsls	r3, r3, #23
 80054c8:	4605      	mov	r5, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	4616      	mov	r6, r2
 80054ce:	d505      	bpl.n	80054dc <__swrite+0x1e>
 80054d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d4:	2302      	movs	r3, #2
 80054d6:	2200      	movs	r2, #0
 80054d8:	f000 f94c 	bl	8005774 <_lseek_r>
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054e6:	81a3      	strh	r3, [r4, #12]
 80054e8:	4632      	mov	r2, r6
 80054ea:	463b      	mov	r3, r7
 80054ec:	4628      	mov	r0, r5
 80054ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054f2:	f000 b973 	b.w	80057dc <_write_r>

080054f6 <__sseek>:
 80054f6:	b510      	push	{r4, lr}
 80054f8:	460c      	mov	r4, r1
 80054fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054fe:	f000 f939 	bl	8005774 <_lseek_r>
 8005502:	1c43      	adds	r3, r0, #1
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	bf15      	itete	ne
 8005508:	6560      	strne	r0, [r4, #84]	; 0x54
 800550a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800550e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005512:	81a3      	strheq	r3, [r4, #12]
 8005514:	bf18      	it	ne
 8005516:	81a3      	strhne	r3, [r4, #12]
 8005518:	bd10      	pop	{r4, pc}

0800551a <__sclose>:
 800551a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800551e:	f000 b8f7 	b.w	8005710 <_close_r>

08005522 <__swbuf_r>:
 8005522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005524:	460e      	mov	r6, r1
 8005526:	4614      	mov	r4, r2
 8005528:	4605      	mov	r5, r0
 800552a:	b118      	cbz	r0, 8005534 <__swbuf_r+0x12>
 800552c:	6a03      	ldr	r3, [r0, #32]
 800552e:	b90b      	cbnz	r3, 8005534 <__swbuf_r+0x12>
 8005530:	f7ff fb0a 	bl	8004b48 <__sinit>
 8005534:	69a3      	ldr	r3, [r4, #24]
 8005536:	60a3      	str	r3, [r4, #8]
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	071a      	lsls	r2, r3, #28
 800553c:	d525      	bpl.n	800558a <__swbuf_r+0x68>
 800553e:	6923      	ldr	r3, [r4, #16]
 8005540:	b31b      	cbz	r3, 800558a <__swbuf_r+0x68>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	6922      	ldr	r2, [r4, #16]
 8005546:	1a98      	subs	r0, r3, r2
 8005548:	6963      	ldr	r3, [r4, #20]
 800554a:	b2f6      	uxtb	r6, r6
 800554c:	4283      	cmp	r3, r0
 800554e:	4637      	mov	r7, r6
 8005550:	dc04      	bgt.n	800555c <__swbuf_r+0x3a>
 8005552:	4621      	mov	r1, r4
 8005554:	4628      	mov	r0, r5
 8005556:	f7ff ff6d 	bl	8005434 <_fflush_r>
 800555a:	b9e0      	cbnz	r0, 8005596 <__swbuf_r+0x74>
 800555c:	68a3      	ldr	r3, [r4, #8]
 800555e:	3b01      	subs	r3, #1
 8005560:	60a3      	str	r3, [r4, #8]
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	6022      	str	r2, [r4, #0]
 8005568:	701e      	strb	r6, [r3, #0]
 800556a:	6962      	ldr	r2, [r4, #20]
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	429a      	cmp	r2, r3
 8005570:	d004      	beq.n	800557c <__swbuf_r+0x5a>
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	07db      	lsls	r3, r3, #31
 8005576:	d506      	bpl.n	8005586 <__swbuf_r+0x64>
 8005578:	2e0a      	cmp	r6, #10
 800557a:	d104      	bne.n	8005586 <__swbuf_r+0x64>
 800557c:	4621      	mov	r1, r4
 800557e:	4628      	mov	r0, r5
 8005580:	f7ff ff58 	bl	8005434 <_fflush_r>
 8005584:	b938      	cbnz	r0, 8005596 <__swbuf_r+0x74>
 8005586:	4638      	mov	r0, r7
 8005588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800558a:	4621      	mov	r1, r4
 800558c:	4628      	mov	r0, r5
 800558e:	f000 f805 	bl	800559c <__swsetup_r>
 8005592:	2800      	cmp	r0, #0
 8005594:	d0d5      	beq.n	8005542 <__swbuf_r+0x20>
 8005596:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800559a:	e7f4      	b.n	8005586 <__swbuf_r+0x64>

0800559c <__swsetup_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4b2a      	ldr	r3, [pc, #168]	; (8005648 <__swsetup_r+0xac>)
 80055a0:	4605      	mov	r5, r0
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	460c      	mov	r4, r1
 80055a6:	b118      	cbz	r0, 80055b0 <__swsetup_r+0x14>
 80055a8:	6a03      	ldr	r3, [r0, #32]
 80055aa:	b90b      	cbnz	r3, 80055b0 <__swsetup_r+0x14>
 80055ac:	f7ff facc 	bl	8004b48 <__sinit>
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055b6:	0718      	lsls	r0, r3, #28
 80055b8:	d422      	bmi.n	8005600 <__swsetup_r+0x64>
 80055ba:	06d9      	lsls	r1, r3, #27
 80055bc:	d407      	bmi.n	80055ce <__swsetup_r+0x32>
 80055be:	2309      	movs	r3, #9
 80055c0:	602b      	str	r3, [r5, #0]
 80055c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055c6:	81a3      	strh	r3, [r4, #12]
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055cc:	e034      	b.n	8005638 <__swsetup_r+0x9c>
 80055ce:	0758      	lsls	r0, r3, #29
 80055d0:	d512      	bpl.n	80055f8 <__swsetup_r+0x5c>
 80055d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055d4:	b141      	cbz	r1, 80055e8 <__swsetup_r+0x4c>
 80055d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055da:	4299      	cmp	r1, r3
 80055dc:	d002      	beq.n	80055e4 <__swsetup_r+0x48>
 80055de:	4628      	mov	r0, r5
 80055e0:	f000 f90e 	bl	8005800 <_free_r>
 80055e4:	2300      	movs	r3, #0
 80055e6:	6363      	str	r3, [r4, #52]	; 0x34
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055ee:	81a3      	strh	r3, [r4, #12]
 80055f0:	2300      	movs	r3, #0
 80055f2:	6063      	str	r3, [r4, #4]
 80055f4:	6923      	ldr	r3, [r4, #16]
 80055f6:	6023      	str	r3, [r4, #0]
 80055f8:	89a3      	ldrh	r3, [r4, #12]
 80055fa:	f043 0308 	orr.w	r3, r3, #8
 80055fe:	81a3      	strh	r3, [r4, #12]
 8005600:	6923      	ldr	r3, [r4, #16]
 8005602:	b94b      	cbnz	r3, 8005618 <__swsetup_r+0x7c>
 8005604:	89a3      	ldrh	r3, [r4, #12]
 8005606:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800560a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800560e:	d003      	beq.n	8005618 <__swsetup_r+0x7c>
 8005610:	4621      	mov	r1, r4
 8005612:	4628      	mov	r0, r5
 8005614:	f000 f840 	bl	8005698 <__smakebuf_r>
 8005618:	89a0      	ldrh	r0, [r4, #12]
 800561a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800561e:	f010 0301 	ands.w	r3, r0, #1
 8005622:	d00a      	beq.n	800563a <__swsetup_r+0x9e>
 8005624:	2300      	movs	r3, #0
 8005626:	60a3      	str	r3, [r4, #8]
 8005628:	6963      	ldr	r3, [r4, #20]
 800562a:	425b      	negs	r3, r3
 800562c:	61a3      	str	r3, [r4, #24]
 800562e:	6923      	ldr	r3, [r4, #16]
 8005630:	b943      	cbnz	r3, 8005644 <__swsetup_r+0xa8>
 8005632:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005636:	d1c4      	bne.n	80055c2 <__swsetup_r+0x26>
 8005638:	bd38      	pop	{r3, r4, r5, pc}
 800563a:	0781      	lsls	r1, r0, #30
 800563c:	bf58      	it	pl
 800563e:	6963      	ldrpl	r3, [r4, #20]
 8005640:	60a3      	str	r3, [r4, #8]
 8005642:	e7f4      	b.n	800562e <__swsetup_r+0x92>
 8005644:	2000      	movs	r0, #0
 8005646:	e7f7      	b.n	8005638 <__swsetup_r+0x9c>
 8005648:	20000064 	.word	0x20000064

0800564c <__swhatbuf_r>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	460c      	mov	r4, r1
 8005650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005654:	2900      	cmp	r1, #0
 8005656:	b096      	sub	sp, #88	; 0x58
 8005658:	4615      	mov	r5, r2
 800565a:	461e      	mov	r6, r3
 800565c:	da0d      	bge.n	800567a <__swhatbuf_r+0x2e>
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005664:	f04f 0100 	mov.w	r1, #0
 8005668:	bf0c      	ite	eq
 800566a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800566e:	2340      	movne	r3, #64	; 0x40
 8005670:	2000      	movs	r0, #0
 8005672:	6031      	str	r1, [r6, #0]
 8005674:	602b      	str	r3, [r5, #0]
 8005676:	b016      	add	sp, #88	; 0x58
 8005678:	bd70      	pop	{r4, r5, r6, pc}
 800567a:	466a      	mov	r2, sp
 800567c:	f000 f858 	bl	8005730 <_fstat_r>
 8005680:	2800      	cmp	r0, #0
 8005682:	dbec      	blt.n	800565e <__swhatbuf_r+0x12>
 8005684:	9901      	ldr	r1, [sp, #4]
 8005686:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800568a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800568e:	4259      	negs	r1, r3
 8005690:	4159      	adcs	r1, r3
 8005692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005696:	e7eb      	b.n	8005670 <__swhatbuf_r+0x24>

08005698 <__smakebuf_r>:
 8005698:	898b      	ldrh	r3, [r1, #12]
 800569a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800569c:	079d      	lsls	r5, r3, #30
 800569e:	4606      	mov	r6, r0
 80056a0:	460c      	mov	r4, r1
 80056a2:	d507      	bpl.n	80056b4 <__smakebuf_r+0x1c>
 80056a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	6123      	str	r3, [r4, #16]
 80056ac:	2301      	movs	r3, #1
 80056ae:	6163      	str	r3, [r4, #20]
 80056b0:	b002      	add	sp, #8
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	ab01      	add	r3, sp, #4
 80056b6:	466a      	mov	r2, sp
 80056b8:	f7ff ffc8 	bl	800564c <__swhatbuf_r>
 80056bc:	9900      	ldr	r1, [sp, #0]
 80056be:	4605      	mov	r5, r0
 80056c0:	4630      	mov	r0, r6
 80056c2:	f7ff fc21 	bl	8004f08 <_malloc_r>
 80056c6:	b948      	cbnz	r0, 80056dc <__smakebuf_r+0x44>
 80056c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056cc:	059a      	lsls	r2, r3, #22
 80056ce:	d4ef      	bmi.n	80056b0 <__smakebuf_r+0x18>
 80056d0:	f023 0303 	bic.w	r3, r3, #3
 80056d4:	f043 0302 	orr.w	r3, r3, #2
 80056d8:	81a3      	strh	r3, [r4, #12]
 80056da:	e7e3      	b.n	80056a4 <__smakebuf_r+0xc>
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	6020      	str	r0, [r4, #0]
 80056e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e4:	81a3      	strh	r3, [r4, #12]
 80056e6:	9b00      	ldr	r3, [sp, #0]
 80056e8:	6163      	str	r3, [r4, #20]
 80056ea:	9b01      	ldr	r3, [sp, #4]
 80056ec:	6120      	str	r0, [r4, #16]
 80056ee:	b15b      	cbz	r3, 8005708 <__smakebuf_r+0x70>
 80056f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056f4:	4630      	mov	r0, r6
 80056f6:	f000 f82d 	bl	8005754 <_isatty_r>
 80056fa:	b128      	cbz	r0, 8005708 <__smakebuf_r+0x70>
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	f043 0301 	orr.w	r3, r3, #1
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	431d      	orrs	r5, r3
 800570c:	81a5      	strh	r5, [r4, #12]
 800570e:	e7cf      	b.n	80056b0 <__smakebuf_r+0x18>

08005710 <_close_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4d06      	ldr	r5, [pc, #24]	; (800572c <_close_r+0x1c>)
 8005714:	2300      	movs	r3, #0
 8005716:	4604      	mov	r4, r0
 8005718:	4608      	mov	r0, r1
 800571a:	602b      	str	r3, [r5, #0]
 800571c:	f7fb fc8b 	bl	8001036 <_close>
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	d102      	bne.n	800572a <_close_r+0x1a>
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	b103      	cbz	r3, 800572a <_close_r+0x1a>
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	bd38      	pop	{r3, r4, r5, pc}
 800572c:	200009bc 	.word	0x200009bc

08005730 <_fstat_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4d07      	ldr	r5, [pc, #28]	; (8005750 <_fstat_r+0x20>)
 8005734:	2300      	movs	r3, #0
 8005736:	4604      	mov	r4, r0
 8005738:	4608      	mov	r0, r1
 800573a:	4611      	mov	r1, r2
 800573c:	602b      	str	r3, [r5, #0]
 800573e:	f7fb fc86 	bl	800104e <_fstat>
 8005742:	1c43      	adds	r3, r0, #1
 8005744:	d102      	bne.n	800574c <_fstat_r+0x1c>
 8005746:	682b      	ldr	r3, [r5, #0]
 8005748:	b103      	cbz	r3, 800574c <_fstat_r+0x1c>
 800574a:	6023      	str	r3, [r4, #0]
 800574c:	bd38      	pop	{r3, r4, r5, pc}
 800574e:	bf00      	nop
 8005750:	200009bc 	.word	0x200009bc

08005754 <_isatty_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4d06      	ldr	r5, [pc, #24]	; (8005770 <_isatty_r+0x1c>)
 8005758:	2300      	movs	r3, #0
 800575a:	4604      	mov	r4, r0
 800575c:	4608      	mov	r0, r1
 800575e:	602b      	str	r3, [r5, #0]
 8005760:	f7fb fc85 	bl	800106e <_isatty>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d102      	bne.n	800576e <_isatty_r+0x1a>
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	b103      	cbz	r3, 800576e <_isatty_r+0x1a>
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	bd38      	pop	{r3, r4, r5, pc}
 8005770:	200009bc 	.word	0x200009bc

08005774 <_lseek_r>:
 8005774:	b538      	push	{r3, r4, r5, lr}
 8005776:	4d07      	ldr	r5, [pc, #28]	; (8005794 <_lseek_r+0x20>)
 8005778:	4604      	mov	r4, r0
 800577a:	4608      	mov	r0, r1
 800577c:	4611      	mov	r1, r2
 800577e:	2200      	movs	r2, #0
 8005780:	602a      	str	r2, [r5, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	f7fb fc7e 	bl	8001084 <_lseek>
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	d102      	bne.n	8005792 <_lseek_r+0x1e>
 800578c:	682b      	ldr	r3, [r5, #0]
 800578e:	b103      	cbz	r3, 8005792 <_lseek_r+0x1e>
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	bd38      	pop	{r3, r4, r5, pc}
 8005794:	200009bc 	.word	0x200009bc

08005798 <_read_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4d07      	ldr	r5, [pc, #28]	; (80057b8 <_read_r+0x20>)
 800579c:	4604      	mov	r4, r0
 800579e:	4608      	mov	r0, r1
 80057a0:	4611      	mov	r1, r2
 80057a2:	2200      	movs	r2, #0
 80057a4:	602a      	str	r2, [r5, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f7fb fc0c 	bl	8000fc4 <_read>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <_read_r+0x1e>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <_read_r+0x1e>
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	200009bc 	.word	0x200009bc

080057bc <_sbrk_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	4d06      	ldr	r5, [pc, #24]	; (80057d8 <_sbrk_r+0x1c>)
 80057c0:	2300      	movs	r3, #0
 80057c2:	4604      	mov	r4, r0
 80057c4:	4608      	mov	r0, r1
 80057c6:	602b      	str	r3, [r5, #0]
 80057c8:	f7fb fc6a 	bl	80010a0 <_sbrk>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d102      	bne.n	80057d6 <_sbrk_r+0x1a>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	b103      	cbz	r3, 80057d6 <_sbrk_r+0x1a>
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	bd38      	pop	{r3, r4, r5, pc}
 80057d8:	200009bc 	.word	0x200009bc

080057dc <_write_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	4d07      	ldr	r5, [pc, #28]	; (80057fc <_write_r+0x20>)
 80057e0:	4604      	mov	r4, r0
 80057e2:	4608      	mov	r0, r1
 80057e4:	4611      	mov	r1, r2
 80057e6:	2200      	movs	r2, #0
 80057e8:	602a      	str	r2, [r5, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f7fb fc07 	bl	8000ffe <_write>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d102      	bne.n	80057fa <_write_r+0x1e>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	b103      	cbz	r3, 80057fa <_write_r+0x1e>
 80057f8:	6023      	str	r3, [r4, #0]
 80057fa:	bd38      	pop	{r3, r4, r5, pc}
 80057fc:	200009bc 	.word	0x200009bc

08005800 <_free_r>:
 8005800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005802:	2900      	cmp	r1, #0
 8005804:	d044      	beq.n	8005890 <_free_r+0x90>
 8005806:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800580a:	9001      	str	r0, [sp, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f1a1 0404 	sub.w	r4, r1, #4
 8005812:	bfb8      	it	lt
 8005814:	18e4      	addlt	r4, r4, r3
 8005816:	f7ff fe35 	bl	8005484 <__malloc_lock>
 800581a:	4a1e      	ldr	r2, [pc, #120]	; (8005894 <_free_r+0x94>)
 800581c:	9801      	ldr	r0, [sp, #4]
 800581e:	6813      	ldr	r3, [r2, #0]
 8005820:	b933      	cbnz	r3, 8005830 <_free_r+0x30>
 8005822:	6063      	str	r3, [r4, #4]
 8005824:	6014      	str	r4, [r2, #0]
 8005826:	b003      	add	sp, #12
 8005828:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800582c:	f7ff be30 	b.w	8005490 <__malloc_unlock>
 8005830:	42a3      	cmp	r3, r4
 8005832:	d908      	bls.n	8005846 <_free_r+0x46>
 8005834:	6825      	ldr	r5, [r4, #0]
 8005836:	1961      	adds	r1, r4, r5
 8005838:	428b      	cmp	r3, r1
 800583a:	bf01      	itttt	eq
 800583c:	6819      	ldreq	r1, [r3, #0]
 800583e:	685b      	ldreq	r3, [r3, #4]
 8005840:	1949      	addeq	r1, r1, r5
 8005842:	6021      	streq	r1, [r4, #0]
 8005844:	e7ed      	b.n	8005822 <_free_r+0x22>
 8005846:	461a      	mov	r2, r3
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	b10b      	cbz	r3, 8005850 <_free_r+0x50>
 800584c:	42a3      	cmp	r3, r4
 800584e:	d9fa      	bls.n	8005846 <_free_r+0x46>
 8005850:	6811      	ldr	r1, [r2, #0]
 8005852:	1855      	adds	r5, r2, r1
 8005854:	42a5      	cmp	r5, r4
 8005856:	d10b      	bne.n	8005870 <_free_r+0x70>
 8005858:	6824      	ldr	r4, [r4, #0]
 800585a:	4421      	add	r1, r4
 800585c:	1854      	adds	r4, r2, r1
 800585e:	42a3      	cmp	r3, r4
 8005860:	6011      	str	r1, [r2, #0]
 8005862:	d1e0      	bne.n	8005826 <_free_r+0x26>
 8005864:	681c      	ldr	r4, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	6053      	str	r3, [r2, #4]
 800586a:	440c      	add	r4, r1
 800586c:	6014      	str	r4, [r2, #0]
 800586e:	e7da      	b.n	8005826 <_free_r+0x26>
 8005870:	d902      	bls.n	8005878 <_free_r+0x78>
 8005872:	230c      	movs	r3, #12
 8005874:	6003      	str	r3, [r0, #0]
 8005876:	e7d6      	b.n	8005826 <_free_r+0x26>
 8005878:	6825      	ldr	r5, [r4, #0]
 800587a:	1961      	adds	r1, r4, r5
 800587c:	428b      	cmp	r3, r1
 800587e:	bf04      	itt	eq
 8005880:	6819      	ldreq	r1, [r3, #0]
 8005882:	685b      	ldreq	r3, [r3, #4]
 8005884:	6063      	str	r3, [r4, #4]
 8005886:	bf04      	itt	eq
 8005888:	1949      	addeq	r1, r1, r5
 800588a:	6021      	streq	r1, [r4, #0]
 800588c:	6054      	str	r4, [r2, #4]
 800588e:	e7ca      	b.n	8005826 <_free_r+0x26>
 8005890:	b003      	add	sp, #12
 8005892:	bd30      	pop	{r4, r5, pc}
 8005894:	200009b4 	.word	0x200009b4

08005898 <_init>:
 8005898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589a:	bf00      	nop
 800589c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589e:	bc08      	pop	{r3}
 80058a0:	469e      	mov	lr, r3
 80058a2:	4770      	bx	lr

080058a4 <_fini>:
 80058a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a6:	bf00      	nop
 80058a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058aa:	bc08      	pop	{r3}
 80058ac:	469e      	mov	lr, r3
 80058ae:	4770      	bx	lr
