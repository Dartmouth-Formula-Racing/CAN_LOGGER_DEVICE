
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010bb8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  08010db8  08010db8  00020db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011620  08011620  00030168  2**0
                  CONTENTS
  4 .ARM          00000008  08011620  08011620  00021620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011628  08011628  00030168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011628  08011628  00021628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801162c  0801162c  0002162c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08011630  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eb4  20000168  08011798  00030168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000501c  08011798  0003501c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f2cf  00000000  00000000  000301d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b6e  00000000  00000000  0004f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  00054018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001256  00000000  00000000  00055848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e070  00000000  00000000  00056a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000219bf  00000000  00000000  00084b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001009db  00000000  00000000  000a64cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d70  00000000  00000000  001a6ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001adc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000168 	.word	0x20000168
 800021c:	00000000 	.word	0x00000000
 8000220:	08010da0 	.word	0x08010da0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000016c 	.word	0x2000016c
 800023c:	08010da0 	.word	0x08010da0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b0c5      	sub	sp, #276	; 0x114
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 f858 	bl	8001696 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 fa2d 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fb45 	bl	8000c78 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 fb1d 	bl	8000c2c <MX_DMA_Init>
  MX_CAN1_Init();
 80005f2:	f000 fa8f 	bl	8000b14 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 80005f6:	f000 fac3 	bl	8000b80 <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 fae7 	bl	8000bcc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005fe:	f009 f8c1 	bl	8009784 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000602:	f00e fc1d 	bl	800ee40 <MX_USB_DEVICE_Init>
		RESET_BUFFER,
		RESET_STATE,
		POWER_OFF
	} state_t;
	//Starting state is PERIPHERAL_INIT
	POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 8000606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800060a:	48b4      	ldr	r0, [pc, #720]	; (80008dc <main+0x300>)
 800060c:	f002 fd1e 	bl	800304c <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	4bb2      	ldr	r3, [pc, #712]	; (80008e0 <main+0x304>)
 8000616:	701a      	strb	r2, [r3, #0]
	state_t state = POWER_STATE ? PERIPHERAL_INIT : POWER_OFF;
 8000618:	4bb1      	ldr	r3, [pc, #708]	; (80008e0 <main+0x304>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <main+0x48>
 8000620:	2300      	movs	r3, #0
 8000622:	e000      	b.n	8000626 <main+0x4a>
 8000624:	230b      	movs	r3, #11
 8000626:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 800062a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800062e:	2b0b      	cmp	r3, #11
 8000630:	f200 81dc 	bhi.w	80009ec <main+0x410>
 8000634:	a201      	add	r2, pc, #4	; (adr r2, 800063c <main+0x60>)
 8000636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063a:	bf00      	nop
 800063c:	0800066d 	.word	0x0800066d
 8000640:	080006eb 	.word	0x080006eb
 8000644:	080007f9 	.word	0x080007f9
 8000648:	08000a01 	.word	0x08000a01
 800064c:	08000a01 	.word	0x08000a01
 8000650:	08000823 	.word	0x08000823
 8000654:	08000a01 	.word	0x08000a01
 8000658:	08000867 	.word	0x08000867
 800065c:	08000a01 	.word	0x08000a01
 8000660:	08000887 	.word	0x08000887
 8000664:	0800098f 	.word	0x0800098f
 8000668:	080009d1 	.word	0x080009d1
		case PERIPHERAL_INIT:
			buffer1[0] = '\00';
 800066c:	4b9d      	ldr	r3, [pc, #628]	; (80008e4 <main+0x308>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
			buffer2[0] = '\00';
 8000672:	4b9d      	ldr	r3, [pc, #628]	; (80008e8 <main+0x30c>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
			double_buffer_fill_level[0] = 0;
 8000678:	4b9c      	ldr	r3, [pc, #624]	; (80008ec <main+0x310>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
			double_buffer_fill_level[1] = 0;
 800067e:	4b9b      	ldr	r3, [pc, #620]	; (80008ec <main+0x310>)
 8000680:	2200      	movs	r2, #0
 8000682:	705a      	strb	r2, [r3, #1]
			filling_buffer = 0;
 8000684:	4b9a      	ldr	r3, [pc, #616]	; (80008f0 <main+0x314>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]

			printf("Initializing Peripherals...\r\n");
 800068a:	489a      	ldr	r0, [pc, #616]	; (80008f4 <main+0x318>)
 800068c:	f00f fc02 	bl	800fe94 <puts>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin,
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000696:	4898      	ldr	r0, [pc, #608]	; (80008f8 <main+0x31c>)
 8000698:	f002 fcf0 	bl	800307c <HAL_GPIO_WritePin>
					GPIO_PIN_RESET); //Red LED

			//Initializing CAN
			if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800069c:	4897      	ldr	r0, [pc, #604]	; (80008fc <main+0x320>)
 800069e:	f001 fa63 	bl	8001b68 <HAL_CAN_Start>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <main+0xd2>
				Error_Handler();
 80006a8:	f000 fcb6 	bl	8001018 <Error_Handler>
 80006ac:	e006      	b.n	80006bc <main+0xe0>
			else if (CAN_Filter_Config() != HAL_OK)
 80006ae:	f000 fc3f 	bl	8000f30 <CAN_Filter_Config>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <main+0xe0>
				Error_Handler();
 80006b8:	f000 fcae 	bl	8001018 <Error_Handler>

			printf("CAN initialization succeeded...\r\n");
 80006bc:	4890      	ldr	r0, [pc, #576]	; (8000900 <main+0x324>)
 80006be:	f00f fbe9 	bl	800fe94 <puts>

			//Mount and Format SD Card
			if (f_mount(&SDFatFS, SDPath, 0) != FR_OK) {
 80006c2:	2200      	movs	r2, #0
 80006c4:	498f      	ldr	r1, [pc, #572]	; (8000904 <main+0x328>)
 80006c6:	4890      	ldr	r0, [pc, #576]	; (8000908 <main+0x32c>)
 80006c8:	f00d fda0 	bl	800e20c <f_mount>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d004      	beq.n	80006dc <main+0x100>
				printf("Mounting failed!\r\n");
 80006d2:	488e      	ldr	r0, [pc, #568]	; (800090c <main+0x330>)
 80006d4:	f00f fbde 	bl	800fe94 <puts>
				Error_Handler();
 80006d8:	f000 fc9e 	bl	8001018 <Error_Handler>
			}

			printf("SD initialization succeeded...\r\n");
 80006dc:	488c      	ldr	r0, [pc, #560]	; (8000910 <main+0x334>)
 80006de:	f00f fbd9 	bl	800fe94 <puts>

			state = CREATE_LOG_FILE;
 80006e2:	2301      	movs	r3, #1
 80006e4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

			break;
 80006e8:	e18f      	b.n	8000a0a <main+0x42e>
		case CREATE_LOG_FILE:
			printf("Creating new log file...\r\n");
 80006ea:	488a      	ldr	r0, [pc, #552]	; (8000914 <main+0x338>)
 80006ec:	f00f fbd2 	bl	800fe94 <puts>

			TCHAR filename[FILENAME_MAX_BYTES];

			if (f_opendir(&dir, "/CAN_DATA") != FR_OK) {
 80006f0:	4989      	ldr	r1, [pc, #548]	; (8000918 <main+0x33c>)
 80006f2:	488a      	ldr	r0, [pc, #552]	; (800091c <main+0x340>)
 80006f4:	f00e f9ab 	bl	800ea4e <f_opendir>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d004      	beq.n	8000708 <main+0x12c>
				printf("Failed to open root directory!\r\n");
 80006fe:	4888      	ldr	r0, [pc, #544]	; (8000920 <main+0x344>)
 8000700:	f00f fbc8 	bl	800fe94 <puts>
				Error_Handler();
 8000704:	f000 fc88 	bl	8001018 <Error_Handler>
			}
			char last_file_number[5];
			uint16_t max_file_number = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			do {
				f_readdir(&dir, &fno);
 800070e:	4985      	ldr	r1, [pc, #532]	; (8000924 <main+0x348>)
 8000710:	4882      	ldr	r0, [pc, #520]	; (800091c <main+0x340>)
 8000712:	f00e fa35 	bl	800eb80 <f_readdir>
				if (fno.fname[0] != 0){
 8000716:	4b83      	ldr	r3, [pc, #524]	; (8000924 <main+0x348>)
 8000718:	7d9b      	ldrb	r3, [r3, #22]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d034      	beq.n	8000788 <main+0x1ac>
					for(int i=4; i<9; i++)
 800071e:	2304      	movs	r3, #4
 8000720:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000724:	e012      	b.n	800074c <main+0x170>
						last_file_number[i-4] = fno.fname[i];
 8000726:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800072a:	3b04      	subs	r3, #4
 800072c:	497d      	ldr	r1, [pc, #500]	; (8000924 <main+0x348>)
 800072e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000732:	440a      	add	r2, r1
 8000734:	3216      	adds	r2, #22
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800073c:	443b      	add	r3, r7
 800073e:	f803 2c10 	strb.w	r2, [r3, #-16]
					for(int i=4; i<9; i++)
 8000742:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000746:	3301      	adds	r3, #1
 8000748:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800074c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000750:	2b08      	cmp	r3, #8
 8000752:	dde8      	ble.n	8000726 <main+0x14a>

					if (max_file_number < strtol(last_file_number, NULL, 10))
 8000754:	f8b7 410c 	ldrh.w	r4, [r7, #268]	; 0x10c
 8000758:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800075c:	220a      	movs	r2, #10
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f00f fb09 	bl	800fd78 <strtol>
 8000766:	4603      	mov	r3, r0
 8000768:	429c      	cmp	r4, r3
 800076a:	da09      	bge.n	8000780 <main+0x1a4>
						max_file_number = strtol(last_file_number, NULL, 10);
 800076c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000770:	220a      	movs	r2, #10
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f00f faff 	bl	800fd78 <strtol>
 800077a:	4603      	mov	r3, r0
 800077c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

					printf("File found: %s\n\r", fno.fname); // Print File Name
 8000780:	4969      	ldr	r1, [pc, #420]	; (8000928 <main+0x34c>)
 8000782:	486a      	ldr	r0, [pc, #424]	; (800092c <main+0x350>)
 8000784:	f00f fb20 	bl	800fdc8 <iprintf>
				}
			} while (fno.fname[0] != 0);
 8000788:	4b66      	ldr	r3, [pc, #408]	; (8000924 <main+0x348>)
 800078a:	7d9b      	ldrb	r3, [r3, #22]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d1be      	bne.n	800070e <main+0x132>

			snprintf(filename, FILENAME_MAX_BYTES, "/CAN_DATA/CAN_%05d.log", max_file_number + 1);
 8000790:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000794:	3301      	adds	r3, #1
 8000796:	4638      	mov	r0, r7
 8000798:	4a65      	ldr	r2, [pc, #404]	; (8000930 <main+0x354>)
 800079a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079e:	f00f f985 	bl	800faac <sniprintf>

			f_closedir(&dir);
 80007a2:	485e      	ldr	r0, [pc, #376]	; (800091c <main+0x340>)
 80007a4:	f00e f9c6 	bl	800eb34 <f_closedir>
			//Open file for writing (Create)
			if (f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE)
 80007a8:	463b      	mov	r3, r7
 80007aa:	220a      	movs	r2, #10
 80007ac:	4619      	mov	r1, r3
 80007ae:	4861      	ldr	r0, [pc, #388]	; (8000934 <main+0x358>)
 80007b0:	f00d fd72 	bl	800e298 <f_open>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d006      	beq.n	80007c8 <main+0x1ec>
					!= FR_OK) {
				printf("Failed to create new log file: %s ...!\r\n", filename);
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	485e      	ldr	r0, [pc, #376]	; (8000938 <main+0x35c>)
 80007c0:	f00f fb02 	bl	800fdc8 <iprintf>
				Error_Handler();
 80007c4:	f000 fc28 	bl	8001018 <Error_Handler>
			}
			printf("Starting new log file: %s ...\r\n", filename);
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	485b      	ldr	r0, [pc, #364]	; (800093c <main+0x360>)
 80007ce:	f00f fafb 	bl	800fdc8 <iprintf>

			if (HAL_CAN_ActivateNotification(&hcan1,
 80007d2:	2102      	movs	r1, #2
 80007d4:	4849      	ldr	r0, [pc, #292]	; (80008fc <main+0x320>)
 80007d6:	f001 fb66 	bl	8001ea6 <HAL_CAN_ActivateNotification>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <main+0x208>
					CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
				/* Notification Error */
				Error_Handler();
 80007e0:	f000 fc1a 	bl	8001018 <Error_Handler>
			}

			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_SET); // Green LED
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ea:	4843      	ldr	r0, [pc, #268]	; (80008f8 <main+0x31c>)
 80007ec:	f002 fc46 	bl	800307c <HAL_GPIO_WritePin>

			state = STANDBY;
 80007f0:	2302      	movs	r3, #2
 80007f2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 80007f6:	e108      	b.n	8000a0a <main+0x42e>

		case STANDBY:
			if (POWER_STATE & buffer_filled)
 80007f8:	4b39      	ldr	r3, [pc, #228]	; (80008e0 <main+0x304>)
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	4b50      	ldr	r3, [pc, #320]	; (8000940 <main+0x364>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4013      	ands	r3, r2
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d003      	beq.n	8000810 <main+0x234>
				state = SD_CARD_WRITE;
 8000808:	2305      	movs	r3, #5
 800080a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			else if (!POWER_STATE)
				state = RESET_STATE;
			break;
 800080e:	e0f9      	b.n	8000a04 <main+0x428>
			else if (!POWER_STATE)
 8000810:	4b33      	ldr	r3, [pc, #204]	; (80008e0 <main+0x304>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	f040 80f5 	bne.w	8000a04 <main+0x428>
				state = RESET_STATE;
 800081a:	230a      	movs	r3, #10
 800081c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 8000820:	e0f0      	b.n	8000a04 <main+0x428>

		case SWITCH_BUFFER:
			break;

		case SD_CARD_WRITE:
			res = f_write(&SDFile, filling_buffer ? buffer1 : buffer2,
 8000822:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <main+0x314>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <main+0x252>
 800082a:	492e      	ldr	r1, [pc, #184]	; (80008e4 <main+0x308>)
 800082c:	e000      	b.n	8000830 <main+0x254>
 800082e:	492e      	ldr	r1, [pc, #184]	; (80008e8 <main+0x30c>)
 8000830:	4b44      	ldr	r3, [pc, #272]	; (8000944 <main+0x368>)
 8000832:	f44f 52a4 	mov.w	r2, #5248	; 0x1480
 8000836:	483f      	ldr	r0, [pc, #252]	; (8000934 <main+0x358>)
 8000838:	f00d feec 	bl	800e614 <f_write>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	4b41      	ldr	r3, [pc, #260]	; (8000948 <main+0x36c>)
 8000842:	701a      	strb	r2, [r3, #0]
			ENCODED_CAN_SIZE_BYTES * CAN_MESSAGES_TO_BUFFER,
					(void*) &byteswritten);
			if ((byteswritten == 0) || (res != FR_OK)) {
 8000844:	4b3f      	ldr	r3, [pc, #252]	; (8000944 <main+0x368>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d003      	beq.n	8000854 <main+0x278>
 800084c:	4b3e      	ldr	r3, [pc, #248]	; (8000948 <main+0x36c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d004      	beq.n	800085e <main+0x282>
				printf("\r\nWriting Failed!\r\n");
 8000854:	483d      	ldr	r0, [pc, #244]	; (800094c <main+0x370>)
 8000856:	f00f fb1d 	bl	800fe94 <puts>
				Error_Handler();
 800085a:	f000 fbdd 	bl	8001018 <Error_Handler>
			}

			state = USB_TRANSMIT;
 800085e:	2307      	movs	r3, #7
 8000860:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 8000864:	e0d1      	b.n	8000a0a <main+0x42e>

		case SD_CARD_WRITE_ERROR:
			break;

		case USB_TRANSMIT:
			CDC_Transmit_FS(filling_buffer ? buffer1 : buffer2,
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <main+0x314>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <main+0x296>
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <main+0x308>)
 8000870:	e000      	b.n	8000874 <main+0x298>
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <main+0x30c>)
 8000874:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 8000878:	4618      	mov	r0, r3
 800087a:	f00e fb9f 	bl	800efbc <CDC_Transmit_FS>
			ENCODED_CAN_SIZE_BYTES * CAN_MESSAGES_TO_BUFFER);

			state = RESET_BUFFER;
 800087e:	2309      	movs	r3, #9
 8000880:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 8000884:	e0c1      	b.n	8000a0a <main+0x42e>

		case USB_TRANSMIT_ERROR:
			break;

		case RESET_BUFFER:
			buffer_emptyings++;
 8000886:	4b32      	ldr	r3, [pc, #200]	; (8000950 <main+0x374>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	4a30      	ldr	r2, [pc, #192]	; (8000950 <main+0x374>)
 800088e:	6013      	str	r3, [r2, #0]
			printf("emptied buffer %d\n\r", !filling_buffer);
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <main+0x314>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	bf0c      	ite	eq
 8000898:	2301      	moveq	r3, #1
 800089a:	2300      	movne	r3, #0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4619      	mov	r1, r3
 80008a0:	482c      	ldr	r0, [pc, #176]	; (8000954 <main+0x378>)
 80008a2:	f00f fa91 	bl	800fdc8 <iprintf>
			printf("buffers emptied: %ld\n\r", buffer_emptyings);
 80008a6:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <main+0x374>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	482a      	ldr	r0, [pc, #168]	; (8000958 <main+0x37c>)
 80008ae:	f00f fa8b 	bl	800fdc8 <iprintf>
			printf("sizeof: %ld\n\r", byteswritten);
 80008b2:	4b24      	ldr	r3, [pc, #144]	; (8000944 <main+0x368>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4619      	mov	r1, r3
 80008b8:	4828      	ldr	r0, [pc, #160]	; (800095c <main+0x380>)
 80008ba:	f00f fa85 	bl	800fdc8 <iprintf>

			total_size += byteswritten;
 80008be:	4b28      	ldr	r3, [pc, #160]	; (8000960 <main+0x384>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <main+0x368>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	4a25      	ldr	r2, [pc, #148]	; (8000960 <main+0x384>)
 80008ca:	6013      	str	r3, [r2, #0]
			if (filling_buffer) {
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <main+0x314>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d047      	beq.n	8000964 <main+0x388>
				buffer1[0] = '\00';
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <main+0x308>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e046      	b.n	800096a <main+0x38e>
 80008dc:	40021000 	.word	0x40021000
 80008e0:	2000051c 	.word	0x2000051c
 80008e4:	20000520 	.word	0x20000520
 80008e8:	200019a4 	.word	0x200019a4
 80008ec:	20002e28 	.word	0x20002e28
 80008f0:	20002e2a 	.word	0x20002e2a
 80008f4:	08010db8 	.word	0x08010db8
 80008f8:	40021400 	.word	0x40021400
 80008fc:	20000184 	.word	0x20000184
 8000900:	08010dd8 	.word	0x08010dd8
 8000904:	20002e44 	.word	0x20002e44
 8000908:	20002e48 	.word	0x20002e48
 800090c:	08010dfc 	.word	0x08010dfc
 8000910:	08010e10 	.word	0x08010e10
 8000914:	08010e30 	.word	0x08010e30
 8000918:	08010e4c 	.word	0x08010e4c
 800091c:	2000037c 	.word	0x2000037c
 8000920:	08010e58 	.word	0x08010e58
 8000924:	200003b0 	.word	0x200003b0
 8000928:	200003c6 	.word	0x200003c6
 800092c:	08010e78 	.word	0x08010e78
 8000930:	08010e8c 	.word	0x08010e8c
 8000934:	2000307c 	.word	0x2000307c
 8000938:	08010ea4 	.word	0x08010ea4
 800093c:	08010ed0 	.word	0x08010ed0
 8000940:	20002e30 	.word	0x20002e30
 8000944:	200004f4 	.word	0x200004f4
 8000948:	20000378 	.word	0x20000378
 800094c:	08010ef0 	.word	0x08010ef0
 8000950:	20002e2c 	.word	0x20002e2c
 8000954:	08010f04 	.word	0x08010f04
 8000958:	08010f18 	.word	0x08010f18
 800095c:	08010f30 	.word	0x08010f30
 8000960:	20002e34 	.word	0x20002e34
			} else {
				buffer2[0] = '\00';
 8000964:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <main+0x430>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
			}
			double_buffer_fill_level[!filling_buffer] = 0;
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <main+0x434>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	bf0c      	ite	eq
 8000972:	2301      	moveq	r3, #1
 8000974:	2300      	movne	r3, #0
 8000976:	b2db      	uxtb	r3, r3
 8000978:	461a      	mov	r2, r3
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <main+0x438>)
 800097c:	2100      	movs	r1, #0
 800097e:	5499      	strb	r1, [r3, r2]
			buffer_filled = 0;
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <main+0x43c>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]

			state = STANDBY;
 8000986:	2302      	movs	r3, #2
 8000988:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 800098c:	e03d      	b.n	8000a0a <main+0x42e>

		case RESET_STATE:
			HAL_CAN_Stop(&hcan1);
 800098e:	4823      	ldr	r0, [pc, #140]	; (8000a1c <main+0x440>)
 8000990:	f001 f92e 	bl	8001bf0 <HAL_CAN_Stop>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin,
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099a:	4821      	ldr	r0, [pc, #132]	; (8000a20 <main+0x444>)
 800099c:	f002 fb6e 	bl	800307c <HAL_GPIO_WritePin>
					GPIO_PIN_RESET); //Red LED

			printf("total sizeof: %ld\n\r", total_size);
 80009a0:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <main+0x448>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4820      	ldr	r0, [pc, #128]	; (8000a28 <main+0x44c>)
 80009a8:	f00f fa0e 	bl	800fdc8 <iprintf>

			printf("\r\nUnmounting!\r\n");
 80009ac:	481f      	ldr	r0, [pc, #124]	; (8000a2c <main+0x450>)
 80009ae:	f00f fa71 	bl	800fe94 <puts>
			f_close(&SDFile);
 80009b2:	481f      	ldr	r0, [pc, #124]	; (8000a30 <main+0x454>)
 80009b4:	f00e f821 	bl	800e9fa <f_close>
			f_mount(0, (TCHAR const*) NULL, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	2000      	movs	r0, #0
 80009be:	f00d fc25 	bl	800e20c <f_mount>

			printf("Turning off!\n\r");
 80009c2:	481c      	ldr	r0, [pc, #112]	; (8000a34 <main+0x458>)
 80009c4:	f00f fa00 	bl	800fdc8 <iprintf>
			state = POWER_OFF;
 80009c8:	230b      	movs	r3, #11
 80009ca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 80009ce:	e01c      	b.n	8000a0a <main+0x42e>

		case POWER_OFF:
			HAL_Delay(1000);
 80009d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d4:	f000 febc 	bl	8001750 <HAL_Delay>

			if (POWER_STATE) {
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <main+0x45c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d013      	beq.n	8000a08 <main+0x42c>
				printf("Turning back on!\n\r");
 80009e0:	4816      	ldr	r0, [pc, #88]	; (8000a3c <main+0x460>)
 80009e2:	f00f f9f1 	bl	800fdc8 <iprintf>
				HAL_NVIC_SystemReset();
 80009e6:	f001 fdce 	bl	8002586 <HAL_NVIC_SystemReset>
			}
			break;
 80009ea:	e00d      	b.n	8000a08 <main+0x42c>

		default:
			printf("CAN logger in unknown state!");
 80009ec:	4814      	ldr	r0, [pc, #80]	; (8000a40 <main+0x464>)
 80009ee:	f00f f9eb 	bl	800fdc8 <iprintf>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin,
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f8:	4809      	ldr	r0, [pc, #36]	; (8000a20 <main+0x444>)
 80009fa:	f002 fb3f 	bl	800307c <HAL_GPIO_WritePin>
					GPIO_PIN_RESET); // Red LED
			break;
 80009fe:	e004      	b.n	8000a0a <main+0x42e>
			break;
 8000a00:	bf00      	nop
 8000a02:	e612      	b.n	800062a <main+0x4e>
			break;
 8000a04:	bf00      	nop
 8000a06:	e610      	b.n	800062a <main+0x4e>
			break;
 8000a08:	bf00      	nop
		switch (state) {
 8000a0a:	e60e      	b.n	800062a <main+0x4e>
 8000a0c:	200019a4 	.word	0x200019a4
 8000a10:	20002e2a 	.word	0x20002e2a
 8000a14:	20002e28 	.word	0x20002e28
 8000a18:	20002e30 	.word	0x20002e30
 8000a1c:	20000184 	.word	0x20000184
 8000a20:	40021400 	.word	0x40021400
 8000a24:	20002e34 	.word	0x20002e34
 8000a28:	08010f40 	.word	0x08010f40
 8000a2c:	08010f54 	.word	0x08010f54
 8000a30:	2000307c 	.word	0x2000307c
 8000a34:	08010f64 	.word	0x08010f64
 8000a38:	2000051c 	.word	0x2000051c
 8000a3c:	08010f74 	.word	0x08010f74
 8000a40:	08010f88 	.word	0x08010f88

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b094      	sub	sp, #80	; 0x50
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	2234      	movs	r2, #52	; 0x34
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f00f fa35 	bl	800fec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <SystemClock_Config+0xc8>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a27      	ldr	r2, [pc, #156]	; (8000b0c <SystemClock_Config+0xc8>)
 8000a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <SystemClock_Config+0xc8>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a80:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a88:	4a21      	ldr	r2, [pc, #132]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ab4:	2360      	movs	r3, #96	; 0x60
 8000ab6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000abc:	2304      	movs	r3, #4
 8000abe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f003 fdcd 	bl	8004668 <HAL_RCC_OscConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ad4:	f000 faa0 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad8:	230f      	movs	r3, #15
 8000ada:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000adc:	2302      	movs	r3, #2
 8000ade:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	2101      	movs	r1, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f004 f865 	bl	8004bc4 <HAL_RCC_ClockConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b00:	f000 fa8a 	bl	8001018 <Error_Handler>
  }
}
 8000b04:	bf00      	nop
 8000b06:	3750      	adds	r7, #80	; 0x50
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40007000 	.word	0x40007000

08000b14 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b1a:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <MX_CAN1_Init+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b20:	2203      	movs	r2, #3
 8000b22:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b32:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000b36:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b3e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b66:	f000 fe17 	bl	8001798 <HAL_CAN_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000b70:	f000 fa52 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000184 	.word	0x20000184
 8000b7c:	40006400 	.word	0x40006400

08000b80 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_SDMMC1_SD_Init+0x44>)
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <MX_SDMMC1_SD_Init+0x48>)
 8000b88:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_SDMMC1_SD_Init+0x44>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_SDMMC1_SD_Init+0x44>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_SDMMC1_SD_Init+0x44>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_SDMMC1_SD_Init+0x44>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_SDMMC1_SD_Init+0x44>)
 8000ba4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba8:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_SDMMC1_SD_Init+0x44>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_SDMMC1_SD_Init+0x44>)
 8000bb2:	f004 fe55 	bl	8005860 <HAL_SD_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_SDMMC1_SD_Init+0x40>
		Error_Handler();
 8000bbc:	f000 fa2c 	bl	8001018 <Error_Handler>
	}
  /* USER CODE END SDMMC1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200001ac 	.word	0x200001ac
 8000bc8:	40012c00 	.word	0x40012c00

08000bcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000bd2:	4a15      	ldr	r2, [pc, #84]	; (8000c28 <MX_USART3_UART_Init+0x5c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000c10:	f005 ff4e 	bl	8006ab0 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c1a:	f000 f9fd 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200002f0 	.word	0x200002f0
 8000c28:	40004800 	.word	0x40004800

08000c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_DMA_Init+0x48>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <MX_DMA_Init+0x48>)
 8000c38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <MX_DMA_Init+0x48>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	203b      	movs	r0, #59	; 0x3b
 8000c50:	f001 fc6f 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c54:	203b      	movs	r0, #59	; 0x3b
 8000c56:	f001 fc88 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2045      	movs	r0, #69	; 0x45
 8000c60:	f001 fc67 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c64:	2045      	movs	r0, #69	; 0x45
 8000c66:	f001 fc80 	bl	800256a <HAL_NVIC_EnableIRQ>

}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b69      	ldr	r3, [pc, #420]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a68      	ldr	r2, [pc, #416]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b66      	ldr	r3, [pc, #408]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	623b      	str	r3, [r7, #32]
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	4b63      	ldr	r3, [pc, #396]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a62      	ldr	r2, [pc, #392]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b60      	ldr	r3, [pc, #384]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cba:	61fb      	str	r3, [r7, #28]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbe:	4b5d      	ldr	r3, [pc, #372]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a5c      	ldr	r2, [pc, #368]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b5a      	ldr	r3, [pc, #360]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd6:	4b57      	ldr	r3, [pc, #348]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a56      	ldr	r2, [pc, #344]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cdc:	f043 0310 	orr.w	r3, r3, #16
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b54      	ldr	r3, [pc, #336]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cee:	4b51      	ldr	r3, [pc, #324]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a50      	ldr	r2, [pc, #320]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b4e      	ldr	r3, [pc, #312]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d06:	4b4b      	ldr	r3, [pc, #300]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a4a      	ldr	r2, [pc, #296]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b48      	ldr	r3, [pc, #288]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b45      	ldr	r3, [pc, #276]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a44      	ldr	r2, [pc, #272]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a3e      	ldr	r2, [pc, #248]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d54:	4838      	ldr	r0, [pc, #224]	; (8000e38 <MX_GPIO_Init+0x1c0>)
 8000d56:	f002 f991 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2140      	movs	r1, #64	; 0x40
 8000d5e:	4837      	ldr	r0, [pc, #220]	; (8000e3c <MX_GPIO_Init+0x1c4>)
 8000d60:	f002 f98c 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2180      	movs	r1, #128	; 0x80
 8000d68:	4835      	ldr	r0, [pc, #212]	; (8000e40 <MX_GPIO_Init+0x1c8>)
 8000d6a:	f002 f987 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Error_LED_Pin */
  GPIO_InitStruct.Pin = Error_LED_Pin;
 8000d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Error_LED_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	482c      	ldr	r0, [pc, #176]	; (8000e38 <MX_GPIO_Init+0x1c0>)
 8000d88:	f001 ffb4 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da6:	4619      	mov	r1, r3
 8000da8:	4826      	ldr	r0, [pc, #152]	; (8000e44 <MX_GPIO_Init+0x1cc>)
 8000daa:	f001 ffa3 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PowerSwitch_Pin */
  GPIO_InitStruct.Pin = PowerSwitch_Pin;
 8000dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000db4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PowerSwitch_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	481f      	ldr	r0, [pc, #124]	; (8000e44 <MX_GPIO_Init+0x1cc>)
 8000dc6:	f001 ff95 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin|USB_OverCurrent_Pin;
 8000dca:	2384      	movs	r3, #132	; 0x84
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4817      	ldr	r0, [pc, #92]	; (8000e3c <MX_GPIO_Init+0x1c4>)
 8000dde:	f001 ff89 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000de2:	2340      	movs	r3, #64	; 0x40
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df6:	4619      	mov	r1, r3
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <MX_GPIO_Init+0x1c4>)
 8000dfa:	f001 ff7b 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	4619      	mov	r1, r3
 8000e14:	480a      	ldr	r0, [pc, #40]	; (8000e40 <MX_GPIO_Init+0x1c8>)
 8000e16:	f001 ff6d 	bl	8002cf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2028      	movs	r0, #40	; 0x28
 8000e20:	f001 fb87 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e24:	2028      	movs	r0, #40	; 0x28
 8000e26:	f001 fba0 	bl	800256a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e2a:	bf00      	nop
 8000e2c:	3738      	adds	r7, #56	; 0x38
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40021400 	.word	0x40021400
 8000e3c:	40021800 	.word	0x40021800
 8000e40:	40020400 	.word	0x40020400
 8000e44:	40021000 	.word	0x40021000

08000e48 <Get_and_Append_CAN_Message_to_Buffer>:

/* USER CODE BEGIN 4 */
void Get_and_Append_CAN_Message_to_Buffer() {
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af06      	add	r7, sp, #24
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg)
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000e50:	4a2f      	ldr	r2, [pc, #188]	; (8000f10 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8000e52:	2100      	movs	r1, #0
 8000e54:	482f      	ldr	r0, [pc, #188]	; (8000f14 <Get_and_Append_CAN_Message_to_Buffer+0xcc>)
 8000e56:	f000 ff14 	bl	8001c82 <HAL_CAN_GetRxMessage>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <Get_and_Append_CAN_Message_to_Buffer+0x1c>
			!= HAL_OK)
		Error_Handler();
 8000e60:	f000 f8da 	bl	8001018 <Error_Handler>

	uint16_t data1 = (rcvd_msg[0] << 8) + rcvd_msg[1];
 8000e64:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	021b      	lsls	r3, r3, #8
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000e70:	785b      	ldrb	r3, [r3, #1]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	4413      	add	r3, r2
 8000e76:	80fb      	strh	r3, [r7, #6]
	uint16_t data2 = (rcvd_msg[2] << 8) + rcvd_msg[3];
 8000e78:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000e7a:	789b      	ldrb	r3, [r3, #2]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000e84:	78db      	ldrb	r3, [r3, #3]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4413      	add	r3, r2
 8000e8a:	80bb      	strh	r3, [r7, #4]
	uint16_t data3 = (rcvd_msg[4] << 8) + rcvd_msg[5];
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000e8e:	791b      	ldrb	r3, [r3, #4]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000e98:	795b      	ldrb	r3, [r3, #5]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	807b      	strh	r3, [r7, #2]
	uint16_t data4 = (rcvd_msg[6] << 8) + rcvd_msg[7];
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000ea2:	799b      	ldrb	r3, [r3, #6]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000eac:	79db      	ldrb	r3, [r3, #7]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	4413      	add	r3, r2
 8000eb2:	803b      	strh	r3, [r7, #0]

	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8000eb4:	f000 fc40 	bl	8001738 <HAL_GetTick>
 8000eb8:	4605      	mov	r5, r0
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	88fa      	ldrh	r2, [r7, #6]
 8000ec0:	88b9      	ldrh	r1, [r7, #4]
 8000ec2:	8878      	ldrh	r0, [r7, #2]
 8000ec4:	883c      	ldrh	r4, [r7, #0]
 8000ec6:	9404      	str	r4, [sp, #16]
 8000ec8:	9003      	str	r0, [sp, #12]
 8000eca:	9102      	str	r1, [sp, #8]
 8000ecc:	9201      	str	r2, [sp, #4]
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	462b      	mov	r3, r5
 8000ed2:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <Get_and_Append_CAN_Message_to_Buffer+0xd0>)
 8000ed4:	212a      	movs	r1, #42	; 0x2a
 8000ed6:	4811      	ldr	r0, [pc, #68]	; (8000f1c <Get_and_Append_CAN_Message_to_Buffer+0xd4>)
 8000ed8:	f00e fde8 	bl	800faac <sniprintf>
			"(%010ld) X %08lX#%04X%04X%04X%04X\n", HAL_GetTick(),
			RxHeader.ExtId, data1, data2, data3, data4);

	strcat(filling_buffer ? buffer2 : buffer1, encodedData);
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <Get_and_Append_CAN_Message_to_Buffer+0xd8>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <Get_and_Append_CAN_Message_to_Buffer+0xa0>
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <Get_and_Append_CAN_Message_to_Buffer+0xdc>)
 8000ee6:	e000      	b.n	8000eea <Get_and_Append_CAN_Message_to_Buffer+0xa2>
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <Get_and_Append_CAN_Message_to_Buffer+0xe0>)
 8000eea:	490c      	ldr	r1, [pc, #48]	; (8000f1c <Get_and_Append_CAN_Message_to_Buffer+0xd4>)
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00e ffd9 	bl	800fea4 <strcat>
	double_buffer_fill_level[filling_buffer]++;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <Get_and_Append_CAN_Message_to_Buffer+0xd8>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 8000ef8:	5cd2      	ldrb	r2, [r2, r3]
 8000efa:	3201      	adds	r2, #1
 8000efc:	b2d1      	uxtb	r1, r2
 8000efe:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 8000f00:	54d1      	strb	r1, [r2, r3]
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bdb0      	pop	{r4, r5, r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000514 	.word	0x20000514
 8000f10:	200004f8 	.word	0x200004f8
 8000f14:	20000184 	.word	0x20000184
 8000f18:	08010fa8 	.word	0x08010fa8
 8000f1c:	200004c8 	.word	0x200004c8
 8000f20:	20002e2a 	.word	0x20002e2a
 8000f24:	200019a4 	.word	0x200019a4
 8000f28:	20000520 	.word	0x20000520
 8000f2c:	20002e28 	.word	0x20002e28

08000f30 <CAN_Filter_Config>:

HAL_StatusTypeDef CAN_Filter_Config(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	; 0x30
 8000f34:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 8000f3a:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 8000f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4c:	0a1a      	lsrs	r2, r3, #8
 8000f4e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f52:	4013      	ands	r3, r2
 8000f54:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8000f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f58:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 8000f5c:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8000f5e:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 8000f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f62:	0a1a      	lsrs	r2, r3, #8
 8000f64:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]

	return HAL_CAN_ConfigFilter(&hcan1, &filter);
 8000f80:	463b      	mov	r3, r7
 8000f82:	4619      	mov	r1, r3
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <CAN_Filter_Config+0x64>)
 8000f86:	f000 fd03 	bl	8001990 <HAL_CAN_ConfigFilter>
 8000f8a:	4603      	mov	r3, r0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3730      	adds	r7, #48	; 0x30
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000184 	.word	0x20000184

08000f98 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	if (double_buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b80      	cmp	r3, #128	; 0x80
 8000fa6:	d105      	bne.n	8000fb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
			&& double_buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER)
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000faa:	785b      	ldrb	r3, [r3, #1]
 8000fac:	2b80      	cmp	r3, #128	; 0x80
 8000fae:	d101      	bne.n	8000fb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
		Error_Handler();
 8000fb0:	f000 f832 	bl	8001018 <Error_Handler>

	Get_and_Append_CAN_Message_to_Buffer();
 8000fb4:	f7ff ff48 	bl	8000e48 <Get_and_Append_CAN_Message_to_Buffer>

	if (double_buffer_fill_level[filling_buffer] == CAN_MESSAGES_TO_BUFFER) {
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000fc0:	5c9b      	ldrb	r3, [r3, r2]
 8000fc2:	2b80      	cmp	r3, #128	; 0x80
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
		buffer_filled = 1;
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
		filling_buffer = !filling_buffer;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bf0c      	ite	eq
 8000fd4:	2301      	moveq	r3, #1
 8000fd6:	2300      	movne	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000fde:	701a      	strb	r2, [r3, #0]
	}
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20002e28 	.word	0x20002e28
 8000fec:	20002e2a 	.word	0x20002e2a
 8000ff0:	20002e30 	.word	0x20002e30

08000ff4 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8000ffc:	1d39      	adds	r1, r7, #4
 8000ffe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001002:	2201      	movs	r2, #1
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <__io_putchar+0x20>)
 8001006:	f005 fda1 	bl	8006b4c <HAL_UART_Transmit>

	return ch;
 800100a:	687b      	ldr	r3, [r7, #4]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200002f0 	.word	0x200002f0

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("\r\nError Handler Reached\r\n");
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <Error_Handler+0x1c>)
 8001022:	f00e ff37 	bl	800fe94 <puts>
	HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <Error_Handler+0x20>)
 800102e:	f002 f825 	bl	800307c <HAL_GPIO_WritePin>

	while (1) {
 8001032:	e7fe      	b.n	8001032 <Error_Handler+0x1a>
 8001034:	08010fcc 	.word	0x08010fcc
 8001038:	40021400 	.word	0x40021400

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_MspInit+0x44>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <HAL_MspInit+0x44>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_MspInit+0x44>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_MspInit+0x44>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_MspInit+0x44>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_MspInit+0x44>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a1b      	ldr	r2, [pc, #108]	; (8001110 <HAL_CAN_MspInit+0x8c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d12f      	bne.n	8001106 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_CAN_MspInit+0x90>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a1a      	ldr	r2, [pc, #104]	; (8001114 <HAL_CAN_MspInit+0x90>)
 80010ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_CAN_MspInit+0x90>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_CAN_MspInit+0x90>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <HAL_CAN_MspInit+0x90>)
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_CAN_MspInit+0x90>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010d6:	2303      	movs	r3, #3
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010e6:	2309      	movs	r3, #9
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <HAL_CAN_MspInit+0x94>)
 80010f2:	f001 fdff 	bl	8002cf4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2014      	movs	r0, #20
 80010fc:	f001 fa19 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001100:	2014      	movs	r0, #20
 8001102:	f001 fa32 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	; 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40006400 	.word	0x40006400
 8001114:	40023800 	.word	0x40023800
 8001118:	40020c00 	.word	0x40020c00

0800111c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b0ae      	sub	sp, #184	; 0xb8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2290      	movs	r2, #144	; 0x90
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f00e fec0 	bl	800fec2 <memset>
  if(hsd->Instance==SDMMC1)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a73      	ldr	r2, [pc, #460]	; (8001314 <HAL_SD_MspInit+0x1f8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	f040 80de 	bne.w	800130a <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800114e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001152:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001154:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001158:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4618      	mov	r0, r3
 8001162:	f003 ff55 	bl	8005010 <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800116c:	f7ff ff54 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001170:	4b69      	ldr	r3, [pc, #420]	; (8001318 <HAL_SD_MspInit+0x1fc>)
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	4a68      	ldr	r2, [pc, #416]	; (8001318 <HAL_SD_MspInit+0x1fc>)
 8001176:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800117a:	6453      	str	r3, [r2, #68]	; 0x44
 800117c:	4b66      	ldr	r3, [pc, #408]	; (8001318 <HAL_SD_MspInit+0x1fc>)
 800117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001188:	4b63      	ldr	r3, [pc, #396]	; (8001318 <HAL_SD_MspInit+0x1fc>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	4a62      	ldr	r2, [pc, #392]	; (8001318 <HAL_SD_MspInit+0x1fc>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6313      	str	r3, [r2, #48]	; 0x30
 8001194:	4b60      	ldr	r3, [pc, #384]	; (8001318 <HAL_SD_MspInit+0x1fc>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a0:	4b5d      	ldr	r3, [pc, #372]	; (8001318 <HAL_SD_MspInit+0x1fc>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	4a5c      	ldr	r2, [pc, #368]	; (8001318 <HAL_SD_MspInit+0x1fc>)
 80011a6:	f043 0308 	orr.w	r3, r3, #8
 80011aa:	6313      	str	r3, [r2, #48]	; 0x30
 80011ac:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <HAL_SD_MspInit+0x1fc>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80011b8:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80011bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011d2:	230c      	movs	r3, #12
 80011d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011dc:	4619      	mov	r1, r3
 80011de:	484f      	ldr	r0, [pc, #316]	; (800131c <HAL_SD_MspInit+0x200>)
 80011e0:	f001 fd88 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011e4:	2304      	movs	r3, #4
 80011e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011fc:	230c      	movs	r3, #12
 80011fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001202:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001206:	4619      	mov	r1, r3
 8001208:	4845      	ldr	r0, [pc, #276]	; (8001320 <HAL_SD_MspInit+0x204>)
 800120a:	f001 fd73 	bl	8002cf4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800120e:	4b45      	ldr	r3, [pc, #276]	; (8001324 <HAL_SD_MspInit+0x208>)
 8001210:	4a45      	ldr	r2, [pc, #276]	; (8001328 <HAL_SD_MspInit+0x20c>)
 8001212:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001214:	4b43      	ldr	r3, [pc, #268]	; (8001324 <HAL_SD_MspInit+0x208>)
 8001216:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800121a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800121c:	4b41      	ldr	r3, [pc, #260]	; (8001324 <HAL_SD_MspInit+0x208>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001222:	4b40      	ldr	r3, [pc, #256]	; (8001324 <HAL_SD_MspInit+0x208>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001228:	4b3e      	ldr	r3, [pc, #248]	; (8001324 <HAL_SD_MspInit+0x208>)
 800122a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001230:	4b3c      	ldr	r3, [pc, #240]	; (8001324 <HAL_SD_MspInit+0x208>)
 8001232:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001236:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001238:	4b3a      	ldr	r3, [pc, #232]	; (8001324 <HAL_SD_MspInit+0x208>)
 800123a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800123e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001240:	4b38      	ldr	r3, [pc, #224]	; (8001324 <HAL_SD_MspInit+0x208>)
 8001242:	2220      	movs	r2, #32
 8001244:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001246:	4b37      	ldr	r3, [pc, #220]	; (8001324 <HAL_SD_MspInit+0x208>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800124c:	4b35      	ldr	r3, [pc, #212]	; (8001324 <HAL_SD_MspInit+0x208>)
 800124e:	2204      	movs	r2, #4
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001252:	4b34      	ldr	r3, [pc, #208]	; (8001324 <HAL_SD_MspInit+0x208>)
 8001254:	2203      	movs	r2, #3
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001258:	4b32      	ldr	r3, [pc, #200]	; (8001324 <HAL_SD_MspInit+0x208>)
 800125a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800125e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <HAL_SD_MspInit+0x208>)
 8001262:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001266:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001268:	482e      	ldr	r0, [pc, #184]	; (8001324 <HAL_SD_MspInit+0x208>)
 800126a:	f001 f99d 	bl	80025a8 <HAL_DMA_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001274:	f7ff fed0 	bl	8001018 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a2a      	ldr	r2, [pc, #168]	; (8001324 <HAL_SD_MspInit+0x208>)
 800127c:	641a      	str	r2, [r3, #64]	; 0x40
 800127e:	4a29      	ldr	r2, [pc, #164]	; (8001324 <HAL_SD_MspInit+0x208>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001284:	4b29      	ldr	r3, [pc, #164]	; (800132c <HAL_SD_MspInit+0x210>)
 8001286:	4a2a      	ldr	r2, [pc, #168]	; (8001330 <HAL_SD_MspInit+0x214>)
 8001288:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800128a:	4b28      	ldr	r3, [pc, #160]	; (800132c <HAL_SD_MspInit+0x210>)
 800128c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001290:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <HAL_SD_MspInit+0x210>)
 8001294:	2240      	movs	r2, #64	; 0x40
 8001296:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <HAL_SD_MspInit+0x210>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800129e:	4b23      	ldr	r3, [pc, #140]	; (800132c <HAL_SD_MspInit+0x210>)
 80012a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012a6:	4b21      	ldr	r3, [pc, #132]	; (800132c <HAL_SD_MspInit+0x210>)
 80012a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ac:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012ae:	4b1f      	ldr	r3, [pc, #124]	; (800132c <HAL_SD_MspInit+0x210>)
 80012b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012b4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <HAL_SD_MspInit+0x210>)
 80012b8:	2220      	movs	r2, #32
 80012ba:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_SD_MspInit+0x210>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_SD_MspInit+0x210>)
 80012c4:	2204      	movs	r2, #4
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_SD_MspInit+0x210>)
 80012ca:	2203      	movs	r2, #3
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_SD_MspInit+0x210>)
 80012d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_SD_MspInit+0x210>)
 80012d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80012dc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <HAL_SD_MspInit+0x210>)
 80012e0:	f001 f962 	bl	80025a8 <HAL_DMA_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 80012ea:	f7ff fe95 	bl	8001018 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_SD_MspInit+0x210>)
 80012f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <HAL_SD_MspInit+0x210>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2031      	movs	r0, #49	; 0x31
 8001300:	f001 f917 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001304:	2031      	movs	r0, #49	; 0x31
 8001306:	f001 f930 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800130a:	bf00      	nop
 800130c:	37b8      	adds	r7, #184	; 0xb8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40012c00 	.word	0x40012c00
 8001318:	40023800 	.word	0x40023800
 800131c:	40020800 	.word	0x40020800
 8001320:	40020c00 	.word	0x40020c00
 8001324:	20000230 	.word	0x20000230
 8001328:	40026458 	.word	0x40026458
 800132c:	20000290 	.word	0x20000290
 8001330:	400264a0 	.word	0x400264a0

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0ae      	sub	sp, #184	; 0xb8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2290      	movs	r2, #144	; 0x90
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f00e fdb4 	bl	800fec2 <memset>
  if(huart->Instance==USART3)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <HAL_UART_MspInit+0xb4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d13c      	bne.n	80013de <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001368:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800136a:	2300      	movs	r3, #0
 800136c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4618      	mov	r0, r3
 8001374:	f003 fe4c 	bl	8005010 <HAL_RCCEx_PeriphCLKConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800137e:	f7ff fe4b 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_UART_MspInit+0xb8>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a19      	ldr	r2, [pc, #100]	; (80013ec <HAL_UART_MspInit+0xb8>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <HAL_UART_MspInit+0xb8>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <HAL_UART_MspInit+0xb8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a13      	ldr	r2, [pc, #76]	; (80013ec <HAL_UART_MspInit+0xb8>)
 80013a0:	f043 0308 	orr.w	r3, r3, #8
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_UART_MspInit+0xb8>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013cc:	2307      	movs	r3, #7
 80013ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <HAL_UART_MspInit+0xbc>)
 80013da:	f001 fc8b 	bl	8002cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	37b8      	adds	r7, #184	; 0xb8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40004800 	.word	0x40004800
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020c00 	.word	0x40020c00

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f000 f966 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <CAN1_RX0_IRQHandler+0x10>)
 800144e:	f000 fd50 	bl	8001ef2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000184 	.word	0x20000184

0800145c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 8001460:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <EXTI15_10_IRQHandler+0x24>)
 8001466:	f001 fdf1 	bl	800304c <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <EXTI15_10_IRQHandler+0x28>)
 8001470:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PowerSwitch_Pin);
 8001472:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001476:	f001 fe1b 	bl	80030b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	2000051c 	.word	0x2000051c

08001488 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <SDMMC1_IRQHandler+0x10>)
 800148e:	f004 fc67 	bl	8005d60 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200001ac 	.word	0x200001ac

0800149c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <DMA2_Stream3_IRQHandler+0x10>)
 80014a2:	f001 f9b1 	bl	8002808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000230 	.word	0x20000230

080014b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <OTG_FS_IRQHandler+0x10>)
 80014b6:	f001 ff64 	bl	8003382 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200049c8 	.word	0x200049c8

080014c4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <DMA2_Stream6_IRQHandler+0x10>)
 80014ca:	f001 f99d 	bl	8002808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000290 	.word	0x20000290

080014d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	e00a      	b.n	8001500 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ea:	f3af 8000 	nop.w
 80014ee:	4601      	mov	r1, r0
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	60ba      	str	r2, [r7, #8]
 80014f6:	b2ca      	uxtb	r2, r1
 80014f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3301      	adds	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbf0      	blt.n	80014ea <_read+0x12>
  }

  return len;
 8001508:	687b      	ldr	r3, [r7, #4]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e009      	b.n	8001538 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	60ba      	str	r2, [r7, #8]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fd61 	bl	8000ff4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbf1      	blt.n	8001524 <_write+0x12>
  }
  return len;
 8001540:	687b      	ldr	r3, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_close>:

int _close(int file)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001572:	605a      	str	r2, [r3, #4]
  return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_isatty>:

int _isatty(int file)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <_sbrk+0x5c>)
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <_sbrk+0x60>)
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <_sbrk+0x64>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <_sbrk+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d207      	bcs.n	80015f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e4:	f00e fc86 	bl	800fef4 <__errno>
 80015e8:	4603      	mov	r3, r0
 80015ea:	220c      	movs	r2, #12
 80015ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015f2:	e009      	b.n	8001608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <_sbrk+0x64>)
 8001604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20080000 	.word	0x20080000
 8001614:	00000400 	.word	0x00000400
 8001618:	20002e38 	.word	0x20002e38
 800161c:	20005020 	.word	0x20005020

08001620 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <SystemInit+0x20>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <SystemInit+0x20>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800167c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164a:	490e      	ldr	r1, [pc, #56]	; (8001684 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001660:	4c0b      	ldr	r4, [pc, #44]	; (8001690 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800166e:	f7ff ffd7 	bl	8001620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001672:	f00e fc45 	bl	800ff00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001676:	f7fe ffb1 	bl	80005dc <main>
  bx  lr    
 800167a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001684:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001688:	08011630 	.word	0x08011630
  ldr r2, =_sbss
 800168c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001690:	2000501c 	.word	0x2000501c

08001694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC_IRQHandler>

08001696 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169a:	2003      	movs	r0, #3
 800169c:	f000 ff3e 	bl	800251c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f000 f805 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a6:	f7ff fcc9 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 ff5d 	bl	800258e <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016ec:	f000 ff21 	bl	8002532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000000 	.word	0x20000000
 8001708:	20000008 	.word	0x20000008
 800170c:	20000004 	.word	0x20000004

08001710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008
 8001734:	20002e3c 	.word	0x20002e3c

08001738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20002e3c 	.word	0x20002e3c

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff ffee 	bl	8001738 <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffde 	bl	8001738 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008

08001798 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0ed      	b.n	8001986 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff fc64 	bl	8001084 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017cc:	f7ff ffb4 	bl	8001738 <HAL_GetTick>
 80017d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017d2:	e012      	b.n	80017fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017d4:	f7ff ffb0 	bl	8001738 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b0a      	cmp	r3, #10
 80017e0:	d90b      	bls.n	80017fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2205      	movs	r2, #5
 80017f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0c5      	b.n	8001986 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0e5      	beq.n	80017d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0202 	bic.w	r2, r2, #2
 8001816:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001818:	f7ff ff8e 	bl	8001738 <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800181e:	e012      	b.n	8001846 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001820:	f7ff ff8a 	bl	8001738 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b0a      	cmp	r3, #10
 800182c:	d90b      	bls.n	8001846 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2205      	movs	r2, #5
 800183e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e09f      	b.n	8001986 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1e5      	bne.n	8001820 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7e1b      	ldrb	r3, [r3, #24]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d108      	bne.n	800186e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e007      	b.n	800187e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7e5b      	ldrb	r3, [r3, #25]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d108      	bne.n	8001898 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e007      	b.n	80018a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7e9b      	ldrb	r3, [r3, #26]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d108      	bne.n	80018c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0220 	orr.w	r2, r2, #32
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e007      	b.n	80018d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0220 	bic.w	r2, r2, #32
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7edb      	ldrb	r3, [r3, #27]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d108      	bne.n	80018ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0210 	bic.w	r2, r2, #16
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e007      	b.n	80018fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0210 	orr.w	r2, r2, #16
 80018fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7f1b      	ldrb	r3, [r3, #28]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d108      	bne.n	8001916 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0208 	orr.w	r2, r2, #8
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e007      	b.n	8001926 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0208 	bic.w	r2, r2, #8
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7f5b      	ldrb	r3, [r3, #29]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d108      	bne.n	8001940 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f042 0204 	orr.w	r2, r2, #4
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e007      	b.n	8001950 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0204 	bic.w	r2, r2, #4
 800194e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	ea42 0103 	orr.w	r1, r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	1e5a      	subs	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019a8:	7cfb      	ldrb	r3, [r7, #19]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d003      	beq.n	80019b6 <HAL_CAN_ConfigFilter+0x26>
 80019ae:	7cfb      	ldrb	r3, [r7, #19]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	f040 80c7 	bne.w	8001b44 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a69      	ldr	r2, [pc, #420]	; (8001b60 <HAL_CAN_ConfigFilter+0x1d0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d001      	beq.n	80019c4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80019c0:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <HAL_CAN_ConfigFilter+0x1d4>)
 80019c2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019ca:	f043 0201 	orr.w	r2, r3, #1
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	4a63      	ldr	r2, [pc, #396]	; (8001b64 <HAL_CAN_ConfigFilter+0x1d4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d111      	bne.n	8001a00 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019e2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	431a      	orrs	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	2201      	movs	r2, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d123      	bne.n	8001a72 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	401a      	ands	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a4c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3248      	adds	r2, #72	; 0x48
 8001a52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a68:	6979      	ldr	r1, [r7, #20]
 8001a6a:	3348      	adds	r3, #72	; 0x48
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d122      	bne.n	8001ac0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	431a      	orrs	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a9a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3248      	adds	r2, #72	; 0x48
 8001aa0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ab4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ab6:	6979      	ldr	r1, [r7, #20]
 8001ab8:	3348      	adds	r3, #72	; 0x48
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d109      	bne.n	8001adc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ada:	e007      	b.n	8001aec <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d109      	bne.n	8001b08 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b06:	e007      	b.n	8001b18 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	431a      	orrs	r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d107      	bne.n	8001b30 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b36:	f023 0201 	bic.w	r2, r3, #1
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e006      	b.n	8001b52 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
  }
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	371c      	adds	r7, #28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40003400 	.word	0x40003400
 8001b64:	40006400 	.word	0x40006400

08001b68 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d12e      	bne.n	8001bda <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b94:	f7ff fdd0 	bl	8001738 <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b9a:	e012      	b.n	8001bc2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b9c:	f7ff fdcc 	bl	8001738 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b0a      	cmp	r3, #10
 8001ba8:	d90b      	bls.n	8001bc2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2205      	movs	r2, #5
 8001bba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e012      	b.n	8001be8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1e5      	bne.n	8001b9c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e006      	b.n	8001be8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d133      	bne.n	8001c6c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c14:	f7ff fd90 	bl	8001738 <HAL_GetTick>
 8001c18:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c1a:	e012      	b.n	8001c42 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c1c:	f7ff fd8c 	bl	8001738 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b0a      	cmp	r3, #10
 8001c28:	d90b      	bls.n	8001c42 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2205      	movs	r2, #5
 8001c3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e01b      	b.n	8001c7a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0e5      	beq.n	8001c1c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0202 	bic.w	r2, r2, #2
 8001c5e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e006      	b.n	8001c7a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
  }
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c82:	b480      	push	{r7}
 8001c84:	b087      	sub	sp, #28
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c96:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d003      	beq.n	8001ca6 <HAL_CAN_GetRxMessage+0x24>
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	f040 80f3 	bne.w	8001e8c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10e      	bne.n	8001cca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d116      	bne.n	8001ce8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0e7      	b.n	8001e9a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d107      	bne.n	8001ce8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0d8      	b.n	8001e9a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	331b      	adds	r3, #27
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	4413      	add	r3, r2
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0204 	and.w	r2, r3, #4
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10c      	bne.n	8001d20 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	331b      	adds	r3, #27
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	4413      	add	r3, r2
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	0d5b      	lsrs	r3, r3, #21
 8001d16:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e00b      	b.n	8001d38 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	331b      	adds	r3, #27
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	4413      	add	r3, r2
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	08db      	lsrs	r3, r3, #3
 8001d30:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	331b      	adds	r3, #27
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	4413      	add	r3, r2
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0202 	and.w	r2, r3, #2
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	331b      	adds	r3, #27
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4413      	add	r3, r2
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 020f 	and.w	r2, r3, #15
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	331b      	adds	r3, #27
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	3304      	adds	r3, #4
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	331b      	adds	r3, #27
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	4413      	add	r3, r2
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	0c1b      	lsrs	r3, r3, #16
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0a1a      	lsrs	r2, r3, #8
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	0c1a      	lsrs	r2, r3, #16
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	3302      	adds	r3, #2
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0e1a      	lsrs	r2, r3, #24
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	3303      	adds	r3, #3
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	0a1a      	lsrs	r2, r3, #8
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	3305      	adds	r3, #5
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0c1a      	lsrs	r2, r3, #16
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	3306      	adds	r3, #6
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	0e1a      	lsrs	r2, r3, #24
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	3307      	adds	r3, #7
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d108      	bne.n	8001e78 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0220 	orr.w	r2, r2, #32
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	e007      	b.n	8001e88 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0220 	orr.w	r2, r2, #32
 8001e86:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e006      	b.n	8001e9a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
  }
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b085      	sub	sp, #20
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d002      	beq.n	8001ec4 <HAL_CAN_ActivateNotification+0x1e>
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d109      	bne.n	8001ed8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6959      	ldr	r1, [r3, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e006      	b.n	8001ee6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
  }
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b08a      	sub	sp, #40	; 0x28
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d07c      	beq.n	8002032 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d023      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2201      	movs	r2, #1
 8001f48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f983 	bl	8002260 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f5a:	e016      	b.n	8001f8a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	e00c      	b.n	8001f8a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d004      	beq.n	8001f84 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
 8001f82:	e002      	b.n	8001f8a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f989 	bl	800229c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d024      	beq.n	8001fde <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f963 	bl	8002274 <HAL_CAN_TxMailbox1CompleteCallback>
 8001fae:	e016      	b.n	8001fde <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d004      	beq.n	8001fc4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc2:	e00c      	b.n	8001fde <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d004      	beq.n	8001fd8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd6:	e002      	b.n	8001fde <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f969 	bl	80022b0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d024      	beq.n	8002032 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ff0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f943 	bl	8002288 <HAL_CAN_TxMailbox2CompleteCallback>
 8002002:	e016      	b.n	8002032 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d004      	beq.n	8002018 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
 8002016:	e00c      	b.n	8002032 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d004      	beq.n	800202c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	e002      	b.n	8002032 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f949 	bl	80022c4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00c      	beq.n	8002056 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2210      	movs	r2, #16
 8002054:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00b      	beq.n	8002078 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d006      	beq.n	8002078 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2208      	movs	r2, #8
 8002070:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f930 	bl	80022d8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d009      	beq.n	8002096 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7fe ff81 	bl	8000f98 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00c      	beq.n	80020ba <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2210      	movs	r2, #16
 80020b8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00b      	beq.n	80020dc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d006      	beq.n	80020dc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2208      	movs	r2, #8
 80020d4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f912 	bl	8002300 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f8f9 	bl	80022ec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00b      	beq.n	800211c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d006      	beq.n	800211c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2210      	movs	r2, #16
 8002114:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f8fc 	bl	8002314 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d006      	beq.n	800213e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2208      	movs	r2, #8
 8002136:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f8f5 	bl	8002328 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d07b      	beq.n	8002240 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b00      	cmp	r3, #0
 8002150:	d072      	beq.n	8002238 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d043      	beq.n	8002238 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d03e      	beq.n	8002238 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021c0:	2b60      	cmp	r3, #96	; 0x60
 80021c2:	d02b      	beq.n	800221c <HAL_CAN_IRQHandler+0x32a>
 80021c4:	2b60      	cmp	r3, #96	; 0x60
 80021c6:	d82e      	bhi.n	8002226 <HAL_CAN_IRQHandler+0x334>
 80021c8:	2b50      	cmp	r3, #80	; 0x50
 80021ca:	d022      	beq.n	8002212 <HAL_CAN_IRQHandler+0x320>
 80021cc:	2b50      	cmp	r3, #80	; 0x50
 80021ce:	d82a      	bhi.n	8002226 <HAL_CAN_IRQHandler+0x334>
 80021d0:	2b40      	cmp	r3, #64	; 0x40
 80021d2:	d019      	beq.n	8002208 <HAL_CAN_IRQHandler+0x316>
 80021d4:	2b40      	cmp	r3, #64	; 0x40
 80021d6:	d826      	bhi.n	8002226 <HAL_CAN_IRQHandler+0x334>
 80021d8:	2b30      	cmp	r3, #48	; 0x30
 80021da:	d010      	beq.n	80021fe <HAL_CAN_IRQHandler+0x30c>
 80021dc:	2b30      	cmp	r3, #48	; 0x30
 80021de:	d822      	bhi.n	8002226 <HAL_CAN_IRQHandler+0x334>
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d002      	beq.n	80021ea <HAL_CAN_IRQHandler+0x2f8>
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	d005      	beq.n	80021f4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021e8:	e01d      	b.n	8002226 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021f2:	e019      	b.n	8002228 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	f043 0310 	orr.w	r3, r3, #16
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021fc:	e014      	b.n	8002228 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	f043 0320 	orr.w	r3, r3, #32
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002206:	e00f      	b.n	8002228 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002210:	e00a      	b.n	8002228 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800221a:	e005      	b.n	8002228 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002224:	e000      	b.n	8002228 <HAL_CAN_IRQHandler+0x336>
            break;
 8002226:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002236:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2204      	movs	r2, #4
 800223e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	2b00      	cmp	r3, #0
 8002244:	d008      	beq.n	8002258 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f872 	bl	800233c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002258:	bf00      	nop
 800225a:	3728      	adds	r7, #40	; 0x28
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <__NVIC_SetPriorityGrouping+0x40>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 800237a:	4313      	orrs	r3, r2
 800237c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237e:	4a04      	ldr	r2, [pc, #16]	; (8002390 <__NVIC_SetPriorityGrouping+0x40>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	60d3      	str	r3, [r2, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00
 8002394:	05fa0000 	.word	0x05fa0000

08002398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <__NVIC_GetPriorityGrouping+0x18>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0307 	and.w	r3, r3, #7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <__NVIC_EnableIRQ+0x38>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	db0a      	blt.n	800241a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	490c      	ldr	r1, [pc, #48]	; (800243c <__NVIC_SetPriority+0x4c>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	440b      	add	r3, r1
 8002414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002418:	e00a      	b.n	8002430 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4908      	ldr	r1, [pc, #32]	; (8002440 <__NVIC_SetPriority+0x50>)
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3b04      	subs	r3, #4
 8002428:	0112      	lsls	r2, r2, #4
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	440b      	add	r3, r1
 800242e:	761a      	strb	r2, [r3, #24]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000e100 	.word	0xe000e100
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f1c3 0307 	rsb	r3, r3, #7
 800245e:	2b04      	cmp	r3, #4
 8002460:	bf28      	it	cs
 8002462:	2304      	movcs	r3, #4
 8002464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3304      	adds	r3, #4
 800246a:	2b06      	cmp	r3, #6
 800246c:	d902      	bls.n	8002474 <NVIC_EncodePriority+0x30>
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3b03      	subs	r3, #3
 8002472:	e000      	b.n	8002476 <NVIC_EncodePriority+0x32>
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	401a      	ands	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800248c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43d9      	mvns	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	4313      	orrs	r3, r2
         );
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3724      	adds	r7, #36	; 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024b0:	f3bf 8f4f 	dsb	sy
}
 80024b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <__NVIC_SystemReset+0x24>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80024be:	4904      	ldr	r1, [pc, #16]	; (80024d0 <__NVIC_SystemReset+0x24>)
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <__NVIC_SystemReset+0x28>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80024c6:	f3bf 8f4f 	dsb	sy
}
 80024ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <__NVIC_SystemReset+0x20>
 80024d0:	e000ed00 	.word	0xe000ed00
 80024d4:	05fa0004 	.word	0x05fa0004

080024d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e8:	d301      	bcc.n	80024ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00f      	b.n	800250e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <SysTick_Config+0x40>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f6:	210f      	movs	r1, #15
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024fc:	f7ff ff78 	bl	80023f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <SysTick_Config+0x40>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <SysTick_Config+0x40>)
 8002508:	2207      	movs	r2, #7
 800250a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	e000e010 	.word	0xe000e010

0800251c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff13 	bl	8002350 <__NVIC_SetPriorityGrouping>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002544:	f7ff ff28 	bl	8002398 <__NVIC_GetPriorityGrouping>
 8002548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6978      	ldr	r0, [r7, #20]
 8002550:	f7ff ff78 	bl	8002444 <NVIC_EncodePriority>
 8002554:	4602      	mov	r2, r0
 8002556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff47 	bl	80023f0 <__NVIC_SetPriority>
}
 8002562:	bf00      	nop
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff1b 	bl	80023b4 <__NVIC_EnableIRQ>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800258a:	f7ff ff8f 	bl	80024ac <__NVIC_SystemReset>

0800258e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ff9e 	bl	80024d8 <SysTick_Config>
 800259c:	4603      	mov	r3, r0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025b4:	f7ff f8c0 	bl	8001738 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e099      	b.n	80026f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e4:	e00f      	b.n	8002606 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025e6:	f7ff f8a7 	bl	8001738 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d908      	bls.n	8002606 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2203      	movs	r2, #3
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e078      	b.n	80026f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1e8      	bne.n	80025e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4b38      	ldr	r3, [pc, #224]	; (8002700 <HAL_DMA_Init+0x158>)
 8002620:	4013      	ands	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002632:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	2b04      	cmp	r3, #4
 800265e:	d107      	bne.n	8002670 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	4313      	orrs	r3, r2
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f023 0307 	bic.w	r3, r3, #7
 8002686:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	2b04      	cmp	r3, #4
 8002698:	d117      	bne.n	80026ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00e      	beq.n	80026ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 faa5 	bl	8002bfc <DMA_CheckFifoParam>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2240      	movs	r2, #64	; 0x40
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026c6:	2301      	movs	r3, #1
 80026c8:	e016      	b.n	80026f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fa5c 	bl	8002b90 <DMA_CalcBaseAndBitshift>
 80026d8:	4603      	mov	r3, r0
 80026da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	223f      	movs	r2, #63	; 0x3f
 80026e2:	409a      	lsls	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	e010803f 	.word	0xe010803f

08002704 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_DMA_Start_IT+0x26>
 8002726:	2302      	movs	r3, #2
 8002728:	e048      	b.n	80027bc <HAL_DMA_Start_IT+0xb8>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d137      	bne.n	80027ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f9ee 	bl	8002b34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275c:	223f      	movs	r2, #63	; 0x3f
 800275e:	409a      	lsls	r2, r3
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0216 	orr.w	r2, r2, #22
 8002772:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002782:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0208 	orr.w	r2, r2, #8
 800279a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	e005      	b.n	80027ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
 80027b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d004      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2280      	movs	r2, #128	; 0x80
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e00c      	b.n	80027fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2205      	movs	r2, #5
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0201 	bic.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002814:	4b8e      	ldr	r3, [pc, #568]	; (8002a50 <HAL_DMA_IRQHandler+0x248>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a8e      	ldr	r2, [pc, #568]	; (8002a54 <HAL_DMA_IRQHandler+0x24c>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	0a9b      	lsrs	r3, r3, #10
 8002820:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002832:	2208      	movs	r2, #8
 8002834:	409a      	lsls	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01a      	beq.n	8002874 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0204 	bic.w	r2, r2, #4
 800285a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	2208      	movs	r2, #8
 8002862:	409a      	lsls	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002878:	2201      	movs	r2, #1
 800287a:	409a      	lsls	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d012      	beq.n	80028aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002896:	2201      	movs	r2, #1
 8002898:	409a      	lsls	r2, r3
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	f043 0202 	orr.w	r2, r3, #2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ae:	2204      	movs	r2, #4
 80028b0:	409a      	lsls	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d012      	beq.n	80028e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00b      	beq.n	80028e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	2204      	movs	r2, #4
 80028ce:	409a      	lsls	r2, r3
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d8:	f043 0204 	orr.w	r2, r3, #4
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e4:	2210      	movs	r2, #16
 80028e6:	409a      	lsls	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d043      	beq.n	8002978 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d03c      	beq.n	8002978 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002902:	2210      	movs	r2, #16
 8002904:	409a      	lsls	r2, r3
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d018      	beq.n	800294a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d108      	bne.n	8002938 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d024      	beq.n	8002978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4798      	blx	r3
 8002936:	e01f      	b.n	8002978 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
 8002948:	e016      	b.n	8002978 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d107      	bne.n	8002968 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0208 	bic.w	r2, r2, #8
 8002966:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	2220      	movs	r2, #32
 800297e:	409a      	lsls	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 808f 	beq.w	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0310 	and.w	r3, r3, #16
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8087 	beq.w	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	2220      	movs	r2, #32
 80029a0:	409a      	lsls	r2, r3
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b05      	cmp	r3, #5
 80029b0:	d136      	bne.n	8002a20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0216 	bic.w	r2, r2, #22
 80029c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <HAL_DMA_IRQHandler+0x1da>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d007      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0208 	bic.w	r2, r2, #8
 80029f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	223f      	movs	r2, #63	; 0x3f
 80029f8:	409a      	lsls	r2, r3
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d07e      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
        }
        return;
 8002a1e:	e079      	b.n	8002b14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d01d      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10d      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d031      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	4798      	blx	r3
 8002a4c:	e02c      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
 8002a4e:	bf00      	nop
 8002a50:	20000000 	.word	0x20000000
 8002a54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d023      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
 8002a68:	e01e      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10f      	bne.n	8002a98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0210 	bic.w	r2, r2, #16
 8002a86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d032      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d022      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2205      	movs	r2, #5
 8002ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d307      	bcc.n	8002af0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f2      	bne.n	8002ad4 <HAL_DMA_IRQHandler+0x2cc>
 8002aee:	e000      	b.n	8002af2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002af0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4798      	blx	r3
 8002b12:	e000      	b.n	8002b16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b14:	bf00      	nop
    }
  }
}
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b40      	cmp	r3, #64	; 0x40
 8002b60:	d108      	bne.n	8002b74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b72:	e007      	b.n	8002b84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	60da      	str	r2, [r3, #12]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	3b10      	subs	r3, #16
 8002ba0:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <DMA_CalcBaseAndBitshift+0x60>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <DMA_CalcBaseAndBitshift+0x64>)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4413      	add	r3, r2
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d908      	bls.n	8002bd0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <DMA_CalcBaseAndBitshift+0x68>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	1d1a      	adds	r2, r3, #4
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	659a      	str	r2, [r3, #88]	; 0x58
 8002bce:	e006      	b.n	8002bde <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <DMA_CalcBaseAndBitshift+0x68>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	aaaaaaab 	.word	0xaaaaaaab
 8002bf4:	08011090 	.word	0x08011090
 8002bf8:	fffffc00 	.word	0xfffffc00

08002bfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d11f      	bne.n	8002c56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d856      	bhi.n	8002cca <DMA_CheckFifoParam+0xce>
 8002c1c:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <DMA_CheckFifoParam+0x28>)
 8002c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c22:	bf00      	nop
 8002c24:	08002c35 	.word	0x08002c35
 8002c28:	08002c47 	.word	0x08002c47
 8002c2c:	08002c35 	.word	0x08002c35
 8002c30:	08002ccb 	.word	0x08002ccb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d046      	beq.n	8002cce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c44:	e043      	b.n	8002cce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c4e:	d140      	bne.n	8002cd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c54:	e03d      	b.n	8002cd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5e:	d121      	bne.n	8002ca4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d837      	bhi.n	8002cd6 <DMA_CheckFifoParam+0xda>
 8002c66:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <DMA_CheckFifoParam+0x70>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002c7d 	.word	0x08002c7d
 8002c70:	08002c83 	.word	0x08002c83
 8002c74:	08002c7d 	.word	0x08002c7d
 8002c78:	08002c95 	.word	0x08002c95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c80:	e030      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d025      	beq.n	8002cda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c92:	e022      	b.n	8002cda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c9c:	d11f      	bne.n	8002cde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ca2:	e01c      	b.n	8002cde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d903      	bls.n	8002cb2 <DMA_CheckFifoParam+0xb6>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d003      	beq.n	8002cb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cb0:	e018      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb6:	e015      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00e      	beq.n	8002ce2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc8:	e00b      	b.n	8002ce2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e00a      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e008      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e006      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd6:	bf00      	nop
 8002cd8:	e004      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cda:	bf00      	nop
 8002cdc:	e002      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cde:	bf00      	nop
 8002ce0:	e000      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop

08002cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	e175      	b.n	8003000 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d14:	2201      	movs	r2, #1
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	f040 8164 	bne.w	8002ffa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d005      	beq.n	8002d4a <HAL_GPIO_Init+0x56>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d130      	bne.n	8002dac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	2203      	movs	r2, #3
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d80:	2201      	movs	r2, #1
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 0201 	and.w	r2, r3, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d017      	beq.n	8002de8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d123      	bne.n	8002e3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	08da      	lsrs	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3208      	adds	r2, #8
 8002dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	08da      	lsrs	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3208      	adds	r2, #8
 8002e36:	69b9      	ldr	r1, [r7, #24]
 8002e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	2203      	movs	r2, #3
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0203 	and.w	r2, r3, #3
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80be 	beq.w	8002ffa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7e:	4b66      	ldr	r3, [pc, #408]	; (8003018 <HAL_GPIO_Init+0x324>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	4a65      	ldr	r2, [pc, #404]	; (8003018 <HAL_GPIO_Init+0x324>)
 8002e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e88:	6453      	str	r3, [r2, #68]	; 0x44
 8002e8a:	4b63      	ldr	r3, [pc, #396]	; (8003018 <HAL_GPIO_Init+0x324>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e96:	4a61      	ldr	r2, [pc, #388]	; (800301c <HAL_GPIO_Init+0x328>)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	089b      	lsrs	r3, r3, #2
 8002e9c:	3302      	adds	r3, #2
 8002e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	220f      	movs	r2, #15
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a58      	ldr	r2, [pc, #352]	; (8003020 <HAL_GPIO_Init+0x32c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d037      	beq.n	8002f32 <HAL_GPIO_Init+0x23e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a57      	ldr	r2, [pc, #348]	; (8003024 <HAL_GPIO_Init+0x330>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d031      	beq.n	8002f2e <HAL_GPIO_Init+0x23a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a56      	ldr	r2, [pc, #344]	; (8003028 <HAL_GPIO_Init+0x334>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d02b      	beq.n	8002f2a <HAL_GPIO_Init+0x236>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a55      	ldr	r2, [pc, #340]	; (800302c <HAL_GPIO_Init+0x338>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d025      	beq.n	8002f26 <HAL_GPIO_Init+0x232>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a54      	ldr	r2, [pc, #336]	; (8003030 <HAL_GPIO_Init+0x33c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01f      	beq.n	8002f22 <HAL_GPIO_Init+0x22e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a53      	ldr	r2, [pc, #332]	; (8003034 <HAL_GPIO_Init+0x340>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d019      	beq.n	8002f1e <HAL_GPIO_Init+0x22a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a52      	ldr	r2, [pc, #328]	; (8003038 <HAL_GPIO_Init+0x344>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_GPIO_Init+0x226>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a51      	ldr	r2, [pc, #324]	; (800303c <HAL_GPIO_Init+0x348>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00d      	beq.n	8002f16 <HAL_GPIO_Init+0x222>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a50      	ldr	r2, [pc, #320]	; (8003040 <HAL_GPIO_Init+0x34c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d007      	beq.n	8002f12 <HAL_GPIO_Init+0x21e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4f      	ldr	r2, [pc, #316]	; (8003044 <HAL_GPIO_Init+0x350>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <HAL_GPIO_Init+0x21a>
 8002f0a:	2309      	movs	r3, #9
 8002f0c:	e012      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f0e:	230a      	movs	r3, #10
 8002f10:	e010      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f12:	2308      	movs	r3, #8
 8002f14:	e00e      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f16:	2307      	movs	r3, #7
 8002f18:	e00c      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f1a:	2306      	movs	r3, #6
 8002f1c:	e00a      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f1e:	2305      	movs	r3, #5
 8002f20:	e008      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f22:	2304      	movs	r3, #4
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f26:	2303      	movs	r3, #3
 8002f28:	e004      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e002      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f32:	2300      	movs	r3, #0
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	f002 0203 	and.w	r2, r2, #3
 8002f3a:	0092      	lsls	r2, r2, #2
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f44:	4935      	ldr	r1, [pc, #212]	; (800301c <HAL_GPIO_Init+0x328>)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f52:	4b3d      	ldr	r3, [pc, #244]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f76:	4a34      	ldr	r2, [pc, #208]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f7c:	4b32      	ldr	r3, [pc, #200]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fa0:	4a29      	ldr	r2, [pc, #164]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fa6:	4b28      	ldr	r3, [pc, #160]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fca:	4a1f      	ldr	r2, [pc, #124]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff4:	4a14      	ldr	r2, [pc, #80]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	f67f ae86 	bls.w	8002d14 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3724      	adds	r7, #36	; 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	40013800 	.word	0x40013800
 8003020:	40020000 	.word	0x40020000
 8003024:	40020400 	.word	0x40020400
 8003028:	40020800 	.word	0x40020800
 800302c:	40020c00 	.word	0x40020c00
 8003030:	40021000 	.word	0x40021000
 8003034:	40021400 	.word	0x40021400
 8003038:	40021800 	.word	0x40021800
 800303c:	40021c00 	.word	0x40021c00
 8003040:	40022000 	.word	0x40022000
 8003044:	40022400 	.word	0x40022400
 8003048:	40013c00 	.word	0x40013c00

0800304c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	e001      	b.n	800306e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
 8003088:	4613      	mov	r3, r2
 800308a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800308c:	787b      	ldrb	r3, [r7, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003098:	e003      	b.n	80030a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	041a      	lsls	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	619a      	str	r2, [r3, #24]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030ba:	4b08      	ldr	r3, [pc, #32]	; (80030dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d006      	beq.n	80030d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030c6:	4a05      	ldr	r2, [pc, #20]	; (80030dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f806 	bl	80030e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40013c00 	.word	0x40013c00

080030e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f8:	b08f      	sub	sp, #60	; 0x3c
 80030fa:	af0a      	add	r7, sp, #40	; 0x28
 80030fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e116      	b.n	8003336 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f00c f8a4 	bl	800f270 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2203      	movs	r2, #3
 800312c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f004 ffdb 	bl	8008102 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	603b      	str	r3, [r7, #0]
 8003152:	687e      	ldr	r6, [r7, #4]
 8003154:	466d      	mov	r5, sp
 8003156:	f106 0410 	add.w	r4, r6, #16
 800315a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800315e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003162:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003166:	e885 0003 	stmia.w	r5, {r0, r1}
 800316a:	1d33      	adds	r3, r6, #4
 800316c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800316e:	6838      	ldr	r0, [r7, #0]
 8003170:	f004 febc 	bl	8007eec <USB_CoreInit>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e0d7      	b.n	8003336 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f004 ffc9 	bl	8008124 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003192:	2300      	movs	r3, #0
 8003194:	73fb      	strb	r3, [r7, #15]
 8003196:	e04a      	b.n	800322e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003198:	7bfa      	ldrb	r2, [r7, #15]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	333d      	adds	r3, #61	; 0x3d
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	333c      	adds	r3, #60	; 0x3c
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	b298      	uxth	r0, r3
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	3344      	adds	r3, #68	; 0x44
 80031d4:	4602      	mov	r2, r0
 80031d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031d8:	7bfa      	ldrb	r2, [r7, #15]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3340      	adds	r3, #64	; 0x40
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	3348      	adds	r3, #72	; 0x48
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	334c      	adds	r3, #76	; 0x4c
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003214:	7bfa      	ldrb	r2, [r7, #15]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	3354      	adds	r3, #84	; 0x54
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	3301      	adds	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
 800322e:	7bfa      	ldrb	r2, [r7, #15]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	d3af      	bcc.n	8003198 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003238:	2300      	movs	r3, #0
 800323a:	73fb      	strb	r3, [r7, #15]
 800323c:	e044      	b.n	80032c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800323e:	7bfa      	ldrb	r2, [r7, #15]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003296:	7bfa      	ldrb	r2, [r7, #15]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032ac:	7bfa      	ldrb	r2, [r7, #15]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	3301      	adds	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d3b5      	bcc.n	800323e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	687e      	ldr	r6, [r7, #4]
 80032da:	466d      	mov	r5, sp
 80032dc:	f106 0410 	add.w	r4, r6, #16
 80032e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80032f0:	1d33      	adds	r3, r6, #4
 80032f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032f4:	6838      	ldr	r0, [r7, #0]
 80032f6:	f004 ff61 	bl	80081bc <USB_DevInit>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e014      	b.n	8003336 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	2b01      	cmp	r3, #1
 8003322:	d102      	bne.n	800332a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f001 f97b 	bl	8004620 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f006 f8af 	bl	8009492 <USB_DevDisconnect>

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800333e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_PCD_Start+0x16>
 8003350:	2302      	movs	r3, #2
 8003352:	e012      	b.n	800337a <HAL_PCD_Start+0x3c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f004 febd 	bl	80080e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f006 f870 	bl	8009450 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003382:	b590      	push	{r4, r7, lr}
 8003384:	b08d      	sub	sp, #52	; 0x34
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f006 f92e 	bl	80095fa <USB_GetMode>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f040 84b7 	bne.w	8003d14 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f006 f892 	bl	80094d4 <USB_ReadInterrupts>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 84ad 	beq.w	8003d12 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f006 f87f 	bl	80094d4 <USB_ReadInterrupts>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d107      	bne.n	80033f0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f002 0202 	and.w	r2, r2, #2
 80033ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f006 f86d 	bl	80094d4 <USB_ReadInterrupts>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b10      	cmp	r3, #16
 8003402:	d161      	bne.n	80034c8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0210 	bic.w	r2, r2, #16
 8003412:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	f003 020f 	and.w	r2, r3, #15
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	4413      	add	r3, r2
 8003430:	3304      	adds	r3, #4
 8003432:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	0c5b      	lsrs	r3, r3, #17
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	2b02      	cmp	r3, #2
 800343e:	d124      	bne.n	800348a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d035      	beq.n	80034b8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800345a:	b29b      	uxth	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	6a38      	ldr	r0, [r7, #32]
 8003460:	f005 fea4 	bl	80091ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003470:	441a      	add	r2, r3
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	6a1a      	ldr	r2, [r3, #32]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003482:	441a      	add	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	621a      	str	r2, [r3, #32]
 8003488:	e016      	b.n	80034b8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	0c5b      	lsrs	r3, r3, #17
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	2b06      	cmp	r3, #6
 8003494:	d110      	bne.n	80034b8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800349c:	2208      	movs	r2, #8
 800349e:	4619      	mov	r1, r3
 80034a0:	6a38      	ldr	r0, [r7, #32]
 80034a2:	f005 fe83 	bl	80091ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	6a1a      	ldr	r2, [r3, #32]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034b2:	441a      	add	r2, r3
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0210 	orr.w	r2, r2, #16
 80034c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f006 f801 	bl	80094d4 <USB_ReadInterrupts>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034dc:	f040 80a7 	bne.w	800362e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f006 f806 	bl	80094fa <USB_ReadDevAllOutEpInterrupt>
 80034ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80034f0:	e099      	b.n	8003626 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 808e 	beq.w	800361a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f006 f82a 	bl	8009562 <USB_ReadDevOutEPInterrupt>
 800350e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00c      	beq.n	8003534 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	4413      	add	r3, r2
 8003522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003526:	461a      	mov	r2, r3
 8003528:	2301      	movs	r3, #1
 800352a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800352c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fef0 	bl	8004314 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00c      	beq.n	8003558 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354a:	461a      	mov	r2, r3
 800354c:	2308      	movs	r3, #8
 800354e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 ffc6 	bl	80044e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356e:	461a      	mov	r2, r3
 8003570:	2310      	movs	r3, #16
 8003572:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d030      	beq.n	80035e0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b80      	cmp	r3, #128	; 0x80
 8003588:	d109      	bne.n	800359e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003598:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800359c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800359e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	4413      	add	r3, r2
 80035b0:	3304      	adds	r3, #4
 80035b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	78db      	ldrb	r3, [r3, #3]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d108      	bne.n	80035ce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2200      	movs	r2, #0
 80035c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	4619      	mov	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f00b ff75 	bl	800f4b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035da:	461a      	mov	r2, r3
 80035dc:	2302      	movs	r3, #2
 80035de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f6:	461a      	mov	r2, r3
 80035f8:	2320      	movs	r3, #32
 80035fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003612:	461a      	mov	r2, r3
 8003614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003618:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	3301      	adds	r3, #1
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	f47f af62 	bne.w	80034f2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f005 ff4e 	bl	80094d4 <USB_ReadInterrupts>
 8003638:	4603      	mov	r3, r0
 800363a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800363e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003642:	f040 80db 	bne.w	80037fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f005 ff6f 	bl	800952e <USB_ReadDevAllInEpInterrupt>
 8003650:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003656:	e0cd      	b.n	80037f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80c2 	beq.w	80037e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f005 ff95 	bl	800959e <USB_ReadDevInEPInterrupt>
 8003674:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d057      	beq.n	8003730 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	2201      	movs	r2, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	43db      	mvns	r3, r3
 800369a:	69f9      	ldr	r1, [r7, #28]
 800369c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036a0:	4013      	ands	r3, r2
 80036a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b0:	461a      	mov	r2, r3
 80036b2:	2301      	movs	r3, #1
 80036b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d132      	bne.n	8003724 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	334c      	adds	r3, #76	; 0x4c
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4403      	add	r3, r0
 80036de:	3348      	adds	r3, #72	; 0x48
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4419      	add	r1, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4403      	add	r3, r0
 80036f2:	334c      	adds	r3, #76	; 0x4c
 80036f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d113      	bne.n	8003724 <HAL_PCD_IRQHandler+0x3a2>
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003700:	4613      	mov	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	3354      	adds	r3, #84	; 0x54
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d108      	bne.n	8003724 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800371c:	461a      	mov	r2, r3
 800371e:	2101      	movs	r1, #1
 8003720:	f005 ff9e 	bl	8009660 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	b2db      	uxtb	r3, r3
 8003728:	4619      	mov	r1, r3
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f00b fe3f 	bl	800f3ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	4413      	add	r3, r2
 8003742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003746:	461a      	mov	r2, r3
 8003748:	2308      	movs	r3, #8
 800374a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003762:	461a      	mov	r2, r3
 8003764:	2310      	movs	r3, #16
 8003766:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	4413      	add	r3, r2
 800377a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377e:	461a      	mov	r2, r3
 8003780:	2340      	movs	r3, #64	; 0x40
 8003782:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d023      	beq.n	80037d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800378e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003790:	6a38      	ldr	r0, [r7, #32]
 8003792:	f004 fe71 	bl	8008478 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003798:	4613      	mov	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	3338      	adds	r3, #56	; 0x38
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	3304      	adds	r3, #4
 80037a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	78db      	ldrb	r3, [r3, #3]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d108      	bne.n	80037c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2200      	movs	r2, #0
 80037b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f00b fe8c 	bl	800f4dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d0:	461a      	mov	r2, r3
 80037d2:	2302      	movs	r3, #2
 80037d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fd08 	bl	80041f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	3301      	adds	r3, #1
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	085b      	lsrs	r3, r3, #1
 80037f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f47f af2e 	bne.w	8003658 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f005 fe67 	bl	80094d4 <USB_ReadInterrupts>
 8003806:	4603      	mov	r3, r0
 8003808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800380c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003810:	d122      	bne.n	8003858 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800382c:	2b01      	cmp	r3, #1
 800382e:	d108      	bne.n	8003842 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003838:	2100      	movs	r1, #0
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f00c f806 	bl	800f84c <HAL_PCDEx_LPM_Callback>
 8003840:	e002      	b.n	8003848 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f00b fe2a 	bl	800f49c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003856:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f005 fe39 	bl	80094d4 <USB_ReadInterrupts>
 8003862:	4603      	mov	r3, r0
 8003864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386c:	d112      	bne.n	8003894 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b01      	cmp	r3, #1
 800387c:	d102      	bne.n	8003884 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f00b fde6 	bl	800f450 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003892:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f005 fe1b 	bl	80094d4 <USB_ReadInterrupts>
 800389e:	4603      	mov	r3, r0
 80038a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a8:	d121      	bne.n	80038ee <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80038b8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d111      	bne.n	80038e8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	089b      	lsrs	r3, r3, #2
 80038d4:	f003 020f 	and.w	r2, r3, #15
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80038de:	2101      	movs	r1, #1
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f00b ffb3 	bl	800f84c <HAL_PCDEx_LPM_Callback>
 80038e6:	e002      	b.n	80038ee <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f00b fdb1 	bl	800f450 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f005 fdee 	bl	80094d4 <USB_ReadInterrupts>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003902:	f040 80b7 	bne.w	8003a74 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003914:	f023 0301 	bic.w	r3, r3, #1
 8003918:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2110      	movs	r1, #16
 8003920:	4618      	mov	r0, r3
 8003922:	f004 fda9 	bl	8008478 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003926:	2300      	movs	r3, #0
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800392a:	e046      	b.n	80039ba <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003938:	461a      	mov	r2, r3
 800393a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800393e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003950:	0151      	lsls	r1, r2, #5
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	440a      	add	r2, r1
 8003956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800395a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800395e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396c:	461a      	mov	r2, r3
 800396e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003972:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003984:	0151      	lsls	r1, r2, #5
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	440a      	add	r2, r1
 800398a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800398e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003992:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a4:	0151      	lsls	r1, r2, #5
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	440a      	add	r2, r1
 80039aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039b2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	3301      	adds	r3, #1
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d3b3      	bcc.n	800392c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039d2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80039d6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d016      	beq.n	8003a0e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f0:	f043 030b 	orr.w	r3, r3, #11
 80039f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a06:	f043 030b 	orr.w	r3, r3, #11
 8003a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8003a0c:	e015      	b.n	8003a3a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f242 032b 	movw	r3, #8235	; 0x202b
 8003a22:	4313      	orrs	r3, r2
 8003a24:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a34:	f043 030b 	orr.w	r3, r3, #11
 8003a38:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a48:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a4c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f005 fdfe 	bl	8009660 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f005 fd2b 	bl	80094d4 <USB_ReadInterrupts>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a88:	d124      	bne.n	8003ad4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f005 fdc2 	bl	8009618 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f004 fd6a 	bl	8008572 <USB_GetDevSpeed>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681c      	ldr	r4, [r3, #0]
 8003aaa:	f001 fa7d 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8003aae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f004 fa6f 	bl	8007f9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f00b fc9d 	bl	800f3fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ad2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f005 fcfb 	bl	80094d4 <USB_ReadInterrupts>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d10a      	bne.n	8003afe <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f00b fc7a 	bl	800f3e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f002 0208 	and.w	r2, r2, #8
 8003afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f005 fce6 	bl	80094d4 <USB_ReadInterrupts>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0e:	2b80      	cmp	r3, #128	; 0x80
 8003b10:	d122      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b1e:	2301      	movs	r3, #1
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
 8003b22:	e014      	b.n	8003b4e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d105      	bne.n	8003b48 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fb27 	bl	8004196 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d3e5      	bcc.n	8003b24 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f005 fcb9 	bl	80094d4 <USB_ReadInterrupts>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6c:	d13b      	bne.n	8003be6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b6e:	2301      	movs	r3, #1
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
 8003b72:	e02b      	b.n	8003bcc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	3340      	adds	r3, #64	; 0x40
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d115      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b9a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	da12      	bge.n	8003bc6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	333f      	adds	r3, #63	; 0x3f
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fae8 	bl	8004196 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	3301      	adds	r3, #1
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d3ce      	bcc.n	8003b74 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f005 fc72 	bl	80094d4 <USB_ReadInterrupts>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bfa:	d155      	bne.n	8003ca8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003c00:	e045      	b.n	8003c8e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c16:	4613      	mov	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d12e      	bne.n	8003c88 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c2a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	da2b      	bge.n	8003c88 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003c3c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d121      	bne.n	8003c88 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c48:	4613      	mov	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c56:	2201      	movs	r2, #1
 8003c58:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c84:	6053      	str	r3, [r2, #4]
            break;
 8003c86:	e007      	b.n	8003c98 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d3b4      	bcc.n	8003c02 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f005 fc11 	bl	80094d4 <USB_ReadInterrupts>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbc:	d10a      	bne.n	8003cd4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f00b fc1e 	bl	800f500 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f005 fbfb 	bl	80094d4 <USB_ReadInterrupts>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d115      	bne.n	8003d14 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f00b fc0e 	bl	800f51c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6859      	ldr	r1, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	605a      	str	r2, [r3, #4]
 8003d10:	e000      	b.n	8003d14 <HAL_PCD_IRQHandler+0x992>
      return;
 8003d12:	bf00      	nop
    }
  }
}
 8003d14:	3734      	adds	r7, #52	; 0x34
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd90      	pop	{r4, r7, pc}

08003d1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	460b      	mov	r3, r1
 8003d24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_PCD_SetAddress+0x1a>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e013      	b.n	8003d5c <HAL_PCD_SetAddress+0x42>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f005 fb59 	bl	8009404 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	4611      	mov	r1, r2
 8003d70:	461a      	mov	r2, r3
 8003d72:	4603      	mov	r3, r0
 8003d74:	70fb      	strb	r3, [r7, #3]
 8003d76:	460b      	mov	r3, r1
 8003d78:	803b      	strh	r3, [r7, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	da0f      	bge.n	8003daa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d8a:	78fb      	ldrb	r3, [r7, #3]
 8003d8c:	f003 020f 	and.w	r2, r3, #15
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	3338      	adds	r3, #56	; 0x38
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3304      	adds	r3, #4
 8003da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	705a      	strb	r2, [r3, #1]
 8003da8:	e00f      	b.n	8003dca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	f003 020f 	and.w	r2, r3, #15
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003dd6:	883a      	ldrh	r2, [r7, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	78ba      	ldrb	r2, [r7, #2]
 8003de0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	785b      	ldrb	r3, [r3, #1]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003df4:	78bb      	ldrb	r3, [r7, #2]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d102      	bne.n	8003e00 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_PCD_EP_Open+0xaa>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e00e      	b.n	8003e2c <HAL_PCD_EP_Open+0xc8>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68f9      	ldr	r1, [r7, #12]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f004 fbcd 	bl	80085bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003e2a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	da0f      	bge.n	8003e68 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	f003 020f 	and.w	r2, r3, #15
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	3338      	adds	r3, #56	; 0x38
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	705a      	strb	r2, [r3, #1]
 8003e66:	e00f      	b.n	8003e88 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	f003 020f 	and.w	r2, r3, #15
 8003e6e:	4613      	mov	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3304      	adds	r3, #4
 8003e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_PCD_EP_Close+0x6e>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e00e      	b.n	8003ec0 <HAL_PCD_EP_Close+0x8c>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68f9      	ldr	r1, [r7, #12]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f004 fc0b 	bl	80086cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	607a      	str	r2, [r7, #4]
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ed8:	7afb      	ldrb	r3, [r7, #11]
 8003eda:	f003 020f 	and.w	r2, r3, #15
 8003ede:	4613      	mov	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4413      	add	r3, r2
 8003eee:	3304      	adds	r3, #4
 8003ef0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2200      	movs	r2, #0
 8003f02:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2200      	movs	r2, #0
 8003f08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f0a:	7afb      	ldrb	r3, [r7, #11]
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d102      	bne.n	8003f24 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f24:	7afb      	ldrb	r3, [r7, #11]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	6979      	ldr	r1, [r7, #20]
 8003f3c:	f004 fef2 	bl	8008d24 <USB_EP0StartXfer>
 8003f40:	e008      	b.n	8003f54 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6979      	ldr	r1, [r7, #20]
 8003f50:	f004 fc98 	bl	8008884 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	f003 020f 	and.w	r2, r3, #15
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003f80:	681b      	ldr	r3, [r3, #0]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b086      	sub	sp, #24
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f9e:	7afb      	ldrb	r3, [r7, #11]
 8003fa0:	f003 020f 	and.w	r2, r3, #15
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	3338      	adds	r3, #56	; 0x38
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fce:	7afb      	ldrb	r3, [r7, #11]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d102      	bne.n	8003fe8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fe8:	7afb      	ldrb	r3, [r7, #11]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6979      	ldr	r1, [r7, #20]
 8004000:	f004 fe90 	bl	8008d24 <USB_EP0StartXfer>
 8004004:	e008      	b.n	8004018 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	6979      	ldr	r1, [r7, #20]
 8004014:	f004 fc36 	bl	8008884 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	460b      	mov	r3, r1
 800402c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800402e:	78fb      	ldrb	r3, [r7, #3]
 8004030:	f003 020f 	and.w	r2, r3, #15
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d901      	bls.n	8004040 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e050      	b.n	80040e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004044:	2b00      	cmp	r3, #0
 8004046:	da0f      	bge.n	8004068 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	f003 020f 	and.w	r2, r3, #15
 800404e:	4613      	mov	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	3338      	adds	r3, #56	; 0x38
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	4413      	add	r3, r2
 800405c:	3304      	adds	r3, #4
 800405e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	705a      	strb	r2, [r3, #1]
 8004066:	e00d      	b.n	8004084 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	4413      	add	r3, r2
 800407a:	3304      	adds	r3, #4
 800407c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800408a:	78fb      	ldrb	r3, [r7, #3]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	b2da      	uxtb	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_PCD_EP_SetStall+0x82>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e01e      	b.n	80040e2 <HAL_PCD_EP_SetStall+0xc0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68f9      	ldr	r1, [r7, #12]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f005 f8d2 	bl	800925c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	b2d9      	uxtb	r1, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040d2:	461a      	mov	r2, r3
 80040d4:	f005 fac4 	bl	8009660 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	f003 020f 	and.w	r2, r3, #15
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	429a      	cmp	r2, r3
 8004102:	d901      	bls.n	8004108 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e042      	b.n	800418e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800410c:	2b00      	cmp	r3, #0
 800410e:	da0f      	bge.n	8004130 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	f003 020f 	and.w	r2, r3, #15
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	3338      	adds	r3, #56	; 0x38
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	4413      	add	r3, r2
 8004124:	3304      	adds	r3, #4
 8004126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	705a      	strb	r2, [r3, #1]
 800412e:	e00f      	b.n	8004150 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	f003 020f 	and.w	r2, r3, #15
 8004136:	4613      	mov	r3, r2
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	4413      	add	r3, r2
 8004146:	3304      	adds	r3, #4
 8004148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	b2da      	uxtb	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_PCD_EP_ClrStall+0x86>
 800416c:	2302      	movs	r3, #2
 800416e:	e00e      	b.n	800418e <HAL_PCD_EP_ClrStall+0xa4>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68f9      	ldr	r1, [r7, #12]
 800417e:	4618      	mov	r0, r3
 8004180:	f005 f8da 	bl	8009338 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80041a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	da0c      	bge.n	80041c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	f003 020f 	and.w	r2, r3, #15
 80041b0:	4613      	mov	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	3338      	adds	r3, #56	; 0x38
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	3304      	adds	r3, #4
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	e00c      	b.n	80041de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	f003 020f 	and.w	r2, r3, #15
 80041ca:	4613      	mov	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	3304      	adds	r3, #4
 80041dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68f9      	ldr	r1, [r7, #12]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f004 fef9 	bl	8008fdc <USB_EPStopXfer>
 80041ea:	4603      	mov	r3, r0
 80041ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041ee:	7afb      	ldrb	r3, [r7, #11]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08a      	sub	sp, #40	; 0x28
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	4613      	mov	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	3338      	adds	r3, #56	; 0x38
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4413      	add	r3, r2
 800421c:	3304      	adds	r3, #4
 800421e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a1a      	ldr	r2, [r3, #32]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	429a      	cmp	r2, r3
 800422a:	d901      	bls.n	8004230 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e06c      	b.n	800430a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	699a      	ldr	r2, [r3, #24]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	429a      	cmp	r2, r3
 8004244:	d902      	bls.n	800424c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	3303      	adds	r3, #3
 8004250:	089b      	lsrs	r3, r3, #2
 8004252:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004254:	e02b      	b.n	80042ae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	429a      	cmp	r2, r3
 800426a:	d902      	bls.n	8004272 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3303      	adds	r3, #3
 8004276:	089b      	lsrs	r3, r3, #2
 8004278:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6919      	ldr	r1, [r3, #16]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800428a:	b2db      	uxtb	r3, r3
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	4603      	mov	r3, r0
 8004290:	6978      	ldr	r0, [r7, #20]
 8004292:	f004 ff4d 	bl	8009130 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	441a      	add	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a1a      	ldr	r2, [r3, #32]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	441a      	add	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d809      	bhi.n	80042d8 <PCD_WriteEmptyTxFifo+0xe0>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1a      	ldr	r2, [r3, #32]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d203      	bcs.n	80042d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1be      	bne.n	8004256 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d811      	bhi.n	8004308 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	2201      	movs	r2, #1
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	43db      	mvns	r3, r3
 80042fe:	6939      	ldr	r1, [r7, #16]
 8004300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004304:	4013      	ands	r3, r2
 8004306:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3720      	adds	r7, #32
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	333c      	adds	r3, #60	; 0x3c
 800432c:	3304      	adds	r3, #4
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d17b      	bne.n	8004442 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d015      	beq.n	8004380 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	4a61      	ldr	r2, [pc, #388]	; (80044dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	f240 80b9 	bls.w	80044d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 80b3 	beq.w	80044d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004376:	461a      	mov	r2, r3
 8004378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437c:	6093      	str	r3, [r2, #8]
 800437e:	e0a7      	b.n	80044d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004396:	461a      	mov	r2, r3
 8004398:	2320      	movs	r3, #32
 800439a:	6093      	str	r3, [r2, #8]
 800439c:	e098      	b.n	80044d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f040 8093 	bne.w	80044d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	4a4b      	ldr	r2, [pc, #300]	; (80044dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d90f      	bls.n	80043d2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	461a      	mov	r2, r3
 80043ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ce:	6093      	str	r3, [r2, #8]
 80043d0:	e07e      	b.n	80044d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	4413      	add	r3, r2
 80043e4:	3304      	adds	r3, #4
 80043e6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	69da      	ldr	r2, [r3, #28]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	0159      	lsls	r1, r3, #5
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	440b      	add	r3, r1
 80043f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043fe:	1ad2      	subs	r2, r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d114      	bne.n	8004434 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800441c:	461a      	mov	r2, r3
 800441e:	2101      	movs	r1, #1
 8004420:	f005 f91e 	bl	8009660 <USB_EP0_OutStart>
 8004424:	e006      	b.n	8004434 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	441a      	add	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	4619      	mov	r1, r3
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f00a ff9c 	bl	800f378 <HAL_PCD_DataOutStageCallback>
 8004440:	e046      	b.n	80044d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	4a26      	ldr	r2, [pc, #152]	; (80044e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d124      	bne.n	8004494 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004460:	461a      	mov	r2, r3
 8004462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004466:	6093      	str	r3, [r2, #8]
 8004468:	e032      	b.n	80044d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	461a      	mov	r2, r3
 8004482:	2320      	movs	r3, #32
 8004484:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	4619      	mov	r1, r3
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f00a ff73 	bl	800f378 <HAL_PCD_DataOutStageCallback>
 8004492:	e01d      	b.n	80044d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d114      	bne.n	80044c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d108      	bne.n	80044c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044bc:	461a      	mov	r2, r3
 80044be:	2100      	movs	r1, #0
 80044c0:	f005 f8ce 	bl	8009660 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	4619      	mov	r1, r3
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f00a ff54 	bl	800f378 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	4f54300a 	.word	0x4f54300a
 80044e0:	4f54310a 	.word	0x4f54310a

080044e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	333c      	adds	r3, #60	; 0x3c
 80044fc:	3304      	adds	r3, #4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4a15      	ldr	r2, [pc, #84]	; (800456c <PCD_EP_OutSetupPacket_int+0x88>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d90e      	bls.n	8004538 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004520:	2b00      	cmp	r3, #0
 8004522:	d009      	beq.n	8004538 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004530:	461a      	mov	r2, r3
 8004532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004536:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f00a ff0b 	bl	800f354 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4a0a      	ldr	r2, [pc, #40]	; (800456c <PCD_EP_OutSetupPacket_int+0x88>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d90c      	bls.n	8004560 <PCD_EP_OutSetupPacket_int+0x7c>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d108      	bne.n	8004560 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004558:	461a      	mov	r2, r3
 800455a:	2101      	movs	r1, #1
 800455c:	f005 f880 	bl	8009660 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	4f54300a 	.word	0x4f54300a

08004570 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
 800457c:	4613      	mov	r3, r2
 800457e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d107      	bne.n	800459e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800458e:	883b      	ldrh	r3, [r7, #0]
 8004590:	0419      	lsls	r1, r3, #16
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	430a      	orrs	r2, r1
 800459a:	629a      	str	r2, [r3, #40]	; 0x28
 800459c:	e028      	b.n	80045f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	0c1b      	lsrs	r3, r3, #16
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	4413      	add	r3, r2
 80045aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045ac:	2300      	movs	r3, #0
 80045ae:	73fb      	strb	r3, [r7, #15]
 80045b0:	e00d      	b.n	80045ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	3340      	adds	r3, #64	; 0x40
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	0c1b      	lsrs	r3, r3, #16
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	4413      	add	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	3301      	adds	r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
 80045ce:	7bfa      	ldrb	r2, [r7, #15]
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d3ec      	bcc.n	80045b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045d8:	883b      	ldrh	r3, [r7, #0]
 80045da:	0418      	lsls	r0, r3, #16
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6819      	ldr	r1, [r3, #0]
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	4302      	orrs	r2, r0
 80045e8:	3340      	adds	r3, #64	; 0x40
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	460b      	mov	r3, r1
 8004608:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	887a      	ldrh	r2, [r7, #2]
 8004610:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_PCDEx_ActivateLPM+0x44>)
 8004650:	4313      	orrs	r3, r2
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	10000003 	.word	0x10000003

08004668 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004670:	2300      	movs	r3, #0
 8004672:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e29b      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8087 	beq.w	800479a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800468c:	4b96      	ldr	r3, [pc, #600]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 030c 	and.w	r3, r3, #12
 8004694:	2b04      	cmp	r3, #4
 8004696:	d00c      	beq.n	80046b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004698:	4b93      	ldr	r3, [pc, #588]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 030c 	and.w	r3, r3, #12
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d112      	bne.n	80046ca <HAL_RCC_OscConfig+0x62>
 80046a4:	4b90      	ldr	r3, [pc, #576]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b0:	d10b      	bne.n	80046ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b2:	4b8d      	ldr	r3, [pc, #564]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d06c      	beq.n	8004798 <HAL_RCC_OscConfig+0x130>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d168      	bne.n	8004798 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e275      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d2:	d106      	bne.n	80046e2 <HAL_RCC_OscConfig+0x7a>
 80046d4:	4b84      	ldr	r3, [pc, #528]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a83      	ldr	r2, [pc, #524]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80046da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046de:	6013      	str	r3, [r2, #0]
 80046e0:	e02e      	b.n	8004740 <HAL_RCC_OscConfig+0xd8>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0x9c>
 80046ea:	4b7f      	ldr	r3, [pc, #508]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a7e      	ldr	r2, [pc, #504]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80046f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	4b7c      	ldr	r3, [pc, #496]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a7b      	ldr	r2, [pc, #492]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80046fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e01d      	b.n	8004740 <HAL_RCC_OscConfig+0xd8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800470c:	d10c      	bne.n	8004728 <HAL_RCC_OscConfig+0xc0>
 800470e:	4b76      	ldr	r3, [pc, #472]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a75      	ldr	r2, [pc, #468]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 8004714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	4b73      	ldr	r3, [pc, #460]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a72      	ldr	r2, [pc, #456]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 8004720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	e00b      	b.n	8004740 <HAL_RCC_OscConfig+0xd8>
 8004728:	4b6f      	ldr	r3, [pc, #444]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a6e      	ldr	r2, [pc, #440]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 800472e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	4b6c      	ldr	r3, [pc, #432]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a6b      	ldr	r2, [pc, #428]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 800473a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800473e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d013      	beq.n	8004770 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004748:	f7fc fff6 	bl	8001738 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004750:	f7fc fff2 	bl	8001738 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b64      	cmp	r3, #100	; 0x64
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e229      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	4b61      	ldr	r3, [pc, #388]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0xe8>
 800476e:	e014      	b.n	800479a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004770:	f7fc ffe2 	bl	8001738 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004778:	f7fc ffde 	bl	8001738 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b64      	cmp	r3, #100	; 0x64
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e215      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478a:	4b57      	ldr	r3, [pc, #348]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0x110>
 8004796:	e000      	b.n	800479a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d069      	beq.n	800487a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047a6:	4b50      	ldr	r3, [pc, #320]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00b      	beq.n	80047ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047b2:	4b4d      	ldr	r3, [pc, #308]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d11c      	bne.n	80047f8 <HAL_RCC_OscConfig+0x190>
 80047be:	4b4a      	ldr	r3, [pc, #296]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d116      	bne.n	80047f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ca:	4b47      	ldr	r3, [pc, #284]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_RCC_OscConfig+0x17a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d001      	beq.n	80047e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e1e9      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e2:	4b41      	ldr	r3, [pc, #260]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	493d      	ldr	r1, [pc, #244]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f6:	e040      	b.n	800487a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d023      	beq.n	8004848 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004800:	4b39      	ldr	r3, [pc, #228]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a38      	ldr	r2, [pc, #224]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fc ff94 	bl	8001738 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004814:	f7fc ff90 	bl	8001738 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e1c7      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004826:	4b30      	ldr	r3, [pc, #192]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004832:	4b2d      	ldr	r3, [pc, #180]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4929      	ldr	r1, [pc, #164]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 8004842:	4313      	orrs	r3, r2
 8004844:	600b      	str	r3, [r1, #0]
 8004846:	e018      	b.n	800487a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004848:	4b27      	ldr	r3, [pc, #156]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a26      	ldr	r2, [pc, #152]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fc ff70 	bl	8001738 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800485c:	f7fc ff6c 	bl	8001738 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e1a3      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486e:	4b1e      	ldr	r3, [pc, #120]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d038      	beq.n	80048f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d019      	beq.n	80048c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800488e:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 8004890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004892:	4a15      	ldr	r2, [pc, #84]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489a:	f7fc ff4d 	bl	8001738 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a2:	f7fc ff49 	bl	8001738 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e180      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80048b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0f0      	beq.n	80048a2 <HAL_RCC_OscConfig+0x23a>
 80048c0:	e01a      	b.n	80048f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80048c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c6:	4a08      	ldr	r2, [pc, #32]	; (80048e8 <HAL_RCC_OscConfig+0x280>)
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ce:	f7fc ff33 	bl	8001738 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d4:	e00a      	b.n	80048ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d6:	f7fc ff2f 	bl	8001738 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d903      	bls.n	80048ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e166      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>
 80048e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ec:	4b92      	ldr	r3, [pc, #584]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 80048ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ee      	bne.n	80048d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 80a4 	beq.w	8004a4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004906:	4b8c      	ldr	r3, [pc, #560]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10d      	bne.n	800492e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004912:	4b89      	ldr	r3, [pc, #548]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	4a88      	ldr	r2, [pc, #544]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491c:	6413      	str	r3, [r2, #64]	; 0x40
 800491e:	4b86      	ldr	r3, [pc, #536]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004926:	60bb      	str	r3, [r7, #8]
 8004928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492a:	2301      	movs	r3, #1
 800492c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800492e:	4b83      	ldr	r3, [pc, #524]	; (8004b3c <HAL_RCC_OscConfig+0x4d4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d118      	bne.n	800496c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800493a:	4b80      	ldr	r3, [pc, #512]	; (8004b3c <HAL_RCC_OscConfig+0x4d4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a7f      	ldr	r2, [pc, #508]	; (8004b3c <HAL_RCC_OscConfig+0x4d4>)
 8004940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004946:	f7fc fef7 	bl	8001738 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800494e:	f7fc fef3 	bl	8001738 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b64      	cmp	r3, #100	; 0x64
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e12a      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004960:	4b76      	ldr	r3, [pc, #472]	; (8004b3c <HAL_RCC_OscConfig+0x4d4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d106      	bne.n	8004982 <HAL_RCC_OscConfig+0x31a>
 8004974:	4b70      	ldr	r3, [pc, #448]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004978:	4a6f      	ldr	r2, [pc, #444]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	6713      	str	r3, [r2, #112]	; 0x70
 8004980:	e02d      	b.n	80049de <HAL_RCC_OscConfig+0x376>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x33c>
 800498a:	4b6b      	ldr	r3, [pc, #428]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	4a6a      	ldr	r2, [pc, #424]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	6713      	str	r3, [r2, #112]	; 0x70
 8004996:	4b68      	ldr	r3, [pc, #416]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499a:	4a67      	ldr	r2, [pc, #412]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 800499c:	f023 0304 	bic.w	r3, r3, #4
 80049a0:	6713      	str	r3, [r2, #112]	; 0x70
 80049a2:	e01c      	b.n	80049de <HAL_RCC_OscConfig+0x376>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b05      	cmp	r3, #5
 80049aa:	d10c      	bne.n	80049c6 <HAL_RCC_OscConfig+0x35e>
 80049ac:	4b62      	ldr	r3, [pc, #392]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b0:	4a61      	ldr	r2, [pc, #388]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 80049b2:	f043 0304 	orr.w	r3, r3, #4
 80049b6:	6713      	str	r3, [r2, #112]	; 0x70
 80049b8:	4b5f      	ldr	r3, [pc, #380]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049bc:	4a5e      	ldr	r2, [pc, #376]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6713      	str	r3, [r2, #112]	; 0x70
 80049c4:	e00b      	b.n	80049de <HAL_RCC_OscConfig+0x376>
 80049c6:	4b5c      	ldr	r3, [pc, #368]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	4a5b      	ldr	r2, [pc, #364]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	6713      	str	r3, [r2, #112]	; 0x70
 80049d2:	4b59      	ldr	r3, [pc, #356]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	4a58      	ldr	r2, [pc, #352]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 80049d8:	f023 0304 	bic.w	r3, r3, #4
 80049dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d015      	beq.n	8004a12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e6:	f7fc fea7 	bl	8001738 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ec:	e00a      	b.n	8004a04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ee:	f7fc fea3 	bl	8001738 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e0d8      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a04:	4b4c      	ldr	r3, [pc, #304]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0ee      	beq.n	80049ee <HAL_RCC_OscConfig+0x386>
 8004a10:	e014      	b.n	8004a3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a12:	f7fc fe91 	bl	8001738 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a18:	e00a      	b.n	8004a30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1a:	f7fc fe8d 	bl	8001738 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e0c2      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a30:	4b41      	ldr	r3, [pc, #260]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1ee      	bne.n	8004a1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d105      	bne.n	8004a4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a42:	4b3d      	ldr	r3, [pc, #244]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	4a3c      	ldr	r2, [pc, #240]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 80ae 	beq.w	8004bb4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a58:	4b37      	ldr	r3, [pc, #220]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 030c 	and.w	r3, r3, #12
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d06d      	beq.n	8004b40 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d14b      	bne.n	8004b04 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6c:	4b32      	ldr	r3, [pc, #200]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a31      	ldr	r2, [pc, #196]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fc fe5e 	bl	8001738 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a80:	f7fc fe5a 	bl	8001738 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e091      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a92:	4b29      	ldr	r3, [pc, #164]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69da      	ldr	r2, [r3, #28]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	019b      	lsls	r3, r3, #6
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	041b      	lsls	r3, r3, #16
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	071b      	lsls	r3, r3, #28
 8004aca:	491b      	ldr	r1, [pc, #108]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fc fe2c 	bl	8001738 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7fc fe28 	bl	8001738 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e05f      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af6:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x47c>
 8004b02:	e057      	b.n	8004bb4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a0b      	ldr	r2, [pc, #44]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fc fe12 	bl	8001738 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b18:	f7fc fe0e 	bl	8001738 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e045      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2a:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <HAL_RCC_OscConfig+0x4d0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x4b0>
 8004b36:	e03d      	b.n	8004bb4 <HAL_RCC_OscConfig+0x54c>
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004b40:	4b1f      	ldr	r3, [pc, #124]	; (8004bc0 <HAL_RCC_OscConfig+0x558>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d030      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d129      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d122      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b70:	4013      	ands	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d119      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d10f      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d107      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d001      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40023800 	.word	0x40023800

08004bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0d0      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bdc:	4b6a      	ldr	r3, [pc, #424]	; (8004d88 <HAL_RCC_ClockConfig+0x1c4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d910      	bls.n	8004c0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bea:	4b67      	ldr	r3, [pc, #412]	; (8004d88 <HAL_RCC_ClockConfig+0x1c4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 020f 	bic.w	r2, r3, #15
 8004bf2:	4965      	ldr	r1, [pc, #404]	; (8004d88 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfa:	4b63      	ldr	r3, [pc, #396]	; (8004d88 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0b8      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d020      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c24:	4b59      	ldr	r3, [pc, #356]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	4a58      	ldr	r2, [pc, #352]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c3c:	4b53      	ldr	r3, [pc, #332]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	4a52      	ldr	r2, [pc, #328]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c48:	4b50      	ldr	r3, [pc, #320]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	494d      	ldr	r1, [pc, #308]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d040      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d107      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6e:	4b47      	ldr	r3, [pc, #284]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d115      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e07f      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d107      	bne.n	8004c96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c86:	4b41      	ldr	r3, [pc, #260]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d109      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e073      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c96:	4b3d      	ldr	r3, [pc, #244]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e06b      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ca6:	4b39      	ldr	r3, [pc, #228]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f023 0203 	bic.w	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	4936      	ldr	r1, [pc, #216]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb8:	f7fc fd3e 	bl	8001738 <HAL_GetTick>
 8004cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	e00a      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc0:	f7fc fd3a 	bl	8001738 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e053      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd6:	4b2d      	ldr	r3, [pc, #180]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 020c 	and.w	r2, r3, #12
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d1eb      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ce8:	4b27      	ldr	r3, [pc, #156]	; (8004d88 <HAL_RCC_ClockConfig+0x1c4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d210      	bcs.n	8004d18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf6:	4b24      	ldr	r3, [pc, #144]	; (8004d88 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f023 020f 	bic.w	r2, r3, #15
 8004cfe:	4922      	ldr	r1, [pc, #136]	; (8004d88 <HAL_RCC_ClockConfig+0x1c4>)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d06:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <HAL_RCC_ClockConfig+0x1c4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d001      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e032      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d24:	4b19      	ldr	r3, [pc, #100]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4916      	ldr	r1, [pc, #88]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	490e      	ldr	r1, [pc, #56]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d56:	f000 f821 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	490a      	ldr	r1, [pc, #40]	; (8004d90 <HAL_RCC_ClockConfig+0x1cc>)
 8004d68:	5ccb      	ldrb	r3, [r1, r3]
 8004d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6e:	4a09      	ldr	r2, [pc, #36]	; (8004d94 <HAL_RCC_ClockConfig+0x1d0>)
 8004d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d72:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <HAL_RCC_ClockConfig+0x1d4>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fc fc9a 	bl	80016b0 <HAL_InitTick>

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40023c00 	.word	0x40023c00
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	08011078 	.word	0x08011078
 8004d94:	20000000 	.word	0x20000000
 8004d98:	20000004 	.word	0x20000004

08004d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da0:	b094      	sub	sp, #80	; 0x50
 8004da2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	647b      	str	r3, [r7, #68]	; 0x44
 8004da8:	2300      	movs	r3, #0
 8004daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dac:	2300      	movs	r3, #0
 8004dae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004db4:	4b79      	ldr	r3, [pc, #484]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 030c 	and.w	r3, r3, #12
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d00d      	beq.n	8004ddc <HAL_RCC_GetSysClockFreq+0x40>
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	f200 80e1 	bhi.w	8004f88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d003      	beq.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dce:	e0db      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dd0:	4b73      	ldr	r3, [pc, #460]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dd4:	e0db      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dd6:	4b73      	ldr	r3, [pc, #460]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004dd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dda:	e0d8      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ddc:	4b6f      	ldr	r3, [pc, #444]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004de6:	4b6d      	ldr	r3, [pc, #436]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d063      	beq.n	8004eba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df2:	4b6a      	ldr	r3, [pc, #424]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	099b      	lsrs	r3, r3, #6
 8004df8:	2200      	movs	r2, #0
 8004dfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e04:	633b      	str	r3, [r7, #48]	; 0x30
 8004e06:	2300      	movs	r3, #0
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e0e:	4622      	mov	r2, r4
 8004e10:	462b      	mov	r3, r5
 8004e12:	f04f 0000 	mov.w	r0, #0
 8004e16:	f04f 0100 	mov.w	r1, #0
 8004e1a:	0159      	lsls	r1, r3, #5
 8004e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e20:	0150      	lsls	r0, r2, #5
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4621      	mov	r1, r4
 8004e28:	1a51      	subs	r1, r2, r1
 8004e2a:	6139      	str	r1, [r7, #16]
 8004e2c:	4629      	mov	r1, r5
 8004e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e40:	4659      	mov	r1, fp
 8004e42:	018b      	lsls	r3, r1, #6
 8004e44:	4651      	mov	r1, sl
 8004e46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e4a:	4651      	mov	r1, sl
 8004e4c:	018a      	lsls	r2, r1, #6
 8004e4e:	4651      	mov	r1, sl
 8004e50:	ebb2 0801 	subs.w	r8, r2, r1
 8004e54:	4659      	mov	r1, fp
 8004e56:	eb63 0901 	sbc.w	r9, r3, r1
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e6e:	4690      	mov	r8, r2
 8004e70:	4699      	mov	r9, r3
 8004e72:	4623      	mov	r3, r4
 8004e74:	eb18 0303 	adds.w	r3, r8, r3
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	462b      	mov	r3, r5
 8004e7c:	eb49 0303 	adc.w	r3, r9, r3
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e8e:	4629      	mov	r1, r5
 8004e90:	024b      	lsls	r3, r1, #9
 8004e92:	4621      	mov	r1, r4
 8004e94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e98:	4621      	mov	r1, r4
 8004e9a:	024a      	lsls	r2, r1, #9
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ea8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eac:	f7fb fa18 	bl	80002e0 <__aeabi_uldivmod>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eb8:	e058      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eba:	4b38      	ldr	r3, [pc, #224]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	099b      	lsrs	r3, r3, #6
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004eca:	623b      	str	r3, [r7, #32]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	f04f 0000 	mov.w	r0, #0
 8004edc:	f04f 0100 	mov.w	r1, #0
 8004ee0:	0159      	lsls	r1, r3, #5
 8004ee2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee6:	0150      	lsls	r0, r2, #5
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4641      	mov	r1, r8
 8004eee:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f0c:	ebb2 040a 	subs.w	r4, r2, sl
 8004f10:	eb63 050b 	sbc.w	r5, r3, fp
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	00eb      	lsls	r3, r5, #3
 8004f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f22:	00e2      	lsls	r2, r4, #3
 8004f24:	4614      	mov	r4, r2
 8004f26:	461d      	mov	r5, r3
 8004f28:	4643      	mov	r3, r8
 8004f2a:	18e3      	adds	r3, r4, r3
 8004f2c:	603b      	str	r3, [r7, #0]
 8004f2e:	464b      	mov	r3, r9
 8004f30:	eb45 0303 	adc.w	r3, r5, r3
 8004f34:	607b      	str	r3, [r7, #4]
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f42:	4629      	mov	r1, r5
 8004f44:	028b      	lsls	r3, r1, #10
 8004f46:	4621      	mov	r1, r4
 8004f48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	028a      	lsls	r2, r1, #10
 8004f50:	4610      	mov	r0, r2
 8004f52:	4619      	mov	r1, r3
 8004f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f56:	2200      	movs	r2, #0
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	61fa      	str	r2, [r7, #28]
 8004f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f60:	f7fb f9be 	bl	80002e0 <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4613      	mov	r3, r2
 8004f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	0c1b      	lsrs	r3, r3, #16
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	3301      	adds	r3, #1
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004f7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f86:	e002      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f88:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3750      	adds	r7, #80	; 0x50
 8004f94:	46bd      	mov	sp, r7
 8004f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	00f42400 	.word	0x00f42400
 8004fa4:	007a1200 	.word	0x007a1200

08004fa8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fac:	4b03      	ldr	r3, [pc, #12]	; (8004fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fae:	681b      	ldr	r3, [r3, #0]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000000 	.word	0x20000000

08004fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fc4:	f7ff fff0 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	0a9b      	lsrs	r3, r3, #10
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	4903      	ldr	r1, [pc, #12]	; (8004fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fd6:	5ccb      	ldrb	r3, [r1, r3]
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	08011088 	.word	0x08011088

08004fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fec:	f7ff ffdc 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	4b05      	ldr	r3, [pc, #20]	; (8005008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	0b5b      	lsrs	r3, r3, #13
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	4903      	ldr	r1, [pc, #12]	; (800500c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ffe:	5ccb      	ldrb	r3, [r1, r3]
 8005000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005004:	4618      	mov	r0, r3
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40023800 	.word	0x40023800
 800500c:	08011088 	.word	0x08011088

08005010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005028:	2300      	movs	r3, #0
 800502a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d012      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005038:	4b69      	ldr	r3, [pc, #420]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	4a68      	ldr	r2, [pc, #416]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005042:	6093      	str	r3, [r2, #8]
 8005044:	4b66      	ldr	r3, [pc, #408]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504c:	4964      	ldr	r1, [pc, #400]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504e:	4313      	orrs	r3, r2
 8005050:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800505a:	2301      	movs	r3, #1
 800505c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d017      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800506a:	4b5d      	ldr	r3, [pc, #372]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800506c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005070:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005078:	4959      	ldr	r1, [pc, #356]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507a:	4313      	orrs	r3, r2
 800507c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005084:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005088:	d101      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800508a:	2301      	movs	r3, #1
 800508c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005096:	2301      	movs	r3, #1
 8005098:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d017      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050a6:	4b4e      	ldr	r3, [pc, #312]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	494a      	ldr	r1, [pc, #296]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050c4:	d101      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80050c6:	2301      	movs	r3, #1
 80050c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80050d2:	2301      	movs	r3, #1
 80050d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80050e2:	2301      	movs	r3, #1
 80050e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 808b 	beq.w	800520a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050f4:	4b3a      	ldr	r3, [pc, #232]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	4a39      	ldr	r2, [pc, #228]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fe:	6413      	str	r3, [r2, #64]	; 0x40
 8005100:	4b37      	ldr	r3, [pc, #220]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800510c:	4b35      	ldr	r3, [pc, #212]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a34      	ldr	r2, [pc, #208]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005118:	f7fc fb0e 	bl	8001738 <HAL_GetTick>
 800511c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005120:	f7fc fb0a 	bl	8001738 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b64      	cmp	r3, #100	; 0x64
 800512c:	d901      	bls.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e38f      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005132:	4b2c      	ldr	r3, [pc, #176]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0f0      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800513e:	4b28      	ldr	r3, [pc, #160]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005146:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d035      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	429a      	cmp	r2, r3
 800515a:	d02e      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800515c:	4b20      	ldr	r3, [pc, #128]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005164:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005166:	4b1e      	ldr	r3, [pc, #120]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516a:	4a1d      	ldr	r2, [pc, #116]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005170:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005172:	4b1b      	ldr	r3, [pc, #108]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005176:	4a1a      	ldr	r2, [pc, #104]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800517c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800517e:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005184:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b01      	cmp	r3, #1
 800518e:	d114      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005190:	f7fc fad2 	bl	8001738 <HAL_GetTick>
 8005194:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005196:	e00a      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005198:	f7fc face 	bl	8001738 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e351      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ae:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0ee      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c6:	d111      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051d4:	4b04      	ldr	r3, [pc, #16]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80051d6:	400b      	ands	r3, r1
 80051d8:	4901      	ldr	r1, [pc, #4]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]
 80051de:	e00b      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80051e0:	40023800 	.word	0x40023800
 80051e4:	40007000 	.word	0x40007000
 80051e8:	0ffffcff 	.word	0x0ffffcff
 80051ec:	4bac      	ldr	r3, [pc, #688]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	4aab      	ldr	r2, [pc, #684]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051f6:	6093      	str	r3, [r2, #8]
 80051f8:	4ba9      	ldr	r3, [pc, #676]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005204:	49a6      	ldr	r1, [pc, #664]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005206:	4313      	orrs	r3, r2
 8005208:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0310 	and.w	r3, r3, #16
 8005212:	2b00      	cmp	r3, #0
 8005214:	d010      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005216:	4ba2      	ldr	r3, [pc, #648]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800521c:	4aa0      	ldr	r2, [pc, #640]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005222:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005226:	4b9e      	ldr	r3, [pc, #632]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005228:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	499b      	ldr	r1, [pc, #620]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005244:	4b96      	ldr	r3, [pc, #600]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005252:	4993      	ldr	r1, [pc, #588]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005266:	4b8e      	ldr	r3, [pc, #568]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005274:	498a      	ldr	r1, [pc, #552]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005288:	4b85      	ldr	r3, [pc, #532]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800528a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005296:	4982      	ldr	r1, [pc, #520]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052aa:	4b7d      	ldr	r3, [pc, #500]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b8:	4979      	ldr	r1, [pc, #484]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052cc:	4b74      	ldr	r3, [pc, #464]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d2:	f023 0203 	bic.w	r2, r3, #3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	4971      	ldr	r1, [pc, #452]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052ee:	4b6c      	ldr	r3, [pc, #432]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f4:	f023 020c 	bic.w	r2, r3, #12
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fc:	4968      	ldr	r1, [pc, #416]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005310:	4b63      	ldr	r3, [pc, #396]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531e:	4960      	ldr	r1, [pc, #384]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005332:	4b5b      	ldr	r3, [pc, #364]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005338:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005340:	4957      	ldr	r1, [pc, #348]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005354:	4b52      	ldr	r3, [pc, #328]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005362:	494f      	ldr	r1, [pc, #316]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005376:	4b4a      	ldr	r3, [pc, #296]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005384:	4946      	ldr	r1, [pc, #280]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005398:	4b41      	ldr	r3, [pc, #260]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a6:	493e      	ldr	r1, [pc, #248]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80053ba:	4b39      	ldr	r3, [pc, #228]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c8:	4935      	ldr	r1, [pc, #212]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053dc:	4b30      	ldr	r3, [pc, #192]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ea:	492d      	ldr	r1, [pc, #180]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d011      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80053fe:	4b28      	ldr	r3, [pc, #160]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005404:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800540c:	4924      	ldr	r1, [pc, #144]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800541c:	d101      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800541e:	2301      	movs	r3, #1
 8005420:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800542e:	2301      	movs	r3, #1
 8005430:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800543e:	4b18      	ldr	r3, [pc, #96]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005444:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800544c:	4914      	ldr	r1, [pc, #80]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00b      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005460:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005470:	490b      	ldr	r1, [pc, #44]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00f      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005484:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005494:	4902      	ldr	r1, [pc, #8]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800549c:	e002      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800549e:	bf00      	nop
 80054a0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00b      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054b0:	4b8a      	ldr	r3, [pc, #552]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c0:	4986      	ldr	r1, [pc, #536]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00b      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80054d4:	4b81      	ldr	r3, [pc, #516]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054e4:	497d      	ldr	r1, [pc, #500]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d006      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 80d6 	beq.w	80056ac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005500:	4b76      	ldr	r3, [pc, #472]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a75      	ldr	r2, [pc, #468]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005506:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800550a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800550c:	f7fc f914 	bl	8001738 <HAL_GetTick>
 8005510:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005514:	f7fc f910 	bl	8001738 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b64      	cmp	r3, #100	; 0x64
 8005520:	d901      	bls.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e195      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005526:	4b6d      	ldr	r3, [pc, #436]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d021      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005542:	2b00      	cmp	r3, #0
 8005544:	d11d      	bne.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005546:	4b65      	ldr	r3, [pc, #404]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800554c:	0c1b      	lsrs	r3, r3, #16
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005554:	4b61      	ldr	r3, [pc, #388]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800555a:	0e1b      	lsrs	r3, r3, #24
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	019a      	lsls	r2, r3, #6
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	041b      	lsls	r3, r3, #16
 800556c:	431a      	orrs	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	061b      	lsls	r3, r3, #24
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	071b      	lsls	r3, r3, #28
 800557a:	4958      	ldr	r1, [pc, #352]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d004      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005596:	d00a      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02e      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ac:	d129      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055ae:	4b4b      	ldr	r3, [pc, #300]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055bc:	4b47      	ldr	r3, [pc, #284]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055c2:	0f1b      	lsrs	r3, r3, #28
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	019a      	lsls	r2, r3, #6
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	061b      	lsls	r3, r3, #24
 80055dc:	431a      	orrs	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	071b      	lsls	r3, r3, #28
 80055e2:	493e      	ldr	r1, [pc, #248]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055ea:	4b3c      	ldr	r3, [pc, #240]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f0:	f023 021f 	bic.w	r2, r3, #31
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	3b01      	subs	r3, #1
 80055fa:	4938      	ldr	r1, [pc, #224]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01d      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800560e:	4b33      	ldr	r3, [pc, #204]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005614:	0e1b      	lsrs	r3, r3, #24
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800561c:	4b2f      	ldr	r3, [pc, #188]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800561e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005622:	0f1b      	lsrs	r3, r3, #28
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	019a      	lsls	r2, r3, #6
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	431a      	orrs	r2, r3
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	061b      	lsls	r3, r3, #24
 800563c:	431a      	orrs	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	071b      	lsls	r3, r3, #28
 8005642:	4926      	ldr	r1, [pc, #152]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d011      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	019a      	lsls	r2, r3, #6
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	041b      	lsls	r3, r3, #16
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	061b      	lsls	r3, r3, #24
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	071b      	lsls	r3, r3, #28
 8005672:	491a      	ldr	r1, [pc, #104]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800567a:	4b18      	ldr	r3, [pc, #96]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a17      	ldr	r2, [pc, #92]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005680:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005686:	f7fc f857 	bl	8001738 <HAL_GetTick>
 800568a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800568c:	e008      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800568e:	f7fc f853 	bl	8001738 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b64      	cmp	r3, #100	; 0x64
 800569a:	d901      	bls.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e0d8      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056a0:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f0      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	f040 80ce 	bne.w	8005850 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a08      	ldr	r2, [pc, #32]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c0:	f7fc f83a 	bl	8001738 <HAL_GetTick>
 80056c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80056c6:	e00b      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056c8:	f7fc f836 	bl	8001738 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b64      	cmp	r3, #100	; 0x64
 80056d4:	d904      	bls.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e0bb      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80056da:	bf00      	nop
 80056dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80056e0:	4b5e      	ldr	r3, [pc, #376]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ec:	d0ec      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800570a:	2b00      	cmp	r3, #0
 800570c:	d02e      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d12a      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005716:	4b51      	ldr	r3, [pc, #324]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571c:	0c1b      	lsrs	r3, r3, #16
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005724:	4b4d      	ldr	r3, [pc, #308]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572a:	0f1b      	lsrs	r3, r3, #28
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	019a      	lsls	r2, r3, #6
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	041b      	lsls	r3, r3, #16
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	061b      	lsls	r3, r3, #24
 8005744:	431a      	orrs	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	071b      	lsls	r3, r3, #28
 800574a:	4944      	ldr	r1, [pc, #272]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005752:	4b42      	ldr	r3, [pc, #264]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005758:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	3b01      	subs	r3, #1
 8005762:	021b      	lsls	r3, r3, #8
 8005764:	493d      	ldr	r1, [pc, #244]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d022      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800577c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005780:	d11d      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005782:	4b36      	ldr	r3, [pc, #216]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005788:	0e1b      	lsrs	r3, r3, #24
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005790:	4b32      	ldr	r3, [pc, #200]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005796:	0f1b      	lsrs	r3, r3, #28
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	019a      	lsls	r2, r3, #6
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	041b      	lsls	r3, r3, #16
 80057aa:	431a      	orrs	r2, r3
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	061b      	lsls	r3, r3, #24
 80057b0:	431a      	orrs	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	071b      	lsls	r3, r3, #28
 80057b6:	4929      	ldr	r1, [pc, #164]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d028      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057ca:	4b24      	ldr	r3, [pc, #144]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	0e1b      	lsrs	r3, r3, #24
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057d8:	4b20      	ldr	r3, [pc, #128]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057de:	0c1b      	lsrs	r3, r3, #16
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	019a      	lsls	r2, r3, #6
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	041b      	lsls	r3, r3, #16
 80057f0:	431a      	orrs	r2, r3
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	061b      	lsls	r3, r3, #24
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	071b      	lsls	r3, r3, #28
 80057fe:	4917      	ldr	r1, [pc, #92]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005806:	4b15      	ldr	r3, [pc, #84]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800580c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	4911      	ldr	r1, [pc, #68]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800581c:	4b0f      	ldr	r3, [pc, #60]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a0e      	ldr	r2, [pc, #56]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005828:	f7fb ff86 	bl	8001738 <HAL_GetTick>
 800582c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800582e:	e008      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005830:	f7fb ff82 	bl	8001738 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b64      	cmp	r3, #100	; 0x64
 800583c:	d901      	bls.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e007      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005842:	4b06      	ldr	r3, [pc, #24]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800584a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800584e:	d1ef      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3720      	adds	r7, #32
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40023800 	.word	0x40023800

08005860 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e022      	b.n	80058b8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d105      	bne.n	800588a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7fb fc49 	bl	800111c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2203      	movs	r2, #3
 800588e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f814 	bl	80058c0 <HAL_SD_InitCard>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e00a      	b.n	80058b8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80058c0:	b5b0      	push	{r4, r5, r7, lr}
 80058c2:	b08e      	sub	sp, #56	; 0x38
 80058c4:	af04      	add	r7, sp, #16
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80058d0:	2300      	movs	r3, #0
 80058d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80058dc:	2376      	movs	r3, #118	; 0x76
 80058de:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681d      	ldr	r5, [r3, #0]
 80058e4:	466c      	mov	r4, sp
 80058e6:	f107 0314 	add.w	r3, r7, #20
 80058ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80058ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80058f2:	f107 0308 	add.w	r3, r7, #8
 80058f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058f8:	4628      	mov	r0, r5
 80058fa:	f001 fdc5 	bl	8007488 <SDMMC_Init>
 80058fe:	4603      	mov	r3, r0
 8005900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e059      	b.n	80059c4 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800591e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	f001 fdf9 	bl	800751c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005938:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800593a:	2002      	movs	r0, #2
 800593c:	f7fb ff08 	bl	8001750 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 ff59 	bl	80067f8 <SD_PowerON>
 8005946:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e02e      	b.n	80059c4 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fe78 	bl	800665c <SD_InitCard>
 800596c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e01b      	b.n	80059c4 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005994:	4618      	mov	r0, r3
 8005996:	f001 fe53 	bl	8007640 <SDMMC_CmdBlockLength>
 800599a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00f      	beq.n	80059c2 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a09      	ldr	r2, [pc, #36]	; (80059cc <HAL_SD_InitCard+0x10c>)
 80059a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3728      	adds	r7, #40	; 0x28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bdb0      	pop	{r4, r5, r7, pc}
 80059cc:	004005ff 	.word	0x004005ff

080059d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08c      	sub	sp, #48	; 0x30
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d107      	bne.n	80059f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0c3      	b.n	8005b80 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	f040 80bc 	bne.w	8005b7e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	441a      	add	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d907      	bls.n	8005a2a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e0aa      	b.n	8005b80 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2200      	movs	r2, #0
 8005a38:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005a48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	4a4e      	ldr	r2, [pc, #312]	; (8005b88 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005a50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	4a4d      	ldr	r2, [pc, #308]	; (8005b8c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005a58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	2200      	movs	r2, #0
 8005a60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	2200      	movs	r2, #0
 8005a68:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3380      	adds	r3, #128	; 0x80
 8005a90:	4619      	mov	r1, r3
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	025b      	lsls	r3, r3, #9
 8005a98:	089b      	lsrs	r3, r3, #2
 8005a9a:	f7fc fe33 	bl	8002704 <HAL_DMA_Start_IT>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d017      	beq.n	8005ad4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005ab2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a35      	ldr	r2, [pc, #212]	; (8005b90 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e055      	b.n	8005b80 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0208 	orr.w	r2, r2, #8
 8005ae2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d002      	beq.n	8005af2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8005aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aee:	025b      	lsls	r3, r3, #9
 8005af0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005af6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	025b      	lsls	r3, r3, #9
 8005afc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005afe:	2390      	movs	r3, #144	; 0x90
 8005b00:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005b02:	2302      	movs	r3, #2
 8005b04:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f107 0210 	add.w	r2, r7, #16
 8005b16:	4611      	mov	r1, r2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f001 fd65 	bl	80075e8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d90a      	bls.n	8005b3a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2282      	movs	r2, #130	; 0x82
 8005b28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b30:	4618      	mov	r0, r3
 8005b32:	f001 fdc9 	bl	80076c8 <SDMMC_CmdReadMultiBlock>
 8005b36:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005b38:	e009      	b.n	8005b4e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2281      	movs	r2, #129	; 0x81
 8005b3e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b46:	4618      	mov	r0, r3
 8005b48:	f001 fd9c 	bl	8007684 <SDMMC_CmdReadSingleBlock>
 8005b4c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d012      	beq.n	8005b7a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a0d      	ldr	r2, [pc, #52]	; (8005b90 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005b5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b62:	431a      	orrs	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e002      	b.n	8005b80 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e000      	b.n	8005b80 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005b7e:	2302      	movs	r3, #2
  }
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3730      	adds	r7, #48	; 0x30
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	0800646b 	.word	0x0800646b
 8005b8c:	080064dd 	.word	0x080064dd
 8005b90:	004005ff 	.word	0x004005ff

08005b94 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08c      	sub	sp, #48	; 0x30
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d107      	bne.n	8005bbc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e0c6      	b.n	8005d4a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	f040 80bf 	bne.w	8005d48 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	441a      	add	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d907      	bls.n	8005bee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e0ad      	b.n	8005d4a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 021a 	orr.w	r2, r2, #26
 8005c0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c12:	4a50      	ldr	r2, [pc, #320]	; (8005d54 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8005c14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	4a4f      	ldr	r2, [pc, #316]	; (8005d58 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005c1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c22:	2200      	movs	r2, #0
 8005c24:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d002      	beq.n	8005c34 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	025b      	lsls	r3, r3, #9
 8005c32:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d90a      	bls.n	8005c50 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	22a0      	movs	r2, #160	; 0xa0
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c46:	4618      	mov	r0, r3
 8005c48:	f001 fd82 	bl	8007750 <SDMMC_CmdWriteMultiBlock>
 8005c4c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005c4e:	e009      	b.n	8005c64 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2290      	movs	r2, #144	; 0x90
 8005c54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 fd55 	bl	800770c <SDMMC_CmdWriteSingleBlock>
 8005c62:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d012      	beq.n	8005c90 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a3b      	ldr	r2, [pc, #236]	; (8005d5c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005c70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e05c      	b.n	8005d4a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0208 	orr.w	r2, r2, #8
 8005c9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca4:	2240      	movs	r2, #64	; 0x40
 8005ca6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3380      	adds	r3, #128	; 0x80
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	025b      	lsls	r3, r3, #9
 8005cd6:	089b      	lsrs	r3, r3, #2
 8005cd8:	f7fc fd14 	bl	8002704 <HAL_DMA_Start_IT>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d01a      	beq.n	8005d18 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 021a 	bic.w	r2, r2, #26
 8005cf0:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a19      	ldr	r2, [pc, #100]	; (8005d5c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005cf8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e018      	b.n	8005d4a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d1c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	025b      	lsls	r3, r3, #9
 8005d22:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005d24:	2390      	movs	r3, #144	; 0x90
 8005d26:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005d30:	2301      	movs	r3, #1
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f107 0210 	add.w	r2, r7, #16
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 fc52 	bl	80075e8 <SDMMC_ConfigData>

      return HAL_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	e000      	b.n	8005d4a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3730      	adds	r7, #48	; 0x30
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	08006441 	.word	0x08006441
 8005d58:	080064dd 	.word	0x080064dd
 8005d5c:	004005ff 	.word	0x004005ff

08005d60 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <HAL_SD_IRQHandler+0x2e>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fdec 	bl	8006964 <SD_Read_IT>
 8005d8c:	e15a      	b.n	8006044 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 808d 	beq.w	8005eb8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4b9a      	ldr	r3, [pc, #616]	; (800601c <HAL_SD_IRQHandler+0x2bc>)
 8005db4:	400b      	ands	r3, r1
 8005db6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d039      	beq.n	8005e46 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d104      	bne.n	8005de6 <HAL_SD_IRQHandler+0x86>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f003 0320 	and.w	r3, r3, #32
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d011      	beq.n	8005e0a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f001 fcd2 	bl	8007794 <SDMMC_CmdStopTransfer>
 8005df0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d008      	beq.n	8005e0a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f921 	bl	800604c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d104      	bne.n	8005e36 <HAL_SD_IRQHandler+0xd6>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f003 fd3c 	bl	80098b4 <HAL_SD_RxCpltCallback>
 8005e3c:	e102      	b.n	8006044 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f003 fd2e 	bl	80098a0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005e44:	e0fe      	b.n	8006044 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 80f9 	beq.w	8006044 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f003 0320 	and.w	r3, r3, #32
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d011      	beq.n	8005e80 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f001 fc97 	bl	8007794 <SDMMC_CmdStopTransfer>
 8005e66:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d008      	beq.n	8005e80 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f8e6 	bl	800604c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f040 80dc 	bne.w	8006044 <HAL_SD_IRQHandler+0x2e4>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f040 80d6 	bne.w	8006044 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0208 	bic.w	r2, r2, #8
 8005ea6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f003 fcf5 	bl	80098a0 <HAL_SD_TxCpltCallback>
}
 8005eb6:	e0c5      	b.n	8006044 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d008      	beq.n	8005ed8 <HAL_SD_IRQHandler+0x178>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 0308 	and.w	r3, r3, #8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fd98 	bl	8006a06 <SD_Write_IT>
 8005ed6:	e0b5      	b.n	8006044 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ede:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80ae 	beq.w	8006044 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d005      	beq.n	8005f02 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efa:	f043 0202 	orr.w	r2, r3, #2
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	f043 0208 	orr.w	r2, r3, #8
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	f043 0220 	orr.w	r2, r3, #32
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3c:	f003 0310 	and.w	r3, r3, #16
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d005      	beq.n	8005f50 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	f043 0210 	orr.w	r2, r3, #16
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f58:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005f68:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f001 fc10 	bl	8007794 <SDMMC_CmdStopTransfer>
 8005f74:	4602      	mov	r2, r0
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f857 	bl	800604c <HAL_SD_ErrorCallback>
}
 8005f9e:	e051      	b.n	8006044 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d04c      	beq.n	8006044 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f003 0310 	and.w	r3, r3, #16
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d104      	bne.n	8005fbe <HAL_SD_IRQHandler+0x25e>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d011      	beq.n	8005fe2 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc2:	4a17      	ldr	r2, [pc, #92]	; (8006020 <HAL_SD_IRQHandler+0x2c0>)
 8005fc4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fc fbfa 	bl	80027c4 <HAL_DMA_Abort_IT>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d036      	beq.n	8006044 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fad0 	bl	8006580 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005fe0:	e030      	b.n	8006044 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d104      	bne.n	8005ff6 <HAL_SD_IRQHandler+0x296>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d018      	beq.n	8006028 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	4a0a      	ldr	r2, [pc, #40]	; (8006024 <HAL_SD_IRQHandler+0x2c4>)
 8005ffc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	4618      	mov	r0, r3
 8006004:	f7fc fbde 	bl	80027c4 <HAL_DMA_Abort_IT>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d01a      	beq.n	8006044 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	4618      	mov	r0, r3
 8006014:	f000 faeb 	bl	80065ee <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006018:	e014      	b.n	8006044 <HAL_SD_IRQHandler+0x2e4>
 800601a:	bf00      	nop
 800601c:	ffff3ec5 	.word	0xffff3ec5
 8006020:	08006581 	.word	0x08006581
 8006024:	080065ef 	.word	0x080065ef
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f003 fc25 	bl	800988c <HAL_SD_AbortCallback>
}
 8006042:	e7ff      	b.n	8006044 <HAL_SD_IRQHandler+0x2e4>
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800606e:	0f9b      	lsrs	r3, r3, #30
 8006070:	b2da      	uxtb	r2, r3
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800607a:	0e9b      	lsrs	r3, r3, #26
 800607c:	b2db      	uxtb	r3, r3
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	b2da      	uxtb	r2, r3
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800608c:	0e1b      	lsrs	r3, r3, #24
 800608e:	b2db      	uxtb	r3, r3
 8006090:	f003 0303 	and.w	r3, r3, #3
 8006094:	b2da      	uxtb	r2, r3
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800609e:	0c1b      	lsrs	r3, r3, #16
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060aa:	0a1b      	lsrs	r3, r3, #8
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060c0:	0d1b      	lsrs	r3, r3, #20
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060cc:	0c1b      	lsrs	r3, r3, #16
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	f003 030f 	and.w	r3, r3, #15
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060de:	0bdb      	lsrs	r3, r3, #15
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060f0:	0b9b      	lsrs	r3, r3, #14
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006102:	0b5b      	lsrs	r3, r3, #13
 8006104:	b2db      	uxtb	r3, r3
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	b2da      	uxtb	r2, r3
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006114:	0b1b      	lsrs	r3, r3, #12
 8006116:	b2db      	uxtb	r3, r3
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	b2da      	uxtb	r2, r3
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2200      	movs	r2, #0
 8006126:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612c:	2b00      	cmp	r3, #0
 800612e:	d163      	bne.n	80061f8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006134:	009a      	lsls	r2, r3, #2
 8006136:	f640 73fc 	movw	r3, #4092	; 0xffc
 800613a:	4013      	ands	r3, r2
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006140:	0f92      	lsrs	r2, r2, #30
 8006142:	431a      	orrs	r2, r3
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800614c:	0edb      	lsrs	r3, r3, #27
 800614e:	b2db      	uxtb	r3, r3
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	b2da      	uxtb	r2, r3
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800615e:	0e1b      	lsrs	r3, r3, #24
 8006160:	b2db      	uxtb	r3, r3
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	b2da      	uxtb	r2, r3
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006170:	0d5b      	lsrs	r3, r3, #21
 8006172:	b2db      	uxtb	r3, r3
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	b2da      	uxtb	r2, r3
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006182:	0c9b      	lsrs	r3, r3, #18
 8006184:	b2db      	uxtb	r3, r3
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	b2da      	uxtb	r2, r3
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006194:	0bdb      	lsrs	r3, r3, #15
 8006196:	b2db      	uxtb	r3, r3
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	b2da      	uxtb	r2, r3
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	7e1b      	ldrb	r3, [r3, #24]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	3302      	adds	r3, #2
 80061b8:	2201      	movs	r2, #1
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80061c2:	fb03 f202 	mul.w	r2, r3, r2
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	7a1b      	ldrb	r3, [r3, #8]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	2201      	movs	r2, #1
 80061d6:	409a      	lsls	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80061e4:	0a52      	lsrs	r2, r2, #9
 80061e6:	fb03 f202 	mul.w	r2, r3, r2
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061f4:	661a      	str	r2, [r3, #96]	; 0x60
 80061f6:	e031      	b.n	800625c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d11d      	bne.n	800623c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006204:	041b      	lsls	r3, r3, #16
 8006206:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800620e:	0c1b      	lsrs	r3, r3, #16
 8006210:	431a      	orrs	r2, r3
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	3301      	adds	r3, #1
 800621c:	029a      	lsls	r2, r3, #10
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006230:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	661a      	str	r2, [r3, #96]	; 0x60
 800623a:	e00f      	b.n	800625c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a58      	ldr	r2, [pc, #352]	; (80063a4 <HAL_SD_GetCardCSD+0x344>)
 8006242:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e09d      	b.n	8006398 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006260:	0b9b      	lsrs	r3, r3, #14
 8006262:	b2db      	uxtb	r3, r3
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	b2da      	uxtb	r2, r3
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006272:	09db      	lsrs	r3, r3, #7
 8006274:	b2db      	uxtb	r3, r3
 8006276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800627a:	b2da      	uxtb	r2, r3
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006284:	b2db      	uxtb	r3, r3
 8006286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800628a:	b2da      	uxtb	r2, r3
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006294:	0fdb      	lsrs	r3, r3, #31
 8006296:	b2da      	uxtb	r2, r3
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a0:	0f5b      	lsrs	r3, r3, #29
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b2:	0e9b      	lsrs	r3, r3, #26
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c4:	0d9b      	lsrs	r3, r3, #22
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d6:	0d5b      	lsrs	r3, r3, #21
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f2:	0c1b      	lsrs	r3, r3, #16
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006306:	0bdb      	lsrs	r3, r3, #15
 8006308:	b2db      	uxtb	r3, r3
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	b2da      	uxtb	r2, r3
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	0b9b      	lsrs	r3, r3, #14
 800631c:	b2db      	uxtb	r3, r3
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	b2da      	uxtb	r2, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632e:	0b5b      	lsrs	r3, r3, #13
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	b2da      	uxtb	r2, r3
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006342:	0b1b      	lsrs	r3, r3, #12
 8006344:	b2db      	uxtb	r3, r3
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	b2da      	uxtb	r2, r3
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006356:	0a9b      	lsrs	r3, r3, #10
 8006358:	b2db      	uxtb	r3, r3
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	b2da      	uxtb	r2, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636a:	0a1b      	lsrs	r3, r3, #8
 800636c:	b2db      	uxtb	r3, r3
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	b2da      	uxtb	r2, r3
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637e:	085b      	lsrs	r3, r3, #1
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006386:	b2da      	uxtb	r2, r3
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	004005ff 	.word	0x004005ff

080063a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006408:	2300      	movs	r3, #0
 800640a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800640c:	f107 030c 	add.w	r3, r7, #12
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fa7e 	bl	8006914 <SD_SendStatus>
 8006418:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	0a5b      	lsrs	r3, r3, #9
 8006430:	f003 030f 	and.w	r3, r3, #15
 8006434:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006436:	693b      	ldr	r3, [r7, #16]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800645c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800645e:	bf00      	nop
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006476:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647c:	2b82      	cmp	r3, #130	; 0x82
 800647e:	d111      	bne.n	80064a4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4618      	mov	r0, r3
 8006486:	f001 f985 	bl	8007794 <SDMMC_CmdStopTransfer>
 800648a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d008      	beq.n	80064a4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	431a      	orrs	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f7ff fdd4 	bl	800604c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0208 	bic.w	r2, r2, #8
 80064b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80064bc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f003 f9f1 	bl	80098b4 <HAL_SD_RxCpltCallback>
#endif
}
 80064d2:	bf00      	nop
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fc fb16 	bl	8002b1c <HAL_DMA_GetError>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d03e      	beq.n	8006574 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006504:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d002      	beq.n	8006512 <SD_DMAError+0x36>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d12d      	bne.n	800656e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a19      	ldr	r2, [pc, #100]	; (800657c <SD_DMAError+0xa0>)
 8006518:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006528:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006536:	6978      	ldr	r0, [r7, #20]
 8006538:	f7ff ff62 	bl	8006400 <HAL_SD_GetCardState>
 800653c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b06      	cmp	r3, #6
 8006542:	d002      	beq.n	800654a <SD_DMAError+0x6e>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2b05      	cmp	r3, #5
 8006548:	d10a      	bne.n	8006560 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f001 f920 	bl	8007794 <SDMMC_CmdStopTransfer>
 8006554:	4602      	mov	r2, r0
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655a:	431a      	orrs	r2, r3
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2200      	movs	r2, #0
 800656c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800656e:	6978      	ldr	r0, [r7, #20]
 8006570:	f7ff fd6c 	bl	800604c <HAL_SD_ErrorCallback>
#endif
  }
}
 8006574:	bf00      	nop
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	004005ff 	.word	0x004005ff

08006580 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f240 523a 	movw	r2, #1338	; 0x53a
 8006596:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7ff ff31 	bl	8006400 <HAL_SD_GetCardState>
 800659e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b06      	cmp	r3, #6
 80065b2:	d002      	beq.n	80065ba <SD_DMATxAbort+0x3a>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b05      	cmp	r3, #5
 80065b8:	d10a      	bne.n	80065d0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f001 f8e8 	bl	8007794 <SDMMC_CmdStopTransfer>
 80065c4:	4602      	mov	r2, r0
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	431a      	orrs	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d103      	bne.n	80065e0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f003 f957 	bl	800988c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80065de:	e002      	b.n	80065e6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f7ff fd33 	bl	800604c <HAL_SD_ErrorCallback>
}
 80065e6:	bf00      	nop
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f240 523a 	movw	r2, #1338	; 0x53a
 8006604:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f7ff fefa 	bl	8006400 <HAL_SD_GetCardState>
 800660c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b06      	cmp	r3, #6
 8006620:	d002      	beq.n	8006628 <SD_DMARxAbort+0x3a>
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b05      	cmp	r3, #5
 8006626:	d10a      	bne.n	800663e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4618      	mov	r0, r3
 800662e:	f001 f8b1 	bl	8007794 <SDMMC_CmdStopTransfer>
 8006632:	4602      	mov	r2, r0
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	431a      	orrs	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006642:	2b00      	cmp	r3, #0
 8006644:	d103      	bne.n	800664e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f003 f920 	bl	800988c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800664c:	e002      	b.n	8006654 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f7ff fcfc 	bl	800604c <HAL_SD_ErrorCallback>
}
 8006654:	bf00      	nop
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800665c:	b5b0      	push	{r4, r5, r7, lr}
 800665e:	b094      	sub	sp, #80	; 0x50
 8006660:	af04      	add	r7, sp, #16
 8006662:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006664:	2301      	movs	r3, #1
 8006666:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4618      	mov	r0, r3
 800666e:	f000 ff63 	bl	8007538 <SDMMC_GetPowerState>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d102      	bne.n	800667e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006678:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800667c:	e0b8      	b.n	80067f0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	2b03      	cmp	r3, #3
 8006684:	d02f      	beq.n	80066e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f001 f94a 	bl	8007924 <SDMMC_CmdSendCID>
 8006690:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <SD_InitCard+0x40>
    {
      return errorstate;
 8006698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669a:	e0a9      	b.n	80067f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2100      	movs	r1, #0
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 ff8d 	bl	80075c2 <SDMMC_GetResponse>
 80066a8:	4602      	mov	r2, r0
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2104      	movs	r1, #4
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 ff84 	bl	80075c2 <SDMMC_GetResponse>
 80066ba:	4602      	mov	r2, r0
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2108      	movs	r1, #8
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 ff7b 	bl	80075c2 <SDMMC_GetResponse>
 80066cc:	4602      	mov	r2, r0
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	210c      	movs	r1, #12
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 ff72 	bl	80075c2 <SDMMC_GetResponse>
 80066de:	4602      	mov	r2, r0
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d00d      	beq.n	800670a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f107 020e 	add.w	r2, r7, #14
 80066f6:	4611      	mov	r1, r2
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 f950 	bl	800799e <SDMMC_CmdSetRelAdd>
 80066fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <SD_InitCard+0xae>
    {
      return errorstate;
 8006706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006708:	e072      	b.n	80067f0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670e:	2b03      	cmp	r3, #3
 8006710:	d036      	beq.n	8006780 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006712:	89fb      	ldrh	r3, [r7, #14]
 8006714:	461a      	mov	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006722:	041b      	lsls	r3, r3, #16
 8006724:	4619      	mov	r1, r3
 8006726:	4610      	mov	r0, r2
 8006728:	f001 f91a 	bl	8007960 <SDMMC_CmdSendCSD>
 800672c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800672e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006736:	e05b      	b.n	80067f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2100      	movs	r1, #0
 800673e:	4618      	mov	r0, r3
 8006740:	f000 ff3f 	bl	80075c2 <SDMMC_GetResponse>
 8006744:	4602      	mov	r2, r0
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2104      	movs	r1, #4
 8006750:	4618      	mov	r0, r3
 8006752:	f000 ff36 	bl	80075c2 <SDMMC_GetResponse>
 8006756:	4602      	mov	r2, r0
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2108      	movs	r1, #8
 8006762:	4618      	mov	r0, r3
 8006764:	f000 ff2d 	bl	80075c2 <SDMMC_GetResponse>
 8006768:	4602      	mov	r2, r0
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	210c      	movs	r1, #12
 8006774:	4618      	mov	r0, r3
 8006776:	f000 ff24 	bl	80075c2 <SDMMC_GetResponse>
 800677a:	4602      	mov	r2, r0
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2104      	movs	r1, #4
 8006786:	4618      	mov	r0, r3
 8006788:	f000 ff1b 	bl	80075c2 <SDMMC_GetResponse>
 800678c:	4603      	mov	r3, r0
 800678e:	0d1a      	lsrs	r2, r3, #20
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006794:	f107 0310 	add.w	r3, r7, #16
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff fc60 	bl	8006060 <HAL_SD_GetCardCSD>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80067aa:	e021      	b.n	80067f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6819      	ldr	r1, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b4:	041b      	lsls	r3, r3, #16
 80067b6:	2200      	movs	r2, #0
 80067b8:	461c      	mov	r4, r3
 80067ba:	4615      	mov	r5, r2
 80067bc:	4622      	mov	r2, r4
 80067be:	462b      	mov	r3, r5
 80067c0:	4608      	mov	r0, r1
 80067c2:	f001 f809 	bl	80077d8 <SDMMC_CmdSelDesel>
 80067c6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80067c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <SD_InitCard+0x176>
  {
    return errorstate;
 80067ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d0:	e00e      	b.n	80067f0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681d      	ldr	r5, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	466c      	mov	r4, sp
 80067da:	f103 0210 	add.w	r2, r3, #16
 80067de:	ca07      	ldmia	r2, {r0, r1, r2}
 80067e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80067e4:	3304      	adds	r3, #4
 80067e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067e8:	4628      	mov	r0, r5
 80067ea:	f000 fe4d 	bl	8007488 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3740      	adds	r7, #64	; 0x40
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bdb0      	pop	{r4, r5, r7, pc}

080067f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	2300      	movs	r3, #0
 800680a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4618      	mov	r0, r3
 8006812:	f001 f804 	bl	800781e <SDMMC_CmdGoIdleState>
 8006816:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <SD_PowerON+0x2a>
  {
    return errorstate;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	e072      	b.n	8006908 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f001 f817 	bl	800785a <SDMMC_CmdOperCond>
 800682c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00d      	beq.n	8006850 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f000 ffed 	bl	800781e <SDMMC_CmdGoIdleState>
 8006844:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <SD_PowerON+0x5e>
    {
      return errorstate;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	e05b      	b.n	8006908 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800685a:	2b01      	cmp	r3, #1
 800685c:	d137      	bne.n	80068ce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2100      	movs	r1, #0
 8006864:	4618      	mov	r0, r3
 8006866:	f001 f817 	bl	8007898 <SDMMC_CmdAppCommand>
 800686a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d02d      	beq.n	80068ce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006872:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006876:	e047      	b.n	8006908 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2100      	movs	r1, #0
 800687e:	4618      	mov	r0, r3
 8006880:	f001 f80a 	bl	8007898 <SDMMC_CmdAppCommand>
 8006884:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <SD_PowerON+0x98>
    {
      return errorstate;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	e03b      	b.n	8006908 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	491e      	ldr	r1, [pc, #120]	; (8006910 <SD_PowerON+0x118>)
 8006896:	4618      	mov	r0, r3
 8006898:	f001 f820 	bl	80078dc <SDMMC_CmdAppOperCommand>
 800689c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80068a8:	e02e      	b.n	8006908 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2100      	movs	r1, #0
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fe86 	bl	80075c2 <SDMMC_GetResponse>
 80068b6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	0fdb      	lsrs	r3, r3, #31
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <SD_PowerON+0xcc>
 80068c0:	2301      	movs	r3, #1
 80068c2:	e000      	b.n	80068c6 <SD_PowerON+0xce>
 80068c4:	2300      	movs	r3, #0
 80068c6:	613b      	str	r3, [r7, #16]

    count++;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d802      	bhi.n	80068de <SD_PowerON+0xe6>
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0cc      	beq.n	8006878 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d902      	bls.n	80068ee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80068e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068ec:	e00c      	b.n	8006908 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	645a      	str	r2, [r3, #68]	; 0x44
 80068fe:	e002      	b.n	8006906 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	c1100000 	.word	0xc1100000

08006914 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d102      	bne.n	800692a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006924:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006928:	e018      	b.n	800695c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006932:	041b      	lsls	r3, r3, #16
 8006934:	4619      	mov	r1, r3
 8006936:	4610      	mov	r0, r2
 8006938:	f001 f852 	bl	80079e0 <SDMMC_CmdSendStatus>
 800693c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	e009      	b.n	800695c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2100      	movs	r1, #0
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fe37 	bl	80075c2 <SDMMC_GetResponse>
 8006954:	4602      	mov	r2, r0
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006970:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006976:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d03f      	beq.n	80069fe <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	e033      	b.n	80069ec <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4618      	mov	r0, r3
 800698a:	f000 fda9 	bl	80074e0 <SDMMC_ReadFIFO>
 800698e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	b2da      	uxtb	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3301      	adds	r3, #1
 800699c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	0a1b      	lsrs	r3, r3, #8
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	701a      	strb	r2, [r3, #0]
      tmp++;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3301      	adds	r3, #1
 80069b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	0c1b      	lsrs	r3, r3, #16
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3301      	adds	r3, #1
 80069c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	0e1b      	lsrs	r3, r3, #24
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3301      	adds	r3, #1
 80069de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	3301      	adds	r3, #1
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2b07      	cmp	r3, #7
 80069f0:	d9c8      	bls.n	8006984 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80069fe:	bf00      	nop
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b086      	sub	sp, #24
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d043      	beq.n	8006aa8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006a20:	2300      	movs	r3, #0
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	e037      	b.n	8006a96 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	021a      	lsls	r2, r3, #8
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3301      	adds	r3, #1
 8006a48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	041a      	lsls	r2, r3, #16
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	061a      	lsls	r2, r3, #24
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3301      	adds	r3, #1
 8006a78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f107 0208 	add.w	r2, r7, #8
 8006a88:	4611      	mov	r1, r2
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fd35 	bl	80074fa <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	3301      	adds	r3, #1
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b07      	cmp	r3, #7
 8006a9a:	d9c4      	bls.n	8006a26 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006aa8:	bf00      	nop
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e040      	b.n	8006b44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7fa fc2e 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2224      	movs	r2, #36	; 0x24
 8006adc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0201 	bic.w	r2, r2, #1
 8006aec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f8b0 	bl	8006c54 <UART_SetConfig>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d101      	bne.n	8006afe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e022      	b.n	8006b44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fb08 	bl	800711c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0201 	orr.w	r2, r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fb8f 	bl	8007260 <UART_CheckIdleState>
 8006b42:	4603      	mov	r3, r0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08a      	sub	sp, #40	; 0x28
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d171      	bne.n	8006c48 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <HAL_UART_Transmit+0x24>
 8006b6a:	88fb      	ldrh	r3, [r7, #6]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e06a      	b.n	8006c4a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2221      	movs	r2, #33	; 0x21
 8006b80:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b82:	f7fa fdd9 	bl	8001738 <HAL_GetTick>
 8006b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	88fa      	ldrh	r2, [r7, #6]
 8006b8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	88fa      	ldrh	r2, [r7, #6]
 8006b94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ba0:	d108      	bne.n	8006bb4 <HAL_UART_Transmit+0x68>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d104      	bne.n	8006bb4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	61bb      	str	r3, [r7, #24]
 8006bb2:	e003      	b.n	8006bbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bbc:	e02c      	b.n	8006c18 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2180      	movs	r1, #128	; 0x80
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 fb96 	bl	80072fa <UART_WaitOnFlagUntilTimeout>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e038      	b.n	8006c4a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10b      	bne.n	8006bf6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	3302      	adds	r3, #2
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	e007      	b.n	8006c06 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	781a      	ldrb	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	3301      	adds	r3, #1
 8006c04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1cc      	bne.n	8006bbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2140      	movs	r1, #64	; 0x40
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 fb63 	bl	80072fa <UART_WaitOnFlagUntilTimeout>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e005      	b.n	8006c4a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2220      	movs	r2, #32
 8006c42:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	e000      	b.n	8006c4a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006c48:	2302      	movs	r3, #2
  }
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3720      	adds	r7, #32
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	4ba6      	ldr	r3, [pc, #664]	; (8006f18 <UART_SetConfig+0x2c4>)
 8006c80:	4013      	ands	r3, r2
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	6812      	ldr	r2, [r2, #0]
 8006c86:	6979      	ldr	r1, [r7, #20]
 8006c88:	430b      	orrs	r3, r1
 8006c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a94      	ldr	r2, [pc, #592]	; (8006f1c <UART_SetConfig+0x2c8>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d120      	bne.n	8006d12 <UART_SetConfig+0xbe>
 8006cd0:	4b93      	ldr	r3, [pc, #588]	; (8006f20 <UART_SetConfig+0x2cc>)
 8006cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd6:	f003 0303 	and.w	r3, r3, #3
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d816      	bhi.n	8006d0c <UART_SetConfig+0xb8>
 8006cde:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <UART_SetConfig+0x90>)
 8006ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce4:	08006cf5 	.word	0x08006cf5
 8006ce8:	08006d01 	.word	0x08006d01
 8006cec:	08006cfb 	.word	0x08006cfb
 8006cf0:	08006d07 	.word	0x08006d07
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	77fb      	strb	r3, [r7, #31]
 8006cf8:	e150      	b.n	8006f9c <UART_SetConfig+0x348>
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	77fb      	strb	r3, [r7, #31]
 8006cfe:	e14d      	b.n	8006f9c <UART_SetConfig+0x348>
 8006d00:	2304      	movs	r3, #4
 8006d02:	77fb      	strb	r3, [r7, #31]
 8006d04:	e14a      	b.n	8006f9c <UART_SetConfig+0x348>
 8006d06:	2308      	movs	r3, #8
 8006d08:	77fb      	strb	r3, [r7, #31]
 8006d0a:	e147      	b.n	8006f9c <UART_SetConfig+0x348>
 8006d0c:	2310      	movs	r3, #16
 8006d0e:	77fb      	strb	r3, [r7, #31]
 8006d10:	e144      	b.n	8006f9c <UART_SetConfig+0x348>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a83      	ldr	r2, [pc, #524]	; (8006f24 <UART_SetConfig+0x2d0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d132      	bne.n	8006d82 <UART_SetConfig+0x12e>
 8006d1c:	4b80      	ldr	r3, [pc, #512]	; (8006f20 <UART_SetConfig+0x2cc>)
 8006d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d22:	f003 030c 	and.w	r3, r3, #12
 8006d26:	2b0c      	cmp	r3, #12
 8006d28:	d828      	bhi.n	8006d7c <UART_SetConfig+0x128>
 8006d2a:	a201      	add	r2, pc, #4	; (adr r2, 8006d30 <UART_SetConfig+0xdc>)
 8006d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d30:	08006d65 	.word	0x08006d65
 8006d34:	08006d7d 	.word	0x08006d7d
 8006d38:	08006d7d 	.word	0x08006d7d
 8006d3c:	08006d7d 	.word	0x08006d7d
 8006d40:	08006d71 	.word	0x08006d71
 8006d44:	08006d7d 	.word	0x08006d7d
 8006d48:	08006d7d 	.word	0x08006d7d
 8006d4c:	08006d7d 	.word	0x08006d7d
 8006d50:	08006d6b 	.word	0x08006d6b
 8006d54:	08006d7d 	.word	0x08006d7d
 8006d58:	08006d7d 	.word	0x08006d7d
 8006d5c:	08006d7d 	.word	0x08006d7d
 8006d60:	08006d77 	.word	0x08006d77
 8006d64:	2300      	movs	r3, #0
 8006d66:	77fb      	strb	r3, [r7, #31]
 8006d68:	e118      	b.n	8006f9c <UART_SetConfig+0x348>
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	77fb      	strb	r3, [r7, #31]
 8006d6e:	e115      	b.n	8006f9c <UART_SetConfig+0x348>
 8006d70:	2304      	movs	r3, #4
 8006d72:	77fb      	strb	r3, [r7, #31]
 8006d74:	e112      	b.n	8006f9c <UART_SetConfig+0x348>
 8006d76:	2308      	movs	r3, #8
 8006d78:	77fb      	strb	r3, [r7, #31]
 8006d7a:	e10f      	b.n	8006f9c <UART_SetConfig+0x348>
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	77fb      	strb	r3, [r7, #31]
 8006d80:	e10c      	b.n	8006f9c <UART_SetConfig+0x348>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a68      	ldr	r2, [pc, #416]	; (8006f28 <UART_SetConfig+0x2d4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d120      	bne.n	8006dce <UART_SetConfig+0x17a>
 8006d8c:	4b64      	ldr	r3, [pc, #400]	; (8006f20 <UART_SetConfig+0x2cc>)
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d96:	2b30      	cmp	r3, #48	; 0x30
 8006d98:	d013      	beq.n	8006dc2 <UART_SetConfig+0x16e>
 8006d9a:	2b30      	cmp	r3, #48	; 0x30
 8006d9c:	d814      	bhi.n	8006dc8 <UART_SetConfig+0x174>
 8006d9e:	2b20      	cmp	r3, #32
 8006da0:	d009      	beq.n	8006db6 <UART_SetConfig+0x162>
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	d810      	bhi.n	8006dc8 <UART_SetConfig+0x174>
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <UART_SetConfig+0x15c>
 8006daa:	2b10      	cmp	r3, #16
 8006dac:	d006      	beq.n	8006dbc <UART_SetConfig+0x168>
 8006dae:	e00b      	b.n	8006dc8 <UART_SetConfig+0x174>
 8006db0:	2300      	movs	r3, #0
 8006db2:	77fb      	strb	r3, [r7, #31]
 8006db4:	e0f2      	b.n	8006f9c <UART_SetConfig+0x348>
 8006db6:	2302      	movs	r3, #2
 8006db8:	77fb      	strb	r3, [r7, #31]
 8006dba:	e0ef      	b.n	8006f9c <UART_SetConfig+0x348>
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	77fb      	strb	r3, [r7, #31]
 8006dc0:	e0ec      	b.n	8006f9c <UART_SetConfig+0x348>
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	77fb      	strb	r3, [r7, #31]
 8006dc6:	e0e9      	b.n	8006f9c <UART_SetConfig+0x348>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e0e6      	b.n	8006f9c <UART_SetConfig+0x348>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a56      	ldr	r2, [pc, #344]	; (8006f2c <UART_SetConfig+0x2d8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d120      	bne.n	8006e1a <UART_SetConfig+0x1c6>
 8006dd8:	4b51      	ldr	r3, [pc, #324]	; (8006f20 <UART_SetConfig+0x2cc>)
 8006dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006de2:	2bc0      	cmp	r3, #192	; 0xc0
 8006de4:	d013      	beq.n	8006e0e <UART_SetConfig+0x1ba>
 8006de6:	2bc0      	cmp	r3, #192	; 0xc0
 8006de8:	d814      	bhi.n	8006e14 <UART_SetConfig+0x1c0>
 8006dea:	2b80      	cmp	r3, #128	; 0x80
 8006dec:	d009      	beq.n	8006e02 <UART_SetConfig+0x1ae>
 8006dee:	2b80      	cmp	r3, #128	; 0x80
 8006df0:	d810      	bhi.n	8006e14 <UART_SetConfig+0x1c0>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <UART_SetConfig+0x1a8>
 8006df6:	2b40      	cmp	r3, #64	; 0x40
 8006df8:	d006      	beq.n	8006e08 <UART_SetConfig+0x1b4>
 8006dfa:	e00b      	b.n	8006e14 <UART_SetConfig+0x1c0>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	77fb      	strb	r3, [r7, #31]
 8006e00:	e0cc      	b.n	8006f9c <UART_SetConfig+0x348>
 8006e02:	2302      	movs	r3, #2
 8006e04:	77fb      	strb	r3, [r7, #31]
 8006e06:	e0c9      	b.n	8006f9c <UART_SetConfig+0x348>
 8006e08:	2304      	movs	r3, #4
 8006e0a:	77fb      	strb	r3, [r7, #31]
 8006e0c:	e0c6      	b.n	8006f9c <UART_SetConfig+0x348>
 8006e0e:	2308      	movs	r3, #8
 8006e10:	77fb      	strb	r3, [r7, #31]
 8006e12:	e0c3      	b.n	8006f9c <UART_SetConfig+0x348>
 8006e14:	2310      	movs	r3, #16
 8006e16:	77fb      	strb	r3, [r7, #31]
 8006e18:	e0c0      	b.n	8006f9c <UART_SetConfig+0x348>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a44      	ldr	r2, [pc, #272]	; (8006f30 <UART_SetConfig+0x2dc>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d125      	bne.n	8006e70 <UART_SetConfig+0x21c>
 8006e24:	4b3e      	ldr	r3, [pc, #248]	; (8006f20 <UART_SetConfig+0x2cc>)
 8006e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e32:	d017      	beq.n	8006e64 <UART_SetConfig+0x210>
 8006e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e38:	d817      	bhi.n	8006e6a <UART_SetConfig+0x216>
 8006e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e3e:	d00b      	beq.n	8006e58 <UART_SetConfig+0x204>
 8006e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e44:	d811      	bhi.n	8006e6a <UART_SetConfig+0x216>
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <UART_SetConfig+0x1fe>
 8006e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e4e:	d006      	beq.n	8006e5e <UART_SetConfig+0x20a>
 8006e50:	e00b      	b.n	8006e6a <UART_SetConfig+0x216>
 8006e52:	2300      	movs	r3, #0
 8006e54:	77fb      	strb	r3, [r7, #31]
 8006e56:	e0a1      	b.n	8006f9c <UART_SetConfig+0x348>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	77fb      	strb	r3, [r7, #31]
 8006e5c:	e09e      	b.n	8006f9c <UART_SetConfig+0x348>
 8006e5e:	2304      	movs	r3, #4
 8006e60:	77fb      	strb	r3, [r7, #31]
 8006e62:	e09b      	b.n	8006f9c <UART_SetConfig+0x348>
 8006e64:	2308      	movs	r3, #8
 8006e66:	77fb      	strb	r3, [r7, #31]
 8006e68:	e098      	b.n	8006f9c <UART_SetConfig+0x348>
 8006e6a:	2310      	movs	r3, #16
 8006e6c:	77fb      	strb	r3, [r7, #31]
 8006e6e:	e095      	b.n	8006f9c <UART_SetConfig+0x348>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a2f      	ldr	r2, [pc, #188]	; (8006f34 <UART_SetConfig+0x2e0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d125      	bne.n	8006ec6 <UART_SetConfig+0x272>
 8006e7a:	4b29      	ldr	r3, [pc, #164]	; (8006f20 <UART_SetConfig+0x2cc>)
 8006e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e88:	d017      	beq.n	8006eba <UART_SetConfig+0x266>
 8006e8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e8e:	d817      	bhi.n	8006ec0 <UART_SetConfig+0x26c>
 8006e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e94:	d00b      	beq.n	8006eae <UART_SetConfig+0x25a>
 8006e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e9a:	d811      	bhi.n	8006ec0 <UART_SetConfig+0x26c>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <UART_SetConfig+0x254>
 8006ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea4:	d006      	beq.n	8006eb4 <UART_SetConfig+0x260>
 8006ea6:	e00b      	b.n	8006ec0 <UART_SetConfig+0x26c>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	77fb      	strb	r3, [r7, #31]
 8006eac:	e076      	b.n	8006f9c <UART_SetConfig+0x348>
 8006eae:	2302      	movs	r3, #2
 8006eb0:	77fb      	strb	r3, [r7, #31]
 8006eb2:	e073      	b.n	8006f9c <UART_SetConfig+0x348>
 8006eb4:	2304      	movs	r3, #4
 8006eb6:	77fb      	strb	r3, [r7, #31]
 8006eb8:	e070      	b.n	8006f9c <UART_SetConfig+0x348>
 8006eba:	2308      	movs	r3, #8
 8006ebc:	77fb      	strb	r3, [r7, #31]
 8006ebe:	e06d      	b.n	8006f9c <UART_SetConfig+0x348>
 8006ec0:	2310      	movs	r3, #16
 8006ec2:	77fb      	strb	r3, [r7, #31]
 8006ec4:	e06a      	b.n	8006f9c <UART_SetConfig+0x348>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a1b      	ldr	r2, [pc, #108]	; (8006f38 <UART_SetConfig+0x2e4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d138      	bne.n	8006f42 <UART_SetConfig+0x2ee>
 8006ed0:	4b13      	ldr	r3, [pc, #76]	; (8006f20 <UART_SetConfig+0x2cc>)
 8006ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006eda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ede:	d017      	beq.n	8006f10 <UART_SetConfig+0x2bc>
 8006ee0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ee4:	d82a      	bhi.n	8006f3c <UART_SetConfig+0x2e8>
 8006ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eea:	d00b      	beq.n	8006f04 <UART_SetConfig+0x2b0>
 8006eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef0:	d824      	bhi.n	8006f3c <UART_SetConfig+0x2e8>
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <UART_SetConfig+0x2aa>
 8006ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006efa:	d006      	beq.n	8006f0a <UART_SetConfig+0x2b6>
 8006efc:	e01e      	b.n	8006f3c <UART_SetConfig+0x2e8>
 8006efe:	2300      	movs	r3, #0
 8006f00:	77fb      	strb	r3, [r7, #31]
 8006f02:	e04b      	b.n	8006f9c <UART_SetConfig+0x348>
 8006f04:	2302      	movs	r3, #2
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e048      	b.n	8006f9c <UART_SetConfig+0x348>
 8006f0a:	2304      	movs	r3, #4
 8006f0c:	77fb      	strb	r3, [r7, #31]
 8006f0e:	e045      	b.n	8006f9c <UART_SetConfig+0x348>
 8006f10:	2308      	movs	r3, #8
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	e042      	b.n	8006f9c <UART_SetConfig+0x348>
 8006f16:	bf00      	nop
 8006f18:	efff69f3 	.word	0xefff69f3
 8006f1c:	40011000 	.word	0x40011000
 8006f20:	40023800 	.word	0x40023800
 8006f24:	40004400 	.word	0x40004400
 8006f28:	40004800 	.word	0x40004800
 8006f2c:	40004c00 	.word	0x40004c00
 8006f30:	40005000 	.word	0x40005000
 8006f34:	40011400 	.word	0x40011400
 8006f38:	40007800 	.word	0x40007800
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	77fb      	strb	r3, [r7, #31]
 8006f40:	e02c      	b.n	8006f9c <UART_SetConfig+0x348>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a72      	ldr	r2, [pc, #456]	; (8007110 <UART_SetConfig+0x4bc>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d125      	bne.n	8006f98 <UART_SetConfig+0x344>
 8006f4c:	4b71      	ldr	r3, [pc, #452]	; (8007114 <UART_SetConfig+0x4c0>)
 8006f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f5a:	d017      	beq.n	8006f8c <UART_SetConfig+0x338>
 8006f5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f60:	d817      	bhi.n	8006f92 <UART_SetConfig+0x33e>
 8006f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f66:	d00b      	beq.n	8006f80 <UART_SetConfig+0x32c>
 8006f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f6c:	d811      	bhi.n	8006f92 <UART_SetConfig+0x33e>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <UART_SetConfig+0x326>
 8006f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f76:	d006      	beq.n	8006f86 <UART_SetConfig+0x332>
 8006f78:	e00b      	b.n	8006f92 <UART_SetConfig+0x33e>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	77fb      	strb	r3, [r7, #31]
 8006f7e:	e00d      	b.n	8006f9c <UART_SetConfig+0x348>
 8006f80:	2302      	movs	r3, #2
 8006f82:	77fb      	strb	r3, [r7, #31]
 8006f84:	e00a      	b.n	8006f9c <UART_SetConfig+0x348>
 8006f86:	2304      	movs	r3, #4
 8006f88:	77fb      	strb	r3, [r7, #31]
 8006f8a:	e007      	b.n	8006f9c <UART_SetConfig+0x348>
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	77fb      	strb	r3, [r7, #31]
 8006f90:	e004      	b.n	8006f9c <UART_SetConfig+0x348>
 8006f92:	2310      	movs	r3, #16
 8006f94:	77fb      	strb	r3, [r7, #31]
 8006f96:	e001      	b.n	8006f9c <UART_SetConfig+0x348>
 8006f98:	2310      	movs	r3, #16
 8006f9a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fa4:	d15b      	bne.n	800705e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006fa6:	7ffb      	ldrb	r3, [r7, #31]
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	d828      	bhi.n	8006ffe <UART_SetConfig+0x3aa>
 8006fac:	a201      	add	r2, pc, #4	; (adr r2, 8006fb4 <UART_SetConfig+0x360>)
 8006fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb2:	bf00      	nop
 8006fb4:	08006fd9 	.word	0x08006fd9
 8006fb8:	08006fe1 	.word	0x08006fe1
 8006fbc:	08006fe9 	.word	0x08006fe9
 8006fc0:	08006fff 	.word	0x08006fff
 8006fc4:	08006fef 	.word	0x08006fef
 8006fc8:	08006fff 	.word	0x08006fff
 8006fcc:	08006fff 	.word	0x08006fff
 8006fd0:	08006fff 	.word	0x08006fff
 8006fd4:	08006ff7 	.word	0x08006ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd8:	f7fd fff2 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8006fdc:	61b8      	str	r0, [r7, #24]
        break;
 8006fde:	e013      	b.n	8007008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fe0:	f7fe f802 	bl	8004fe8 <HAL_RCC_GetPCLK2Freq>
 8006fe4:	61b8      	str	r0, [r7, #24]
        break;
 8006fe6:	e00f      	b.n	8007008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fe8:	4b4b      	ldr	r3, [pc, #300]	; (8007118 <UART_SetConfig+0x4c4>)
 8006fea:	61bb      	str	r3, [r7, #24]
        break;
 8006fec:	e00c      	b.n	8007008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fee:	f7fd fed5 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8006ff2:	61b8      	str	r0, [r7, #24]
        break;
 8006ff4:	e008      	b.n	8007008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ffa:	61bb      	str	r3, [r7, #24]
        break;
 8006ffc:	e004      	b.n	8007008 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	77bb      	strb	r3, [r7, #30]
        break;
 8007006:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d074      	beq.n	80070f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	005a      	lsls	r2, r3, #1
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	085b      	lsrs	r3, r3, #1
 8007018:	441a      	add	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007022:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	2b0f      	cmp	r3, #15
 8007028:	d916      	bls.n	8007058 <UART_SetConfig+0x404>
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007030:	d212      	bcs.n	8007058 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	b29b      	uxth	r3, r3
 8007036:	f023 030f 	bic.w	r3, r3, #15
 800703a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	085b      	lsrs	r3, r3, #1
 8007040:	b29b      	uxth	r3, r3
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	b29a      	uxth	r2, r3
 8007048:	89fb      	ldrh	r3, [r7, #14]
 800704a:	4313      	orrs	r3, r2
 800704c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	89fa      	ldrh	r2, [r7, #14]
 8007054:	60da      	str	r2, [r3, #12]
 8007056:	e04f      	b.n	80070f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	77bb      	strb	r3, [r7, #30]
 800705c:	e04c      	b.n	80070f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800705e:	7ffb      	ldrb	r3, [r7, #31]
 8007060:	2b08      	cmp	r3, #8
 8007062:	d828      	bhi.n	80070b6 <UART_SetConfig+0x462>
 8007064:	a201      	add	r2, pc, #4	; (adr r2, 800706c <UART_SetConfig+0x418>)
 8007066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706a:	bf00      	nop
 800706c:	08007091 	.word	0x08007091
 8007070:	08007099 	.word	0x08007099
 8007074:	080070a1 	.word	0x080070a1
 8007078:	080070b7 	.word	0x080070b7
 800707c:	080070a7 	.word	0x080070a7
 8007080:	080070b7 	.word	0x080070b7
 8007084:	080070b7 	.word	0x080070b7
 8007088:	080070b7 	.word	0x080070b7
 800708c:	080070af 	.word	0x080070af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007090:	f7fd ff96 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8007094:	61b8      	str	r0, [r7, #24]
        break;
 8007096:	e013      	b.n	80070c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007098:	f7fd ffa6 	bl	8004fe8 <HAL_RCC_GetPCLK2Freq>
 800709c:	61b8      	str	r0, [r7, #24]
        break;
 800709e:	e00f      	b.n	80070c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070a0:	4b1d      	ldr	r3, [pc, #116]	; (8007118 <UART_SetConfig+0x4c4>)
 80070a2:	61bb      	str	r3, [r7, #24]
        break;
 80070a4:	e00c      	b.n	80070c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070a6:	f7fd fe79 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 80070aa:	61b8      	str	r0, [r7, #24]
        break;
 80070ac:	e008      	b.n	80070c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070b2:	61bb      	str	r3, [r7, #24]
        break;
 80070b4:	e004      	b.n	80070c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	77bb      	strb	r3, [r7, #30]
        break;
 80070be:	bf00      	nop
    }

    if (pclk != 0U)
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d018      	beq.n	80070f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	085a      	lsrs	r2, r3, #1
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	441a      	add	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2b0f      	cmp	r3, #15
 80070de:	d909      	bls.n	80070f4 <UART_SetConfig+0x4a0>
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e6:	d205      	bcs.n	80070f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	60da      	str	r2, [r3, #12]
 80070f2:	e001      	b.n	80070f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007104:	7fbb      	ldrb	r3, [r7, #30]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	40007c00 	.word	0x40007c00
 8007114:	40023800 	.word	0x40023800
 8007118:	00f42400 	.word	0x00f42400

0800711c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	f003 0308 	and.w	r3, r3, #8
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	f003 0310 	and.w	r3, r3, #16
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00a      	beq.n	80071ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d01a      	beq.n	8007232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800721a:	d10a      	bne.n	8007232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	605a      	str	r2, [r3, #4]
  }
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af02      	add	r7, sp, #8
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007270:	f7fa fa62 	bl	8001738 <HAL_GetTick>
 8007274:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0308 	and.w	r3, r3, #8
 8007280:	2b08      	cmp	r3, #8
 8007282:	d10e      	bne.n	80072a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007284:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f831 	bl	80072fa <UART_WaitOnFlagUntilTimeout>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e027      	b.n	80072f2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d10e      	bne.n	80072ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f81b 	bl	80072fa <UART_WaitOnFlagUntilTimeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e011      	b.n	80072f2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2220      	movs	r2, #32
 80072d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b09c      	sub	sp, #112	; 0x70
 80072fe:	af00      	add	r7, sp, #0
 8007300:	60f8      	str	r0, [r7, #12]
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	603b      	str	r3, [r7, #0]
 8007306:	4613      	mov	r3, r2
 8007308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730a:	e0a7      	b.n	800745c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800730c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800730e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007312:	f000 80a3 	beq.w	800745c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007316:	f7fa fa0f 	bl	8001738 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007322:	429a      	cmp	r2, r3
 8007324:	d302      	bcc.n	800732c <UART_WaitOnFlagUntilTimeout+0x32>
 8007326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007328:	2b00      	cmp	r3, #0
 800732a:	d13f      	bne.n	80073ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800733a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800733c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007340:	667b      	str	r3, [r7, #100]	; 0x64
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800734a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800734c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007350:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007352:	e841 2300 	strex	r3, r2, [r1]
 8007356:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1e6      	bne.n	800732c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3308      	adds	r3, #8
 8007364:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	f023 0301 	bic.w	r3, r3, #1
 8007374:	663b      	str	r3, [r7, #96]	; 0x60
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3308      	adds	r3, #8
 800737c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800737e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007380:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800738c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e5      	bne.n	800735e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2220      	movs	r2, #32
 8007396:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2220      	movs	r2, #32
 800739c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e068      	b.n	800747e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0304 	and.w	r3, r3, #4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d050      	beq.n	800745c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c8:	d148      	bne.n	800745c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f2:	637b      	str	r3, [r7, #52]	; 0x34
 80073f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e6      	bne.n	80073d4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3308      	adds	r3, #8
 800740c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	613b      	str	r3, [r7, #16]
   return(result);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f023 0301 	bic.w	r3, r3, #1
 800741c:	66bb      	str	r3, [r7, #104]	; 0x68
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3308      	adds	r3, #8
 8007424:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007426:	623a      	str	r2, [r7, #32]
 8007428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	69f9      	ldr	r1, [r7, #28]
 800742c:	6a3a      	ldr	r2, [r7, #32]
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	61bb      	str	r3, [r7, #24]
   return(result);
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e5      	bne.n	8007406 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2220      	movs	r2, #32
 800743e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2220      	movs	r2, #32
 8007444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e010      	b.n	800747e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69da      	ldr	r2, [r3, #28]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	4013      	ands	r3, r2
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	429a      	cmp	r2, r3
 800746a:	bf0c      	ite	eq
 800746c:	2301      	moveq	r3, #1
 800746e:	2300      	movne	r3, #0
 8007470:	b2db      	uxtb	r3, r3
 8007472:	461a      	mov	r2, r3
 8007474:	79fb      	ldrb	r3, [r7, #7]
 8007476:	429a      	cmp	r2, r3
 8007478:	f43f af48 	beq.w	800730c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3770      	adds	r7, #112	; 0x70
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007488:	b084      	sub	sp, #16
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	f107 001c 	add.w	r0, r7, #28
 8007496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800749e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80074a0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80074a2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80074a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80074aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80074ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80074ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80074b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	4b07      	ldr	r3, [pc, #28]	; (80074dc <SDMMC_Init+0x54>)
 80074c0:	4013      	ands	r3, r2
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	431a      	orrs	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	b004      	add	sp, #16
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	ffff8100 	.word	0xffff8100

080074e0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2203      	movs	r2, #3
 8007528:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0303 	and.w	r3, r3, #3
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007572:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007578:	431a      	orrs	r2, r3
                       Command->CPSM);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800757e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68da      	ldr	r2, [r3, #12]
 800758a:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <SDMMC_SendCommand+0x50>)
 800758c:	4013      	ands	r3, r2
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	431a      	orrs	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	fffff000 	.word	0xfffff000

080075a8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	b2db      	uxtb	r3, r3
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b085      	sub	sp, #20
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3314      	adds	r3, #20
 80075d0:	461a      	mov	r2, r3
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	4413      	add	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
}  
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800760e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007614:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800761a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007632:	2300      	movs	r3, #0

}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800764e:	2310      	movs	r3, #16
 8007650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007652:	2340      	movs	r3, #64	; 0x40
 8007654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007656:	2300      	movs	r3, #0
 8007658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800765a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800765e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007660:	f107 0308 	add.w	r3, r7, #8
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7ff ff74 	bl	8007554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800766c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007670:	2110      	movs	r1, #16
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f9d6 	bl	8007a24 <SDMMC_GetCmdResp1>
 8007678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800767a:	69fb      	ldr	r3, [r7, #28]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3720      	adds	r7, #32
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007692:	2311      	movs	r3, #17
 8007694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007696:	2340      	movs	r3, #64	; 0x40
 8007698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800769a:	2300      	movs	r3, #0
 800769c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800769e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076a4:	f107 0308 	add.w	r3, r7, #8
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7ff ff52 	bl	8007554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80076b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b4:	2111      	movs	r1, #17
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f9b4 	bl	8007a24 <SDMMC_GetCmdResp1>
 80076bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076be:	69fb      	ldr	r3, [r7, #28]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3720      	adds	r7, #32
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b088      	sub	sp, #32
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80076d6:	2312      	movs	r3, #18
 80076d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076da:	2340      	movs	r3, #64	; 0x40
 80076dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076de:	2300      	movs	r3, #0
 80076e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076e8:	f107 0308 	add.w	r3, r7, #8
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff ff30 	bl	8007554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80076f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076f8:	2112      	movs	r1, #18
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f992 	bl	8007a24 <SDMMC_GetCmdResp1>
 8007700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007702:	69fb      	ldr	r3, [r7, #28]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3720      	adds	r7, #32
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800771a:	2318      	movs	r3, #24
 800771c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800771e:	2340      	movs	r3, #64	; 0x40
 8007720:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007722:	2300      	movs	r3, #0
 8007724:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800772a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800772c:	f107 0308 	add.w	r3, r7, #8
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff ff0e 	bl	8007554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007738:	f241 3288 	movw	r2, #5000	; 0x1388
 800773c:	2118      	movs	r1, #24
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f970 	bl	8007a24 <SDMMC_GetCmdResp1>
 8007744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007746:	69fb      	ldr	r3, [r7, #28]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3720      	adds	r7, #32
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b088      	sub	sp, #32
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800775e:	2319      	movs	r3, #25
 8007760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007762:	2340      	movs	r3, #64	; 0x40
 8007764:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007766:	2300      	movs	r3, #0
 8007768:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800776a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800776e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007770:	f107 0308 	add.w	r3, r7, #8
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff feec 	bl	8007554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800777c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007780:	2119      	movs	r1, #25
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f94e 	bl	8007a24 <SDMMC_GetCmdResp1>
 8007788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800778a:	69fb      	ldr	r3, [r7, #28]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3720      	adds	r7, #32
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80077a0:	230c      	movs	r3, #12
 80077a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077a4:	2340      	movs	r3, #64	; 0x40
 80077a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077a8:	2300      	movs	r3, #0
 80077aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077b2:	f107 0308 	add.w	r3, r7, #8
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff fecb 	bl	8007554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80077be:	4a05      	ldr	r2, [pc, #20]	; (80077d4 <SDMMC_CmdStopTransfer+0x40>)
 80077c0:	210c      	movs	r1, #12
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f92e 	bl	8007a24 <SDMMC_GetCmdResp1>
 80077c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077ca:	69fb      	ldr	r3, [r7, #28]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3720      	adds	r7, #32
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	05f5e100 	.word	0x05f5e100

080077d8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08a      	sub	sp, #40	; 0x28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80077e8:	2307      	movs	r3, #7
 80077ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077ec:	2340      	movs	r3, #64	; 0x40
 80077ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077f0:	2300      	movs	r3, #0
 80077f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077f8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077fa:	f107 0310 	add.w	r3, r7, #16
 80077fe:	4619      	mov	r1, r3
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f7ff fea7 	bl	8007554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007806:	f241 3288 	movw	r2, #5000	; 0x1388
 800780a:	2107      	movs	r1, #7
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 f909 	bl	8007a24 <SDMMC_GetCmdResp1>
 8007812:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007816:	4618      	mov	r0, r3
 8007818:	3728      	adds	r7, #40	; 0x28
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b088      	sub	sp, #32
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800782a:	2300      	movs	r3, #0
 800782c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800782e:	2300      	movs	r3, #0
 8007830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007832:	2300      	movs	r3, #0
 8007834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800783a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800783c:	f107 0308 	add.w	r3, r7, #8
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff fe86 	bl	8007554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fb23 	bl	8007e94 <SDMMC_GetCmdError>
 800784e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007850:	69fb      	ldr	r3, [r7, #28]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3720      	adds	r7, #32
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b088      	sub	sp, #32
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007862:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007868:	2308      	movs	r3, #8
 800786a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800786c:	2340      	movs	r3, #64	; 0x40
 800786e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007870:	2300      	movs	r3, #0
 8007872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007878:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800787a:	f107 0308 	add.w	r3, r7, #8
 800787e:	4619      	mov	r1, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff fe67 	bl	8007554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fab6 	bl	8007df8 <SDMMC_GetCmdResp7>
 800788c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800788e:	69fb      	ldr	r3, [r7, #28]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3720      	adds	r7, #32
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80078a6:	2337      	movs	r3, #55	; 0x37
 80078a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078aa:	2340      	movs	r3, #64	; 0x40
 80078ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078ae:	2300      	movs	r3, #0
 80078b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078b8:	f107 0308 	add.w	r3, r7, #8
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff fe48 	bl	8007554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80078c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c8:	2137      	movs	r1, #55	; 0x37
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f8aa 	bl	8007a24 <SDMMC_GetCmdResp1>
 80078d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078d2:	69fb      	ldr	r3, [r7, #28]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3720      	adds	r7, #32
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b088      	sub	sp, #32
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	4b0d      	ldr	r3, [pc, #52]	; (8007920 <SDMMC_CmdAppOperCommand+0x44>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80078ee:	2329      	movs	r3, #41	; 0x29
 80078f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078f2:	2340      	movs	r3, #64	; 0x40
 80078f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007900:	f107 0308 	add.w	r3, r7, #8
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff fe24 	bl	8007554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f9bf 	bl	8007c90 <SDMMC_GetCmdResp3>
 8007912:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007914:	69fb      	ldr	r3, [r7, #28]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3720      	adds	r7, #32
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	80100000 	.word	0x80100000

08007924 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007930:	2302      	movs	r3, #2
 8007932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007934:	23c0      	movs	r3, #192	; 0xc0
 8007936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007938:	2300      	movs	r3, #0
 800793a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800793c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007940:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007942:	f107 0308 	add.w	r3, r7, #8
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff fe03 	bl	8007554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f956 	bl	8007c00 <SDMMC_GetCmdResp2>
 8007954:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007956:	69fb      	ldr	r3, [r7, #28]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3720      	adds	r7, #32
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b088      	sub	sp, #32
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800796e:	2309      	movs	r3, #9
 8007970:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007972:	23c0      	movs	r3, #192	; 0xc0
 8007974:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007976:	2300      	movs	r3, #0
 8007978:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800797a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800797e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007980:	f107 0308 	add.w	r3, r7, #8
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff fde4 	bl	8007554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f937 	bl	8007c00 <SDMMC_GetCmdResp2>
 8007992:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007994:	69fb      	ldr	r3, [r7, #28]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3720      	adds	r7, #32
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b088      	sub	sp, #32
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80079ac:	2303      	movs	r3, #3
 80079ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079b0:	2340      	movs	r3, #64	; 0x40
 80079b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079be:	f107 0308 	add.w	r3, r7, #8
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff fdc5 	bl	8007554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	2103      	movs	r1, #3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f99c 	bl	8007d0c <SDMMC_GetCmdResp6>
 80079d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079d6:	69fb      	ldr	r3, [r7, #28]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3720      	adds	r7, #32
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80079ee:	230d      	movs	r3, #13
 80079f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079f2:	2340      	movs	r3, #64	; 0x40
 80079f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079f6:	2300      	movs	r3, #0
 80079f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a00:	f107 0308 	add.w	r3, r7, #8
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7ff fda4 	bl	8007554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a10:	210d      	movs	r1, #13
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f806 	bl	8007a24 <SDMMC_GetCmdResp1>
 8007a18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a1a:	69fb      	ldr	r3, [r7, #28]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3720      	adds	r7, #32
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	607a      	str	r2, [r7, #4]
 8007a30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a32:	4b70      	ldr	r3, [pc, #448]	; (8007bf4 <SDMMC_GetCmdResp1+0x1d0>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a70      	ldr	r2, [pc, #448]	; (8007bf8 <SDMMC_GetCmdResp1+0x1d4>)
 8007a38:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3c:	0a5a      	lsrs	r2, r3, #9
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	fb02 f303 	mul.w	r3, r2, r3
 8007a44:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	1e5a      	subs	r2, r3, #1
 8007a4a:	61fa      	str	r2, [r7, #28]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a54:	e0c9      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0ef      	beq.n	8007a46 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1ea      	bne.n	8007a46 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2204      	movs	r2, #4
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a82:	2304      	movs	r3, #4
 8007a84:	e0b1      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d004      	beq.n	8007a9c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e0a6      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	22c5      	movs	r2, #197	; 0xc5
 8007aa0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f7ff fd80 	bl	80075a8 <SDMMC_GetCommandResponse>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	461a      	mov	r2, r3
 8007aac:	7afb      	ldrb	r3, [r7, #11]
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d001      	beq.n	8007ab6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e099      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f7ff fd82 	bl	80075c2 <SDMMC_GetResponse>
 8007abe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	4b4e      	ldr	r3, [pc, #312]	; (8007bfc <SDMMC_GetCmdResp1+0x1d8>)
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007aca:	2300      	movs	r3, #0
 8007acc:	e08d      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	da02      	bge.n	8007ada <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ad8:	e087      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007ae4:	2340      	movs	r3, #64	; 0x40
 8007ae6:	e080      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007af2:	2380      	movs	r3, #128	; 0x80
 8007af4:	e079      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b04:	e071      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b14:	e069      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b24:	e061      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d002      	beq.n	8007b36 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007b30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b34:	e059      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b44:	e051      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b54:	e049      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007b60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b64:	e041      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007b70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b74:	e039      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b84:	e031      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007b90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007b94:	e029      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007ba0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ba4:	e021      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007bb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007bb4:	e019      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007bc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007bc4:	e011      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007bd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007bd4:	e009      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f003 0308 	and.w	r3, r3, #8
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007be0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007be4:	e001      	b.n	8007bea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3720      	adds	r7, #32
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20000000 	.word	0x20000000
 8007bf8:	10624dd3 	.word	0x10624dd3
 8007bfc:	fdffe008 	.word	0xfdffe008

08007c00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c08:	4b1f      	ldr	r3, [pc, #124]	; (8007c88 <SDMMC_GetCmdResp2+0x88>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a1f      	ldr	r2, [pc, #124]	; (8007c8c <SDMMC_GetCmdResp2+0x8c>)
 8007c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c12:	0a5b      	lsrs	r3, r3, #9
 8007c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c18:	fb02 f303 	mul.w	r3, r2, r3
 8007c1c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	1e5a      	subs	r2, r3, #1
 8007c22:	60fa      	str	r2, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d102      	bne.n	8007c2e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c2c:	e026      	b.n	8007c7c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c32:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0ef      	beq.n	8007c1e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1ea      	bne.n	8007c1e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4c:	f003 0304 	and.w	r3, r3, #4
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d004      	beq.n	8007c5e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2204      	movs	r2, #4
 8007c58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c5a:	2304      	movs	r3, #4
 8007c5c:	e00e      	b.n	8007c7c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d004      	beq.n	8007c74 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e003      	b.n	8007c7c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	22c5      	movs	r2, #197	; 0xc5
 8007c78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	20000000 	.word	0x20000000
 8007c8c:	10624dd3 	.word	0x10624dd3

08007c90 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c98:	4b1a      	ldr	r3, [pc, #104]	; (8007d04 <SDMMC_GetCmdResp3+0x74>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a1a      	ldr	r2, [pc, #104]	; (8007d08 <SDMMC_GetCmdResp3+0x78>)
 8007c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca2:	0a5b      	lsrs	r3, r3, #9
 8007ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca8:	fb02 f303 	mul.w	r3, r2, r3
 8007cac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	1e5a      	subs	r2, r3, #1
 8007cb2:	60fa      	str	r2, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007cb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007cbc:	e01b      	b.n	8007cf6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d0ef      	beq.n	8007cae <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1ea      	bne.n	8007cae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cdc:	f003 0304 	and.w	r3, r3, #4
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d004      	beq.n	8007cee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2204      	movs	r2, #4
 8007ce8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cea:	2304      	movs	r3, #4
 8007cec:	e003      	b.n	8007cf6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	22c5      	movs	r2, #197	; 0xc5
 8007cf2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	20000000 	.word	0x20000000
 8007d08:	10624dd3 	.word	0x10624dd3

08007d0c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b088      	sub	sp, #32
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	460b      	mov	r3, r1
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d1a:	4b35      	ldr	r3, [pc, #212]	; (8007df0 <SDMMC_GetCmdResp6+0xe4>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a35      	ldr	r2, [pc, #212]	; (8007df4 <SDMMC_GetCmdResp6+0xe8>)
 8007d20:	fba2 2303 	umull	r2, r3, r2, r3
 8007d24:	0a5b      	lsrs	r3, r3, #9
 8007d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d2a:	fb02 f303 	mul.w	r3, r2, r3
 8007d2e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	1e5a      	subs	r2, r3, #1
 8007d34:	61fa      	str	r2, [r7, #28]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d102      	bne.n	8007d40 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d3e:	e052      	b.n	8007de6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d44:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d0ef      	beq.n	8007d30 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1ea      	bne.n	8007d30 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5e:	f003 0304 	and.w	r3, r3, #4
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d004      	beq.n	8007d70 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2204      	movs	r2, #4
 8007d6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d6c:	2304      	movs	r3, #4
 8007d6e:	e03a      	b.n	8007de6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d004      	beq.n	8007d86 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e02f      	b.n	8007de6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff fc0e 	bl	80075a8 <SDMMC_GetCommandResponse>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	461a      	mov	r2, r3
 8007d90:	7afb      	ldrb	r3, [r7, #11]
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d001      	beq.n	8007d9a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e025      	b.n	8007de6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	22c5      	movs	r2, #197	; 0xc5
 8007d9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007da0:	2100      	movs	r1, #0
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7ff fc0d 	bl	80075c2 <SDMMC_GetResponse>
 8007da8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d106      	bne.n	8007dc2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	0c1b      	lsrs	r3, r3, #16
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e011      	b.n	8007de6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007dd0:	e009      	b.n	8007de6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007de0:	e001      	b.n	8007de6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3720      	adds	r7, #32
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000000 	.word	0x20000000
 8007df4:	10624dd3 	.word	0x10624dd3

08007df8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e00:	4b22      	ldr	r3, [pc, #136]	; (8007e8c <SDMMC_GetCmdResp7+0x94>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a22      	ldr	r2, [pc, #136]	; (8007e90 <SDMMC_GetCmdResp7+0x98>)
 8007e06:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0a:	0a5b      	lsrs	r3, r3, #9
 8007e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e10:	fb02 f303 	mul.w	r3, r2, r3
 8007e14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	1e5a      	subs	r2, r3, #1
 8007e1a:	60fa      	str	r2, [r7, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d102      	bne.n	8007e26 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e24:	e02c      	b.n	8007e80 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0ef      	beq.n	8007e16 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1ea      	bne.n	8007e16 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e44:	f003 0304 	and.w	r3, r3, #4
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2204      	movs	r2, #4
 8007e50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e52:	2304      	movs	r3, #4
 8007e54:	e014      	b.n	8007e80 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d004      	beq.n	8007e6c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e009      	b.n	8007e80 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2240      	movs	r2, #64	; 0x40
 8007e7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007e7e:	2300      	movs	r3, #0
  
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	20000000 	.word	0x20000000
 8007e90:	10624dd3 	.word	0x10624dd3

08007e94 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e9c:	4b11      	ldr	r3, [pc, #68]	; (8007ee4 <SDMMC_GetCmdError+0x50>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a11      	ldr	r2, [pc, #68]	; (8007ee8 <SDMMC_GetCmdError+0x54>)
 8007ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea6:	0a5b      	lsrs	r3, r3, #9
 8007ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eac:	fb02 f303 	mul.w	r3, r2, r3
 8007eb0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	1e5a      	subs	r2, r3, #1
 8007eb6:	60fa      	str	r2, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d102      	bne.n	8007ec2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ebc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ec0:	e009      	b.n	8007ed6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d0f1      	beq.n	8007eb2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	22c5      	movs	r2, #197	; 0xc5
 8007ed2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	20000000 	.word	0x20000000
 8007ee8:	10624dd3 	.word	0x10624dd3

08007eec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007eec:	b084      	sub	sp, #16
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	f107 001c 	add.w	r0, r7, #28
 8007efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d120      	bne.n	8007f46 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	4b20      	ldr	r3, [pc, #128]	; (8007f98 <USB_CoreInit+0xac>)
 8007f16:	4013      	ands	r3, r2
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d105      	bne.n	8007f3a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 fbee 	bl	800971c <USB_CoreReset>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]
 8007f44:	e010      	b.n	8007f68 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 fbe2 	bl	800971c <USB_CoreReset>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d10b      	bne.n	8007f86 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f043 0206 	orr.w	r2, r3, #6
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f043 0220 	orr.w	r2, r3, #32
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f92:	b004      	add	sp, #16
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	ffbdffbf 	.word	0xffbdffbf

08007f9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d165      	bne.n	800807c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	4a41      	ldr	r2, [pc, #260]	; (80080b8 <USB_SetTurnaroundTime+0x11c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d906      	bls.n	8007fc6 <USB_SetTurnaroundTime+0x2a>
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4a40      	ldr	r2, [pc, #256]	; (80080bc <USB_SetTurnaroundTime+0x120>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d202      	bcs.n	8007fc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007fc0:	230f      	movs	r3, #15
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	e062      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	4a3c      	ldr	r2, [pc, #240]	; (80080bc <USB_SetTurnaroundTime+0x120>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d306      	bcc.n	8007fdc <USB_SetTurnaroundTime+0x40>
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	4a3b      	ldr	r2, [pc, #236]	; (80080c0 <USB_SetTurnaroundTime+0x124>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d202      	bcs.n	8007fdc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007fd6:	230e      	movs	r3, #14
 8007fd8:	617b      	str	r3, [r7, #20]
 8007fda:	e057      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	4a38      	ldr	r2, [pc, #224]	; (80080c0 <USB_SetTurnaroundTime+0x124>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d306      	bcc.n	8007ff2 <USB_SetTurnaroundTime+0x56>
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	4a37      	ldr	r2, [pc, #220]	; (80080c4 <USB_SetTurnaroundTime+0x128>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d202      	bcs.n	8007ff2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007fec:	230d      	movs	r3, #13
 8007fee:	617b      	str	r3, [r7, #20]
 8007ff0:	e04c      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	4a33      	ldr	r2, [pc, #204]	; (80080c4 <USB_SetTurnaroundTime+0x128>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d306      	bcc.n	8008008 <USB_SetTurnaroundTime+0x6c>
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	4a32      	ldr	r2, [pc, #200]	; (80080c8 <USB_SetTurnaroundTime+0x12c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d802      	bhi.n	8008008 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008002:	230c      	movs	r3, #12
 8008004:	617b      	str	r3, [r7, #20]
 8008006:	e041      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	4a2f      	ldr	r2, [pc, #188]	; (80080c8 <USB_SetTurnaroundTime+0x12c>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d906      	bls.n	800801e <USB_SetTurnaroundTime+0x82>
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	4a2e      	ldr	r2, [pc, #184]	; (80080cc <USB_SetTurnaroundTime+0x130>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d802      	bhi.n	800801e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008018:	230b      	movs	r3, #11
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	e036      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	4a2a      	ldr	r2, [pc, #168]	; (80080cc <USB_SetTurnaroundTime+0x130>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d906      	bls.n	8008034 <USB_SetTurnaroundTime+0x98>
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	4a29      	ldr	r2, [pc, #164]	; (80080d0 <USB_SetTurnaroundTime+0x134>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d802      	bhi.n	8008034 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800802e:	230a      	movs	r3, #10
 8008030:	617b      	str	r3, [r7, #20]
 8008032:	e02b      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	4a26      	ldr	r2, [pc, #152]	; (80080d0 <USB_SetTurnaroundTime+0x134>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d906      	bls.n	800804a <USB_SetTurnaroundTime+0xae>
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	4a25      	ldr	r2, [pc, #148]	; (80080d4 <USB_SetTurnaroundTime+0x138>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d202      	bcs.n	800804a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008044:	2309      	movs	r3, #9
 8008046:	617b      	str	r3, [r7, #20]
 8008048:	e020      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	4a21      	ldr	r2, [pc, #132]	; (80080d4 <USB_SetTurnaroundTime+0x138>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d306      	bcc.n	8008060 <USB_SetTurnaroundTime+0xc4>
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	4a20      	ldr	r2, [pc, #128]	; (80080d8 <USB_SetTurnaroundTime+0x13c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d802      	bhi.n	8008060 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800805a:	2308      	movs	r3, #8
 800805c:	617b      	str	r3, [r7, #20]
 800805e:	e015      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	4a1d      	ldr	r2, [pc, #116]	; (80080d8 <USB_SetTurnaroundTime+0x13c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d906      	bls.n	8008076 <USB_SetTurnaroundTime+0xda>
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	4a1c      	ldr	r2, [pc, #112]	; (80080dc <USB_SetTurnaroundTime+0x140>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d202      	bcs.n	8008076 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008070:	2307      	movs	r3, #7
 8008072:	617b      	str	r3, [r7, #20]
 8008074:	e00a      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008076:	2306      	movs	r3, #6
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	e007      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d102      	bne.n	8008088 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008082:	2309      	movs	r3, #9
 8008084:	617b      	str	r3, [r7, #20]
 8008086:	e001      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008088:	2309      	movs	r3, #9
 800808a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	029b      	lsls	r3, r3, #10
 80080a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80080a4:	431a      	orrs	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	371c      	adds	r7, #28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	00d8acbf 	.word	0x00d8acbf
 80080bc:	00e4e1c0 	.word	0x00e4e1c0
 80080c0:	00f42400 	.word	0x00f42400
 80080c4:	01067380 	.word	0x01067380
 80080c8:	011a499f 	.word	0x011a499f
 80080cc:	01312cff 	.word	0x01312cff
 80080d0:	014ca43f 	.word	0x014ca43f
 80080d4:	016e3600 	.word	0x016e3600
 80080d8:	01a6ab1f 	.word	0x01a6ab1f
 80080dc:	01e84800 	.word	0x01e84800

080080e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f043 0201 	orr.w	r2, r3, #1
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008102:	b480      	push	{r7}
 8008104:	b083      	sub	sp, #12
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f023 0201 	bic.w	r2, r3, #1
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d115      	bne.n	8008172 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008152:	2001      	movs	r0, #1
 8008154:	f7f9 fafc 	bl	8001750 <HAL_Delay>
      ms++;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3301      	adds	r3, #1
 800815c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 fa4b 	bl	80095fa <USB_GetMode>
 8008164:	4603      	mov	r3, r0
 8008166:	2b01      	cmp	r3, #1
 8008168:	d01e      	beq.n	80081a8 <USB_SetCurrentMode+0x84>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b31      	cmp	r3, #49	; 0x31
 800816e:	d9f0      	bls.n	8008152 <USB_SetCurrentMode+0x2e>
 8008170:	e01a      	b.n	80081a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d115      	bne.n	80081a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008184:	2001      	movs	r0, #1
 8008186:	f7f9 fae3 	bl	8001750 <HAL_Delay>
      ms++;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3301      	adds	r3, #1
 800818e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 fa32 	bl	80095fa <USB_GetMode>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d005      	beq.n	80081a8 <USB_SetCurrentMode+0x84>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b31      	cmp	r3, #49	; 0x31
 80081a0:	d9f0      	bls.n	8008184 <USB_SetCurrentMode+0x60>
 80081a2:	e001      	b.n	80081a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e005      	b.n	80081b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b32      	cmp	r3, #50	; 0x32
 80081ac:	d101      	bne.n	80081b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e000      	b.n	80081b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081bc:	b084      	sub	sp, #16
 80081be:	b580      	push	{r7, lr}
 80081c0:	b086      	sub	sp, #24
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80081ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80081d6:	2300      	movs	r3, #0
 80081d8:	613b      	str	r3, [r7, #16]
 80081da:	e009      	b.n	80081f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	3340      	adds	r3, #64	; 0x40
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	2200      	movs	r2, #0
 80081e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	3301      	adds	r3, #1
 80081ee:	613b      	str	r3, [r7, #16]
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	2b0e      	cmp	r3, #14
 80081f4:	d9f2      	bls.n	80081dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80081f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d11c      	bne.n	8008236 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800820a:	f043 0302 	orr.w	r3, r3, #2
 800820e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008214:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	e005      	b.n	8008242 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008248:	461a      	mov	r2, r3
 800824a:	2300      	movs	r3, #0
 800824c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008254:	4619      	mov	r1, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825c:	461a      	mov	r2, r3
 800825e:	680b      	ldr	r3, [r1, #0]
 8008260:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008264:	2b01      	cmp	r3, #1
 8008266:	d10c      	bne.n	8008282 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826a:	2b00      	cmp	r3, #0
 800826c:	d104      	bne.n	8008278 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800826e:	2100      	movs	r1, #0
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f965 	bl	8008540 <USB_SetDevSpeed>
 8008276:	e008      	b.n	800828a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008278:	2101      	movs	r1, #1
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f960 	bl	8008540 <USB_SetDevSpeed>
 8008280:	e003      	b.n	800828a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008282:	2103      	movs	r1, #3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f95b 	bl	8008540 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800828a:	2110      	movs	r1, #16
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f8f3 	bl	8008478 <USB_FlushTxFifo>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f91f 	bl	80084e0 <USB_FlushRxFifo>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b2:	461a      	mov	r2, r3
 80082b4:	2300      	movs	r3, #0
 80082b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082be:	461a      	mov	r2, r3
 80082c0:	2300      	movs	r3, #0
 80082c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ca:	461a      	mov	r2, r3
 80082cc:	2300      	movs	r3, #0
 80082ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082d0:	2300      	movs	r3, #0
 80082d2:	613b      	str	r3, [r7, #16]
 80082d4:	e043      	b.n	800835e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082ec:	d118      	bne.n	8008320 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10a      	bne.n	800830a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008300:	461a      	mov	r2, r3
 8008302:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	e013      	b.n	8008332 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4413      	add	r3, r2
 8008312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008316:	461a      	mov	r2, r3
 8008318:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800831c:	6013      	str	r3, [r2, #0]
 800831e:	e008      	b.n	8008332 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800832c:	461a      	mov	r2, r3
 800832e:	2300      	movs	r3, #0
 8008330:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833e:	461a      	mov	r2, r3
 8008340:	2300      	movs	r3, #0
 8008342:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	015a      	lsls	r2, r3, #5
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	4413      	add	r3, r2
 800834c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008350:	461a      	mov	r2, r3
 8008352:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008356:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	3301      	adds	r3, #1
 800835c:	613b      	str	r3, [r7, #16]
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	429a      	cmp	r2, r3
 8008364:	d3b7      	bcc.n	80082d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008366:	2300      	movs	r3, #0
 8008368:	613b      	str	r3, [r7, #16]
 800836a:	e043      	b.n	80083f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800837e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008382:	d118      	bne.n	80083b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10a      	bne.n	80083a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008396:	461a      	mov	r2, r3
 8008398:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800839c:	6013      	str	r3, [r2, #0]
 800839e:	e013      	b.n	80083c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ac:	461a      	mov	r2, r3
 80083ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	e008      	b.n	80083c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c2:	461a      	mov	r2, r3
 80083c4:	2300      	movs	r3, #0
 80083c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d4:	461a      	mov	r2, r3
 80083d6:	2300      	movs	r3, #0
 80083d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e6:	461a      	mov	r2, r3
 80083e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	3301      	adds	r3, #1
 80083f2:	613b      	str	r3, [r7, #16]
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d3b7      	bcc.n	800836c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800840a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800840e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800841c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	2b00      	cmp	r3, #0
 8008422:	d105      	bne.n	8008430 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	f043 0210 	orr.w	r2, r3, #16
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	699a      	ldr	r2, [r3, #24]
 8008434:	4b0e      	ldr	r3, [pc, #56]	; (8008470 <USB_DevInit+0x2b4>)
 8008436:	4313      	orrs	r3, r2
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800843c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800843e:	2b00      	cmp	r3, #0
 8008440:	d005      	beq.n	800844e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	f043 0208 	orr.w	r2, r3, #8
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800844e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008450:	2b01      	cmp	r3, #1
 8008452:	d105      	bne.n	8008460 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	699a      	ldr	r2, [r3, #24]
 8008458:	4b06      	ldr	r3, [pc, #24]	; (8008474 <USB_DevInit+0x2b8>)
 800845a:	4313      	orrs	r3, r2
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008460:	7dfb      	ldrb	r3, [r7, #23]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800846c:	b004      	add	sp, #16
 800846e:	4770      	bx	lr
 8008470:	803c3800 	.word	0x803c3800
 8008474:	40000004 	.word	0x40000004

08008478 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3301      	adds	r3, #1
 800848a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4a13      	ldr	r2, [pc, #76]	; (80084dc <USB_FlushTxFifo+0x64>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d901      	bls.n	8008498 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e01b      	b.n	80084d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	2b00      	cmp	r3, #0
 800849e:	daf2      	bge.n	8008486 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	019b      	lsls	r3, r3, #6
 80084a8:	f043 0220 	orr.w	r2, r3, #32
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	3301      	adds	r3, #1
 80084b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	4a08      	ldr	r2, [pc, #32]	; (80084dc <USB_FlushTxFifo+0x64>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d901      	bls.n	80084c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e006      	b.n	80084d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	f003 0320 	and.w	r3, r3, #32
 80084ca:	2b20      	cmp	r3, #32
 80084cc:	d0f0      	beq.n	80084b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	00030d40 	.word	0x00030d40

080084e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	3301      	adds	r3, #1
 80084f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4a11      	ldr	r2, [pc, #68]	; (800853c <USB_FlushRxFifo+0x5c>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d901      	bls.n	80084fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e018      	b.n	8008530 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	daf2      	bge.n	80084ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008506:	2300      	movs	r3, #0
 8008508:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2210      	movs	r2, #16
 800850e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3301      	adds	r3, #1
 8008514:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4a08      	ldr	r2, [pc, #32]	; (800853c <USB_FlushRxFifo+0x5c>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d901      	bls.n	8008522 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e006      	b.n	8008530 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	f003 0310 	and.w	r3, r3, #16
 800852a:	2b10      	cmp	r3, #16
 800852c:	d0f0      	beq.n	8008510 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	00030d40 	.word	0x00030d40

08008540 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	460b      	mov	r3, r1
 800854a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	78fb      	ldrb	r3, [r7, #3]
 800855a:	68f9      	ldr	r1, [r7, #12]
 800855c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008560:	4313      	orrs	r3, r2
 8008562:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008572:	b480      	push	{r7}
 8008574:	b087      	sub	sp, #28
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f003 0306 	and.w	r3, r3, #6
 800858a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d102      	bne.n	8008598 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008592:	2300      	movs	r3, #0
 8008594:	75fb      	strb	r3, [r7, #23]
 8008596:	e00a      	b.n	80085ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2b02      	cmp	r3, #2
 800859c:	d002      	beq.n	80085a4 <USB_GetDevSpeed+0x32>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2b06      	cmp	r3, #6
 80085a2:	d102      	bne.n	80085aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80085a4:	2302      	movs	r3, #2
 80085a6:	75fb      	strb	r3, [r7, #23]
 80085a8:	e001      	b.n	80085ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80085aa:	230f      	movs	r3, #15
 80085ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	785b      	ldrb	r3, [r3, #1]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d139      	bne.n	800864c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085de:	69da      	ldr	r2, [r3, #28]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	f003 030f 	and.w	r3, r3, #15
 80085e8:	2101      	movs	r1, #1
 80085ea:	fa01 f303 	lsl.w	r3, r1, r3
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	68f9      	ldr	r1, [r7, #12]
 80085f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085f6:	4313      	orrs	r3, r2
 80085f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	4413      	add	r3, r2
 8008602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d153      	bne.n	80086b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	015a      	lsls	r2, r3, #5
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4413      	add	r3, r2
 8008618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	791b      	ldrb	r3, [r3, #4]
 800862a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800862c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	059b      	lsls	r3, r3, #22
 8008632:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008634:	431a      	orrs	r2, r3
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	0159      	lsls	r1, r3, #5
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	440b      	add	r3, r1
 800863e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008642:	4619      	mov	r1, r3
 8008644:	4b20      	ldr	r3, [pc, #128]	; (80086c8 <USB_ActivateEndpoint+0x10c>)
 8008646:	4313      	orrs	r3, r2
 8008648:	600b      	str	r3, [r1, #0]
 800864a:	e035      	b.n	80086b8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008652:	69da      	ldr	r2, [r3, #28]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	f003 030f 	and.w	r3, r3, #15
 800865c:	2101      	movs	r1, #1
 800865e:	fa01 f303 	lsl.w	r3, r1, r3
 8008662:	041b      	lsls	r3, r3, #16
 8008664:	68f9      	ldr	r1, [r7, #12]
 8008666:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800866a:	4313      	orrs	r3, r2
 800866c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	4413      	add	r3, r2
 8008676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d119      	bne.n	80086b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4413      	add	r3, r2
 800868c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	791b      	ldrb	r3, [r3, #4]
 800869e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80086a0:	430b      	orrs	r3, r1
 80086a2:	431a      	orrs	r2, r3
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	0159      	lsls	r1, r3, #5
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	440b      	add	r3, r1
 80086ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b0:	4619      	mov	r1, r3
 80086b2:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <USB_ActivateEndpoint+0x10c>)
 80086b4:	4313      	orrs	r3, r2
 80086b6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	10008000 	.word	0x10008000

080086cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	785b      	ldrb	r3, [r3, #1]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d161      	bne.n	80087ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086fe:	d11f      	bne.n	8008740 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	0151      	lsls	r1, r2, #5
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	440a      	add	r2, r1
 8008716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800871a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800871e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	0151      	lsls	r1, r2, #5
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	440a      	add	r2, r1
 8008736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800873a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800873e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	f003 030f 	and.w	r3, r3, #15
 8008750:	2101      	movs	r1, #1
 8008752:	fa01 f303 	lsl.w	r3, r1, r3
 8008756:	b29b      	uxth	r3, r3
 8008758:	43db      	mvns	r3, r3
 800875a:	68f9      	ldr	r1, [r7, #12]
 800875c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008760:	4013      	ands	r3, r2
 8008762:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800876a:	69da      	ldr	r2, [r3, #28]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	f003 030f 	and.w	r3, r3, #15
 8008774:	2101      	movs	r1, #1
 8008776:	fa01 f303 	lsl.w	r3, r1, r3
 800877a:	b29b      	uxth	r3, r3
 800877c:	43db      	mvns	r3, r3
 800877e:	68f9      	ldr	r1, [r7, #12]
 8008780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008784:	4013      	ands	r3, r2
 8008786:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4413      	add	r3, r2
 8008790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	0159      	lsls	r1, r3, #5
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	440b      	add	r3, r1
 800879e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a2:	4619      	mov	r1, r3
 80087a4:	4b35      	ldr	r3, [pc, #212]	; (800887c <USB_DeactivateEndpoint+0x1b0>)
 80087a6:	4013      	ands	r3, r2
 80087a8:	600b      	str	r3, [r1, #0]
 80087aa:	e060      	b.n	800886e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087c2:	d11f      	bne.n	8008804 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	0151      	lsls	r1, r2, #5
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	440a      	add	r2, r1
 80087da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	0151      	lsls	r1, r2, #5
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	440a      	add	r2, r1
 80087fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008802:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800880a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	f003 030f 	and.w	r3, r3, #15
 8008814:	2101      	movs	r1, #1
 8008816:	fa01 f303 	lsl.w	r3, r1, r3
 800881a:	041b      	lsls	r3, r3, #16
 800881c:	43db      	mvns	r3, r3
 800881e:	68f9      	ldr	r1, [r7, #12]
 8008820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008824:	4013      	ands	r3, r2
 8008826:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800882e:	69da      	ldr	r2, [r3, #28]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	f003 030f 	and.w	r3, r3, #15
 8008838:	2101      	movs	r1, #1
 800883a:	fa01 f303 	lsl.w	r3, r1, r3
 800883e:	041b      	lsls	r3, r3, #16
 8008840:	43db      	mvns	r3, r3
 8008842:	68f9      	ldr	r1, [r7, #12]
 8008844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008848:	4013      	ands	r3, r2
 800884a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	0159      	lsls	r1, r3, #5
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	440b      	add	r3, r1
 8008862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008866:	4619      	mov	r1, r3
 8008868:	4b05      	ldr	r3, [pc, #20]	; (8008880 <USB_DeactivateEndpoint+0x1b4>)
 800886a:	4013      	ands	r3, r2
 800886c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	ec337800 	.word	0xec337800
 8008880:	eff37800 	.word	0xeff37800

08008884 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b08a      	sub	sp, #40	; 0x28
 8008888:	af02      	add	r7, sp, #8
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	4613      	mov	r3, r2
 8008890:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	785b      	ldrb	r3, [r3, #1]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	f040 8163 	bne.w	8008b6c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d132      	bne.n	8008914 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ba:	691a      	ldr	r2, [r3, #16]
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	0159      	lsls	r1, r3, #5
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	440b      	add	r3, r1
 80088c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c8:	4619      	mov	r1, r3
 80088ca:	4ba5      	ldr	r3, [pc, #660]	; (8008b60 <USB_EPStartXfer+0x2dc>)
 80088cc:	4013      	ands	r3, r2
 80088ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	69ba      	ldr	r2, [r7, #24]
 80088e0:	0151      	lsls	r1, r2, #5
 80088e2:	69fa      	ldr	r2, [r7, #28]
 80088e4:	440a      	add	r2, r1
 80088e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088fc:	691a      	ldr	r2, [r3, #16]
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	0159      	lsls	r1, r3, #5
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	440b      	add	r3, r1
 8008906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800890a:	4619      	mov	r1, r3
 800890c:	4b95      	ldr	r3, [pc, #596]	; (8008b64 <USB_EPStartXfer+0x2e0>)
 800890e:	4013      	ands	r3, r2
 8008910:	610b      	str	r3, [r1, #16]
 8008912:	e074      	b.n	80089fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008920:	691a      	ldr	r2, [r3, #16]
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	0159      	lsls	r1, r3, #5
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	440b      	add	r3, r1
 800892a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800892e:	4619      	mov	r1, r3
 8008930:	4b8c      	ldr	r3, [pc, #560]	; (8008b64 <USB_EPStartXfer+0x2e0>)
 8008932:	4013      	ands	r3, r2
 8008934:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	015a      	lsls	r2, r3, #5
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	4413      	add	r3, r2
 800893e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008942:	691a      	ldr	r2, [r3, #16]
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	0159      	lsls	r1, r3, #5
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	440b      	add	r3, r1
 800894c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008950:	4619      	mov	r1, r3
 8008952:	4b83      	ldr	r3, [pc, #524]	; (8008b60 <USB_EPStartXfer+0x2dc>)
 8008954:	4013      	ands	r3, r2
 8008956:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	015a      	lsls	r2, r3, #5
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	4413      	add	r3, r2
 8008960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008964:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	6999      	ldr	r1, [r3, #24]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	440b      	add	r3, r1
 8008970:	1e59      	subs	r1, r3, #1
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	fbb1 f3f3 	udiv	r3, r1, r3
 800897a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800897c:	4b7a      	ldr	r3, [pc, #488]	; (8008b68 <USB_EPStartXfer+0x2e4>)
 800897e:	400b      	ands	r3, r1
 8008980:	69b9      	ldr	r1, [r7, #24]
 8008982:	0148      	lsls	r0, r1, #5
 8008984:	69f9      	ldr	r1, [r7, #28]
 8008986:	4401      	add	r1, r0
 8008988:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800898c:	4313      	orrs	r3, r2
 800898e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	4413      	add	r3, r2
 8008998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800899c:	691a      	ldr	r2, [r3, #16]
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089a6:	69b9      	ldr	r1, [r7, #24]
 80089a8:	0148      	lsls	r0, r1, #5
 80089aa:	69f9      	ldr	r1, [r7, #28]
 80089ac:	4401      	add	r1, r0
 80089ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80089b2:	4313      	orrs	r3, r2
 80089b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	791b      	ldrb	r3, [r3, #4]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d11f      	bne.n	80089fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	69ba      	ldr	r2, [r7, #24]
 80089ce:	0151      	lsls	r1, r2, #5
 80089d0:	69fa      	ldr	r2, [r7, #28]
 80089d2:	440a      	add	r2, r1
 80089d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80089dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	0151      	lsls	r1, r2, #5
 80089f0:	69fa      	ldr	r2, [r7, #28]
 80089f2:	440a      	add	r2, r1
 80089f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80089fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80089fe:	79fb      	ldrb	r3, [r7, #7]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d14b      	bne.n	8008a9c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d009      	beq.n	8008a20 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a18:	461a      	mov	r2, r3
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	791b      	ldrb	r3, [r3, #4]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d128      	bne.n	8008a7a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d110      	bne.n	8008a5a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	0151      	lsls	r1, r2, #5
 8008a4a:	69fa      	ldr	r2, [r7, #28]
 8008a4c:	440a      	add	r2, r1
 8008a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	e00f      	b.n	8008a7a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	0151      	lsls	r1, r2, #5
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	440a      	add	r2, r1
 8008a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a78:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	69ba      	ldr	r2, [r7, #24]
 8008a8a:	0151      	lsls	r1, r2, #5
 8008a8c:	69fa      	ldr	r2, [r7, #28]
 8008a8e:	440a      	add	r2, r1
 8008a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a98:	6013      	str	r3, [r2, #0]
 8008a9a:	e137      	b.n	8008d0c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	0151      	lsls	r1, r2, #5
 8008aae:	69fa      	ldr	r2, [r7, #28]
 8008ab0:	440a      	add	r2, r1
 8008ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008aba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	791b      	ldrb	r3, [r3, #4]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d015      	beq.n	8008af0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 811f 	beq.w	8008d0c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	f003 030f 	and.w	r3, r3, #15
 8008ade:	2101      	movs	r1, #1
 8008ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ae4:	69f9      	ldr	r1, [r7, #28]
 8008ae6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008aea:	4313      	orrs	r3, r2
 8008aec:	634b      	str	r3, [r1, #52]	; 0x34
 8008aee:	e10d      	b.n	8008d0c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d110      	bne.n	8008b22 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	0151      	lsls	r1, r2, #5
 8008b12:	69fa      	ldr	r2, [r7, #28]
 8008b14:	440a      	add	r2, r1
 8008b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	e00f      	b.n	8008b42 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	015a      	lsls	r2, r3, #5
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	4413      	add	r3, r2
 8008b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	0151      	lsls	r1, r2, #5
 8008b34:	69fa      	ldr	r2, [r7, #28]
 8008b36:	440a      	add	r2, r1
 8008b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b40:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	6919      	ldr	r1, [r3, #16]
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	781a      	ldrb	r2, [r3, #0]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	b298      	uxth	r0, r3
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	4603      	mov	r3, r0
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f000 faea 	bl	8009130 <USB_WritePacket>
 8008b5c:	e0d6      	b.n	8008d0c <USB_EPStartXfer+0x488>
 8008b5e:	bf00      	nop
 8008b60:	e007ffff 	.word	0xe007ffff
 8008b64:	fff80000 	.word	0xfff80000
 8008b68:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b78:	691a      	ldr	r2, [r3, #16]
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	0159      	lsls	r1, r3, #5
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	440b      	add	r3, r1
 8008b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b86:	4619      	mov	r1, r3
 8008b88:	4b63      	ldr	r3, [pc, #396]	; (8008d18 <USB_EPStartXfer+0x494>)
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b9a:	691a      	ldr	r2, [r3, #16]
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	0159      	lsls	r1, r3, #5
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	440b      	add	r3, r1
 8008ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4b5c      	ldr	r3, [pc, #368]	; (8008d1c <USB_EPStartXfer+0x498>)
 8008bac:	4013      	ands	r3, r2
 8008bae:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d123      	bne.n	8008c00 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc4:	691a      	ldr	r2, [r3, #16]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bce:	69b9      	ldr	r1, [r7, #24]
 8008bd0:	0148      	lsls	r0, r1, #5
 8008bd2:	69f9      	ldr	r1, [r7, #28]
 8008bd4:	4401      	add	r1, r0
 8008bd6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	0151      	lsls	r1, r2, #5
 8008bf0:	69fa      	ldr	r2, [r7, #28]
 8008bf2:	440a      	add	r2, r1
 8008bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bfc:	6113      	str	r3, [r2, #16]
 8008bfe:	e037      	b.n	8008c70 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	699a      	ldr	r2, [r3, #24]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	4413      	add	r3, r2
 8008c0a:	1e5a      	subs	r2, r3, #1
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c14:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	8afa      	ldrh	r2, [r7, #22]
 8008c1c:	fb03 f202 	mul.w	r2, r3, r2
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c30:	691a      	ldr	r2, [r3, #16]
 8008c32:	8afb      	ldrh	r3, [r7, #22]
 8008c34:	04d9      	lsls	r1, r3, #19
 8008c36:	4b3a      	ldr	r3, [pc, #232]	; (8008d20 <USB_EPStartXfer+0x49c>)
 8008c38:	400b      	ands	r3, r1
 8008c3a:	69b9      	ldr	r1, [r7, #24]
 8008c3c:	0148      	lsls	r0, r1, #5
 8008c3e:	69f9      	ldr	r1, [r7, #28]
 8008c40:	4401      	add	r1, r0
 8008c42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c46:	4313      	orrs	r3, r2
 8008c48:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c56:	691a      	ldr	r2, [r3, #16]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	69db      	ldr	r3, [r3, #28]
 8008c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c60:	69b9      	ldr	r1, [r7, #24]
 8008c62:	0148      	lsls	r0, r1, #5
 8008c64:	69f9      	ldr	r1, [r7, #28]
 8008c66:	4401      	add	r1, r0
 8008c68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d10d      	bne.n	8008c92 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d009      	beq.n	8008c92 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	6919      	ldr	r1, [r3, #16]
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c8e:	460a      	mov	r2, r1
 8008c90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	791b      	ldrb	r3, [r3, #4]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d128      	bne.n	8008cec <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d110      	bne.n	8008ccc <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	015a      	lsls	r2, r3, #5
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	0151      	lsls	r1, r2, #5
 8008cbc:	69fa      	ldr	r2, [r7, #28]
 8008cbe:	440a      	add	r2, r1
 8008cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cc8:	6013      	str	r3, [r2, #0]
 8008cca:	e00f      	b.n	8008cec <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	0151      	lsls	r1, r2, #5
 8008cde:	69fa      	ldr	r2, [r7, #28]
 8008ce0:	440a      	add	r2, r1
 8008ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	69ba      	ldr	r2, [r7, #24]
 8008cfc:	0151      	lsls	r1, r2, #5
 8008cfe:	69fa      	ldr	r2, [r7, #28]
 8008d00:	440a      	add	r2, r1
 8008d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3720      	adds	r7, #32
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	fff80000 	.word	0xfff80000
 8008d1c:	e007ffff 	.word	0xe007ffff
 8008d20:	1ff80000 	.word	0x1ff80000

08008d24 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	785b      	ldrb	r3, [r3, #1]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	f040 80ce 	bne.w	8008ee2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d132      	bne.n	8008db4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5a:	691a      	ldr	r2, [r3, #16]
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	0159      	lsls	r1, r3, #5
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	440b      	add	r3, r1
 8008d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4b9a      	ldr	r3, [pc, #616]	; (8008fd4 <USB_EP0StartXfer+0x2b0>)
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	0151      	lsls	r1, r2, #5
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	440a      	add	r2, r1
 8008d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9c:	691a      	ldr	r2, [r3, #16]
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	0159      	lsls	r1, r3, #5
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	440b      	add	r3, r1
 8008da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008daa:	4619      	mov	r1, r3
 8008dac:	4b8a      	ldr	r3, [pc, #552]	; (8008fd8 <USB_EP0StartXfer+0x2b4>)
 8008dae:	4013      	ands	r3, r2
 8008db0:	610b      	str	r3, [r1, #16]
 8008db2:	e04e      	b.n	8008e52 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc0:	691a      	ldr	r2, [r3, #16]
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	0159      	lsls	r1, r3, #5
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	440b      	add	r3, r1
 8008dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4b81      	ldr	r3, [pc, #516]	; (8008fd8 <USB_EP0StartXfer+0x2b4>)
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de2:	691a      	ldr	r2, [r3, #16]
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	0159      	lsls	r1, r3, #5
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	440b      	add	r3, r1
 8008dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df0:	4619      	mov	r1, r3
 8008df2:	4b78      	ldr	r3, [pc, #480]	; (8008fd4 <USB_EP0StartXfer+0x2b0>)
 8008df4:	4013      	ands	r3, r2
 8008df6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	699a      	ldr	r2, [r3, #24]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d903      	bls.n	8008e0c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	015a      	lsls	r2, r3, #5
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	0151      	lsls	r1, r2, #5
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	440a      	add	r2, r1
 8008e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e38:	691a      	ldr	r2, [r3, #16]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e42:	6939      	ldr	r1, [r7, #16]
 8008e44:	0148      	lsls	r0, r1, #5
 8008e46:	6979      	ldr	r1, [r7, #20]
 8008e48:	4401      	add	r1, r0
 8008e4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008e52:	79fb      	ldrb	r3, [r7, #7]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d11e      	bne.n	8008e96 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d009      	beq.n	8008e74 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	0151      	lsls	r1, r2, #5
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	440a      	add	r2, r1
 8008e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	e097      	b.n	8008fc6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	693a      	ldr	r2, [r7, #16]
 8008ea6:	0151      	lsls	r1, r2, #5
 8008ea8:	697a      	ldr	r2, [r7, #20]
 8008eaa:	440a      	add	r2, r1
 8008eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008eb4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f000 8083 	beq.w	8008fc6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	f003 030f 	and.w	r3, r3, #15
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed6:	6979      	ldr	r1, [r7, #20]
 8008ed8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008edc:	4313      	orrs	r3, r2
 8008ede:	634b      	str	r3, [r1, #52]	; 0x34
 8008ee0:	e071      	b.n	8008fc6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eee:	691a      	ldr	r2, [r3, #16]
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	0159      	lsls	r1, r3, #5
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	440b      	add	r3, r1
 8008ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efc:	4619      	mov	r1, r3
 8008efe:	4b36      	ldr	r3, [pc, #216]	; (8008fd8 <USB_EP0StartXfer+0x2b4>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f10:	691a      	ldr	r2, [r3, #16]
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	0159      	lsls	r1, r3, #5
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	440b      	add	r3, r1
 8008f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1e:	4619      	mov	r1, r3
 8008f20:	4b2c      	ldr	r3, [pc, #176]	; (8008fd4 <USB_EP0StartXfer+0x2b0>)
 8008f22:	4013      	ands	r3, r2
 8008f24:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	68da      	ldr	r2, [r3, #12]
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	68da      	ldr	r2, [r3, #12]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	0151      	lsls	r1, r2, #5
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	440a      	add	r2, r1
 8008f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	015a      	lsls	r2, r3, #5
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6a:	691a      	ldr	r2, [r3, #16]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f74:	6939      	ldr	r1, [r7, #16]
 8008f76:	0148      	lsls	r0, r1, #5
 8008f78:	6979      	ldr	r1, [r7, #20]
 8008f7a:	4401      	add	r1, r0
 8008f7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f80:	4313      	orrs	r3, r2
 8008f82:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008f84:	79fb      	ldrb	r3, [r7, #7]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d10d      	bne.n	8008fa6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d009      	beq.n	8008fa6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	6919      	ldr	r1, [r3, #16]
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa2:	460a      	mov	r2, r1
 8008fa4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	0151      	lsls	r1, r2, #5
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	440a      	add	r2, r1
 8008fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008fc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	371c      	adds	r7, #28
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	e007ffff 	.word	0xe007ffff
 8008fd8:	fff80000 	.word	0xfff80000

08008fdc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	785b      	ldrb	r3, [r3, #1]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d14a      	bne.n	8009090 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800900e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009012:	f040 8086 	bne.w	8009122 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	7812      	ldrb	r2, [r2, #0]
 800902a:	0151      	lsls	r1, r2, #5
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	440a      	add	r2, r1
 8009030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009034:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009038:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	015a      	lsls	r2, r3, #5
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	4413      	add	r3, r2
 8009044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	7812      	ldrb	r2, [r2, #0]
 800904e:	0151      	lsls	r1, r2, #5
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	440a      	add	r2, r1
 8009054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009058:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800905c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	3301      	adds	r3, #1
 8009062:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f242 7210 	movw	r2, #10000	; 0x2710
 800906a:	4293      	cmp	r3, r2
 800906c:	d902      	bls.n	8009074 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	75fb      	strb	r3, [r7, #23]
          break;
 8009072:	e056      	b.n	8009122 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800908c:	d0e7      	beq.n	800905e <USB_EPStopXfer+0x82>
 800908e:	e048      	b.n	8009122 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	015a      	lsls	r2, r3, #5
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	4413      	add	r3, r2
 800909a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090a8:	d13b      	bne.n	8009122 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	683a      	ldr	r2, [r7, #0]
 80090bc:	7812      	ldrb	r2, [r2, #0]
 80090be:	0151      	lsls	r1, r2, #5
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	440a      	add	r2, r1
 80090c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	7812      	ldrb	r2, [r2, #0]
 80090e2:	0151      	lsls	r1, r2, #5
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	440a      	add	r2, r1
 80090e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	3301      	adds	r3, #1
 80090f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80090fe:	4293      	cmp	r3, r2
 8009100:	d902      	bls.n	8009108 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	75fb      	strb	r3, [r7, #23]
          break;
 8009106:	e00c      	b.n	8009122 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	4413      	add	r3, r2
 8009112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800911c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009120:	d0e7      	beq.n	80090f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009122:	7dfb      	ldrb	r3, [r7, #23]
}
 8009124:	4618      	mov	r0, r3
 8009126:	371c      	adds	r7, #28
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009130:	b480      	push	{r7}
 8009132:	b089      	sub	sp, #36	; 0x24
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	4611      	mov	r1, r2
 800913c:	461a      	mov	r2, r3
 800913e:	460b      	mov	r3, r1
 8009140:	71fb      	strb	r3, [r7, #7]
 8009142:	4613      	mov	r3, r2
 8009144:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800914e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009152:	2b00      	cmp	r3, #0
 8009154:	d123      	bne.n	800919e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009156:	88bb      	ldrh	r3, [r7, #4]
 8009158:	3303      	adds	r3, #3
 800915a:	089b      	lsrs	r3, r3, #2
 800915c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800915e:	2300      	movs	r3, #0
 8009160:	61bb      	str	r3, [r7, #24]
 8009162:	e018      	b.n	8009196 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	031a      	lsls	r2, r3, #12
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	4413      	add	r3, r2
 800916c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009170:	461a      	mov	r2, r3
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	3301      	adds	r3, #1
 800917c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	3301      	adds	r3, #1
 8009182:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	3301      	adds	r3, #1
 8009188:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	3301      	adds	r3, #1
 800918e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	3301      	adds	r3, #1
 8009194:	61bb      	str	r3, [r7, #24]
 8009196:	69ba      	ldr	r2, [r7, #24]
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	429a      	cmp	r2, r3
 800919c:	d3e2      	bcc.n	8009164 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3724      	adds	r7, #36	; 0x24
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b08b      	sub	sp, #44	; 0x2c
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	4613      	mov	r3, r2
 80091b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80091c2:	88fb      	ldrh	r3, [r7, #6]
 80091c4:	089b      	lsrs	r3, r3, #2
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80091ca:	88fb      	ldrh	r3, [r7, #6]
 80091cc:	f003 0303 	and.w	r3, r3, #3
 80091d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80091d2:	2300      	movs	r3, #0
 80091d4:	623b      	str	r3, [r7, #32]
 80091d6:	e014      	b.n	8009202 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	3301      	adds	r3, #1
 80091e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	3301      	adds	r3, #1
 80091ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	3301      	adds	r3, #1
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	3301      	adds	r3, #1
 80091fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80091fc:	6a3b      	ldr	r3, [r7, #32]
 80091fe:	3301      	adds	r3, #1
 8009200:	623b      	str	r3, [r7, #32]
 8009202:	6a3a      	ldr	r2, [r7, #32]
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	429a      	cmp	r2, r3
 8009208:	d3e6      	bcc.n	80091d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800920a:	8bfb      	ldrh	r3, [r7, #30]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d01e      	beq.n	800924e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800921a:	461a      	mov	r2, r3
 800921c:	f107 0310 	add.w	r3, r7, #16
 8009220:	6812      	ldr	r2, [r2, #0]
 8009222:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	b2db      	uxtb	r3, r3
 800922a:	00db      	lsls	r3, r3, #3
 800922c:	fa22 f303 	lsr.w	r3, r2, r3
 8009230:	b2da      	uxtb	r2, r3
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	701a      	strb	r2, [r3, #0]
      i++;
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	3301      	adds	r3, #1
 800923a:	623b      	str	r3, [r7, #32]
      pDest++;
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	3301      	adds	r3, #1
 8009240:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009242:	8bfb      	ldrh	r3, [r7, #30]
 8009244:	3b01      	subs	r3, #1
 8009246:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009248:	8bfb      	ldrh	r3, [r7, #30]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1ea      	bne.n	8009224 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009250:	4618      	mov	r0, r3
 8009252:	372c      	adds	r7, #44	; 0x2c
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	785b      	ldrb	r3, [r3, #1]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d12c      	bne.n	80092d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	db12      	blt.n	80092b0 <USB_EPSetStall+0x54>
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00f      	beq.n	80092b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	0151      	lsls	r1, r2, #5
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	440a      	add	r2, r1
 80092a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	0151      	lsls	r1, r2, #5
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	440a      	add	r2, r1
 80092c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092ce:	6013      	str	r3, [r2, #0]
 80092d0:	e02b      	b.n	800932a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	015a      	lsls	r2, r3, #5
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	4413      	add	r3, r2
 80092da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	db12      	blt.n	800930a <USB_EPSetStall+0xae>
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00f      	beq.n	800930a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	0151      	lsls	r1, r2, #5
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	440a      	add	r2, r1
 8009300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009304:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009308:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	4413      	add	r3, r2
 8009312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	0151      	lsls	r1, r2, #5
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	440a      	add	r2, r1
 8009320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009328:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	785b      	ldrb	r3, [r3, #1]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d128      	bne.n	80093a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	0151      	lsls	r1, r2, #5
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	440a      	add	r2, r1
 800936a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800936e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009372:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	791b      	ldrb	r3, [r3, #4]
 8009378:	2b03      	cmp	r3, #3
 800937a:	d003      	beq.n	8009384 <USB_EPClearStall+0x4c>
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	791b      	ldrb	r3, [r3, #4]
 8009380:	2b02      	cmp	r3, #2
 8009382:	d138      	bne.n	80093f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	0151      	lsls	r1, r2, #5
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	440a      	add	r2, r1
 800939a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800939e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093a2:	6013      	str	r3, [r2, #0]
 80093a4:	e027      	b.n	80093f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	015a      	lsls	r2, r3, #5
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	4413      	add	r3, r2
 80093ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	0151      	lsls	r1, r2, #5
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	440a      	add	r2, r1
 80093bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	791b      	ldrb	r3, [r3, #4]
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d003      	beq.n	80093d6 <USB_EPClearStall+0x9e>
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	791b      	ldrb	r3, [r3, #4]
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	d10f      	bne.n	80093f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	015a      	lsls	r2, r3, #5
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	4413      	add	r3, r2
 80093de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	0151      	lsls	r1, r2, #5
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	440a      	add	r2, r1
 80093ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009422:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009426:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	011b      	lsls	r3, r3, #4
 8009434:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009438:	68f9      	ldr	r1, [r7, #12]
 800943a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800943e:	4313      	orrs	r3, r2
 8009440:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800946a:	f023 0303 	bic.w	r3, r3, #3
 800946e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800947e:	f023 0302 	bic.w	r3, r3, #2
 8009482:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009492:	b480      	push	{r7}
 8009494:	b085      	sub	sp, #20
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094ac:	f023 0303 	bic.w	r3, r3, #3
 80094b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094c0:	f043 0302 	orr.w	r3, r3, #2
 80094c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	4013      	ands	r3, r2
 80094ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80094ec:	68fb      	ldr	r3, [r7, #12]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b085      	sub	sp, #20
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009516:	69db      	ldr	r3, [r3, #28]
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	4013      	ands	r3, r2
 800951c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	0c1b      	lsrs	r3, r3, #16
}
 8009522:	4618      	mov	r0, r3
 8009524:	3714      	adds	r7, #20
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800952e:	b480      	push	{r7}
 8009530:	b085      	sub	sp, #20
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	4013      	ands	r3, r2
 8009550:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	b29b      	uxth	r3, r3
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009562:	b480      	push	{r7}
 8009564:	b085      	sub	sp, #20
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	460b      	mov	r3, r1
 800956c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009572:	78fb      	ldrb	r3, [r7, #3]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4413      	add	r3, r2
 800957a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	4013      	ands	r3, r2
 800958e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009590:	68bb      	ldr	r3, [r7, #8]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr

0800959e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800959e:	b480      	push	{r7}
 80095a0:	b087      	sub	sp, #28
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	460b      	mov	r3, r1
 80095a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80095c2:	78fb      	ldrb	r3, [r7, #3]
 80095c4:	f003 030f 	and.w	r3, r3, #15
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	fa22 f303 	lsr.w	r3, r2, r3
 80095ce:	01db      	lsls	r3, r3, #7
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80095d8:	78fb      	ldrb	r3, [r7, #3]
 80095da:	015a      	lsls	r2, r3, #5
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	4413      	add	r3, r2
 80095e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	4013      	ands	r3, r2
 80095ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80095ec:	68bb      	ldr	r3, [r7, #8]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	371c      	adds	r7, #28
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b083      	sub	sp, #12
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	f003 0301 	and.w	r3, r3, #1
}
 800960a:	4618      	mov	r0, r3
 800960c:	370c      	adds	r7, #12
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
	...

08009618 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009632:	4619      	mov	r1, r3
 8009634:	4b09      	ldr	r3, [pc, #36]	; (800965c <USB_ActivateSetup+0x44>)
 8009636:	4013      	ands	r3, r2
 8009638:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800964c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	fffff800 	.word	0xfffff800

08009660 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009660:	b480      	push	{r7}
 8009662:	b087      	sub	sp, #28
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	460b      	mov	r3, r1
 800966a:	607a      	str	r2, [r7, #4]
 800966c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	333c      	adds	r3, #60	; 0x3c
 8009676:	3304      	adds	r3, #4
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	4a26      	ldr	r2, [pc, #152]	; (8009718 <USB_EP0_OutStart+0xb8>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d90a      	bls.n	800969a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009690:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009694:	d101      	bne.n	800969a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	e037      	b.n	800970a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a0:	461a      	mov	r2, r3
 80096a2:	2300      	movs	r3, #0
 80096a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c0:	691b      	ldr	r3, [r3, #16]
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096c8:	f043 0318 	orr.w	r3, r3, #24
 80096cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80096e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80096e2:	7afb      	ldrb	r3, [r7, #11]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d10f      	bne.n	8009708 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ee:	461a      	mov	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009702:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009706:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	371c      	adds	r7, #28
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	4f54300a 	.word	0x4f54300a

0800971c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009724:	2300      	movs	r3, #0
 8009726:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	3301      	adds	r3, #1
 800972c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	4a13      	ldr	r2, [pc, #76]	; (8009780 <USB_CoreReset+0x64>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d901      	bls.n	800973a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	e01b      	b.n	8009772 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	2b00      	cmp	r3, #0
 8009740:	daf2      	bge.n	8009728 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	f043 0201 	orr.w	r2, r3, #1
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	3301      	adds	r3, #1
 8009756:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	4a09      	ldr	r2, [pc, #36]	; (8009780 <USB_CoreReset+0x64>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d901      	bls.n	8009764 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	e006      	b.n	8009772 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	2b01      	cmp	r3, #1
 800976e:	d0f0      	beq.n	8009752 <USB_CoreReset+0x36>

  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	00030d40 	.word	0x00030d40

08009784 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009788:	4904      	ldr	r1, [pc, #16]	; (800979c <MX_FATFS_Init+0x18>)
 800978a:	4805      	ldr	r0, [pc, #20]	; (80097a0 <MX_FATFS_Init+0x1c>)
 800978c:	f005 fa82 	bl	800ec94 <FATFS_LinkDriver>
 8009790:	4603      	mov	r3, r0
 8009792:	461a      	mov	r2, r3
 8009794:	4b03      	ldr	r3, [pc, #12]	; (80097a4 <MX_FATFS_Init+0x20>)
 8009796:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009798:	bf00      	nop
 800979a:	bd80      	pop	{r7, pc}
 800979c:	20002e44 	.word	0x20002e44
 80097a0:	08011098 	.word	0x08011098
 80097a4:	20002e40 	.word	0x20002e40

080097a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80097a8:	b480      	push	{r7}
 80097aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80097ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80097c2:	f000 f888 	bl	80098d6 <BSP_SD_IsDetected>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d001      	beq.n	80097d0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80097cc:	2302      	movs	r3, #2
 80097ce:	e005      	b.n	80097dc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80097d0:	4804      	ldr	r0, [pc, #16]	; (80097e4 <BSP_SD_Init+0x2c>)
 80097d2:	f7fc f845 	bl	8005860 <HAL_SD_Init>
 80097d6:	4603      	mov	r3, r0
 80097d8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80097da:	79fb      	ldrb	r3, [r7, #7]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	200001ac 	.word	0x200001ac

080097e8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	68f9      	ldr	r1, [r7, #12]
 80097fe:	4806      	ldr	r0, [pc, #24]	; (8009818 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009800:	f7fc f8e6 	bl	80059d0 <HAL_SD_ReadBlocks_DMA>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800980e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3718      	adds	r7, #24
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	200001ac 	.word	0x200001ac

0800981c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	68f9      	ldr	r1, [r7, #12]
 8009832:	4806      	ldr	r0, [pc, #24]	; (800984c <BSP_SD_WriteBlocks_DMA+0x30>)
 8009834:	f7fc f9ae 	bl	8005b94 <HAL_SD_WriteBlocks_DMA>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009842:	7dfb      	ldrb	r3, [r7, #23]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3718      	adds	r7, #24
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	200001ac 	.word	0x200001ac

08009850 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009854:	4805      	ldr	r0, [pc, #20]	; (800986c <BSP_SD_GetCardState+0x1c>)
 8009856:	f7fc fdd3 	bl	8006400 <HAL_SD_GetCardState>
 800985a:	4603      	mov	r3, r0
 800985c:	2b04      	cmp	r3, #4
 800985e:	bf14      	ite	ne
 8009860:	2301      	movne	r3, #1
 8009862:	2300      	moveq	r3, #0
 8009864:	b2db      	uxtb	r3, r3
}
 8009866:	4618      	mov	r0, r3
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	200001ac 	.word	0x200001ac

08009870 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009878:	6879      	ldr	r1, [r7, #4]
 800987a:	4803      	ldr	r0, [pc, #12]	; (8009888 <BSP_SD_GetCardInfo+0x18>)
 800987c:	f7fc fd94 	bl	80063a8 <HAL_SD_GetCardInfo>
}
 8009880:	bf00      	nop
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	200001ac 	.word	0x200001ac

0800988c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009894:	f000 f818 	bl	80098c8 <BSP_SD_AbortCallback>
}
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80098a8:	f000 f9a8 	bl	8009bfc <BSP_SD_WriteCpltCallback>
}
 80098ac:	bf00      	nop
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80098bc:	f000 f9aa 	bl	8009c14 <BSP_SD_ReadCpltCallback>
}
 80098c0:	bf00      	nop
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80098c8:	b480      	push	{r7}
 80098ca:	af00      	add	r7, sp, #0

}
 80098cc:	bf00      	nop
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b082      	sub	sp, #8
 80098da:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80098dc:	2301      	movs	r3, #1
 80098de:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80098e0:	f000 f80c 	bl	80098fc <BSP_PlatformIsDetected>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80098ea:	2300      	movs	r3, #0
 80098ec:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80098ee:	79fb      	ldrb	r3, [r7, #7]
 80098f0:	b2db      	uxtb	r3, r3
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
	...

080098fc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009902:	2301      	movs	r3, #1
 8009904:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8009906:	2104      	movs	r1, #4
 8009908:	4806      	ldr	r0, [pc, #24]	; (8009924 <BSP_PlatformIsDetected+0x28>)
 800990a:	f7f9 fb9f 	bl	800304c <HAL_GPIO_ReadPin>
 800990e:	4603      	mov	r3, r0
 8009910:	2b01      	cmp	r3, #1
 8009912:	d001      	beq.n	8009918 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009914:	2300      	movs	r3, #0
 8009916:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009918:	79fb      	ldrb	r3, [r7, #7]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	40021800 	.word	0x40021800

08009928 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009930:	f7f7 ff02 	bl	8001738 <HAL_GetTick>
 8009934:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009936:	e006      	b.n	8009946 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009938:	f7ff ff8a 	bl	8009850 <BSP_SD_GetCardState>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d101      	bne.n	8009946 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009942:	2300      	movs	r3, #0
 8009944:	e009      	b.n	800995a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009946:	f7f7 fef7 	bl	8001738 <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	429a      	cmp	r2, r3
 8009954:	d8f0      	bhi.n	8009938 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	4603      	mov	r3, r0
 800996c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800996e:	4b0b      	ldr	r3, [pc, #44]	; (800999c <SD_CheckStatus+0x38>)
 8009970:	2201      	movs	r2, #1
 8009972:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009974:	f7ff ff6c 	bl	8009850 <BSP_SD_GetCardState>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d107      	bne.n	800998e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800997e:	4b07      	ldr	r3, [pc, #28]	; (800999c <SD_CheckStatus+0x38>)
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	b2db      	uxtb	r3, r3
 8009984:	f023 0301 	bic.w	r3, r3, #1
 8009988:	b2da      	uxtb	r2, r3
 800998a:	4b04      	ldr	r3, [pc, #16]	; (800999c <SD_CheckStatus+0x38>)
 800998c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800998e:	4b03      	ldr	r3, [pc, #12]	; (800999c <SD_CheckStatus+0x38>)
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	b2db      	uxtb	r3, r3
}
 8009994:	4618      	mov	r0, r3
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	20000009 	.word	0x20000009

080099a0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80099aa:	f7ff ff05 	bl	80097b8 <BSP_SD_Init>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d107      	bne.n	80099c4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80099b4:	79fb      	ldrb	r3, [r7, #7]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7ff ffd4 	bl	8009964 <SD_CheckStatus>
 80099bc:	4603      	mov	r3, r0
 80099be:	461a      	mov	r2, r3
 80099c0:	4b04      	ldr	r3, [pc, #16]	; (80099d4 <SD_initialize+0x34>)
 80099c2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80099c4:	4b03      	ldr	r3, [pc, #12]	; (80099d4 <SD_initialize+0x34>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	b2db      	uxtb	r3, r3
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20000009 	.word	0x20000009

080099d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80099e2:	79fb      	ldrb	r3, [r7, #7]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7ff ffbd 	bl	8009964 <SD_CheckStatus>
 80099ea:	4603      	mov	r3, r0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60b9      	str	r1, [r7, #8]
 80099fc:	607a      	str	r2, [r7, #4]
 80099fe:	603b      	str	r3, [r7, #0]
 8009a00:	4603      	mov	r3, r0
 8009a02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009a08:	f247 5030 	movw	r0, #30000	; 0x7530
 8009a0c:	f7ff ff8c 	bl	8009928 <SD_CheckStatusWithTimeout>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	da01      	bge.n	8009a1a <SD_read+0x26>
  {
    return res;
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	e03b      	b.n	8009a92 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	6879      	ldr	r1, [r7, #4]
 8009a1e:	68b8      	ldr	r0, [r7, #8]
 8009a20:	f7ff fee2 	bl	80097e8 <BSP_SD_ReadBlocks_DMA>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d132      	bne.n	8009a90 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009a2a:	4b1c      	ldr	r3, [pc, #112]	; (8009a9c <SD_read+0xa8>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009a30:	f7f7 fe82 	bl	8001738 <HAL_GetTick>
 8009a34:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009a36:	bf00      	nop
 8009a38:	4b18      	ldr	r3, [pc, #96]	; (8009a9c <SD_read+0xa8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d108      	bne.n	8009a52 <SD_read+0x5e>
 8009a40:	f7f7 fe7a 	bl	8001738 <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	f247 522f 	movw	r2, #29999	; 0x752f
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d9f2      	bls.n	8009a38 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009a52:	4b12      	ldr	r3, [pc, #72]	; (8009a9c <SD_read+0xa8>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d102      	bne.n	8009a60 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	75fb      	strb	r3, [r7, #23]
 8009a5e:	e017      	b.n	8009a90 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009a60:	4b0e      	ldr	r3, [pc, #56]	; (8009a9c <SD_read+0xa8>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009a66:	f7f7 fe67 	bl	8001738 <HAL_GetTick>
 8009a6a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009a6c:	e007      	b.n	8009a7e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009a6e:	f7ff feef 	bl	8009850 <BSP_SD_GetCardState>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d102      	bne.n	8009a7e <SD_read+0x8a>
          {
            res = RES_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009a7c:	e008      	b.n	8009a90 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009a7e:	f7f7 fe5b 	bl	8001738 <HAL_GetTick>
 8009a82:	4602      	mov	r2, r0
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	f247 522f 	movw	r2, #29999	; 0x752f
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d9ee      	bls.n	8009a6e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3718      	adds	r7, #24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	200032b0 	.word	0x200032b0

08009aa0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60b9      	str	r1, [r7, #8]
 8009aa8:	607a      	str	r2, [r7, #4]
 8009aaa:	603b      	str	r3, [r7, #0]
 8009aac:	4603      	mov	r3, r0
 8009aae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009ab4:	4b24      	ldr	r3, [pc, #144]	; (8009b48 <SD_write+0xa8>)
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009aba:	f247 5030 	movw	r0, #30000	; 0x7530
 8009abe:	f7ff ff33 	bl	8009928 <SD_CheckStatusWithTimeout>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	da01      	bge.n	8009acc <SD_write+0x2c>
  {
    return res;
 8009ac8:	7dfb      	ldrb	r3, [r7, #23]
 8009aca:	e038      	b.n	8009b3e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009acc:	683a      	ldr	r2, [r7, #0]
 8009ace:	6879      	ldr	r1, [r7, #4]
 8009ad0:	68b8      	ldr	r0, [r7, #8]
 8009ad2:	f7ff fea3 	bl	800981c <BSP_SD_WriteBlocks_DMA>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d12f      	bne.n	8009b3c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009adc:	f7f7 fe2c 	bl	8001738 <HAL_GetTick>
 8009ae0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009ae2:	bf00      	nop
 8009ae4:	4b18      	ldr	r3, [pc, #96]	; (8009b48 <SD_write+0xa8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d108      	bne.n	8009afe <SD_write+0x5e>
 8009aec:	f7f7 fe24 	bl	8001738 <HAL_GetTick>
 8009af0:	4602      	mov	r2, r0
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	f247 522f 	movw	r2, #29999	; 0x752f
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d9f2      	bls.n	8009ae4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009afe:	4b12      	ldr	r3, [pc, #72]	; (8009b48 <SD_write+0xa8>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d102      	bne.n	8009b0c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	75fb      	strb	r3, [r7, #23]
 8009b0a:	e017      	b.n	8009b3c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009b0c:	4b0e      	ldr	r3, [pc, #56]	; (8009b48 <SD_write+0xa8>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009b12:	f7f7 fe11 	bl	8001738 <HAL_GetTick>
 8009b16:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009b18:	e007      	b.n	8009b2a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b1a:	f7ff fe99 	bl	8009850 <BSP_SD_GetCardState>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d102      	bne.n	8009b2a <SD_write+0x8a>
          {
            res = RES_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	75fb      	strb	r3, [r7, #23]
            break;
 8009b28:	e008      	b.n	8009b3c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009b2a:	f7f7 fe05 	bl	8001738 <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	f247 522f 	movw	r2, #29999	; 0x752f
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d9ee      	bls.n	8009b1a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	200032ac 	.word	0x200032ac

08009b4c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b08c      	sub	sp, #48	; 0x30
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4603      	mov	r3, r0
 8009b54:	603a      	str	r2, [r7, #0]
 8009b56:	71fb      	strb	r3, [r7, #7]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009b62:	4b25      	ldr	r3, [pc, #148]	; (8009bf8 <SD_ioctl+0xac>)
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <SD_ioctl+0x28>
 8009b70:	2303      	movs	r3, #3
 8009b72:	e03c      	b.n	8009bee <SD_ioctl+0xa2>

  switch (cmd)
 8009b74:	79bb      	ldrb	r3, [r7, #6]
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	d834      	bhi.n	8009be4 <SD_ioctl+0x98>
 8009b7a:	a201      	add	r2, pc, #4	; (adr r2, 8009b80 <SD_ioctl+0x34>)
 8009b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b80:	08009b91 	.word	0x08009b91
 8009b84:	08009b99 	.word	0x08009b99
 8009b88:	08009bb1 	.word	0x08009bb1
 8009b8c:	08009bcb 	.word	0x08009bcb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b96:	e028      	b.n	8009bea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b98:	f107 030c 	add.w	r3, r7, #12
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff fe67 	bl	8009870 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009bae:	e01c      	b.n	8009bea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009bb0:	f107 030c 	add.w	r3, r7, #12
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7ff fe5b 	bl	8009870 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009bc8:	e00f      	b.n	8009bea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009bca:	f107 030c 	add.w	r3, r7, #12
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7ff fe4e 	bl	8009870 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd6:	0a5a      	lsrs	r2, r3, #9
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009be2:	e002      	b.n	8009bea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009be4:	2304      	movs	r3, #4
 8009be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009bea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3730      	adds	r7, #48	; 0x30
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20000009 	.word	0x20000009

08009bfc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009c00:	4b03      	ldr	r3, [pc, #12]	; (8009c10 <BSP_SD_WriteCpltCallback+0x14>)
 8009c02:	2201      	movs	r2, #1
 8009c04:	601a      	str	r2, [r3, #0]
}
 8009c06:	bf00      	nop
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	200032ac 	.word	0x200032ac

08009c14 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009c14:	b480      	push	{r7}
 8009c16:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009c18:	4b03      	ldr	r3, [pc, #12]	; (8009c28 <BSP_SD_ReadCpltCallback+0x14>)
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	601a      	str	r2, [r3, #0]
}
 8009c1e:	bf00      	nop
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr
 8009c28:	200032b0 	.word	0x200032b0

08009c2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009c38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009c3c:	f005 fe86 	bl	800f94c <malloc>
 8009c40:	4603      	mov	r3, r0
 8009c42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d109      	bne.n	8009c5e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	32b0      	adds	r2, #176	; 0xb0
 8009c54:	2100      	movs	r1, #0
 8009c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	e0d4      	b.n	8009e08 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009c5e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009c62:	2100      	movs	r1, #0
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f006 f92c 	bl	800fec2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	32b0      	adds	r2, #176	; 0xb0
 8009c74:	68f9      	ldr	r1, [r7, #12]
 8009c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	32b0      	adds	r2, #176	; 0xb0
 8009c84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	7c1b      	ldrb	r3, [r3, #16]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d138      	bne.n	8009d08 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c96:	4b5e      	ldr	r3, [pc, #376]	; (8009e10 <USBD_CDC_Init+0x1e4>)
 8009c98:	7819      	ldrb	r1, [r3, #0]
 8009c9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f005 fcb0 	bl	800f606 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009ca6:	4b5a      	ldr	r3, [pc, #360]	; (8009e10 <USBD_CDC_Init+0x1e4>)
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	f003 020f 	and.w	r2, r3, #15
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4413      	add	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	440b      	add	r3, r1
 8009cba:	3324      	adds	r3, #36	; 0x24
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009cc0:	4b54      	ldr	r3, [pc, #336]	; (8009e14 <USBD_CDC_Init+0x1e8>)
 8009cc2:	7819      	ldrb	r1, [r3, #0]
 8009cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cc8:	2202      	movs	r2, #2
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f005 fc9b 	bl	800f606 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009cd0:	4b50      	ldr	r3, [pc, #320]	; (8009e14 <USBD_CDC_Init+0x1e8>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	f003 020f 	and.w	r2, r3, #15
 8009cd8:	6879      	ldr	r1, [r7, #4]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4413      	add	r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	440b      	add	r3, r1
 8009ce4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ce8:	2201      	movs	r2, #1
 8009cea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009cec:	4b4a      	ldr	r3, [pc, #296]	; (8009e18 <USBD_CDC_Init+0x1ec>)
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	f003 020f 	and.w	r2, r3, #15
 8009cf4:	6879      	ldr	r1, [r7, #4]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	440b      	add	r3, r1
 8009d00:	3326      	adds	r3, #38	; 0x26
 8009d02:	2210      	movs	r2, #16
 8009d04:	801a      	strh	r2, [r3, #0]
 8009d06:	e035      	b.n	8009d74 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009d08:	4b41      	ldr	r3, [pc, #260]	; (8009e10 <USBD_CDC_Init+0x1e4>)
 8009d0a:	7819      	ldrb	r1, [r3, #0]
 8009d0c:	2340      	movs	r3, #64	; 0x40
 8009d0e:	2202      	movs	r2, #2
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f005 fc78 	bl	800f606 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009d16:	4b3e      	ldr	r3, [pc, #248]	; (8009e10 <USBD_CDC_Init+0x1e4>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	f003 020f 	and.w	r2, r3, #15
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	4613      	mov	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	440b      	add	r3, r1
 8009d2a:	3324      	adds	r3, #36	; 0x24
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009d30:	4b38      	ldr	r3, [pc, #224]	; (8009e14 <USBD_CDC_Init+0x1e8>)
 8009d32:	7819      	ldrb	r1, [r3, #0]
 8009d34:	2340      	movs	r3, #64	; 0x40
 8009d36:	2202      	movs	r2, #2
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f005 fc64 	bl	800f606 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009d3e:	4b35      	ldr	r3, [pc, #212]	; (8009e14 <USBD_CDC_Init+0x1e8>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	f003 020f 	and.w	r2, r3, #15
 8009d46:	6879      	ldr	r1, [r7, #4]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	440b      	add	r3, r1
 8009d52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d56:	2201      	movs	r2, #1
 8009d58:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009d5a:	4b2f      	ldr	r3, [pc, #188]	; (8009e18 <USBD_CDC_Init+0x1ec>)
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	f003 020f 	and.w	r2, r3, #15
 8009d62:	6879      	ldr	r1, [r7, #4]
 8009d64:	4613      	mov	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	440b      	add	r3, r1
 8009d6e:	3326      	adds	r3, #38	; 0x26
 8009d70:	2210      	movs	r2, #16
 8009d72:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d74:	4b28      	ldr	r3, [pc, #160]	; (8009e18 <USBD_CDC_Init+0x1ec>)
 8009d76:	7819      	ldrb	r1, [r3, #0]
 8009d78:	2308      	movs	r3, #8
 8009d7a:	2203      	movs	r2, #3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f005 fc42 	bl	800f606 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009d82:	4b25      	ldr	r3, [pc, #148]	; (8009e18 <USBD_CDC_Init+0x1ec>)
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	f003 020f 	and.w	r2, r3, #15
 8009d8a:	6879      	ldr	r1, [r7, #4]
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	440b      	add	r3, r1
 8009d96:	3324      	adds	r3, #36	; 0x24
 8009d98:	2201      	movs	r2, #1
 8009d9a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	33b0      	adds	r3, #176	; 0xb0
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d101      	bne.n	8009dd6 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	e018      	b.n	8009e08 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	7c1b      	ldrb	r3, [r3, #16]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d10a      	bne.n	8009df4 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009dde:	4b0d      	ldr	r3, [pc, #52]	; (8009e14 <USBD_CDC_Init+0x1e8>)
 8009de0:	7819      	ldrb	r1, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f005 fcf9 	bl	800f7e4 <USBD_LL_PrepareReceive>
 8009df2:	e008      	b.n	8009e06 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009df4:	4b07      	ldr	r3, [pc, #28]	; (8009e14 <USBD_CDC_Init+0x1e8>)
 8009df6:	7819      	ldrb	r1, [r3, #0]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009dfe:	2340      	movs	r3, #64	; 0x40
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f005 fcef 	bl	800f7e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	20000093 	.word	0x20000093
 8009e14:	20000094 	.word	0x20000094
 8009e18:	20000095 	.word	0x20000095

08009e1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009e28:	4b3a      	ldr	r3, [pc, #232]	; (8009f14 <USBD_CDC_DeInit+0xf8>)
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f005 fc0f 	bl	800f652 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009e34:	4b37      	ldr	r3, [pc, #220]	; (8009f14 <USBD_CDC_DeInit+0xf8>)
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	f003 020f 	and.w	r2, r3, #15
 8009e3c:	6879      	ldr	r1, [r7, #4]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	4413      	add	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	440b      	add	r3, r1
 8009e48:	3324      	adds	r3, #36	; 0x24
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009e4e:	4b32      	ldr	r3, [pc, #200]	; (8009f18 <USBD_CDC_DeInit+0xfc>)
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f005 fbfc 	bl	800f652 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009e5a:	4b2f      	ldr	r3, [pc, #188]	; (8009f18 <USBD_CDC_DeInit+0xfc>)
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	f003 020f 	and.w	r2, r3, #15
 8009e62:	6879      	ldr	r1, [r7, #4]
 8009e64:	4613      	mov	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	4413      	add	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	440b      	add	r3, r1
 8009e6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e72:	2200      	movs	r2, #0
 8009e74:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009e76:	4b29      	ldr	r3, [pc, #164]	; (8009f1c <USBD_CDC_DeInit+0x100>)
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f005 fbe8 	bl	800f652 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009e82:	4b26      	ldr	r3, [pc, #152]	; (8009f1c <USBD_CDC_DeInit+0x100>)
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	f003 020f 	and.w	r2, r3, #15
 8009e8a:	6879      	ldr	r1, [r7, #4]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	440b      	add	r3, r1
 8009e96:	3324      	adds	r3, #36	; 0x24
 8009e98:	2200      	movs	r2, #0
 8009e9a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009e9c:	4b1f      	ldr	r3, [pc, #124]	; (8009f1c <USBD_CDC_DeInit+0x100>)
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	f003 020f 	and.w	r2, r3, #15
 8009ea4:	6879      	ldr	r1, [r7, #4]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	440b      	add	r3, r1
 8009eb0:	3326      	adds	r3, #38	; 0x26
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	32b0      	adds	r2, #176	; 0xb0
 8009ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d01f      	beq.n	8009f08 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	33b0      	adds	r3, #176	; 0xb0
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	32b0      	adds	r2, #176	; 0xb0
 8009ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f005 fd36 	bl	800f95c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	32b0      	adds	r2, #176	; 0xb0
 8009efa:	2100      	movs	r1, #0
 8009efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	20000093 	.word	0x20000093
 8009f18:	20000094 	.word	0x20000094
 8009f1c:	20000095 	.word	0x20000095

08009f20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	32b0      	adds	r2, #176	; 0xb0
 8009f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f42:	2300      	movs	r3, #0
 8009f44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e0bf      	b.n	800a0d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d050      	beq.n	8009ffe <USBD_CDC_Setup+0xde>
 8009f5c:	2b20      	cmp	r3, #32
 8009f5e:	f040 80af 	bne.w	800a0c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	88db      	ldrh	r3, [r3, #6]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d03a      	beq.n	8009fe0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	b25b      	sxtb	r3, r3
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	da1b      	bge.n	8009fac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	33b0      	adds	r3, #176	; 0xb0
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009f8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	88d2      	ldrh	r2, [r2, #6]
 8009f90:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	88db      	ldrh	r3, [r3, #6]
 8009f96:	2b07      	cmp	r3, #7
 8009f98:	bf28      	it	cs
 8009f9a:	2307      	movcs	r3, #7
 8009f9c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	89fa      	ldrh	r2, [r7, #14]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f001 fdad 	bl	800bb04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009faa:	e090      	b.n	800a0ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	785a      	ldrb	r2, [r3, #1]
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	88db      	ldrh	r3, [r3, #6]
 8009fba:	2b3f      	cmp	r3, #63	; 0x3f
 8009fbc:	d803      	bhi.n	8009fc6 <USBD_CDC_Setup+0xa6>
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	88db      	ldrh	r3, [r3, #6]
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	e000      	b.n	8009fc8 <USBD_CDC_Setup+0xa8>
 8009fc6:	2240      	movs	r2, #64	; 0x40
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009fce:	6939      	ldr	r1, [r7, #16]
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 fdbf 	bl	800bb5c <USBD_CtlPrepareRx>
      break;
 8009fde:	e076      	b.n	800a0ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	33b0      	adds	r3, #176	; 0xb0
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	7850      	ldrb	r0, [r2, #1]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	4798      	blx	r3
      break;
 8009ffc:	e067      	b.n	800a0ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	785b      	ldrb	r3, [r3, #1]
 800a002:	2b0b      	cmp	r3, #11
 800a004:	d851      	bhi.n	800a0aa <USBD_CDC_Setup+0x18a>
 800a006:	a201      	add	r2, pc, #4	; (adr r2, 800a00c <USBD_CDC_Setup+0xec>)
 800a008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00c:	0800a03d 	.word	0x0800a03d
 800a010:	0800a0b9 	.word	0x0800a0b9
 800a014:	0800a0ab 	.word	0x0800a0ab
 800a018:	0800a0ab 	.word	0x0800a0ab
 800a01c:	0800a0ab 	.word	0x0800a0ab
 800a020:	0800a0ab 	.word	0x0800a0ab
 800a024:	0800a0ab 	.word	0x0800a0ab
 800a028:	0800a0ab 	.word	0x0800a0ab
 800a02c:	0800a0ab 	.word	0x0800a0ab
 800a030:	0800a0ab 	.word	0x0800a0ab
 800a034:	0800a067 	.word	0x0800a067
 800a038:	0800a091 	.word	0x0800a091
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b03      	cmp	r3, #3
 800a046:	d107      	bne.n	800a058 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a048:	f107 030a 	add.w	r3, r7, #10
 800a04c:	2202      	movs	r2, #2
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f001 fd57 	bl	800bb04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a056:	e032      	b.n	800a0be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a058:	6839      	ldr	r1, [r7, #0]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f001 fce1 	bl	800ba22 <USBD_CtlError>
            ret = USBD_FAIL;
 800a060:	2303      	movs	r3, #3
 800a062:	75fb      	strb	r3, [r7, #23]
          break;
 800a064:	e02b      	b.n	800a0be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d107      	bne.n	800a082 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a072:	f107 030d 	add.w	r3, r7, #13
 800a076:	2201      	movs	r2, #1
 800a078:	4619      	mov	r1, r3
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f001 fd42 	bl	800bb04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a080:	e01d      	b.n	800a0be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f001 fccc 	bl	800ba22 <USBD_CtlError>
            ret = USBD_FAIL;
 800a08a:	2303      	movs	r3, #3
 800a08c:	75fb      	strb	r3, [r7, #23]
          break;
 800a08e:	e016      	b.n	800a0be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b03      	cmp	r3, #3
 800a09a:	d00f      	beq.n	800a0bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f001 fcbf 	bl	800ba22 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a0a8:	e008      	b.n	800a0bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a0aa:	6839      	ldr	r1, [r7, #0]
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f001 fcb8 	bl	800ba22 <USBD_CtlError>
          ret = USBD_FAIL;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	75fb      	strb	r3, [r7, #23]
          break;
 800a0b6:	e002      	b.n	800a0be <USBD_CDC_Setup+0x19e>
          break;
 800a0b8:	bf00      	nop
 800a0ba:	e008      	b.n	800a0ce <USBD_CDC_Setup+0x1ae>
          break;
 800a0bc:	bf00      	nop
      }
      break;
 800a0be:	e006      	b.n	800a0ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a0c0:	6839      	ldr	r1, [r7, #0]
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f001 fcad 	bl	800ba22 <USBD_CtlError>
      ret = USBD_FAIL;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a0cc:	bf00      	nop
  }

  return (uint8_t)ret;
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3718      	adds	r7, #24
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	32b0      	adds	r2, #176	; 0xb0
 800a0f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d101      	bne.n	800a102 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a0fe:	2303      	movs	r3, #3
 800a100:	e065      	b.n	800a1ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	32b0      	adds	r2, #176	; 0xb0
 800a10c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a110:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a112:	78fb      	ldrb	r3, [r7, #3]
 800a114:	f003 020f 	and.w	r2, r3, #15
 800a118:	6879      	ldr	r1, [r7, #4]
 800a11a:	4613      	mov	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	440b      	add	r3, r1
 800a124:	3318      	adds	r3, #24
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d02f      	beq.n	800a18c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a12c:	78fb      	ldrb	r3, [r7, #3]
 800a12e:	f003 020f 	and.w	r2, r3, #15
 800a132:	6879      	ldr	r1, [r7, #4]
 800a134:	4613      	mov	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4413      	add	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	440b      	add	r3, r1
 800a13e:	3318      	adds	r3, #24
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	78fb      	ldrb	r3, [r7, #3]
 800a144:	f003 010f 	and.w	r1, r3, #15
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	460b      	mov	r3, r1
 800a14c:	00db      	lsls	r3, r3, #3
 800a14e:	440b      	add	r3, r1
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4403      	add	r3, r0
 800a154:	3348      	adds	r3, #72	; 0x48
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	fbb2 f1f3 	udiv	r1, r2, r3
 800a15c:	fb01 f303 	mul.w	r3, r1, r3
 800a160:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a162:	2b00      	cmp	r3, #0
 800a164:	d112      	bne.n	800a18c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a166:	78fb      	ldrb	r3, [r7, #3]
 800a168:	f003 020f 	and.w	r2, r3, #15
 800a16c:	6879      	ldr	r1, [r7, #4]
 800a16e:	4613      	mov	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	440b      	add	r3, r1
 800a178:	3318      	adds	r3, #24
 800a17a:	2200      	movs	r2, #0
 800a17c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a17e:	78f9      	ldrb	r1, [r7, #3]
 800a180:	2300      	movs	r3, #0
 800a182:	2200      	movs	r2, #0
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f005 fb0c 	bl	800f7a2 <USBD_LL_Transmit>
 800a18a:	e01f      	b.n	800a1cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2200      	movs	r2, #0
 800a190:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	33b0      	adds	r3, #176	; 0xb0
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	4413      	add	r3, r2
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d010      	beq.n	800a1cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	33b0      	adds	r3, #176	; 0xb0
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a1c8:	78fa      	ldrb	r2, [r7, #3]
 800a1ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b084      	sub	sp, #16
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
 800a1de:	460b      	mov	r3, r1
 800a1e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	32b0      	adds	r2, #176	; 0xb0
 800a1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	32b0      	adds	r2, #176	; 0xb0
 800a1fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a204:	2303      	movs	r3, #3
 800a206:	e01a      	b.n	800a23e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a208:	78fb      	ldrb	r3, [r7, #3]
 800a20a:	4619      	mov	r1, r3
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f005 fb0a 	bl	800f826 <USBD_LL_GetRxDataSize>
 800a212:	4602      	mov	r2, r0
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	33b0      	adds	r3, #176	; 0xb0
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4413      	add	r3, r2
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a238:	4611      	mov	r1, r2
 800a23a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b084      	sub	sp, #16
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	32b0      	adds	r2, #176	; 0xb0
 800a258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a25c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a264:	2303      	movs	r3, #3
 800a266:	e025      	b.n	800a2b4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	33b0      	adds	r3, #176	; 0xb0
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	4413      	add	r3, r2
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d01a      	beq.n	800a2b2 <USBD_CDC_EP0_RxReady+0x6c>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a282:	2bff      	cmp	r3, #255	; 0xff
 800a284:	d015      	beq.n	800a2b2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	33b0      	adds	r3, #176	; 0xb0
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a29e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a2a6:	b292      	uxth	r2, r2
 800a2a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	22ff      	movs	r2, #255	; 0xff
 800a2ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2c4:	2182      	movs	r1, #130	; 0x82
 800a2c6:	4818      	ldr	r0, [pc, #96]	; (800a328 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a2c8:	f000 fd49 	bl	800ad5e <USBD_GetEpDesc>
 800a2cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2ce:	2101      	movs	r1, #1
 800a2d0:	4815      	ldr	r0, [pc, #84]	; (800a328 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a2d2:	f000 fd44 	bl	800ad5e <USBD_GetEpDesc>
 800a2d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2d8:	2181      	movs	r1, #129	; 0x81
 800a2da:	4813      	ldr	r0, [pc, #76]	; (800a328 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a2dc:	f000 fd3f 	bl	800ad5e <USBD_GetEpDesc>
 800a2e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d002      	beq.n	800a2ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	2210      	movs	r2, #16
 800a2ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d006      	beq.n	800a302 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2fc:	711a      	strb	r2, [r3, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d006      	beq.n	800a316 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a310:	711a      	strb	r2, [r3, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2243      	movs	r2, #67	; 0x43
 800a31a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a31c:	4b02      	ldr	r3, [pc, #8]	; (800a328 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	20000050 	.word	0x20000050

0800a32c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b086      	sub	sp, #24
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a334:	2182      	movs	r1, #130	; 0x82
 800a336:	4818      	ldr	r0, [pc, #96]	; (800a398 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a338:	f000 fd11 	bl	800ad5e <USBD_GetEpDesc>
 800a33c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a33e:	2101      	movs	r1, #1
 800a340:	4815      	ldr	r0, [pc, #84]	; (800a398 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a342:	f000 fd0c 	bl	800ad5e <USBD_GetEpDesc>
 800a346:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a348:	2181      	movs	r1, #129	; 0x81
 800a34a:	4813      	ldr	r0, [pc, #76]	; (800a398 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a34c:	f000 fd07 	bl	800ad5e <USBD_GetEpDesc>
 800a350:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d002      	beq.n	800a35e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	2210      	movs	r2, #16
 800a35c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d006      	beq.n	800a372 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	2200      	movs	r2, #0
 800a368:	711a      	strb	r2, [r3, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f042 0202 	orr.w	r2, r2, #2
 800a370:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d006      	beq.n	800a386 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	711a      	strb	r2, [r3, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f042 0202 	orr.w	r2, r2, #2
 800a384:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2243      	movs	r2, #67	; 0x43
 800a38a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a38c:	4b02      	ldr	r3, [pc, #8]	; (800a398 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	20000050 	.word	0x20000050

0800a39c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a3a4:	2182      	movs	r1, #130	; 0x82
 800a3a6:	4818      	ldr	r0, [pc, #96]	; (800a408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3a8:	f000 fcd9 	bl	800ad5e <USBD_GetEpDesc>
 800a3ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	4815      	ldr	r0, [pc, #84]	; (800a408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3b2:	f000 fcd4 	bl	800ad5e <USBD_GetEpDesc>
 800a3b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a3b8:	2181      	movs	r1, #129	; 0x81
 800a3ba:	4813      	ldr	r0, [pc, #76]	; (800a408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3bc:	f000 fccf 	bl	800ad5e <USBD_GetEpDesc>
 800a3c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d002      	beq.n	800a3ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	2210      	movs	r2, #16
 800a3cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d006      	beq.n	800a3e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3dc:	711a      	strb	r2, [r3, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d006      	beq.n	800a3f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3f0:	711a      	strb	r2, [r3, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2243      	movs	r2, #67	; 0x43
 800a3fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3fc:	4b02      	ldr	r3, [pc, #8]	; (800a408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	20000050 	.word	0x20000050

0800a40c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	220a      	movs	r2, #10
 800a418:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a41a:	4b03      	ldr	r3, [pc, #12]	; (800a428 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	2000000c 	.word	0x2000000c

0800a42c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d101      	bne.n	800a440 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a43c:	2303      	movs	r3, #3
 800a43e:	e009      	b.n	800a454 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	33b0      	adds	r3, #176	; 0xb0
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a460:	b480      	push	{r7}
 800a462:	b087      	sub	sp, #28
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	32b0      	adds	r2, #176	; 0xb0
 800a476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a47a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a482:	2303      	movs	r3, #3
 800a484:	e008      	b.n	800a498 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	371c      	adds	r7, #28
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	32b0      	adds	r2, #176	; 0xb0
 800a4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d101      	bne.n	800a4c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e004      	b.n	800a4d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
	...

0800a4e0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	32b0      	adds	r2, #176	; 0xb0
 800a4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a502:	2303      	movs	r3, #3
 800a504:	e025      	b.n	800a552 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d11f      	bne.n	800a550 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	2201      	movs	r2, #1
 800a514:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a518:	4b10      	ldr	r3, [pc, #64]	; (800a55c <USBD_CDC_TransmitPacket+0x7c>)
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	f003 020f 	and.w	r2, r3, #15
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	4613      	mov	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4403      	add	r3, r0
 800a532:	3318      	adds	r3, #24
 800a534:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a536:	4b09      	ldr	r3, [pc, #36]	; (800a55c <USBD_CDC_TransmitPacket+0x7c>)
 800a538:	7819      	ldrb	r1, [r3, #0]
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f005 f92b 	bl	800f7a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a54c:	2300      	movs	r3, #0
 800a54e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a550:	7bfb      	ldrb	r3, [r7, #15]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	20000093 	.word	0x20000093

0800a560 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	32b0      	adds	r2, #176	; 0xb0
 800a572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a576:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	32b0      	adds	r2, #176	; 0xb0
 800a582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d101      	bne.n	800a58e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a58a:	2303      	movs	r3, #3
 800a58c:	e018      	b.n	800a5c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	7c1b      	ldrb	r3, [r3, #16]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d10a      	bne.n	800a5ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a596:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <USBD_CDC_ReceivePacket+0x68>)
 800a598:	7819      	ldrb	r1, [r3, #0]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f005 f91d 	bl	800f7e4 <USBD_LL_PrepareReceive>
 800a5aa:	e008      	b.n	800a5be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a5ac:	4b06      	ldr	r3, [pc, #24]	; (800a5c8 <USBD_CDC_ReceivePacket+0x68>)
 800a5ae:	7819      	ldrb	r1, [r3, #0]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5b6:	2340      	movs	r3, #64	; 0x40
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f005 f913 	bl	800f7e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	20000094 	.word	0x20000094

0800a5cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	e01f      	b.n	800a624 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	79fa      	ldrb	r2, [r7, #7]
 800a616:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f004 ff8d 	bl	800f538 <USBD_LL_Init>
 800a61e:	4603      	mov	r3, r0
 800a620:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a622:	7dfb      	ldrb	r3, [r7, #23]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3718      	adds	r7, #24
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a636:	2300      	movs	r3, #0
 800a638:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a640:	2303      	movs	r3, #3
 800a642:	e025      	b.n	800a690 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	32ae      	adds	r2, #174	; 0xae
 800a656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00f      	beq.n	800a680 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	32ae      	adds	r2, #174	; 0xae
 800a66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a670:	f107 020e 	add.w	r2, r7, #14
 800a674:	4610      	mov	r0, r2
 800a676:	4798      	blx	r3
 800a678:	4602      	mov	r2, r0
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a686:	1c5a      	adds	r2, r3, #1
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f004 ff95 	bl	800f5d0 <USBD_LL_Start>
 800a6a6:	4603      	mov	r3, r0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a6b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d009      	beq.n	800a6f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	78fa      	ldrb	r2, [r7, #3]
 800a6ea:	4611      	mov	r1, r2
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	4798      	blx	r3
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b084      	sub	sp, #16
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	460b      	mov	r3, r1
 800a708:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	78fa      	ldrb	r2, [r7, #3]
 800a718:	4611      	mov	r1, r2
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	4798      	blx	r3
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a724:	2303      	movs	r3, #3
 800a726:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a728:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	4618      	mov	r0, r3
 800a746:	f001 f932 	bl	800b9ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2201      	movs	r2, #1
 800a74e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a758:	461a      	mov	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a766:	f003 031f 	and.w	r3, r3, #31
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	d01a      	beq.n	800a7a4 <USBD_LL_SetupStage+0x72>
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d822      	bhi.n	800a7b8 <USBD_LL_SetupStage+0x86>
 800a772:	2b00      	cmp	r3, #0
 800a774:	d002      	beq.n	800a77c <USBD_LL_SetupStage+0x4a>
 800a776:	2b01      	cmp	r3, #1
 800a778:	d00a      	beq.n	800a790 <USBD_LL_SetupStage+0x5e>
 800a77a:	e01d      	b.n	800a7b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fb5f 	bl	800ae48 <USBD_StdDevReq>
 800a78a:	4603      	mov	r3, r0
 800a78c:	73fb      	strb	r3, [r7, #15]
      break;
 800a78e:	e020      	b.n	800a7d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a796:	4619      	mov	r1, r3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fbc7 	bl	800af2c <USBD_StdItfReq>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	73fb      	strb	r3, [r7, #15]
      break;
 800a7a2:	e016      	b.n	800a7d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fc29 	bl	800b004 <USBD_StdEPReq>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a7b6:	e00c      	b.n	800a7d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a7be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f004 ff62 	bl	800f690 <USBD_LL_StallEP>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a7d0:	bf00      	nop
  }

  return ret;
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	607a      	str	r2, [r7, #4]
 800a7e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a7ee:	7afb      	ldrb	r3, [r7, #11]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d16e      	bne.n	800a8d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a7fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a802:	2b03      	cmp	r3, #3
 800a804:	f040 8098 	bne.w	800a938 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	689a      	ldr	r2, [r3, #8]
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	429a      	cmp	r2, r3
 800a812:	d913      	bls.n	800a83c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	689a      	ldr	r2, [r3, #8]
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	1ad2      	subs	r2, r2, r3
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	68da      	ldr	r2, [r3, #12]
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	4293      	cmp	r3, r2
 800a82c:	bf28      	it	cs
 800a82e:	4613      	movcs	r3, r2
 800a830:	461a      	mov	r2, r3
 800a832:	6879      	ldr	r1, [r7, #4]
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f001 f9ae 	bl	800bb96 <USBD_CtlContinueRx>
 800a83a:	e07d      	b.n	800a938 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a842:	f003 031f 	and.w	r3, r3, #31
 800a846:	2b02      	cmp	r3, #2
 800a848:	d014      	beq.n	800a874 <USBD_LL_DataOutStage+0x98>
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d81d      	bhi.n	800a88a <USBD_LL_DataOutStage+0xae>
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d002      	beq.n	800a858 <USBD_LL_DataOutStage+0x7c>
 800a852:	2b01      	cmp	r3, #1
 800a854:	d003      	beq.n	800a85e <USBD_LL_DataOutStage+0x82>
 800a856:	e018      	b.n	800a88a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a858:	2300      	movs	r3, #0
 800a85a:	75bb      	strb	r3, [r7, #22]
            break;
 800a85c:	e018      	b.n	800a890 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a864:	b2db      	uxtb	r3, r3
 800a866:	4619      	mov	r1, r3
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f000 fa5e 	bl	800ad2a <USBD_CoreFindIF>
 800a86e:	4603      	mov	r3, r0
 800a870:	75bb      	strb	r3, [r7, #22]
            break;
 800a872:	e00d      	b.n	800a890 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	4619      	mov	r1, r3
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f000 fa60 	bl	800ad44 <USBD_CoreFindEP>
 800a884:	4603      	mov	r3, r0
 800a886:	75bb      	strb	r3, [r7, #22]
            break;
 800a888:	e002      	b.n	800a890 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a88a:	2300      	movs	r3, #0
 800a88c:	75bb      	strb	r3, [r7, #22]
            break;
 800a88e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a890:	7dbb      	ldrb	r3, [r7, #22]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d119      	bne.n	800a8ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d113      	bne.n	800a8ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a8a2:	7dba      	ldrb	r2, [r7, #22]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	32ae      	adds	r2, #174	; 0xae
 800a8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00b      	beq.n	800a8ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a8b2:	7dba      	ldrb	r2, [r7, #22]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a8ba:	7dba      	ldrb	r2, [r7, #22]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	32ae      	adds	r2, #174	; 0xae
 800a8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f001 f974 	bl	800bbb8 <USBD_CtlSendStatus>
 800a8d0:	e032      	b.n	800a938 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a8d2:	7afb      	ldrb	r3, [r7, #11]
 800a8d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	4619      	mov	r1, r3
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 fa31 	bl	800ad44 <USBD_CoreFindEP>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8e6:	7dbb      	ldrb	r3, [r7, #22]
 800a8e8:	2bff      	cmp	r3, #255	; 0xff
 800a8ea:	d025      	beq.n	800a938 <USBD_LL_DataOutStage+0x15c>
 800a8ec:	7dbb      	ldrb	r3, [r7, #22]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d122      	bne.n	800a938 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d117      	bne.n	800a92e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a8fe:	7dba      	ldrb	r2, [r7, #22]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	32ae      	adds	r2, #174	; 0xae
 800a904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00f      	beq.n	800a92e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a90e:	7dba      	ldrb	r2, [r7, #22]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a916:	7dba      	ldrb	r2, [r7, #22]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	32ae      	adds	r2, #174	; 0xae
 800a91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	7afa      	ldrb	r2, [r7, #11]
 800a924:	4611      	mov	r1, r2
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	4798      	blx	r3
 800a92a:	4603      	mov	r3, r0
 800a92c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a92e:	7dfb      	ldrb	r3, [r7, #23]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a934:	7dfb      	ldrb	r3, [r7, #23]
 800a936:	e000      	b.n	800a93a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b086      	sub	sp, #24
 800a946:	af00      	add	r7, sp, #0
 800a948:	60f8      	str	r0, [r7, #12]
 800a94a:	460b      	mov	r3, r1
 800a94c:	607a      	str	r2, [r7, #4]
 800a94e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a950:	7afb      	ldrb	r3, [r7, #11]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d16f      	bne.n	800aa36 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3314      	adds	r3, #20
 800a95a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a962:	2b02      	cmp	r3, #2
 800a964:	d15a      	bne.n	800aa1c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	689a      	ldr	r2, [r3, #8]
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d914      	bls.n	800a99c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	689a      	ldr	r2, [r3, #8]
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	1ad2      	subs	r2, r2, r3
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	461a      	mov	r2, r3
 800a986:	6879      	ldr	r1, [r7, #4]
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f001 f8d6 	bl	800bb3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a98e:	2300      	movs	r3, #0
 800a990:	2200      	movs	r2, #0
 800a992:	2100      	movs	r1, #0
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f004 ff25 	bl	800f7e4 <USBD_LL_PrepareReceive>
 800a99a:	e03f      	b.n	800aa1c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	68da      	ldr	r2, [r3, #12]
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d11c      	bne.n	800a9e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d316      	bcc.n	800a9e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	685a      	ldr	r2, [r3, #4]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d20f      	bcs.n	800a9e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f001 f8b7 	bl	800bb3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	2100      	movs	r1, #0
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f004 ff02 	bl	800f7e4 <USBD_LL_PrepareReceive>
 800a9e0:	e01c      	b.n	800aa1c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	2b03      	cmp	r3, #3
 800a9ec:	d10f      	bne.n	800aa0e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d009      	beq.n	800aa0e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa0e:	2180      	movs	r1, #128	; 0x80
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f004 fe3d 	bl	800f690 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f001 f8e1 	bl	800bbde <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d03a      	beq.n	800aa9c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f7ff fe42 	bl	800a6b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aa34:	e032      	b.n	800aa9c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800aa36:	7afb      	ldrb	r3, [r7, #11]
 800aa38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	4619      	mov	r1, r3
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f000 f97f 	bl	800ad44 <USBD_CoreFindEP>
 800aa46:	4603      	mov	r3, r0
 800aa48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
 800aa4c:	2bff      	cmp	r3, #255	; 0xff
 800aa4e:	d025      	beq.n	800aa9c <USBD_LL_DataInStage+0x15a>
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d122      	bne.n	800aa9c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	d11c      	bne.n	800aa9c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800aa62:	7dfa      	ldrb	r2, [r7, #23]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	32ae      	adds	r2, #174	; 0xae
 800aa68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d014      	beq.n	800aa9c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aa72:	7dfa      	ldrb	r2, [r7, #23]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aa7a:	7dfa      	ldrb	r2, [r7, #23]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	32ae      	adds	r2, #174	; 0xae
 800aa80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	7afa      	ldrb	r2, [r7, #11]
 800aa88:	4611      	mov	r1, r2
 800aa8a:	68f8      	ldr	r0, [r7, #12]
 800aa8c:	4798      	blx	r3
 800aa8e:	4603      	mov	r3, r0
 800aa90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aa92:	7dbb      	ldrb	r3, [r7, #22]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d001      	beq.n	800aa9c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aa98:	7dbb      	ldrb	r3, [r7, #22]
 800aa9a:	e000      	b.n	800aa9e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3718      	adds	r7, #24
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b084      	sub	sp, #16
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aaae:	2300      	movs	r3, #0
 800aab0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d014      	beq.n	800ab0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00e      	beq.n	800ab0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	6852      	ldr	r2, [r2, #4]
 800aafa:	b2d2      	uxtb	r2, r2
 800aafc:	4611      	mov	r1, r2
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	4798      	blx	r3
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d001      	beq.n	800ab0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ab08:	2303      	movs	r3, #3
 800ab0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab0c:	2340      	movs	r3, #64	; 0x40
 800ab0e:	2200      	movs	r2, #0
 800ab10:	2100      	movs	r1, #0
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f004 fd77 	bl	800f606 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2240      	movs	r2, #64	; 0x40
 800ab24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab28:	2340      	movs	r3, #64	; 0x40
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2180      	movs	r1, #128	; 0x80
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f004 fd69 	bl	800f606 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2240      	movs	r2, #64	; 0x40
 800ab3e:	621a      	str	r2, [r3, #32]

  return ret;
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab4a:	b480      	push	{r7}
 800ab4c:	b083      	sub	sp, #12
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	460b      	mov	r3, r1
 800ab54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	78fa      	ldrb	r2, [r7, #3]
 800ab5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	370c      	adds	r7, #12
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	b083      	sub	sp, #12
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2204      	movs	r2, #4
 800ab84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab96:	b480      	push	{r7}
 800ab98:	b083      	sub	sp, #12
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b04      	cmp	r3, #4
 800aba8:	d106      	bne.n	800abb8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b082      	sub	sp, #8
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b03      	cmp	r3, #3
 800abd8:	d110      	bne.n	800abfc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00b      	beq.n	800abfc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abea:	69db      	ldr	r3, [r3, #28]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d005      	beq.n	800abfc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b082      	sub	sp, #8
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	460b      	mov	r3, r1
 800ac10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	32ae      	adds	r2, #174	; 0xae
 800ac1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d101      	bne.n	800ac28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac24:	2303      	movs	r3, #3
 800ac26:	e01c      	b.n	800ac62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	2b03      	cmp	r3, #3
 800ac32:	d115      	bne.n	800ac60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	32ae      	adds	r2, #174	; 0xae
 800ac3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac42:	6a1b      	ldr	r3, [r3, #32]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00b      	beq.n	800ac60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	32ae      	adds	r2, #174	; 0xae
 800ac52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	78fa      	ldrb	r2, [r7, #3]
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b082      	sub	sp, #8
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	460b      	mov	r3, r1
 800ac74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	32ae      	adds	r2, #174	; 0xae
 800ac80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e01c      	b.n	800acc6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	2b03      	cmp	r3, #3
 800ac96:	d115      	bne.n	800acc4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	32ae      	adds	r2, #174	; 0xae
 800aca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00b      	beq.n	800acc4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	32ae      	adds	r2, #174	; 0xae
 800acb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	78fa      	ldrb	r2, [r7, #3]
 800acbe:	4611      	mov	r1, r2
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800acce:	b480      	push	{r7}
 800acd0:	b083      	sub	sp, #12
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800acec:	2300      	movs	r3, #0
 800acee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00e      	beq.n	800ad20 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	6852      	ldr	r2, [r2, #4]
 800ad0e:	b2d2      	uxtb	r2, r2
 800ad10:	4611      	mov	r1, r2
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	4798      	blx	r3
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d001      	beq.n	800ad20 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ad1c:	2303      	movs	r3, #3
 800ad1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad2a:	b480      	push	{r7}
 800ad2c:	b083      	sub	sp, #12
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	460b      	mov	r3, r1
 800ad34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b086      	sub	sp, #24
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	460b      	mov	r3, r1
 800ad68:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ad72:	2300      	movs	r3, #0
 800ad74:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	885b      	ldrh	r3, [r3, #2]
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d920      	bls.n	800adc8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ad8e:	e013      	b.n	800adb8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ad90:	f107 030a 	add.w	r3, r7, #10
 800ad94:	4619      	mov	r1, r3
 800ad96:	6978      	ldr	r0, [r7, #20]
 800ad98:	f000 f81b 	bl	800add2 <USBD_GetNextDesc>
 800ad9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	785b      	ldrb	r3, [r3, #1]
 800ada2:	2b05      	cmp	r3, #5
 800ada4:	d108      	bne.n	800adb8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	789b      	ldrb	r3, [r3, #2]
 800adae:	78fa      	ldrb	r2, [r7, #3]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d008      	beq.n	800adc6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800adb4:	2300      	movs	r3, #0
 800adb6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	885b      	ldrh	r3, [r3, #2]
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	897b      	ldrh	r3, [r7, #10]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d8e5      	bhi.n	800ad90 <USBD_GetEpDesc+0x32>
 800adc4:	e000      	b.n	800adc8 <USBD_GetEpDesc+0x6a>
          break;
 800adc6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800adc8:	693b      	ldr	r3, [r7, #16]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800add2:	b480      	push	{r7}
 800add4:	b085      	sub	sp, #20
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
 800adda:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	881a      	ldrh	r2, [r3, #0]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	b29b      	uxth	r3, r3
 800adea:	4413      	add	r3, r2
 800adec:	b29a      	uxth	r2, r3
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4413      	add	r3, r2
 800adfc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800adfe:	68fb      	ldr	r3, [r7, #12]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3714      	adds	r7, #20
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	3301      	adds	r3, #1
 800ae22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ae2a:	8a3b      	ldrh	r3, [r7, #16]
 800ae2c:	021b      	lsls	r3, r3, #8
 800ae2e:	b21a      	sxth	r2, r3
 800ae30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	b21b      	sxth	r3, r3
 800ae38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ae3a:	89fb      	ldrh	r3, [r7, #14]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	371c      	adds	r7, #28
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae52:	2300      	movs	r3, #0
 800ae54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae5e:	2b40      	cmp	r3, #64	; 0x40
 800ae60:	d005      	beq.n	800ae6e <USBD_StdDevReq+0x26>
 800ae62:	2b40      	cmp	r3, #64	; 0x40
 800ae64:	d857      	bhi.n	800af16 <USBD_StdDevReq+0xce>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00f      	beq.n	800ae8a <USBD_StdDevReq+0x42>
 800ae6a:	2b20      	cmp	r3, #32
 800ae6c:	d153      	bne.n	800af16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	32ae      	adds	r2, #174	; 0xae
 800ae78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	4798      	blx	r3
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]
      break;
 800ae88:	e04a      	b.n	800af20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	785b      	ldrb	r3, [r3, #1]
 800ae8e:	2b09      	cmp	r3, #9
 800ae90:	d83b      	bhi.n	800af0a <USBD_StdDevReq+0xc2>
 800ae92:	a201      	add	r2, pc, #4	; (adr r2, 800ae98 <USBD_StdDevReq+0x50>)
 800ae94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae98:	0800aeed 	.word	0x0800aeed
 800ae9c:	0800af01 	.word	0x0800af01
 800aea0:	0800af0b 	.word	0x0800af0b
 800aea4:	0800aef7 	.word	0x0800aef7
 800aea8:	0800af0b 	.word	0x0800af0b
 800aeac:	0800aecb 	.word	0x0800aecb
 800aeb0:	0800aec1 	.word	0x0800aec1
 800aeb4:	0800af0b 	.word	0x0800af0b
 800aeb8:	0800aee3 	.word	0x0800aee3
 800aebc:	0800aed5 	.word	0x0800aed5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fa3c 	bl	800b340 <USBD_GetDescriptor>
          break;
 800aec8:	e024      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fbcb 	bl	800b668 <USBD_SetAddress>
          break;
 800aed2:	e01f      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fc0a 	bl	800b6f0 <USBD_SetConfig>
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]
          break;
 800aee0:	e018      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fcad 	bl	800b844 <USBD_GetConfig>
          break;
 800aeea:	e013      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fcde 	bl	800b8b0 <USBD_GetStatus>
          break;
 800aef4:	e00e      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fd0d 	bl	800b918 <USBD_SetFeature>
          break;
 800aefe:	e009      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 fd31 	bl	800b96a <USBD_ClrFeature>
          break;
 800af08:	e004      	b.n	800af14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fd88 	bl	800ba22 <USBD_CtlError>
          break;
 800af12:	bf00      	nop
      }
      break;
 800af14:	e004      	b.n	800af20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fd82 	bl	800ba22 <USBD_CtlError>
      break;
 800af1e:	bf00      	nop
  }

  return ret;
 800af20:	7bfb      	ldrb	r3, [r7, #15]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop

0800af2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af42:	2b40      	cmp	r3, #64	; 0x40
 800af44:	d005      	beq.n	800af52 <USBD_StdItfReq+0x26>
 800af46:	2b40      	cmp	r3, #64	; 0x40
 800af48:	d852      	bhi.n	800aff0 <USBD_StdItfReq+0xc4>
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <USBD_StdItfReq+0x26>
 800af4e:	2b20      	cmp	r3, #32
 800af50:	d14e      	bne.n	800aff0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	3b01      	subs	r3, #1
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d840      	bhi.n	800afe2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	889b      	ldrh	r3, [r3, #4]
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b01      	cmp	r3, #1
 800af68:	d836      	bhi.n	800afd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	889b      	ldrh	r3, [r3, #4]
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	4619      	mov	r1, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f7ff fed9 	bl	800ad2a <USBD_CoreFindIF>
 800af78:	4603      	mov	r3, r0
 800af7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af7c:	7bbb      	ldrb	r3, [r7, #14]
 800af7e:	2bff      	cmp	r3, #255	; 0xff
 800af80:	d01d      	beq.n	800afbe <USBD_StdItfReq+0x92>
 800af82:	7bbb      	ldrb	r3, [r7, #14]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d11a      	bne.n	800afbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800af88:	7bba      	ldrb	r2, [r7, #14]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	32ae      	adds	r2, #174	; 0xae
 800af8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00f      	beq.n	800afb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800af98:	7bba      	ldrb	r2, [r7, #14]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800afa0:	7bba      	ldrb	r2, [r7, #14]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	32ae      	adds	r2, #174	; 0xae
 800afa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	6839      	ldr	r1, [r7, #0]
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	4798      	blx	r3
 800afb2:	4603      	mov	r3, r0
 800afb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800afb6:	e004      	b.n	800afc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800afb8:	2303      	movs	r3, #3
 800afba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800afbc:	e001      	b.n	800afc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800afbe:	2303      	movs	r3, #3
 800afc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	88db      	ldrh	r3, [r3, #6]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d110      	bne.n	800afec <USBD_StdItfReq+0xc0>
 800afca:	7bfb      	ldrb	r3, [r7, #15]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10d      	bne.n	800afec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fdf1 	bl	800bbb8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800afd6:	e009      	b.n	800afec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800afd8:	6839      	ldr	r1, [r7, #0]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fd21 	bl	800ba22 <USBD_CtlError>
          break;
 800afe0:	e004      	b.n	800afec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800afe2:	6839      	ldr	r1, [r7, #0]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fd1c 	bl	800ba22 <USBD_CtlError>
          break;
 800afea:	e000      	b.n	800afee <USBD_StdItfReq+0xc2>
          break;
 800afec:	bf00      	nop
      }
      break;
 800afee:	e004      	b.n	800affa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fd15 	bl	800ba22 <USBD_CtlError>
      break;
 800aff8:	bf00      	nop
  }

  return ret;
 800affa:	7bfb      	ldrb	r3, [r7, #15]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	889b      	ldrh	r3, [r3, #4]
 800b016:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b020:	2b40      	cmp	r3, #64	; 0x40
 800b022:	d007      	beq.n	800b034 <USBD_StdEPReq+0x30>
 800b024:	2b40      	cmp	r3, #64	; 0x40
 800b026:	f200 817f 	bhi.w	800b328 <USBD_StdEPReq+0x324>
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d02a      	beq.n	800b084 <USBD_StdEPReq+0x80>
 800b02e:	2b20      	cmp	r3, #32
 800b030:	f040 817a 	bne.w	800b328 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b034:	7bbb      	ldrb	r3, [r7, #14]
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7ff fe83 	bl	800ad44 <USBD_CoreFindEP>
 800b03e:	4603      	mov	r3, r0
 800b040:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b042:	7b7b      	ldrb	r3, [r7, #13]
 800b044:	2bff      	cmp	r3, #255	; 0xff
 800b046:	f000 8174 	beq.w	800b332 <USBD_StdEPReq+0x32e>
 800b04a:	7b7b      	ldrb	r3, [r7, #13]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f040 8170 	bne.w	800b332 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b052:	7b7a      	ldrb	r2, [r7, #13]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b05a:	7b7a      	ldrb	r2, [r7, #13]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	32ae      	adds	r2, #174	; 0xae
 800b060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 8163 	beq.w	800b332 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b06c:	7b7a      	ldrb	r2, [r7, #13]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	32ae      	adds	r2, #174	; 0xae
 800b072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	4798      	blx	r3
 800b07e:	4603      	mov	r3, r0
 800b080:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b082:	e156      	b.n	800b332 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	785b      	ldrb	r3, [r3, #1]
 800b088:	2b03      	cmp	r3, #3
 800b08a:	d008      	beq.n	800b09e <USBD_StdEPReq+0x9a>
 800b08c:	2b03      	cmp	r3, #3
 800b08e:	f300 8145 	bgt.w	800b31c <USBD_StdEPReq+0x318>
 800b092:	2b00      	cmp	r3, #0
 800b094:	f000 809b 	beq.w	800b1ce <USBD_StdEPReq+0x1ca>
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d03c      	beq.n	800b116 <USBD_StdEPReq+0x112>
 800b09c:	e13e      	b.n	800b31c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d002      	beq.n	800b0b0 <USBD_StdEPReq+0xac>
 800b0aa:	2b03      	cmp	r3, #3
 800b0ac:	d016      	beq.n	800b0dc <USBD_StdEPReq+0xd8>
 800b0ae:	e02c      	b.n	800b10a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00d      	beq.n	800b0d2 <USBD_StdEPReq+0xce>
 800b0b6:	7bbb      	ldrb	r3, [r7, #14]
 800b0b8:	2b80      	cmp	r3, #128	; 0x80
 800b0ba:	d00a      	beq.n	800b0d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0bc:	7bbb      	ldrb	r3, [r7, #14]
 800b0be:	4619      	mov	r1, r3
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f004 fae5 	bl	800f690 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0c6:	2180      	movs	r1, #128	; 0x80
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f004 fae1 	bl	800f690 <USBD_LL_StallEP>
 800b0ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0d0:	e020      	b.n	800b114 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fca4 	bl	800ba22 <USBD_CtlError>
              break;
 800b0da:	e01b      	b.n	800b114 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	885b      	ldrh	r3, [r3, #2]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10e      	bne.n	800b102 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00b      	beq.n	800b102 <USBD_StdEPReq+0xfe>
 800b0ea:	7bbb      	ldrb	r3, [r7, #14]
 800b0ec:	2b80      	cmp	r3, #128	; 0x80
 800b0ee:	d008      	beq.n	800b102 <USBD_StdEPReq+0xfe>
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	88db      	ldrh	r3, [r3, #6]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d104      	bne.n	800b102 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0f8:	7bbb      	ldrb	r3, [r7, #14]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f004 fac7 	bl	800f690 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fd58 	bl	800bbb8 <USBD_CtlSendStatus>

              break;
 800b108:	e004      	b.n	800b114 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fc88 	bl	800ba22 <USBD_CtlError>
              break;
 800b112:	bf00      	nop
          }
          break;
 800b114:	e107      	b.n	800b326 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d002      	beq.n	800b128 <USBD_StdEPReq+0x124>
 800b122:	2b03      	cmp	r3, #3
 800b124:	d016      	beq.n	800b154 <USBD_StdEPReq+0x150>
 800b126:	e04b      	b.n	800b1c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00d      	beq.n	800b14a <USBD_StdEPReq+0x146>
 800b12e:	7bbb      	ldrb	r3, [r7, #14]
 800b130:	2b80      	cmp	r3, #128	; 0x80
 800b132:	d00a      	beq.n	800b14a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f004 faa9 	bl	800f690 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b13e:	2180      	movs	r1, #128	; 0x80
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f004 faa5 	bl	800f690 <USBD_LL_StallEP>
 800b146:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b148:	e040      	b.n	800b1cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b14a:	6839      	ldr	r1, [r7, #0]
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 fc68 	bl	800ba22 <USBD_CtlError>
              break;
 800b152:	e03b      	b.n	800b1cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	885b      	ldrh	r3, [r3, #2]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d136      	bne.n	800b1ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b15c:	7bbb      	ldrb	r3, [r7, #14]
 800b15e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b162:	2b00      	cmp	r3, #0
 800b164:	d004      	beq.n	800b170 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b166:	7bbb      	ldrb	r3, [r7, #14]
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f004 faaf 	bl	800f6ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fd21 	bl	800bbb8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b176:	7bbb      	ldrb	r3, [r7, #14]
 800b178:	4619      	mov	r1, r3
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f7ff fde2 	bl	800ad44 <USBD_CoreFindEP>
 800b180:	4603      	mov	r3, r0
 800b182:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b184:	7b7b      	ldrb	r3, [r7, #13]
 800b186:	2bff      	cmp	r3, #255	; 0xff
 800b188:	d01f      	beq.n	800b1ca <USBD_StdEPReq+0x1c6>
 800b18a:	7b7b      	ldrb	r3, [r7, #13]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d11c      	bne.n	800b1ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b190:	7b7a      	ldrb	r2, [r7, #13]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b198:	7b7a      	ldrb	r2, [r7, #13]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	32ae      	adds	r2, #174	; 0xae
 800b19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d010      	beq.n	800b1ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b1a8:	7b7a      	ldrb	r2, [r7, #13]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	32ae      	adds	r2, #174	; 0xae
 800b1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	4798      	blx	r3
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b1be:	e004      	b.n	800b1ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b1c0:	6839      	ldr	r1, [r7, #0]
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fc2d 	bl	800ba22 <USBD_CtlError>
              break;
 800b1c8:	e000      	b.n	800b1cc <USBD_StdEPReq+0x1c8>
              break;
 800b1ca:	bf00      	nop
          }
          break;
 800b1cc:	e0ab      	b.n	800b326 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	d002      	beq.n	800b1e0 <USBD_StdEPReq+0x1dc>
 800b1da:	2b03      	cmp	r3, #3
 800b1dc:	d032      	beq.n	800b244 <USBD_StdEPReq+0x240>
 800b1de:	e097      	b.n	800b310 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1e0:	7bbb      	ldrb	r3, [r7, #14]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d007      	beq.n	800b1f6 <USBD_StdEPReq+0x1f2>
 800b1e6:	7bbb      	ldrb	r3, [r7, #14]
 800b1e8:	2b80      	cmp	r3, #128	; 0x80
 800b1ea:	d004      	beq.n	800b1f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fc17 	bl	800ba22 <USBD_CtlError>
                break;
 800b1f4:	e091      	b.n	800b31a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	da0b      	bge.n	800b216 <USBD_StdEPReq+0x212>
 800b1fe:	7bbb      	ldrb	r3, [r7, #14]
 800b200:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b204:	4613      	mov	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	3310      	adds	r3, #16
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	4413      	add	r3, r2
 800b212:	3304      	adds	r3, #4
 800b214:	e00b      	b.n	800b22e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b216:	7bbb      	ldrb	r3, [r7, #14]
 800b218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b21c:	4613      	mov	r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4413      	add	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	4413      	add	r3, r2
 800b22c:	3304      	adds	r3, #4
 800b22e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2202      	movs	r2, #2
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fc61 	bl	800bb04 <USBD_CtlSendData>
              break;
 800b242:	e06a      	b.n	800b31a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	da11      	bge.n	800b270 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b24c:	7bbb      	ldrb	r3, [r7, #14]
 800b24e:	f003 020f 	and.w	r2, r3, #15
 800b252:	6879      	ldr	r1, [r7, #4]
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	440b      	add	r3, r1
 800b25e:	3324      	adds	r3, #36	; 0x24
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d117      	bne.n	800b296 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b266:	6839      	ldr	r1, [r7, #0]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fbda 	bl	800ba22 <USBD_CtlError>
                  break;
 800b26e:	e054      	b.n	800b31a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b270:	7bbb      	ldrb	r3, [r7, #14]
 800b272:	f003 020f 	and.w	r2, r3, #15
 800b276:	6879      	ldr	r1, [r7, #4]
 800b278:	4613      	mov	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4413      	add	r3, r2
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	440b      	add	r3, r1
 800b282:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d104      	bne.n	800b296 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fbc7 	bl	800ba22 <USBD_CtlError>
                  break;
 800b294:	e041      	b.n	800b31a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	da0b      	bge.n	800b2b6 <USBD_StdEPReq+0x2b2>
 800b29e:	7bbb      	ldrb	r3, [r7, #14]
 800b2a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4413      	add	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	3310      	adds	r3, #16
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	e00b      	b.n	800b2ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2b6:	7bbb      	ldrb	r3, [r7, #14]
 800b2b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2bc:	4613      	mov	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	3304      	adds	r3, #4
 800b2ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b2d0:	7bbb      	ldrb	r3, [r7, #14]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d002      	beq.n	800b2dc <USBD_StdEPReq+0x2d8>
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
 800b2d8:	2b80      	cmp	r3, #128	; 0x80
 800b2da:	d103      	bne.n	800b2e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	601a      	str	r2, [r3, #0]
 800b2e2:	e00e      	b.n	800b302 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b2e4:	7bbb      	ldrb	r3, [r7, #14]
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f004 fa0f 	bl	800f70c <USBD_LL_IsStallEP>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d003      	beq.n	800b2fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]
 800b2fa:	e002      	b.n	800b302 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2200      	movs	r2, #0
 800b300:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	2202      	movs	r2, #2
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fbfb 	bl	800bb04 <USBD_CtlSendData>
              break;
 800b30e:	e004      	b.n	800b31a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fb85 	bl	800ba22 <USBD_CtlError>
              break;
 800b318:	bf00      	nop
          }
          break;
 800b31a:	e004      	b.n	800b326 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fb7f 	bl	800ba22 <USBD_CtlError>
          break;
 800b324:	bf00      	nop
      }
      break;
 800b326:	e005      	b.n	800b334 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fb79 	bl	800ba22 <USBD_CtlError>
      break;
 800b330:	e000      	b.n	800b334 <USBD_StdEPReq+0x330>
      break;
 800b332:	bf00      	nop
  }

  return ret;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
	...

0800b340 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b34e:	2300      	movs	r3, #0
 800b350:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b352:	2300      	movs	r3, #0
 800b354:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	885b      	ldrh	r3, [r3, #2]
 800b35a:	0a1b      	lsrs	r3, r3, #8
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	3b01      	subs	r3, #1
 800b360:	2b0e      	cmp	r3, #14
 800b362:	f200 8152 	bhi.w	800b60a <USBD_GetDescriptor+0x2ca>
 800b366:	a201      	add	r2, pc, #4	; (adr r2, 800b36c <USBD_GetDescriptor+0x2c>)
 800b368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36c:	0800b3dd 	.word	0x0800b3dd
 800b370:	0800b3f5 	.word	0x0800b3f5
 800b374:	0800b435 	.word	0x0800b435
 800b378:	0800b60b 	.word	0x0800b60b
 800b37c:	0800b60b 	.word	0x0800b60b
 800b380:	0800b5ab 	.word	0x0800b5ab
 800b384:	0800b5d7 	.word	0x0800b5d7
 800b388:	0800b60b 	.word	0x0800b60b
 800b38c:	0800b60b 	.word	0x0800b60b
 800b390:	0800b60b 	.word	0x0800b60b
 800b394:	0800b60b 	.word	0x0800b60b
 800b398:	0800b60b 	.word	0x0800b60b
 800b39c:	0800b60b 	.word	0x0800b60b
 800b3a0:	0800b60b 	.word	0x0800b60b
 800b3a4:	0800b3a9 	.word	0x0800b3a9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ae:	69db      	ldr	r3, [r3, #28]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00b      	beq.n	800b3cc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ba:	69db      	ldr	r3, [r3, #28]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	7c12      	ldrb	r2, [r2, #16]
 800b3c0:	f107 0108 	add.w	r1, r7, #8
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	4798      	blx	r3
 800b3c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3ca:	e126      	b.n	800b61a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b3cc:	6839      	ldr	r1, [r7, #0]
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fb27 	bl	800ba22 <USBD_CtlError>
        err++;
 800b3d4:	7afb      	ldrb	r3, [r7, #11]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	72fb      	strb	r3, [r7, #11]
      break;
 800b3da:	e11e      	b.n	800b61a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	7c12      	ldrb	r2, [r2, #16]
 800b3e8:	f107 0108 	add.w	r1, r7, #8
 800b3ec:	4610      	mov	r0, r2
 800b3ee:	4798      	blx	r3
 800b3f0:	60f8      	str	r0, [r7, #12]
      break;
 800b3f2:	e112      	b.n	800b61a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	7c1b      	ldrb	r3, [r3, #16]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10d      	bne.n	800b418 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b404:	f107 0208 	add.w	r2, r7, #8
 800b408:	4610      	mov	r0, r2
 800b40a:	4798      	blx	r3
 800b40c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	3301      	adds	r3, #1
 800b412:	2202      	movs	r2, #2
 800b414:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b416:	e100      	b.n	800b61a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b420:	f107 0208 	add.w	r2, r7, #8
 800b424:	4610      	mov	r0, r2
 800b426:	4798      	blx	r3
 800b428:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	3301      	adds	r3, #1
 800b42e:	2202      	movs	r2, #2
 800b430:	701a      	strb	r2, [r3, #0]
      break;
 800b432:	e0f2      	b.n	800b61a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	885b      	ldrh	r3, [r3, #2]
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	2b05      	cmp	r3, #5
 800b43c:	f200 80ac 	bhi.w	800b598 <USBD_GetDescriptor+0x258>
 800b440:	a201      	add	r2, pc, #4	; (adr r2, 800b448 <USBD_GetDescriptor+0x108>)
 800b442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b446:	bf00      	nop
 800b448:	0800b461 	.word	0x0800b461
 800b44c:	0800b495 	.word	0x0800b495
 800b450:	0800b4c9 	.word	0x0800b4c9
 800b454:	0800b4fd 	.word	0x0800b4fd
 800b458:	0800b531 	.word	0x0800b531
 800b45c:	0800b565 	.word	0x0800b565
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00b      	beq.n	800b484 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	7c12      	ldrb	r2, [r2, #16]
 800b478:	f107 0108 	add.w	r1, r7, #8
 800b47c:	4610      	mov	r0, r2
 800b47e:	4798      	blx	r3
 800b480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b482:	e091      	b.n	800b5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b484:	6839      	ldr	r1, [r7, #0]
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 facb 	bl	800ba22 <USBD_CtlError>
            err++;
 800b48c:	7afb      	ldrb	r3, [r7, #11]
 800b48e:	3301      	adds	r3, #1
 800b490:	72fb      	strb	r3, [r7, #11]
          break;
 800b492:	e089      	b.n	800b5a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00b      	beq.n	800b4b8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	7c12      	ldrb	r2, [r2, #16]
 800b4ac:	f107 0108 	add.w	r1, r7, #8
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	4798      	blx	r3
 800b4b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4b6:	e077      	b.n	800b5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4b8:	6839      	ldr	r1, [r7, #0]
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fab1 	bl	800ba22 <USBD_CtlError>
            err++;
 800b4c0:	7afb      	ldrb	r3, [r7, #11]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b4c6:	e06f      	b.n	800b5a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00b      	beq.n	800b4ec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	7c12      	ldrb	r2, [r2, #16]
 800b4e0:	f107 0108 	add.w	r1, r7, #8
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	4798      	blx	r3
 800b4e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ea:	e05d      	b.n	800b5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4ec:	6839      	ldr	r1, [r7, #0]
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 fa97 	bl	800ba22 <USBD_CtlError>
            err++;
 800b4f4:	7afb      	ldrb	r3, [r7, #11]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4fa:	e055      	b.n	800b5a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b502:	691b      	ldr	r3, [r3, #16]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d00b      	beq.n	800b520 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	7c12      	ldrb	r2, [r2, #16]
 800b514:	f107 0108 	add.w	r1, r7, #8
 800b518:	4610      	mov	r0, r2
 800b51a:	4798      	blx	r3
 800b51c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b51e:	e043      	b.n	800b5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 fa7d 	bl	800ba22 <USBD_CtlError>
            err++;
 800b528:	7afb      	ldrb	r3, [r7, #11]
 800b52a:	3301      	adds	r3, #1
 800b52c:	72fb      	strb	r3, [r7, #11]
          break;
 800b52e:	e03b      	b.n	800b5a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b536:	695b      	ldr	r3, [r3, #20]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00b      	beq.n	800b554 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b542:	695b      	ldr	r3, [r3, #20]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	7c12      	ldrb	r2, [r2, #16]
 800b548:	f107 0108 	add.w	r1, r7, #8
 800b54c:	4610      	mov	r0, r2
 800b54e:	4798      	blx	r3
 800b550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b552:	e029      	b.n	800b5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b554:	6839      	ldr	r1, [r7, #0]
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 fa63 	bl	800ba22 <USBD_CtlError>
            err++;
 800b55c:	7afb      	ldrb	r3, [r7, #11]
 800b55e:	3301      	adds	r3, #1
 800b560:	72fb      	strb	r3, [r7, #11]
          break;
 800b562:	e021      	b.n	800b5a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00b      	beq.n	800b588 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	7c12      	ldrb	r2, [r2, #16]
 800b57c:	f107 0108 	add.w	r1, r7, #8
 800b580:	4610      	mov	r0, r2
 800b582:	4798      	blx	r3
 800b584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b586:	e00f      	b.n	800b5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fa49 	bl	800ba22 <USBD_CtlError>
            err++;
 800b590:	7afb      	ldrb	r3, [r7, #11]
 800b592:	3301      	adds	r3, #1
 800b594:	72fb      	strb	r3, [r7, #11]
          break;
 800b596:	e007      	b.n	800b5a8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fa41 	bl	800ba22 <USBD_CtlError>
          err++;
 800b5a0:	7afb      	ldrb	r3, [r7, #11]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b5a6:	bf00      	nop
      }
      break;
 800b5a8:	e037      	b.n	800b61a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	7c1b      	ldrb	r3, [r3, #16]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d109      	bne.n	800b5c6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ba:	f107 0208 	add.w	r2, r7, #8
 800b5be:	4610      	mov	r0, r2
 800b5c0:	4798      	blx	r3
 800b5c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5c4:	e029      	b.n	800b61a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b5c6:	6839      	ldr	r1, [r7, #0]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fa2a 	bl	800ba22 <USBD_CtlError>
        err++;
 800b5ce:	7afb      	ldrb	r3, [r7, #11]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	72fb      	strb	r3, [r7, #11]
      break;
 800b5d4:	e021      	b.n	800b61a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	7c1b      	ldrb	r3, [r3, #16]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d10d      	bne.n	800b5fa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e6:	f107 0208 	add.w	r2, r7, #8
 800b5ea:	4610      	mov	r0, r2
 800b5ec:	4798      	blx	r3
 800b5ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	2207      	movs	r2, #7
 800b5f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5f8:	e00f      	b.n	800b61a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b5fa:	6839      	ldr	r1, [r7, #0]
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 fa10 	bl	800ba22 <USBD_CtlError>
        err++;
 800b602:	7afb      	ldrb	r3, [r7, #11]
 800b604:	3301      	adds	r3, #1
 800b606:	72fb      	strb	r3, [r7, #11]
      break;
 800b608:	e007      	b.n	800b61a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fa08 	bl	800ba22 <USBD_CtlError>
      err++;
 800b612:	7afb      	ldrb	r3, [r7, #11]
 800b614:	3301      	adds	r3, #1
 800b616:	72fb      	strb	r3, [r7, #11]
      break;
 800b618:	bf00      	nop
  }

  if (err != 0U)
 800b61a:	7afb      	ldrb	r3, [r7, #11]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d11e      	bne.n	800b65e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	88db      	ldrh	r3, [r3, #6]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d016      	beq.n	800b656 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b628:	893b      	ldrh	r3, [r7, #8]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00e      	beq.n	800b64c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	88da      	ldrh	r2, [r3, #6]
 800b632:	893b      	ldrh	r3, [r7, #8]
 800b634:	4293      	cmp	r3, r2
 800b636:	bf28      	it	cs
 800b638:	4613      	movcs	r3, r2
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b63e:	893b      	ldrh	r3, [r7, #8]
 800b640:	461a      	mov	r2, r3
 800b642:	68f9      	ldr	r1, [r7, #12]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fa5d 	bl	800bb04 <USBD_CtlSendData>
 800b64a:	e009      	b.n	800b660 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f9e7 	bl	800ba22 <USBD_CtlError>
 800b654:	e004      	b.n	800b660 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 faae 	bl	800bbb8 <USBD_CtlSendStatus>
 800b65c:	e000      	b.n	800b660 <USBD_GetDescriptor+0x320>
    return;
 800b65e:	bf00      	nop
  }
}
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop

0800b668 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	889b      	ldrh	r3, [r3, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d131      	bne.n	800b6de <USBD_SetAddress+0x76>
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	88db      	ldrh	r3, [r3, #6]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d12d      	bne.n	800b6de <USBD_SetAddress+0x76>
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	885b      	ldrh	r3, [r3, #2]
 800b686:	2b7f      	cmp	r3, #127	; 0x7f
 800b688:	d829      	bhi.n	800b6de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	885b      	ldrh	r3, [r3, #2]
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b694:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	d104      	bne.n	800b6ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f9bc 	bl	800ba22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6aa:	e01d      	b.n	800b6e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	7bfa      	ldrb	r2, [r7, #15]
 800b6b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b6b4:	7bfb      	ldrb	r3, [r7, #15]
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f004 f853 	bl	800f764 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fa7a 	bl	800bbb8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b6c4:	7bfb      	ldrb	r3, [r7, #15]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d004      	beq.n	800b6d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2202      	movs	r2, #2
 800b6ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6d2:	e009      	b.n	800b6e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6dc:	e004      	b.n	800b6e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b6de:	6839      	ldr	r1, [r7, #0]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 f99e 	bl	800ba22 <USBD_CtlError>
  }
}
 800b6e6:	bf00      	nop
 800b6e8:	bf00      	nop
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	885b      	ldrh	r3, [r3, #2]
 800b702:	b2da      	uxtb	r2, r3
 800b704:	4b4e      	ldr	r3, [pc, #312]	; (800b840 <USBD_SetConfig+0x150>)
 800b706:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b708:	4b4d      	ldr	r3, [pc, #308]	; (800b840 <USBD_SetConfig+0x150>)
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d905      	bls.n	800b71c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f985 	bl	800ba22 <USBD_CtlError>
    return USBD_FAIL;
 800b718:	2303      	movs	r3, #3
 800b71a:	e08c      	b.n	800b836 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b722:	b2db      	uxtb	r3, r3
 800b724:	2b02      	cmp	r3, #2
 800b726:	d002      	beq.n	800b72e <USBD_SetConfig+0x3e>
 800b728:	2b03      	cmp	r3, #3
 800b72a:	d029      	beq.n	800b780 <USBD_SetConfig+0x90>
 800b72c:	e075      	b.n	800b81a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b72e:	4b44      	ldr	r3, [pc, #272]	; (800b840 <USBD_SetConfig+0x150>)
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d020      	beq.n	800b778 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b736:	4b42      	ldr	r3, [pc, #264]	; (800b840 <USBD_SetConfig+0x150>)
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	461a      	mov	r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b740:	4b3f      	ldr	r3, [pc, #252]	; (800b840 <USBD_SetConfig+0x150>)
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	4619      	mov	r1, r3
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f7fe ffbd 	bl	800a6c6 <USBD_SetClassConfig>
 800b74c:	4603      	mov	r3, r0
 800b74e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b750:	7bfb      	ldrb	r3, [r7, #15]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d008      	beq.n	800b768 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 f962 	bl	800ba22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2202      	movs	r2, #2
 800b762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b766:	e065      	b.n	800b834 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fa25 	bl	800bbb8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2203      	movs	r2, #3
 800b772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b776:	e05d      	b.n	800b834 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fa1d 	bl	800bbb8 <USBD_CtlSendStatus>
      break;
 800b77e:	e059      	b.n	800b834 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b780:	4b2f      	ldr	r3, [pc, #188]	; (800b840 <USBD_SetConfig+0x150>)
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d112      	bne.n	800b7ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2202      	movs	r2, #2
 800b78c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b790:	4b2b      	ldr	r3, [pc, #172]	; (800b840 <USBD_SetConfig+0x150>)
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	461a      	mov	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b79a:	4b29      	ldr	r3, [pc, #164]	; (800b840 <USBD_SetConfig+0x150>)
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	4619      	mov	r1, r3
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f7fe ffac 	bl	800a6fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 fa06 	bl	800bbb8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b7ac:	e042      	b.n	800b834 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b7ae:	4b24      	ldr	r3, [pc, #144]	; (800b840 <USBD_SetConfig+0x150>)
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d02a      	beq.n	800b812 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f7fe ff9a 	bl	800a6fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b7ca:	4b1d      	ldr	r3, [pc, #116]	; (800b840 <USBD_SetConfig+0x150>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7d4:	4b1a      	ldr	r3, [pc, #104]	; (800b840 <USBD_SetConfig+0x150>)
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	4619      	mov	r1, r3
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7fe ff73 	bl	800a6c6 <USBD_SetClassConfig>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00f      	beq.n	800b80a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b7ea:	6839      	ldr	r1, [r7, #0]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 f918 	bl	800ba22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7fe ff7f 	bl	800a6fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2202      	movs	r2, #2
 800b804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b808:	e014      	b.n	800b834 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f9d4 	bl	800bbb8 <USBD_CtlSendStatus>
      break;
 800b810:	e010      	b.n	800b834 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 f9d0 	bl	800bbb8 <USBD_CtlSendStatus>
      break;
 800b818:	e00c      	b.n	800b834 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b81a:	6839      	ldr	r1, [r7, #0]
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 f900 	bl	800ba22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b822:	4b07      	ldr	r3, [pc, #28]	; (800b840 <USBD_SetConfig+0x150>)
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	4619      	mov	r1, r3
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7fe ff68 	bl	800a6fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b82e:	2303      	movs	r3, #3
 800b830:	73fb      	strb	r3, [r7, #15]
      break;
 800b832:	bf00      	nop
  }

  return ret;
 800b834:	7bfb      	ldrb	r3, [r7, #15]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	200032b4 	.word	0x200032b4

0800b844 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	88db      	ldrh	r3, [r3, #6]
 800b852:	2b01      	cmp	r3, #1
 800b854:	d004      	beq.n	800b860 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b856:	6839      	ldr	r1, [r7, #0]
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 f8e2 	bl	800ba22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b85e:	e023      	b.n	800b8a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b02      	cmp	r3, #2
 800b86a:	dc02      	bgt.n	800b872 <USBD_GetConfig+0x2e>
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	dc03      	bgt.n	800b878 <USBD_GetConfig+0x34>
 800b870:	e015      	b.n	800b89e <USBD_GetConfig+0x5a>
 800b872:	2b03      	cmp	r3, #3
 800b874:	d00b      	beq.n	800b88e <USBD_GetConfig+0x4a>
 800b876:	e012      	b.n	800b89e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	3308      	adds	r3, #8
 800b882:	2201      	movs	r2, #1
 800b884:	4619      	mov	r1, r3
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 f93c 	bl	800bb04 <USBD_CtlSendData>
        break;
 800b88c:	e00c      	b.n	800b8a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	3304      	adds	r3, #4
 800b892:	2201      	movs	r2, #1
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f934 	bl	800bb04 <USBD_CtlSendData>
        break;
 800b89c:	e004      	b.n	800b8a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b89e:	6839      	ldr	r1, [r7, #0]
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 f8be 	bl	800ba22 <USBD_CtlError>
        break;
 800b8a6:	bf00      	nop
}
 800b8a8:	bf00      	nop
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d81e      	bhi.n	800b906 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	88db      	ldrh	r3, [r3, #6]
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	d004      	beq.n	800b8da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f8a5 	bl	800ba22 <USBD_CtlError>
        break;
 800b8d8:	e01a      	b.n	800b910 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d005      	beq.n	800b8f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	f043 0202 	orr.w	r2, r3, #2
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	330c      	adds	r3, #12
 800b8fa:	2202      	movs	r2, #2
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 f900 	bl	800bb04 <USBD_CtlSendData>
      break;
 800b904:	e004      	b.n	800b910 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f88a 	bl	800ba22 <USBD_CtlError>
      break;
 800b90e:	bf00      	nop
  }
}
 800b910:	bf00      	nop
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	885b      	ldrh	r3, [r3, #2]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d107      	bne.n	800b93a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 f940 	bl	800bbb8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b938:	e013      	b.n	800b962 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	885b      	ldrh	r3, [r3, #2]
 800b93e:	2b02      	cmp	r3, #2
 800b940:	d10b      	bne.n	800b95a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	889b      	ldrh	r3, [r3, #4]
 800b946:	0a1b      	lsrs	r3, r3, #8
 800b948:	b29b      	uxth	r3, r3
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f930 	bl	800bbb8 <USBD_CtlSendStatus>
}
 800b958:	e003      	b.n	800b962 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b95a:	6839      	ldr	r1, [r7, #0]
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f860 	bl	800ba22 <USBD_CtlError>
}
 800b962:	bf00      	nop
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b082      	sub	sp, #8
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
 800b972:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	3b01      	subs	r3, #1
 800b97e:	2b02      	cmp	r3, #2
 800b980:	d80b      	bhi.n	800b99a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	885b      	ldrh	r3, [r3, #2]
 800b986:	2b01      	cmp	r3, #1
 800b988:	d10c      	bne.n	800b9a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f910 	bl	800bbb8 <USBD_CtlSendStatus>
      }
      break;
 800b998:	e004      	b.n	800b9a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b99a:	6839      	ldr	r1, [r7, #0]
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f840 	bl	800ba22 <USBD_CtlError>
      break;
 800b9a2:	e000      	b.n	800b9a6 <USBD_ClrFeature+0x3c>
      break;
 800b9a4:	bf00      	nop
  }
}
 800b9a6:	bf00      	nop
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b084      	sub	sp, #16
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	781a      	ldrb	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	781a      	ldrb	r2, [r3, #0]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f7ff fa17 	bl	800ae0c <SWAPBYTE>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f7ff fa0a 	bl	800ae0c <SWAPBYTE>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	3301      	adds	r3, #1
 800ba04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f7ff f9fd 	bl	800ae0c <SWAPBYTE>
 800ba12:	4603      	mov	r3, r0
 800ba14:	461a      	mov	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	80da      	strh	r2, [r3, #6]
}
 800ba1a:	bf00      	nop
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b082      	sub	sp, #8
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba2c:	2180      	movs	r1, #128	; 0x80
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f003 fe2e 	bl	800f690 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ba34:	2100      	movs	r1, #0
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f003 fe2a 	bl	800f690 <USBD_LL_StallEP>
}
 800ba3c:	bf00      	nop
 800ba3e:	3708      	adds	r7, #8
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba50:	2300      	movs	r3, #0
 800ba52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d036      	beq.n	800bac8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ba5e:	6938      	ldr	r0, [r7, #16]
 800ba60:	f000 f836 	bl	800bad0 <USBD_GetLen>
 800ba64:	4603      	mov	r3, r0
 800ba66:	3301      	adds	r3, #1
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	005b      	lsls	r3, r3, #1
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
 800ba74:	68ba      	ldr	r2, [r7, #8]
 800ba76:	4413      	add	r3, r2
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	7812      	ldrb	r2, [r2, #0]
 800ba7c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba7e:	7dfb      	ldrb	r3, [r7, #23]
 800ba80:	3301      	adds	r3, #1
 800ba82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba84:	7dfb      	ldrb	r3, [r7, #23]
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	4413      	add	r3, r2
 800ba8a:	2203      	movs	r2, #3
 800ba8c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba8e:	7dfb      	ldrb	r3, [r7, #23]
 800ba90:	3301      	adds	r3, #1
 800ba92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba94:	e013      	b.n	800babe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ba96:	7dfb      	ldrb	r3, [r7, #23]
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	7812      	ldrb	r2, [r2, #0]
 800baa0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	3301      	adds	r3, #1
 800baa6:	613b      	str	r3, [r7, #16]
    idx++;
 800baa8:	7dfb      	ldrb	r3, [r7, #23]
 800baaa:	3301      	adds	r3, #1
 800baac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800baae:	7dfb      	ldrb	r3, [r7, #23]
 800bab0:	68ba      	ldr	r2, [r7, #8]
 800bab2:	4413      	add	r3, r2
 800bab4:	2200      	movs	r2, #0
 800bab6:	701a      	strb	r2, [r3, #0]
    idx++;
 800bab8:	7dfb      	ldrb	r3, [r7, #23]
 800baba:	3301      	adds	r3, #1
 800babc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1e7      	bne.n	800ba96 <USBD_GetString+0x52>
 800bac6:	e000      	b.n	800baca <USBD_GetString+0x86>
    return;
 800bac8:	bf00      	nop
  }
}
 800baca:	3718      	adds	r7, #24
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bad8:	2300      	movs	r3, #0
 800bada:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bae0:	e005      	b.n	800baee <USBD_GetLen+0x1e>
  {
    len++;
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
 800bae4:	3301      	adds	r3, #1
 800bae6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	3301      	adds	r3, #1
 800baec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1f5      	bne.n	800bae2 <USBD_GetLen+0x12>
  }

  return len;
 800baf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2202      	movs	r2, #2
 800bb14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	2100      	movs	r1, #0
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f003 fe39 	bl	800f7a2 <USBD_LL_Transmit>

  return USBD_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b084      	sub	sp, #16
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f003 fe28 	bl	800f7a2 <USBD_LL_Transmit>

  return USBD_OK;
 800bb52:	2300      	movs	r3, #0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2203      	movs	r2, #3
 800bb6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	2100      	movs	r1, #0
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f003 fe2c 	bl	800f7e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b084      	sub	sp, #16
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	60f8      	str	r0, [r7, #12]
 800bb9e:	60b9      	str	r1, [r7, #8]
 800bba0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	2100      	movs	r1, #0
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f003 fe1b 	bl	800f7e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2204      	movs	r2, #4
 800bbc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bbc8:	2300      	movs	r3, #0
 800bbca:	2200      	movs	r2, #0
 800bbcc:	2100      	movs	r1, #0
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f003 fde7 	bl	800f7a2 <USBD_LL_Transmit>

  return USBD_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2205      	movs	r2, #5
 800bbea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbee:	2300      	movs	r3, #0
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f003 fdf5 	bl	800f7e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bc0e:	79fb      	ldrb	r3, [r7, #7]
 800bc10:	4a08      	ldr	r2, [pc, #32]	; (800bc34 <disk_status+0x30>)
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	4413      	add	r3, r2
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	79fa      	ldrb	r2, [r7, #7]
 800bc1c:	4905      	ldr	r1, [pc, #20]	; (800bc34 <disk_status+0x30>)
 800bc1e:	440a      	add	r2, r1
 800bc20:	7a12      	ldrb	r2, [r2, #8]
 800bc22:	4610      	mov	r0, r2
 800bc24:	4798      	blx	r3
 800bc26:	4603      	mov	r3, r0
 800bc28:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bc2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	200034e0 	.word	0x200034e0

0800bc38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	4603      	mov	r3, r0
 800bc40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bc46:	79fb      	ldrb	r3, [r7, #7]
 800bc48:	4a0d      	ldr	r2, [pc, #52]	; (800bc80 <disk_initialize+0x48>)
 800bc4a:	5cd3      	ldrb	r3, [r2, r3]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d111      	bne.n	800bc74 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bc50:	79fb      	ldrb	r3, [r7, #7]
 800bc52:	4a0b      	ldr	r2, [pc, #44]	; (800bc80 <disk_initialize+0x48>)
 800bc54:	2101      	movs	r1, #1
 800bc56:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bc58:	79fb      	ldrb	r3, [r7, #7]
 800bc5a:	4a09      	ldr	r2, [pc, #36]	; (800bc80 <disk_initialize+0x48>)
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	4413      	add	r3, r2
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	79fa      	ldrb	r2, [r7, #7]
 800bc66:	4906      	ldr	r1, [pc, #24]	; (800bc80 <disk_initialize+0x48>)
 800bc68:	440a      	add	r2, r1
 800bc6a:	7a12      	ldrb	r2, [r2, #8]
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	4798      	blx	r3
 800bc70:	4603      	mov	r3, r0
 800bc72:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	200034e0 	.word	0x200034e0

0800bc84 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bc84:	b590      	push	{r4, r7, lr}
 800bc86:	b087      	sub	sp, #28
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60b9      	str	r1, [r7, #8]
 800bc8c:	607a      	str	r2, [r7, #4]
 800bc8e:	603b      	str	r3, [r7, #0]
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
 800bc96:	4a0a      	ldr	r2, [pc, #40]	; (800bcc0 <disk_read+0x3c>)
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	4413      	add	r3, r2
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	689c      	ldr	r4, [r3, #8]
 800bca0:	7bfb      	ldrb	r3, [r7, #15]
 800bca2:	4a07      	ldr	r2, [pc, #28]	; (800bcc0 <disk_read+0x3c>)
 800bca4:	4413      	add	r3, r2
 800bca6:	7a18      	ldrb	r0, [r3, #8]
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	68b9      	ldr	r1, [r7, #8]
 800bcae:	47a0      	blx	r4
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bcb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	371c      	adds	r7, #28
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd90      	pop	{r4, r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	200034e0 	.word	0x200034e0

0800bcc4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bcc4:	b590      	push	{r4, r7, lr}
 800bcc6:	b087      	sub	sp, #28
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60b9      	str	r1, [r7, #8]
 800bccc:	607a      	str	r2, [r7, #4]
 800bcce:	603b      	str	r3, [r7, #0]
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
 800bcd6:	4a0a      	ldr	r2, [pc, #40]	; (800bd00 <disk_write+0x3c>)
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	4413      	add	r3, r2
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	68dc      	ldr	r4, [r3, #12]
 800bce0:	7bfb      	ldrb	r3, [r7, #15]
 800bce2:	4a07      	ldr	r2, [pc, #28]	; (800bd00 <disk_write+0x3c>)
 800bce4:	4413      	add	r3, r2
 800bce6:	7a18      	ldrb	r0, [r3, #8]
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	68b9      	ldr	r1, [r7, #8]
 800bcee:	47a0      	blx	r4
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bcf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	371c      	adds	r7, #28
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd90      	pop	{r4, r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	200034e0 	.word	0x200034e0

0800bd04 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	603a      	str	r2, [r7, #0]
 800bd0e:	71fb      	strb	r3, [r7, #7]
 800bd10:	460b      	mov	r3, r1
 800bd12:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bd14:	79fb      	ldrb	r3, [r7, #7]
 800bd16:	4a09      	ldr	r2, [pc, #36]	; (800bd3c <disk_ioctl+0x38>)
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	691b      	ldr	r3, [r3, #16]
 800bd20:	79fa      	ldrb	r2, [r7, #7]
 800bd22:	4906      	ldr	r1, [pc, #24]	; (800bd3c <disk_ioctl+0x38>)
 800bd24:	440a      	add	r2, r1
 800bd26:	7a10      	ldrb	r0, [r2, #8]
 800bd28:	79b9      	ldrb	r1, [r7, #6]
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	4798      	blx	r3
 800bd2e:	4603      	mov	r3, r0
 800bd30:	73fb      	strb	r3, [r7, #15]
  return res;
 800bd32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	200034e0 	.word	0x200034e0

0800bd40 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bd40:	b480      	push	{r7}
 800bd42:	b085      	sub	sp, #20
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bd50:	89fb      	ldrh	r3, [r7, #14]
 800bd52:	021b      	lsls	r3, r3, #8
 800bd54:	b21a      	sxth	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	b21b      	sxth	r3, r3
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	b21b      	sxth	r3, r3
 800bd60:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bd62:	89fb      	ldrh	r3, [r7, #14]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3714      	adds	r7, #20
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3303      	adds	r3, #3
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	021b      	lsls	r3, r3, #8
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	3202      	adds	r2, #2
 800bd88:	7812      	ldrb	r2, [r2, #0]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	021b      	lsls	r3, r3, #8
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	3201      	adds	r2, #1
 800bd96:	7812      	ldrb	r2, [r2, #0]
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	021b      	lsls	r3, r3, #8
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	7812      	ldrb	r2, [r2, #0]
 800bda4:	4313      	orrs	r3, r2
 800bda6:	60fb      	str	r3, [r7, #12]
	return rv;
 800bda8:	68fb      	ldr	r3, [r7, #12]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr

0800bdb6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bdb6:	b480      	push	{r7}
 800bdb8:	b083      	sub	sp, #12
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	1c5a      	adds	r2, r3, #1
 800bdc6:	607a      	str	r2, [r7, #4]
 800bdc8:	887a      	ldrh	r2, [r7, #2]
 800bdca:	b2d2      	uxtb	r2, r2
 800bdcc:	701a      	strb	r2, [r3, #0]
 800bdce:	887b      	ldrh	r3, [r7, #2]
 800bdd0:	0a1b      	lsrs	r3, r3, #8
 800bdd2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	1c5a      	adds	r2, r3, #1
 800bdd8:	607a      	str	r2, [r7, #4]
 800bdda:	887a      	ldrh	r2, [r7, #2]
 800bddc:	b2d2      	uxtb	r2, r2
 800bdde:	701a      	strb	r2, [r3, #0]
}
 800bde0:	bf00      	nop
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	1c5a      	adds	r2, r3, #1
 800bdfa:	607a      	str	r2, [r7, #4]
 800bdfc:	683a      	ldr	r2, [r7, #0]
 800bdfe:	b2d2      	uxtb	r2, r2
 800be00:	701a      	strb	r2, [r3, #0]
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	0a1b      	lsrs	r3, r3, #8
 800be06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	1c5a      	adds	r2, r3, #1
 800be0c:	607a      	str	r2, [r7, #4]
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	b2d2      	uxtb	r2, r2
 800be12:	701a      	strb	r2, [r3, #0]
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	0a1b      	lsrs	r3, r3, #8
 800be18:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	1c5a      	adds	r2, r3, #1
 800be1e:	607a      	str	r2, [r7, #4]
 800be20:	683a      	ldr	r2, [r7, #0]
 800be22:	b2d2      	uxtb	r2, r2
 800be24:	701a      	strb	r2, [r3, #0]
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	0a1b      	lsrs	r3, r3, #8
 800be2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	1c5a      	adds	r2, r3, #1
 800be30:	607a      	str	r2, [r7, #4]
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	b2d2      	uxtb	r2, r2
 800be36:	701a      	strb	r2, [r3, #0]
}
 800be38:	bf00      	nop
 800be3a:	370c      	adds	r7, #12
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800be44:	b480      	push	{r7}
 800be46:	b087      	sub	sp, #28
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00d      	beq.n	800be7a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800be5e:	693a      	ldr	r2, [r7, #16]
 800be60:	1c53      	adds	r3, r2, #1
 800be62:	613b      	str	r3, [r7, #16]
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	1c59      	adds	r1, r3, #1
 800be68:	6179      	str	r1, [r7, #20]
 800be6a:	7812      	ldrb	r2, [r2, #0]
 800be6c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	3b01      	subs	r3, #1
 800be72:	607b      	str	r3, [r7, #4]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1f1      	bne.n	800be5e <mem_cpy+0x1a>
	}
}
 800be7a:	bf00      	nop
 800be7c:	371c      	adds	r7, #28
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800be86:	b480      	push	{r7}
 800be88:	b087      	sub	sp, #28
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	60f8      	str	r0, [r7, #12]
 800be8e:	60b9      	str	r1, [r7, #8]
 800be90:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	1c5a      	adds	r2, r3, #1
 800be9a:	617a      	str	r2, [r7, #20]
 800be9c:	68ba      	ldr	r2, [r7, #8]
 800be9e:	b2d2      	uxtb	r2, r2
 800bea0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	3b01      	subs	r3, #1
 800bea6:	607b      	str	r3, [r7, #4]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1f3      	bne.n	800be96 <mem_set+0x10>
}
 800beae:	bf00      	nop
 800beb0:	bf00      	nop
 800beb2:	371c      	adds	r7, #28
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bebc:	b480      	push	{r7}
 800bebe:	b089      	sub	sp, #36	; 0x24
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	61fb      	str	r3, [r7, #28]
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bed0:	2300      	movs	r3, #0
 800bed2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	1c5a      	adds	r2, r3, #1
 800bed8:	61fa      	str	r2, [r7, #28]
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	4619      	mov	r1, r3
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	1c5a      	adds	r2, r3, #1
 800bee2:	61ba      	str	r2, [r7, #24]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	1acb      	subs	r3, r1, r3
 800bee8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	3b01      	subs	r3, #1
 800beee:	607b      	str	r3, [r7, #4]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d002      	beq.n	800befc <mem_cmp+0x40>
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d0eb      	beq.n	800bed4 <mem_cmp+0x18>

	return r;
 800befc:	697b      	ldr	r3, [r7, #20]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3724      	adds	r7, #36	; 0x24
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr

0800bf0a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bf0a:	b480      	push	{r7}
 800bf0c:	b083      	sub	sp, #12
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
 800bf12:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bf14:	e002      	b.n	800bf1c <chk_chr+0x12>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	607b      	str	r3, [r7, #4]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d005      	beq.n	800bf30 <chk_chr+0x26>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d1f2      	bne.n	800bf16 <chk_chr+0xc>
	return *str;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	781b      	ldrb	r3, [r3, #0]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b085      	sub	sp, #20
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60bb      	str	r3, [r7, #8]
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	60fb      	str	r3, [r7, #12]
 800bf52:	e029      	b.n	800bfa8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bf54:	4a27      	ldr	r2, [pc, #156]	; (800bff4 <chk_lock+0xb4>)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	011b      	lsls	r3, r3, #4
 800bf5a:	4413      	add	r3, r2
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d01d      	beq.n	800bf9e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bf62:	4a24      	ldr	r2, [pc, #144]	; (800bff4 <chk_lock+0xb4>)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	011b      	lsls	r3, r3, #4
 800bf68:	4413      	add	r3, r2
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d116      	bne.n	800bfa2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bf74:	4a1f      	ldr	r2, [pc, #124]	; (800bff4 <chk_lock+0xb4>)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	011b      	lsls	r3, r3, #4
 800bf7a:	4413      	add	r3, r2
 800bf7c:	3304      	adds	r3, #4
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d10c      	bne.n	800bfa2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bf88:	4a1a      	ldr	r2, [pc, #104]	; (800bff4 <chk_lock+0xb4>)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	011b      	lsls	r3, r3, #4
 800bf8e:	4413      	add	r3, r2
 800bf90:	3308      	adds	r3, #8
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d102      	bne.n	800bfa2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bf9c:	e007      	b.n	800bfae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	60fb      	str	r3, [r7, #12]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d9d2      	bls.n	800bf54 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d109      	bne.n	800bfc8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d102      	bne.n	800bfc0 <chk_lock+0x80>
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	2b02      	cmp	r3, #2
 800bfbe:	d101      	bne.n	800bfc4 <chk_lock+0x84>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	e010      	b.n	800bfe6 <chk_lock+0xa6>
 800bfc4:	2312      	movs	r3, #18
 800bfc6:	e00e      	b.n	800bfe6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d108      	bne.n	800bfe0 <chk_lock+0xa0>
 800bfce:	4a09      	ldr	r2, [pc, #36]	; (800bff4 <chk_lock+0xb4>)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	011b      	lsls	r3, r3, #4
 800bfd4:	4413      	add	r3, r2
 800bfd6:	330c      	adds	r3, #12
 800bfd8:	881b      	ldrh	r3, [r3, #0]
 800bfda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfde:	d101      	bne.n	800bfe4 <chk_lock+0xa4>
 800bfe0:	2310      	movs	r3, #16
 800bfe2:	e000      	b.n	800bfe6 <chk_lock+0xa6>
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3714      	adds	r7, #20
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	200032c0 	.word	0x200032c0

0800bff8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bffe:	2300      	movs	r3, #0
 800c000:	607b      	str	r3, [r7, #4]
 800c002:	e002      	b.n	800c00a <enq_lock+0x12>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	3301      	adds	r3, #1
 800c008:	607b      	str	r3, [r7, #4]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d806      	bhi.n	800c01e <enq_lock+0x26>
 800c010:	4a09      	ldr	r2, [pc, #36]	; (800c038 <enq_lock+0x40>)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	011b      	lsls	r3, r3, #4
 800c016:	4413      	add	r3, r2
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d1f2      	bne.n	800c004 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2b02      	cmp	r3, #2
 800c022:	bf14      	ite	ne
 800c024:	2301      	movne	r3, #1
 800c026:	2300      	moveq	r3, #0
 800c028:	b2db      	uxtb	r3, r3
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	370c      	adds	r7, #12
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	200032c0 	.word	0x200032c0

0800c03c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c046:	2300      	movs	r3, #0
 800c048:	60fb      	str	r3, [r7, #12]
 800c04a:	e01f      	b.n	800c08c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c04c:	4a41      	ldr	r2, [pc, #260]	; (800c154 <inc_lock+0x118>)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	011b      	lsls	r3, r3, #4
 800c052:	4413      	add	r3, r2
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d113      	bne.n	800c086 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c05e:	4a3d      	ldr	r2, [pc, #244]	; (800c154 <inc_lock+0x118>)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	011b      	lsls	r3, r3, #4
 800c064:	4413      	add	r3, r2
 800c066:	3304      	adds	r3, #4
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c06e:	429a      	cmp	r2, r3
 800c070:	d109      	bne.n	800c086 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c072:	4a38      	ldr	r2, [pc, #224]	; (800c154 <inc_lock+0x118>)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	011b      	lsls	r3, r3, #4
 800c078:	4413      	add	r3, r2
 800c07a:	3308      	adds	r3, #8
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c082:	429a      	cmp	r2, r3
 800c084:	d006      	beq.n	800c094 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	3301      	adds	r3, #1
 800c08a:	60fb      	str	r3, [r7, #12]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d9dc      	bls.n	800c04c <inc_lock+0x10>
 800c092:	e000      	b.n	800c096 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c094:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2b02      	cmp	r3, #2
 800c09a:	d132      	bne.n	800c102 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c09c:	2300      	movs	r3, #0
 800c09e:	60fb      	str	r3, [r7, #12]
 800c0a0:	e002      	b.n	800c0a8 <inc_lock+0x6c>
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	60fb      	str	r3, [r7, #12]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d806      	bhi.n	800c0bc <inc_lock+0x80>
 800c0ae:	4a29      	ldr	r2, [pc, #164]	; (800c154 <inc_lock+0x118>)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	011b      	lsls	r3, r3, #4
 800c0b4:	4413      	add	r3, r2
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1f2      	bne.n	800c0a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2b02      	cmp	r3, #2
 800c0c0:	d101      	bne.n	800c0c6 <inc_lock+0x8a>
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	e040      	b.n	800c148 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	4922      	ldr	r1, [pc, #136]	; (800c154 <inc_lock+0x118>)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	011b      	lsls	r3, r3, #4
 800c0d0:	440b      	add	r3, r1
 800c0d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	689a      	ldr	r2, [r3, #8]
 800c0d8:	491e      	ldr	r1, [pc, #120]	; (800c154 <inc_lock+0x118>)
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	011b      	lsls	r3, r3, #4
 800c0de:	440b      	add	r3, r1
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	695a      	ldr	r2, [r3, #20]
 800c0e8:	491a      	ldr	r1, [pc, #104]	; (800c154 <inc_lock+0x118>)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	011b      	lsls	r3, r3, #4
 800c0ee:	440b      	add	r3, r1
 800c0f0:	3308      	adds	r3, #8
 800c0f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c0f4:	4a17      	ldr	r2, [pc, #92]	; (800c154 <inc_lock+0x118>)
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	011b      	lsls	r3, r3, #4
 800c0fa:	4413      	add	r3, r2
 800c0fc:	330c      	adds	r3, #12
 800c0fe:	2200      	movs	r2, #0
 800c100:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d009      	beq.n	800c11c <inc_lock+0xe0>
 800c108:	4a12      	ldr	r2, [pc, #72]	; (800c154 <inc_lock+0x118>)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	011b      	lsls	r3, r3, #4
 800c10e:	4413      	add	r3, r2
 800c110:	330c      	adds	r3, #12
 800c112:	881b      	ldrh	r3, [r3, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <inc_lock+0xe0>
 800c118:	2300      	movs	r3, #0
 800c11a:	e015      	b.n	800c148 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d108      	bne.n	800c134 <inc_lock+0xf8>
 800c122:	4a0c      	ldr	r2, [pc, #48]	; (800c154 <inc_lock+0x118>)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	011b      	lsls	r3, r3, #4
 800c128:	4413      	add	r3, r2
 800c12a:	330c      	adds	r3, #12
 800c12c:	881b      	ldrh	r3, [r3, #0]
 800c12e:	3301      	adds	r3, #1
 800c130:	b29a      	uxth	r2, r3
 800c132:	e001      	b.n	800c138 <inc_lock+0xfc>
 800c134:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c138:	4906      	ldr	r1, [pc, #24]	; (800c154 <inc_lock+0x118>)
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	011b      	lsls	r3, r3, #4
 800c13e:	440b      	add	r3, r1
 800c140:	330c      	adds	r3, #12
 800c142:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	3301      	adds	r3, #1
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3714      	adds	r7, #20
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr
 800c154:	200032c0 	.word	0x200032c0

0800c158 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	3b01      	subs	r3, #1
 800c164:	607b      	str	r3, [r7, #4]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d825      	bhi.n	800c1b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800c16c:	4a17      	ldr	r2, [pc, #92]	; (800c1cc <dec_lock+0x74>)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	011b      	lsls	r3, r3, #4
 800c172:	4413      	add	r3, r2
 800c174:	330c      	adds	r3, #12
 800c176:	881b      	ldrh	r3, [r3, #0]
 800c178:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c17a:	89fb      	ldrh	r3, [r7, #14]
 800c17c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c180:	d101      	bne.n	800c186 <dec_lock+0x2e>
 800c182:	2300      	movs	r3, #0
 800c184:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c186:	89fb      	ldrh	r3, [r7, #14]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d002      	beq.n	800c192 <dec_lock+0x3a>
 800c18c:	89fb      	ldrh	r3, [r7, #14]
 800c18e:	3b01      	subs	r3, #1
 800c190:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c192:	4a0e      	ldr	r2, [pc, #56]	; (800c1cc <dec_lock+0x74>)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	011b      	lsls	r3, r3, #4
 800c198:	4413      	add	r3, r2
 800c19a:	330c      	adds	r3, #12
 800c19c:	89fa      	ldrh	r2, [r7, #14]
 800c19e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c1a0:	89fb      	ldrh	r3, [r7, #14]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d105      	bne.n	800c1b2 <dec_lock+0x5a>
 800c1a6:	4a09      	ldr	r2, [pc, #36]	; (800c1cc <dec_lock+0x74>)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	011b      	lsls	r3, r3, #4
 800c1ac:	4413      	add	r3, r2
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	737b      	strb	r3, [r7, #13]
 800c1b6:	e001      	b.n	800c1bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c1b8:	2302      	movs	r3, #2
 800c1ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c1bc:	7b7b      	ldrb	r3, [r7, #13]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3714      	adds	r7, #20
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	200032c0 	.word	0x200032c0

0800c1d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c1d8:	2300      	movs	r3, #0
 800c1da:	60fb      	str	r3, [r7, #12]
 800c1dc:	e010      	b.n	800c200 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c1de:	4a0d      	ldr	r2, [pc, #52]	; (800c214 <clear_lock+0x44>)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	011b      	lsls	r3, r3, #4
 800c1e4:	4413      	add	r3, r2
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d105      	bne.n	800c1fa <clear_lock+0x2a>
 800c1ee:	4a09      	ldr	r2, [pc, #36]	; (800c214 <clear_lock+0x44>)
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	011b      	lsls	r3, r3, #4
 800c1f4:	4413      	add	r3, r2
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	60fb      	str	r3, [r7, #12]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2b01      	cmp	r3, #1
 800c204:	d9eb      	bls.n	800c1de <clear_lock+0xe>
	}
}
 800c206:	bf00      	nop
 800c208:	bf00      	nop
 800c20a:	3714      	adds	r7, #20
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr
 800c214:	200032c0 	.word	0x200032c0

0800c218 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b086      	sub	sp, #24
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c220:	2300      	movs	r3, #0
 800c222:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	78db      	ldrb	r3, [r3, #3]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d034      	beq.n	800c296 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c230:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	7858      	ldrb	r0, [r3, #1]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c23c:	2301      	movs	r3, #1
 800c23e:	697a      	ldr	r2, [r7, #20]
 800c240:	f7ff fd40 	bl	800bcc4 <disk_write>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d002      	beq.n	800c250 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c24a:	2301      	movs	r3, #1
 800c24c:	73fb      	strb	r3, [r7, #15]
 800c24e:	e022      	b.n	800c296 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c25a:	697a      	ldr	r2, [r7, #20]
 800c25c:	1ad2      	subs	r2, r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	69db      	ldr	r3, [r3, #28]
 800c262:	429a      	cmp	r2, r3
 800c264:	d217      	bcs.n	800c296 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	789b      	ldrb	r3, [r3, #2]
 800c26a:	613b      	str	r3, [r7, #16]
 800c26c:	e010      	b.n	800c290 <sync_window+0x78>
					wsect += fs->fsize;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	69db      	ldr	r3, [r3, #28]
 800c272:	697a      	ldr	r2, [r7, #20]
 800c274:	4413      	add	r3, r2
 800c276:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	7858      	ldrb	r0, [r3, #1]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c282:	2301      	movs	r3, #1
 800c284:	697a      	ldr	r2, [r7, #20]
 800c286:	f7ff fd1d 	bl	800bcc4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	3b01      	subs	r3, #1
 800c28e:	613b      	str	r3, [r7, #16]
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d8eb      	bhi.n	800c26e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c296:	7bfb      	ldrb	r3, [r7, #15]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3718      	adds	r7, #24
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b2:	683a      	ldr	r2, [r7, #0]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d01b      	beq.n	800c2f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f7ff ffad 	bl	800c218 <sync_window>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c2c2:	7bfb      	ldrb	r3, [r7, #15]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d113      	bne.n	800c2f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	7858      	ldrb	r0, [r3, #1]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	683a      	ldr	r2, [r7, #0]
 800c2d6:	f7ff fcd5 	bl	800bc84 <disk_read>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d004      	beq.n	800c2ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c2e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	683a      	ldr	r2, [r7, #0]
 800c2ee:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
	...

0800c2fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f7ff ff87 	bl	800c218 <sync_window>
 800c30a:	4603      	mov	r3, r0
 800c30c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d158      	bne.n	800c3c6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	2b03      	cmp	r3, #3
 800c31a:	d148      	bne.n	800c3ae <sync_fs+0xb2>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	791b      	ldrb	r3, [r3, #4]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d144      	bne.n	800c3ae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	3334      	adds	r3, #52	; 0x34
 800c328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c32c:	2100      	movs	r1, #0
 800c32e:	4618      	mov	r0, r3
 800c330:	f7ff fda9 	bl	800be86 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	3334      	adds	r3, #52	; 0x34
 800c338:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c33c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c340:	4618      	mov	r0, r3
 800c342:	f7ff fd38 	bl	800bdb6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	3334      	adds	r3, #52	; 0x34
 800c34a:	4921      	ldr	r1, [pc, #132]	; (800c3d0 <sync_fs+0xd4>)
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7ff fd4d 	bl	800bdec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	3334      	adds	r3, #52	; 0x34
 800c356:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c35a:	491e      	ldr	r1, [pc, #120]	; (800c3d4 <sync_fs+0xd8>)
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7ff fd45 	bl	800bdec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	3334      	adds	r3, #52	; 0x34
 800c366:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	695b      	ldr	r3, [r3, #20]
 800c36e:	4619      	mov	r1, r3
 800c370:	4610      	mov	r0, r2
 800c372:	f7ff fd3b 	bl	800bdec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	3334      	adds	r3, #52	; 0x34
 800c37a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	4619      	mov	r1, r3
 800c384:	4610      	mov	r0, r2
 800c386:	f7ff fd31 	bl	800bdec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a1b      	ldr	r3, [r3, #32]
 800c38e:	1c5a      	adds	r2, r3, #1
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	7858      	ldrb	r0, [r3, #1]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	f7ff fc8e 	bl	800bcc4 <disk_write>
			fs->fsi_flag = 0;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	785b      	ldrb	r3, [r3, #1]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7ff fca4 	bl	800bd04 <disk_ioctl>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d001      	beq.n	800c3c6 <sync_fs+0xca>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	41615252 	.word	0x41615252
 800c3d4:	61417272 	.word	0x61417272

0800c3d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	3b02      	subs	r3, #2
 800c3e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	699b      	ldr	r3, [r3, #24]
 800c3ec:	3b02      	subs	r3, #2
 800c3ee:	683a      	ldr	r2, [r7, #0]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d301      	bcc.n	800c3f8 <clust2sect+0x20>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	e008      	b.n	800c40a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	895b      	ldrh	r3, [r3, #10]
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	fb03 f202 	mul.w	r2, r3, r2
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c408:	4413      	add	r3, r2
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	370c      	adds	r7, #12
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b086      	sub	sp, #24
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
 800c41e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d904      	bls.n	800c436 <get_fat+0x20>
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	683a      	ldr	r2, [r7, #0]
 800c432:	429a      	cmp	r2, r3
 800c434:	d302      	bcc.n	800c43c <get_fat+0x26>
		val = 1;	/* Internal error */
 800c436:	2301      	movs	r3, #1
 800c438:	617b      	str	r3, [r7, #20]
 800c43a:	e08f      	b.n	800c55c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c43c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c440:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	2b03      	cmp	r3, #3
 800c448:	d062      	beq.n	800c510 <get_fat+0xfa>
 800c44a:	2b03      	cmp	r3, #3
 800c44c:	dc7c      	bgt.n	800c548 <get_fat+0x132>
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d002      	beq.n	800c458 <get_fat+0x42>
 800c452:	2b02      	cmp	r3, #2
 800c454:	d042      	beq.n	800c4dc <get_fat+0xc6>
 800c456:	e077      	b.n	800c548 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	60fb      	str	r3, [r7, #12]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	085b      	lsrs	r3, r3, #1
 800c460:	68fa      	ldr	r2, [r7, #12]
 800c462:	4413      	add	r3, r2
 800c464:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	0a5b      	lsrs	r3, r3, #9
 800c46e:	4413      	add	r3, r2
 800c470:	4619      	mov	r1, r3
 800c472:	6938      	ldr	r0, [r7, #16]
 800c474:	f7ff ff14 	bl	800c2a0 <move_window>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d167      	bne.n	800c54e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	1c5a      	adds	r2, r3, #1
 800c482:	60fa      	str	r2, [r7, #12]
 800c484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c488:	693a      	ldr	r2, [r7, #16]
 800c48a:	4413      	add	r3, r2
 800c48c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c490:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	0a5b      	lsrs	r3, r3, #9
 800c49a:	4413      	add	r3, r2
 800c49c:	4619      	mov	r1, r3
 800c49e:	6938      	ldr	r0, [r7, #16]
 800c4a0:	f7ff fefe 	bl	800c2a0 <move_window>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d153      	bne.n	800c552 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4b0:	693a      	ldr	r2, [r7, #16]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c4b8:	021b      	lsls	r3, r3, #8
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	f003 0301 	and.w	r3, r3, #1
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <get_fat+0xbc>
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	091b      	lsrs	r3, r3, #4
 800c4d0:	e002      	b.n	800c4d8 <get_fat+0xc2>
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4d8:	617b      	str	r3, [r7, #20]
			break;
 800c4da:	e03f      	b.n	800c55c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	0a1b      	lsrs	r3, r3, #8
 800c4e4:	4413      	add	r3, r2
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	6938      	ldr	r0, [r7, #16]
 800c4ea:	f7ff fed9 	bl	800c2a0 <move_window>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d130      	bne.n	800c556 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	005b      	lsls	r3, r3, #1
 800c4fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c502:	4413      	add	r3, r2
 800c504:	4618      	mov	r0, r3
 800c506:	f7ff fc1b 	bl	800bd40 <ld_word>
 800c50a:	4603      	mov	r3, r0
 800c50c:	617b      	str	r3, [r7, #20]
			break;
 800c50e:	e025      	b.n	800c55c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	09db      	lsrs	r3, r3, #7
 800c518:	4413      	add	r3, r2
 800c51a:	4619      	mov	r1, r3
 800c51c:	6938      	ldr	r0, [r7, #16]
 800c51e:	f7ff febf 	bl	800c2a0 <move_window>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d118      	bne.n	800c55a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c536:	4413      	add	r3, r2
 800c538:	4618      	mov	r0, r3
 800c53a:	f7ff fc19 	bl	800bd70 <ld_dword>
 800c53e:	4603      	mov	r3, r0
 800c540:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c544:	617b      	str	r3, [r7, #20]
			break;
 800c546:	e009      	b.n	800c55c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c548:	2301      	movs	r3, #1
 800c54a:	617b      	str	r3, [r7, #20]
 800c54c:	e006      	b.n	800c55c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c54e:	bf00      	nop
 800c550:	e004      	b.n	800c55c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c552:	bf00      	nop
 800c554:	e002      	b.n	800c55c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c556:	bf00      	nop
 800c558:	e000      	b.n	800c55c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c55a:	bf00      	nop
		}
	}

	return val;
 800c55c:	697b      	ldr	r3, [r7, #20]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3718      	adds	r7, #24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c566:	b590      	push	{r4, r7, lr}
 800c568:	b089      	sub	sp, #36	; 0x24
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	60f8      	str	r0, [r7, #12]
 800c56e:	60b9      	str	r1, [r7, #8]
 800c570:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c572:	2302      	movs	r3, #2
 800c574:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	f240 80d9 	bls.w	800c730 <put_fat+0x1ca>
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	699b      	ldr	r3, [r3, #24]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	429a      	cmp	r2, r3
 800c586:	f080 80d3 	bcs.w	800c730 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	2b03      	cmp	r3, #3
 800c590:	f000 8096 	beq.w	800c6c0 <put_fat+0x15a>
 800c594:	2b03      	cmp	r3, #3
 800c596:	f300 80cb 	bgt.w	800c730 <put_fat+0x1ca>
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d002      	beq.n	800c5a4 <put_fat+0x3e>
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	d06e      	beq.n	800c680 <put_fat+0x11a>
 800c5a2:	e0c5      	b.n	800c730 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	61bb      	str	r3, [r7, #24]
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	085b      	lsrs	r3, r3, #1
 800c5ac:	69ba      	ldr	r2, [r7, #24]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	0a5b      	lsrs	r3, r3, #9
 800c5ba:	4413      	add	r3, r2
 800c5bc:	4619      	mov	r1, r3
 800c5be:	68f8      	ldr	r0, [r7, #12]
 800c5c0:	f7ff fe6e 	bl	800c2a0 <move_window>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c5c8:	7ffb      	ldrb	r3, [r7, #31]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f040 80a9 	bne.w	800c722 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	1c59      	adds	r1, r3, #1
 800c5da:	61b9      	str	r1, [r7, #24]
 800c5dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5e0:	4413      	add	r3, r2
 800c5e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	f003 0301 	and.w	r3, r3, #1
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00d      	beq.n	800c60a <put_fat+0xa4>
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	b25b      	sxtb	r3, r3
 800c5f4:	f003 030f 	and.w	r3, r3, #15
 800c5f8:	b25a      	sxtb	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	011b      	lsls	r3, r3, #4
 800c600:	b25b      	sxtb	r3, r3
 800c602:	4313      	orrs	r3, r2
 800c604:	b25b      	sxtb	r3, r3
 800c606:	b2db      	uxtb	r3, r3
 800c608:	e001      	b.n	800c60e <put_fat+0xa8>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	697a      	ldr	r2, [r7, #20]
 800c610:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2201      	movs	r2, #1
 800c616:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	0a5b      	lsrs	r3, r3, #9
 800c620:	4413      	add	r3, r2
 800c622:	4619      	mov	r1, r3
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f7ff fe3b 	bl	800c2a0 <move_window>
 800c62a:	4603      	mov	r3, r0
 800c62c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c62e:	7ffb      	ldrb	r3, [r7, #31]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d178      	bne.n	800c726 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c640:	4413      	add	r3, r2
 800c642:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	f003 0301 	and.w	r3, r3, #1
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d003      	beq.n	800c656 <put_fat+0xf0>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	091b      	lsrs	r3, r3, #4
 800c652:	b2db      	uxtb	r3, r3
 800c654:	e00e      	b.n	800c674 <put_fat+0x10e>
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	b25b      	sxtb	r3, r3
 800c65c:	f023 030f 	bic.w	r3, r3, #15
 800c660:	b25a      	sxtb	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	0a1b      	lsrs	r3, r3, #8
 800c666:	b25b      	sxtb	r3, r3
 800c668:	f003 030f 	and.w	r3, r3, #15
 800c66c:	b25b      	sxtb	r3, r3
 800c66e:	4313      	orrs	r3, r2
 800c670:	b25b      	sxtb	r3, r3
 800c672:	b2db      	uxtb	r3, r3
 800c674:	697a      	ldr	r2, [r7, #20]
 800c676:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2201      	movs	r2, #1
 800c67c:	70da      	strb	r2, [r3, #3]
			break;
 800c67e:	e057      	b.n	800c730 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	0a1b      	lsrs	r3, r3, #8
 800c688:	4413      	add	r3, r2
 800c68a:	4619      	mov	r1, r3
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	f7ff fe07 	bl	800c2a0 <move_window>
 800c692:	4603      	mov	r3, r0
 800c694:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c696:	7ffb      	ldrb	r3, [r7, #31]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d146      	bne.n	800c72a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	005b      	lsls	r3, r3, #1
 800c6a6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c6aa:	4413      	add	r3, r2
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	b292      	uxth	r2, r2
 800c6b0:	4611      	mov	r1, r2
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7ff fb7f 	bl	800bdb6 <st_word>
			fs->wflag = 1;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	70da      	strb	r2, [r3, #3]
			break;
 800c6be:	e037      	b.n	800c730 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	09db      	lsrs	r3, r3, #7
 800c6c8:	4413      	add	r3, r2
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f7ff fde7 	bl	800c2a0 <move_window>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c6d6:	7ffb      	ldrb	r3, [r7, #31]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d128      	bne.n	800c72e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c6f0:	4413      	add	r3, r2
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7ff fb3c 	bl	800bd70 <ld_dword>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c6fe:	4323      	orrs	r3, r4
 800c700:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c710:	4413      	add	r3, r2
 800c712:	6879      	ldr	r1, [r7, #4]
 800c714:	4618      	mov	r0, r3
 800c716:	f7ff fb69 	bl	800bdec <st_dword>
			fs->wflag = 1;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2201      	movs	r2, #1
 800c71e:	70da      	strb	r2, [r3, #3]
			break;
 800c720:	e006      	b.n	800c730 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c722:	bf00      	nop
 800c724:	e004      	b.n	800c730 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c726:	bf00      	nop
 800c728:	e002      	b.n	800c730 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c72a:	bf00      	nop
 800c72c:	e000      	b.n	800c730 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c72e:	bf00      	nop
		}
	}
	return res;
 800c730:	7ffb      	ldrb	r3, [r7, #31]
}
 800c732:	4618      	mov	r0, r3
 800c734:	3724      	adds	r7, #36	; 0x24
 800c736:	46bd      	mov	sp, r7
 800c738:	bd90      	pop	{r4, r7, pc}

0800c73a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b088      	sub	sp, #32
 800c73e:	af00      	add	r7, sp, #0
 800c740:	60f8      	str	r0, [r7, #12]
 800c742:	60b9      	str	r1, [r7, #8]
 800c744:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c746:	2300      	movs	r3, #0
 800c748:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	2b01      	cmp	r3, #1
 800c754:	d904      	bls.n	800c760 <remove_chain+0x26>
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	699b      	ldr	r3, [r3, #24]
 800c75a:	68ba      	ldr	r2, [r7, #8]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d301      	bcc.n	800c764 <remove_chain+0x2a>
 800c760:	2302      	movs	r3, #2
 800c762:	e04b      	b.n	800c7fc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00c      	beq.n	800c784 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c76a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c76e:	6879      	ldr	r1, [r7, #4]
 800c770:	69b8      	ldr	r0, [r7, #24]
 800c772:	f7ff fef8 	bl	800c566 <put_fat>
 800c776:	4603      	mov	r3, r0
 800c778:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c77a:	7ffb      	ldrb	r3, [r7, #31]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d001      	beq.n	800c784 <remove_chain+0x4a>
 800c780:	7ffb      	ldrb	r3, [r7, #31]
 800c782:	e03b      	b.n	800c7fc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c784:	68b9      	ldr	r1, [r7, #8]
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f7ff fe45 	bl	800c416 <get_fat>
 800c78c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d031      	beq.n	800c7f8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	2b01      	cmp	r3, #1
 800c798:	d101      	bne.n	800c79e <remove_chain+0x64>
 800c79a:	2302      	movs	r3, #2
 800c79c:	e02e      	b.n	800c7fc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7a4:	d101      	bne.n	800c7aa <remove_chain+0x70>
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e028      	b.n	800c7fc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	68b9      	ldr	r1, [r7, #8]
 800c7ae:	69b8      	ldr	r0, [r7, #24]
 800c7b0:	f7ff fed9 	bl	800c566 <put_fat>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c7b8:	7ffb      	ldrb	r3, [r7, #31]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d001      	beq.n	800c7c2 <remove_chain+0x88>
 800c7be:	7ffb      	ldrb	r3, [r7, #31]
 800c7c0:	e01c      	b.n	800c7fc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	695a      	ldr	r2, [r3, #20]
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	3b02      	subs	r3, #2
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d20b      	bcs.n	800c7e8 <remove_chain+0xae>
			fs->free_clst++;
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	695b      	ldr	r3, [r3, #20]
 800c7d4:	1c5a      	adds	r2, r3, #1
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	791b      	ldrb	r3, [r3, #4]
 800c7de:	f043 0301 	orr.w	r3, r3, #1
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	69bb      	ldr	r3, [r7, #24]
 800c7e6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c7ec:	69bb      	ldr	r3, [r7, #24]
 800c7ee:	699b      	ldr	r3, [r3, #24]
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d3c6      	bcc.n	800c784 <remove_chain+0x4a>
 800c7f6:	e000      	b.n	800c7fa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c7f8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3720      	adds	r7, #32
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b088      	sub	sp, #32
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d10d      	bne.n	800c836 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	691b      	ldr	r3, [r3, #16]
 800c81e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d004      	beq.n	800c830 <create_chain+0x2c>
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	699b      	ldr	r3, [r3, #24]
 800c82a:	69ba      	ldr	r2, [r7, #24]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d31b      	bcc.n	800c868 <create_chain+0x64>
 800c830:	2301      	movs	r3, #1
 800c832:	61bb      	str	r3, [r7, #24]
 800c834:	e018      	b.n	800c868 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c836:	6839      	ldr	r1, [r7, #0]
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f7ff fdec 	bl	800c416 <get_fat>
 800c83e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d801      	bhi.n	800c84a <create_chain+0x46>
 800c846:	2301      	movs	r3, #1
 800c848:	e070      	b.n	800c92c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c850:	d101      	bne.n	800c856 <create_chain+0x52>
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	e06a      	b.n	800c92c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	699b      	ldr	r3, [r3, #24]
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d201      	bcs.n	800c864 <create_chain+0x60>
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	e063      	b.n	800c92c <create_chain+0x128>
		scl = clst;
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	3301      	adds	r3, #1
 800c870:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	699b      	ldr	r3, [r3, #24]
 800c876:	69fa      	ldr	r2, [r7, #28]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d307      	bcc.n	800c88c <create_chain+0x88>
				ncl = 2;
 800c87c:	2302      	movs	r3, #2
 800c87e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c880:	69fa      	ldr	r2, [r7, #28]
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	429a      	cmp	r2, r3
 800c886:	d901      	bls.n	800c88c <create_chain+0x88>
 800c888:	2300      	movs	r3, #0
 800c88a:	e04f      	b.n	800c92c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c88c:	69f9      	ldr	r1, [r7, #28]
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f7ff fdc1 	bl	800c416 <get_fat>
 800c894:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d00e      	beq.n	800c8ba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d003      	beq.n	800c8aa <create_chain+0xa6>
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8a8:	d101      	bne.n	800c8ae <create_chain+0xaa>
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	e03e      	b.n	800c92c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c8ae:	69fa      	ldr	r2, [r7, #28]
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d1da      	bne.n	800c86c <create_chain+0x68>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	e038      	b.n	800c92c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c8ba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c8bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8c0:	69f9      	ldr	r1, [r7, #28]
 800c8c2:	6938      	ldr	r0, [r7, #16]
 800c8c4:	f7ff fe4f 	bl	800c566 <put_fat>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c8cc:	7dfb      	ldrb	r3, [r7, #23]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d109      	bne.n	800c8e6 <create_chain+0xe2>
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d006      	beq.n	800c8e6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c8d8:	69fa      	ldr	r2, [r7, #28]
 800c8da:	6839      	ldr	r1, [r7, #0]
 800c8dc:	6938      	ldr	r0, [r7, #16]
 800c8de:	f7ff fe42 	bl	800c566 <put_fat>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c8e6:	7dfb      	ldrb	r3, [r7, #23]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d116      	bne.n	800c91a <create_chain+0x116>
		fs->last_clst = ncl;
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	69fa      	ldr	r2, [r7, #28]
 800c8f0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	695a      	ldr	r2, [r3, #20]
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	699b      	ldr	r3, [r3, #24]
 800c8fa:	3b02      	subs	r3, #2
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d804      	bhi.n	800c90a <create_chain+0x106>
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	695b      	ldr	r3, [r3, #20]
 800c904:	1e5a      	subs	r2, r3, #1
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	791b      	ldrb	r3, [r3, #4]
 800c90e:	f043 0301 	orr.w	r3, r3, #1
 800c912:	b2da      	uxtb	r2, r3
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	711a      	strb	r2, [r3, #4]
 800c918:	e007      	b.n	800c92a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d102      	bne.n	800c926 <create_chain+0x122>
 800c920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c924:	e000      	b.n	800c928 <create_chain+0x124>
 800c926:	2301      	movs	r3, #1
 800c928:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c92a:	69fb      	ldr	r3, [r7, #28]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3720      	adds	r7, #32
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c934:	b480      	push	{r7}
 800c936:	b087      	sub	sp, #28
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c948:	3304      	adds	r3, #4
 800c94a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	0a5b      	lsrs	r3, r3, #9
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	8952      	ldrh	r2, [r2, #10]
 800c954:	fbb3 f3f2 	udiv	r3, r3, r2
 800c958:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	1d1a      	adds	r2, r3, #4
 800c95e:	613a      	str	r2, [r7, #16]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d101      	bne.n	800c96e <clmt_clust+0x3a>
 800c96a:	2300      	movs	r3, #0
 800c96c:	e010      	b.n	800c990 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c96e:	697a      	ldr	r2, [r7, #20]
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	429a      	cmp	r2, r3
 800c974:	d307      	bcc.n	800c986 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	1ad3      	subs	r3, r2, r3
 800c97c:	617b      	str	r3, [r7, #20]
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	3304      	adds	r3, #4
 800c982:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c984:	e7e9      	b.n	800c95a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c986:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	4413      	add	r3, r2
}
 800c990:	4618      	mov	r0, r3
 800c992:	371c      	adds	r7, #28
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9b2:	d204      	bcs.n	800c9be <dir_sdi+0x22>
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	f003 031f 	and.w	r3, r3, #31
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d001      	beq.n	800c9c2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c9be:	2302      	movs	r3, #2
 800c9c0:	e063      	b.n	800ca8a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	683a      	ldr	r2, [r7, #0]
 800c9c6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d106      	bne.n	800c9e2 <dir_sdi+0x46>
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d902      	bls.n	800c9e2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9e0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d10c      	bne.n	800ca02 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	095b      	lsrs	r3, r3, #5
 800c9ec:	693a      	ldr	r2, [r7, #16]
 800c9ee:	8912      	ldrh	r2, [r2, #8]
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d301      	bcc.n	800c9f8 <dir_sdi+0x5c>
 800c9f4:	2302      	movs	r3, #2
 800c9f6:	e048      	b.n	800ca8a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	61da      	str	r2, [r3, #28]
 800ca00:	e029      	b.n	800ca56 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	895b      	ldrh	r3, [r3, #10]
 800ca06:	025b      	lsls	r3, r3, #9
 800ca08:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ca0a:	e019      	b.n	800ca40 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6979      	ldr	r1, [r7, #20]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7ff fd00 	bl	800c416 <get_fat>
 800ca16:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca1e:	d101      	bne.n	800ca24 <dir_sdi+0x88>
 800ca20:	2301      	movs	r3, #1
 800ca22:	e032      	b.n	800ca8a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d904      	bls.n	800ca34 <dir_sdi+0x98>
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	699b      	ldr	r3, [r3, #24]
 800ca2e:	697a      	ldr	r2, [r7, #20]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d301      	bcc.n	800ca38 <dir_sdi+0x9c>
 800ca34:	2302      	movs	r3, #2
 800ca36:	e028      	b.n	800ca8a <dir_sdi+0xee>
			ofs -= csz;
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ca40:	683a      	ldr	r2, [r7, #0]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d2e1      	bcs.n	800ca0c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ca48:	6979      	ldr	r1, [r7, #20]
 800ca4a:	6938      	ldr	r0, [r7, #16]
 800ca4c:	f7ff fcc4 	bl	800c3d8 <clust2sect>
 800ca50:	4602      	mov	r2, r0
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	697a      	ldr	r2, [r7, #20]
 800ca5a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	69db      	ldr	r3, [r3, #28]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d101      	bne.n	800ca68 <dir_sdi+0xcc>
 800ca64:	2302      	movs	r3, #2
 800ca66:	e010      	b.n	800ca8a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	69da      	ldr	r2, [r3, #28]
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	0a5b      	lsrs	r3, r3, #9
 800ca70:	441a      	add	r2, r3
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca82:	441a      	add	r2, r3
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b086      	sub	sp, #24
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
 800ca9a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	695b      	ldr	r3, [r3, #20]
 800caa6:	3320      	adds	r3, #32
 800caa8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	69db      	ldr	r3, [r3, #28]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d003      	beq.n	800caba <dir_next+0x28>
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cab8:	d301      	bcc.n	800cabe <dir_next+0x2c>
 800caba:	2304      	movs	r3, #4
 800cabc:	e0aa      	b.n	800cc14 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f040 8098 	bne.w	800cbfa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	69db      	ldr	r3, [r3, #28]
 800cace:	1c5a      	adds	r2, r3, #1
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	699b      	ldr	r3, [r3, #24]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d10b      	bne.n	800caf4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	095b      	lsrs	r3, r3, #5
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	8912      	ldrh	r2, [r2, #8]
 800cae4:	4293      	cmp	r3, r2
 800cae6:	f0c0 8088 	bcc.w	800cbfa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	61da      	str	r2, [r3, #28]
 800caf0:	2304      	movs	r3, #4
 800caf2:	e08f      	b.n	800cc14 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	0a5b      	lsrs	r3, r3, #9
 800caf8:	68fa      	ldr	r2, [r7, #12]
 800cafa:	8952      	ldrh	r2, [r2, #10]
 800cafc:	3a01      	subs	r2, #1
 800cafe:	4013      	ands	r3, r2
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d17a      	bne.n	800cbfa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	699b      	ldr	r3, [r3, #24]
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	4610      	mov	r0, r2
 800cb0e:	f7ff fc82 	bl	800c416 <get_fat>
 800cb12:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d801      	bhi.n	800cb1e <dir_next+0x8c>
 800cb1a:	2302      	movs	r3, #2
 800cb1c:	e07a      	b.n	800cc14 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb24:	d101      	bne.n	800cb2a <dir_next+0x98>
 800cb26:	2301      	movs	r3, #1
 800cb28:	e074      	b.n	800cc14 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	699b      	ldr	r3, [r3, #24]
 800cb2e:	697a      	ldr	r2, [r7, #20]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d358      	bcc.n	800cbe6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d104      	bne.n	800cb44 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	61da      	str	r2, [r3, #28]
 800cb40:	2304      	movs	r3, #4
 800cb42:	e067      	b.n	800cc14 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	699b      	ldr	r3, [r3, #24]
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	4610      	mov	r0, r2
 800cb4e:	f7ff fe59 	bl	800c804 <create_chain>
 800cb52:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d101      	bne.n	800cb5e <dir_next+0xcc>
 800cb5a:	2307      	movs	r3, #7
 800cb5c:	e05a      	b.n	800cc14 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d101      	bne.n	800cb68 <dir_next+0xd6>
 800cb64:	2302      	movs	r3, #2
 800cb66:	e055      	b.n	800cc14 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb6e:	d101      	bne.n	800cb74 <dir_next+0xe2>
 800cb70:	2301      	movs	r3, #1
 800cb72:	e04f      	b.n	800cc14 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f7ff fb4f 	bl	800c218 <sync_window>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d001      	beq.n	800cb84 <dir_next+0xf2>
 800cb80:	2301      	movs	r3, #1
 800cb82:	e047      	b.n	800cc14 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	3334      	adds	r3, #52	; 0x34
 800cb88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7ff f979 	bl	800be86 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cb94:	2300      	movs	r3, #0
 800cb96:	613b      	str	r3, [r7, #16]
 800cb98:	6979      	ldr	r1, [r7, #20]
 800cb9a:	68f8      	ldr	r0, [r7, #12]
 800cb9c:	f7ff fc1c 	bl	800c3d8 <clust2sect>
 800cba0:	4602      	mov	r2, r0
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	631a      	str	r2, [r3, #48]	; 0x30
 800cba6:	e012      	b.n	800cbce <dir_next+0x13c>
						fs->wflag = 1;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cbae:	68f8      	ldr	r0, [r7, #12]
 800cbb0:	f7ff fb32 	bl	800c218 <sync_window>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d001      	beq.n	800cbbe <dir_next+0x12c>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e02a      	b.n	800cc14 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	613b      	str	r3, [r7, #16]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	631a      	str	r2, [r3, #48]	; 0x30
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	895b      	ldrh	r3, [r3, #10]
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d3e6      	bcc.n	800cba8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	1ad2      	subs	r2, r2, r3
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	697a      	ldr	r2, [r7, #20]
 800cbea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cbec:	6979      	ldr	r1, [r7, #20]
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f7ff fbf2 	bl	800c3d8 <clust2sect>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	68ba      	ldr	r2, [r7, #8]
 800cbfe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc0c:	441a      	add	r2, r3
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cc12:	2300      	movs	r3, #0
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3718      	adds	r7, #24
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b086      	sub	sp, #24
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f7ff feb4 	bl	800c99c <dir_sdi>
 800cc34:	4603      	mov	r3, r0
 800cc36:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc38:	7dfb      	ldrb	r3, [r7, #23]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d12b      	bne.n	800cc96 <dir_alloc+0x7a>
		n = 0;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	69db      	ldr	r3, [r3, #28]
 800cc46:	4619      	mov	r1, r3
 800cc48:	68f8      	ldr	r0, [r7, #12]
 800cc4a:	f7ff fb29 	bl	800c2a0 <move_window>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc52:	7dfb      	ldrb	r3, [r7, #23]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d11d      	bne.n	800cc94 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6a1b      	ldr	r3, [r3, #32]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	2be5      	cmp	r3, #229	; 0xe5
 800cc60:	d004      	beq.n	800cc6c <dir_alloc+0x50>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a1b      	ldr	r3, [r3, #32]
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d107      	bne.n	800cc7c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	613b      	str	r3, [r7, #16]
 800cc72:	693a      	ldr	r2, [r7, #16]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d102      	bne.n	800cc80 <dir_alloc+0x64>
 800cc7a:	e00c      	b.n	800cc96 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cc80:	2101      	movs	r1, #1
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f7ff ff05 	bl	800ca92 <dir_next>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cc8c:	7dfb      	ldrb	r3, [r7, #23]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d0d7      	beq.n	800cc42 <dir_alloc+0x26>
 800cc92:	e000      	b.n	800cc96 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cc94:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cc96:	7dfb      	ldrb	r3, [r7, #23]
 800cc98:	2b04      	cmp	r3, #4
 800cc9a:	d101      	bne.n	800cca0 <dir_alloc+0x84>
 800cc9c:	2307      	movs	r3, #7
 800cc9e:	75fb      	strb	r3, [r7, #23]
	return res;
 800cca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3718      	adds	r7, #24
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b084      	sub	sp, #16
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
 800ccb2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	331a      	adds	r3, #26
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7ff f841 	bl	800bd40 <ld_word>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	2b03      	cmp	r3, #3
 800ccc8:	d109      	bne.n	800ccde <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	3314      	adds	r3, #20
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7ff f836 	bl	800bd40 <ld_word>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	041b      	lsls	r3, r3, #16
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ccde:	68fb      	ldr	r3, [r7, #12]
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3710      	adds	r7, #16
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	331a      	adds	r3, #26
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	b292      	uxth	r2, r2
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7ff f859 	bl	800bdb6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b03      	cmp	r3, #3
 800cd0a:	d109      	bne.n	800cd20 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	f103 0214 	add.w	r2, r3, #20
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	0c1b      	lsrs	r3, r3, #16
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	4619      	mov	r1, r3
 800cd1a:	4610      	mov	r0, r2
 800cd1c:	f7ff f84b 	bl	800bdb6 <st_word>
	}
}
 800cd20:	bf00      	nop
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800cd28:	b590      	push	{r4, r7, lr}
 800cd2a:	b087      	sub	sp, #28
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	331a      	adds	r3, #26
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7ff f802 	bl	800bd40 <ld_word>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d001      	beq.n	800cd46 <cmp_lfn+0x1e>
 800cd42:	2300      	movs	r3, #0
 800cd44:	e059      	b.n	800cdfa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd4e:	1e5a      	subs	r2, r3, #1
 800cd50:	4613      	mov	r3, r2
 800cd52:	005b      	lsls	r3, r3, #1
 800cd54:	4413      	add	r3, r2
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4413      	add	r3, r2
 800cd5a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	81fb      	strh	r3, [r7, #14]
 800cd60:	2300      	movs	r3, #0
 800cd62:	613b      	str	r3, [r7, #16]
 800cd64:	e033      	b.n	800cdce <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cd66:	4a27      	ldr	r2, [pc, #156]	; (800ce04 <cmp_lfn+0xdc>)
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	461a      	mov	r2, r3
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	4413      	add	r3, r2
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fe ffe3 	bl	800bd40 <ld_word>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cd7e:	89fb      	ldrh	r3, [r7, #14]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d01a      	beq.n	800cdba <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	2bfe      	cmp	r3, #254	; 0xfe
 800cd88:	d812      	bhi.n	800cdb0 <cmp_lfn+0x88>
 800cd8a:	89bb      	ldrh	r3, [r7, #12]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f001 ffcd 	bl	800ed2c <ff_wtoupper>
 800cd92:	4603      	mov	r3, r0
 800cd94:	461c      	mov	r4, r3
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	1c5a      	adds	r2, r3, #1
 800cd9a:	617a      	str	r2, [r7, #20]
 800cd9c:	005b      	lsls	r3, r3, #1
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	4413      	add	r3, r2
 800cda2:	881b      	ldrh	r3, [r3, #0]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f001 ffc1 	bl	800ed2c <ff_wtoupper>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	429c      	cmp	r4, r3
 800cdae:	d001      	beq.n	800cdb4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	e022      	b.n	800cdfa <cmp_lfn+0xd2>
			}
			wc = uc;
 800cdb4:	89bb      	ldrh	r3, [r7, #12]
 800cdb6:	81fb      	strh	r3, [r7, #14]
 800cdb8:	e006      	b.n	800cdc8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cdba:	89bb      	ldrh	r3, [r7, #12]
 800cdbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d001      	beq.n	800cdc8 <cmp_lfn+0xa0>
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	e018      	b.n	800cdfa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	613b      	str	r3, [r7, #16]
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	2b0c      	cmp	r3, #12
 800cdd2:	d9c8      	bls.n	800cd66 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d00b      	beq.n	800cdf8 <cmp_lfn+0xd0>
 800cde0:	89fb      	ldrh	r3, [r7, #14]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d008      	beq.n	800cdf8 <cmp_lfn+0xd0>
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	4413      	add	r3, r2
 800cdee:	881b      	ldrh	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d001      	beq.n	800cdf8 <cmp_lfn+0xd0>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	e000      	b.n	800cdfa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cdf8:	2301      	movs	r3, #1
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	371c      	adds	r7, #28
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd90      	pop	{r4, r7, pc}
 800ce02:	bf00      	nop
 800ce04:	0801112c 	.word	0x0801112c

0800ce08 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	331a      	adds	r3, #26
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fe ff92 	bl	800bd40 <ld_word>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <pick_lfn+0x1e>
 800ce22:	2300      	movs	r3, #0
 800ce24:	e04d      	b.n	800cec2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce2e:	1e5a      	subs	r2, r3, #1
 800ce30:	4613      	mov	r3, r2
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	4413      	add	r3, r2
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	4413      	add	r3, r2
 800ce3a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	81fb      	strh	r3, [r7, #14]
 800ce40:	2300      	movs	r3, #0
 800ce42:	613b      	str	r3, [r7, #16]
 800ce44:	e028      	b.n	800ce98 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ce46:	4a21      	ldr	r2, [pc, #132]	; (800cecc <pick_lfn+0xc4>)
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	461a      	mov	r2, r3
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	4413      	add	r3, r2
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7fe ff73 	bl	800bd40 <ld_word>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ce5e:	89fb      	ldrh	r3, [r7, #14]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d00f      	beq.n	800ce84 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	2bfe      	cmp	r3, #254	; 0xfe
 800ce68:	d901      	bls.n	800ce6e <pick_lfn+0x66>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	e029      	b.n	800cec2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ce6e:	89bb      	ldrh	r3, [r7, #12]
 800ce70:	81fb      	strh	r3, [r7, #14]
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	1c5a      	adds	r2, r3, #1
 800ce76:	617a      	str	r2, [r7, #20]
 800ce78:	005b      	lsls	r3, r3, #1
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	89fa      	ldrh	r2, [r7, #14]
 800ce80:	801a      	strh	r2, [r3, #0]
 800ce82:	e006      	b.n	800ce92 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ce84:	89bb      	ldrh	r3, [r7, #12]
 800ce86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d001      	beq.n	800ce92 <pick_lfn+0x8a>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	e017      	b.n	800cec2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	3301      	adds	r3, #1
 800ce96:	613b      	str	r3, [r7, #16]
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	2b0c      	cmp	r3, #12
 800ce9c:	d9d3      	bls.n	800ce46 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00a      	beq.n	800cec0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	2bfe      	cmp	r3, #254	; 0xfe
 800ceae:	d901      	bls.n	800ceb4 <pick_lfn+0xac>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	e006      	b.n	800cec2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	005b      	lsls	r3, r3, #1
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	4413      	add	r3, r2
 800cebc:	2200      	movs	r2, #0
 800cebe:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800cec0:	2301      	movs	r3, #1
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3718      	adds	r7, #24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	0801112c 	.word	0x0801112c

0800ced0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b088      	sub	sp, #32
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	4611      	mov	r1, r2
 800cedc:	461a      	mov	r2, r3
 800cede:	460b      	mov	r3, r1
 800cee0:	71fb      	strb	r3, [r7, #7]
 800cee2:	4613      	mov	r3, r2
 800cee4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	330d      	adds	r3, #13
 800ceea:	79ba      	ldrb	r2, [r7, #6]
 800ceec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	330b      	adds	r3, #11
 800cef2:	220f      	movs	r2, #15
 800cef4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	330c      	adds	r3, #12
 800cefa:	2200      	movs	r2, #0
 800cefc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	331a      	adds	r3, #26
 800cf02:	2100      	movs	r1, #0
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7fe ff56 	bl	800bdb6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800cf0a:	79fb      	ldrb	r3, [r7, #7]
 800cf0c:	1e5a      	subs	r2, r3, #1
 800cf0e:	4613      	mov	r3, r2
 800cf10:	005b      	lsls	r3, r3, #1
 800cf12:	4413      	add	r3, r2
 800cf14:	009b      	lsls	r3, r3, #2
 800cf16:	4413      	add	r3, r2
 800cf18:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	82fb      	strh	r3, [r7, #22]
 800cf1e:	2300      	movs	r3, #0
 800cf20:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cf22:	8afb      	ldrh	r3, [r7, #22]
 800cf24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d007      	beq.n	800cf3c <put_lfn+0x6c>
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	1c5a      	adds	r2, r3, #1
 800cf30:	61fa      	str	r2, [r7, #28]
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	4413      	add	r3, r2
 800cf38:	881b      	ldrh	r3, [r3, #0]
 800cf3a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800cf3c:	4a17      	ldr	r2, [pc, #92]	; (800cf9c <put_lfn+0xcc>)
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	4413      	add	r3, r2
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	461a      	mov	r2, r3
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	4413      	add	r3, r2
 800cf4a:	8afa      	ldrh	r2, [r7, #22]
 800cf4c:	4611      	mov	r1, r2
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fe ff31 	bl	800bdb6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cf54:	8afb      	ldrh	r3, [r7, #22]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d102      	bne.n	800cf60 <put_lfn+0x90>
 800cf5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf5e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	3301      	adds	r3, #1
 800cf64:	61bb      	str	r3, [r7, #24]
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	2b0c      	cmp	r3, #12
 800cf6a:	d9da      	bls.n	800cf22 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800cf6c:	8afb      	ldrh	r3, [r7, #22]
 800cf6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d006      	beq.n	800cf84 <put_lfn+0xb4>
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	005b      	lsls	r3, r3, #1
 800cf7a:	68fa      	ldr	r2, [r7, #12]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	881b      	ldrh	r3, [r3, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d103      	bne.n	800cf8c <put_lfn+0xbc>
 800cf84:	79fb      	ldrb	r3, [r7, #7]
 800cf86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf8a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	79fa      	ldrb	r2, [r7, #7]
 800cf90:	701a      	strb	r2, [r3, #0]
}
 800cf92:	bf00      	nop
 800cf94:	3720      	adds	r7, #32
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	0801112c 	.word	0x0801112c

0800cfa0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b08c      	sub	sp, #48	; 0x30
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
 800cfac:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800cfae:	220b      	movs	r2, #11
 800cfb0:	68b9      	ldr	r1, [r7, #8]
 800cfb2:	68f8      	ldr	r0, [r7, #12]
 800cfb4:	f7fe ff46 	bl	800be44 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	2b05      	cmp	r3, #5
 800cfbc:	d929      	bls.n	800d012 <gen_numname+0x72>
		sr = seq;
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800cfc2:	e020      	b.n	800d006 <gen_numname+0x66>
			wc = *lfn++;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	1c9a      	adds	r2, r3, #2
 800cfc8:	607a      	str	r2, [r7, #4]
 800cfca:	881b      	ldrh	r3, [r3, #0]
 800cfcc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800cfce:	2300      	movs	r3, #0
 800cfd0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfd2:	e015      	b.n	800d000 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	005a      	lsls	r2, r3, #1
 800cfd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cfda:	f003 0301 	and.w	r3, r3, #1
 800cfde:	4413      	add	r3, r2
 800cfe0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cfe2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cfe4:	085b      	lsrs	r3, r3, #1
 800cfe6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d003      	beq.n	800cffa <gen_numname+0x5a>
 800cff2:	69fa      	ldr	r2, [r7, #28]
 800cff4:	4b30      	ldr	r3, [pc, #192]	; (800d0b8 <gen_numname+0x118>)
 800cff6:	4053      	eors	r3, r2
 800cff8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffc:	3301      	adds	r3, #1
 800cffe:	62bb      	str	r3, [r7, #40]	; 0x28
 800d000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d002:	2b0f      	cmp	r3, #15
 800d004:	d9e6      	bls.n	800cfd4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	881b      	ldrh	r3, [r3, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d1da      	bne.n	800cfc4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d012:	2307      	movs	r3, #7
 800d014:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	f003 030f 	and.w	r3, r3, #15
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	3330      	adds	r3, #48	; 0x30
 800d022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d02a:	2b39      	cmp	r3, #57	; 0x39
 800d02c:	d904      	bls.n	800d038 <gen_numname+0x98>
 800d02e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d032:	3307      	adds	r3, #7
 800d034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03a:	1e5a      	subs	r2, r3, #1
 800d03c:	62ba      	str	r2, [r7, #40]	; 0x28
 800d03e:	3330      	adds	r3, #48	; 0x30
 800d040:	443b      	add	r3, r7
 800d042:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d046:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	091b      	lsrs	r3, r3, #4
 800d04e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d1df      	bne.n	800d016 <gen_numname+0x76>
	ns[i] = '~';
 800d056:	f107 0214 	add.w	r2, r7, #20
 800d05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05c:	4413      	add	r3, r2
 800d05e:	227e      	movs	r2, #126	; 0x7e
 800d060:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d062:	2300      	movs	r3, #0
 800d064:	627b      	str	r3, [r7, #36]	; 0x24
 800d066:	e002      	b.n	800d06e <gen_numname+0xce>
 800d068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06a:	3301      	adds	r3, #1
 800d06c:	627b      	str	r3, [r7, #36]	; 0x24
 800d06e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	429a      	cmp	r2, r3
 800d074:	d205      	bcs.n	800d082 <gen_numname+0xe2>
 800d076:	68fa      	ldr	r2, [r7, #12]
 800d078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07a:	4413      	add	r3, r2
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	2b20      	cmp	r3, #32
 800d080:	d1f2      	bne.n	800d068 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d084:	2b07      	cmp	r3, #7
 800d086:	d807      	bhi.n	800d098 <gen_numname+0xf8>
 800d088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08a:	1c5a      	adds	r2, r3, #1
 800d08c:	62ba      	str	r2, [r7, #40]	; 0x28
 800d08e:	3330      	adds	r3, #48	; 0x30
 800d090:	443b      	add	r3, r7
 800d092:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d096:	e000      	b.n	800d09a <gen_numname+0xfa>
 800d098:	2120      	movs	r1, #32
 800d09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09c:	1c5a      	adds	r2, r3, #1
 800d09e:	627a      	str	r2, [r7, #36]	; 0x24
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	460a      	mov	r2, r1
 800d0a6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0aa:	2b07      	cmp	r3, #7
 800d0ac:	d9e9      	bls.n	800d082 <gen_numname+0xe2>
}
 800d0ae:	bf00      	nop
 800d0b0:	bf00      	nop
 800d0b2:	3730      	adds	r7, #48	; 0x30
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	00011021 	.word	0x00011021

0800d0bc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d0c8:	230b      	movs	r3, #11
 800d0ca:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d0cc:	7bfb      	ldrb	r3, [r7, #15]
 800d0ce:	b2da      	uxtb	r2, r3
 800d0d0:	0852      	lsrs	r2, r2, #1
 800d0d2:	01db      	lsls	r3, r3, #7
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	b2da      	uxtb	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	1c59      	adds	r1, r3, #1
 800d0dc:	6079      	str	r1, [r7, #4]
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	3b01      	subs	r3, #1
 800d0e8:	60bb      	str	r3, [r7, #8]
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d1ed      	bne.n	800d0cc <sum_sfn+0x10>
	return sum;
 800d0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3714      	adds	r7, #20
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b086      	sub	sp, #24
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
 800d106:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d108:	2304      	movs	r3, #4
 800d10a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d112:	23ff      	movs	r3, #255	; 0xff
 800d114:	757b      	strb	r3, [r7, #21]
 800d116:	23ff      	movs	r3, #255	; 0xff
 800d118:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d11a:	e081      	b.n	800d220 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	69db      	ldr	r3, [r3, #28]
 800d120:	4619      	mov	r1, r3
 800d122:	6938      	ldr	r0, [r7, #16]
 800d124:	f7ff f8bc 	bl	800c2a0 <move_window>
 800d128:	4603      	mov	r3, r0
 800d12a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d12c:	7dfb      	ldrb	r3, [r7, #23]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d17c      	bne.n	800d22c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6a1b      	ldr	r3, [r3, #32]
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d13a:	7dbb      	ldrb	r3, [r7, #22]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d102      	bne.n	800d146 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d140:	2304      	movs	r3, #4
 800d142:	75fb      	strb	r3, [r7, #23]
 800d144:	e077      	b.n	800d236 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a1b      	ldr	r3, [r3, #32]
 800d14a:	330b      	adds	r3, #11
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d152:	73fb      	strb	r3, [r7, #15]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	7bfa      	ldrb	r2, [r7, #15]
 800d158:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d15a:	7dbb      	ldrb	r3, [r7, #22]
 800d15c:	2be5      	cmp	r3, #229	; 0xe5
 800d15e:	d00e      	beq.n	800d17e <dir_read+0x80>
 800d160:	7dbb      	ldrb	r3, [r7, #22]
 800d162:	2b2e      	cmp	r3, #46	; 0x2e
 800d164:	d00b      	beq.n	800d17e <dir_read+0x80>
 800d166:	7bfb      	ldrb	r3, [r7, #15]
 800d168:	f023 0320 	bic.w	r3, r3, #32
 800d16c:	2b08      	cmp	r3, #8
 800d16e:	bf0c      	ite	eq
 800d170:	2301      	moveq	r3, #1
 800d172:	2300      	movne	r3, #0
 800d174:	b2db      	uxtb	r3, r3
 800d176:	461a      	mov	r2, r3
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d002      	beq.n	800d184 <dir_read+0x86>
				ord = 0xFF;
 800d17e:	23ff      	movs	r3, #255	; 0xff
 800d180:	757b      	strb	r3, [r7, #21]
 800d182:	e044      	b.n	800d20e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d184:	7bfb      	ldrb	r3, [r7, #15]
 800d186:	2b0f      	cmp	r3, #15
 800d188:	d12f      	bne.n	800d1ea <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d18a:	7dbb      	ldrb	r3, [r7, #22]
 800d18c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d190:	2b00      	cmp	r3, #0
 800d192:	d00d      	beq.n	800d1b0 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6a1b      	ldr	r3, [r3, #32]
 800d198:	7b5b      	ldrb	r3, [r3, #13]
 800d19a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d19c:	7dbb      	ldrb	r3, [r7, #22]
 800d19e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1a2:	75bb      	strb	r3, [r7, #22]
 800d1a4:	7dbb      	ldrb	r3, [r7, #22]
 800d1a6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	695a      	ldr	r2, [r3, #20]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d1b0:	7dba      	ldrb	r2, [r7, #22]
 800d1b2:	7d7b      	ldrb	r3, [r7, #21]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d115      	bne.n	800d1e4 <dir_read+0xe6>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6a1b      	ldr	r3, [r3, #32]
 800d1bc:	330d      	adds	r3, #13
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	7d3a      	ldrb	r2, [r7, #20]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d10e      	bne.n	800d1e4 <dir_read+0xe6>
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	68da      	ldr	r2, [r3, #12]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6a1b      	ldr	r3, [r3, #32]
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	4610      	mov	r0, r2
 800d1d2:	f7ff fe19 	bl	800ce08 <pick_lfn>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d003      	beq.n	800d1e4 <dir_read+0xe6>
 800d1dc:	7d7b      	ldrb	r3, [r7, #21]
 800d1de:	3b01      	subs	r3, #1
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	e000      	b.n	800d1e6 <dir_read+0xe8>
 800d1e4:	23ff      	movs	r3, #255	; 0xff
 800d1e6:	757b      	strb	r3, [r7, #21]
 800d1e8:	e011      	b.n	800d20e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d1ea:	7d7b      	ldrb	r3, [r7, #21]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d109      	bne.n	800d204 <dir_read+0x106>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6a1b      	ldr	r3, [r3, #32]
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7ff ff61 	bl	800d0bc <sum_sfn>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	7d3b      	ldrb	r3, [r7, #20]
 800d200:	4293      	cmp	r3, r2
 800d202:	d015      	beq.n	800d230 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d20a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d20c:	e010      	b.n	800d230 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d20e:	2100      	movs	r1, #0
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f7ff fc3e 	bl	800ca92 <dir_next>
 800d216:	4603      	mov	r3, r0
 800d218:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d21a:	7dfb      	ldrb	r3, [r7, #23]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d109      	bne.n	800d234 <dir_read+0x136>
	while (dp->sect) {
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	69db      	ldr	r3, [r3, #28]
 800d224:	2b00      	cmp	r3, #0
 800d226:	f47f af79 	bne.w	800d11c <dir_read+0x1e>
 800d22a:	e004      	b.n	800d236 <dir_read+0x138>
		if (res != FR_OK) break;
 800d22c:	bf00      	nop
 800d22e:	e002      	b.n	800d236 <dir_read+0x138>
					break;
 800d230:	bf00      	nop
 800d232:	e000      	b.n	800d236 <dir_read+0x138>
		if (res != FR_OK) break;
 800d234:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d236:	7dfb      	ldrb	r3, [r7, #23]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d002      	beq.n	800d242 <dir_read+0x144>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2200      	movs	r2, #0
 800d240:	61da      	str	r2, [r3, #28]
	return res;
 800d242:	7dfb      	ldrb	r3, [r7, #23]
}
 800d244:	4618      	mov	r0, r3
 800d246:	3718      	adds	r7, #24
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b086      	sub	sp, #24
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d25a:	2100      	movs	r1, #0
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f7ff fb9d 	bl	800c99c <dir_sdi>
 800d262:	4603      	mov	r3, r0
 800d264:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d266:	7dfb      	ldrb	r3, [r7, #23]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d001      	beq.n	800d270 <dir_find+0x24>
 800d26c:	7dfb      	ldrb	r3, [r7, #23]
 800d26e:	e0a9      	b.n	800d3c4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d270:	23ff      	movs	r3, #255	; 0xff
 800d272:	753b      	strb	r3, [r7, #20]
 800d274:	7d3b      	ldrb	r3, [r7, #20]
 800d276:	757b      	strb	r3, [r7, #21]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d27e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	69db      	ldr	r3, [r3, #28]
 800d284:	4619      	mov	r1, r3
 800d286:	6938      	ldr	r0, [r7, #16]
 800d288:	f7ff f80a 	bl	800c2a0 <move_window>
 800d28c:	4603      	mov	r3, r0
 800d28e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d290:	7dfb      	ldrb	r3, [r7, #23]
 800d292:	2b00      	cmp	r3, #0
 800d294:	f040 8090 	bne.w	800d3b8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6a1b      	ldr	r3, [r3, #32]
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d2a0:	7dbb      	ldrb	r3, [r7, #22]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d102      	bne.n	800d2ac <dir_find+0x60>
 800d2a6:	2304      	movs	r3, #4
 800d2a8:	75fb      	strb	r3, [r7, #23]
 800d2aa:	e08a      	b.n	800d3c2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6a1b      	ldr	r3, [r3, #32]
 800d2b0:	330b      	adds	r3, #11
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2b8:	73fb      	strb	r3, [r7, #15]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	7bfa      	ldrb	r2, [r7, #15]
 800d2be:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d2c0:	7dbb      	ldrb	r3, [r7, #22]
 800d2c2:	2be5      	cmp	r3, #229	; 0xe5
 800d2c4:	d007      	beq.n	800d2d6 <dir_find+0x8a>
 800d2c6:	7bfb      	ldrb	r3, [r7, #15]
 800d2c8:	f003 0308 	and.w	r3, r3, #8
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d009      	beq.n	800d2e4 <dir_find+0x98>
 800d2d0:	7bfb      	ldrb	r3, [r7, #15]
 800d2d2:	2b0f      	cmp	r3, #15
 800d2d4:	d006      	beq.n	800d2e4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d2d6:	23ff      	movs	r3, #255	; 0xff
 800d2d8:	757b      	strb	r3, [r7, #21]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2e0:	631a      	str	r2, [r3, #48]	; 0x30
 800d2e2:	e05e      	b.n	800d3a2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d2e4:	7bfb      	ldrb	r3, [r7, #15]
 800d2e6:	2b0f      	cmp	r3, #15
 800d2e8:	d136      	bne.n	800d358 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d154      	bne.n	800d3a2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d2f8:	7dbb      	ldrb	r3, [r7, #22]
 800d2fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00d      	beq.n	800d31e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6a1b      	ldr	r3, [r3, #32]
 800d306:	7b5b      	ldrb	r3, [r3, #13]
 800d308:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d30a:	7dbb      	ldrb	r3, [r7, #22]
 800d30c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d310:	75bb      	strb	r3, [r7, #22]
 800d312:	7dbb      	ldrb	r3, [r7, #22]
 800d314:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	695a      	ldr	r2, [r3, #20]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d31e:	7dba      	ldrb	r2, [r7, #22]
 800d320:	7d7b      	ldrb	r3, [r7, #21]
 800d322:	429a      	cmp	r2, r3
 800d324:	d115      	bne.n	800d352 <dir_find+0x106>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6a1b      	ldr	r3, [r3, #32]
 800d32a:	330d      	adds	r3, #13
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	7d3a      	ldrb	r2, [r7, #20]
 800d330:	429a      	cmp	r2, r3
 800d332:	d10e      	bne.n	800d352 <dir_find+0x106>
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	68da      	ldr	r2, [r3, #12]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6a1b      	ldr	r3, [r3, #32]
 800d33c:	4619      	mov	r1, r3
 800d33e:	4610      	mov	r0, r2
 800d340:	f7ff fcf2 	bl	800cd28 <cmp_lfn>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d003      	beq.n	800d352 <dir_find+0x106>
 800d34a:	7d7b      	ldrb	r3, [r7, #21]
 800d34c:	3b01      	subs	r3, #1
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	e000      	b.n	800d354 <dir_find+0x108>
 800d352:	23ff      	movs	r3, #255	; 0xff
 800d354:	757b      	strb	r3, [r7, #21]
 800d356:	e024      	b.n	800d3a2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d358:	7d7b      	ldrb	r3, [r7, #21]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d109      	bne.n	800d372 <dir_find+0x126>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6a1b      	ldr	r3, [r3, #32]
 800d362:	4618      	mov	r0, r3
 800d364:	f7ff feaa 	bl	800d0bc <sum_sfn>
 800d368:	4603      	mov	r3, r0
 800d36a:	461a      	mov	r2, r3
 800d36c:	7d3b      	ldrb	r3, [r7, #20]
 800d36e:	4293      	cmp	r3, r2
 800d370:	d024      	beq.n	800d3bc <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d378:	f003 0301 	and.w	r3, r3, #1
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d10a      	bne.n	800d396 <dir_find+0x14a>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6a18      	ldr	r0, [r3, #32]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	3324      	adds	r3, #36	; 0x24
 800d388:	220b      	movs	r2, #11
 800d38a:	4619      	mov	r1, r3
 800d38c:	f7fe fd96 	bl	800bebc <mem_cmp>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d014      	beq.n	800d3c0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d396:	23ff      	movs	r3, #255	; 0xff
 800d398:	757b      	strb	r3, [r7, #21]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3a0:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d3a2:	2100      	movs	r1, #0
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7ff fb74 	bl	800ca92 <dir_next>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d3ae:	7dfb      	ldrb	r3, [r7, #23]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f43f af65 	beq.w	800d280 <dir_find+0x34>
 800d3b6:	e004      	b.n	800d3c2 <dir_find+0x176>
		if (res != FR_OK) break;
 800d3b8:	bf00      	nop
 800d3ba:	e002      	b.n	800d3c2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d3bc:	bf00      	nop
 800d3be:	e000      	b.n	800d3c2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d3c0:	bf00      	nop

	return res;
 800d3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3718      	adds	r7, #24
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b08c      	sub	sp, #48	; 0x30
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d3e0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d001      	beq.n	800d3ec <dir_register+0x20>
 800d3e8:	2306      	movs	r3, #6
 800d3ea:	e0e0      	b.n	800d5ae <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	627b      	str	r3, [r7, #36]	; 0x24
 800d3f0:	e002      	b.n	800d3f8 <dir_register+0x2c>
 800d3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	627b      	str	r3, [r7, #36]	; 0x24
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	68da      	ldr	r2, [r3, #12]
 800d3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fe:	005b      	lsls	r3, r3, #1
 800d400:	4413      	add	r3, r2
 800d402:	881b      	ldrh	r3, [r3, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d1f4      	bne.n	800d3f2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d40e:	f107 030c 	add.w	r3, r7, #12
 800d412:	220c      	movs	r2, #12
 800d414:	4618      	mov	r0, r3
 800d416:	f7fe fd15 	bl	800be44 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d41a:	7dfb      	ldrb	r3, [r7, #23]
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	2b00      	cmp	r3, #0
 800d422:	d032      	beq.n	800d48a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2240      	movs	r2, #64	; 0x40
 800d428:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d42c:	2301      	movs	r3, #1
 800d42e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d430:	e016      	b.n	800d460 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	68da      	ldr	r2, [r3, #12]
 800d43c:	f107 010c 	add.w	r1, r7, #12
 800d440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d442:	f7ff fdad 	bl	800cfa0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f7ff ff00 	bl	800d24c <dir_find>
 800d44c:	4603      	mov	r3, r0
 800d44e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d456:	2b00      	cmp	r3, #0
 800d458:	d106      	bne.n	800d468 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45c:	3301      	adds	r3, #1
 800d45e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d462:	2b63      	cmp	r3, #99	; 0x63
 800d464:	d9e5      	bls.n	800d432 <dir_register+0x66>
 800d466:	e000      	b.n	800d46a <dir_register+0x9e>
			if (res != FR_OK) break;
 800d468:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d46c:	2b64      	cmp	r3, #100	; 0x64
 800d46e:	d101      	bne.n	800d474 <dir_register+0xa8>
 800d470:	2307      	movs	r3, #7
 800d472:	e09c      	b.n	800d5ae <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d478:	2b04      	cmp	r3, #4
 800d47a:	d002      	beq.n	800d482 <dir_register+0xb6>
 800d47c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d480:	e095      	b.n	800d5ae <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d482:	7dfa      	ldrb	r2, [r7, #23]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d48a:	7dfb      	ldrb	r3, [r7, #23]
 800d48c:	f003 0302 	and.w	r3, r3, #2
 800d490:	2b00      	cmp	r3, #0
 800d492:	d007      	beq.n	800d4a4 <dir_register+0xd8>
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	330c      	adds	r3, #12
 800d498:	4a47      	ldr	r2, [pc, #284]	; (800d5b8 <dir_register+0x1ec>)
 800d49a:	fba2 2303 	umull	r2, r3, r2, r3
 800d49e:	089b      	lsrs	r3, r3, #2
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	e000      	b.n	800d4a6 <dir_register+0xda>
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d4a8:	6a39      	ldr	r1, [r7, #32]
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7ff fbb6 	bl	800cc1c <dir_alloc>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d4b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d148      	bne.n	800d550 <dir_register+0x184>
 800d4be:	6a3b      	ldr	r3, [r7, #32]
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	623b      	str	r3, [r7, #32]
 800d4c4:	6a3b      	ldr	r3, [r7, #32]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d042      	beq.n	800d550 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	695a      	ldr	r2, [r3, #20]
 800d4ce:	6a3b      	ldr	r3, [r7, #32]
 800d4d0:	015b      	lsls	r3, r3, #5
 800d4d2:	1ad3      	subs	r3, r2, r3
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f7ff fa60 	bl	800c99c <dir_sdi>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d4e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d132      	bne.n	800d550 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	3324      	adds	r3, #36	; 0x24
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff fde4 	bl	800d0bc <sum_sfn>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	69db      	ldr	r3, [r3, #28]
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	69f8      	ldr	r0, [r7, #28]
 800d500:	f7fe fece 	bl	800c2a0 <move_window>
 800d504:	4603      	mov	r3, r0
 800d506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d50a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d11d      	bne.n	800d54e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	68d8      	ldr	r0, [r3, #12]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a19      	ldr	r1, [r3, #32]
 800d51a:	6a3b      	ldr	r3, [r7, #32]
 800d51c:	b2da      	uxtb	r2, r3
 800d51e:	7efb      	ldrb	r3, [r7, #27]
 800d520:	f7ff fcd6 	bl	800ced0 <put_lfn>
				fs->wflag = 1;
 800d524:	69fb      	ldr	r3, [r7, #28]
 800d526:	2201      	movs	r2, #1
 800d528:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d52a:	2100      	movs	r1, #0
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f7ff fab0 	bl	800ca92 <dir_next>
 800d532:	4603      	mov	r3, r0
 800d534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d107      	bne.n	800d550 <dir_register+0x184>
 800d540:	6a3b      	ldr	r3, [r7, #32]
 800d542:	3b01      	subs	r3, #1
 800d544:	623b      	str	r3, [r7, #32]
 800d546:	6a3b      	ldr	r3, [r7, #32]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d1d5      	bne.n	800d4f8 <dir_register+0x12c>
 800d54c:	e000      	b.n	800d550 <dir_register+0x184>
				if (res != FR_OK) break;
 800d54e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d550:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d554:	2b00      	cmp	r3, #0
 800d556:	d128      	bne.n	800d5aa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	69db      	ldr	r3, [r3, #28]
 800d55c:	4619      	mov	r1, r3
 800d55e:	69f8      	ldr	r0, [r7, #28]
 800d560:	f7fe fe9e 	bl	800c2a0 <move_window>
 800d564:	4603      	mov	r3, r0
 800d566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d56a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d11b      	bne.n	800d5aa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6a1b      	ldr	r3, [r3, #32]
 800d576:	2220      	movs	r2, #32
 800d578:	2100      	movs	r1, #0
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7fe fc83 	bl	800be86 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6a18      	ldr	r0, [r3, #32]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	3324      	adds	r3, #36	; 0x24
 800d588:	220b      	movs	r2, #11
 800d58a:	4619      	mov	r1, r3
 800d58c:	f7fe fc5a 	bl	800be44 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a1b      	ldr	r3, [r3, #32]
 800d59a:	330c      	adds	r3, #12
 800d59c:	f002 0218 	and.w	r2, r2, #24
 800d5a0:	b2d2      	uxtb	r2, r2
 800d5a2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d5aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3730      	adds	r7, #48	; 0x30
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	4ec4ec4f 	.word	0x4ec4ec4f

0800d5bc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b088      	sub	sp, #32
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	69db      	ldr	r3, [r3, #28]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	f000 80c9 	beq.w	800d76e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5e4:	d032      	beq.n	800d64c <get_fileinfo+0x90>
			i = j = 0;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	61bb      	str	r3, [r7, #24]
 800d5ea:	69bb      	ldr	r3, [r7, #24]
 800d5ec:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d5ee:	e01b      	b.n	800d628 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d5f0:	89fb      	ldrh	r3, [r7, #14]
 800d5f2:	2100      	movs	r1, #0
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f001 fb5d 	bl	800ecb4 <ff_convert>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d5fe:	89fb      	ldrh	r3, [r7, #14]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d102      	bne.n	800d60a <get_fileinfo+0x4e>
 800d604:	2300      	movs	r3, #0
 800d606:	61fb      	str	r3, [r7, #28]
 800d608:	e01a      	b.n	800d640 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d60a:	69fb      	ldr	r3, [r7, #28]
 800d60c:	2bfe      	cmp	r3, #254	; 0xfe
 800d60e:	d902      	bls.n	800d616 <get_fileinfo+0x5a>
 800d610:	2300      	movs	r3, #0
 800d612:	61fb      	str	r3, [r7, #28]
 800d614:	e014      	b.n	800d640 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	1c5a      	adds	r2, r3, #1
 800d61a:	61fa      	str	r2, [r7, #28]
 800d61c:	89fa      	ldrh	r2, [r7, #14]
 800d61e:	b2d1      	uxtb	r1, r2
 800d620:	683a      	ldr	r2, [r7, #0]
 800d622:	4413      	add	r3, r2
 800d624:	460a      	mov	r2, r1
 800d626:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	68da      	ldr	r2, [r3, #12]
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	1c59      	adds	r1, r3, #1
 800d630:	61b9      	str	r1, [r7, #24]
 800d632:	005b      	lsls	r3, r3, #1
 800d634:	4413      	add	r3, r2
 800d636:	881b      	ldrh	r3, [r3, #0]
 800d638:	81fb      	strh	r3, [r7, #14]
 800d63a:	89fb      	ldrh	r3, [r7, #14]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1d7      	bne.n	800d5f0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d640:	683a      	ldr	r2, [r7, #0]
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	4413      	add	r3, r2
 800d646:	3316      	adds	r3, #22
 800d648:	2200      	movs	r2, #0
 800d64a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d64c:	2300      	movs	r3, #0
 800d64e:	61bb      	str	r3, [r7, #24]
 800d650:	69bb      	ldr	r3, [r7, #24]
 800d652:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d654:	683a      	ldr	r2, [r7, #0]
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	4413      	add	r3, r2
 800d65a:	3316      	adds	r3, #22
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d660:	e04c      	b.n	800d6fc <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6a1a      	ldr	r2, [r3, #32]
 800d666:	69fb      	ldr	r3, [r7, #28]
 800d668:	1c59      	adds	r1, r3, #1
 800d66a:	61f9      	str	r1, [r7, #28]
 800d66c:	4413      	add	r3, r2
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d672:	7dfb      	ldrb	r3, [r7, #23]
 800d674:	2b20      	cmp	r3, #32
 800d676:	d100      	bne.n	800d67a <get_fileinfo+0xbe>
 800d678:	e040      	b.n	800d6fc <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d67a:	7dfb      	ldrb	r3, [r7, #23]
 800d67c:	2b05      	cmp	r3, #5
 800d67e:	d101      	bne.n	800d684 <get_fileinfo+0xc8>
 800d680:	23e5      	movs	r3, #229	; 0xe5
 800d682:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	2b09      	cmp	r3, #9
 800d688:	d10f      	bne.n	800d6aa <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d68a:	89bb      	ldrh	r3, [r7, #12]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d105      	bne.n	800d69c <get_fileinfo+0xe0>
 800d690:	683a      	ldr	r2, [r7, #0]
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	4413      	add	r3, r2
 800d696:	3316      	adds	r3, #22
 800d698:	222e      	movs	r2, #46	; 0x2e
 800d69a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d69c:	69bb      	ldr	r3, [r7, #24]
 800d69e:	1c5a      	adds	r2, r3, #1
 800d6a0:	61ba      	str	r2, [r7, #24]
 800d6a2:	683a      	ldr	r2, [r7, #0]
 800d6a4:	4413      	add	r3, r2
 800d6a6:	222e      	movs	r2, #46	; 0x2e
 800d6a8:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d6aa:	683a      	ldr	r2, [r7, #0]
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	3309      	adds	r3, #9
 800d6b2:	7dfa      	ldrb	r2, [r7, #23]
 800d6b4:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d6b6:	89bb      	ldrh	r3, [r7, #12]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d11c      	bne.n	800d6f6 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d6bc:	7dfb      	ldrb	r3, [r7, #23]
 800d6be:	2b40      	cmp	r3, #64	; 0x40
 800d6c0:	d913      	bls.n	800d6ea <get_fileinfo+0x12e>
 800d6c2:	7dfb      	ldrb	r3, [r7, #23]
 800d6c4:	2b5a      	cmp	r3, #90	; 0x5a
 800d6c6:	d810      	bhi.n	800d6ea <get_fileinfo+0x12e>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6a1b      	ldr	r3, [r3, #32]
 800d6cc:	330c      	adds	r3, #12
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	2b08      	cmp	r3, #8
 800d6d6:	d901      	bls.n	800d6dc <get_fileinfo+0x120>
 800d6d8:	2310      	movs	r3, #16
 800d6da:	e000      	b.n	800d6de <get_fileinfo+0x122>
 800d6dc:	2308      	movs	r3, #8
 800d6de:	4013      	ands	r3, r2
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d002      	beq.n	800d6ea <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d6e4:	7dfb      	ldrb	r3, [r7, #23]
 800d6e6:	3320      	adds	r3, #32
 800d6e8:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d6ea:	683a      	ldr	r2, [r7, #0]
 800d6ec:	69bb      	ldr	r3, [r7, #24]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	3316      	adds	r3, #22
 800d6f2:	7dfa      	ldrb	r2, [r7, #23]
 800d6f4:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	2b0a      	cmp	r3, #10
 800d700:	d9af      	bls.n	800d662 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d702:	89bb      	ldrh	r3, [r7, #12]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d10d      	bne.n	800d724 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d708:	683a      	ldr	r2, [r7, #0]
 800d70a:	69bb      	ldr	r3, [r7, #24]
 800d70c:	4413      	add	r3, r2
 800d70e:	3316      	adds	r3, #22
 800d710:	2200      	movs	r2, #0
 800d712:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6a1b      	ldr	r3, [r3, #32]
 800d718:	330c      	adds	r3, #12
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d101      	bne.n	800d724 <get_fileinfo+0x168>
 800d720:	2300      	movs	r3, #0
 800d722:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d724:	683a      	ldr	r2, [r7, #0]
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	4413      	add	r3, r2
 800d72a:	3309      	adds	r3, #9
 800d72c:	2200      	movs	r2, #0
 800d72e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6a1b      	ldr	r3, [r3, #32]
 800d734:	7ada      	ldrb	r2, [r3, #11]
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6a1b      	ldr	r3, [r3, #32]
 800d73e:	331c      	adds	r3, #28
 800d740:	4618      	mov	r0, r3
 800d742:	f7fe fb15 	bl	800bd70 <ld_dword>
 800d746:	4602      	mov	r2, r0
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6a1b      	ldr	r3, [r3, #32]
 800d750:	3316      	adds	r3, #22
 800d752:	4618      	mov	r0, r3
 800d754:	f7fe fb0c 	bl	800bd70 <ld_dword>
 800d758:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	b29a      	uxth	r2, r3
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	80da      	strh	r2, [r3, #6]
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	0c1b      	lsrs	r3, r3, #16
 800d766:	b29a      	uxth	r2, r3
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	809a      	strh	r2, [r3, #4]
 800d76c:	e000      	b.n	800d770 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d76e:	bf00      	nop
}
 800d770:	3720      	adds	r7, #32
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
	...

0800d778 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b08a      	sub	sp, #40	; 0x28
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	613b      	str	r3, [r7, #16]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	60fb      	str	r3, [r7, #12]
 800d790:	2300      	movs	r3, #0
 800d792:	617b      	str	r3, [r7, #20]
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d798:	69bb      	ldr	r3, [r7, #24]
 800d79a:	1c5a      	adds	r2, r3, #1
 800d79c:	61ba      	str	r2, [r7, #24]
 800d79e:	693a      	ldr	r2, [r7, #16]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d7a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7a8:	2b1f      	cmp	r3, #31
 800d7aa:	d940      	bls.n	800d82e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d7ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7ae:	2b2f      	cmp	r3, #47	; 0x2f
 800d7b0:	d006      	beq.n	800d7c0 <create_name+0x48>
 800d7b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7b4:	2b5c      	cmp	r3, #92	; 0x5c
 800d7b6:	d110      	bne.n	800d7da <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d7b8:	e002      	b.n	800d7c0 <create_name+0x48>
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	61bb      	str	r3, [r7, #24]
 800d7c0:	693a      	ldr	r2, [r7, #16]
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	2b2f      	cmp	r3, #47	; 0x2f
 800d7ca:	d0f6      	beq.n	800d7ba <create_name+0x42>
 800d7cc:	693a      	ldr	r2, [r7, #16]
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	2b5c      	cmp	r3, #92	; 0x5c
 800d7d6:	d0f0      	beq.n	800d7ba <create_name+0x42>
			break;
 800d7d8:	e02a      	b.n	800d830 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	2bfe      	cmp	r3, #254	; 0xfe
 800d7de:	d901      	bls.n	800d7e4 <create_name+0x6c>
 800d7e0:	2306      	movs	r3, #6
 800d7e2:	e17d      	b.n	800dae0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d7e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7e6:	b2db      	uxtb	r3, r3
 800d7e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d7ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7ec:	2101      	movs	r1, #1
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f001 fa60 	bl	800ecb4 <ff_convert>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d7f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d101      	bne.n	800d802 <create_name+0x8a>
 800d7fe:	2306      	movs	r3, #6
 800d800:	e16e      	b.n	800dae0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d804:	2b7f      	cmp	r3, #127	; 0x7f
 800d806:	d809      	bhi.n	800d81c <create_name+0xa4>
 800d808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d80a:	4619      	mov	r1, r3
 800d80c:	488d      	ldr	r0, [pc, #564]	; (800da44 <create_name+0x2cc>)
 800d80e:	f7fe fb7c 	bl	800bf0a <chk_chr>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d001      	beq.n	800d81c <create_name+0xa4>
 800d818:	2306      	movs	r3, #6
 800d81a:	e161      	b.n	800dae0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	1c5a      	adds	r2, r3, #1
 800d820:	617a      	str	r2, [r7, #20]
 800d822:	005b      	lsls	r3, r3, #1
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	4413      	add	r3, r2
 800d828:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d82a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d82c:	e7b4      	b.n	800d798 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d82e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d830:	693a      	ldr	r2, [r7, #16]
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	441a      	add	r2, r3
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d83a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d83c:	2b1f      	cmp	r3, #31
 800d83e:	d801      	bhi.n	800d844 <create_name+0xcc>
 800d840:	2304      	movs	r3, #4
 800d842:	e000      	b.n	800d846 <create_name+0xce>
 800d844:	2300      	movs	r3, #0
 800d846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d84a:	e011      	b.n	800d870 <create_name+0xf8>
		w = lfn[di - 1];
 800d84c:	697a      	ldr	r2, [r7, #20]
 800d84e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d852:	4413      	add	r3, r2
 800d854:	005b      	lsls	r3, r3, #1
 800d856:	68fa      	ldr	r2, [r7, #12]
 800d858:	4413      	add	r3, r2
 800d85a:	881b      	ldrh	r3, [r3, #0]
 800d85c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d85e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d860:	2b20      	cmp	r3, #32
 800d862:	d002      	beq.n	800d86a <create_name+0xf2>
 800d864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d866:	2b2e      	cmp	r3, #46	; 0x2e
 800d868:	d106      	bne.n	800d878 <create_name+0x100>
		di--;
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	3b01      	subs	r3, #1
 800d86e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d1ea      	bne.n	800d84c <create_name+0xd4>
 800d876:	e000      	b.n	800d87a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d878:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	005b      	lsls	r3, r3, #1
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	4413      	add	r3, r2
 800d882:	2200      	movs	r2, #0
 800d884:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d101      	bne.n	800d890 <create_name+0x118>
 800d88c:	2306      	movs	r3, #6
 800d88e:	e127      	b.n	800dae0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	3324      	adds	r3, #36	; 0x24
 800d894:	220b      	movs	r2, #11
 800d896:	2120      	movs	r1, #32
 800d898:	4618      	mov	r0, r3
 800d89a:	f7fe faf4 	bl	800be86 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d89e:	2300      	movs	r3, #0
 800d8a0:	61bb      	str	r3, [r7, #24]
 800d8a2:	e002      	b.n	800d8aa <create_name+0x132>
 800d8a4:	69bb      	ldr	r3, [r7, #24]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	61bb      	str	r3, [r7, #24]
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	005b      	lsls	r3, r3, #1
 800d8ae:	68fa      	ldr	r2, [r7, #12]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	881b      	ldrh	r3, [r3, #0]
 800d8b4:	2b20      	cmp	r3, #32
 800d8b6:	d0f5      	beq.n	800d8a4 <create_name+0x12c>
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	4413      	add	r3, r2
 800d8c0:	881b      	ldrh	r3, [r3, #0]
 800d8c2:	2b2e      	cmp	r3, #46	; 0x2e
 800d8c4:	d0ee      	beq.n	800d8a4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d009      	beq.n	800d8e0 <create_name+0x168>
 800d8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8d0:	f043 0303 	orr.w	r3, r3, #3
 800d8d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d8d8:	e002      	b.n	800d8e0 <create_name+0x168>
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	617b      	str	r3, [r7, #20]
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d009      	beq.n	800d8fa <create_name+0x182>
 800d8e6:	697a      	ldr	r2, [r7, #20]
 800d8e8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d8ec:	4413      	add	r3, r2
 800d8ee:	005b      	lsls	r3, r3, #1
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	881b      	ldrh	r3, [r3, #0]
 800d8f6:	2b2e      	cmp	r3, #46	; 0x2e
 800d8f8:	d1ef      	bne.n	800d8da <create_name+0x162>

	i = b = 0; ni = 8;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d900:	2300      	movs	r3, #0
 800d902:	623b      	str	r3, [r7, #32]
 800d904:	2308      	movs	r3, #8
 800d906:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	1c5a      	adds	r2, r3, #1
 800d90c:	61ba      	str	r2, [r7, #24]
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	68fa      	ldr	r2, [r7, #12]
 800d912:	4413      	add	r3, r2
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d918:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f000 8090 	beq.w	800da40 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d920:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d922:	2b20      	cmp	r3, #32
 800d924:	d006      	beq.n	800d934 <create_name+0x1bc>
 800d926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d928:	2b2e      	cmp	r3, #46	; 0x2e
 800d92a:	d10a      	bne.n	800d942 <create_name+0x1ca>
 800d92c:	69ba      	ldr	r2, [r7, #24]
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	429a      	cmp	r2, r3
 800d932:	d006      	beq.n	800d942 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d938:	f043 0303 	orr.w	r3, r3, #3
 800d93c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d940:	e07d      	b.n	800da3e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d942:	6a3a      	ldr	r2, [r7, #32]
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	429a      	cmp	r2, r3
 800d948:	d203      	bcs.n	800d952 <create_name+0x1da>
 800d94a:	69ba      	ldr	r2, [r7, #24]
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d123      	bne.n	800d99a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d952:	69fb      	ldr	r3, [r7, #28]
 800d954:	2b0b      	cmp	r3, #11
 800d956:	d106      	bne.n	800d966 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d95c:	f043 0303 	orr.w	r3, r3, #3
 800d960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d964:	e075      	b.n	800da52 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d966:	69ba      	ldr	r2, [r7, #24]
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d005      	beq.n	800d97a <create_name+0x202>
 800d96e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d972:	f043 0303 	orr.w	r3, r3, #3
 800d976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d97a:	69ba      	ldr	r2, [r7, #24]
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d866      	bhi.n	800da50 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	61bb      	str	r3, [r7, #24]
 800d986:	2308      	movs	r3, #8
 800d988:	623b      	str	r3, [r7, #32]
 800d98a:	230b      	movs	r3, #11
 800d98c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d98e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d998:	e051      	b.n	800da3e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d99a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d99c:	2b7f      	cmp	r3, #127	; 0x7f
 800d99e:	d914      	bls.n	800d9ca <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d9a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f001 f985 	bl	800ecb4 <ff_convert>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d9ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d004      	beq.n	800d9be <create_name+0x246>
 800d9b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9b6:	3b80      	subs	r3, #128	; 0x80
 800d9b8:	4a23      	ldr	r2, [pc, #140]	; (800da48 <create_name+0x2d0>)
 800d9ba:	5cd3      	ldrb	r3, [r2, r3]
 800d9bc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d9be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9c2:	f043 0302 	orr.w	r3, r3, #2
 800d9c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d9ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d007      	beq.n	800d9e0 <create_name+0x268>
 800d9d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	481d      	ldr	r0, [pc, #116]	; (800da4c <create_name+0x2d4>)
 800d9d6:	f7fe fa98 	bl	800bf0a <chk_chr>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d008      	beq.n	800d9f2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d9e0:	235f      	movs	r3, #95	; 0x5f
 800d9e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9e8:	f043 0303 	orr.w	r3, r3, #3
 800d9ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d9f0:	e01b      	b.n	800da2a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d9f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9f4:	2b40      	cmp	r3, #64	; 0x40
 800d9f6:	d909      	bls.n	800da0c <create_name+0x294>
 800d9f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9fa:	2b5a      	cmp	r3, #90	; 0x5a
 800d9fc:	d806      	bhi.n	800da0c <create_name+0x294>
					b |= 2;
 800d9fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da02:	f043 0302 	orr.w	r3, r3, #2
 800da06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da0a:	e00e      	b.n	800da2a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800da0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da0e:	2b60      	cmp	r3, #96	; 0x60
 800da10:	d90b      	bls.n	800da2a <create_name+0x2b2>
 800da12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da14:	2b7a      	cmp	r3, #122	; 0x7a
 800da16:	d808      	bhi.n	800da2a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800da18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da1c:	f043 0301 	orr.w	r3, r3, #1
 800da20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da26:	3b20      	subs	r3, #32
 800da28:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800da2a:	6a3b      	ldr	r3, [r7, #32]
 800da2c:	1c5a      	adds	r2, r3, #1
 800da2e:	623a      	str	r2, [r7, #32]
 800da30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800da32:	b2d1      	uxtb	r1, r2
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	4413      	add	r3, r2
 800da38:	460a      	mov	r2, r1
 800da3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800da3e:	e763      	b.n	800d908 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800da40:	bf00      	nop
 800da42:	e006      	b.n	800da52 <create_name+0x2da>
 800da44:	08010fe8 	.word	0x08010fe8
 800da48:	080110ac 	.word	0x080110ac
 800da4c:	08010ff4 	.word	0x08010ff4
			if (si > di) break;			/* No extension */
 800da50:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800da58:	2be5      	cmp	r3, #229	; 0xe5
 800da5a:	d103      	bne.n	800da64 <create_name+0x2ec>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2205      	movs	r2, #5
 800da60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	2b08      	cmp	r3, #8
 800da68:	d104      	bne.n	800da74 <create_name+0x2fc>
 800da6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800da74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da78:	f003 030c 	and.w	r3, r3, #12
 800da7c:	2b0c      	cmp	r3, #12
 800da7e:	d005      	beq.n	800da8c <create_name+0x314>
 800da80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da84:	f003 0303 	and.w	r3, r3, #3
 800da88:	2b03      	cmp	r3, #3
 800da8a:	d105      	bne.n	800da98 <create_name+0x320>
 800da8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da90:	f043 0302 	orr.w	r3, r3, #2
 800da94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800da98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da9c:	f003 0302 	and.w	r3, r3, #2
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d117      	bne.n	800dad4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800daa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800daa8:	f003 0303 	and.w	r3, r3, #3
 800daac:	2b01      	cmp	r3, #1
 800daae:	d105      	bne.n	800dabc <create_name+0x344>
 800dab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dab4:	f043 0310 	orr.w	r3, r3, #16
 800dab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dabc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dac0:	f003 030c 	and.w	r3, r3, #12
 800dac4:	2b04      	cmp	r3, #4
 800dac6:	d105      	bne.n	800dad4 <create_name+0x35c>
 800dac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dacc:	f043 0308 	orr.w	r3, r3, #8
 800dad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dada:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800dade:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3728      	adds	r7, #40	; 0x28
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b086      	sub	sp, #24
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dafc:	e002      	b.n	800db04 <follow_path+0x1c>
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	3301      	adds	r3, #1
 800db02:	603b      	str	r3, [r7, #0]
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	2b2f      	cmp	r3, #47	; 0x2f
 800db0a:	d0f8      	beq.n	800dafe <follow_path+0x16>
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	2b5c      	cmp	r3, #92	; 0x5c
 800db12:	d0f4      	beq.n	800dafe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	2200      	movs	r2, #0
 800db18:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	2b1f      	cmp	r3, #31
 800db20:	d80a      	bhi.n	800db38 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2280      	movs	r2, #128	; 0x80
 800db26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800db2a:	2100      	movs	r1, #0
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f7fe ff35 	bl	800c99c <dir_sdi>
 800db32:	4603      	mov	r3, r0
 800db34:	75fb      	strb	r3, [r7, #23]
 800db36:	e043      	b.n	800dbc0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800db38:	463b      	mov	r3, r7
 800db3a:	4619      	mov	r1, r3
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f7ff fe1b 	bl	800d778 <create_name>
 800db42:	4603      	mov	r3, r0
 800db44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800db46:	7dfb      	ldrb	r3, [r7, #23]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d134      	bne.n	800dbb6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f7ff fb7d 	bl	800d24c <dir_find>
 800db52:	4603      	mov	r3, r0
 800db54:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800db5c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800db5e:	7dfb      	ldrb	r3, [r7, #23]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00a      	beq.n	800db7a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800db64:	7dfb      	ldrb	r3, [r7, #23]
 800db66:	2b04      	cmp	r3, #4
 800db68:	d127      	bne.n	800dbba <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800db6a:	7afb      	ldrb	r3, [r7, #11]
 800db6c:	f003 0304 	and.w	r3, r3, #4
 800db70:	2b00      	cmp	r3, #0
 800db72:	d122      	bne.n	800dbba <follow_path+0xd2>
 800db74:	2305      	movs	r3, #5
 800db76:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800db78:	e01f      	b.n	800dbba <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800db7a:	7afb      	ldrb	r3, [r7, #11]
 800db7c:	f003 0304 	and.w	r3, r3, #4
 800db80:	2b00      	cmp	r3, #0
 800db82:	d11c      	bne.n	800dbbe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	799b      	ldrb	r3, [r3, #6]
 800db88:	f003 0310 	and.w	r3, r3, #16
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d102      	bne.n	800db96 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800db90:	2305      	movs	r3, #5
 800db92:	75fb      	strb	r3, [r7, #23]
 800db94:	e014      	b.n	800dbc0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	695b      	ldr	r3, [r3, #20]
 800dba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dba4:	4413      	add	r3, r2
 800dba6:	4619      	mov	r1, r3
 800dba8:	68f8      	ldr	r0, [r7, #12]
 800dbaa:	f7ff f87e 	bl	800ccaa <ld_clust>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dbb4:	e7c0      	b.n	800db38 <follow_path+0x50>
			if (res != FR_OK) break;
 800dbb6:	bf00      	nop
 800dbb8:	e002      	b.n	800dbc0 <follow_path+0xd8>
				break;
 800dbba:	bf00      	nop
 800dbbc:	e000      	b.n	800dbc0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dbbe:	bf00      	nop
			}
		}
	}

	return res;
 800dbc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3718      	adds	r7, #24
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}

0800dbca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dbca:	b480      	push	{r7}
 800dbcc:	b087      	sub	sp, #28
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dbd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dbd6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d031      	beq.n	800dc44 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	617b      	str	r3, [r7, #20]
 800dbe6:	e002      	b.n	800dbee <get_ldnumber+0x24>
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	3301      	adds	r3, #1
 800dbec:	617b      	str	r3, [r7, #20]
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	2b1f      	cmp	r3, #31
 800dbf4:	d903      	bls.n	800dbfe <get_ldnumber+0x34>
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	2b3a      	cmp	r3, #58	; 0x3a
 800dbfc:	d1f4      	bne.n	800dbe8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	2b3a      	cmp	r3, #58	; 0x3a
 800dc04:	d11c      	bne.n	800dc40 <get_ldnumber+0x76>
			tp = *path;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	1c5a      	adds	r2, r3, #1
 800dc10:	60fa      	str	r2, [r7, #12]
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	3b30      	subs	r3, #48	; 0x30
 800dc16:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	2b09      	cmp	r3, #9
 800dc1c:	d80e      	bhi.n	800dc3c <get_ldnumber+0x72>
 800dc1e:	68fa      	ldr	r2, [r7, #12]
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d10a      	bne.n	800dc3c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d107      	bne.n	800dc3c <get_ldnumber+0x72>
					vol = (int)i;
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	3301      	adds	r3, #1
 800dc34:	617b      	str	r3, [r7, #20]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	697a      	ldr	r2, [r7, #20]
 800dc3a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	e002      	b.n	800dc46 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dc40:	2300      	movs	r3, #0
 800dc42:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dc44:	693b      	ldr	r3, [r7, #16]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	371c      	adds	r7, #28
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr
	...

0800dc54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2200      	movs	r2, #0
 800dc62:	70da      	strb	r2, [r3, #3]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc6a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dc6c:	6839      	ldr	r1, [r7, #0]
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f7fe fb16 	bl	800c2a0 <move_window>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d001      	beq.n	800dc7e <check_fs+0x2a>
 800dc7a:	2304      	movs	r3, #4
 800dc7c:	e038      	b.n	800dcf0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	3334      	adds	r3, #52	; 0x34
 800dc82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fe f85a 	bl	800bd40 <ld_word>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	461a      	mov	r2, r3
 800dc90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d001      	beq.n	800dc9c <check_fs+0x48>
 800dc98:	2303      	movs	r3, #3
 800dc9a:	e029      	b.n	800dcf0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dca2:	2be9      	cmp	r3, #233	; 0xe9
 800dca4:	d009      	beq.n	800dcba <check_fs+0x66>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dcac:	2beb      	cmp	r3, #235	; 0xeb
 800dcae:	d11e      	bne.n	800dcee <check_fs+0x9a>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800dcb6:	2b90      	cmp	r3, #144	; 0x90
 800dcb8:	d119      	bne.n	800dcee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	3334      	adds	r3, #52	; 0x34
 800dcbe:	3336      	adds	r3, #54	; 0x36
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fe f855 	bl	800bd70 <ld_dword>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dccc:	4a0a      	ldr	r2, [pc, #40]	; (800dcf8 <check_fs+0xa4>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d101      	bne.n	800dcd6 <check_fs+0x82>
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	e00c      	b.n	800dcf0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	3334      	adds	r3, #52	; 0x34
 800dcda:	3352      	adds	r3, #82	; 0x52
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7fe f847 	bl	800bd70 <ld_dword>
 800dce2:	4603      	mov	r3, r0
 800dce4:	4a05      	ldr	r2, [pc, #20]	; (800dcfc <check_fs+0xa8>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d101      	bne.n	800dcee <check_fs+0x9a>
 800dcea:	2300      	movs	r3, #0
 800dcec:	e000      	b.n	800dcf0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dcee:	2302      	movs	r3, #2
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3708      	adds	r7, #8
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	00544146 	.word	0x00544146
 800dcfc:	33544146 	.word	0x33544146

0800dd00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b096      	sub	sp, #88	; 0x58
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	2200      	movs	r2, #0
 800dd12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f7ff ff58 	bl	800dbca <get_ldnumber>
 800dd1a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dd1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	da01      	bge.n	800dd26 <find_volume+0x26>
 800dd22:	230b      	movs	r3, #11
 800dd24:	e230      	b.n	800e188 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dd26:	4aa1      	ldr	r2, [pc, #644]	; (800dfac <find_volume+0x2ac>)
 800dd28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd2e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d101      	bne.n	800dd3a <find_volume+0x3a>
 800dd36:	230c      	movs	r3, #12
 800dd38:	e226      	b.n	800e188 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd3e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dd40:	79fb      	ldrb	r3, [r7, #7]
 800dd42:	f023 0301 	bic.w	r3, r3, #1
 800dd46:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d01a      	beq.n	800dd86 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd52:	785b      	ldrb	r3, [r3, #1]
 800dd54:	4618      	mov	r0, r3
 800dd56:	f7fd ff55 	bl	800bc04 <disk_status>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dd60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd64:	f003 0301 	and.w	r3, r3, #1
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d10c      	bne.n	800dd86 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dd6c:	79fb      	ldrb	r3, [r7, #7]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d007      	beq.n	800dd82 <find_volume+0x82>
 800dd72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd76:	f003 0304 	and.w	r3, r3, #4
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d001      	beq.n	800dd82 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dd7e:	230a      	movs	r3, #10
 800dd80:	e202      	b.n	800e188 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800dd82:	2300      	movs	r3, #0
 800dd84:	e200      	b.n	800e188 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd88:	2200      	movs	r2, #0
 800dd8a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dd8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd8e:	b2da      	uxtb	r2, r3
 800dd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd92:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd96:	785b      	ldrb	r3, [r3, #1]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fd ff4d 	bl	800bc38 <disk_initialize>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dda4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dda8:	f003 0301 	and.w	r3, r3, #1
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d001      	beq.n	800ddb4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ddb0:	2303      	movs	r3, #3
 800ddb2:	e1e9      	b.n	800e188 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ddb4:	79fb      	ldrb	r3, [r7, #7]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d007      	beq.n	800ddca <find_volume+0xca>
 800ddba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddbe:	f003 0304 	and.w	r3, r3, #4
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d001      	beq.n	800ddca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ddc6:	230a      	movs	r3, #10
 800ddc8:	e1de      	b.n	800e188 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ddce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ddd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ddd2:	f7ff ff3f 	bl	800dc54 <check_fs>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dddc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dde0:	2b02      	cmp	r3, #2
 800dde2:	d149      	bne.n	800de78 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dde4:	2300      	movs	r3, #0
 800dde6:	643b      	str	r3, [r7, #64]	; 0x40
 800dde8:	e01e      	b.n	800de28 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ddea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ddf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddf2:	011b      	lsls	r3, r3, #4
 800ddf4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ddf8:	4413      	add	r3, r2
 800ddfa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ddfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfe:	3304      	adds	r3, #4
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d006      	beq.n	800de14 <find_volume+0x114>
 800de06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de08:	3308      	adds	r3, #8
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7fd ffb0 	bl	800bd70 <ld_dword>
 800de10:	4602      	mov	r2, r0
 800de12:	e000      	b.n	800de16 <find_volume+0x116>
 800de14:	2200      	movs	r2, #0
 800de16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de18:	009b      	lsls	r3, r3, #2
 800de1a:	3358      	adds	r3, #88	; 0x58
 800de1c:	443b      	add	r3, r7
 800de1e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800de22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de24:	3301      	adds	r3, #1
 800de26:	643b      	str	r3, [r7, #64]	; 0x40
 800de28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de2a:	2b03      	cmp	r3, #3
 800de2c:	d9dd      	bls.n	800ddea <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800de2e:	2300      	movs	r3, #0
 800de30:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800de32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de34:	2b00      	cmp	r3, #0
 800de36:	d002      	beq.n	800de3e <find_volume+0x13e>
 800de38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de3a:	3b01      	subs	r3, #1
 800de3c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800de3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	3358      	adds	r3, #88	; 0x58
 800de44:	443b      	add	r3, r7
 800de46:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800de4a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800de4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d005      	beq.n	800de5e <find_volume+0x15e>
 800de52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800de54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de56:	f7ff fefd 	bl	800dc54 <check_fs>
 800de5a:	4603      	mov	r3, r0
 800de5c:	e000      	b.n	800de60 <find_volume+0x160>
 800de5e:	2303      	movs	r3, #3
 800de60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800de64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d905      	bls.n	800de78 <find_volume+0x178>
 800de6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de6e:	3301      	adds	r3, #1
 800de70:	643b      	str	r3, [r7, #64]	; 0x40
 800de72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de74:	2b03      	cmp	r3, #3
 800de76:	d9e2      	bls.n	800de3e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800de78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de7c:	2b04      	cmp	r3, #4
 800de7e:	d101      	bne.n	800de84 <find_volume+0x184>
 800de80:	2301      	movs	r3, #1
 800de82:	e181      	b.n	800e188 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800de84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d901      	bls.n	800de90 <find_volume+0x190>
 800de8c:	230d      	movs	r3, #13
 800de8e:	e17b      	b.n	800e188 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800de90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de92:	3334      	adds	r3, #52	; 0x34
 800de94:	330b      	adds	r3, #11
 800de96:	4618      	mov	r0, r3
 800de98:	f7fd ff52 	bl	800bd40 <ld_word>
 800de9c:	4603      	mov	r3, r0
 800de9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dea2:	d001      	beq.n	800dea8 <find_volume+0x1a8>
 800dea4:	230d      	movs	r3, #13
 800dea6:	e16f      	b.n	800e188 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deaa:	3334      	adds	r3, #52	; 0x34
 800deac:	3316      	adds	r3, #22
 800deae:	4618      	mov	r0, r3
 800deb0:	f7fd ff46 	bl	800bd40 <ld_word>
 800deb4:	4603      	mov	r3, r0
 800deb6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800deb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deba:	2b00      	cmp	r3, #0
 800debc:	d106      	bne.n	800decc <find_volume+0x1cc>
 800debe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec0:	3334      	adds	r3, #52	; 0x34
 800dec2:	3324      	adds	r3, #36	; 0x24
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7fd ff53 	bl	800bd70 <ld_dword>
 800deca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800decc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dece:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ded0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ded2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ded8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deda:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dede:	789b      	ldrb	r3, [r3, #2]
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d005      	beq.n	800def0 <find_volume+0x1f0>
 800dee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee6:	789b      	ldrb	r3, [r3, #2]
 800dee8:	2b02      	cmp	r3, #2
 800deea:	d001      	beq.n	800def0 <find_volume+0x1f0>
 800deec:	230d      	movs	r3, #13
 800deee:	e14b      	b.n	800e188 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800def0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def2:	789b      	ldrb	r3, [r3, #2]
 800def4:	461a      	mov	r2, r3
 800def6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800def8:	fb02 f303 	mul.w	r3, r2, r3
 800defc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800defe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df04:	b29a      	uxth	r2, r3
 800df06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df08:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800df0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0c:	895b      	ldrh	r3, [r3, #10]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d008      	beq.n	800df24 <find_volume+0x224>
 800df12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df14:	895b      	ldrh	r3, [r3, #10]
 800df16:	461a      	mov	r2, r3
 800df18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1a:	895b      	ldrh	r3, [r3, #10]
 800df1c:	3b01      	subs	r3, #1
 800df1e:	4013      	ands	r3, r2
 800df20:	2b00      	cmp	r3, #0
 800df22:	d001      	beq.n	800df28 <find_volume+0x228>
 800df24:	230d      	movs	r3, #13
 800df26:	e12f      	b.n	800e188 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800df28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2a:	3334      	adds	r3, #52	; 0x34
 800df2c:	3311      	adds	r3, #17
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fd ff06 	bl	800bd40 <ld_word>
 800df34:	4603      	mov	r3, r0
 800df36:	461a      	mov	r2, r3
 800df38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800df3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3e:	891b      	ldrh	r3, [r3, #8]
 800df40:	f003 030f 	and.w	r3, r3, #15
 800df44:	b29b      	uxth	r3, r3
 800df46:	2b00      	cmp	r3, #0
 800df48:	d001      	beq.n	800df4e <find_volume+0x24e>
 800df4a:	230d      	movs	r3, #13
 800df4c:	e11c      	b.n	800e188 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800df4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df50:	3334      	adds	r3, #52	; 0x34
 800df52:	3313      	adds	r3, #19
 800df54:	4618      	mov	r0, r3
 800df56:	f7fd fef3 	bl	800bd40 <ld_word>
 800df5a:	4603      	mov	r3, r0
 800df5c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800df5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df60:	2b00      	cmp	r3, #0
 800df62:	d106      	bne.n	800df72 <find_volume+0x272>
 800df64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df66:	3334      	adds	r3, #52	; 0x34
 800df68:	3320      	adds	r3, #32
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fd ff00 	bl	800bd70 <ld_dword>
 800df70:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800df72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df74:	3334      	adds	r3, #52	; 0x34
 800df76:	330e      	adds	r3, #14
 800df78:	4618      	mov	r0, r3
 800df7a:	f7fd fee1 	bl	800bd40 <ld_word>
 800df7e:	4603      	mov	r3, r0
 800df80:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800df82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800df84:	2b00      	cmp	r3, #0
 800df86:	d101      	bne.n	800df8c <find_volume+0x28c>
 800df88:	230d      	movs	r3, #13
 800df8a:	e0fd      	b.n	800e188 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800df8c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800df8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df90:	4413      	add	r3, r2
 800df92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df94:	8912      	ldrh	r2, [r2, #8]
 800df96:	0912      	lsrs	r2, r2, #4
 800df98:	b292      	uxth	r2, r2
 800df9a:	4413      	add	r3, r2
 800df9c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800df9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d204      	bcs.n	800dfb0 <find_volume+0x2b0>
 800dfa6:	230d      	movs	r3, #13
 800dfa8:	e0ee      	b.n	800e188 <find_volume+0x488>
 800dfaa:	bf00      	nop
 800dfac:	200032b8 	.word	0x200032b8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dfb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb4:	1ad3      	subs	r3, r2, r3
 800dfb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfb8:	8952      	ldrh	r2, [r2, #10]
 800dfba:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfbe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d101      	bne.n	800dfca <find_volume+0x2ca>
 800dfc6:	230d      	movs	r3, #13
 800dfc8:	e0de      	b.n	800e188 <find_volume+0x488>
		fmt = FS_FAT32;
 800dfca:	2303      	movs	r3, #3
 800dfcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d802      	bhi.n	800dfe0 <find_volume+0x2e0>
 800dfda:	2302      	movs	r3, #2
 800dfdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d802      	bhi.n	800dff0 <find_volume+0x2f0>
 800dfea:	2301      	movs	r3, #1
 800dfec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff2:	1c9a      	adds	r2, r3, #2
 800dff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800dff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dffc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dffe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e002:	441a      	add	r2, r3
 800e004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e006:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e008:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00c:	441a      	add	r2, r3
 800e00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e010:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e012:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e016:	2b03      	cmp	r3, #3
 800e018:	d11e      	bne.n	800e058 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01c:	3334      	adds	r3, #52	; 0x34
 800e01e:	332a      	adds	r3, #42	; 0x2a
 800e020:	4618      	mov	r0, r3
 800e022:	f7fd fe8d 	bl	800bd40 <ld_word>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d001      	beq.n	800e030 <find_volume+0x330>
 800e02c:	230d      	movs	r3, #13
 800e02e:	e0ab      	b.n	800e188 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e032:	891b      	ldrh	r3, [r3, #8]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d001      	beq.n	800e03c <find_volume+0x33c>
 800e038:	230d      	movs	r3, #13
 800e03a:	e0a5      	b.n	800e188 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03e:	3334      	adds	r3, #52	; 0x34
 800e040:	332c      	adds	r3, #44	; 0x2c
 800e042:	4618      	mov	r0, r3
 800e044:	f7fd fe94 	bl	800bd70 <ld_dword>
 800e048:	4602      	mov	r2, r0
 800e04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e050:	699b      	ldr	r3, [r3, #24]
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	647b      	str	r3, [r7, #68]	; 0x44
 800e056:	e01f      	b.n	800e098 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05a:	891b      	ldrh	r3, [r3, #8]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d101      	bne.n	800e064 <find_volume+0x364>
 800e060:	230d      	movs	r3, #13
 800e062:	e091      	b.n	800e188 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e066:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e06a:	441a      	add	r2, r3
 800e06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e06e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e070:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e074:	2b02      	cmp	r3, #2
 800e076:	d103      	bne.n	800e080 <find_volume+0x380>
 800e078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e07a:	699b      	ldr	r3, [r3, #24]
 800e07c:	005b      	lsls	r3, r3, #1
 800e07e:	e00a      	b.n	800e096 <find_volume+0x396>
 800e080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e082:	699a      	ldr	r2, [r3, #24]
 800e084:	4613      	mov	r3, r2
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	4413      	add	r3, r2
 800e08a:	085a      	lsrs	r2, r3, #1
 800e08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08e:	699b      	ldr	r3, [r3, #24]
 800e090:	f003 0301 	and.w	r3, r3, #1
 800e094:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e096:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09a:	69da      	ldr	r2, [r3, #28]
 800e09c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e09e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e0a2:	0a5b      	lsrs	r3, r3, #9
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d201      	bcs.n	800e0ac <find_volume+0x3ac>
 800e0a8:	230d      	movs	r3, #13
 800e0aa:	e06d      	b.n	800e188 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0b2:	615a      	str	r2, [r3, #20]
 800e0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b6:	695a      	ldr	r2, [r3, #20]
 800e0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ba:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0be:	2280      	movs	r2, #128	; 0x80
 800e0c0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e0c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0c6:	2b03      	cmp	r3, #3
 800e0c8:	d149      	bne.n	800e15e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0cc:	3334      	adds	r3, #52	; 0x34
 800e0ce:	3330      	adds	r3, #48	; 0x30
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7fd fe35 	bl	800bd40 <ld_word>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d140      	bne.n	800e15e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e0dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0de:	3301      	adds	r3, #1
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e0e4:	f7fe f8dc 	bl	800c2a0 <move_window>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d137      	bne.n	800e15e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f6:	3334      	adds	r3, #52	; 0x34
 800e0f8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7fd fe1f 	bl	800bd40 <ld_word>
 800e102:	4603      	mov	r3, r0
 800e104:	461a      	mov	r2, r3
 800e106:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d127      	bne.n	800e15e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e110:	3334      	adds	r3, #52	; 0x34
 800e112:	4618      	mov	r0, r3
 800e114:	f7fd fe2c 	bl	800bd70 <ld_dword>
 800e118:	4603      	mov	r3, r0
 800e11a:	4a1d      	ldr	r2, [pc, #116]	; (800e190 <find_volume+0x490>)
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d11e      	bne.n	800e15e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e122:	3334      	adds	r3, #52	; 0x34
 800e124:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fd fe21 	bl	800bd70 <ld_dword>
 800e12e:	4603      	mov	r3, r0
 800e130:	4a18      	ldr	r2, [pc, #96]	; (800e194 <find_volume+0x494>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d113      	bne.n	800e15e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e138:	3334      	adds	r3, #52	; 0x34
 800e13a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e13e:	4618      	mov	r0, r3
 800e140:	f7fd fe16 	bl	800bd70 <ld_dword>
 800e144:	4602      	mov	r2, r0
 800e146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e148:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14c:	3334      	adds	r3, #52	; 0x34
 800e14e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e152:	4618      	mov	r0, r3
 800e154:	f7fd fe0c 	bl	800bd70 <ld_dword>
 800e158:	4602      	mov	r2, r0
 800e15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e160:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e164:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e166:	4b0c      	ldr	r3, [pc, #48]	; (800e198 <find_volume+0x498>)
 800e168:	881b      	ldrh	r3, [r3, #0]
 800e16a:	3301      	adds	r3, #1
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	4b0a      	ldr	r3, [pc, #40]	; (800e198 <find_volume+0x498>)
 800e170:	801a      	strh	r2, [r3, #0]
 800e172:	4b09      	ldr	r3, [pc, #36]	; (800e198 <find_volume+0x498>)
 800e174:	881a      	ldrh	r2, [r3, #0]
 800e176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e178:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17c:	4a07      	ldr	r2, [pc, #28]	; (800e19c <find_volume+0x49c>)
 800e17e:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e182:	f7fe f825 	bl	800c1d0 <clear_lock>
#endif
	return FR_OK;
 800e186:	2300      	movs	r3, #0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3758      	adds	r7, #88	; 0x58
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	41615252 	.word	0x41615252
 800e194:	61417272 	.word	0x61417272
 800e198:	200032bc 	.word	0x200032bc
 800e19c:	200032e0 	.word	0x200032e0

0800e1a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e1aa:	2309      	movs	r3, #9
 800e1ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d01c      	beq.n	800e1ee <validate+0x4e>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d018      	beq.n	800e1ee <validate+0x4e>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d013      	beq.n	800e1ee <validate+0x4e>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	889a      	ldrh	r2, [r3, #4]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	88db      	ldrh	r3, [r3, #6]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d10c      	bne.n	800e1ee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	785b      	ldrb	r3, [r3, #1]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fd fd12 	bl	800bc04 <disk_status>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	f003 0301 	and.w	r3, r3, #1
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d101      	bne.n	800e1ee <validate+0x4e>
			res = FR_OK;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e1ee:	7bfb      	ldrb	r3, [r7, #15]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d102      	bne.n	800e1fa <validate+0x5a>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	e000      	b.n	800e1fc <validate+0x5c>
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	683a      	ldr	r2, [r7, #0]
 800e1fe:	6013      	str	r3, [r2, #0]
	return res;
 800e200:	7bfb      	ldrb	r3, [r7, #15]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
	...

0800e20c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b088      	sub	sp, #32
 800e210:	af00      	add	r7, sp, #0
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	60b9      	str	r1, [r7, #8]
 800e216:	4613      	mov	r3, r2
 800e218:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e21e:	f107 0310 	add.w	r3, r7, #16
 800e222:	4618      	mov	r0, r3
 800e224:	f7ff fcd1 	bl	800dbca <get_ldnumber>
 800e228:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	da01      	bge.n	800e234 <f_mount+0x28>
 800e230:	230b      	movs	r3, #11
 800e232:	e02b      	b.n	800e28c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e234:	4a17      	ldr	r2, [pc, #92]	; (800e294 <f_mount+0x88>)
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e23c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d005      	beq.n	800e250 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e244:	69b8      	ldr	r0, [r7, #24]
 800e246:	f7fd ffc3 	bl	800c1d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e24a:	69bb      	ldr	r3, [r7, #24]
 800e24c:	2200      	movs	r2, #0
 800e24e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d002      	beq.n	800e25c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2200      	movs	r2, #0
 800e25a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	490d      	ldr	r1, [pc, #52]	; (800e294 <f_mount+0x88>)
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d002      	beq.n	800e272 <f_mount+0x66>
 800e26c:	79fb      	ldrb	r3, [r7, #7]
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d001      	beq.n	800e276 <f_mount+0x6a>
 800e272:	2300      	movs	r3, #0
 800e274:	e00a      	b.n	800e28c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e276:	f107 010c 	add.w	r1, r7, #12
 800e27a:	f107 0308 	add.w	r3, r7, #8
 800e27e:	2200      	movs	r2, #0
 800e280:	4618      	mov	r0, r3
 800e282:	f7ff fd3d 	bl	800dd00 <find_volume>
 800e286:	4603      	mov	r3, r0
 800e288:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e28a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3720      	adds	r7, #32
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	200032b8 	.word	0x200032b8

0800e298 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b09a      	sub	sp, #104	; 0x68
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	60f8      	str	r0, [r7, #12]
 800e2a0:	60b9      	str	r1, [r7, #8]
 800e2a2:	4613      	mov	r3, r2
 800e2a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d101      	bne.n	800e2b0 <f_open+0x18>
 800e2ac:	2309      	movs	r3, #9
 800e2ae:	e1ad      	b.n	800e60c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e2b0:	79fb      	ldrb	r3, [r7, #7]
 800e2b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e2b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e2b8:	79fa      	ldrb	r2, [r7, #7]
 800e2ba:	f107 0114 	add.w	r1, r7, #20
 800e2be:	f107 0308 	add.w	r3, r7, #8
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7ff fd1c 	bl	800dd00 <find_volume>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e2ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	f040 8191 	bne.w	800e5fa <f_open+0x362>
		dj.obj.fs = fs;
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e2dc:	68ba      	ldr	r2, [r7, #8]
 800e2de:	f107 0318 	add.w	r3, r7, #24
 800e2e2:	4611      	mov	r1, r2
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7ff fbff 	bl	800dae8 <follow_path>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e2f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d11a      	bne.n	800e32e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e2f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e2fc:	b25b      	sxtb	r3, r3
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	da03      	bge.n	800e30a <f_open+0x72>
				res = FR_INVALID_NAME;
 800e302:	2306      	movs	r3, #6
 800e304:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e308:	e011      	b.n	800e32e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e30a:	79fb      	ldrb	r3, [r7, #7]
 800e30c:	f023 0301 	bic.w	r3, r3, #1
 800e310:	2b00      	cmp	r3, #0
 800e312:	bf14      	ite	ne
 800e314:	2301      	movne	r3, #1
 800e316:	2300      	moveq	r3, #0
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	461a      	mov	r2, r3
 800e31c:	f107 0318 	add.w	r3, r7, #24
 800e320:	4611      	mov	r1, r2
 800e322:	4618      	mov	r0, r3
 800e324:	f7fd fe0c 	bl	800bf40 <chk_lock>
 800e328:	4603      	mov	r3, r0
 800e32a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e32e:	79fb      	ldrb	r3, [r7, #7]
 800e330:	f003 031c 	and.w	r3, r3, #28
 800e334:	2b00      	cmp	r3, #0
 800e336:	d07f      	beq.n	800e438 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e338:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d017      	beq.n	800e370 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e340:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e344:	2b04      	cmp	r3, #4
 800e346:	d10e      	bne.n	800e366 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e348:	f7fd fe56 	bl	800bff8 <enq_lock>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d006      	beq.n	800e360 <f_open+0xc8>
 800e352:	f107 0318 	add.w	r3, r7, #24
 800e356:	4618      	mov	r0, r3
 800e358:	f7ff f838 	bl	800d3cc <dir_register>
 800e35c:	4603      	mov	r3, r0
 800e35e:	e000      	b.n	800e362 <f_open+0xca>
 800e360:	2312      	movs	r3, #18
 800e362:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e366:	79fb      	ldrb	r3, [r7, #7]
 800e368:	f043 0308 	orr.w	r3, r3, #8
 800e36c:	71fb      	strb	r3, [r7, #7]
 800e36e:	e010      	b.n	800e392 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e370:	7fbb      	ldrb	r3, [r7, #30]
 800e372:	f003 0311 	and.w	r3, r3, #17
 800e376:	2b00      	cmp	r3, #0
 800e378:	d003      	beq.n	800e382 <f_open+0xea>
					res = FR_DENIED;
 800e37a:	2307      	movs	r3, #7
 800e37c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e380:	e007      	b.n	800e392 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e382:	79fb      	ldrb	r3, [r7, #7]
 800e384:	f003 0304 	and.w	r3, r3, #4
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d002      	beq.n	800e392 <f_open+0xfa>
 800e38c:	2308      	movs	r3, #8
 800e38e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e392:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e396:	2b00      	cmp	r3, #0
 800e398:	d168      	bne.n	800e46c <f_open+0x1d4>
 800e39a:	79fb      	ldrb	r3, [r7, #7]
 800e39c:	f003 0308 	and.w	r3, r3, #8
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d063      	beq.n	800e46c <f_open+0x1d4>
				dw = GET_FATTIME();
 800e3a4:	f7fb fa00 	bl	80097a8 <get_fattime>
 800e3a8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ac:	330e      	adds	r3, #14
 800e3ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7fd fd1b 	bl	800bdec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b8:	3316      	adds	r3, #22
 800e3ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f7fd fd15 	bl	800bdec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c4:	330b      	adds	r3, #11
 800e3c6:	2220      	movs	r2, #32
 800e3c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3ce:	4611      	mov	r1, r2
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7fe fc6a 	bl	800ccaa <ld_clust>
 800e3d6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e3dc:	2200      	movs	r2, #0
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fe fc82 	bl	800cce8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e6:	331c      	adds	r3, #28
 800e3e8:	2100      	movs	r1, #0
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7fd fcfe 	bl	800bdec <st_dword>
					fs->wflag = 1;
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e3f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d037      	beq.n	800e46c <f_open+0x1d4>
						dw = fs->winsect;
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e400:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e402:	f107 0318 	add.w	r3, r7, #24
 800e406:	2200      	movs	r2, #0
 800e408:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fe f995 	bl	800c73a <remove_chain>
 800e410:	4603      	mov	r3, r0
 800e412:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e416:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d126      	bne.n	800e46c <f_open+0x1d4>
							res = move_window(fs, dw);
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e422:	4618      	mov	r0, r3
 800e424:	f7fd ff3c 	bl	800c2a0 <move_window>
 800e428:	4603      	mov	r3, r0
 800e42a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e432:	3a01      	subs	r2, #1
 800e434:	611a      	str	r2, [r3, #16]
 800e436:	e019      	b.n	800e46c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e438:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d115      	bne.n	800e46c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e440:	7fbb      	ldrb	r3, [r7, #30]
 800e442:	f003 0310 	and.w	r3, r3, #16
 800e446:	2b00      	cmp	r3, #0
 800e448:	d003      	beq.n	800e452 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e44a:	2304      	movs	r3, #4
 800e44c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e450:	e00c      	b.n	800e46c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e452:	79fb      	ldrb	r3, [r7, #7]
 800e454:	f003 0302 	and.w	r3, r3, #2
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d007      	beq.n	800e46c <f_open+0x1d4>
 800e45c:	7fbb      	ldrb	r3, [r7, #30]
 800e45e:	f003 0301 	and.w	r3, r3, #1
 800e462:	2b00      	cmp	r3, #0
 800e464:	d002      	beq.n	800e46c <f_open+0x1d4>
						res = FR_DENIED;
 800e466:	2307      	movs	r3, #7
 800e468:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e46c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e470:	2b00      	cmp	r3, #0
 800e472:	d128      	bne.n	800e4c6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e474:	79fb      	ldrb	r3, [r7, #7]
 800e476:	f003 0308 	and.w	r3, r3, #8
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d003      	beq.n	800e486 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e47e:	79fb      	ldrb	r3, [r7, #7]
 800e480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e484:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e48e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e494:	79fb      	ldrb	r3, [r7, #7]
 800e496:	f023 0301 	bic.w	r3, r3, #1
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	bf14      	ite	ne
 800e49e:	2301      	movne	r3, #1
 800e4a0:	2300      	moveq	r3, #0
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	f107 0318 	add.w	r3, r7, #24
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7fd fdc5 	bl	800c03c <inc_lock>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	691b      	ldr	r3, [r3, #16]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d102      	bne.n	800e4c6 <f_open+0x22e>
 800e4c0:	2302      	movs	r3, #2
 800e4c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e4c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f040 8095 	bne.w	800e5fa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4d4:	4611      	mov	r1, r2
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fe fbe7 	bl	800ccaa <ld_clust>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e4:	331c      	adds	r3, #28
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fd fc42 	bl	800bd70 <ld_dword>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e4f8:	697a      	ldr	r2, [r7, #20]
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	88da      	ldrh	r2, [r3, #6]
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	79fa      	ldrb	r2, [r7, #7]
 800e50a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2200      	movs	r2, #0
 800e510:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2200      	movs	r2, #0
 800e516:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2200      	movs	r2, #0
 800e51c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	3330      	adds	r3, #48	; 0x30
 800e522:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e526:	2100      	movs	r1, #0
 800e528:	4618      	mov	r0, r3
 800e52a:	f7fd fcac 	bl	800be86 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e52e:	79fb      	ldrb	r3, [r7, #7]
 800e530:	f003 0320 	and.w	r3, r3, #32
 800e534:	2b00      	cmp	r3, #0
 800e536:	d060      	beq.n	800e5fa <f_open+0x362>
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d05c      	beq.n	800e5fa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	68da      	ldr	r2, [r3, #12]
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	895b      	ldrh	r3, [r3, #10]
 800e54c:	025b      	lsls	r3, r3, #9
 800e54e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e55c:	e016      	b.n	800e58c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e562:	4618      	mov	r0, r3
 800e564:	f7fd ff57 	bl	800c416 <get_fat>
 800e568:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e56a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d802      	bhi.n	800e576 <f_open+0x2de>
 800e570:	2302      	movs	r3, #2
 800e572:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e57c:	d102      	bne.n	800e584 <f_open+0x2ec>
 800e57e:	2301      	movs	r3, #1
 800e580:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e584:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e588:	1ad3      	subs	r3, r2, r3
 800e58a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e58c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e590:	2b00      	cmp	r3, #0
 800e592:	d103      	bne.n	800e59c <f_open+0x304>
 800e594:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e598:	429a      	cmp	r2, r3
 800e59a:	d8e0      	bhi.n	800e55e <f_open+0x2c6>
				}
				fp->clust = clst;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e5a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e5a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d127      	bne.n	800e5fa <f_open+0x362>
 800e5aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d022      	beq.n	800e5fa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7fd ff0d 	bl	800c3d8 <clust2sect>
 800e5be:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e5c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d103      	bne.n	800e5ce <f_open+0x336>
						res = FR_INT_ERR;
 800e5c6:	2302      	movs	r3, #2
 800e5c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e5cc:	e015      	b.n	800e5fa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e5ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5d0:	0a5a      	lsrs	r2, r3, #9
 800e5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5d4:	441a      	add	r2, r3
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	7858      	ldrb	r0, [r3, #1]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6a1a      	ldr	r2, [r3, #32]
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	f7fd fb4b 	bl	800bc84 <disk_read>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d002      	beq.n	800e5fa <f_open+0x362>
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e5fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d002      	beq.n	800e608 <f_open+0x370>
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2200      	movs	r2, #0
 800e606:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e608:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3768      	adds	r7, #104	; 0x68
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b08c      	sub	sp, #48	; 0x30
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	607a      	str	r2, [r7, #4]
 800e620:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	2200      	movs	r2, #0
 800e62a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f107 0210 	add.w	r2, r7, #16
 800e632:	4611      	mov	r1, r2
 800e634:	4618      	mov	r0, r3
 800e636:	f7ff fdb3 	bl	800e1a0 <validate>
 800e63a:	4603      	mov	r3, r0
 800e63c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e644:	2b00      	cmp	r3, #0
 800e646:	d107      	bne.n	800e658 <f_write+0x44>
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	7d5b      	ldrb	r3, [r3, #21]
 800e64c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e650:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e654:	2b00      	cmp	r3, #0
 800e656:	d002      	beq.n	800e65e <f_write+0x4a>
 800e658:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e65c:	e14b      	b.n	800e8f6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	7d1b      	ldrb	r3, [r3, #20]
 800e662:	f003 0302 	and.w	r3, r3, #2
 800e666:	2b00      	cmp	r3, #0
 800e668:	d101      	bne.n	800e66e <f_write+0x5a>
 800e66a:	2307      	movs	r3, #7
 800e66c:	e143      	b.n	800e8f6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	699a      	ldr	r2, [r3, #24]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	441a      	add	r2, r3
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	699b      	ldr	r3, [r3, #24]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	f080 812d 	bcs.w	800e8da <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	699b      	ldr	r3, [r3, #24]
 800e684:	43db      	mvns	r3, r3
 800e686:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e688:	e127      	b.n	800e8da <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	699b      	ldr	r3, [r3, #24]
 800e68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e692:	2b00      	cmp	r3, #0
 800e694:	f040 80e3 	bne.w	800e85e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	699b      	ldr	r3, [r3, #24]
 800e69c:	0a5b      	lsrs	r3, r3, #9
 800e69e:	693a      	ldr	r2, [r7, #16]
 800e6a0:	8952      	ldrh	r2, [r2, #10]
 800e6a2:	3a01      	subs	r2, #1
 800e6a4:	4013      	ands	r3, r2
 800e6a6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e6a8:	69bb      	ldr	r3, [r7, #24]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d143      	bne.n	800e736 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	699b      	ldr	r3, [r3, #24]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d10c      	bne.n	800e6d0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	689b      	ldr	r3, [r3, #8]
 800e6ba:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d11a      	bne.n	800e6f8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2100      	movs	r1, #0
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7fe f89c 	bl	800c804 <create_chain>
 800e6cc:	62b8      	str	r0, [r7, #40]	; 0x28
 800e6ce:	e013      	b.n	800e6f8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d007      	beq.n	800e6e8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	699b      	ldr	r3, [r3, #24]
 800e6dc:	4619      	mov	r1, r3
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	f7fe f928 	bl	800c934 <clmt_clust>
 800e6e4:	62b8      	str	r0, [r7, #40]	; 0x28
 800e6e6:	e007      	b.n	800e6f8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e6e8:	68fa      	ldr	r2, [r7, #12]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	69db      	ldr	r3, [r3, #28]
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	4610      	mov	r0, r2
 800e6f2:	f7fe f887 	bl	800c804 <create_chain>
 800e6f6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	f000 80f2 	beq.w	800e8e4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e702:	2b01      	cmp	r3, #1
 800e704:	d104      	bne.n	800e710 <f_write+0xfc>
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2202      	movs	r2, #2
 800e70a:	755a      	strb	r2, [r3, #21]
 800e70c:	2302      	movs	r3, #2
 800e70e:	e0f2      	b.n	800e8f6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e716:	d104      	bne.n	800e722 <f_write+0x10e>
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2201      	movs	r2, #1
 800e71c:	755a      	strb	r2, [r3, #21]
 800e71e:	2301      	movs	r3, #1
 800e720:	e0e9      	b.n	800e8f6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e726:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	689b      	ldr	r3, [r3, #8]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d102      	bne.n	800e736 <f_write+0x122>
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e734:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	7d1b      	ldrb	r3, [r3, #20]
 800e73a:	b25b      	sxtb	r3, r3
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	da18      	bge.n	800e772 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	7858      	ldrb	r0, [r3, #1]
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	6a1a      	ldr	r2, [r3, #32]
 800e74e:	2301      	movs	r3, #1
 800e750:	f7fd fab8 	bl	800bcc4 <disk_write>
 800e754:	4603      	mov	r3, r0
 800e756:	2b00      	cmp	r3, #0
 800e758:	d004      	beq.n	800e764 <f_write+0x150>
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2201      	movs	r2, #1
 800e75e:	755a      	strb	r2, [r3, #21]
 800e760:	2301      	movs	r3, #1
 800e762:	e0c8      	b.n	800e8f6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	7d1b      	ldrb	r3, [r3, #20]
 800e768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e76c:	b2da      	uxtb	r2, r3
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e772:	693a      	ldr	r2, [r7, #16]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	69db      	ldr	r3, [r3, #28]
 800e778:	4619      	mov	r1, r3
 800e77a:	4610      	mov	r0, r2
 800e77c:	f7fd fe2c 	bl	800c3d8 <clust2sect>
 800e780:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d104      	bne.n	800e792 <f_write+0x17e>
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2202      	movs	r2, #2
 800e78c:	755a      	strb	r2, [r3, #21]
 800e78e:	2302      	movs	r3, #2
 800e790:	e0b1      	b.n	800e8f6 <f_write+0x2e2>
			sect += csect;
 800e792:	697a      	ldr	r2, [r7, #20]
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	4413      	add	r3, r2
 800e798:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	0a5b      	lsrs	r3, r3, #9
 800e79e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e7a0:	6a3b      	ldr	r3, [r7, #32]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d03c      	beq.n	800e820 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e7a6:	69ba      	ldr	r2, [r7, #24]
 800e7a8:	6a3b      	ldr	r3, [r7, #32]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	693a      	ldr	r2, [r7, #16]
 800e7ae:	8952      	ldrh	r2, [r2, #10]
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d905      	bls.n	800e7c0 <f_write+0x1ac>
					cc = fs->csize - csect;
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	895b      	ldrh	r3, [r3, #10]
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	1ad3      	subs	r3, r2, r3
 800e7be:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	7858      	ldrb	r0, [r3, #1]
 800e7c4:	6a3b      	ldr	r3, [r7, #32]
 800e7c6:	697a      	ldr	r2, [r7, #20]
 800e7c8:	69f9      	ldr	r1, [r7, #28]
 800e7ca:	f7fd fa7b 	bl	800bcc4 <disk_write>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d004      	beq.n	800e7de <f_write+0x1ca>
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	755a      	strb	r2, [r3, #21]
 800e7da:	2301      	movs	r3, #1
 800e7dc:	e08b      	b.n	800e8f6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	6a1a      	ldr	r2, [r3, #32]
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	1ad3      	subs	r3, r2, r3
 800e7e6:	6a3a      	ldr	r2, [r7, #32]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d915      	bls.n	800e818 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	6a1a      	ldr	r2, [r3, #32]
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	1ad3      	subs	r3, r2, r3
 800e7fa:	025b      	lsls	r3, r3, #9
 800e7fc:	69fa      	ldr	r2, [r7, #28]
 800e7fe:	4413      	add	r3, r2
 800e800:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e804:	4619      	mov	r1, r3
 800e806:	f7fd fb1d 	bl	800be44 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	7d1b      	ldrb	r3, [r3, #20]
 800e80e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e812:	b2da      	uxtb	r2, r3
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e818:	6a3b      	ldr	r3, [r7, #32]
 800e81a:	025b      	lsls	r3, r3, #9
 800e81c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e81e:	e03f      	b.n	800e8a0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	6a1b      	ldr	r3, [r3, #32]
 800e824:	697a      	ldr	r2, [r7, #20]
 800e826:	429a      	cmp	r2, r3
 800e828:	d016      	beq.n	800e858 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	699a      	ldr	r2, [r3, #24]
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e832:	429a      	cmp	r2, r3
 800e834:	d210      	bcs.n	800e858 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	7858      	ldrb	r0, [r3, #1]
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e840:	2301      	movs	r3, #1
 800e842:	697a      	ldr	r2, [r7, #20]
 800e844:	f7fd fa1e 	bl	800bc84 <disk_read>
 800e848:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d004      	beq.n	800e858 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2201      	movs	r2, #1
 800e852:	755a      	strb	r2, [r3, #21]
 800e854:	2301      	movs	r3, #1
 800e856:	e04e      	b.n	800e8f6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	697a      	ldr	r2, [r7, #20]
 800e85c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	699b      	ldr	r3, [r3, #24]
 800e862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e866:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e86a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e86c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	429a      	cmp	r2, r3
 800e872:	d901      	bls.n	800e878 <f_write+0x264>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	699b      	ldr	r3, [r3, #24]
 800e882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e886:	4413      	add	r3, r2
 800e888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e88a:	69f9      	ldr	r1, [r7, #28]
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fd fad9 	bl	800be44 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	7d1b      	ldrb	r3, [r3, #20]
 800e896:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e89a:	b2da      	uxtb	r2, r3
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e8a0:	69fa      	ldr	r2, [r7, #28]
 800e8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a4:	4413      	add	r3, r2
 800e8a6:	61fb      	str	r3, [r7, #28]
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	699a      	ldr	r2, [r3, #24]
 800e8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ae:	441a      	add	r2, r3
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	619a      	str	r2, [r3, #24]
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	68da      	ldr	r2, [r3, #12]
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	699b      	ldr	r3, [r3, #24]
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	bf38      	it	cc
 800e8c0:	461a      	movcc	r2, r3
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	60da      	str	r2, [r3, #12]
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8cc:	441a      	add	r2, r3
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	601a      	str	r2, [r3, #0]
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d6:	1ad3      	subs	r3, r2, r3
 800e8d8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	f47f aed4 	bne.w	800e68a <f_write+0x76>
 800e8e2:	e000      	b.n	800e8e6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e8e4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	7d1b      	ldrb	r3, [r3, #20]
 800e8ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8ee:	b2da      	uxtb	r2, r3
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e8f4:	2300      	movs	r3, #0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3730      	adds	r7, #48	; 0x30
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}

0800e8fe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e8fe:	b580      	push	{r7, lr}
 800e900:	b086      	sub	sp, #24
 800e902:	af00      	add	r7, sp, #0
 800e904:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f107 0208 	add.w	r2, r7, #8
 800e90c:	4611      	mov	r1, r2
 800e90e:	4618      	mov	r0, r3
 800e910:	f7ff fc46 	bl	800e1a0 <validate>
 800e914:	4603      	mov	r3, r0
 800e916:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e918:	7dfb      	ldrb	r3, [r7, #23]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d168      	bne.n	800e9f0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	7d1b      	ldrb	r3, [r3, #20]
 800e922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e926:	2b00      	cmp	r3, #0
 800e928:	d062      	beq.n	800e9f0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	7d1b      	ldrb	r3, [r3, #20]
 800e92e:	b25b      	sxtb	r3, r3
 800e930:	2b00      	cmp	r3, #0
 800e932:	da15      	bge.n	800e960 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	7858      	ldrb	r0, [r3, #1]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6a1a      	ldr	r2, [r3, #32]
 800e942:	2301      	movs	r3, #1
 800e944:	f7fd f9be 	bl	800bcc4 <disk_write>
 800e948:	4603      	mov	r3, r0
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d001      	beq.n	800e952 <f_sync+0x54>
 800e94e:	2301      	movs	r3, #1
 800e950:	e04f      	b.n	800e9f2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	7d1b      	ldrb	r3, [r3, #20]
 800e956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e95a:	b2da      	uxtb	r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e960:	f7fa ff22 	bl	80097a8 <get_fattime>
 800e964:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e966:	68ba      	ldr	r2, [r7, #8]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96c:	4619      	mov	r1, r3
 800e96e:	4610      	mov	r0, r2
 800e970:	f7fd fc96 	bl	800c2a0 <move_window>
 800e974:	4603      	mov	r3, r0
 800e976:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e978:	7dfb      	ldrb	r3, [r7, #23]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d138      	bne.n	800e9f0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e982:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	330b      	adds	r3, #11
 800e988:	781a      	ldrb	r2, [r3, #0]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	330b      	adds	r3, #11
 800e98e:	f042 0220 	orr.w	r2, r2, #32
 800e992:	b2d2      	uxtb	r2, r2
 800e994:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6818      	ldr	r0, [r3, #0]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	689b      	ldr	r3, [r3, #8]
 800e99e:	461a      	mov	r2, r3
 800e9a0:	68f9      	ldr	r1, [r7, #12]
 800e9a2:	f7fe f9a1 	bl	800cce8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	f103 021c 	add.w	r2, r3, #28
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	4610      	mov	r0, r2
 800e9b4:	f7fd fa1a 	bl	800bdec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	3316      	adds	r3, #22
 800e9bc:	6939      	ldr	r1, [r7, #16]
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7fd fa14 	bl	800bdec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	3312      	adds	r3, #18
 800e9c8:	2100      	movs	r1, #0
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fd f9f3 	bl	800bdb6 <st_word>
					fs->wflag = 1;
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fd fc8f 	bl	800c2fc <sync_fs>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	7d1b      	ldrb	r3, [r3, #20]
 800e9e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9ea:	b2da      	uxtb	r2, r3
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e9f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3718      	adds	r7, #24
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b084      	sub	sp, #16
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7ff ff7b 	bl	800e8fe <f_sync>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ea0c:	7bfb      	ldrb	r3, [r7, #15]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d118      	bne.n	800ea44 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f107 0208 	add.w	r2, r7, #8
 800ea18:	4611      	mov	r1, r2
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7ff fbc0 	bl	800e1a0 <validate>
 800ea20:	4603      	mov	r3, r0
 800ea22:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ea24:	7bfb      	ldrb	r3, [r7, #15]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d10c      	bne.n	800ea44 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	691b      	ldr	r3, [r3, #16]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fd fb92 	bl	800c158 <dec_lock>
 800ea34:	4603      	mov	r3, r0
 800ea36:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ea38:	7bfb      	ldrb	r3, [r7, #15]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d102      	bne.n	800ea44 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2200      	movs	r2, #0
 800ea42:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ea44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b086      	sub	sp, #24
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d101      	bne.n	800ea62 <f_opendir+0x14>
 800ea5e:	2309      	movs	r3, #9
 800ea60:	e064      	b.n	800eb2c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ea66:	f107 010c 	add.w	r1, r7, #12
 800ea6a:	463b      	mov	r3, r7
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7ff f946 	bl	800dd00 <find_volume>
 800ea74:	4603      	mov	r3, r0
 800ea76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ea78:	7dfb      	ldrb	r3, [r7, #23]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d14f      	bne.n	800eb1e <f_opendir+0xd0>
		obj->fs = fs;
 800ea7e:	68fa      	ldr	r2, [r7, #12]
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	4619      	mov	r1, r3
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f7ff f82d 	bl	800dae8 <follow_path>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800ea92:	7dfb      	ldrb	r3, [r7, #23]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d13d      	bne.n	800eb14 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea9e:	b25b      	sxtb	r3, r3
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	db12      	blt.n	800eaca <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	799b      	ldrb	r3, [r3, #6]
 800eaa8:	f003 0310 	and.w	r3, r3, #16
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d00a      	beq.n	800eac6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800eab0:	68fa      	ldr	r2, [r7, #12]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6a1b      	ldr	r3, [r3, #32]
 800eab6:	4619      	mov	r1, r3
 800eab8:	4610      	mov	r0, r2
 800eaba:	f7fe f8f6 	bl	800ccaa <ld_clust>
 800eabe:	4602      	mov	r2, r0
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	609a      	str	r2, [r3, #8]
 800eac4:	e001      	b.n	800eaca <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800eac6:	2305      	movs	r3, #5
 800eac8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800eaca:	7dfb      	ldrb	r3, [r7, #23]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d121      	bne.n	800eb14 <f_opendir+0xc6>
				obj->id = fs->id;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	88da      	ldrh	r2, [r3, #6]
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ead8:	2100      	movs	r1, #0
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f7fd ff5e 	bl	800c99c <dir_sdi>
 800eae0:	4603      	mov	r3, r0
 800eae2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800eae4:	7dfb      	ldrb	r3, [r7, #23]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d114      	bne.n	800eb14 <f_opendir+0xc6>
					if (obj->sclust) {
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	689b      	ldr	r3, [r3, #8]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d00d      	beq.n	800eb0e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800eaf2:	2100      	movs	r1, #0
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f7fd faa1 	bl	800c03c <inc_lock>
 800eafa:	4602      	mov	r2, r0
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	691b      	ldr	r3, [r3, #16]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d105      	bne.n	800eb14 <f_opendir+0xc6>
 800eb08:	2312      	movs	r3, #18
 800eb0a:	75fb      	strb	r3, [r7, #23]
 800eb0c:	e002      	b.n	800eb14 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	2200      	movs	r2, #0
 800eb12:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800eb14:	7dfb      	ldrb	r3, [r7, #23]
 800eb16:	2b04      	cmp	r3, #4
 800eb18:	d101      	bne.n	800eb1e <f_opendir+0xd0>
 800eb1a:	2305      	movs	r3, #5
 800eb1c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800eb1e:	7dfb      	ldrb	r3, [r7, #23]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d002      	beq.n	800eb2a <f_opendir+0xdc>
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	2200      	movs	r2, #0
 800eb28:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eb2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3718      	adds	r7, #24
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f107 0208 	add.w	r2, r7, #8
 800eb42:	4611      	mov	r1, r2
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff fb2b 	bl	800e1a0 <validate>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eb4e:	7bfb      	ldrb	r3, [r7, #15]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d110      	bne.n	800eb76 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	691b      	ldr	r3, [r3, #16]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d006      	beq.n	800eb6a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	691b      	ldr	r3, [r3, #16]
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7fd faf9 	bl	800c158 <dec_lock>
 800eb66:	4603      	mov	r3, r0
 800eb68:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800eb6a:	7bfb      	ldrb	r3, [r7, #15]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d102      	bne.n	800eb76 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2200      	movs	r2, #0
 800eb74:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800eb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3710      	adds	r7, #16
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b084      	sub	sp, #16
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f107 0208 	add.w	r2, r7, #8
 800eb90:	4611      	mov	r1, r2
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7ff fb04 	bl	800e1a0 <validate>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eb9c:	7bfb      	ldrb	r3, [r7, #15]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d126      	bne.n	800ebf0 <f_readdir+0x70>
		if (!fno) {
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d106      	bne.n	800ebb6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800eba8:	2100      	movs	r1, #0
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f7fd fef6 	bl	800c99c <dir_sdi>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	73fb      	strb	r3, [r7, #15]
 800ebb4:	e01c      	b.n	800ebf0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800ebb6:	2100      	movs	r1, #0
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f7fe faa0 	bl	800d0fe <dir_read>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ebc2:	7bfb      	ldrb	r3, [r7, #15]
 800ebc4:	2b04      	cmp	r3, #4
 800ebc6:	d101      	bne.n	800ebcc <f_readdir+0x4c>
 800ebc8:	2300      	movs	r3, #0
 800ebca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800ebcc:	7bfb      	ldrb	r3, [r7, #15]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d10e      	bne.n	800ebf0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ebd2:	6839      	ldr	r1, [r7, #0]
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f7fe fcf1 	bl	800d5bc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ebda:	2100      	movs	r1, #0
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f7fd ff58 	bl	800ca92 <dir_next>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ebe6:	7bfb      	ldrb	r3, [r7, #15]
 800ebe8:	2b04      	cmp	r3, #4
 800ebea:	d101      	bne.n	800ebf0 <f_readdir+0x70>
 800ebec:	2300      	movs	r3, #0
 800ebee:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ebf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
	...

0800ebfc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b087      	sub	sp, #28
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	4613      	mov	r3, r2
 800ec08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ec12:	4b1f      	ldr	r3, [pc, #124]	; (800ec90 <FATFS_LinkDriverEx+0x94>)
 800ec14:	7a5b      	ldrb	r3, [r3, #9]
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d131      	bne.n	800ec80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ec1c:	4b1c      	ldr	r3, [pc, #112]	; (800ec90 <FATFS_LinkDriverEx+0x94>)
 800ec1e:	7a5b      	ldrb	r3, [r3, #9]
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	461a      	mov	r2, r3
 800ec24:	4b1a      	ldr	r3, [pc, #104]	; (800ec90 <FATFS_LinkDriverEx+0x94>)
 800ec26:	2100      	movs	r1, #0
 800ec28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ec2a:	4b19      	ldr	r3, [pc, #100]	; (800ec90 <FATFS_LinkDriverEx+0x94>)
 800ec2c:	7a5b      	ldrb	r3, [r3, #9]
 800ec2e:	b2db      	uxtb	r3, r3
 800ec30:	4a17      	ldr	r2, [pc, #92]	; (800ec90 <FATFS_LinkDriverEx+0x94>)
 800ec32:	009b      	lsls	r3, r3, #2
 800ec34:	4413      	add	r3, r2
 800ec36:	68fa      	ldr	r2, [r7, #12]
 800ec38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ec3a:	4b15      	ldr	r3, [pc, #84]	; (800ec90 <FATFS_LinkDriverEx+0x94>)
 800ec3c:	7a5b      	ldrb	r3, [r3, #9]
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	461a      	mov	r2, r3
 800ec42:	4b13      	ldr	r3, [pc, #76]	; (800ec90 <FATFS_LinkDriverEx+0x94>)
 800ec44:	4413      	add	r3, r2
 800ec46:	79fa      	ldrb	r2, [r7, #7]
 800ec48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ec4a:	4b11      	ldr	r3, [pc, #68]	; (800ec90 <FATFS_LinkDriverEx+0x94>)
 800ec4c:	7a5b      	ldrb	r3, [r3, #9]
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	1c5a      	adds	r2, r3, #1
 800ec52:	b2d1      	uxtb	r1, r2
 800ec54:	4a0e      	ldr	r2, [pc, #56]	; (800ec90 <FATFS_LinkDriverEx+0x94>)
 800ec56:	7251      	strb	r1, [r2, #9]
 800ec58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ec5a:	7dbb      	ldrb	r3, [r7, #22]
 800ec5c:	3330      	adds	r3, #48	; 0x30
 800ec5e:	b2da      	uxtb	r2, r3
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	3301      	adds	r3, #1
 800ec68:	223a      	movs	r2, #58	; 0x3a
 800ec6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	3302      	adds	r3, #2
 800ec70:	222f      	movs	r2, #47	; 0x2f
 800ec72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	3303      	adds	r3, #3
 800ec78:	2200      	movs	r2, #0
 800ec7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ec80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	371c      	adds	r7, #28
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr
 800ec8e:	bf00      	nop
 800ec90:	200034e0 	.word	0x200034e0

0800ec94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ec9e:	2200      	movs	r2, #0
 800eca0:	6839      	ldr	r1, [r7, #0]
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f7ff ffaa 	bl	800ebfc <FATFS_LinkDriverEx>
 800eca8:	4603      	mov	r3, r0
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3708      	adds	r7, #8
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
	...

0800ecb4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b085      	sub	sp, #20
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	4603      	mov	r3, r0
 800ecbc:	6039      	str	r1, [r7, #0]
 800ecbe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ecc0:	88fb      	ldrh	r3, [r7, #6]
 800ecc2:	2b7f      	cmp	r3, #127	; 0x7f
 800ecc4:	d802      	bhi.n	800eccc <ff_convert+0x18>
		c = chr;
 800ecc6:	88fb      	ldrh	r3, [r7, #6]
 800ecc8:	81fb      	strh	r3, [r7, #14]
 800ecca:	e025      	b.n	800ed18 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d00b      	beq.n	800ecea <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ecd2:	88fb      	ldrh	r3, [r7, #6]
 800ecd4:	2bff      	cmp	r3, #255	; 0xff
 800ecd6:	d805      	bhi.n	800ece4 <ff_convert+0x30>
 800ecd8:	88fb      	ldrh	r3, [r7, #6]
 800ecda:	3b80      	subs	r3, #128	; 0x80
 800ecdc:	4a12      	ldr	r2, [pc, #72]	; (800ed28 <ff_convert+0x74>)
 800ecde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ece2:	e000      	b.n	800ece6 <ff_convert+0x32>
 800ece4:	2300      	movs	r3, #0
 800ece6:	81fb      	strh	r3, [r7, #14]
 800ece8:	e016      	b.n	800ed18 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ecea:	2300      	movs	r3, #0
 800ecec:	81fb      	strh	r3, [r7, #14]
 800ecee:	e009      	b.n	800ed04 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ecf0:	89fb      	ldrh	r3, [r7, #14]
 800ecf2:	4a0d      	ldr	r2, [pc, #52]	; (800ed28 <ff_convert+0x74>)
 800ecf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecf8:	88fa      	ldrh	r2, [r7, #6]
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d006      	beq.n	800ed0c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ecfe:	89fb      	ldrh	r3, [r7, #14]
 800ed00:	3301      	adds	r3, #1
 800ed02:	81fb      	strh	r3, [r7, #14]
 800ed04:	89fb      	ldrh	r3, [r7, #14]
 800ed06:	2b7f      	cmp	r3, #127	; 0x7f
 800ed08:	d9f2      	bls.n	800ecf0 <ff_convert+0x3c>
 800ed0a:	e000      	b.n	800ed0e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ed0c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ed0e:	89fb      	ldrh	r3, [r7, #14]
 800ed10:	3380      	adds	r3, #128	; 0x80
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ed18:	89fb      	ldrh	r3, [r7, #14]
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3714      	adds	r7, #20
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	0801113c 	.word	0x0801113c

0800ed2c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b087      	sub	sp, #28
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	4603      	mov	r3, r0
 800ed34:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ed36:	88fb      	ldrh	r3, [r7, #6]
 800ed38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed3c:	d201      	bcs.n	800ed42 <ff_wtoupper+0x16>
 800ed3e:	4b3e      	ldr	r3, [pc, #248]	; (800ee38 <ff_wtoupper+0x10c>)
 800ed40:	e000      	b.n	800ed44 <ff_wtoupper+0x18>
 800ed42:	4b3e      	ldr	r3, [pc, #248]	; (800ee3c <ff_wtoupper+0x110>)
 800ed44:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	1c9a      	adds	r2, r3, #2
 800ed4a:	617a      	str	r2, [r7, #20]
 800ed4c:	881b      	ldrh	r3, [r3, #0]
 800ed4e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ed50:	8a7b      	ldrh	r3, [r7, #18]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d068      	beq.n	800ee28 <ff_wtoupper+0xfc>
 800ed56:	88fa      	ldrh	r2, [r7, #6]
 800ed58:	8a7b      	ldrh	r3, [r7, #18]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d364      	bcc.n	800ee28 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	1c9a      	adds	r2, r3, #2
 800ed62:	617a      	str	r2, [r7, #20]
 800ed64:	881b      	ldrh	r3, [r3, #0]
 800ed66:	823b      	strh	r3, [r7, #16]
 800ed68:	8a3b      	ldrh	r3, [r7, #16]
 800ed6a:	0a1b      	lsrs	r3, r3, #8
 800ed6c:	81fb      	strh	r3, [r7, #14]
 800ed6e:	8a3b      	ldrh	r3, [r7, #16]
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ed74:	88fa      	ldrh	r2, [r7, #6]
 800ed76:	8a79      	ldrh	r1, [r7, #18]
 800ed78:	8a3b      	ldrh	r3, [r7, #16]
 800ed7a:	440b      	add	r3, r1
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	da49      	bge.n	800ee14 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ed80:	89fb      	ldrh	r3, [r7, #14]
 800ed82:	2b08      	cmp	r3, #8
 800ed84:	d84f      	bhi.n	800ee26 <ff_wtoupper+0xfa>
 800ed86:	a201      	add	r2, pc, #4	; (adr r2, 800ed8c <ff_wtoupper+0x60>)
 800ed88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed8c:	0800edb1 	.word	0x0800edb1
 800ed90:	0800edc3 	.word	0x0800edc3
 800ed94:	0800edd9 	.word	0x0800edd9
 800ed98:	0800ede1 	.word	0x0800ede1
 800ed9c:	0800ede9 	.word	0x0800ede9
 800eda0:	0800edf1 	.word	0x0800edf1
 800eda4:	0800edf9 	.word	0x0800edf9
 800eda8:	0800ee01 	.word	0x0800ee01
 800edac:	0800ee09 	.word	0x0800ee09
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800edb0:	88fa      	ldrh	r2, [r7, #6]
 800edb2:	8a7b      	ldrh	r3, [r7, #18]
 800edb4:	1ad3      	subs	r3, r2, r3
 800edb6:	005b      	lsls	r3, r3, #1
 800edb8:	697a      	ldr	r2, [r7, #20]
 800edba:	4413      	add	r3, r2
 800edbc:	881b      	ldrh	r3, [r3, #0]
 800edbe:	80fb      	strh	r3, [r7, #6]
 800edc0:	e027      	b.n	800ee12 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800edc2:	88fa      	ldrh	r2, [r7, #6]
 800edc4:	8a7b      	ldrh	r3, [r7, #18]
 800edc6:	1ad3      	subs	r3, r2, r3
 800edc8:	b29b      	uxth	r3, r3
 800edca:	f003 0301 	and.w	r3, r3, #1
 800edce:	b29b      	uxth	r3, r3
 800edd0:	88fa      	ldrh	r2, [r7, #6]
 800edd2:	1ad3      	subs	r3, r2, r3
 800edd4:	80fb      	strh	r3, [r7, #6]
 800edd6:	e01c      	b.n	800ee12 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800edd8:	88fb      	ldrh	r3, [r7, #6]
 800edda:	3b10      	subs	r3, #16
 800eddc:	80fb      	strh	r3, [r7, #6]
 800edde:	e018      	b.n	800ee12 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ede0:	88fb      	ldrh	r3, [r7, #6]
 800ede2:	3b20      	subs	r3, #32
 800ede4:	80fb      	strh	r3, [r7, #6]
 800ede6:	e014      	b.n	800ee12 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ede8:	88fb      	ldrh	r3, [r7, #6]
 800edea:	3b30      	subs	r3, #48	; 0x30
 800edec:	80fb      	strh	r3, [r7, #6]
 800edee:	e010      	b.n	800ee12 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800edf0:	88fb      	ldrh	r3, [r7, #6]
 800edf2:	3b1a      	subs	r3, #26
 800edf4:	80fb      	strh	r3, [r7, #6]
 800edf6:	e00c      	b.n	800ee12 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800edf8:	88fb      	ldrh	r3, [r7, #6]
 800edfa:	3308      	adds	r3, #8
 800edfc:	80fb      	strh	r3, [r7, #6]
 800edfe:	e008      	b.n	800ee12 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ee00:	88fb      	ldrh	r3, [r7, #6]
 800ee02:	3b50      	subs	r3, #80	; 0x50
 800ee04:	80fb      	strh	r3, [r7, #6]
 800ee06:	e004      	b.n	800ee12 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ee08:	88fb      	ldrh	r3, [r7, #6]
 800ee0a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ee0e:	80fb      	strh	r3, [r7, #6]
 800ee10:	bf00      	nop
			}
			break;
 800ee12:	e008      	b.n	800ee26 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ee14:	89fb      	ldrh	r3, [r7, #14]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d195      	bne.n	800ed46 <ff_wtoupper+0x1a>
 800ee1a:	8a3b      	ldrh	r3, [r7, #16]
 800ee1c:	005b      	lsls	r3, r3, #1
 800ee1e:	697a      	ldr	r2, [r7, #20]
 800ee20:	4413      	add	r3, r2
 800ee22:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ee24:	e78f      	b.n	800ed46 <ff_wtoupper+0x1a>
			break;
 800ee26:	bf00      	nop
	}

	return chr;
 800ee28:	88fb      	ldrh	r3, [r7, #6]
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	371c      	adds	r7, #28
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr
 800ee36:	bf00      	nop
 800ee38:	0801123c 	.word	0x0801123c
 800ee3c:	08011430 	.word	0x08011430

0800ee40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ee44:	2200      	movs	r2, #0
 800ee46:	4912      	ldr	r1, [pc, #72]	; (800ee90 <MX_USB_DEVICE_Init+0x50>)
 800ee48:	4812      	ldr	r0, [pc, #72]	; (800ee94 <MX_USB_DEVICE_Init+0x54>)
 800ee4a:	f7fb fbbf 	bl	800a5cc <USBD_Init>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d001      	beq.n	800ee58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ee54:	f7f2 f8e0 	bl	8001018 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ee58:	490f      	ldr	r1, [pc, #60]	; (800ee98 <MX_USB_DEVICE_Init+0x58>)
 800ee5a:	480e      	ldr	r0, [pc, #56]	; (800ee94 <MX_USB_DEVICE_Init+0x54>)
 800ee5c:	f7fb fbe6 	bl	800a62c <USBD_RegisterClass>
 800ee60:	4603      	mov	r3, r0
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d001      	beq.n	800ee6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ee66:	f7f2 f8d7 	bl	8001018 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ee6a:	490c      	ldr	r1, [pc, #48]	; (800ee9c <MX_USB_DEVICE_Init+0x5c>)
 800ee6c:	4809      	ldr	r0, [pc, #36]	; (800ee94 <MX_USB_DEVICE_Init+0x54>)
 800ee6e:	f7fb fadd 	bl	800a42c <USBD_CDC_RegisterInterface>
 800ee72:	4603      	mov	r3, r0
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d001      	beq.n	800ee7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ee78:	f7f2 f8ce 	bl	8001018 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ee7c:	4805      	ldr	r0, [pc, #20]	; (800ee94 <MX_USB_DEVICE_Init+0x54>)
 800ee7e:	f7fb fc0b 	bl	800a698 <USBD_Start>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d001      	beq.n	800ee8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ee88:	f7f2 f8c6 	bl	8001018 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ee8c:	bf00      	nop
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	200000ac 	.word	0x200000ac
 800ee94:	200034ec 	.word	0x200034ec
 800ee98:	20000018 	.word	0x20000018
 800ee9c:	20000098 	.word	0x20000098

0800eea0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800eea4:	2200      	movs	r2, #0
 800eea6:	4905      	ldr	r1, [pc, #20]	; (800eebc <CDC_Init_FS+0x1c>)
 800eea8:	4805      	ldr	r0, [pc, #20]	; (800eec0 <CDC_Init_FS+0x20>)
 800eeaa:	f7fb fad9 	bl	800a460 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800eeae:	4905      	ldr	r1, [pc, #20]	; (800eec4 <CDC_Init_FS+0x24>)
 800eeb0:	4803      	ldr	r0, [pc, #12]	; (800eec0 <CDC_Init_FS+0x20>)
 800eeb2:	f7fb faf7 	bl	800a4a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800eeb6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	20003fc8 	.word	0x20003fc8
 800eec0:	200034ec 	.word	0x200034ec
 800eec4:	200037c8 	.word	0x200037c8

0800eec8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800eec8:	b480      	push	{r7}
 800eeca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800eecc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800eece:	4618      	mov	r0, r3
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	4603      	mov	r3, r0
 800eee0:	6039      	str	r1, [r7, #0]
 800eee2:	71fb      	strb	r3, [r7, #7]
 800eee4:	4613      	mov	r3, r2
 800eee6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800eee8:	79fb      	ldrb	r3, [r7, #7]
 800eeea:	2b23      	cmp	r3, #35	; 0x23
 800eeec:	d84a      	bhi.n	800ef84 <CDC_Control_FS+0xac>
 800eeee:	a201      	add	r2, pc, #4	; (adr r2, 800eef4 <CDC_Control_FS+0x1c>)
 800eef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eef4:	0800ef85 	.word	0x0800ef85
 800eef8:	0800ef85 	.word	0x0800ef85
 800eefc:	0800ef85 	.word	0x0800ef85
 800ef00:	0800ef85 	.word	0x0800ef85
 800ef04:	0800ef85 	.word	0x0800ef85
 800ef08:	0800ef85 	.word	0x0800ef85
 800ef0c:	0800ef85 	.word	0x0800ef85
 800ef10:	0800ef85 	.word	0x0800ef85
 800ef14:	0800ef85 	.word	0x0800ef85
 800ef18:	0800ef85 	.word	0x0800ef85
 800ef1c:	0800ef85 	.word	0x0800ef85
 800ef20:	0800ef85 	.word	0x0800ef85
 800ef24:	0800ef85 	.word	0x0800ef85
 800ef28:	0800ef85 	.word	0x0800ef85
 800ef2c:	0800ef85 	.word	0x0800ef85
 800ef30:	0800ef85 	.word	0x0800ef85
 800ef34:	0800ef85 	.word	0x0800ef85
 800ef38:	0800ef85 	.word	0x0800ef85
 800ef3c:	0800ef85 	.word	0x0800ef85
 800ef40:	0800ef85 	.word	0x0800ef85
 800ef44:	0800ef85 	.word	0x0800ef85
 800ef48:	0800ef85 	.word	0x0800ef85
 800ef4c:	0800ef85 	.word	0x0800ef85
 800ef50:	0800ef85 	.word	0x0800ef85
 800ef54:	0800ef85 	.word	0x0800ef85
 800ef58:	0800ef85 	.word	0x0800ef85
 800ef5c:	0800ef85 	.word	0x0800ef85
 800ef60:	0800ef85 	.word	0x0800ef85
 800ef64:	0800ef85 	.word	0x0800ef85
 800ef68:	0800ef85 	.word	0x0800ef85
 800ef6c:	0800ef85 	.word	0x0800ef85
 800ef70:	0800ef85 	.word	0x0800ef85
 800ef74:	0800ef85 	.word	0x0800ef85
 800ef78:	0800ef85 	.word	0x0800ef85
 800ef7c:	0800ef85 	.word	0x0800ef85
 800ef80:	0800ef85 	.word	0x0800ef85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ef84:	bf00      	nop
  }

  return (USBD_OK);
 800ef86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	370c      	adds	r7, #12
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr

0800ef94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ef9e:	6879      	ldr	r1, [r7, #4]
 800efa0:	4805      	ldr	r0, [pc, #20]	; (800efb8 <CDC_Receive_FS+0x24>)
 800efa2:	f7fb fa7f 	bl	800a4a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800efa6:	4804      	ldr	r0, [pc, #16]	; (800efb8 <CDC_Receive_FS+0x24>)
 800efa8:	f7fb fada 	bl	800a560 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800efac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3708      	adds	r7, #8
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	200034ec 	.word	0x200034ec

0800efbc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	460b      	mov	r3, r1
 800efc6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800efc8:	2300      	movs	r3, #0
 800efca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800efcc:	4b0d      	ldr	r3, [pc, #52]	; (800f004 <CDC_Transmit_FS+0x48>)
 800efce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efd2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d001      	beq.n	800efe2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800efde:	2301      	movs	r3, #1
 800efe0:	e00b      	b.n	800effa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800efe2:	887b      	ldrh	r3, [r7, #2]
 800efe4:	461a      	mov	r2, r3
 800efe6:	6879      	ldr	r1, [r7, #4]
 800efe8:	4806      	ldr	r0, [pc, #24]	; (800f004 <CDC_Transmit_FS+0x48>)
 800efea:	f7fb fa39 	bl	800a460 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800efee:	4805      	ldr	r0, [pc, #20]	; (800f004 <CDC_Transmit_FS+0x48>)
 800eff0:	f7fb fa76 	bl	800a4e0 <USBD_CDC_TransmitPacket>
 800eff4:	4603      	mov	r3, r0
 800eff6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800effa:	4618      	mov	r0, r3
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
 800f002:	bf00      	nop
 800f004:	200034ec 	.word	0x200034ec

0800f008 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f008:	b480      	push	{r7}
 800f00a:	b087      	sub	sp, #28
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	4613      	mov	r3, r2
 800f014:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f016:	2300      	movs	r3, #0
 800f018:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f01a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f01e:	4618      	mov	r0, r3
 800f020:	371c      	adds	r7, #28
 800f022:	46bd      	mov	sp, r7
 800f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f028:	4770      	bx	lr
	...

0800f02c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f02c:	b480      	push	{r7}
 800f02e:	b083      	sub	sp, #12
 800f030:	af00      	add	r7, sp, #0
 800f032:	4603      	mov	r3, r0
 800f034:	6039      	str	r1, [r7, #0]
 800f036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	2212      	movs	r2, #18
 800f03c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f03e:	4b03      	ldr	r3, [pc, #12]	; (800f04c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f040:	4618      	mov	r0, r3
 800f042:	370c      	adds	r7, #12
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr
 800f04c:	200000cc 	.word	0x200000cc

0800f050 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	4603      	mov	r3, r0
 800f058:	6039      	str	r1, [r7, #0]
 800f05a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	2204      	movs	r2, #4
 800f060:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f062:	4b03      	ldr	r3, [pc, #12]	; (800f070 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f064:	4618      	mov	r0, r3
 800f066:	370c      	adds	r7, #12
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr
 800f070:	200000ec 	.word	0x200000ec

0800f074 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
 800f07a:	4603      	mov	r3, r0
 800f07c:	6039      	str	r1, [r7, #0]
 800f07e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f080:	79fb      	ldrb	r3, [r7, #7]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d105      	bne.n	800f092 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f086:	683a      	ldr	r2, [r7, #0]
 800f088:	4907      	ldr	r1, [pc, #28]	; (800f0a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f08a:	4808      	ldr	r0, [pc, #32]	; (800f0ac <USBD_FS_ProductStrDescriptor+0x38>)
 800f08c:	f7fc fcda 	bl	800ba44 <USBD_GetString>
 800f090:	e004      	b.n	800f09c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f092:	683a      	ldr	r2, [r7, #0]
 800f094:	4904      	ldr	r1, [pc, #16]	; (800f0a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f096:	4805      	ldr	r0, [pc, #20]	; (800f0ac <USBD_FS_ProductStrDescriptor+0x38>)
 800f098:	f7fc fcd4 	bl	800ba44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f09c:	4b02      	ldr	r3, [pc, #8]	; (800f0a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3708      	adds	r7, #8
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	200047c8 	.word	0x200047c8
 800f0ac:	08011030 	.word	0x08011030

0800f0b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b082      	sub	sp, #8
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	6039      	str	r1, [r7, #0]
 800f0ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f0bc:	683a      	ldr	r2, [r7, #0]
 800f0be:	4904      	ldr	r1, [pc, #16]	; (800f0d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f0c0:	4804      	ldr	r0, [pc, #16]	; (800f0d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f0c2:	f7fc fcbf 	bl	800ba44 <USBD_GetString>
  return USBD_StrDesc;
 800f0c6:	4b02      	ldr	r3, [pc, #8]	; (800f0d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3708      	adds	r7, #8
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	200047c8 	.word	0x200047c8
 800f0d4:	08011048 	.word	0x08011048

0800f0d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	4603      	mov	r3, r0
 800f0e0:	6039      	str	r1, [r7, #0]
 800f0e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	221a      	movs	r2, #26
 800f0e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f0ea:	f000 f855 	bl	800f198 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f0ee:	4b02      	ldr	r3, [pc, #8]	; (800f0f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3708      	adds	r7, #8
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}
 800f0f8:	200000f0 	.word	0x200000f0

0800f0fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	4603      	mov	r3, r0
 800f104:	6039      	str	r1, [r7, #0]
 800f106:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f108:	79fb      	ldrb	r3, [r7, #7]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d105      	bne.n	800f11a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f10e:	683a      	ldr	r2, [r7, #0]
 800f110:	4907      	ldr	r1, [pc, #28]	; (800f130 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f112:	4808      	ldr	r0, [pc, #32]	; (800f134 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f114:	f7fc fc96 	bl	800ba44 <USBD_GetString>
 800f118:	e004      	b.n	800f124 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f11a:	683a      	ldr	r2, [r7, #0]
 800f11c:	4904      	ldr	r1, [pc, #16]	; (800f130 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f11e:	4805      	ldr	r0, [pc, #20]	; (800f134 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f120:	f7fc fc90 	bl	800ba44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f124:	4b02      	ldr	r3, [pc, #8]	; (800f130 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f126:	4618      	mov	r0, r3
 800f128:	3708      	adds	r7, #8
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	200047c8 	.word	0x200047c8
 800f134:	0801105c 	.word	0x0801105c

0800f138 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	4603      	mov	r3, r0
 800f140:	6039      	str	r1, [r7, #0]
 800f142:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f144:	79fb      	ldrb	r3, [r7, #7]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d105      	bne.n	800f156 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f14a:	683a      	ldr	r2, [r7, #0]
 800f14c:	4907      	ldr	r1, [pc, #28]	; (800f16c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f14e:	4808      	ldr	r0, [pc, #32]	; (800f170 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f150:	f7fc fc78 	bl	800ba44 <USBD_GetString>
 800f154:	e004      	b.n	800f160 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f156:	683a      	ldr	r2, [r7, #0]
 800f158:	4904      	ldr	r1, [pc, #16]	; (800f16c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f15a:	4805      	ldr	r0, [pc, #20]	; (800f170 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f15c:	f7fc fc72 	bl	800ba44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f160:	4b02      	ldr	r3, [pc, #8]	; (800f16c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f162:	4618      	mov	r0, r3
 800f164:	3708      	adds	r7, #8
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	200047c8 	.word	0x200047c8
 800f170:	08011068 	.word	0x08011068

0800f174 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	4603      	mov	r3, r0
 800f17c:	6039      	str	r1, [r7, #0]
 800f17e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	220c      	movs	r2, #12
 800f184:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f186:	4b03      	ldr	r3, [pc, #12]	; (800f194 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f188:	4618      	mov	r0, r3
 800f18a:	370c      	adds	r7, #12
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr
 800f194:	200000e0 	.word	0x200000e0

0800f198 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f19e:	4b0f      	ldr	r3, [pc, #60]	; (800f1dc <Get_SerialNum+0x44>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f1a4:	4b0e      	ldr	r3, [pc, #56]	; (800f1e0 <Get_SerialNum+0x48>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f1aa:	4b0e      	ldr	r3, [pc, #56]	; (800f1e4 <Get_SerialNum+0x4c>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f1b0:	68fa      	ldr	r2, [r7, #12]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d009      	beq.n	800f1d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f1be:	2208      	movs	r2, #8
 800f1c0:	4909      	ldr	r1, [pc, #36]	; (800f1e8 <Get_SerialNum+0x50>)
 800f1c2:	68f8      	ldr	r0, [r7, #12]
 800f1c4:	f000 f814 	bl	800f1f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f1c8:	2204      	movs	r2, #4
 800f1ca:	4908      	ldr	r1, [pc, #32]	; (800f1ec <Get_SerialNum+0x54>)
 800f1cc:	68b8      	ldr	r0, [r7, #8]
 800f1ce:	f000 f80f 	bl	800f1f0 <IntToUnicode>
  }
}
 800f1d2:	bf00      	nop
 800f1d4:	3710      	adds	r7, #16
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	1ff0f420 	.word	0x1ff0f420
 800f1e0:	1ff0f424 	.word	0x1ff0f424
 800f1e4:	1ff0f428 	.word	0x1ff0f428
 800f1e8:	200000f2 	.word	0x200000f2
 800f1ec:	20000102 	.word	0x20000102

0800f1f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b087      	sub	sp, #28
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	60b9      	str	r1, [r7, #8]
 800f1fa:	4613      	mov	r3, r2
 800f1fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f1fe:	2300      	movs	r3, #0
 800f200:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f202:	2300      	movs	r3, #0
 800f204:	75fb      	strb	r3, [r7, #23]
 800f206:	e027      	b.n	800f258 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	0f1b      	lsrs	r3, r3, #28
 800f20c:	2b09      	cmp	r3, #9
 800f20e:	d80b      	bhi.n	800f228 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	0f1b      	lsrs	r3, r3, #28
 800f214:	b2da      	uxtb	r2, r3
 800f216:	7dfb      	ldrb	r3, [r7, #23]
 800f218:	005b      	lsls	r3, r3, #1
 800f21a:	4619      	mov	r1, r3
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	440b      	add	r3, r1
 800f220:	3230      	adds	r2, #48	; 0x30
 800f222:	b2d2      	uxtb	r2, r2
 800f224:	701a      	strb	r2, [r3, #0]
 800f226:	e00a      	b.n	800f23e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	0f1b      	lsrs	r3, r3, #28
 800f22c:	b2da      	uxtb	r2, r3
 800f22e:	7dfb      	ldrb	r3, [r7, #23]
 800f230:	005b      	lsls	r3, r3, #1
 800f232:	4619      	mov	r1, r3
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	440b      	add	r3, r1
 800f238:	3237      	adds	r2, #55	; 0x37
 800f23a:	b2d2      	uxtb	r2, r2
 800f23c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	011b      	lsls	r3, r3, #4
 800f242:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f244:	7dfb      	ldrb	r3, [r7, #23]
 800f246:	005b      	lsls	r3, r3, #1
 800f248:	3301      	adds	r3, #1
 800f24a:	68ba      	ldr	r2, [r7, #8]
 800f24c:	4413      	add	r3, r2
 800f24e:	2200      	movs	r2, #0
 800f250:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f252:	7dfb      	ldrb	r3, [r7, #23]
 800f254:	3301      	adds	r3, #1
 800f256:	75fb      	strb	r3, [r7, #23]
 800f258:	7dfa      	ldrb	r2, [r7, #23]
 800f25a:	79fb      	ldrb	r3, [r7, #7]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d3d3      	bcc.n	800f208 <IntToUnicode+0x18>
  }
}
 800f260:	bf00      	nop
 800f262:	bf00      	nop
 800f264:	371c      	adds	r7, #28
 800f266:	46bd      	mov	sp, r7
 800f268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26c:	4770      	bx	lr
	...

0800f270 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b0ae      	sub	sp, #184	; 0xb8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f278:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f27c:	2200      	movs	r2, #0
 800f27e:	601a      	str	r2, [r3, #0]
 800f280:	605a      	str	r2, [r3, #4]
 800f282:	609a      	str	r2, [r3, #8]
 800f284:	60da      	str	r2, [r3, #12]
 800f286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f288:	f107 0314 	add.w	r3, r7, #20
 800f28c:	2290      	movs	r2, #144	; 0x90
 800f28e:	2100      	movs	r1, #0
 800f290:	4618      	mov	r0, r3
 800f292:	f000 fe16 	bl	800fec2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f29e:	d151      	bne.n	800f344 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800f2a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f2a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f2ac:	f107 0314 	add.w	r3, r7, #20
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7f5 fead 	bl	8005010 <HAL_RCCEx_PeriphCLKConfig>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d001      	beq.n	800f2c0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f2bc:	f7f1 feac 	bl	8001018 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f2c0:	4b22      	ldr	r3, [pc, #136]	; (800f34c <HAL_PCD_MspInit+0xdc>)
 800f2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2c4:	4a21      	ldr	r2, [pc, #132]	; (800f34c <HAL_PCD_MspInit+0xdc>)
 800f2c6:	f043 0301 	orr.w	r3, r3, #1
 800f2ca:	6313      	str	r3, [r2, #48]	; 0x30
 800f2cc:	4b1f      	ldr	r3, [pc, #124]	; (800f34c <HAL_PCD_MspInit+0xdc>)
 800f2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2d0:	f003 0301 	and.w	r3, r3, #1
 800f2d4:	613b      	str	r3, [r7, #16]
 800f2d6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f2d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f2dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2e0:	2302      	movs	r3, #2
 800f2e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f2ec:	2303      	movs	r3, #3
 800f2ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f2f2:	230a      	movs	r3, #10
 800f2f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	4814      	ldr	r0, [pc, #80]	; (800f350 <HAL_PCD_MspInit+0xe0>)
 800f300:	f7f3 fcf8 	bl	8002cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f304:	4b11      	ldr	r3, [pc, #68]	; (800f34c <HAL_PCD_MspInit+0xdc>)
 800f306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f308:	4a10      	ldr	r2, [pc, #64]	; (800f34c <HAL_PCD_MspInit+0xdc>)
 800f30a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f30e:	6353      	str	r3, [r2, #52]	; 0x34
 800f310:	4b0e      	ldr	r3, [pc, #56]	; (800f34c <HAL_PCD_MspInit+0xdc>)
 800f312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f318:	60fb      	str	r3, [r7, #12]
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	4b0b      	ldr	r3, [pc, #44]	; (800f34c <HAL_PCD_MspInit+0xdc>)
 800f31e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f320:	4a0a      	ldr	r2, [pc, #40]	; (800f34c <HAL_PCD_MspInit+0xdc>)
 800f322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f326:	6453      	str	r3, [r2, #68]	; 0x44
 800f328:	4b08      	ldr	r3, [pc, #32]	; (800f34c <HAL_PCD_MspInit+0xdc>)
 800f32a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f32c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f330:	60bb      	str	r3, [r7, #8]
 800f332:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f334:	2200      	movs	r2, #0
 800f336:	2100      	movs	r1, #0
 800f338:	2043      	movs	r0, #67	; 0x43
 800f33a:	f7f3 f8fa 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f33e:	2043      	movs	r0, #67	; 0x43
 800f340:	f7f3 f913 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f344:	bf00      	nop
 800f346:	37b8      	adds	r7, #184	; 0xb8
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	40023800 	.word	0x40023800
 800f350:	40020000 	.word	0x40020000

0800f354 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f368:	4619      	mov	r1, r3
 800f36a:	4610      	mov	r0, r2
 800f36c:	f7fb f9e1 	bl	800a732 <USBD_LL_SetupStage>
}
 800f370:	bf00      	nop
 800f372:	3708      	adds	r7, #8
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	460b      	mov	r3, r1
 800f382:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800f38a:	78fa      	ldrb	r2, [r7, #3]
 800f38c:	6879      	ldr	r1, [r7, #4]
 800f38e:	4613      	mov	r3, r2
 800f390:	00db      	lsls	r3, r3, #3
 800f392:	4413      	add	r3, r2
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	440b      	add	r3, r1
 800f398:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f39c:	681a      	ldr	r2, [r3, #0]
 800f39e:	78fb      	ldrb	r3, [r7, #3]
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	f7fb fa1b 	bl	800a7dc <USBD_LL_DataOutStage>
}
 800f3a6:	bf00      	nop
 800f3a8:	3708      	adds	r7, #8
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}

0800f3ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3ae:	b580      	push	{r7, lr}
 800f3b0:	b082      	sub	sp, #8
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	6078      	str	r0, [r7, #4]
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800f3c0:	78fa      	ldrb	r2, [r7, #3]
 800f3c2:	6879      	ldr	r1, [r7, #4]
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	00db      	lsls	r3, r3, #3
 800f3c8:	4413      	add	r3, r2
 800f3ca:	009b      	lsls	r3, r3, #2
 800f3cc:	440b      	add	r3, r1
 800f3ce:	334c      	adds	r3, #76	; 0x4c
 800f3d0:	681a      	ldr	r2, [r3, #0]
 800f3d2:	78fb      	ldrb	r3, [r7, #3]
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	f7fb fab4 	bl	800a942 <USBD_LL_DataInStage>
}
 800f3da:	bf00      	nop
 800f3dc:	3708      	adds	r7, #8
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}

0800f3e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3e2:	b580      	push	{r7, lr}
 800f3e4:	b082      	sub	sp, #8
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7fb fbe8 	bl	800abc6 <USBD_LL_SOF>
}
 800f3f6:	bf00      	nop
 800f3f8:	3708      	adds	r7, #8
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3fe:	b580      	push	{r7, lr}
 800f400:	b084      	sub	sp, #16
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f406:	2301      	movs	r3, #1
 800f408:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	68db      	ldr	r3, [r3, #12]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d102      	bne.n	800f418 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f412:	2300      	movs	r3, #0
 800f414:	73fb      	strb	r3, [r7, #15]
 800f416:	e008      	b.n	800f42a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	2b02      	cmp	r3, #2
 800f41e:	d102      	bne.n	800f426 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f420:	2301      	movs	r3, #1
 800f422:	73fb      	strb	r3, [r7, #15]
 800f424:	e001      	b.n	800f42a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f426:	f7f1 fdf7 	bl	8001018 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f430:	7bfa      	ldrb	r2, [r7, #15]
 800f432:	4611      	mov	r1, r2
 800f434:	4618      	mov	r0, r3
 800f436:	f7fb fb88 	bl	800ab4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f440:	4618      	mov	r0, r3
 800f442:	f7fb fb30 	bl	800aaa6 <USBD_LL_Reset>
}
 800f446:	bf00      	nop
 800f448:	3710      	adds	r7, #16
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
	...

0800f450 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fb fb83 	bl	800ab6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	6812      	ldr	r2, [r2, #0]
 800f472:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f476:	f043 0301 	orr.w	r3, r3, #1
 800f47a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6a1b      	ldr	r3, [r3, #32]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d005      	beq.n	800f490 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f484:	4b04      	ldr	r3, [pc, #16]	; (800f498 <HAL_PCD_SuspendCallback+0x48>)
 800f486:	691b      	ldr	r3, [r3, #16]
 800f488:	4a03      	ldr	r2, [pc, #12]	; (800f498 <HAL_PCD_SuspendCallback+0x48>)
 800f48a:	f043 0306 	orr.w	r3, r3, #6
 800f48e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f490:	bf00      	nop
 800f492:	3708      	adds	r7, #8
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}
 800f498:	e000ed00 	.word	0xe000ed00

0800f49c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7fb fb73 	bl	800ab96 <USBD_LL_Resume>
}
 800f4b0:	bf00      	nop
 800f4b2:	3708      	adds	r7, #8
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f4ca:	78fa      	ldrb	r2, [r7, #3]
 800f4cc:	4611      	mov	r1, r2
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7fb fbcb 	bl	800ac6a <USBD_LL_IsoOUTIncomplete>
}
 800f4d4:	bf00      	nop
 800f4d6:	3708      	adds	r7, #8
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}

0800f4dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f4ee:	78fa      	ldrb	r2, [r7, #3]
 800f4f0:	4611      	mov	r1, r2
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7fb fb87 	bl	800ac06 <USBD_LL_IsoINIncomplete>
}
 800f4f8:	bf00      	nop
 800f4fa:	3708      	adds	r7, #8
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f50e:	4618      	mov	r0, r3
 800f510:	f7fb fbdd 	bl	800acce <USBD_LL_DevConnected>
}
 800f514:	bf00      	nop
 800f516:	3708      	adds	r7, #8
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b082      	sub	sp, #8
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fb fbda 	bl	800ace4 <USBD_LL_DevDisconnected>
}
 800f530:	bf00      	nop
 800f532:	3708      	adds	r7, #8
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d13c      	bne.n	800f5c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f548:	4a20      	ldr	r2, [pc, #128]	; (800f5cc <USBD_LL_Init+0x94>)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	4a1e      	ldr	r2, [pc, #120]	; (800f5cc <USBD_LL_Init+0x94>)
 800f554:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f558:	4b1c      	ldr	r3, [pc, #112]	; (800f5cc <USBD_LL_Init+0x94>)
 800f55a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f55e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f560:	4b1a      	ldr	r3, [pc, #104]	; (800f5cc <USBD_LL_Init+0x94>)
 800f562:	2206      	movs	r2, #6
 800f564:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f566:	4b19      	ldr	r3, [pc, #100]	; (800f5cc <USBD_LL_Init+0x94>)
 800f568:	2202      	movs	r2, #2
 800f56a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f56c:	4b17      	ldr	r3, [pc, #92]	; (800f5cc <USBD_LL_Init+0x94>)
 800f56e:	2200      	movs	r2, #0
 800f570:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f572:	4b16      	ldr	r3, [pc, #88]	; (800f5cc <USBD_LL_Init+0x94>)
 800f574:	2202      	movs	r2, #2
 800f576:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f578:	4b14      	ldr	r3, [pc, #80]	; (800f5cc <USBD_LL_Init+0x94>)
 800f57a:	2200      	movs	r2, #0
 800f57c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f57e:	4b13      	ldr	r3, [pc, #76]	; (800f5cc <USBD_LL_Init+0x94>)
 800f580:	2200      	movs	r2, #0
 800f582:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f584:	4b11      	ldr	r3, [pc, #68]	; (800f5cc <USBD_LL_Init+0x94>)
 800f586:	2200      	movs	r2, #0
 800f588:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f58a:	4b10      	ldr	r3, [pc, #64]	; (800f5cc <USBD_LL_Init+0x94>)
 800f58c:	2200      	movs	r2, #0
 800f58e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f590:	4b0e      	ldr	r3, [pc, #56]	; (800f5cc <USBD_LL_Init+0x94>)
 800f592:	2200      	movs	r2, #0
 800f594:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f596:	480d      	ldr	r0, [pc, #52]	; (800f5cc <USBD_LL_Init+0x94>)
 800f598:	f7f3 fdad 	bl	80030f6 <HAL_PCD_Init>
 800f59c:	4603      	mov	r3, r0
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d001      	beq.n	800f5a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f5a2:	f7f1 fd39 	bl	8001018 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f5a6:	2180      	movs	r1, #128	; 0x80
 800f5a8:	4808      	ldr	r0, [pc, #32]	; (800f5cc <USBD_LL_Init+0x94>)
 800f5aa:	f7f5 f828 	bl	80045fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f5ae:	2240      	movs	r2, #64	; 0x40
 800f5b0:	2100      	movs	r1, #0
 800f5b2:	4806      	ldr	r0, [pc, #24]	; (800f5cc <USBD_LL_Init+0x94>)
 800f5b4:	f7f4 ffdc 	bl	8004570 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f5b8:	2280      	movs	r2, #128	; 0x80
 800f5ba:	2101      	movs	r1, #1
 800f5bc:	4803      	ldr	r0, [pc, #12]	; (800f5cc <USBD_LL_Init+0x94>)
 800f5be:	f7f4 ffd7 	bl	8004570 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f5c2:	2300      	movs	r3, #0
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3708      	adds	r7, #8
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}
 800f5cc:	200049c8 	.word	0x200049c8

0800f5d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7f3 fea9 	bl	800333e <HAL_PCD_Start>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5f0:	7bfb      	ldrb	r3, [r7, #15]
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f000 f97e 	bl	800f8f4 <USBD_Get_USB_Status>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3710      	adds	r7, #16
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b084      	sub	sp, #16
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
 800f60e:	4608      	mov	r0, r1
 800f610:	4611      	mov	r1, r2
 800f612:	461a      	mov	r2, r3
 800f614:	4603      	mov	r3, r0
 800f616:	70fb      	strb	r3, [r7, #3]
 800f618:	460b      	mov	r3, r1
 800f61a:	70bb      	strb	r3, [r7, #2]
 800f61c:	4613      	mov	r3, r2
 800f61e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f620:	2300      	movs	r3, #0
 800f622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f624:	2300      	movs	r3, #0
 800f626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f62e:	78bb      	ldrb	r3, [r7, #2]
 800f630:	883a      	ldrh	r2, [r7, #0]
 800f632:	78f9      	ldrb	r1, [r7, #3]
 800f634:	f7f4 fb96 	bl	8003d64 <HAL_PCD_EP_Open>
 800f638:	4603      	mov	r3, r0
 800f63a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f63c:	7bfb      	ldrb	r3, [r7, #15]
 800f63e:	4618      	mov	r0, r3
 800f640:	f000 f958 	bl	800f8f4 <USBD_Get_USB_Status>
 800f644:	4603      	mov	r3, r0
 800f646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f648:	7bbb      	ldrb	r3, [r7, #14]
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	3710      	adds	r7, #16
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}

0800f652 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f652:	b580      	push	{r7, lr}
 800f654:	b084      	sub	sp, #16
 800f656:	af00      	add	r7, sp, #0
 800f658:	6078      	str	r0, [r7, #4]
 800f65a:	460b      	mov	r3, r1
 800f65c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f65e:	2300      	movs	r3, #0
 800f660:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f662:	2300      	movs	r3, #0
 800f664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f66c:	78fa      	ldrb	r2, [r7, #3]
 800f66e:	4611      	mov	r1, r2
 800f670:	4618      	mov	r0, r3
 800f672:	f7f4 fbdf 	bl	8003e34 <HAL_PCD_EP_Close>
 800f676:	4603      	mov	r3, r0
 800f678:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f67a:	7bfb      	ldrb	r3, [r7, #15]
 800f67c:	4618      	mov	r0, r3
 800f67e:	f000 f939 	bl	800f8f4 <USBD_Get_USB_Status>
 800f682:	4603      	mov	r3, r0
 800f684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f686:	7bbb      	ldrb	r3, [r7, #14]
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3710      	adds	r7, #16
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	460b      	mov	r3, r1
 800f69a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f69c:	2300      	movs	r3, #0
 800f69e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f6aa:	78fa      	ldrb	r2, [r7, #3]
 800f6ac:	4611      	mov	r1, r2
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7f4 fcb7 	bl	8004022 <HAL_PCD_EP_SetStall>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6b8:	7bfb      	ldrb	r3, [r7, #15]
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f000 f91a 	bl	800f8f4 <USBD_Get_USB_Status>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3710      	adds	r7, #16
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}

0800f6ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6ce:	b580      	push	{r7, lr}
 800f6d0:	b084      	sub	sp, #16
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	6078      	str	r0, [r7, #4]
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f6e8:	78fa      	ldrb	r2, [r7, #3]
 800f6ea:	4611      	mov	r1, r2
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7f4 fcfc 	bl	80040ea <HAL_PCD_EP_ClrStall>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6f6:	7bfb      	ldrb	r3, [r7, #15]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f000 f8fb 	bl	800f8f4 <USBD_Get_USB_Status>
 800f6fe:	4603      	mov	r3, r0
 800f700:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f702:	7bbb      	ldrb	r3, [r7, #14]
}
 800f704:	4618      	mov	r0, r3
 800f706:	3710      	adds	r7, #16
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f70c:	b480      	push	{r7}
 800f70e:	b085      	sub	sp, #20
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	460b      	mov	r3, r1
 800f716:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f71e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f724:	2b00      	cmp	r3, #0
 800f726:	da0b      	bge.n	800f740 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f728:	78fb      	ldrb	r3, [r7, #3]
 800f72a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f72e:	68f9      	ldr	r1, [r7, #12]
 800f730:	4613      	mov	r3, r2
 800f732:	00db      	lsls	r3, r3, #3
 800f734:	4413      	add	r3, r2
 800f736:	009b      	lsls	r3, r3, #2
 800f738:	440b      	add	r3, r1
 800f73a:	333e      	adds	r3, #62	; 0x3e
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	e00b      	b.n	800f758 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f740:	78fb      	ldrb	r3, [r7, #3]
 800f742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f746:	68f9      	ldr	r1, [r7, #12]
 800f748:	4613      	mov	r3, r2
 800f74a:	00db      	lsls	r3, r3, #3
 800f74c:	4413      	add	r3, r2
 800f74e:	009b      	lsls	r3, r3, #2
 800f750:	440b      	add	r3, r1
 800f752:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f756:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3714      	adds	r7, #20
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	460b      	mov	r3, r1
 800f76e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f770:	2300      	movs	r3, #0
 800f772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f774:	2300      	movs	r3, #0
 800f776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f77e:	78fa      	ldrb	r2, [r7, #3]
 800f780:	4611      	mov	r1, r2
 800f782:	4618      	mov	r0, r3
 800f784:	f7f4 fac9 	bl	8003d1a <HAL_PCD_SetAddress>
 800f788:	4603      	mov	r3, r0
 800f78a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f78c:	7bfb      	ldrb	r3, [r7, #15]
 800f78e:	4618      	mov	r0, r3
 800f790:	f000 f8b0 	bl	800f8f4 <USBD_Get_USB_Status>
 800f794:	4603      	mov	r3, r0
 800f796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f798:	7bbb      	ldrb	r3, [r7, #14]
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3710      	adds	r7, #16
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f7a2:	b580      	push	{r7, lr}
 800f7a4:	b086      	sub	sp, #24
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	60f8      	str	r0, [r7, #12]
 800f7aa:	607a      	str	r2, [r7, #4]
 800f7ac:	603b      	str	r3, [r7, #0]
 800f7ae:	460b      	mov	r3, r1
 800f7b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f7c0:	7af9      	ldrb	r1, [r7, #11]
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	687a      	ldr	r2, [r7, #4]
 800f7c6:	f7f4 fbe2 	bl	8003f8e <HAL_PCD_EP_Transmit>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7ce:	7dfb      	ldrb	r3, [r7, #23]
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f000 f88f 	bl	800f8f4 <USBD_Get_USB_Status>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f7da:	7dbb      	ldrb	r3, [r7, #22]
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3718      	adds	r7, #24
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b086      	sub	sp, #24
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60f8      	str	r0, [r7, #12]
 800f7ec:	607a      	str	r2, [r7, #4]
 800f7ee:	603b      	str	r3, [r7, #0]
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f802:	7af9      	ldrb	r1, [r7, #11]
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	f7f4 fb5e 	bl	8003ec8 <HAL_PCD_EP_Receive>
 800f80c:	4603      	mov	r3, r0
 800f80e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f810:	7dfb      	ldrb	r3, [r7, #23]
 800f812:	4618      	mov	r0, r3
 800f814:	f000 f86e 	bl	800f8f4 <USBD_Get_USB_Status>
 800f818:	4603      	mov	r3, r0
 800f81a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f81c:	7dbb      	ldrb	r3, [r7, #22]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3718      	adds	r7, #24
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}

0800f826 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f826:	b580      	push	{r7, lr}
 800f828:	b082      	sub	sp, #8
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
 800f82e:	460b      	mov	r3, r1
 800f830:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f838:	78fa      	ldrb	r2, [r7, #3]
 800f83a:	4611      	mov	r1, r2
 800f83c:	4618      	mov	r0, r3
 800f83e:	f7f4 fb8e 	bl	8003f5e <HAL_PCD_EP_GetRxCount>
 800f842:	4603      	mov	r3, r0
}
 800f844:	4618      	mov	r0, r3
 800f846:	3708      	adds	r7, #8
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	460b      	mov	r3, r1
 800f856:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f858:	78fb      	ldrb	r3, [r7, #3]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d002      	beq.n	800f864 <HAL_PCDEx_LPM_Callback+0x18>
 800f85e:	2b01      	cmp	r3, #1
 800f860:	d01f      	beq.n	800f8a2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f862:	e03b      	b.n	800f8dc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6a1b      	ldr	r3, [r3, #32]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d007      	beq.n	800f87c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f86c:	f000 f83c 	bl	800f8e8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f870:	4b1c      	ldr	r3, [pc, #112]	; (800f8e4 <HAL_PCDEx_LPM_Callback+0x98>)
 800f872:	691b      	ldr	r3, [r3, #16]
 800f874:	4a1b      	ldr	r2, [pc, #108]	; (800f8e4 <HAL_PCDEx_LPM_Callback+0x98>)
 800f876:	f023 0306 	bic.w	r3, r3, #6
 800f87a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	687a      	ldr	r2, [r7, #4]
 800f888:	6812      	ldr	r2, [r2, #0]
 800f88a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f88e:	f023 0301 	bic.w	r3, r3, #1
 800f892:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fb f97b 	bl	800ab96 <USBD_LL_Resume>
    break;
 800f8a0:	e01c      	b.n	800f8dc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	6812      	ldr	r2, [r2, #0]
 800f8b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f8b4:	f043 0301 	orr.w	r3, r3, #1
 800f8b8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7fb f952 	bl	800ab6a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6a1b      	ldr	r3, [r3, #32]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d005      	beq.n	800f8da <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f8ce:	4b05      	ldr	r3, [pc, #20]	; (800f8e4 <HAL_PCDEx_LPM_Callback+0x98>)
 800f8d0:	691b      	ldr	r3, [r3, #16]
 800f8d2:	4a04      	ldr	r2, [pc, #16]	; (800f8e4 <HAL_PCDEx_LPM_Callback+0x98>)
 800f8d4:	f043 0306 	orr.w	r3, r3, #6
 800f8d8:	6113      	str	r3, [r2, #16]
    break;
 800f8da:	bf00      	nop
}
 800f8dc:	bf00      	nop
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	e000ed00 	.word	0xe000ed00

0800f8e8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f8ec:	f7f1 f8aa 	bl	8000a44 <SystemClock_Config>
}
 800f8f0:	bf00      	nop
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8fe:	2300      	movs	r3, #0
 800f900:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f902:	79fb      	ldrb	r3, [r7, #7]
 800f904:	2b03      	cmp	r3, #3
 800f906:	d817      	bhi.n	800f938 <USBD_Get_USB_Status+0x44>
 800f908:	a201      	add	r2, pc, #4	; (adr r2, 800f910 <USBD_Get_USB_Status+0x1c>)
 800f90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f90e:	bf00      	nop
 800f910:	0800f921 	.word	0x0800f921
 800f914:	0800f927 	.word	0x0800f927
 800f918:	0800f92d 	.word	0x0800f92d
 800f91c:	0800f933 	.word	0x0800f933
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f920:	2300      	movs	r3, #0
 800f922:	73fb      	strb	r3, [r7, #15]
    break;
 800f924:	e00b      	b.n	800f93e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f926:	2303      	movs	r3, #3
 800f928:	73fb      	strb	r3, [r7, #15]
    break;
 800f92a:	e008      	b.n	800f93e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f92c:	2301      	movs	r3, #1
 800f92e:	73fb      	strb	r3, [r7, #15]
    break;
 800f930:	e005      	b.n	800f93e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f932:	2303      	movs	r3, #3
 800f934:	73fb      	strb	r3, [r7, #15]
    break;
 800f936:	e002      	b.n	800f93e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f938:	2303      	movs	r3, #3
 800f93a:	73fb      	strb	r3, [r7, #15]
    break;
 800f93c:	bf00      	nop
  }
  return usb_status;
 800f93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f940:	4618      	mov	r0, r3
 800f942:	3714      	adds	r7, #20
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr

0800f94c <malloc>:
 800f94c:	4b02      	ldr	r3, [pc, #8]	; (800f958 <malloc+0xc>)
 800f94e:	4601      	mov	r1, r0
 800f950:	6818      	ldr	r0, [r3, #0]
 800f952:	f000 b82b 	b.w	800f9ac <_malloc_r>
 800f956:	bf00      	nop
 800f958:	20000164 	.word	0x20000164

0800f95c <free>:
 800f95c:	4b02      	ldr	r3, [pc, #8]	; (800f968 <free+0xc>)
 800f95e:	4601      	mov	r1, r0
 800f960:	6818      	ldr	r0, [r3, #0]
 800f962:	f000 baf5 	b.w	800ff50 <_free_r>
 800f966:	bf00      	nop
 800f968:	20000164 	.word	0x20000164

0800f96c <sbrk_aligned>:
 800f96c:	b570      	push	{r4, r5, r6, lr}
 800f96e:	4e0e      	ldr	r6, [pc, #56]	; (800f9a8 <sbrk_aligned+0x3c>)
 800f970:	460c      	mov	r4, r1
 800f972:	6831      	ldr	r1, [r6, #0]
 800f974:	4605      	mov	r5, r0
 800f976:	b911      	cbnz	r1, 800f97e <sbrk_aligned+0x12>
 800f978:	f000 faac 	bl	800fed4 <_sbrk_r>
 800f97c:	6030      	str	r0, [r6, #0]
 800f97e:	4621      	mov	r1, r4
 800f980:	4628      	mov	r0, r5
 800f982:	f000 faa7 	bl	800fed4 <_sbrk_r>
 800f986:	1c43      	adds	r3, r0, #1
 800f988:	d00a      	beq.n	800f9a0 <sbrk_aligned+0x34>
 800f98a:	1cc4      	adds	r4, r0, #3
 800f98c:	f024 0403 	bic.w	r4, r4, #3
 800f990:	42a0      	cmp	r0, r4
 800f992:	d007      	beq.n	800f9a4 <sbrk_aligned+0x38>
 800f994:	1a21      	subs	r1, r4, r0
 800f996:	4628      	mov	r0, r5
 800f998:	f000 fa9c 	bl	800fed4 <_sbrk_r>
 800f99c:	3001      	adds	r0, #1
 800f99e:	d101      	bne.n	800f9a4 <sbrk_aligned+0x38>
 800f9a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	bd70      	pop	{r4, r5, r6, pc}
 800f9a8:	20004ed4 	.word	0x20004ed4

0800f9ac <_malloc_r>:
 800f9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9b0:	1ccd      	adds	r5, r1, #3
 800f9b2:	f025 0503 	bic.w	r5, r5, #3
 800f9b6:	3508      	adds	r5, #8
 800f9b8:	2d0c      	cmp	r5, #12
 800f9ba:	bf38      	it	cc
 800f9bc:	250c      	movcc	r5, #12
 800f9be:	2d00      	cmp	r5, #0
 800f9c0:	4607      	mov	r7, r0
 800f9c2:	db01      	blt.n	800f9c8 <_malloc_r+0x1c>
 800f9c4:	42a9      	cmp	r1, r5
 800f9c6:	d905      	bls.n	800f9d4 <_malloc_r+0x28>
 800f9c8:	230c      	movs	r3, #12
 800f9ca:	603b      	str	r3, [r7, #0]
 800f9cc:	2600      	movs	r6, #0
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800faa8 <_malloc_r+0xfc>
 800f9d8:	f000 f89c 	bl	800fb14 <__malloc_lock>
 800f9dc:	f8d8 3000 	ldr.w	r3, [r8]
 800f9e0:	461c      	mov	r4, r3
 800f9e2:	bb5c      	cbnz	r4, 800fa3c <_malloc_r+0x90>
 800f9e4:	4629      	mov	r1, r5
 800f9e6:	4638      	mov	r0, r7
 800f9e8:	f7ff ffc0 	bl	800f96c <sbrk_aligned>
 800f9ec:	1c43      	adds	r3, r0, #1
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	d155      	bne.n	800fa9e <_malloc_r+0xf2>
 800f9f2:	f8d8 4000 	ldr.w	r4, [r8]
 800f9f6:	4626      	mov	r6, r4
 800f9f8:	2e00      	cmp	r6, #0
 800f9fa:	d145      	bne.n	800fa88 <_malloc_r+0xdc>
 800f9fc:	2c00      	cmp	r4, #0
 800f9fe:	d048      	beq.n	800fa92 <_malloc_r+0xe6>
 800fa00:	6823      	ldr	r3, [r4, #0]
 800fa02:	4631      	mov	r1, r6
 800fa04:	4638      	mov	r0, r7
 800fa06:	eb04 0903 	add.w	r9, r4, r3
 800fa0a:	f000 fa63 	bl	800fed4 <_sbrk_r>
 800fa0e:	4581      	cmp	r9, r0
 800fa10:	d13f      	bne.n	800fa92 <_malloc_r+0xe6>
 800fa12:	6821      	ldr	r1, [r4, #0]
 800fa14:	1a6d      	subs	r5, r5, r1
 800fa16:	4629      	mov	r1, r5
 800fa18:	4638      	mov	r0, r7
 800fa1a:	f7ff ffa7 	bl	800f96c <sbrk_aligned>
 800fa1e:	3001      	adds	r0, #1
 800fa20:	d037      	beq.n	800fa92 <_malloc_r+0xe6>
 800fa22:	6823      	ldr	r3, [r4, #0]
 800fa24:	442b      	add	r3, r5
 800fa26:	6023      	str	r3, [r4, #0]
 800fa28:	f8d8 3000 	ldr.w	r3, [r8]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d038      	beq.n	800faa2 <_malloc_r+0xf6>
 800fa30:	685a      	ldr	r2, [r3, #4]
 800fa32:	42a2      	cmp	r2, r4
 800fa34:	d12b      	bne.n	800fa8e <_malloc_r+0xe2>
 800fa36:	2200      	movs	r2, #0
 800fa38:	605a      	str	r2, [r3, #4]
 800fa3a:	e00f      	b.n	800fa5c <_malloc_r+0xb0>
 800fa3c:	6822      	ldr	r2, [r4, #0]
 800fa3e:	1b52      	subs	r2, r2, r5
 800fa40:	d41f      	bmi.n	800fa82 <_malloc_r+0xd6>
 800fa42:	2a0b      	cmp	r2, #11
 800fa44:	d917      	bls.n	800fa76 <_malloc_r+0xca>
 800fa46:	1961      	adds	r1, r4, r5
 800fa48:	42a3      	cmp	r3, r4
 800fa4a:	6025      	str	r5, [r4, #0]
 800fa4c:	bf18      	it	ne
 800fa4e:	6059      	strne	r1, [r3, #4]
 800fa50:	6863      	ldr	r3, [r4, #4]
 800fa52:	bf08      	it	eq
 800fa54:	f8c8 1000 	streq.w	r1, [r8]
 800fa58:	5162      	str	r2, [r4, r5]
 800fa5a:	604b      	str	r3, [r1, #4]
 800fa5c:	4638      	mov	r0, r7
 800fa5e:	f104 060b 	add.w	r6, r4, #11
 800fa62:	f000 f85d 	bl	800fb20 <__malloc_unlock>
 800fa66:	f026 0607 	bic.w	r6, r6, #7
 800fa6a:	1d23      	adds	r3, r4, #4
 800fa6c:	1af2      	subs	r2, r6, r3
 800fa6e:	d0ae      	beq.n	800f9ce <_malloc_r+0x22>
 800fa70:	1b9b      	subs	r3, r3, r6
 800fa72:	50a3      	str	r3, [r4, r2]
 800fa74:	e7ab      	b.n	800f9ce <_malloc_r+0x22>
 800fa76:	42a3      	cmp	r3, r4
 800fa78:	6862      	ldr	r2, [r4, #4]
 800fa7a:	d1dd      	bne.n	800fa38 <_malloc_r+0x8c>
 800fa7c:	f8c8 2000 	str.w	r2, [r8]
 800fa80:	e7ec      	b.n	800fa5c <_malloc_r+0xb0>
 800fa82:	4623      	mov	r3, r4
 800fa84:	6864      	ldr	r4, [r4, #4]
 800fa86:	e7ac      	b.n	800f9e2 <_malloc_r+0x36>
 800fa88:	4634      	mov	r4, r6
 800fa8a:	6876      	ldr	r6, [r6, #4]
 800fa8c:	e7b4      	b.n	800f9f8 <_malloc_r+0x4c>
 800fa8e:	4613      	mov	r3, r2
 800fa90:	e7cc      	b.n	800fa2c <_malloc_r+0x80>
 800fa92:	230c      	movs	r3, #12
 800fa94:	603b      	str	r3, [r7, #0]
 800fa96:	4638      	mov	r0, r7
 800fa98:	f000 f842 	bl	800fb20 <__malloc_unlock>
 800fa9c:	e797      	b.n	800f9ce <_malloc_r+0x22>
 800fa9e:	6025      	str	r5, [r4, #0]
 800faa0:	e7dc      	b.n	800fa5c <_malloc_r+0xb0>
 800faa2:	605b      	str	r3, [r3, #4]
 800faa4:	deff      	udf	#255	; 0xff
 800faa6:	bf00      	nop
 800faa8:	20004ed0 	.word	0x20004ed0

0800faac <sniprintf>:
 800faac:	b40c      	push	{r2, r3}
 800faae:	b530      	push	{r4, r5, lr}
 800fab0:	4b17      	ldr	r3, [pc, #92]	; (800fb10 <sniprintf+0x64>)
 800fab2:	1e0c      	subs	r4, r1, #0
 800fab4:	681d      	ldr	r5, [r3, #0]
 800fab6:	b09d      	sub	sp, #116	; 0x74
 800fab8:	da08      	bge.n	800facc <sniprintf+0x20>
 800faba:	238b      	movs	r3, #139	; 0x8b
 800fabc:	602b      	str	r3, [r5, #0]
 800fabe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fac2:	b01d      	add	sp, #116	; 0x74
 800fac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fac8:	b002      	add	sp, #8
 800faca:	4770      	bx	lr
 800facc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fad0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fad4:	bf14      	ite	ne
 800fad6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800fada:	4623      	moveq	r3, r4
 800fadc:	9304      	str	r3, [sp, #16]
 800fade:	9307      	str	r3, [sp, #28]
 800fae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fae4:	9002      	str	r0, [sp, #8]
 800fae6:	9006      	str	r0, [sp, #24]
 800fae8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800faec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800faee:	ab21      	add	r3, sp, #132	; 0x84
 800faf0:	a902      	add	r1, sp, #8
 800faf2:	4628      	mov	r0, r5
 800faf4:	9301      	str	r3, [sp, #4]
 800faf6:	f000 fad1 	bl	801009c <_svfiprintf_r>
 800fafa:	1c43      	adds	r3, r0, #1
 800fafc:	bfbc      	itt	lt
 800fafe:	238b      	movlt	r3, #139	; 0x8b
 800fb00:	602b      	strlt	r3, [r5, #0]
 800fb02:	2c00      	cmp	r4, #0
 800fb04:	d0dd      	beq.n	800fac2 <sniprintf+0x16>
 800fb06:	9b02      	ldr	r3, [sp, #8]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	701a      	strb	r2, [r3, #0]
 800fb0c:	e7d9      	b.n	800fac2 <sniprintf+0x16>
 800fb0e:	bf00      	nop
 800fb10:	20000164 	.word	0x20000164

0800fb14 <__malloc_lock>:
 800fb14:	4801      	ldr	r0, [pc, #4]	; (800fb1c <__malloc_lock+0x8>)
 800fb16:	f000 ba18 	b.w	800ff4a <__retarget_lock_acquire_recursive>
 800fb1a:	bf00      	nop
 800fb1c:	20005014 	.word	0x20005014

0800fb20 <__malloc_unlock>:
 800fb20:	4801      	ldr	r0, [pc, #4]	; (800fb28 <__malloc_unlock+0x8>)
 800fb22:	f000 ba13 	b.w	800ff4c <__retarget_lock_release_recursive>
 800fb26:	bf00      	nop
 800fb28:	20005014 	.word	0x20005014

0800fb2c <std>:
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	b510      	push	{r4, lr}
 800fb30:	4604      	mov	r4, r0
 800fb32:	e9c0 3300 	strd	r3, r3, [r0]
 800fb36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb3a:	6083      	str	r3, [r0, #8]
 800fb3c:	8181      	strh	r1, [r0, #12]
 800fb3e:	6643      	str	r3, [r0, #100]	; 0x64
 800fb40:	81c2      	strh	r2, [r0, #14]
 800fb42:	6183      	str	r3, [r0, #24]
 800fb44:	4619      	mov	r1, r3
 800fb46:	2208      	movs	r2, #8
 800fb48:	305c      	adds	r0, #92	; 0x5c
 800fb4a:	f000 f9ba 	bl	800fec2 <memset>
 800fb4e:	4b0d      	ldr	r3, [pc, #52]	; (800fb84 <std+0x58>)
 800fb50:	6263      	str	r3, [r4, #36]	; 0x24
 800fb52:	4b0d      	ldr	r3, [pc, #52]	; (800fb88 <std+0x5c>)
 800fb54:	62a3      	str	r3, [r4, #40]	; 0x28
 800fb56:	4b0d      	ldr	r3, [pc, #52]	; (800fb8c <std+0x60>)
 800fb58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fb5a:	4b0d      	ldr	r3, [pc, #52]	; (800fb90 <std+0x64>)
 800fb5c:	6323      	str	r3, [r4, #48]	; 0x30
 800fb5e:	4b0d      	ldr	r3, [pc, #52]	; (800fb94 <std+0x68>)
 800fb60:	6224      	str	r4, [r4, #32]
 800fb62:	429c      	cmp	r4, r3
 800fb64:	d006      	beq.n	800fb74 <std+0x48>
 800fb66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800fb6a:	4294      	cmp	r4, r2
 800fb6c:	d002      	beq.n	800fb74 <std+0x48>
 800fb6e:	33d0      	adds	r3, #208	; 0xd0
 800fb70:	429c      	cmp	r4, r3
 800fb72:	d105      	bne.n	800fb80 <std+0x54>
 800fb74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fb78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb7c:	f000 b9e4 	b.w	800ff48 <__retarget_lock_init_recursive>
 800fb80:	bd10      	pop	{r4, pc}
 800fb82:	bf00      	nop
 800fb84:	0801099d 	.word	0x0801099d
 800fb88:	080109bf 	.word	0x080109bf
 800fb8c:	080109f7 	.word	0x080109f7
 800fb90:	08010a1b 	.word	0x08010a1b
 800fb94:	20004ed8 	.word	0x20004ed8

0800fb98 <stdio_exit_handler>:
 800fb98:	4a02      	ldr	r2, [pc, #8]	; (800fba4 <stdio_exit_handler+0xc>)
 800fb9a:	4903      	ldr	r1, [pc, #12]	; (800fba8 <stdio_exit_handler+0x10>)
 800fb9c:	4803      	ldr	r0, [pc, #12]	; (800fbac <stdio_exit_handler+0x14>)
 800fb9e:	f000 b8f5 	b.w	800fd8c <_fwalk_sglue>
 800fba2:	bf00      	nop
 800fba4:	2000010c 	.word	0x2000010c
 800fba8:	0801094d 	.word	0x0801094d
 800fbac:	20000118 	.word	0x20000118

0800fbb0 <cleanup_stdio>:
 800fbb0:	6841      	ldr	r1, [r0, #4]
 800fbb2:	4b0c      	ldr	r3, [pc, #48]	; (800fbe4 <cleanup_stdio+0x34>)
 800fbb4:	4299      	cmp	r1, r3
 800fbb6:	b510      	push	{r4, lr}
 800fbb8:	4604      	mov	r4, r0
 800fbba:	d001      	beq.n	800fbc0 <cleanup_stdio+0x10>
 800fbbc:	f000 fec6 	bl	801094c <_fflush_r>
 800fbc0:	68a1      	ldr	r1, [r4, #8]
 800fbc2:	4b09      	ldr	r3, [pc, #36]	; (800fbe8 <cleanup_stdio+0x38>)
 800fbc4:	4299      	cmp	r1, r3
 800fbc6:	d002      	beq.n	800fbce <cleanup_stdio+0x1e>
 800fbc8:	4620      	mov	r0, r4
 800fbca:	f000 febf 	bl	801094c <_fflush_r>
 800fbce:	68e1      	ldr	r1, [r4, #12]
 800fbd0:	4b06      	ldr	r3, [pc, #24]	; (800fbec <cleanup_stdio+0x3c>)
 800fbd2:	4299      	cmp	r1, r3
 800fbd4:	d004      	beq.n	800fbe0 <cleanup_stdio+0x30>
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbdc:	f000 beb6 	b.w	801094c <_fflush_r>
 800fbe0:	bd10      	pop	{r4, pc}
 800fbe2:	bf00      	nop
 800fbe4:	20004ed8 	.word	0x20004ed8
 800fbe8:	20004f40 	.word	0x20004f40
 800fbec:	20004fa8 	.word	0x20004fa8

0800fbf0 <global_stdio_init.part.0>:
 800fbf0:	b510      	push	{r4, lr}
 800fbf2:	4b0b      	ldr	r3, [pc, #44]	; (800fc20 <global_stdio_init.part.0+0x30>)
 800fbf4:	4c0b      	ldr	r4, [pc, #44]	; (800fc24 <global_stdio_init.part.0+0x34>)
 800fbf6:	4a0c      	ldr	r2, [pc, #48]	; (800fc28 <global_stdio_init.part.0+0x38>)
 800fbf8:	601a      	str	r2, [r3, #0]
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	2104      	movs	r1, #4
 800fc00:	f7ff ff94 	bl	800fb2c <std>
 800fc04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fc08:	2201      	movs	r2, #1
 800fc0a:	2109      	movs	r1, #9
 800fc0c:	f7ff ff8e 	bl	800fb2c <std>
 800fc10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fc14:	2202      	movs	r2, #2
 800fc16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc1a:	2112      	movs	r1, #18
 800fc1c:	f7ff bf86 	b.w	800fb2c <std>
 800fc20:	20005010 	.word	0x20005010
 800fc24:	20004ed8 	.word	0x20004ed8
 800fc28:	0800fb99 	.word	0x0800fb99

0800fc2c <__sfp_lock_acquire>:
 800fc2c:	4801      	ldr	r0, [pc, #4]	; (800fc34 <__sfp_lock_acquire+0x8>)
 800fc2e:	f000 b98c 	b.w	800ff4a <__retarget_lock_acquire_recursive>
 800fc32:	bf00      	nop
 800fc34:	20005015 	.word	0x20005015

0800fc38 <__sfp_lock_release>:
 800fc38:	4801      	ldr	r0, [pc, #4]	; (800fc40 <__sfp_lock_release+0x8>)
 800fc3a:	f000 b987 	b.w	800ff4c <__retarget_lock_release_recursive>
 800fc3e:	bf00      	nop
 800fc40:	20005015 	.word	0x20005015

0800fc44 <__sinit>:
 800fc44:	b510      	push	{r4, lr}
 800fc46:	4604      	mov	r4, r0
 800fc48:	f7ff fff0 	bl	800fc2c <__sfp_lock_acquire>
 800fc4c:	6a23      	ldr	r3, [r4, #32]
 800fc4e:	b11b      	cbz	r3, 800fc58 <__sinit+0x14>
 800fc50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc54:	f7ff bff0 	b.w	800fc38 <__sfp_lock_release>
 800fc58:	4b04      	ldr	r3, [pc, #16]	; (800fc6c <__sinit+0x28>)
 800fc5a:	6223      	str	r3, [r4, #32]
 800fc5c:	4b04      	ldr	r3, [pc, #16]	; (800fc70 <__sinit+0x2c>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d1f5      	bne.n	800fc50 <__sinit+0xc>
 800fc64:	f7ff ffc4 	bl	800fbf0 <global_stdio_init.part.0>
 800fc68:	e7f2      	b.n	800fc50 <__sinit+0xc>
 800fc6a:	bf00      	nop
 800fc6c:	0800fbb1 	.word	0x0800fbb1
 800fc70:	20005010 	.word	0x20005010

0800fc74 <_strtol_l.constprop.0>:
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc7a:	d001      	beq.n	800fc80 <_strtol_l.constprop.0+0xc>
 800fc7c:	2b24      	cmp	r3, #36	; 0x24
 800fc7e:	d906      	bls.n	800fc8e <_strtol_l.constprop.0+0x1a>
 800fc80:	f000 f938 	bl	800fef4 <__errno>
 800fc84:	2316      	movs	r3, #22
 800fc86:	6003      	str	r3, [r0, #0]
 800fc88:	2000      	movs	r0, #0
 800fc8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fd74 <_strtol_l.constprop.0+0x100>
 800fc92:	460d      	mov	r5, r1
 800fc94:	462e      	mov	r6, r5
 800fc96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc9a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800fc9e:	f017 0708 	ands.w	r7, r7, #8
 800fca2:	d1f7      	bne.n	800fc94 <_strtol_l.constprop.0+0x20>
 800fca4:	2c2d      	cmp	r4, #45	; 0x2d
 800fca6:	d132      	bne.n	800fd0e <_strtol_l.constprop.0+0x9a>
 800fca8:	782c      	ldrb	r4, [r5, #0]
 800fcaa:	2701      	movs	r7, #1
 800fcac:	1cb5      	adds	r5, r6, #2
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d05b      	beq.n	800fd6a <_strtol_l.constprop.0+0xf6>
 800fcb2:	2b10      	cmp	r3, #16
 800fcb4:	d109      	bne.n	800fcca <_strtol_l.constprop.0+0x56>
 800fcb6:	2c30      	cmp	r4, #48	; 0x30
 800fcb8:	d107      	bne.n	800fcca <_strtol_l.constprop.0+0x56>
 800fcba:	782c      	ldrb	r4, [r5, #0]
 800fcbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fcc0:	2c58      	cmp	r4, #88	; 0x58
 800fcc2:	d14d      	bne.n	800fd60 <_strtol_l.constprop.0+0xec>
 800fcc4:	786c      	ldrb	r4, [r5, #1]
 800fcc6:	2310      	movs	r3, #16
 800fcc8:	3502      	adds	r5, #2
 800fcca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fcce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800fcd2:	f04f 0e00 	mov.w	lr, #0
 800fcd6:	fbb8 f9f3 	udiv	r9, r8, r3
 800fcda:	4676      	mov	r6, lr
 800fcdc:	fb03 8a19 	mls	sl, r3, r9, r8
 800fce0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fce4:	f1bc 0f09 	cmp.w	ip, #9
 800fce8:	d816      	bhi.n	800fd18 <_strtol_l.constprop.0+0xa4>
 800fcea:	4664      	mov	r4, ip
 800fcec:	42a3      	cmp	r3, r4
 800fcee:	dd24      	ble.n	800fd3a <_strtol_l.constprop.0+0xc6>
 800fcf0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800fcf4:	d008      	beq.n	800fd08 <_strtol_l.constprop.0+0x94>
 800fcf6:	45b1      	cmp	r9, r6
 800fcf8:	d31c      	bcc.n	800fd34 <_strtol_l.constprop.0+0xc0>
 800fcfa:	d101      	bne.n	800fd00 <_strtol_l.constprop.0+0x8c>
 800fcfc:	45a2      	cmp	sl, r4
 800fcfe:	db19      	blt.n	800fd34 <_strtol_l.constprop.0+0xc0>
 800fd00:	fb06 4603 	mla	r6, r6, r3, r4
 800fd04:	f04f 0e01 	mov.w	lr, #1
 800fd08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd0c:	e7e8      	b.n	800fce0 <_strtol_l.constprop.0+0x6c>
 800fd0e:	2c2b      	cmp	r4, #43	; 0x2b
 800fd10:	bf04      	itt	eq
 800fd12:	782c      	ldrbeq	r4, [r5, #0]
 800fd14:	1cb5      	addeq	r5, r6, #2
 800fd16:	e7ca      	b.n	800fcae <_strtol_l.constprop.0+0x3a>
 800fd18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fd1c:	f1bc 0f19 	cmp.w	ip, #25
 800fd20:	d801      	bhi.n	800fd26 <_strtol_l.constprop.0+0xb2>
 800fd22:	3c37      	subs	r4, #55	; 0x37
 800fd24:	e7e2      	b.n	800fcec <_strtol_l.constprop.0+0x78>
 800fd26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fd2a:	f1bc 0f19 	cmp.w	ip, #25
 800fd2e:	d804      	bhi.n	800fd3a <_strtol_l.constprop.0+0xc6>
 800fd30:	3c57      	subs	r4, #87	; 0x57
 800fd32:	e7db      	b.n	800fcec <_strtol_l.constprop.0+0x78>
 800fd34:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800fd38:	e7e6      	b.n	800fd08 <_strtol_l.constprop.0+0x94>
 800fd3a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800fd3e:	d105      	bne.n	800fd4c <_strtol_l.constprop.0+0xd8>
 800fd40:	2322      	movs	r3, #34	; 0x22
 800fd42:	6003      	str	r3, [r0, #0]
 800fd44:	4646      	mov	r6, r8
 800fd46:	b942      	cbnz	r2, 800fd5a <_strtol_l.constprop.0+0xe6>
 800fd48:	4630      	mov	r0, r6
 800fd4a:	e79e      	b.n	800fc8a <_strtol_l.constprop.0+0x16>
 800fd4c:	b107      	cbz	r7, 800fd50 <_strtol_l.constprop.0+0xdc>
 800fd4e:	4276      	negs	r6, r6
 800fd50:	2a00      	cmp	r2, #0
 800fd52:	d0f9      	beq.n	800fd48 <_strtol_l.constprop.0+0xd4>
 800fd54:	f1be 0f00 	cmp.w	lr, #0
 800fd58:	d000      	beq.n	800fd5c <_strtol_l.constprop.0+0xe8>
 800fd5a:	1e69      	subs	r1, r5, #1
 800fd5c:	6011      	str	r1, [r2, #0]
 800fd5e:	e7f3      	b.n	800fd48 <_strtol_l.constprop.0+0xd4>
 800fd60:	2430      	movs	r4, #48	; 0x30
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d1b1      	bne.n	800fcca <_strtol_l.constprop.0+0x56>
 800fd66:	2308      	movs	r3, #8
 800fd68:	e7af      	b.n	800fcca <_strtol_l.constprop.0+0x56>
 800fd6a:	2c30      	cmp	r4, #48	; 0x30
 800fd6c:	d0a5      	beq.n	800fcba <_strtol_l.constprop.0+0x46>
 800fd6e:	230a      	movs	r3, #10
 800fd70:	e7ab      	b.n	800fcca <_strtol_l.constprop.0+0x56>
 800fd72:	bf00      	nop
 800fd74:	080114ed 	.word	0x080114ed

0800fd78 <strtol>:
 800fd78:	4613      	mov	r3, r2
 800fd7a:	460a      	mov	r2, r1
 800fd7c:	4601      	mov	r1, r0
 800fd7e:	4802      	ldr	r0, [pc, #8]	; (800fd88 <strtol+0x10>)
 800fd80:	6800      	ldr	r0, [r0, #0]
 800fd82:	f7ff bf77 	b.w	800fc74 <_strtol_l.constprop.0>
 800fd86:	bf00      	nop
 800fd88:	20000164 	.word	0x20000164

0800fd8c <_fwalk_sglue>:
 800fd8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd90:	4607      	mov	r7, r0
 800fd92:	4688      	mov	r8, r1
 800fd94:	4614      	mov	r4, r2
 800fd96:	2600      	movs	r6, #0
 800fd98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fd9c:	f1b9 0901 	subs.w	r9, r9, #1
 800fda0:	d505      	bpl.n	800fdae <_fwalk_sglue+0x22>
 800fda2:	6824      	ldr	r4, [r4, #0]
 800fda4:	2c00      	cmp	r4, #0
 800fda6:	d1f7      	bne.n	800fd98 <_fwalk_sglue+0xc>
 800fda8:	4630      	mov	r0, r6
 800fdaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdae:	89ab      	ldrh	r3, [r5, #12]
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d907      	bls.n	800fdc4 <_fwalk_sglue+0x38>
 800fdb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fdb8:	3301      	adds	r3, #1
 800fdba:	d003      	beq.n	800fdc4 <_fwalk_sglue+0x38>
 800fdbc:	4629      	mov	r1, r5
 800fdbe:	4638      	mov	r0, r7
 800fdc0:	47c0      	blx	r8
 800fdc2:	4306      	orrs	r6, r0
 800fdc4:	3568      	adds	r5, #104	; 0x68
 800fdc6:	e7e9      	b.n	800fd9c <_fwalk_sglue+0x10>

0800fdc8 <iprintf>:
 800fdc8:	b40f      	push	{r0, r1, r2, r3}
 800fdca:	b507      	push	{r0, r1, r2, lr}
 800fdcc:	4906      	ldr	r1, [pc, #24]	; (800fde8 <iprintf+0x20>)
 800fdce:	ab04      	add	r3, sp, #16
 800fdd0:	6808      	ldr	r0, [r1, #0]
 800fdd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdd6:	6881      	ldr	r1, [r0, #8]
 800fdd8:	9301      	str	r3, [sp, #4]
 800fdda:	f000 fa87 	bl	80102ec <_vfiprintf_r>
 800fdde:	b003      	add	sp, #12
 800fde0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fde4:	b004      	add	sp, #16
 800fde6:	4770      	bx	lr
 800fde8:	20000164 	.word	0x20000164

0800fdec <_puts_r>:
 800fdec:	6a03      	ldr	r3, [r0, #32]
 800fdee:	b570      	push	{r4, r5, r6, lr}
 800fdf0:	6884      	ldr	r4, [r0, #8]
 800fdf2:	4605      	mov	r5, r0
 800fdf4:	460e      	mov	r6, r1
 800fdf6:	b90b      	cbnz	r3, 800fdfc <_puts_r+0x10>
 800fdf8:	f7ff ff24 	bl	800fc44 <__sinit>
 800fdfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fdfe:	07db      	lsls	r3, r3, #31
 800fe00:	d405      	bmi.n	800fe0e <_puts_r+0x22>
 800fe02:	89a3      	ldrh	r3, [r4, #12]
 800fe04:	0598      	lsls	r0, r3, #22
 800fe06:	d402      	bmi.n	800fe0e <_puts_r+0x22>
 800fe08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe0a:	f000 f89e 	bl	800ff4a <__retarget_lock_acquire_recursive>
 800fe0e:	89a3      	ldrh	r3, [r4, #12]
 800fe10:	0719      	lsls	r1, r3, #28
 800fe12:	d513      	bpl.n	800fe3c <_puts_r+0x50>
 800fe14:	6923      	ldr	r3, [r4, #16]
 800fe16:	b18b      	cbz	r3, 800fe3c <_puts_r+0x50>
 800fe18:	3e01      	subs	r6, #1
 800fe1a:	68a3      	ldr	r3, [r4, #8]
 800fe1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fe20:	3b01      	subs	r3, #1
 800fe22:	60a3      	str	r3, [r4, #8]
 800fe24:	b9e9      	cbnz	r1, 800fe62 <_puts_r+0x76>
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	da2e      	bge.n	800fe88 <_puts_r+0x9c>
 800fe2a:	4622      	mov	r2, r4
 800fe2c:	210a      	movs	r1, #10
 800fe2e:	4628      	mov	r0, r5
 800fe30:	f000 fe26 	bl	8010a80 <__swbuf_r>
 800fe34:	3001      	adds	r0, #1
 800fe36:	d007      	beq.n	800fe48 <_puts_r+0x5c>
 800fe38:	250a      	movs	r5, #10
 800fe3a:	e007      	b.n	800fe4c <_puts_r+0x60>
 800fe3c:	4621      	mov	r1, r4
 800fe3e:	4628      	mov	r0, r5
 800fe40:	f000 fe5c 	bl	8010afc <__swsetup_r>
 800fe44:	2800      	cmp	r0, #0
 800fe46:	d0e7      	beq.n	800fe18 <_puts_r+0x2c>
 800fe48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800fe4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe4e:	07da      	lsls	r2, r3, #31
 800fe50:	d405      	bmi.n	800fe5e <_puts_r+0x72>
 800fe52:	89a3      	ldrh	r3, [r4, #12]
 800fe54:	059b      	lsls	r3, r3, #22
 800fe56:	d402      	bmi.n	800fe5e <_puts_r+0x72>
 800fe58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe5a:	f000 f877 	bl	800ff4c <__retarget_lock_release_recursive>
 800fe5e:	4628      	mov	r0, r5
 800fe60:	bd70      	pop	{r4, r5, r6, pc}
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	da04      	bge.n	800fe70 <_puts_r+0x84>
 800fe66:	69a2      	ldr	r2, [r4, #24]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	dc06      	bgt.n	800fe7a <_puts_r+0x8e>
 800fe6c:	290a      	cmp	r1, #10
 800fe6e:	d004      	beq.n	800fe7a <_puts_r+0x8e>
 800fe70:	6823      	ldr	r3, [r4, #0]
 800fe72:	1c5a      	adds	r2, r3, #1
 800fe74:	6022      	str	r2, [r4, #0]
 800fe76:	7019      	strb	r1, [r3, #0]
 800fe78:	e7cf      	b.n	800fe1a <_puts_r+0x2e>
 800fe7a:	4622      	mov	r2, r4
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	f000 fdff 	bl	8010a80 <__swbuf_r>
 800fe82:	3001      	adds	r0, #1
 800fe84:	d1c9      	bne.n	800fe1a <_puts_r+0x2e>
 800fe86:	e7df      	b.n	800fe48 <_puts_r+0x5c>
 800fe88:	6823      	ldr	r3, [r4, #0]
 800fe8a:	250a      	movs	r5, #10
 800fe8c:	1c5a      	adds	r2, r3, #1
 800fe8e:	6022      	str	r2, [r4, #0]
 800fe90:	701d      	strb	r5, [r3, #0]
 800fe92:	e7db      	b.n	800fe4c <_puts_r+0x60>

0800fe94 <puts>:
 800fe94:	4b02      	ldr	r3, [pc, #8]	; (800fea0 <puts+0xc>)
 800fe96:	4601      	mov	r1, r0
 800fe98:	6818      	ldr	r0, [r3, #0]
 800fe9a:	f7ff bfa7 	b.w	800fdec <_puts_r>
 800fe9e:	bf00      	nop
 800fea0:	20000164 	.word	0x20000164

0800fea4 <strcat>:
 800fea4:	b510      	push	{r4, lr}
 800fea6:	4602      	mov	r2, r0
 800fea8:	7814      	ldrb	r4, [r2, #0]
 800feaa:	4613      	mov	r3, r2
 800feac:	3201      	adds	r2, #1
 800feae:	2c00      	cmp	r4, #0
 800feb0:	d1fa      	bne.n	800fea8 <strcat+0x4>
 800feb2:	3b01      	subs	r3, #1
 800feb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800feb8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800febc:	2a00      	cmp	r2, #0
 800febe:	d1f9      	bne.n	800feb4 <strcat+0x10>
 800fec0:	bd10      	pop	{r4, pc}

0800fec2 <memset>:
 800fec2:	4402      	add	r2, r0
 800fec4:	4603      	mov	r3, r0
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d100      	bne.n	800fecc <memset+0xa>
 800feca:	4770      	bx	lr
 800fecc:	f803 1b01 	strb.w	r1, [r3], #1
 800fed0:	e7f9      	b.n	800fec6 <memset+0x4>
	...

0800fed4 <_sbrk_r>:
 800fed4:	b538      	push	{r3, r4, r5, lr}
 800fed6:	4d06      	ldr	r5, [pc, #24]	; (800fef0 <_sbrk_r+0x1c>)
 800fed8:	2300      	movs	r3, #0
 800feda:	4604      	mov	r4, r0
 800fedc:	4608      	mov	r0, r1
 800fede:	602b      	str	r3, [r5, #0]
 800fee0:	f7f1 fb68 	bl	80015b4 <_sbrk>
 800fee4:	1c43      	adds	r3, r0, #1
 800fee6:	d102      	bne.n	800feee <_sbrk_r+0x1a>
 800fee8:	682b      	ldr	r3, [r5, #0]
 800feea:	b103      	cbz	r3, 800feee <_sbrk_r+0x1a>
 800feec:	6023      	str	r3, [r4, #0]
 800feee:	bd38      	pop	{r3, r4, r5, pc}
 800fef0:	20005018 	.word	0x20005018

0800fef4 <__errno>:
 800fef4:	4b01      	ldr	r3, [pc, #4]	; (800fefc <__errno+0x8>)
 800fef6:	6818      	ldr	r0, [r3, #0]
 800fef8:	4770      	bx	lr
 800fefa:	bf00      	nop
 800fefc:	20000164 	.word	0x20000164

0800ff00 <__libc_init_array>:
 800ff00:	b570      	push	{r4, r5, r6, lr}
 800ff02:	4d0d      	ldr	r5, [pc, #52]	; (800ff38 <__libc_init_array+0x38>)
 800ff04:	4c0d      	ldr	r4, [pc, #52]	; (800ff3c <__libc_init_array+0x3c>)
 800ff06:	1b64      	subs	r4, r4, r5
 800ff08:	10a4      	asrs	r4, r4, #2
 800ff0a:	2600      	movs	r6, #0
 800ff0c:	42a6      	cmp	r6, r4
 800ff0e:	d109      	bne.n	800ff24 <__libc_init_array+0x24>
 800ff10:	4d0b      	ldr	r5, [pc, #44]	; (800ff40 <__libc_init_array+0x40>)
 800ff12:	4c0c      	ldr	r4, [pc, #48]	; (800ff44 <__libc_init_array+0x44>)
 800ff14:	f000 ff44 	bl	8010da0 <_init>
 800ff18:	1b64      	subs	r4, r4, r5
 800ff1a:	10a4      	asrs	r4, r4, #2
 800ff1c:	2600      	movs	r6, #0
 800ff1e:	42a6      	cmp	r6, r4
 800ff20:	d105      	bne.n	800ff2e <__libc_init_array+0x2e>
 800ff22:	bd70      	pop	{r4, r5, r6, pc}
 800ff24:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff28:	4798      	blx	r3
 800ff2a:	3601      	adds	r6, #1
 800ff2c:	e7ee      	b.n	800ff0c <__libc_init_array+0xc>
 800ff2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff32:	4798      	blx	r3
 800ff34:	3601      	adds	r6, #1
 800ff36:	e7f2      	b.n	800ff1e <__libc_init_array+0x1e>
 800ff38:	08011628 	.word	0x08011628
 800ff3c:	08011628 	.word	0x08011628
 800ff40:	08011628 	.word	0x08011628
 800ff44:	0801162c 	.word	0x0801162c

0800ff48 <__retarget_lock_init_recursive>:
 800ff48:	4770      	bx	lr

0800ff4a <__retarget_lock_acquire_recursive>:
 800ff4a:	4770      	bx	lr

0800ff4c <__retarget_lock_release_recursive>:
 800ff4c:	4770      	bx	lr
	...

0800ff50 <_free_r>:
 800ff50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff52:	2900      	cmp	r1, #0
 800ff54:	d044      	beq.n	800ffe0 <_free_r+0x90>
 800ff56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff5a:	9001      	str	r0, [sp, #4]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	f1a1 0404 	sub.w	r4, r1, #4
 800ff62:	bfb8      	it	lt
 800ff64:	18e4      	addlt	r4, r4, r3
 800ff66:	f7ff fdd5 	bl	800fb14 <__malloc_lock>
 800ff6a:	4a1e      	ldr	r2, [pc, #120]	; (800ffe4 <_free_r+0x94>)
 800ff6c:	9801      	ldr	r0, [sp, #4]
 800ff6e:	6813      	ldr	r3, [r2, #0]
 800ff70:	b933      	cbnz	r3, 800ff80 <_free_r+0x30>
 800ff72:	6063      	str	r3, [r4, #4]
 800ff74:	6014      	str	r4, [r2, #0]
 800ff76:	b003      	add	sp, #12
 800ff78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff7c:	f7ff bdd0 	b.w	800fb20 <__malloc_unlock>
 800ff80:	42a3      	cmp	r3, r4
 800ff82:	d908      	bls.n	800ff96 <_free_r+0x46>
 800ff84:	6825      	ldr	r5, [r4, #0]
 800ff86:	1961      	adds	r1, r4, r5
 800ff88:	428b      	cmp	r3, r1
 800ff8a:	bf01      	itttt	eq
 800ff8c:	6819      	ldreq	r1, [r3, #0]
 800ff8e:	685b      	ldreq	r3, [r3, #4]
 800ff90:	1949      	addeq	r1, r1, r5
 800ff92:	6021      	streq	r1, [r4, #0]
 800ff94:	e7ed      	b.n	800ff72 <_free_r+0x22>
 800ff96:	461a      	mov	r2, r3
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	b10b      	cbz	r3, 800ffa0 <_free_r+0x50>
 800ff9c:	42a3      	cmp	r3, r4
 800ff9e:	d9fa      	bls.n	800ff96 <_free_r+0x46>
 800ffa0:	6811      	ldr	r1, [r2, #0]
 800ffa2:	1855      	adds	r5, r2, r1
 800ffa4:	42a5      	cmp	r5, r4
 800ffa6:	d10b      	bne.n	800ffc0 <_free_r+0x70>
 800ffa8:	6824      	ldr	r4, [r4, #0]
 800ffaa:	4421      	add	r1, r4
 800ffac:	1854      	adds	r4, r2, r1
 800ffae:	42a3      	cmp	r3, r4
 800ffb0:	6011      	str	r1, [r2, #0]
 800ffb2:	d1e0      	bne.n	800ff76 <_free_r+0x26>
 800ffb4:	681c      	ldr	r4, [r3, #0]
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	6053      	str	r3, [r2, #4]
 800ffba:	440c      	add	r4, r1
 800ffbc:	6014      	str	r4, [r2, #0]
 800ffbe:	e7da      	b.n	800ff76 <_free_r+0x26>
 800ffc0:	d902      	bls.n	800ffc8 <_free_r+0x78>
 800ffc2:	230c      	movs	r3, #12
 800ffc4:	6003      	str	r3, [r0, #0]
 800ffc6:	e7d6      	b.n	800ff76 <_free_r+0x26>
 800ffc8:	6825      	ldr	r5, [r4, #0]
 800ffca:	1961      	adds	r1, r4, r5
 800ffcc:	428b      	cmp	r3, r1
 800ffce:	bf04      	itt	eq
 800ffd0:	6819      	ldreq	r1, [r3, #0]
 800ffd2:	685b      	ldreq	r3, [r3, #4]
 800ffd4:	6063      	str	r3, [r4, #4]
 800ffd6:	bf04      	itt	eq
 800ffd8:	1949      	addeq	r1, r1, r5
 800ffda:	6021      	streq	r1, [r4, #0]
 800ffdc:	6054      	str	r4, [r2, #4]
 800ffde:	e7ca      	b.n	800ff76 <_free_r+0x26>
 800ffe0:	b003      	add	sp, #12
 800ffe2:	bd30      	pop	{r4, r5, pc}
 800ffe4:	20004ed0 	.word	0x20004ed0

0800ffe8 <__ssputs_r>:
 800ffe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffec:	688e      	ldr	r6, [r1, #8]
 800ffee:	461f      	mov	r7, r3
 800fff0:	42be      	cmp	r6, r7
 800fff2:	680b      	ldr	r3, [r1, #0]
 800fff4:	4682      	mov	sl, r0
 800fff6:	460c      	mov	r4, r1
 800fff8:	4690      	mov	r8, r2
 800fffa:	d82c      	bhi.n	8010056 <__ssputs_r+0x6e>
 800fffc:	898a      	ldrh	r2, [r1, #12]
 800fffe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010002:	d026      	beq.n	8010052 <__ssputs_r+0x6a>
 8010004:	6965      	ldr	r5, [r4, #20]
 8010006:	6909      	ldr	r1, [r1, #16]
 8010008:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801000c:	eba3 0901 	sub.w	r9, r3, r1
 8010010:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010014:	1c7b      	adds	r3, r7, #1
 8010016:	444b      	add	r3, r9
 8010018:	106d      	asrs	r5, r5, #1
 801001a:	429d      	cmp	r5, r3
 801001c:	bf38      	it	cc
 801001e:	461d      	movcc	r5, r3
 8010020:	0553      	lsls	r3, r2, #21
 8010022:	d527      	bpl.n	8010074 <__ssputs_r+0x8c>
 8010024:	4629      	mov	r1, r5
 8010026:	f7ff fcc1 	bl	800f9ac <_malloc_r>
 801002a:	4606      	mov	r6, r0
 801002c:	b360      	cbz	r0, 8010088 <__ssputs_r+0xa0>
 801002e:	6921      	ldr	r1, [r4, #16]
 8010030:	464a      	mov	r2, r9
 8010032:	f000 fe9f 	bl	8010d74 <memcpy>
 8010036:	89a3      	ldrh	r3, [r4, #12]
 8010038:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801003c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010040:	81a3      	strh	r3, [r4, #12]
 8010042:	6126      	str	r6, [r4, #16]
 8010044:	6165      	str	r5, [r4, #20]
 8010046:	444e      	add	r6, r9
 8010048:	eba5 0509 	sub.w	r5, r5, r9
 801004c:	6026      	str	r6, [r4, #0]
 801004e:	60a5      	str	r5, [r4, #8]
 8010050:	463e      	mov	r6, r7
 8010052:	42be      	cmp	r6, r7
 8010054:	d900      	bls.n	8010058 <__ssputs_r+0x70>
 8010056:	463e      	mov	r6, r7
 8010058:	6820      	ldr	r0, [r4, #0]
 801005a:	4632      	mov	r2, r6
 801005c:	4641      	mov	r1, r8
 801005e:	f000 fe07 	bl	8010c70 <memmove>
 8010062:	68a3      	ldr	r3, [r4, #8]
 8010064:	1b9b      	subs	r3, r3, r6
 8010066:	60a3      	str	r3, [r4, #8]
 8010068:	6823      	ldr	r3, [r4, #0]
 801006a:	4433      	add	r3, r6
 801006c:	6023      	str	r3, [r4, #0]
 801006e:	2000      	movs	r0, #0
 8010070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010074:	462a      	mov	r2, r5
 8010076:	f000 fcd4 	bl	8010a22 <_realloc_r>
 801007a:	4606      	mov	r6, r0
 801007c:	2800      	cmp	r0, #0
 801007e:	d1e0      	bne.n	8010042 <__ssputs_r+0x5a>
 8010080:	6921      	ldr	r1, [r4, #16]
 8010082:	4650      	mov	r0, sl
 8010084:	f7ff ff64 	bl	800ff50 <_free_r>
 8010088:	230c      	movs	r3, #12
 801008a:	f8ca 3000 	str.w	r3, [sl]
 801008e:	89a3      	ldrh	r3, [r4, #12]
 8010090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010094:	81a3      	strh	r3, [r4, #12]
 8010096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801009a:	e7e9      	b.n	8010070 <__ssputs_r+0x88>

0801009c <_svfiprintf_r>:
 801009c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100a0:	4698      	mov	r8, r3
 80100a2:	898b      	ldrh	r3, [r1, #12]
 80100a4:	061b      	lsls	r3, r3, #24
 80100a6:	b09d      	sub	sp, #116	; 0x74
 80100a8:	4607      	mov	r7, r0
 80100aa:	460d      	mov	r5, r1
 80100ac:	4614      	mov	r4, r2
 80100ae:	d50e      	bpl.n	80100ce <_svfiprintf_r+0x32>
 80100b0:	690b      	ldr	r3, [r1, #16]
 80100b2:	b963      	cbnz	r3, 80100ce <_svfiprintf_r+0x32>
 80100b4:	2140      	movs	r1, #64	; 0x40
 80100b6:	f7ff fc79 	bl	800f9ac <_malloc_r>
 80100ba:	6028      	str	r0, [r5, #0]
 80100bc:	6128      	str	r0, [r5, #16]
 80100be:	b920      	cbnz	r0, 80100ca <_svfiprintf_r+0x2e>
 80100c0:	230c      	movs	r3, #12
 80100c2:	603b      	str	r3, [r7, #0]
 80100c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100c8:	e0d0      	b.n	801026c <_svfiprintf_r+0x1d0>
 80100ca:	2340      	movs	r3, #64	; 0x40
 80100cc:	616b      	str	r3, [r5, #20]
 80100ce:	2300      	movs	r3, #0
 80100d0:	9309      	str	r3, [sp, #36]	; 0x24
 80100d2:	2320      	movs	r3, #32
 80100d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80100dc:	2330      	movs	r3, #48	; 0x30
 80100de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010284 <_svfiprintf_r+0x1e8>
 80100e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80100e6:	f04f 0901 	mov.w	r9, #1
 80100ea:	4623      	mov	r3, r4
 80100ec:	469a      	mov	sl, r3
 80100ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100f2:	b10a      	cbz	r2, 80100f8 <_svfiprintf_r+0x5c>
 80100f4:	2a25      	cmp	r2, #37	; 0x25
 80100f6:	d1f9      	bne.n	80100ec <_svfiprintf_r+0x50>
 80100f8:	ebba 0b04 	subs.w	fp, sl, r4
 80100fc:	d00b      	beq.n	8010116 <_svfiprintf_r+0x7a>
 80100fe:	465b      	mov	r3, fp
 8010100:	4622      	mov	r2, r4
 8010102:	4629      	mov	r1, r5
 8010104:	4638      	mov	r0, r7
 8010106:	f7ff ff6f 	bl	800ffe8 <__ssputs_r>
 801010a:	3001      	adds	r0, #1
 801010c:	f000 80a9 	beq.w	8010262 <_svfiprintf_r+0x1c6>
 8010110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010112:	445a      	add	r2, fp
 8010114:	9209      	str	r2, [sp, #36]	; 0x24
 8010116:	f89a 3000 	ldrb.w	r3, [sl]
 801011a:	2b00      	cmp	r3, #0
 801011c:	f000 80a1 	beq.w	8010262 <_svfiprintf_r+0x1c6>
 8010120:	2300      	movs	r3, #0
 8010122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801012a:	f10a 0a01 	add.w	sl, sl, #1
 801012e:	9304      	str	r3, [sp, #16]
 8010130:	9307      	str	r3, [sp, #28]
 8010132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010136:	931a      	str	r3, [sp, #104]	; 0x68
 8010138:	4654      	mov	r4, sl
 801013a:	2205      	movs	r2, #5
 801013c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010140:	4850      	ldr	r0, [pc, #320]	; (8010284 <_svfiprintf_r+0x1e8>)
 8010142:	f7f0 f87d 	bl	8000240 <memchr>
 8010146:	9a04      	ldr	r2, [sp, #16]
 8010148:	b9d8      	cbnz	r0, 8010182 <_svfiprintf_r+0xe6>
 801014a:	06d0      	lsls	r0, r2, #27
 801014c:	bf44      	itt	mi
 801014e:	2320      	movmi	r3, #32
 8010150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010154:	0711      	lsls	r1, r2, #28
 8010156:	bf44      	itt	mi
 8010158:	232b      	movmi	r3, #43	; 0x2b
 801015a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801015e:	f89a 3000 	ldrb.w	r3, [sl]
 8010162:	2b2a      	cmp	r3, #42	; 0x2a
 8010164:	d015      	beq.n	8010192 <_svfiprintf_r+0xf6>
 8010166:	9a07      	ldr	r2, [sp, #28]
 8010168:	4654      	mov	r4, sl
 801016a:	2000      	movs	r0, #0
 801016c:	f04f 0c0a 	mov.w	ip, #10
 8010170:	4621      	mov	r1, r4
 8010172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010176:	3b30      	subs	r3, #48	; 0x30
 8010178:	2b09      	cmp	r3, #9
 801017a:	d94d      	bls.n	8010218 <_svfiprintf_r+0x17c>
 801017c:	b1b0      	cbz	r0, 80101ac <_svfiprintf_r+0x110>
 801017e:	9207      	str	r2, [sp, #28]
 8010180:	e014      	b.n	80101ac <_svfiprintf_r+0x110>
 8010182:	eba0 0308 	sub.w	r3, r0, r8
 8010186:	fa09 f303 	lsl.w	r3, r9, r3
 801018a:	4313      	orrs	r3, r2
 801018c:	9304      	str	r3, [sp, #16]
 801018e:	46a2      	mov	sl, r4
 8010190:	e7d2      	b.n	8010138 <_svfiprintf_r+0x9c>
 8010192:	9b03      	ldr	r3, [sp, #12]
 8010194:	1d19      	adds	r1, r3, #4
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	9103      	str	r1, [sp, #12]
 801019a:	2b00      	cmp	r3, #0
 801019c:	bfbb      	ittet	lt
 801019e:	425b      	neglt	r3, r3
 80101a0:	f042 0202 	orrlt.w	r2, r2, #2
 80101a4:	9307      	strge	r3, [sp, #28]
 80101a6:	9307      	strlt	r3, [sp, #28]
 80101a8:	bfb8      	it	lt
 80101aa:	9204      	strlt	r2, [sp, #16]
 80101ac:	7823      	ldrb	r3, [r4, #0]
 80101ae:	2b2e      	cmp	r3, #46	; 0x2e
 80101b0:	d10c      	bne.n	80101cc <_svfiprintf_r+0x130>
 80101b2:	7863      	ldrb	r3, [r4, #1]
 80101b4:	2b2a      	cmp	r3, #42	; 0x2a
 80101b6:	d134      	bne.n	8010222 <_svfiprintf_r+0x186>
 80101b8:	9b03      	ldr	r3, [sp, #12]
 80101ba:	1d1a      	adds	r2, r3, #4
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	9203      	str	r2, [sp, #12]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	bfb8      	it	lt
 80101c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80101c8:	3402      	adds	r4, #2
 80101ca:	9305      	str	r3, [sp, #20]
 80101cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010294 <_svfiprintf_r+0x1f8>
 80101d0:	7821      	ldrb	r1, [r4, #0]
 80101d2:	2203      	movs	r2, #3
 80101d4:	4650      	mov	r0, sl
 80101d6:	f7f0 f833 	bl	8000240 <memchr>
 80101da:	b138      	cbz	r0, 80101ec <_svfiprintf_r+0x150>
 80101dc:	9b04      	ldr	r3, [sp, #16]
 80101de:	eba0 000a 	sub.w	r0, r0, sl
 80101e2:	2240      	movs	r2, #64	; 0x40
 80101e4:	4082      	lsls	r2, r0
 80101e6:	4313      	orrs	r3, r2
 80101e8:	3401      	adds	r4, #1
 80101ea:	9304      	str	r3, [sp, #16]
 80101ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101f0:	4825      	ldr	r0, [pc, #148]	; (8010288 <_svfiprintf_r+0x1ec>)
 80101f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80101f6:	2206      	movs	r2, #6
 80101f8:	f7f0 f822 	bl	8000240 <memchr>
 80101fc:	2800      	cmp	r0, #0
 80101fe:	d038      	beq.n	8010272 <_svfiprintf_r+0x1d6>
 8010200:	4b22      	ldr	r3, [pc, #136]	; (801028c <_svfiprintf_r+0x1f0>)
 8010202:	bb1b      	cbnz	r3, 801024c <_svfiprintf_r+0x1b0>
 8010204:	9b03      	ldr	r3, [sp, #12]
 8010206:	3307      	adds	r3, #7
 8010208:	f023 0307 	bic.w	r3, r3, #7
 801020c:	3308      	adds	r3, #8
 801020e:	9303      	str	r3, [sp, #12]
 8010210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010212:	4433      	add	r3, r6
 8010214:	9309      	str	r3, [sp, #36]	; 0x24
 8010216:	e768      	b.n	80100ea <_svfiprintf_r+0x4e>
 8010218:	fb0c 3202 	mla	r2, ip, r2, r3
 801021c:	460c      	mov	r4, r1
 801021e:	2001      	movs	r0, #1
 8010220:	e7a6      	b.n	8010170 <_svfiprintf_r+0xd4>
 8010222:	2300      	movs	r3, #0
 8010224:	3401      	adds	r4, #1
 8010226:	9305      	str	r3, [sp, #20]
 8010228:	4619      	mov	r1, r3
 801022a:	f04f 0c0a 	mov.w	ip, #10
 801022e:	4620      	mov	r0, r4
 8010230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010234:	3a30      	subs	r2, #48	; 0x30
 8010236:	2a09      	cmp	r2, #9
 8010238:	d903      	bls.n	8010242 <_svfiprintf_r+0x1a6>
 801023a:	2b00      	cmp	r3, #0
 801023c:	d0c6      	beq.n	80101cc <_svfiprintf_r+0x130>
 801023e:	9105      	str	r1, [sp, #20]
 8010240:	e7c4      	b.n	80101cc <_svfiprintf_r+0x130>
 8010242:	fb0c 2101 	mla	r1, ip, r1, r2
 8010246:	4604      	mov	r4, r0
 8010248:	2301      	movs	r3, #1
 801024a:	e7f0      	b.n	801022e <_svfiprintf_r+0x192>
 801024c:	ab03      	add	r3, sp, #12
 801024e:	9300      	str	r3, [sp, #0]
 8010250:	462a      	mov	r2, r5
 8010252:	4b0f      	ldr	r3, [pc, #60]	; (8010290 <_svfiprintf_r+0x1f4>)
 8010254:	a904      	add	r1, sp, #16
 8010256:	4638      	mov	r0, r7
 8010258:	f3af 8000 	nop.w
 801025c:	1c42      	adds	r2, r0, #1
 801025e:	4606      	mov	r6, r0
 8010260:	d1d6      	bne.n	8010210 <_svfiprintf_r+0x174>
 8010262:	89ab      	ldrh	r3, [r5, #12]
 8010264:	065b      	lsls	r3, r3, #25
 8010266:	f53f af2d 	bmi.w	80100c4 <_svfiprintf_r+0x28>
 801026a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801026c:	b01d      	add	sp, #116	; 0x74
 801026e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010272:	ab03      	add	r3, sp, #12
 8010274:	9300      	str	r3, [sp, #0]
 8010276:	462a      	mov	r2, r5
 8010278:	4b05      	ldr	r3, [pc, #20]	; (8010290 <_svfiprintf_r+0x1f4>)
 801027a:	a904      	add	r1, sp, #16
 801027c:	4638      	mov	r0, r7
 801027e:	f000 f9bd 	bl	80105fc <_printf_i>
 8010282:	e7eb      	b.n	801025c <_svfiprintf_r+0x1c0>
 8010284:	080115ed 	.word	0x080115ed
 8010288:	080115f7 	.word	0x080115f7
 801028c:	00000000 	.word	0x00000000
 8010290:	0800ffe9 	.word	0x0800ffe9
 8010294:	080115f3 	.word	0x080115f3

08010298 <__sfputc_r>:
 8010298:	6893      	ldr	r3, [r2, #8]
 801029a:	3b01      	subs	r3, #1
 801029c:	2b00      	cmp	r3, #0
 801029e:	b410      	push	{r4}
 80102a0:	6093      	str	r3, [r2, #8]
 80102a2:	da08      	bge.n	80102b6 <__sfputc_r+0x1e>
 80102a4:	6994      	ldr	r4, [r2, #24]
 80102a6:	42a3      	cmp	r3, r4
 80102a8:	db01      	blt.n	80102ae <__sfputc_r+0x16>
 80102aa:	290a      	cmp	r1, #10
 80102ac:	d103      	bne.n	80102b6 <__sfputc_r+0x1e>
 80102ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102b2:	f000 bbe5 	b.w	8010a80 <__swbuf_r>
 80102b6:	6813      	ldr	r3, [r2, #0]
 80102b8:	1c58      	adds	r0, r3, #1
 80102ba:	6010      	str	r0, [r2, #0]
 80102bc:	7019      	strb	r1, [r3, #0]
 80102be:	4608      	mov	r0, r1
 80102c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102c4:	4770      	bx	lr

080102c6 <__sfputs_r>:
 80102c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102c8:	4606      	mov	r6, r0
 80102ca:	460f      	mov	r7, r1
 80102cc:	4614      	mov	r4, r2
 80102ce:	18d5      	adds	r5, r2, r3
 80102d0:	42ac      	cmp	r4, r5
 80102d2:	d101      	bne.n	80102d8 <__sfputs_r+0x12>
 80102d4:	2000      	movs	r0, #0
 80102d6:	e007      	b.n	80102e8 <__sfputs_r+0x22>
 80102d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102dc:	463a      	mov	r2, r7
 80102de:	4630      	mov	r0, r6
 80102e0:	f7ff ffda 	bl	8010298 <__sfputc_r>
 80102e4:	1c43      	adds	r3, r0, #1
 80102e6:	d1f3      	bne.n	80102d0 <__sfputs_r+0xa>
 80102e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080102ec <_vfiprintf_r>:
 80102ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f0:	460d      	mov	r5, r1
 80102f2:	b09d      	sub	sp, #116	; 0x74
 80102f4:	4614      	mov	r4, r2
 80102f6:	4698      	mov	r8, r3
 80102f8:	4606      	mov	r6, r0
 80102fa:	b118      	cbz	r0, 8010304 <_vfiprintf_r+0x18>
 80102fc:	6a03      	ldr	r3, [r0, #32]
 80102fe:	b90b      	cbnz	r3, 8010304 <_vfiprintf_r+0x18>
 8010300:	f7ff fca0 	bl	800fc44 <__sinit>
 8010304:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010306:	07d9      	lsls	r1, r3, #31
 8010308:	d405      	bmi.n	8010316 <_vfiprintf_r+0x2a>
 801030a:	89ab      	ldrh	r3, [r5, #12]
 801030c:	059a      	lsls	r2, r3, #22
 801030e:	d402      	bmi.n	8010316 <_vfiprintf_r+0x2a>
 8010310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010312:	f7ff fe1a 	bl	800ff4a <__retarget_lock_acquire_recursive>
 8010316:	89ab      	ldrh	r3, [r5, #12]
 8010318:	071b      	lsls	r3, r3, #28
 801031a:	d501      	bpl.n	8010320 <_vfiprintf_r+0x34>
 801031c:	692b      	ldr	r3, [r5, #16]
 801031e:	b99b      	cbnz	r3, 8010348 <_vfiprintf_r+0x5c>
 8010320:	4629      	mov	r1, r5
 8010322:	4630      	mov	r0, r6
 8010324:	f000 fbea 	bl	8010afc <__swsetup_r>
 8010328:	b170      	cbz	r0, 8010348 <_vfiprintf_r+0x5c>
 801032a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801032c:	07dc      	lsls	r4, r3, #31
 801032e:	d504      	bpl.n	801033a <_vfiprintf_r+0x4e>
 8010330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010334:	b01d      	add	sp, #116	; 0x74
 8010336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801033a:	89ab      	ldrh	r3, [r5, #12]
 801033c:	0598      	lsls	r0, r3, #22
 801033e:	d4f7      	bmi.n	8010330 <_vfiprintf_r+0x44>
 8010340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010342:	f7ff fe03 	bl	800ff4c <__retarget_lock_release_recursive>
 8010346:	e7f3      	b.n	8010330 <_vfiprintf_r+0x44>
 8010348:	2300      	movs	r3, #0
 801034a:	9309      	str	r3, [sp, #36]	; 0x24
 801034c:	2320      	movs	r3, #32
 801034e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010352:	f8cd 800c 	str.w	r8, [sp, #12]
 8010356:	2330      	movs	r3, #48	; 0x30
 8010358:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801050c <_vfiprintf_r+0x220>
 801035c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010360:	f04f 0901 	mov.w	r9, #1
 8010364:	4623      	mov	r3, r4
 8010366:	469a      	mov	sl, r3
 8010368:	f813 2b01 	ldrb.w	r2, [r3], #1
 801036c:	b10a      	cbz	r2, 8010372 <_vfiprintf_r+0x86>
 801036e:	2a25      	cmp	r2, #37	; 0x25
 8010370:	d1f9      	bne.n	8010366 <_vfiprintf_r+0x7a>
 8010372:	ebba 0b04 	subs.w	fp, sl, r4
 8010376:	d00b      	beq.n	8010390 <_vfiprintf_r+0xa4>
 8010378:	465b      	mov	r3, fp
 801037a:	4622      	mov	r2, r4
 801037c:	4629      	mov	r1, r5
 801037e:	4630      	mov	r0, r6
 8010380:	f7ff ffa1 	bl	80102c6 <__sfputs_r>
 8010384:	3001      	adds	r0, #1
 8010386:	f000 80a9 	beq.w	80104dc <_vfiprintf_r+0x1f0>
 801038a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801038c:	445a      	add	r2, fp
 801038e:	9209      	str	r2, [sp, #36]	; 0x24
 8010390:	f89a 3000 	ldrb.w	r3, [sl]
 8010394:	2b00      	cmp	r3, #0
 8010396:	f000 80a1 	beq.w	80104dc <_vfiprintf_r+0x1f0>
 801039a:	2300      	movs	r3, #0
 801039c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103a4:	f10a 0a01 	add.w	sl, sl, #1
 80103a8:	9304      	str	r3, [sp, #16]
 80103aa:	9307      	str	r3, [sp, #28]
 80103ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80103b0:	931a      	str	r3, [sp, #104]	; 0x68
 80103b2:	4654      	mov	r4, sl
 80103b4:	2205      	movs	r2, #5
 80103b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103ba:	4854      	ldr	r0, [pc, #336]	; (801050c <_vfiprintf_r+0x220>)
 80103bc:	f7ef ff40 	bl	8000240 <memchr>
 80103c0:	9a04      	ldr	r2, [sp, #16]
 80103c2:	b9d8      	cbnz	r0, 80103fc <_vfiprintf_r+0x110>
 80103c4:	06d1      	lsls	r1, r2, #27
 80103c6:	bf44      	itt	mi
 80103c8:	2320      	movmi	r3, #32
 80103ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103ce:	0713      	lsls	r3, r2, #28
 80103d0:	bf44      	itt	mi
 80103d2:	232b      	movmi	r3, #43	; 0x2b
 80103d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103d8:	f89a 3000 	ldrb.w	r3, [sl]
 80103dc:	2b2a      	cmp	r3, #42	; 0x2a
 80103de:	d015      	beq.n	801040c <_vfiprintf_r+0x120>
 80103e0:	9a07      	ldr	r2, [sp, #28]
 80103e2:	4654      	mov	r4, sl
 80103e4:	2000      	movs	r0, #0
 80103e6:	f04f 0c0a 	mov.w	ip, #10
 80103ea:	4621      	mov	r1, r4
 80103ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103f0:	3b30      	subs	r3, #48	; 0x30
 80103f2:	2b09      	cmp	r3, #9
 80103f4:	d94d      	bls.n	8010492 <_vfiprintf_r+0x1a6>
 80103f6:	b1b0      	cbz	r0, 8010426 <_vfiprintf_r+0x13a>
 80103f8:	9207      	str	r2, [sp, #28]
 80103fa:	e014      	b.n	8010426 <_vfiprintf_r+0x13a>
 80103fc:	eba0 0308 	sub.w	r3, r0, r8
 8010400:	fa09 f303 	lsl.w	r3, r9, r3
 8010404:	4313      	orrs	r3, r2
 8010406:	9304      	str	r3, [sp, #16]
 8010408:	46a2      	mov	sl, r4
 801040a:	e7d2      	b.n	80103b2 <_vfiprintf_r+0xc6>
 801040c:	9b03      	ldr	r3, [sp, #12]
 801040e:	1d19      	adds	r1, r3, #4
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	9103      	str	r1, [sp, #12]
 8010414:	2b00      	cmp	r3, #0
 8010416:	bfbb      	ittet	lt
 8010418:	425b      	neglt	r3, r3
 801041a:	f042 0202 	orrlt.w	r2, r2, #2
 801041e:	9307      	strge	r3, [sp, #28]
 8010420:	9307      	strlt	r3, [sp, #28]
 8010422:	bfb8      	it	lt
 8010424:	9204      	strlt	r2, [sp, #16]
 8010426:	7823      	ldrb	r3, [r4, #0]
 8010428:	2b2e      	cmp	r3, #46	; 0x2e
 801042a:	d10c      	bne.n	8010446 <_vfiprintf_r+0x15a>
 801042c:	7863      	ldrb	r3, [r4, #1]
 801042e:	2b2a      	cmp	r3, #42	; 0x2a
 8010430:	d134      	bne.n	801049c <_vfiprintf_r+0x1b0>
 8010432:	9b03      	ldr	r3, [sp, #12]
 8010434:	1d1a      	adds	r2, r3, #4
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	9203      	str	r2, [sp, #12]
 801043a:	2b00      	cmp	r3, #0
 801043c:	bfb8      	it	lt
 801043e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010442:	3402      	adds	r4, #2
 8010444:	9305      	str	r3, [sp, #20]
 8010446:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801051c <_vfiprintf_r+0x230>
 801044a:	7821      	ldrb	r1, [r4, #0]
 801044c:	2203      	movs	r2, #3
 801044e:	4650      	mov	r0, sl
 8010450:	f7ef fef6 	bl	8000240 <memchr>
 8010454:	b138      	cbz	r0, 8010466 <_vfiprintf_r+0x17a>
 8010456:	9b04      	ldr	r3, [sp, #16]
 8010458:	eba0 000a 	sub.w	r0, r0, sl
 801045c:	2240      	movs	r2, #64	; 0x40
 801045e:	4082      	lsls	r2, r0
 8010460:	4313      	orrs	r3, r2
 8010462:	3401      	adds	r4, #1
 8010464:	9304      	str	r3, [sp, #16]
 8010466:	f814 1b01 	ldrb.w	r1, [r4], #1
 801046a:	4829      	ldr	r0, [pc, #164]	; (8010510 <_vfiprintf_r+0x224>)
 801046c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010470:	2206      	movs	r2, #6
 8010472:	f7ef fee5 	bl	8000240 <memchr>
 8010476:	2800      	cmp	r0, #0
 8010478:	d03f      	beq.n	80104fa <_vfiprintf_r+0x20e>
 801047a:	4b26      	ldr	r3, [pc, #152]	; (8010514 <_vfiprintf_r+0x228>)
 801047c:	bb1b      	cbnz	r3, 80104c6 <_vfiprintf_r+0x1da>
 801047e:	9b03      	ldr	r3, [sp, #12]
 8010480:	3307      	adds	r3, #7
 8010482:	f023 0307 	bic.w	r3, r3, #7
 8010486:	3308      	adds	r3, #8
 8010488:	9303      	str	r3, [sp, #12]
 801048a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801048c:	443b      	add	r3, r7
 801048e:	9309      	str	r3, [sp, #36]	; 0x24
 8010490:	e768      	b.n	8010364 <_vfiprintf_r+0x78>
 8010492:	fb0c 3202 	mla	r2, ip, r2, r3
 8010496:	460c      	mov	r4, r1
 8010498:	2001      	movs	r0, #1
 801049a:	e7a6      	b.n	80103ea <_vfiprintf_r+0xfe>
 801049c:	2300      	movs	r3, #0
 801049e:	3401      	adds	r4, #1
 80104a0:	9305      	str	r3, [sp, #20]
 80104a2:	4619      	mov	r1, r3
 80104a4:	f04f 0c0a 	mov.w	ip, #10
 80104a8:	4620      	mov	r0, r4
 80104aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104ae:	3a30      	subs	r2, #48	; 0x30
 80104b0:	2a09      	cmp	r2, #9
 80104b2:	d903      	bls.n	80104bc <_vfiprintf_r+0x1d0>
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d0c6      	beq.n	8010446 <_vfiprintf_r+0x15a>
 80104b8:	9105      	str	r1, [sp, #20]
 80104ba:	e7c4      	b.n	8010446 <_vfiprintf_r+0x15a>
 80104bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80104c0:	4604      	mov	r4, r0
 80104c2:	2301      	movs	r3, #1
 80104c4:	e7f0      	b.n	80104a8 <_vfiprintf_r+0x1bc>
 80104c6:	ab03      	add	r3, sp, #12
 80104c8:	9300      	str	r3, [sp, #0]
 80104ca:	462a      	mov	r2, r5
 80104cc:	4b12      	ldr	r3, [pc, #72]	; (8010518 <_vfiprintf_r+0x22c>)
 80104ce:	a904      	add	r1, sp, #16
 80104d0:	4630      	mov	r0, r6
 80104d2:	f3af 8000 	nop.w
 80104d6:	4607      	mov	r7, r0
 80104d8:	1c78      	adds	r0, r7, #1
 80104da:	d1d6      	bne.n	801048a <_vfiprintf_r+0x19e>
 80104dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104de:	07d9      	lsls	r1, r3, #31
 80104e0:	d405      	bmi.n	80104ee <_vfiprintf_r+0x202>
 80104e2:	89ab      	ldrh	r3, [r5, #12]
 80104e4:	059a      	lsls	r2, r3, #22
 80104e6:	d402      	bmi.n	80104ee <_vfiprintf_r+0x202>
 80104e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104ea:	f7ff fd2f 	bl	800ff4c <__retarget_lock_release_recursive>
 80104ee:	89ab      	ldrh	r3, [r5, #12]
 80104f0:	065b      	lsls	r3, r3, #25
 80104f2:	f53f af1d 	bmi.w	8010330 <_vfiprintf_r+0x44>
 80104f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80104f8:	e71c      	b.n	8010334 <_vfiprintf_r+0x48>
 80104fa:	ab03      	add	r3, sp, #12
 80104fc:	9300      	str	r3, [sp, #0]
 80104fe:	462a      	mov	r2, r5
 8010500:	4b05      	ldr	r3, [pc, #20]	; (8010518 <_vfiprintf_r+0x22c>)
 8010502:	a904      	add	r1, sp, #16
 8010504:	4630      	mov	r0, r6
 8010506:	f000 f879 	bl	80105fc <_printf_i>
 801050a:	e7e4      	b.n	80104d6 <_vfiprintf_r+0x1ea>
 801050c:	080115ed 	.word	0x080115ed
 8010510:	080115f7 	.word	0x080115f7
 8010514:	00000000 	.word	0x00000000
 8010518:	080102c7 	.word	0x080102c7
 801051c:	080115f3 	.word	0x080115f3

08010520 <_printf_common>:
 8010520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010524:	4616      	mov	r6, r2
 8010526:	4699      	mov	r9, r3
 8010528:	688a      	ldr	r2, [r1, #8]
 801052a:	690b      	ldr	r3, [r1, #16]
 801052c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010530:	4293      	cmp	r3, r2
 8010532:	bfb8      	it	lt
 8010534:	4613      	movlt	r3, r2
 8010536:	6033      	str	r3, [r6, #0]
 8010538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801053c:	4607      	mov	r7, r0
 801053e:	460c      	mov	r4, r1
 8010540:	b10a      	cbz	r2, 8010546 <_printf_common+0x26>
 8010542:	3301      	adds	r3, #1
 8010544:	6033      	str	r3, [r6, #0]
 8010546:	6823      	ldr	r3, [r4, #0]
 8010548:	0699      	lsls	r1, r3, #26
 801054a:	bf42      	ittt	mi
 801054c:	6833      	ldrmi	r3, [r6, #0]
 801054e:	3302      	addmi	r3, #2
 8010550:	6033      	strmi	r3, [r6, #0]
 8010552:	6825      	ldr	r5, [r4, #0]
 8010554:	f015 0506 	ands.w	r5, r5, #6
 8010558:	d106      	bne.n	8010568 <_printf_common+0x48>
 801055a:	f104 0a19 	add.w	sl, r4, #25
 801055e:	68e3      	ldr	r3, [r4, #12]
 8010560:	6832      	ldr	r2, [r6, #0]
 8010562:	1a9b      	subs	r3, r3, r2
 8010564:	42ab      	cmp	r3, r5
 8010566:	dc26      	bgt.n	80105b6 <_printf_common+0x96>
 8010568:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801056c:	1e13      	subs	r3, r2, #0
 801056e:	6822      	ldr	r2, [r4, #0]
 8010570:	bf18      	it	ne
 8010572:	2301      	movne	r3, #1
 8010574:	0692      	lsls	r2, r2, #26
 8010576:	d42b      	bmi.n	80105d0 <_printf_common+0xb0>
 8010578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801057c:	4649      	mov	r1, r9
 801057e:	4638      	mov	r0, r7
 8010580:	47c0      	blx	r8
 8010582:	3001      	adds	r0, #1
 8010584:	d01e      	beq.n	80105c4 <_printf_common+0xa4>
 8010586:	6823      	ldr	r3, [r4, #0]
 8010588:	6922      	ldr	r2, [r4, #16]
 801058a:	f003 0306 	and.w	r3, r3, #6
 801058e:	2b04      	cmp	r3, #4
 8010590:	bf02      	ittt	eq
 8010592:	68e5      	ldreq	r5, [r4, #12]
 8010594:	6833      	ldreq	r3, [r6, #0]
 8010596:	1aed      	subeq	r5, r5, r3
 8010598:	68a3      	ldr	r3, [r4, #8]
 801059a:	bf0c      	ite	eq
 801059c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105a0:	2500      	movne	r5, #0
 80105a2:	4293      	cmp	r3, r2
 80105a4:	bfc4      	itt	gt
 80105a6:	1a9b      	subgt	r3, r3, r2
 80105a8:	18ed      	addgt	r5, r5, r3
 80105aa:	2600      	movs	r6, #0
 80105ac:	341a      	adds	r4, #26
 80105ae:	42b5      	cmp	r5, r6
 80105b0:	d11a      	bne.n	80105e8 <_printf_common+0xc8>
 80105b2:	2000      	movs	r0, #0
 80105b4:	e008      	b.n	80105c8 <_printf_common+0xa8>
 80105b6:	2301      	movs	r3, #1
 80105b8:	4652      	mov	r2, sl
 80105ba:	4649      	mov	r1, r9
 80105bc:	4638      	mov	r0, r7
 80105be:	47c0      	blx	r8
 80105c0:	3001      	adds	r0, #1
 80105c2:	d103      	bne.n	80105cc <_printf_common+0xac>
 80105c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105cc:	3501      	adds	r5, #1
 80105ce:	e7c6      	b.n	801055e <_printf_common+0x3e>
 80105d0:	18e1      	adds	r1, r4, r3
 80105d2:	1c5a      	adds	r2, r3, #1
 80105d4:	2030      	movs	r0, #48	; 0x30
 80105d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80105da:	4422      	add	r2, r4
 80105dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80105e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80105e4:	3302      	adds	r3, #2
 80105e6:	e7c7      	b.n	8010578 <_printf_common+0x58>
 80105e8:	2301      	movs	r3, #1
 80105ea:	4622      	mov	r2, r4
 80105ec:	4649      	mov	r1, r9
 80105ee:	4638      	mov	r0, r7
 80105f0:	47c0      	blx	r8
 80105f2:	3001      	adds	r0, #1
 80105f4:	d0e6      	beq.n	80105c4 <_printf_common+0xa4>
 80105f6:	3601      	adds	r6, #1
 80105f8:	e7d9      	b.n	80105ae <_printf_common+0x8e>
	...

080105fc <_printf_i>:
 80105fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010600:	7e0f      	ldrb	r7, [r1, #24]
 8010602:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010604:	2f78      	cmp	r7, #120	; 0x78
 8010606:	4691      	mov	r9, r2
 8010608:	4680      	mov	r8, r0
 801060a:	460c      	mov	r4, r1
 801060c:	469a      	mov	sl, r3
 801060e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010612:	d807      	bhi.n	8010624 <_printf_i+0x28>
 8010614:	2f62      	cmp	r7, #98	; 0x62
 8010616:	d80a      	bhi.n	801062e <_printf_i+0x32>
 8010618:	2f00      	cmp	r7, #0
 801061a:	f000 80d4 	beq.w	80107c6 <_printf_i+0x1ca>
 801061e:	2f58      	cmp	r7, #88	; 0x58
 8010620:	f000 80c0 	beq.w	80107a4 <_printf_i+0x1a8>
 8010624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801062c:	e03a      	b.n	80106a4 <_printf_i+0xa8>
 801062e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010632:	2b15      	cmp	r3, #21
 8010634:	d8f6      	bhi.n	8010624 <_printf_i+0x28>
 8010636:	a101      	add	r1, pc, #4	; (adr r1, 801063c <_printf_i+0x40>)
 8010638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801063c:	08010695 	.word	0x08010695
 8010640:	080106a9 	.word	0x080106a9
 8010644:	08010625 	.word	0x08010625
 8010648:	08010625 	.word	0x08010625
 801064c:	08010625 	.word	0x08010625
 8010650:	08010625 	.word	0x08010625
 8010654:	080106a9 	.word	0x080106a9
 8010658:	08010625 	.word	0x08010625
 801065c:	08010625 	.word	0x08010625
 8010660:	08010625 	.word	0x08010625
 8010664:	08010625 	.word	0x08010625
 8010668:	080107ad 	.word	0x080107ad
 801066c:	080106d5 	.word	0x080106d5
 8010670:	08010767 	.word	0x08010767
 8010674:	08010625 	.word	0x08010625
 8010678:	08010625 	.word	0x08010625
 801067c:	080107cf 	.word	0x080107cf
 8010680:	08010625 	.word	0x08010625
 8010684:	080106d5 	.word	0x080106d5
 8010688:	08010625 	.word	0x08010625
 801068c:	08010625 	.word	0x08010625
 8010690:	0801076f 	.word	0x0801076f
 8010694:	682b      	ldr	r3, [r5, #0]
 8010696:	1d1a      	adds	r2, r3, #4
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	602a      	str	r2, [r5, #0]
 801069c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106a4:	2301      	movs	r3, #1
 80106a6:	e09f      	b.n	80107e8 <_printf_i+0x1ec>
 80106a8:	6820      	ldr	r0, [r4, #0]
 80106aa:	682b      	ldr	r3, [r5, #0]
 80106ac:	0607      	lsls	r7, r0, #24
 80106ae:	f103 0104 	add.w	r1, r3, #4
 80106b2:	6029      	str	r1, [r5, #0]
 80106b4:	d501      	bpl.n	80106ba <_printf_i+0xbe>
 80106b6:	681e      	ldr	r6, [r3, #0]
 80106b8:	e003      	b.n	80106c2 <_printf_i+0xc6>
 80106ba:	0646      	lsls	r6, r0, #25
 80106bc:	d5fb      	bpl.n	80106b6 <_printf_i+0xba>
 80106be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80106c2:	2e00      	cmp	r6, #0
 80106c4:	da03      	bge.n	80106ce <_printf_i+0xd2>
 80106c6:	232d      	movs	r3, #45	; 0x2d
 80106c8:	4276      	negs	r6, r6
 80106ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106ce:	485a      	ldr	r0, [pc, #360]	; (8010838 <_printf_i+0x23c>)
 80106d0:	230a      	movs	r3, #10
 80106d2:	e012      	b.n	80106fa <_printf_i+0xfe>
 80106d4:	682b      	ldr	r3, [r5, #0]
 80106d6:	6820      	ldr	r0, [r4, #0]
 80106d8:	1d19      	adds	r1, r3, #4
 80106da:	6029      	str	r1, [r5, #0]
 80106dc:	0605      	lsls	r5, r0, #24
 80106de:	d501      	bpl.n	80106e4 <_printf_i+0xe8>
 80106e0:	681e      	ldr	r6, [r3, #0]
 80106e2:	e002      	b.n	80106ea <_printf_i+0xee>
 80106e4:	0641      	lsls	r1, r0, #25
 80106e6:	d5fb      	bpl.n	80106e0 <_printf_i+0xe4>
 80106e8:	881e      	ldrh	r6, [r3, #0]
 80106ea:	4853      	ldr	r0, [pc, #332]	; (8010838 <_printf_i+0x23c>)
 80106ec:	2f6f      	cmp	r7, #111	; 0x6f
 80106ee:	bf0c      	ite	eq
 80106f0:	2308      	moveq	r3, #8
 80106f2:	230a      	movne	r3, #10
 80106f4:	2100      	movs	r1, #0
 80106f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80106fa:	6865      	ldr	r5, [r4, #4]
 80106fc:	60a5      	str	r5, [r4, #8]
 80106fe:	2d00      	cmp	r5, #0
 8010700:	bfa2      	ittt	ge
 8010702:	6821      	ldrge	r1, [r4, #0]
 8010704:	f021 0104 	bicge.w	r1, r1, #4
 8010708:	6021      	strge	r1, [r4, #0]
 801070a:	b90e      	cbnz	r6, 8010710 <_printf_i+0x114>
 801070c:	2d00      	cmp	r5, #0
 801070e:	d04b      	beq.n	80107a8 <_printf_i+0x1ac>
 8010710:	4615      	mov	r5, r2
 8010712:	fbb6 f1f3 	udiv	r1, r6, r3
 8010716:	fb03 6711 	mls	r7, r3, r1, r6
 801071a:	5dc7      	ldrb	r7, [r0, r7]
 801071c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010720:	4637      	mov	r7, r6
 8010722:	42bb      	cmp	r3, r7
 8010724:	460e      	mov	r6, r1
 8010726:	d9f4      	bls.n	8010712 <_printf_i+0x116>
 8010728:	2b08      	cmp	r3, #8
 801072a:	d10b      	bne.n	8010744 <_printf_i+0x148>
 801072c:	6823      	ldr	r3, [r4, #0]
 801072e:	07de      	lsls	r6, r3, #31
 8010730:	d508      	bpl.n	8010744 <_printf_i+0x148>
 8010732:	6923      	ldr	r3, [r4, #16]
 8010734:	6861      	ldr	r1, [r4, #4]
 8010736:	4299      	cmp	r1, r3
 8010738:	bfde      	ittt	le
 801073a:	2330      	movle	r3, #48	; 0x30
 801073c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010740:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010744:	1b52      	subs	r2, r2, r5
 8010746:	6122      	str	r2, [r4, #16]
 8010748:	f8cd a000 	str.w	sl, [sp]
 801074c:	464b      	mov	r3, r9
 801074e:	aa03      	add	r2, sp, #12
 8010750:	4621      	mov	r1, r4
 8010752:	4640      	mov	r0, r8
 8010754:	f7ff fee4 	bl	8010520 <_printf_common>
 8010758:	3001      	adds	r0, #1
 801075a:	d14a      	bne.n	80107f2 <_printf_i+0x1f6>
 801075c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010760:	b004      	add	sp, #16
 8010762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010766:	6823      	ldr	r3, [r4, #0]
 8010768:	f043 0320 	orr.w	r3, r3, #32
 801076c:	6023      	str	r3, [r4, #0]
 801076e:	4833      	ldr	r0, [pc, #204]	; (801083c <_printf_i+0x240>)
 8010770:	2778      	movs	r7, #120	; 0x78
 8010772:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010776:	6823      	ldr	r3, [r4, #0]
 8010778:	6829      	ldr	r1, [r5, #0]
 801077a:	061f      	lsls	r7, r3, #24
 801077c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010780:	d402      	bmi.n	8010788 <_printf_i+0x18c>
 8010782:	065f      	lsls	r7, r3, #25
 8010784:	bf48      	it	mi
 8010786:	b2b6      	uxthmi	r6, r6
 8010788:	07df      	lsls	r7, r3, #31
 801078a:	bf48      	it	mi
 801078c:	f043 0320 	orrmi.w	r3, r3, #32
 8010790:	6029      	str	r1, [r5, #0]
 8010792:	bf48      	it	mi
 8010794:	6023      	strmi	r3, [r4, #0]
 8010796:	b91e      	cbnz	r6, 80107a0 <_printf_i+0x1a4>
 8010798:	6823      	ldr	r3, [r4, #0]
 801079a:	f023 0320 	bic.w	r3, r3, #32
 801079e:	6023      	str	r3, [r4, #0]
 80107a0:	2310      	movs	r3, #16
 80107a2:	e7a7      	b.n	80106f4 <_printf_i+0xf8>
 80107a4:	4824      	ldr	r0, [pc, #144]	; (8010838 <_printf_i+0x23c>)
 80107a6:	e7e4      	b.n	8010772 <_printf_i+0x176>
 80107a8:	4615      	mov	r5, r2
 80107aa:	e7bd      	b.n	8010728 <_printf_i+0x12c>
 80107ac:	682b      	ldr	r3, [r5, #0]
 80107ae:	6826      	ldr	r6, [r4, #0]
 80107b0:	6961      	ldr	r1, [r4, #20]
 80107b2:	1d18      	adds	r0, r3, #4
 80107b4:	6028      	str	r0, [r5, #0]
 80107b6:	0635      	lsls	r5, r6, #24
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	d501      	bpl.n	80107c0 <_printf_i+0x1c4>
 80107bc:	6019      	str	r1, [r3, #0]
 80107be:	e002      	b.n	80107c6 <_printf_i+0x1ca>
 80107c0:	0670      	lsls	r0, r6, #25
 80107c2:	d5fb      	bpl.n	80107bc <_printf_i+0x1c0>
 80107c4:	8019      	strh	r1, [r3, #0]
 80107c6:	2300      	movs	r3, #0
 80107c8:	6123      	str	r3, [r4, #16]
 80107ca:	4615      	mov	r5, r2
 80107cc:	e7bc      	b.n	8010748 <_printf_i+0x14c>
 80107ce:	682b      	ldr	r3, [r5, #0]
 80107d0:	1d1a      	adds	r2, r3, #4
 80107d2:	602a      	str	r2, [r5, #0]
 80107d4:	681d      	ldr	r5, [r3, #0]
 80107d6:	6862      	ldr	r2, [r4, #4]
 80107d8:	2100      	movs	r1, #0
 80107da:	4628      	mov	r0, r5
 80107dc:	f7ef fd30 	bl	8000240 <memchr>
 80107e0:	b108      	cbz	r0, 80107e6 <_printf_i+0x1ea>
 80107e2:	1b40      	subs	r0, r0, r5
 80107e4:	6060      	str	r0, [r4, #4]
 80107e6:	6863      	ldr	r3, [r4, #4]
 80107e8:	6123      	str	r3, [r4, #16]
 80107ea:	2300      	movs	r3, #0
 80107ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107f0:	e7aa      	b.n	8010748 <_printf_i+0x14c>
 80107f2:	6923      	ldr	r3, [r4, #16]
 80107f4:	462a      	mov	r2, r5
 80107f6:	4649      	mov	r1, r9
 80107f8:	4640      	mov	r0, r8
 80107fa:	47d0      	blx	sl
 80107fc:	3001      	adds	r0, #1
 80107fe:	d0ad      	beq.n	801075c <_printf_i+0x160>
 8010800:	6823      	ldr	r3, [r4, #0]
 8010802:	079b      	lsls	r3, r3, #30
 8010804:	d413      	bmi.n	801082e <_printf_i+0x232>
 8010806:	68e0      	ldr	r0, [r4, #12]
 8010808:	9b03      	ldr	r3, [sp, #12]
 801080a:	4298      	cmp	r0, r3
 801080c:	bfb8      	it	lt
 801080e:	4618      	movlt	r0, r3
 8010810:	e7a6      	b.n	8010760 <_printf_i+0x164>
 8010812:	2301      	movs	r3, #1
 8010814:	4632      	mov	r2, r6
 8010816:	4649      	mov	r1, r9
 8010818:	4640      	mov	r0, r8
 801081a:	47d0      	blx	sl
 801081c:	3001      	adds	r0, #1
 801081e:	d09d      	beq.n	801075c <_printf_i+0x160>
 8010820:	3501      	adds	r5, #1
 8010822:	68e3      	ldr	r3, [r4, #12]
 8010824:	9903      	ldr	r1, [sp, #12]
 8010826:	1a5b      	subs	r3, r3, r1
 8010828:	42ab      	cmp	r3, r5
 801082a:	dcf2      	bgt.n	8010812 <_printf_i+0x216>
 801082c:	e7eb      	b.n	8010806 <_printf_i+0x20a>
 801082e:	2500      	movs	r5, #0
 8010830:	f104 0619 	add.w	r6, r4, #25
 8010834:	e7f5      	b.n	8010822 <_printf_i+0x226>
 8010836:	bf00      	nop
 8010838:	080115fe 	.word	0x080115fe
 801083c:	0801160f 	.word	0x0801160f

08010840 <__sflush_r>:
 8010840:	898a      	ldrh	r2, [r1, #12]
 8010842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010846:	4605      	mov	r5, r0
 8010848:	0710      	lsls	r0, r2, #28
 801084a:	460c      	mov	r4, r1
 801084c:	d458      	bmi.n	8010900 <__sflush_r+0xc0>
 801084e:	684b      	ldr	r3, [r1, #4]
 8010850:	2b00      	cmp	r3, #0
 8010852:	dc05      	bgt.n	8010860 <__sflush_r+0x20>
 8010854:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010856:	2b00      	cmp	r3, #0
 8010858:	dc02      	bgt.n	8010860 <__sflush_r+0x20>
 801085a:	2000      	movs	r0, #0
 801085c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010862:	2e00      	cmp	r6, #0
 8010864:	d0f9      	beq.n	801085a <__sflush_r+0x1a>
 8010866:	2300      	movs	r3, #0
 8010868:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801086c:	682f      	ldr	r7, [r5, #0]
 801086e:	6a21      	ldr	r1, [r4, #32]
 8010870:	602b      	str	r3, [r5, #0]
 8010872:	d032      	beq.n	80108da <__sflush_r+0x9a>
 8010874:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010876:	89a3      	ldrh	r3, [r4, #12]
 8010878:	075a      	lsls	r2, r3, #29
 801087a:	d505      	bpl.n	8010888 <__sflush_r+0x48>
 801087c:	6863      	ldr	r3, [r4, #4]
 801087e:	1ac0      	subs	r0, r0, r3
 8010880:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010882:	b10b      	cbz	r3, 8010888 <__sflush_r+0x48>
 8010884:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010886:	1ac0      	subs	r0, r0, r3
 8010888:	2300      	movs	r3, #0
 801088a:	4602      	mov	r2, r0
 801088c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801088e:	6a21      	ldr	r1, [r4, #32]
 8010890:	4628      	mov	r0, r5
 8010892:	47b0      	blx	r6
 8010894:	1c43      	adds	r3, r0, #1
 8010896:	89a3      	ldrh	r3, [r4, #12]
 8010898:	d106      	bne.n	80108a8 <__sflush_r+0x68>
 801089a:	6829      	ldr	r1, [r5, #0]
 801089c:	291d      	cmp	r1, #29
 801089e:	d82b      	bhi.n	80108f8 <__sflush_r+0xb8>
 80108a0:	4a29      	ldr	r2, [pc, #164]	; (8010948 <__sflush_r+0x108>)
 80108a2:	410a      	asrs	r2, r1
 80108a4:	07d6      	lsls	r6, r2, #31
 80108a6:	d427      	bmi.n	80108f8 <__sflush_r+0xb8>
 80108a8:	2200      	movs	r2, #0
 80108aa:	6062      	str	r2, [r4, #4]
 80108ac:	04d9      	lsls	r1, r3, #19
 80108ae:	6922      	ldr	r2, [r4, #16]
 80108b0:	6022      	str	r2, [r4, #0]
 80108b2:	d504      	bpl.n	80108be <__sflush_r+0x7e>
 80108b4:	1c42      	adds	r2, r0, #1
 80108b6:	d101      	bne.n	80108bc <__sflush_r+0x7c>
 80108b8:	682b      	ldr	r3, [r5, #0]
 80108ba:	b903      	cbnz	r3, 80108be <__sflush_r+0x7e>
 80108bc:	6560      	str	r0, [r4, #84]	; 0x54
 80108be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108c0:	602f      	str	r7, [r5, #0]
 80108c2:	2900      	cmp	r1, #0
 80108c4:	d0c9      	beq.n	801085a <__sflush_r+0x1a>
 80108c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108ca:	4299      	cmp	r1, r3
 80108cc:	d002      	beq.n	80108d4 <__sflush_r+0x94>
 80108ce:	4628      	mov	r0, r5
 80108d0:	f7ff fb3e 	bl	800ff50 <_free_r>
 80108d4:	2000      	movs	r0, #0
 80108d6:	6360      	str	r0, [r4, #52]	; 0x34
 80108d8:	e7c0      	b.n	801085c <__sflush_r+0x1c>
 80108da:	2301      	movs	r3, #1
 80108dc:	4628      	mov	r0, r5
 80108de:	47b0      	blx	r6
 80108e0:	1c41      	adds	r1, r0, #1
 80108e2:	d1c8      	bne.n	8010876 <__sflush_r+0x36>
 80108e4:	682b      	ldr	r3, [r5, #0]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d0c5      	beq.n	8010876 <__sflush_r+0x36>
 80108ea:	2b1d      	cmp	r3, #29
 80108ec:	d001      	beq.n	80108f2 <__sflush_r+0xb2>
 80108ee:	2b16      	cmp	r3, #22
 80108f0:	d101      	bne.n	80108f6 <__sflush_r+0xb6>
 80108f2:	602f      	str	r7, [r5, #0]
 80108f4:	e7b1      	b.n	801085a <__sflush_r+0x1a>
 80108f6:	89a3      	ldrh	r3, [r4, #12]
 80108f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108fc:	81a3      	strh	r3, [r4, #12]
 80108fe:	e7ad      	b.n	801085c <__sflush_r+0x1c>
 8010900:	690f      	ldr	r7, [r1, #16]
 8010902:	2f00      	cmp	r7, #0
 8010904:	d0a9      	beq.n	801085a <__sflush_r+0x1a>
 8010906:	0793      	lsls	r3, r2, #30
 8010908:	680e      	ldr	r6, [r1, #0]
 801090a:	bf08      	it	eq
 801090c:	694b      	ldreq	r3, [r1, #20]
 801090e:	600f      	str	r7, [r1, #0]
 8010910:	bf18      	it	ne
 8010912:	2300      	movne	r3, #0
 8010914:	eba6 0807 	sub.w	r8, r6, r7
 8010918:	608b      	str	r3, [r1, #8]
 801091a:	f1b8 0f00 	cmp.w	r8, #0
 801091e:	dd9c      	ble.n	801085a <__sflush_r+0x1a>
 8010920:	6a21      	ldr	r1, [r4, #32]
 8010922:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010924:	4643      	mov	r3, r8
 8010926:	463a      	mov	r2, r7
 8010928:	4628      	mov	r0, r5
 801092a:	47b0      	blx	r6
 801092c:	2800      	cmp	r0, #0
 801092e:	dc06      	bgt.n	801093e <__sflush_r+0xfe>
 8010930:	89a3      	ldrh	r3, [r4, #12]
 8010932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010936:	81a3      	strh	r3, [r4, #12]
 8010938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801093c:	e78e      	b.n	801085c <__sflush_r+0x1c>
 801093e:	4407      	add	r7, r0
 8010940:	eba8 0800 	sub.w	r8, r8, r0
 8010944:	e7e9      	b.n	801091a <__sflush_r+0xda>
 8010946:	bf00      	nop
 8010948:	dfbffffe 	.word	0xdfbffffe

0801094c <_fflush_r>:
 801094c:	b538      	push	{r3, r4, r5, lr}
 801094e:	690b      	ldr	r3, [r1, #16]
 8010950:	4605      	mov	r5, r0
 8010952:	460c      	mov	r4, r1
 8010954:	b913      	cbnz	r3, 801095c <_fflush_r+0x10>
 8010956:	2500      	movs	r5, #0
 8010958:	4628      	mov	r0, r5
 801095a:	bd38      	pop	{r3, r4, r5, pc}
 801095c:	b118      	cbz	r0, 8010966 <_fflush_r+0x1a>
 801095e:	6a03      	ldr	r3, [r0, #32]
 8010960:	b90b      	cbnz	r3, 8010966 <_fflush_r+0x1a>
 8010962:	f7ff f96f 	bl	800fc44 <__sinit>
 8010966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d0f3      	beq.n	8010956 <_fflush_r+0xa>
 801096e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010970:	07d0      	lsls	r0, r2, #31
 8010972:	d404      	bmi.n	801097e <_fflush_r+0x32>
 8010974:	0599      	lsls	r1, r3, #22
 8010976:	d402      	bmi.n	801097e <_fflush_r+0x32>
 8010978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801097a:	f7ff fae6 	bl	800ff4a <__retarget_lock_acquire_recursive>
 801097e:	4628      	mov	r0, r5
 8010980:	4621      	mov	r1, r4
 8010982:	f7ff ff5d 	bl	8010840 <__sflush_r>
 8010986:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010988:	07da      	lsls	r2, r3, #31
 801098a:	4605      	mov	r5, r0
 801098c:	d4e4      	bmi.n	8010958 <_fflush_r+0xc>
 801098e:	89a3      	ldrh	r3, [r4, #12]
 8010990:	059b      	lsls	r3, r3, #22
 8010992:	d4e1      	bmi.n	8010958 <_fflush_r+0xc>
 8010994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010996:	f7ff fad9 	bl	800ff4c <__retarget_lock_release_recursive>
 801099a:	e7dd      	b.n	8010958 <_fflush_r+0xc>

0801099c <__sread>:
 801099c:	b510      	push	{r4, lr}
 801099e:	460c      	mov	r4, r1
 80109a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109a4:	f000 f9c2 	bl	8010d2c <_read_r>
 80109a8:	2800      	cmp	r0, #0
 80109aa:	bfab      	itete	ge
 80109ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80109ae:	89a3      	ldrhlt	r3, [r4, #12]
 80109b0:	181b      	addge	r3, r3, r0
 80109b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80109b6:	bfac      	ite	ge
 80109b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80109ba:	81a3      	strhlt	r3, [r4, #12]
 80109bc:	bd10      	pop	{r4, pc}

080109be <__swrite>:
 80109be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c2:	461f      	mov	r7, r3
 80109c4:	898b      	ldrh	r3, [r1, #12]
 80109c6:	05db      	lsls	r3, r3, #23
 80109c8:	4605      	mov	r5, r0
 80109ca:	460c      	mov	r4, r1
 80109cc:	4616      	mov	r6, r2
 80109ce:	d505      	bpl.n	80109dc <__swrite+0x1e>
 80109d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109d4:	2302      	movs	r3, #2
 80109d6:	2200      	movs	r2, #0
 80109d8:	f000 f996 	bl	8010d08 <_lseek_r>
 80109dc:	89a3      	ldrh	r3, [r4, #12]
 80109de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80109e6:	81a3      	strh	r3, [r4, #12]
 80109e8:	4632      	mov	r2, r6
 80109ea:	463b      	mov	r3, r7
 80109ec:	4628      	mov	r0, r5
 80109ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109f2:	f000 b9ad 	b.w	8010d50 <_write_r>

080109f6 <__sseek>:
 80109f6:	b510      	push	{r4, lr}
 80109f8:	460c      	mov	r4, r1
 80109fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109fe:	f000 f983 	bl	8010d08 <_lseek_r>
 8010a02:	1c43      	adds	r3, r0, #1
 8010a04:	89a3      	ldrh	r3, [r4, #12]
 8010a06:	bf15      	itete	ne
 8010a08:	6560      	strne	r0, [r4, #84]	; 0x54
 8010a0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010a0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010a12:	81a3      	strheq	r3, [r4, #12]
 8010a14:	bf18      	it	ne
 8010a16:	81a3      	strhne	r3, [r4, #12]
 8010a18:	bd10      	pop	{r4, pc}

08010a1a <__sclose>:
 8010a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a1e:	f000 b941 	b.w	8010ca4 <_close_r>

08010a22 <_realloc_r>:
 8010a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a26:	4680      	mov	r8, r0
 8010a28:	4614      	mov	r4, r2
 8010a2a:	460e      	mov	r6, r1
 8010a2c:	b921      	cbnz	r1, 8010a38 <_realloc_r+0x16>
 8010a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a32:	4611      	mov	r1, r2
 8010a34:	f7fe bfba 	b.w	800f9ac <_malloc_r>
 8010a38:	b92a      	cbnz	r2, 8010a46 <_realloc_r+0x24>
 8010a3a:	f7ff fa89 	bl	800ff50 <_free_r>
 8010a3e:	4625      	mov	r5, r4
 8010a40:	4628      	mov	r0, r5
 8010a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a46:	f000 f9a3 	bl	8010d90 <_malloc_usable_size_r>
 8010a4a:	4284      	cmp	r4, r0
 8010a4c:	4607      	mov	r7, r0
 8010a4e:	d802      	bhi.n	8010a56 <_realloc_r+0x34>
 8010a50:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010a54:	d812      	bhi.n	8010a7c <_realloc_r+0x5a>
 8010a56:	4621      	mov	r1, r4
 8010a58:	4640      	mov	r0, r8
 8010a5a:	f7fe ffa7 	bl	800f9ac <_malloc_r>
 8010a5e:	4605      	mov	r5, r0
 8010a60:	2800      	cmp	r0, #0
 8010a62:	d0ed      	beq.n	8010a40 <_realloc_r+0x1e>
 8010a64:	42bc      	cmp	r4, r7
 8010a66:	4622      	mov	r2, r4
 8010a68:	4631      	mov	r1, r6
 8010a6a:	bf28      	it	cs
 8010a6c:	463a      	movcs	r2, r7
 8010a6e:	f000 f981 	bl	8010d74 <memcpy>
 8010a72:	4631      	mov	r1, r6
 8010a74:	4640      	mov	r0, r8
 8010a76:	f7ff fa6b 	bl	800ff50 <_free_r>
 8010a7a:	e7e1      	b.n	8010a40 <_realloc_r+0x1e>
 8010a7c:	4635      	mov	r5, r6
 8010a7e:	e7df      	b.n	8010a40 <_realloc_r+0x1e>

08010a80 <__swbuf_r>:
 8010a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a82:	460e      	mov	r6, r1
 8010a84:	4614      	mov	r4, r2
 8010a86:	4605      	mov	r5, r0
 8010a88:	b118      	cbz	r0, 8010a92 <__swbuf_r+0x12>
 8010a8a:	6a03      	ldr	r3, [r0, #32]
 8010a8c:	b90b      	cbnz	r3, 8010a92 <__swbuf_r+0x12>
 8010a8e:	f7ff f8d9 	bl	800fc44 <__sinit>
 8010a92:	69a3      	ldr	r3, [r4, #24]
 8010a94:	60a3      	str	r3, [r4, #8]
 8010a96:	89a3      	ldrh	r3, [r4, #12]
 8010a98:	071a      	lsls	r2, r3, #28
 8010a9a:	d525      	bpl.n	8010ae8 <__swbuf_r+0x68>
 8010a9c:	6923      	ldr	r3, [r4, #16]
 8010a9e:	b31b      	cbz	r3, 8010ae8 <__swbuf_r+0x68>
 8010aa0:	6823      	ldr	r3, [r4, #0]
 8010aa2:	6922      	ldr	r2, [r4, #16]
 8010aa4:	1a98      	subs	r0, r3, r2
 8010aa6:	6963      	ldr	r3, [r4, #20]
 8010aa8:	b2f6      	uxtb	r6, r6
 8010aaa:	4283      	cmp	r3, r0
 8010aac:	4637      	mov	r7, r6
 8010aae:	dc04      	bgt.n	8010aba <__swbuf_r+0x3a>
 8010ab0:	4621      	mov	r1, r4
 8010ab2:	4628      	mov	r0, r5
 8010ab4:	f7ff ff4a 	bl	801094c <_fflush_r>
 8010ab8:	b9e0      	cbnz	r0, 8010af4 <__swbuf_r+0x74>
 8010aba:	68a3      	ldr	r3, [r4, #8]
 8010abc:	3b01      	subs	r3, #1
 8010abe:	60a3      	str	r3, [r4, #8]
 8010ac0:	6823      	ldr	r3, [r4, #0]
 8010ac2:	1c5a      	adds	r2, r3, #1
 8010ac4:	6022      	str	r2, [r4, #0]
 8010ac6:	701e      	strb	r6, [r3, #0]
 8010ac8:	6962      	ldr	r2, [r4, #20]
 8010aca:	1c43      	adds	r3, r0, #1
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d004      	beq.n	8010ada <__swbuf_r+0x5a>
 8010ad0:	89a3      	ldrh	r3, [r4, #12]
 8010ad2:	07db      	lsls	r3, r3, #31
 8010ad4:	d506      	bpl.n	8010ae4 <__swbuf_r+0x64>
 8010ad6:	2e0a      	cmp	r6, #10
 8010ad8:	d104      	bne.n	8010ae4 <__swbuf_r+0x64>
 8010ada:	4621      	mov	r1, r4
 8010adc:	4628      	mov	r0, r5
 8010ade:	f7ff ff35 	bl	801094c <_fflush_r>
 8010ae2:	b938      	cbnz	r0, 8010af4 <__swbuf_r+0x74>
 8010ae4:	4638      	mov	r0, r7
 8010ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ae8:	4621      	mov	r1, r4
 8010aea:	4628      	mov	r0, r5
 8010aec:	f000 f806 	bl	8010afc <__swsetup_r>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	d0d5      	beq.n	8010aa0 <__swbuf_r+0x20>
 8010af4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010af8:	e7f4      	b.n	8010ae4 <__swbuf_r+0x64>
	...

08010afc <__swsetup_r>:
 8010afc:	b538      	push	{r3, r4, r5, lr}
 8010afe:	4b2a      	ldr	r3, [pc, #168]	; (8010ba8 <__swsetup_r+0xac>)
 8010b00:	4605      	mov	r5, r0
 8010b02:	6818      	ldr	r0, [r3, #0]
 8010b04:	460c      	mov	r4, r1
 8010b06:	b118      	cbz	r0, 8010b10 <__swsetup_r+0x14>
 8010b08:	6a03      	ldr	r3, [r0, #32]
 8010b0a:	b90b      	cbnz	r3, 8010b10 <__swsetup_r+0x14>
 8010b0c:	f7ff f89a 	bl	800fc44 <__sinit>
 8010b10:	89a3      	ldrh	r3, [r4, #12]
 8010b12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b16:	0718      	lsls	r0, r3, #28
 8010b18:	d422      	bmi.n	8010b60 <__swsetup_r+0x64>
 8010b1a:	06d9      	lsls	r1, r3, #27
 8010b1c:	d407      	bmi.n	8010b2e <__swsetup_r+0x32>
 8010b1e:	2309      	movs	r3, #9
 8010b20:	602b      	str	r3, [r5, #0]
 8010b22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010b26:	81a3      	strh	r3, [r4, #12]
 8010b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b2c:	e034      	b.n	8010b98 <__swsetup_r+0x9c>
 8010b2e:	0758      	lsls	r0, r3, #29
 8010b30:	d512      	bpl.n	8010b58 <__swsetup_r+0x5c>
 8010b32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b34:	b141      	cbz	r1, 8010b48 <__swsetup_r+0x4c>
 8010b36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b3a:	4299      	cmp	r1, r3
 8010b3c:	d002      	beq.n	8010b44 <__swsetup_r+0x48>
 8010b3e:	4628      	mov	r0, r5
 8010b40:	f7ff fa06 	bl	800ff50 <_free_r>
 8010b44:	2300      	movs	r3, #0
 8010b46:	6363      	str	r3, [r4, #52]	; 0x34
 8010b48:	89a3      	ldrh	r3, [r4, #12]
 8010b4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010b4e:	81a3      	strh	r3, [r4, #12]
 8010b50:	2300      	movs	r3, #0
 8010b52:	6063      	str	r3, [r4, #4]
 8010b54:	6923      	ldr	r3, [r4, #16]
 8010b56:	6023      	str	r3, [r4, #0]
 8010b58:	89a3      	ldrh	r3, [r4, #12]
 8010b5a:	f043 0308 	orr.w	r3, r3, #8
 8010b5e:	81a3      	strh	r3, [r4, #12]
 8010b60:	6923      	ldr	r3, [r4, #16]
 8010b62:	b94b      	cbnz	r3, 8010b78 <__swsetup_r+0x7c>
 8010b64:	89a3      	ldrh	r3, [r4, #12]
 8010b66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b6e:	d003      	beq.n	8010b78 <__swsetup_r+0x7c>
 8010b70:	4621      	mov	r1, r4
 8010b72:	4628      	mov	r0, r5
 8010b74:	f000 f840 	bl	8010bf8 <__smakebuf_r>
 8010b78:	89a0      	ldrh	r0, [r4, #12]
 8010b7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b7e:	f010 0301 	ands.w	r3, r0, #1
 8010b82:	d00a      	beq.n	8010b9a <__swsetup_r+0x9e>
 8010b84:	2300      	movs	r3, #0
 8010b86:	60a3      	str	r3, [r4, #8]
 8010b88:	6963      	ldr	r3, [r4, #20]
 8010b8a:	425b      	negs	r3, r3
 8010b8c:	61a3      	str	r3, [r4, #24]
 8010b8e:	6923      	ldr	r3, [r4, #16]
 8010b90:	b943      	cbnz	r3, 8010ba4 <__swsetup_r+0xa8>
 8010b92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010b96:	d1c4      	bne.n	8010b22 <__swsetup_r+0x26>
 8010b98:	bd38      	pop	{r3, r4, r5, pc}
 8010b9a:	0781      	lsls	r1, r0, #30
 8010b9c:	bf58      	it	pl
 8010b9e:	6963      	ldrpl	r3, [r4, #20]
 8010ba0:	60a3      	str	r3, [r4, #8]
 8010ba2:	e7f4      	b.n	8010b8e <__swsetup_r+0x92>
 8010ba4:	2000      	movs	r0, #0
 8010ba6:	e7f7      	b.n	8010b98 <__swsetup_r+0x9c>
 8010ba8:	20000164 	.word	0x20000164

08010bac <__swhatbuf_r>:
 8010bac:	b570      	push	{r4, r5, r6, lr}
 8010bae:	460c      	mov	r4, r1
 8010bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bb4:	2900      	cmp	r1, #0
 8010bb6:	b096      	sub	sp, #88	; 0x58
 8010bb8:	4615      	mov	r5, r2
 8010bba:	461e      	mov	r6, r3
 8010bbc:	da0d      	bge.n	8010bda <__swhatbuf_r+0x2e>
 8010bbe:	89a3      	ldrh	r3, [r4, #12]
 8010bc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010bc4:	f04f 0100 	mov.w	r1, #0
 8010bc8:	bf0c      	ite	eq
 8010bca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010bce:	2340      	movne	r3, #64	; 0x40
 8010bd0:	2000      	movs	r0, #0
 8010bd2:	6031      	str	r1, [r6, #0]
 8010bd4:	602b      	str	r3, [r5, #0]
 8010bd6:	b016      	add	sp, #88	; 0x58
 8010bd8:	bd70      	pop	{r4, r5, r6, pc}
 8010bda:	466a      	mov	r2, sp
 8010bdc:	f000 f872 	bl	8010cc4 <_fstat_r>
 8010be0:	2800      	cmp	r0, #0
 8010be2:	dbec      	blt.n	8010bbe <__swhatbuf_r+0x12>
 8010be4:	9901      	ldr	r1, [sp, #4]
 8010be6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010bea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010bee:	4259      	negs	r1, r3
 8010bf0:	4159      	adcs	r1, r3
 8010bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bf6:	e7eb      	b.n	8010bd0 <__swhatbuf_r+0x24>

08010bf8 <__smakebuf_r>:
 8010bf8:	898b      	ldrh	r3, [r1, #12]
 8010bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010bfc:	079d      	lsls	r5, r3, #30
 8010bfe:	4606      	mov	r6, r0
 8010c00:	460c      	mov	r4, r1
 8010c02:	d507      	bpl.n	8010c14 <__smakebuf_r+0x1c>
 8010c04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c08:	6023      	str	r3, [r4, #0]
 8010c0a:	6123      	str	r3, [r4, #16]
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	6163      	str	r3, [r4, #20]
 8010c10:	b002      	add	sp, #8
 8010c12:	bd70      	pop	{r4, r5, r6, pc}
 8010c14:	ab01      	add	r3, sp, #4
 8010c16:	466a      	mov	r2, sp
 8010c18:	f7ff ffc8 	bl	8010bac <__swhatbuf_r>
 8010c1c:	9900      	ldr	r1, [sp, #0]
 8010c1e:	4605      	mov	r5, r0
 8010c20:	4630      	mov	r0, r6
 8010c22:	f7fe fec3 	bl	800f9ac <_malloc_r>
 8010c26:	b948      	cbnz	r0, 8010c3c <__smakebuf_r+0x44>
 8010c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c2c:	059a      	lsls	r2, r3, #22
 8010c2e:	d4ef      	bmi.n	8010c10 <__smakebuf_r+0x18>
 8010c30:	f023 0303 	bic.w	r3, r3, #3
 8010c34:	f043 0302 	orr.w	r3, r3, #2
 8010c38:	81a3      	strh	r3, [r4, #12]
 8010c3a:	e7e3      	b.n	8010c04 <__smakebuf_r+0xc>
 8010c3c:	89a3      	ldrh	r3, [r4, #12]
 8010c3e:	6020      	str	r0, [r4, #0]
 8010c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c44:	81a3      	strh	r3, [r4, #12]
 8010c46:	9b00      	ldr	r3, [sp, #0]
 8010c48:	6163      	str	r3, [r4, #20]
 8010c4a:	9b01      	ldr	r3, [sp, #4]
 8010c4c:	6120      	str	r0, [r4, #16]
 8010c4e:	b15b      	cbz	r3, 8010c68 <__smakebuf_r+0x70>
 8010c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c54:	4630      	mov	r0, r6
 8010c56:	f000 f847 	bl	8010ce8 <_isatty_r>
 8010c5a:	b128      	cbz	r0, 8010c68 <__smakebuf_r+0x70>
 8010c5c:	89a3      	ldrh	r3, [r4, #12]
 8010c5e:	f023 0303 	bic.w	r3, r3, #3
 8010c62:	f043 0301 	orr.w	r3, r3, #1
 8010c66:	81a3      	strh	r3, [r4, #12]
 8010c68:	89a3      	ldrh	r3, [r4, #12]
 8010c6a:	431d      	orrs	r5, r3
 8010c6c:	81a5      	strh	r5, [r4, #12]
 8010c6e:	e7cf      	b.n	8010c10 <__smakebuf_r+0x18>

08010c70 <memmove>:
 8010c70:	4288      	cmp	r0, r1
 8010c72:	b510      	push	{r4, lr}
 8010c74:	eb01 0402 	add.w	r4, r1, r2
 8010c78:	d902      	bls.n	8010c80 <memmove+0x10>
 8010c7a:	4284      	cmp	r4, r0
 8010c7c:	4623      	mov	r3, r4
 8010c7e:	d807      	bhi.n	8010c90 <memmove+0x20>
 8010c80:	1e43      	subs	r3, r0, #1
 8010c82:	42a1      	cmp	r1, r4
 8010c84:	d008      	beq.n	8010c98 <memmove+0x28>
 8010c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c8e:	e7f8      	b.n	8010c82 <memmove+0x12>
 8010c90:	4402      	add	r2, r0
 8010c92:	4601      	mov	r1, r0
 8010c94:	428a      	cmp	r2, r1
 8010c96:	d100      	bne.n	8010c9a <memmove+0x2a>
 8010c98:	bd10      	pop	{r4, pc}
 8010c9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ca2:	e7f7      	b.n	8010c94 <memmove+0x24>

08010ca4 <_close_r>:
 8010ca4:	b538      	push	{r3, r4, r5, lr}
 8010ca6:	4d06      	ldr	r5, [pc, #24]	; (8010cc0 <_close_r+0x1c>)
 8010ca8:	2300      	movs	r3, #0
 8010caa:	4604      	mov	r4, r0
 8010cac:	4608      	mov	r0, r1
 8010cae:	602b      	str	r3, [r5, #0]
 8010cb0:	f7f0 fc4b 	bl	800154a <_close>
 8010cb4:	1c43      	adds	r3, r0, #1
 8010cb6:	d102      	bne.n	8010cbe <_close_r+0x1a>
 8010cb8:	682b      	ldr	r3, [r5, #0]
 8010cba:	b103      	cbz	r3, 8010cbe <_close_r+0x1a>
 8010cbc:	6023      	str	r3, [r4, #0]
 8010cbe:	bd38      	pop	{r3, r4, r5, pc}
 8010cc0:	20005018 	.word	0x20005018

08010cc4 <_fstat_r>:
 8010cc4:	b538      	push	{r3, r4, r5, lr}
 8010cc6:	4d07      	ldr	r5, [pc, #28]	; (8010ce4 <_fstat_r+0x20>)
 8010cc8:	2300      	movs	r3, #0
 8010cca:	4604      	mov	r4, r0
 8010ccc:	4608      	mov	r0, r1
 8010cce:	4611      	mov	r1, r2
 8010cd0:	602b      	str	r3, [r5, #0]
 8010cd2:	f7f0 fc46 	bl	8001562 <_fstat>
 8010cd6:	1c43      	adds	r3, r0, #1
 8010cd8:	d102      	bne.n	8010ce0 <_fstat_r+0x1c>
 8010cda:	682b      	ldr	r3, [r5, #0]
 8010cdc:	b103      	cbz	r3, 8010ce0 <_fstat_r+0x1c>
 8010cde:	6023      	str	r3, [r4, #0]
 8010ce0:	bd38      	pop	{r3, r4, r5, pc}
 8010ce2:	bf00      	nop
 8010ce4:	20005018 	.word	0x20005018

08010ce8 <_isatty_r>:
 8010ce8:	b538      	push	{r3, r4, r5, lr}
 8010cea:	4d06      	ldr	r5, [pc, #24]	; (8010d04 <_isatty_r+0x1c>)
 8010cec:	2300      	movs	r3, #0
 8010cee:	4604      	mov	r4, r0
 8010cf0:	4608      	mov	r0, r1
 8010cf2:	602b      	str	r3, [r5, #0]
 8010cf4:	f7f0 fc45 	bl	8001582 <_isatty>
 8010cf8:	1c43      	adds	r3, r0, #1
 8010cfa:	d102      	bne.n	8010d02 <_isatty_r+0x1a>
 8010cfc:	682b      	ldr	r3, [r5, #0]
 8010cfe:	b103      	cbz	r3, 8010d02 <_isatty_r+0x1a>
 8010d00:	6023      	str	r3, [r4, #0]
 8010d02:	bd38      	pop	{r3, r4, r5, pc}
 8010d04:	20005018 	.word	0x20005018

08010d08 <_lseek_r>:
 8010d08:	b538      	push	{r3, r4, r5, lr}
 8010d0a:	4d07      	ldr	r5, [pc, #28]	; (8010d28 <_lseek_r+0x20>)
 8010d0c:	4604      	mov	r4, r0
 8010d0e:	4608      	mov	r0, r1
 8010d10:	4611      	mov	r1, r2
 8010d12:	2200      	movs	r2, #0
 8010d14:	602a      	str	r2, [r5, #0]
 8010d16:	461a      	mov	r2, r3
 8010d18:	f7f0 fc3e 	bl	8001598 <_lseek>
 8010d1c:	1c43      	adds	r3, r0, #1
 8010d1e:	d102      	bne.n	8010d26 <_lseek_r+0x1e>
 8010d20:	682b      	ldr	r3, [r5, #0]
 8010d22:	b103      	cbz	r3, 8010d26 <_lseek_r+0x1e>
 8010d24:	6023      	str	r3, [r4, #0]
 8010d26:	bd38      	pop	{r3, r4, r5, pc}
 8010d28:	20005018 	.word	0x20005018

08010d2c <_read_r>:
 8010d2c:	b538      	push	{r3, r4, r5, lr}
 8010d2e:	4d07      	ldr	r5, [pc, #28]	; (8010d4c <_read_r+0x20>)
 8010d30:	4604      	mov	r4, r0
 8010d32:	4608      	mov	r0, r1
 8010d34:	4611      	mov	r1, r2
 8010d36:	2200      	movs	r2, #0
 8010d38:	602a      	str	r2, [r5, #0]
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	f7f0 fbcc 	bl	80014d8 <_read>
 8010d40:	1c43      	adds	r3, r0, #1
 8010d42:	d102      	bne.n	8010d4a <_read_r+0x1e>
 8010d44:	682b      	ldr	r3, [r5, #0]
 8010d46:	b103      	cbz	r3, 8010d4a <_read_r+0x1e>
 8010d48:	6023      	str	r3, [r4, #0]
 8010d4a:	bd38      	pop	{r3, r4, r5, pc}
 8010d4c:	20005018 	.word	0x20005018

08010d50 <_write_r>:
 8010d50:	b538      	push	{r3, r4, r5, lr}
 8010d52:	4d07      	ldr	r5, [pc, #28]	; (8010d70 <_write_r+0x20>)
 8010d54:	4604      	mov	r4, r0
 8010d56:	4608      	mov	r0, r1
 8010d58:	4611      	mov	r1, r2
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	602a      	str	r2, [r5, #0]
 8010d5e:	461a      	mov	r2, r3
 8010d60:	f7f0 fbd7 	bl	8001512 <_write>
 8010d64:	1c43      	adds	r3, r0, #1
 8010d66:	d102      	bne.n	8010d6e <_write_r+0x1e>
 8010d68:	682b      	ldr	r3, [r5, #0]
 8010d6a:	b103      	cbz	r3, 8010d6e <_write_r+0x1e>
 8010d6c:	6023      	str	r3, [r4, #0]
 8010d6e:	bd38      	pop	{r3, r4, r5, pc}
 8010d70:	20005018 	.word	0x20005018

08010d74 <memcpy>:
 8010d74:	440a      	add	r2, r1
 8010d76:	4291      	cmp	r1, r2
 8010d78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010d7c:	d100      	bne.n	8010d80 <memcpy+0xc>
 8010d7e:	4770      	bx	lr
 8010d80:	b510      	push	{r4, lr}
 8010d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d8a:	4291      	cmp	r1, r2
 8010d8c:	d1f9      	bne.n	8010d82 <memcpy+0xe>
 8010d8e:	bd10      	pop	{r4, pc}

08010d90 <_malloc_usable_size_r>:
 8010d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d94:	1f18      	subs	r0, r3, #4
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	bfbc      	itt	lt
 8010d9a:	580b      	ldrlt	r3, [r1, r0]
 8010d9c:	18c0      	addlt	r0, r0, r3
 8010d9e:	4770      	bx	lr

08010da0 <_init>:
 8010da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010da2:	bf00      	nop
 8010da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010da6:	bc08      	pop	{r3}
 8010da8:	469e      	mov	lr, r3
 8010daa:	4770      	bx	lr

08010dac <_fini>:
 8010dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dae:	bf00      	nop
 8010db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010db2:	bc08      	pop	{r3}
 8010db4:	469e      	mov	lr, r3
 8010db6:	4770      	bx	lr
