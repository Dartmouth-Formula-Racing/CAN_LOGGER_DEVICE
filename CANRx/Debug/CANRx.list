
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f840  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  0800fa40  0800fa40  0001fa40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcfc  0800fcfc  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcfc  0800fcfc  0001fcfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd04  0800fd04  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd04  0800fd04  0001fd04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd08  0800fd08  0001fd08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800fd0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004254  20000168  0800fe74  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043bc  0800fe74  000243bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020196  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e89e  00000000  00000000  000201d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a6f  00000000  00000000  0003ea77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  000434e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001213  00000000  00000000  00044cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dd11  00000000  00000000  00045ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000206f5  00000000  00000000  00073be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001007c5  00000000  00000000  000942d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ba4  00000000  00000000  00194aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0019b644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000168 	.word	0x20000168
 800021c:	00000000 	.word	0x00000000
 8000220:	0800fa28 	.word	0x0800fa28

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000016c 	.word	0x2000016c
 800023c:	0800fa28 	.word	0x0800fa28

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 ff1b 	bl	800142a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f906 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 fa1e 	bl	8000a38 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 f9f6 	bl	80009ec <MX_DMA_Init>
  MX_CAN1_Init();
 8000600:	f000 f968 	bl	80008d4 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 8000604:	f000 f99c 	bl	8000940 <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 8000608:	f000 f9c0 	bl	800098c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800060c:	f008 fefe 	bl	800940c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000610:	f00d faf6 	bl	800dc00 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061a:	4860      	ldr	r0, [pc, #384]	; (800079c <main+0x1b0>)
 800061c:	f002 fb96 	bl	8002d4c <HAL_GPIO_WritePin>

	HAL_CAN_Start(&hcan1);
 8000620:	485f      	ldr	r0, [pc, #380]	; (80007a0 <main+0x1b4>)
 8000622:	f001 f96b 	bl	80018fc <HAL_CAN_Start>
	CAN_Filter_Config();
 8000626:	f000 fb55 	bl	8000cd4 <CAN_Filter_Config>

	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 1) != FR_OK) {
 800062a:	2201      	movs	r2, #1
 800062c:	495d      	ldr	r1, [pc, #372]	; (80007a4 <main+0x1b8>)
 800062e:	485e      	ldr	r0, [pc, #376]	; (80007a8 <main+0x1bc>)
 8000630:	f00c fe68 	bl	800d304 <f_mount>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d004      	beq.n	8000644 <main+0x58>
		printf("\r\nMounting Failed!\r\n");
 800063a:	485c      	ldr	r0, [pc, #368]	; (80007ac <main+0x1c0>)
 800063c:	f00e fa7e 	bl	800eb3c <puts>
		Error_Handler();
 8000640:	f000 fbca 	bl	8000dd8 <Error_Handler>
	}
	printf("Mounting succeeded...\r\n");
 8000644:	485a      	ldr	r0, [pc, #360]	; (80007b0 <main+0x1c4>)
 8000646:	f00e fa79 	bl	800eb3c <puts>

	//Open file for writing (Create)
	if (f_open(&SDFile, "CAN.log", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 800064a:	220a      	movs	r2, #10
 800064c:	4959      	ldr	r1, [pc, #356]	; (80007b4 <main+0x1c8>)
 800064e:	485a      	ldr	r0, [pc, #360]	; (80007b8 <main+0x1cc>)
 8000650:	f00c fe9e 	bl	800d390 <f_open>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d004      	beq.n	8000664 <main+0x78>
		printf("\r\nOpen Failed!\r\n");
 800065a:	4858      	ldr	r0, [pc, #352]	; (80007bc <main+0x1d0>)
 800065c:	f00e fa6e 	bl	800eb3c <puts>
		Error_Handler();
 8000660:	f000 fbba 	bl	8000dd8 <Error_Handler>
	}
	printf("Starting new log...\r\n");
 8000664:	4856      	ldr	r0, [pc, #344]	; (80007c0 <main+0x1d4>)
 8000666:	f00e fa69 	bl	800eb3c <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	buffer1[0] = '\00';
 800066a:	4b56      	ldr	r3, [pc, #344]	; (80007c4 <main+0x1d8>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
	buffer2[0] = '\00';
 8000670:	4b55      	ldr	r3, [pc, #340]	; (80007c8 <main+0x1dc>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
	double_buffer_fill_level[0] = 0;
 8000676:	4b55      	ldr	r3, [pc, #340]	; (80007cc <main+0x1e0>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	double_buffer_fill_level[1] = 0;
 800067c:	4b53      	ldr	r3, [pc, #332]	; (80007cc <main+0x1e0>)
 800067e:	2200      	movs	r2, #0
 8000680:	705a      	strb	r2, [r3, #1]
	filling_buffer = 0;
 8000682:	4b53      	ldr	r3, [pc, #332]	; (80007d0 <main+0x1e4>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]

	while (buffer_emptyings < MAX_BUFFER_EMPTYINGS) {
 8000688:	e06a      	b.n	8000760 <main+0x174>
		while (!buffer_filled);
 800068a:	bf00      	nop
 800068c:	4b51      	ldr	r3, [pc, #324]	; (80007d4 <main+0x1e8>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d0fb      	beq.n	800068c <main+0xa0>



		res = f_write(&SDFile, filling_buffer ? buffer1 : buffer2, ENCODED_CAN_SIZE_BYTES*CAN_MESSAGES_TO_BUFFER, (void*) &byteswritten);
 8000694:	4b4e      	ldr	r3, [pc, #312]	; (80007d0 <main+0x1e4>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <main+0xb4>
 800069c:	4949      	ldr	r1, [pc, #292]	; (80007c4 <main+0x1d8>)
 800069e:	e000      	b.n	80006a2 <main+0xb6>
 80006a0:	4949      	ldr	r1, [pc, #292]	; (80007c8 <main+0x1dc>)
 80006a2:	4b4d      	ldr	r3, [pc, #308]	; (80007d8 <main+0x1ec>)
 80006a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006a8:	4843      	ldr	r0, [pc, #268]	; (80007b8 <main+0x1cc>)
 80006aa:	f00d f82f 	bl	800d70c <f_write>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b4a      	ldr	r3, [pc, #296]	; (80007dc <main+0x1f0>)
 80006b4:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(filling_buffer ? buffer1 : buffer2, ENCODED_CAN_SIZE_BYTES*CAN_MESSAGES_TO_BUFFER);
 80006b6:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <main+0x1e4>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <main+0xd6>
 80006be:	4b41      	ldr	r3, [pc, #260]	; (80007c4 <main+0x1d8>)
 80006c0:	e000      	b.n	80006c4 <main+0xd8>
 80006c2:	4b41      	ldr	r3, [pc, #260]	; (80007c8 <main+0x1dc>)
 80006c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c8:	4618      	mov	r0, r3
 80006ca:	f00d fb57 	bl	800dd7c <CDC_Transmit_FS>

		if ((byteswritten == 0) || (res != FR_OK)) {
 80006ce:	4b42      	ldr	r3, [pc, #264]	; (80007d8 <main+0x1ec>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d003      	beq.n	80006de <main+0xf2>
 80006d6:	4b41      	ldr	r3, [pc, #260]	; (80007dc <main+0x1f0>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d004      	beq.n	80006e8 <main+0xfc>
			printf("\r\nWriting Failed!\r\n");
 80006de:	4840      	ldr	r0, [pc, #256]	; (80007e0 <main+0x1f4>)
 80006e0:	f00e fa2c 	bl	800eb3c <puts>
			Error_Handler();
 80006e4:	f000 fb78 	bl	8000dd8 <Error_Handler>
		}

		buffer_emptyings++;
 80006e8:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <main+0x1f8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a3d      	ldr	r2, [pc, #244]	; (80007e4 <main+0x1f8>)
 80006f0:	6013      	str	r3, [r2, #0]
		printf("emptied buffer %d\n\r", !filling_buffer);
 80006f2:	4b37      	ldr	r3, [pc, #220]	; (80007d0 <main+0x1e4>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bf0c      	ite	eq
 80006fa:	2301      	moveq	r3, #1
 80006fc:	2300      	movne	r3, #0
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4619      	mov	r1, r3
 8000702:	4839      	ldr	r0, [pc, #228]	; (80007e8 <main+0x1fc>)
 8000704:	f00e f9b4 	bl	800ea70 <iprintf>
		printf("buffers emptied: %d\n\r", buffer_emptyings);
 8000708:	4b36      	ldr	r3, [pc, #216]	; (80007e4 <main+0x1f8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	4837      	ldr	r0, [pc, #220]	; (80007ec <main+0x200>)
 8000710:	f00e f9ae 	bl	800ea70 <iprintf>
		printf("sizeof: %d\n\r", byteswritten);
 8000714:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <main+0x1ec>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	4835      	ldr	r0, [pc, #212]	; (80007f0 <main+0x204>)
 800071c:	f00e f9a8 	bl	800ea70 <iprintf>

		total_size += byteswritten;
 8000720:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <main+0x208>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <main+0x1ec>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4413      	add	r3, r2
 800072a:	4a32      	ldr	r2, [pc, #200]	; (80007f4 <main+0x208>)
 800072c:	6013      	str	r3, [r2, #0]
		if (filling_buffer) {
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <main+0x1e4>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d003      	beq.n	800073e <main+0x152>
			buffer1[0] = '\00';
 8000736:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <main+0x1d8>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
 800073c:	e002      	b.n	8000744 <main+0x158>
		}
		else {
			buffer2[0] = '\00';
 800073e:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <main+0x1dc>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
		}
		double_buffer_fill_level[!filling_buffer] = 0;
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <main+0x1e4>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	bf0c      	ite	eq
 800074c:	2301      	moveq	r3, #1
 800074e:	2300      	movne	r3, #0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	461a      	mov	r2, r3
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <main+0x1e0>)
 8000756:	2100      	movs	r1, #0
 8000758:	5499      	strb	r1, [r3, r2]
		buffer_filled = 0;
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <main+0x1e8>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
	while (buffer_emptyings < MAX_BUFFER_EMPTYINGS) {
 8000760:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <main+0x1f8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b7f      	cmp	r3, #127	; 0x7f
 8000766:	d990      	bls.n	800068a <main+0x9e>
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf("%d Messages received!", MAX_BUFFER_EMPTYINGS * CAN_MESSAGES_TO_BUFFER);
 8000768:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800076c:	4822      	ldr	r0, [pc, #136]	; (80007f8 <main+0x20c>)
 800076e:	f00e f97f 	bl	800ea70 <iprintf>
	printf("total sizeof: %d\n\r", total_size);
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <main+0x208>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4619      	mov	r1, r3
 8000778:	4820      	ldr	r0, [pc, #128]	; (80007fc <main+0x210>)
 800077a:	f00e f979 	bl	800ea70 <iprintf>

	printf("\r\nUnmounting!\r\n");
 800077e:	4820      	ldr	r0, [pc, #128]	; (8000800 <main+0x214>)
 8000780:	f00e f9dc 	bl	800eb3c <puts>
	f_close(&SDFile);
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <main+0x1cc>)
 8000786:	f00d f9b4 	bl	800daf2 <f_close>
	f_mount(&SDFatFS, (TCHAR const*) NULL, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <main+0x1bc>)
 8000790:	f00c fdb8 	bl	800d304 <f_mount>
 8000794:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000796:	4618      	mov	r0, r3
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40021400 	.word	0x40021400
 80007a0:	20000184 	.word	0x20000184
 80007a4:	200023e8 	.word	0x200023e8
 80007a8:	200023ec 	.word	0x200023ec
 80007ac:	0800fa40 	.word	0x0800fa40
 80007b0:	0800fa54 	.word	0x0800fa54
 80007b4:	0800fa6c 	.word	0x0800fa6c
 80007b8:	2000261c 	.word	0x2000261c
 80007bc:	0800fa74 	.word	0x0800fa74
 80007c0:	0800fa84 	.word	0x0800fa84
 80007c4:	200003c4 	.word	0x200003c4
 80007c8:	200013c8 	.word	0x200013c8
 80007cc:	200023cc 	.word	0x200023cc
 80007d0:	200023ce 	.word	0x200023ce
 80007d4:	200023d4 	.word	0x200023d4
 80007d8:	2000039c 	.word	0x2000039c
 80007dc:	20000378 	.word	0x20000378
 80007e0:	0800fa9c 	.word	0x0800fa9c
 80007e4:	200023d0 	.word	0x200023d0
 80007e8:	0800fab0 	.word	0x0800fab0
 80007ec:	0800fac4 	.word	0x0800fac4
 80007f0:	0800fadc 	.word	0x0800fadc
 80007f4:	200023d8 	.word	0x200023d8
 80007f8:	0800faec 	.word	0x0800faec
 80007fc:	0800fb04 	.word	0x0800fb04
 8000800:	0800fb18 	.word	0x0800fb18

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	; 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2234      	movs	r2, #52	; 0x34
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f00e f99a 	bl	800eb4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <SystemClock_Config+0xc8>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a27      	ldr	r2, [pc, #156]	; (80008cc <SystemClock_Config+0xc8>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <SystemClock_Config+0xc8>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000840:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <SystemClock_Config+0xcc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000848:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <SystemClock_Config+0xcc>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <SystemClock_Config+0xcc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000864:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000870:	2304      	movs	r3, #4
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000874:	2360      	movs	r3, #96	; 0x60
 8000876:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000878:	2304      	movs	r3, #4
 800087a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000880:	2302      	movs	r3, #2
 8000882:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4618      	mov	r0, r3
 800088a:	f003 fd31 	bl	80042f0 <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000894:	f000 faa0 	bl	8000dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	230f      	movs	r3, #15
 800089a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089c:	2302      	movs	r3, #2
 800089e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2101      	movs	r1, #1
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 ffc9 	bl	800484c <HAL_RCC_ClockConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008c0:	f000 fa8a 	bl	8000dd8 <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	3750      	adds	r7, #80	; 0x50
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_CAN1_Init+0x64>)
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <MX_CAN1_Init+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_CAN1_Init+0x64>)
 80008e0:	2203      	movs	r2, #3
 80008e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_CAN1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_CAN1_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_CAN1_Init+0x64>)
 80008f2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80008f6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_CAN1_Init+0x64>)
 80008fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008fe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <MX_CAN1_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_CAN1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_CAN1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_CAN1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MX_CAN1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_CAN1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_CAN1_Init+0x64>)
 8000926:	f000 fe01 	bl	800152c <HAL_CAN_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000930:	f000 fa52 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000184 	.word	0x20000184
 800093c:	40006400 	.word	0x40006400

08000940 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_SDMMC1_SD_Init+0x44>)
 8000946:	4a10      	ldr	r2, [pc, #64]	; (8000988 <MX_SDMMC1_SD_Init+0x48>)
 8000948:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_SDMMC1_SD_Init+0x44>)
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_SDMMC1_SD_Init+0x44>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_SDMMC1_SD_Init+0x44>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_SDMMC1_SD_Init+0x44>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_SDMMC1_SD_Init+0x44>)
 8000964:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000968:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_SDMMC1_SD_Init+0x44>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_SDMMC1_SD_Init+0x44>)
 8000972:	f004 fdb9 	bl	80054e8 <HAL_SD_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_SDMMC1_SD_Init+0x40>
		Error_Handler();
 800097c:	f000 fa2c 	bl	8000dd8 <Error_Handler>
	}
  /* USER CODE END SDMMC1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200001ac 	.word	0x200001ac
 8000988:	40012c00 	.word	0x40012c00

0800098c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 8000992:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <MX_USART3_UART_Init+0x5c>)
 8000994:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009d0:	f005 feb2 	bl	8006738 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009da:	f000 f9fd 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200002f0 	.word	0x200002f0
 80009e8:	40004800 	.word	0x40004800

080009ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_DMA_Init+0x48>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <MX_DMA_Init+0x48>)
 80009f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <MX_DMA_Init+0x48>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	203b      	movs	r0, #59	; 0x3b
 8000a10:	f001 fbfb 	bl	800220a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a14:	203b      	movs	r0, #59	; 0x3b
 8000a16:	f001 fc14 	bl	8002242 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2045      	movs	r0, #69	; 0x45
 8000a20:	f001 fbf3 	bl	800220a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a24:	2045      	movs	r0, #69	; 0x45
 8000a26:	f001 fc0c 	bl	8002242 <HAL_NVIC_EnableIRQ>

}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	; 0x30
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	4b56      	ldr	r3, [pc, #344]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a55      	ldr	r2, [pc, #340]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b53      	ldr	r3, [pc, #332]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	61bb      	str	r3, [r7, #24]
 8000a64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	4b50      	ldr	r3, [pc, #320]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a4f      	ldr	r2, [pc, #316]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b4d      	ldr	r3, [pc, #308]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a7e:	4b4a      	ldr	r3, [pc, #296]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a49      	ldr	r2, [pc, #292]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000a84:	f043 0320 	orr.w	r3, r3, #32
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b47      	ldr	r3, [pc, #284]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0320 	and.w	r3, r3, #32
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a96:	4b44      	ldr	r3, [pc, #272]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a43      	ldr	r2, [pc, #268]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b41      	ldr	r3, [pc, #260]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aae:	4b3e      	ldr	r3, [pc, #248]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a3d      	ldr	r2, [pc, #244]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a37      	ldr	r2, [pc, #220]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b32      	ldr	r3, [pc, #200]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a31      	ldr	r2, [pc, #196]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <MX_GPIO_Init+0x170>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afc:	482b      	ldr	r0, [pc, #172]	; (8000bac <MX_GPIO_Init+0x174>)
 8000afe:	f002 f925 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2140      	movs	r1, #64	; 0x40
 8000b06:	482a      	ldr	r0, [pc, #168]	; (8000bb0 <MX_GPIO_Init+0x178>)
 8000b08:	f002 f920 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	4828      	ldr	r0, [pc, #160]	; (8000bb4 <MX_GPIO_Init+0x17c>)
 8000b12:	f002 f91b 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4822      	ldr	r0, [pc, #136]	; (8000bb8 <MX_GPIO_Init+0x180>)
 8000b2e:	f001 ff49 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Error_LED_Pin */
  GPIO_InitStruct.Pin = Error_LED_Pin;
 8000b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Error_LED_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4818      	ldr	r0, [pc, #96]	; (8000bac <MX_GPIO_Init+0x174>)
 8000b4c:	f001 ff3a 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin|USB_OverCurrent_Pin;
 8000b50:	2384      	movs	r3, #132	; 0x84
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <MX_GPIO_Init+0x178>)
 8000b64:	f001 ff2e 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b68:	2340      	movs	r3, #64	; 0x40
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_GPIO_Init+0x178>)
 8000b80:	f001 ff20 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <MX_GPIO_Init+0x17c>)
 8000b9c:	f001 ff12 	bl	80029c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba0:	bf00      	nop
 8000ba2:	3730      	adds	r7, #48	; 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40021400 	.word	0x40021400
 8000bb0:	40021800 	.word	0x40021800
 8000bb4:	40020400 	.word	0x40020400
 8000bb8:	40020800 	.word	0x40020800

08000bbc <Get_and_Append_CAN_Message_to_Buffer>:

/* USER CODE BEGIN 4 */
void Get_and_Append_CAN_Message_to_Buffer() {
 8000bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af06      	add	r7, sp, #24
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK) Error_Handler();
 8000bc2:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000bc4:	4a3a      	ldr	r2, [pc, #232]	; (8000cb0 <Get_and_Append_CAN_Message_to_Buffer+0xf4>)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	483a      	ldr	r0, [pc, #232]	; (8000cb4 <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 8000bca:	f000 fedb 	bl	8001984 <HAL_CAN_GetRxMessage>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <Get_and_Append_CAN_Message_to_Buffer+0x1c>
 8000bd4:	f000 f900 	bl	8000dd8 <Error_Handler>

	uint16_t data1 = (rcvd_msg[0] << 8) + rcvd_msg[1];
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	021b      	lsls	r3, r3, #8
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b32      	ldr	r3, [pc, #200]	; (8000cac <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000be4:	785b      	ldrb	r3, [r3, #1]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	4413      	add	r3, r2
 8000bea:	80fb      	strh	r3, [r7, #6]
	uint16_t data2 = (rcvd_msg[2] << 8) + rcvd_msg[3];
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000bee:	789b      	ldrb	r3, [r3, #2]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	021b      	lsls	r3, r3, #8
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000bf8:	78db      	ldrb	r3, [r3, #3]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	80bb      	strh	r3, [r7, #4]
	uint16_t data3 = (rcvd_msg[4] << 8) + rcvd_msg[5];
 8000c00:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000c02:	791b      	ldrb	r3, [r3, #4]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000c0c:	795b      	ldrb	r3, [r3, #5]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	4413      	add	r3, r2
 8000c12:	807b      	strh	r3, [r7, #2]
	uint16_t data4 = (rcvd_msg[6] << 8) + rcvd_msg[7];
 8000c14:	4b25      	ldr	r3, [pc, #148]	; (8000cac <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000c16:	799b      	ldrb	r3, [r3, #6]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	4b23      	ldr	r3, [pc, #140]	; (8000cac <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000c20:	79db      	ldrb	r3, [r3, #7]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4413      	add	r3, r2
 8000c26:	803b      	strh	r3, [r7, #0]

	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES+1, "(%d.0) X %08X#%04X%04X%04X%04X\n",
 8000c28:	f000 fc50 	bl	80014cc <HAL_GetTick>
 8000c2c:	4605      	mov	r5, r0
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <Get_and_Append_CAN_Message_to_Buffer+0xf4>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	88fa      	ldrh	r2, [r7, #6]
 8000c34:	88b9      	ldrh	r1, [r7, #4]
 8000c36:	8878      	ldrh	r0, [r7, #2]
 8000c38:	883c      	ldrh	r4, [r7, #0]
 8000c3a:	9404      	str	r4, [sp, #16]
 8000c3c:	9003      	str	r0, [sp, #12]
 8000c3e:	9102      	str	r1, [sp, #8]
 8000c40:	9201      	str	r2, [sp, #4]
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	462b      	mov	r3, r5
 8000c46:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <Get_and_Append_CAN_Message_to_Buffer+0xfc>)
 8000c48:	2121      	movs	r1, #33	; 0x21
 8000c4a:	481c      	ldr	r0, [pc, #112]	; (8000cbc <Get_and_Append_CAN_Message_to_Buffer+0x100>)
 8000c4c:	f00d fe0e 	bl	800e86c <sniprintf>
			HAL_GetTick(), RxHeader.ExtId, data1, data2, data3, data4);

	strcat(filling_buffer ? buffer2 : buffer1, "1234567890abcdefghijklmnopqrstu\n");//encodedData);
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <Get_and_Append_CAN_Message_to_Buffer+0x104>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <Get_and_Append_CAN_Message_to_Buffer+0xa0>
 8000c58:	4c1a      	ldr	r4, [pc, #104]	; (8000cc4 <Get_and_Append_CAN_Message_to_Buffer+0x108>)
 8000c5a:	e000      	b.n	8000c5e <Get_and_Append_CAN_Message_to_Buffer+0xa2>
 8000c5c:	4c1a      	ldr	r4, [pc, #104]	; (8000cc8 <Get_and_Append_CAN_Message_to_Buffer+0x10c>)
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f7ff faee 	bl	8000240 <strlen>
 8000c64:	4603      	mov	r3, r0
 8000c66:	4423      	add	r3, r4
 8000c68:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <Get_and_Append_CAN_Message_to_Buffer+0x110>)
 8000c6a:	4614      	mov	r4, r2
 8000c6c:	469c      	mov	ip, r3
 8000c6e:	f104 0e20 	add.w	lr, r4, #32
 8000c72:	4665      	mov	r5, ip
 8000c74:	4626      	mov	r6, r4
 8000c76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c78:	6028      	str	r0, [r5, #0]
 8000c7a:	6069      	str	r1, [r5, #4]
 8000c7c:	60aa      	str	r2, [r5, #8]
 8000c7e:	60eb      	str	r3, [r5, #12]
 8000c80:	3410      	adds	r4, #16
 8000c82:	f10c 0c10 	add.w	ip, ip, #16
 8000c86:	4574      	cmp	r4, lr
 8000c88:	d1f3      	bne.n	8000c72 <Get_and_Append_CAN_Message_to_Buffer+0xb6>
 8000c8a:	4663      	mov	r3, ip
 8000c8c:	4622      	mov	r2, r4
 8000c8e:	7812      	ldrb	r2, [r2, #0]
 8000c90:	701a      	strb	r2, [r3, #0]
	double_buffer_fill_level[filling_buffer]++;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <Get_and_Append_CAN_Message_to_Buffer+0x104>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <Get_and_Append_CAN_Message_to_Buffer+0x114>)
 8000c98:	5cd2      	ldrb	r2, [r2, r3]
 8000c9a:	3201      	adds	r2, #1
 8000c9c:	b2d1      	uxtb	r1, r2
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <Get_and_Append_CAN_Message_to_Buffer+0x114>)
 8000ca0:	54d1      	strb	r1, [r2, r3]
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200003bc 	.word	0x200003bc
 8000cb0:	200003a0 	.word	0x200003a0
 8000cb4:	20000184 	.word	0x20000184
 8000cb8:	0800fb28 	.word	0x0800fb28
 8000cbc:	2000037c 	.word	0x2000037c
 8000cc0:	200023ce 	.word	0x200023ce
 8000cc4:	200013c8 	.word	0x200013c8
 8000cc8:	200003c4 	.word	0x200003c4
 8000ccc:	0800fb48 	.word	0x0800fb48
 8000cd0:	200023cc 	.word	0x200023cc

08000cd4 <CAN_Filter_Config>:


void CAN_Filter_Config(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08c      	sub	sp, #48	; 0x30
 8000cd8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 8000cde:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 8000ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 8000cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf0:	0a1a      	lsrs	r2, r3, #8
 8000cf2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8000cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfc:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 8000d00:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8000d02:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 8000d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d06:	0a1a      	lsrs	r2, r3, #8
 8000d08:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 8000d20:	2301      	movs	r3, #1
 8000d22:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan1, &filter) != HAL_OK) {
 8000d24:	463b      	mov	r3, r7
 8000d26:	4619      	mov	r1, r3
 8000d28:	480a      	ldr	r0, [pc, #40]	; (8000d54 <CAN_Filter_Config+0x80>)
 8000d2a:	f000 fcfb 	bl	8001724 <HAL_CAN_ConfigFilter>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <CAN_Filter_Config+0x64>
		Error_Handler();
 8000d34:	f000 f850 	bl	8000dd8 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4806      	ldr	r0, [pc, #24]	; (8000d54 <CAN_Filter_Config+0x80>)
 8000d3c:	f000 ff34 	bl	8001ba8 <HAL_CAN_ActivateNotification>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <CAN_Filter_Config+0x76>
			!= HAL_OK) {
		/* Notification Error */
		Error_Handler();
 8000d46:	f000 f847 	bl	8000dd8 <Error_Handler>
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	3730      	adds	r7, #48	; 0x30
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000184 	.word	0x20000184

08000d58 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	if (double_buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER &&
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b80      	cmp	r3, #128	; 0x80
 8000d66:	d105      	bne.n	8000d74 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
			double_buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER) Error_Handler();
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000d6a:	785b      	ldrb	r3, [r3, #1]
	if (double_buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER &&
 8000d6c:	2b80      	cmp	r3, #128	; 0x80
 8000d6e:	d101      	bne.n	8000d74 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
			double_buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER) Error_Handler();
 8000d70:	f000 f832 	bl	8000dd8 <Error_Handler>

	Get_and_Append_CAN_Message_to_Buffer();
 8000d74:	f7ff ff22 	bl	8000bbc <Get_and_Append_CAN_Message_to_Buffer>

	if (double_buffer_fill_level[filling_buffer] == CAN_MESSAGES_TO_BUFFER) {
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000d80:	5c9b      	ldrb	r3, [r3, r2]
 8000d82:	2b80      	cmp	r3, #128	; 0x80
 8000d84:	d10c      	bne.n	8000da0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
		buffer_filled = 1;
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]
		filling_buffer = !filling_buffer;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	bf0c      	ite	eq
 8000d94:	2301      	moveq	r3, #1
 8000d96:	2300      	movne	r3, #0
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000d9e:	701a      	strb	r2, [r3, #0]
	}
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200023cc 	.word	0x200023cc
 8000dac:	200023ce 	.word	0x200023ce
 8000db0:	200023d4 	.word	0x200023d4

08000db4 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8000dbc:	1d39      	adds	r1, r7, #4
 8000dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <__io_putchar+0x20>)
 8000dc6:	f005 fd05 	bl	80067d4 <HAL_UART_Transmit>

	return ch;
 8000dca:	687b      	ldr	r3, [r7, #4]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200002f0 	.word	0x200002f0

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("\r\nError Handler Reached\r\n");
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <Error_Handler+0x1c>)
 8000de2:	f00d feab 	bl	800eb3c <puts>
	  HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <Error_Handler+0x20>)
 8000dee:	f001 ffad 	bl	8002d4c <HAL_GPIO_WritePin>

	while (1) {
 8000df2:	e7fe      	b.n	8000df2 <Error_Handler+0x1a>
 8000df4:	0800fb6c 	.word	0x0800fb6c
 8000df8:	40021400 	.word	0x40021400

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_MspInit+0x44>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_MspInit+0x44>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_MspInit+0x44>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_MspInit+0x44>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_MspInit+0x44>)
 8000e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_MspInit+0x44>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <HAL_CAN_MspInit+0x8c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12f      	bne.n	8000ec6 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_CAN_MspInit+0x90>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a1a      	ldr	r2, [pc, #104]	; (8000ed4 <HAL_CAN_MspInit+0x90>)
 8000e6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_CAN_MspInit+0x90>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_CAN_MspInit+0x90>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <HAL_CAN_MspInit+0x90>)
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_CAN_MspInit+0x90>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0308 	and.w	r3, r3, #8
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e96:	2303      	movs	r3, #3
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ea6:	2309      	movs	r3, #9
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <HAL_CAN_MspInit+0x94>)
 8000eb2:	f001 fd87 	bl	80029c4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2014      	movs	r0, #20
 8000ebc:	f001 f9a5 	bl	800220a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ec0:	2014      	movs	r0, #20
 8000ec2:	f001 f9be 	bl	8002242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ec6:	bf00      	nop
 8000ec8:	3728      	adds	r7, #40	; 0x28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40006400 	.word	0x40006400
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020c00 	.word	0x40020c00

08000edc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0ae      	sub	sp, #184	; 0xb8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2290      	movs	r2, #144	; 0x90
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f00d fe25 	bl	800eb4c <memset>
  if(hsd->Instance==SDMMC1)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a73      	ldr	r2, [pc, #460]	; (80010d4 <HAL_SD_MspInit+0x1f8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	f040 80de 	bne.w	80010ca <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000f0e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000f12:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4618      	mov	r0, r3
 8000f22:	f003 feb9 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000f2c:	f7ff ff54 	bl	8000dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f30:	4b69      	ldr	r3, [pc, #420]	; (80010d8 <HAL_SD_MspInit+0x1fc>)
 8000f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f34:	4a68      	ldr	r2, [pc, #416]	; (80010d8 <HAL_SD_MspInit+0x1fc>)
 8000f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3c:	4b66      	ldr	r3, [pc, #408]	; (80010d8 <HAL_SD_MspInit+0x1fc>)
 8000f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f48:	4b63      	ldr	r3, [pc, #396]	; (80010d8 <HAL_SD_MspInit+0x1fc>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	4a62      	ldr	r2, [pc, #392]	; (80010d8 <HAL_SD_MspInit+0x1fc>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	6313      	str	r3, [r2, #48]	; 0x30
 8000f54:	4b60      	ldr	r3, [pc, #384]	; (80010d8 <HAL_SD_MspInit+0x1fc>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f60:	4b5d      	ldr	r3, [pc, #372]	; (80010d8 <HAL_SD_MspInit+0x1fc>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	4a5c      	ldr	r2, [pc, #368]	; (80010d8 <HAL_SD_MspInit+0x1fc>)
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6c:	4b5a      	ldr	r3, [pc, #360]	; (80010d8 <HAL_SD_MspInit+0x1fc>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000f78:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f92:	230c      	movs	r3, #12
 8000f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	484f      	ldr	r0, [pc, #316]	; (80010dc <HAL_SD_MspInit+0x200>)
 8000fa0:	f001 fd10 	bl	80029c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4845      	ldr	r0, [pc, #276]	; (80010e0 <HAL_SD_MspInit+0x204>)
 8000fca:	f001 fcfb 	bl	80029c4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000fce:	4b45      	ldr	r3, [pc, #276]	; (80010e4 <HAL_SD_MspInit+0x208>)
 8000fd0:	4a45      	ldr	r2, [pc, #276]	; (80010e8 <HAL_SD_MspInit+0x20c>)
 8000fd2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000fd4:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <HAL_SD_MspInit+0x208>)
 8000fd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fda:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fdc:	4b41      	ldr	r3, [pc, #260]	; (80010e4 <HAL_SD_MspInit+0x208>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe2:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <HAL_SD_MspInit+0x208>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe8:	4b3e      	ldr	r3, [pc, #248]	; (80010e4 <HAL_SD_MspInit+0x208>)
 8000fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fee:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ff0:	4b3c      	ldr	r3, [pc, #240]	; (80010e4 <HAL_SD_MspInit+0x208>)
 8000ff2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ff6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ff8:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <HAL_SD_MspInit+0x208>)
 8000ffa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ffe:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001000:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <HAL_SD_MspInit+0x208>)
 8001002:	2220      	movs	r2, #32
 8001004:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001006:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <HAL_SD_MspInit+0x208>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800100c:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <HAL_SD_MspInit+0x208>)
 800100e:	2204      	movs	r2, #4
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001012:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <HAL_SD_MspInit+0x208>)
 8001014:	2203      	movs	r2, #3
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001018:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <HAL_SD_MspInit+0x208>)
 800101a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001020:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <HAL_SD_MspInit+0x208>)
 8001022:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001026:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001028:	482e      	ldr	r0, [pc, #184]	; (80010e4 <HAL_SD_MspInit+0x208>)
 800102a:	f001 f925 	bl	8002278 <HAL_DMA_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001034:	f7ff fed0 	bl	8000dd8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a2a      	ldr	r2, [pc, #168]	; (80010e4 <HAL_SD_MspInit+0x208>)
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
 800103e:	4a29      	ldr	r2, [pc, #164]	; (80010e4 <HAL_SD_MspInit+0x208>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001044:	4b29      	ldr	r3, [pc, #164]	; (80010ec <HAL_SD_MspInit+0x210>)
 8001046:	4a2a      	ldr	r2, [pc, #168]	; (80010f0 <HAL_SD_MspInit+0x214>)
 8001048:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800104a:	4b28      	ldr	r3, [pc, #160]	; (80010ec <HAL_SD_MspInit+0x210>)
 800104c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001050:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <HAL_SD_MspInit+0x210>)
 8001054:	2240      	movs	r2, #64	; 0x40
 8001056:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <HAL_SD_MspInit+0x210>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <HAL_SD_MspInit+0x210>)
 8001060:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001064:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <HAL_SD_MspInit+0x210>)
 8001068:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800106c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <HAL_SD_MspInit+0x210>)
 8001070:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001074:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <HAL_SD_MspInit+0x210>)
 8001078:	2220      	movs	r2, #32
 800107a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <HAL_SD_MspInit+0x210>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <HAL_SD_MspInit+0x210>)
 8001084:	2204      	movs	r2, #4
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <HAL_SD_MspInit+0x210>)
 800108a:	2203      	movs	r2, #3
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_SD_MspInit+0x210>)
 8001090:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001094:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_SD_MspInit+0x210>)
 8001098:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800109c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800109e:	4813      	ldr	r0, [pc, #76]	; (80010ec <HAL_SD_MspInit+0x210>)
 80010a0:	f001 f8ea 	bl	8002278 <HAL_DMA_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 80010aa:	f7ff fe95 	bl	8000dd8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <HAL_SD_MspInit+0x210>)
 80010b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <HAL_SD_MspInit+0x210>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2031      	movs	r0, #49	; 0x31
 80010c0:	f001 f8a3 	bl	800220a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80010c4:	2031      	movs	r0, #49	; 0x31
 80010c6:	f001 f8bc 	bl	8002242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	37b8      	adds	r7, #184	; 0xb8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40012c00 	.word	0x40012c00
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40020c00 	.word	0x40020c00
 80010e4:	20000230 	.word	0x20000230
 80010e8:	40026458 	.word	0x40026458
 80010ec:	20000290 	.word	0x20000290
 80010f0:	400264a0 	.word	0x400264a0

080010f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0ae      	sub	sp, #184	; 0xb8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2290      	movs	r2, #144	; 0x90
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f00d fd19 	bl	800eb4c <memset>
  if(huart->Instance==USART3)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a22      	ldr	r2, [pc, #136]	; (80011a8 <HAL_UART_MspInit+0xb4>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d13c      	bne.n	800119e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001128:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800112a:	2300      	movs	r3, #0
 800112c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fdb0 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800113e:	f7ff fe4b 	bl	8000dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <HAL_UART_MspInit+0xb8>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a19      	ldr	r2, [pc, #100]	; (80011ac <HAL_UART_MspInit+0xb8>)
 8001148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <HAL_UART_MspInit+0xb8>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_UART_MspInit+0xb8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a13      	ldr	r2, [pc, #76]	; (80011ac <HAL_UART_MspInit+0xb8>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_UART_MspInit+0xb8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001172:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001176:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800118c:	2307      	movs	r3, #7
 800118e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001192:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_UART_MspInit+0xbc>)
 800119a:	f001 fc13 	bl	80029c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800119e:	bf00      	nop
 80011a0:	37b8      	adds	r7, #184	; 0xb8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40004800 	.word	0x40004800
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020c00 	.word	0x40020c00

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <NMI_Handler+0x4>

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f000 f950 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <CAN1_RX0_IRQHandler+0x10>)
 800120e:	f000 fcf1 	bl	8001bf4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000184 	.word	0x20000184

0800121c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <SDMMC1_IRQHandler+0x10>)
 8001222:	f004 fbe1 	bl	80059e8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200001ac 	.word	0x200001ac

08001230 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <DMA2_Stream3_IRQHandler+0x10>)
 8001236:	f001 f94f 	bl	80024d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000230 	.word	0x20000230

08001244 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <OTG_FS_IRQHandler+0x10>)
 800124a:	f001 fede 	bl	800300a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20003d68 	.word	0x20003d68

08001258 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <DMA2_Stream6_IRQHandler+0x10>)
 800125e:	f001 f93b 	bl	80024d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000290 	.word	0x20000290

0800126c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	e00a      	b.n	8001294 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800127e:	f3af 8000 	nop.w
 8001282:	4601      	mov	r1, r0
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	60ba      	str	r2, [r7, #8]
 800128a:	b2ca      	uxtb	r2, r1
 800128c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3301      	adds	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	dbf0      	blt.n	800127e <_read+0x12>
  }

  return len;
 800129c:	687b      	ldr	r3, [r7, #4]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	e009      	b.n	80012cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	60ba      	str	r2, [r7, #8]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fd77 	bl	8000db4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dbf1      	blt.n	80012b8 <_write+0x12>
  }
  return len;
 80012d4:	687b      	ldr	r3, [r7, #4]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <_close>:

int _close(int file)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001306:	605a      	str	r2, [r3, #4]
  return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <_isatty>:

int _isatty(int file)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <_sbrk+0x5c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <_sbrk+0x60>)
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <_sbrk+0x64>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <_sbrk+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d207      	bcs.n	8001388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001378:	f00d fc00 	bl	800eb7c <__errno>
 800137c:	4603      	mov	r3, r0
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001386:	e009      	b.n	800139c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <_sbrk+0x64>)
 8001398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20080000 	.word	0x20080000
 80013a8:	00000400 	.word	0x00000400
 80013ac:	200023dc 	.word	0x200023dc
 80013b0:	200043c0 	.word	0x200043c0

080013b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001410 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013de:	490e      	ldr	r1, [pc, #56]	; (8001418 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f4:	4c0b      	ldr	r4, [pc, #44]	; (8001424 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001402:	f7ff ffd7 	bl	80013b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001406:	f00d fbbf 	bl	800eb88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140a:	f7ff f8ef 	bl	80005ec <main>
  bx  lr    
 800140e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001410:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 800141c:	0800fd0c 	.word	0x0800fd0c
  ldr r2, =_sbss
 8001420:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001424:	200043bc 	.word	0x200043bc

08001428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC_IRQHandler>

0800142a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142e:	2003      	movs	r0, #3
 8001430:	f000 fee0 	bl	80021f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001434:	2000      	movs	r0, #0
 8001436:	f000 f805 	bl	8001444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143a:	f7ff fcdf 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_InitTick+0x54>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_InitTick+0x58>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fefb 	bl	800225e <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e00e      	b.n	8001490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d80a      	bhi.n	800148e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001480:	f000 fec3 	bl	800220a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_InitTick+0x5c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000000 	.word	0x20000000
 800149c:	20000008 	.word	0x20000008
 80014a0:	20000004 	.word	0x20000004

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008
 80014c8:	200023e0 	.word	0x200023e0

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	200023e0 	.word	0x200023e0

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff ffee 	bl	80014cc <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffde 	bl	80014cc <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008

0800152c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e0ed      	b.n	800171a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d102      	bne.n	8001550 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fc7a 	bl	8000e44 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0201 	orr.w	r2, r2, #1
 800155e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001560:	f7ff ffb4 	bl	80014cc <HAL_GetTick>
 8001564:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001566:	e012      	b.n	800158e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001568:	f7ff ffb0 	bl	80014cc <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b0a      	cmp	r3, #10
 8001574:	d90b      	bls.n	800158e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2205      	movs	r2, #5
 8001586:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e0c5      	b.n	800171a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0e5      	beq.n	8001568 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0202 	bic.w	r2, r2, #2
 80015aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ac:	f7ff ff8e 	bl	80014cc <HAL_GetTick>
 80015b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015b2:	e012      	b.n	80015da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015b4:	f7ff ff8a 	bl	80014cc <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b0a      	cmp	r3, #10
 80015c0:	d90b      	bls.n	80015da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2205      	movs	r2, #5
 80015d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e09f      	b.n	800171a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e5      	bne.n	80015b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7e1b      	ldrb	r3, [r3, #24]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d108      	bne.n	8001602 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e007      	b.n	8001612 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7e5b      	ldrb	r3, [r3, #25]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d108      	bne.n	800162c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	e007      	b.n	800163c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800163a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7e9b      	ldrb	r3, [r3, #26]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d108      	bne.n	8001656 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0220 	orr.w	r2, r2, #32
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e007      	b.n	8001666 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0220 	bic.w	r2, r2, #32
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7edb      	ldrb	r3, [r3, #27]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d108      	bne.n	8001680 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0210 	bic.w	r2, r2, #16
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e007      	b.n	8001690 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0210 	orr.w	r2, r2, #16
 800168e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7f1b      	ldrb	r3, [r3, #28]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d108      	bne.n	80016aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0208 	orr.w	r2, r2, #8
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e007      	b.n	80016ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0208 	bic.w	r2, r2, #8
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7f5b      	ldrb	r3, [r3, #29]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d108      	bne.n	80016d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0204 	orr.w	r2, r2, #4
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e007      	b.n	80016e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0204 	bic.w	r2, r2, #4
 80016e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	ea42 0103 	orr.w	r1, r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	1e5a      	subs	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800173c:	7cfb      	ldrb	r3, [r7, #19]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d003      	beq.n	800174a <HAL_CAN_ConfigFilter+0x26>
 8001742:	7cfb      	ldrb	r3, [r7, #19]
 8001744:	2b02      	cmp	r3, #2
 8001746:	f040 80c7 	bne.w	80018d8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a69      	ldr	r2, [pc, #420]	; (80018f4 <HAL_CAN_ConfigFilter+0x1d0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d001      	beq.n	8001758 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001754:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <HAL_CAN_ConfigFilter+0x1d4>)
 8001756:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800175e:	f043 0201 	orr.w	r2, r3, #1
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	4a63      	ldr	r2, [pc, #396]	; (80018f8 <HAL_CAN_ConfigFilter+0x1d4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d111      	bne.n	8001794 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001776:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	431a      	orrs	r2, r3
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	f003 031f 	and.w	r3, r3, #31
 800179c:	2201      	movs	r2, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d123      	bne.n	8001806 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	401a      	ands	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3248      	adds	r2, #72	; 0x48
 80017e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017fc:	6979      	ldr	r1, [r7, #20]
 80017fe:	3348      	adds	r3, #72	; 0x48
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d122      	bne.n	8001854 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	431a      	orrs	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800182e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	3248      	adds	r2, #72	; 0x48
 8001834:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001848:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800184a:	6979      	ldr	r1, [r7, #20]
 800184c:	3348      	adds	r3, #72	; 0x48
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	440b      	add	r3, r1
 8001852:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d109      	bne.n	8001870 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	43db      	mvns	r3, r3
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800186e:	e007      	b.n	8001880 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	431a      	orrs	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	43db      	mvns	r3, r3
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800189a:	e007      	b.n	80018ac <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d107      	bne.n	80018c4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	431a      	orrs	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018ca:	f023 0201 	bic.w	r2, r3, #1
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	e006      	b.n	80018e6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
  }
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40003400 	.word	0x40003400
 80018f8:	40006400 	.word	0x40006400

080018fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b01      	cmp	r3, #1
 800190e:	d12e      	bne.n	800196e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001928:	f7ff fdd0 	bl	80014cc <HAL_GetTick>
 800192c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800192e:	e012      	b.n	8001956 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001930:	f7ff fdcc 	bl	80014cc <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b0a      	cmp	r3, #10
 800193c:	d90b      	bls.n	8001956 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2205      	movs	r2, #5
 800194e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e012      	b.n	800197c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1e5      	bne.n	8001930 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e006      	b.n	800197c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
  }
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001998:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800199a:	7dfb      	ldrb	r3, [r7, #23]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d003      	beq.n	80019a8 <HAL_CAN_GetRxMessage+0x24>
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	f040 80f3 	bne.w	8001b8e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10e      	bne.n	80019cc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d116      	bne.n	80019ea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0e7      	b.n	8001b9c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d107      	bne.n	80019ea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0d8      	b.n	8001b9c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	331b      	adds	r3, #27
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	4413      	add	r3, r2
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0204 	and.w	r2, r3, #4
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10c      	bne.n	8001a22 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	331b      	adds	r3, #27
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	0d5b      	lsrs	r3, r3, #21
 8001a18:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	e00b      	b.n	8001a3a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	331b      	adds	r3, #27
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	4413      	add	r3, r2
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	08db      	lsrs	r3, r3, #3
 8001a32:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	331b      	adds	r3, #27
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	4413      	add	r3, r2
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0202 	and.w	r2, r3, #2
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	331b      	adds	r3, #27
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 020f 	and.w	r2, r3, #15
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	331b      	adds	r3, #27
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	4413      	add	r3, r2
 8001a74:	3304      	adds	r3, #4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	331b      	adds	r3, #27
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0c1b      	lsrs	r3, r3, #16
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0a1a      	lsrs	r2, r3, #8
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0c1a      	lsrs	r2, r3, #16
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	3302      	adds	r3, #2
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	0e1a      	lsrs	r2, r3, #24
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	3303      	adds	r3, #3
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0a1a      	lsrs	r2, r3, #8
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	3305      	adds	r3, #5
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	0c1a      	lsrs	r2, r3, #16
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	3306      	adds	r3, #6
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	4413      	add	r3, r2
 8001b52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0e1a      	lsrs	r2, r3, #24
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	3307      	adds	r3, #7
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d108      	bne.n	8001b7a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0220 	orr.w	r2, r2, #32
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	e007      	b.n	8001b8a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0220 	orr.w	r2, r2, #32
 8001b88:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e006      	b.n	8001b9c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
  }
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d002      	beq.n	8001bc6 <HAL_CAN_ActivateNotification+0x1e>
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d109      	bne.n	8001bda <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6959      	ldr	r1, [r3, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e006      	b.n	8001be8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d07c      	beq.n	8001d34 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d023      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f983 	bl	8001f62 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c5c:	e016      	b.n	8001c8c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c70:	e00c      	b.n	8001c8c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
 8001c84:	e002      	b.n	8001c8c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f989 	bl	8001f9e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d024      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f963 	bl	8001f76 <HAL_CAN_TxMailbox1CompleteCallback>
 8001cb0:	e016      	b.n	8001ce0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d004      	beq.n	8001cc6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc4:	e00c      	b.n	8001ce0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d004      	beq.n	8001cda <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	e002      	b.n	8001ce0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f969 	bl	8001fb2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d024      	beq.n	8001d34 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cf2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f943 	bl	8001f8a <HAL_CAN_TxMailbox2CompleteCallback>
 8001d04:	e016      	b.n	8001d34 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d004      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
 8001d18:	e00c      	b.n	8001d34 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d004      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2c:	e002      	b.n	8001d34 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f949 	bl	8001fc6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00c      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2210      	movs	r2, #16
 8001d56:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2208      	movs	r2, #8
 8001d72:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f930 	bl	8001fda <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d009      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe ffe0 	bl	8000d58 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00c      	beq.n	8001dbc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	f003 0310 	and.w	r3, r3, #16
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d007      	beq.n	8001dbc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2210      	movs	r2, #16
 8001dba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d006      	beq.n	8001dde <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2208      	movs	r2, #8
 8001dd6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f912 	bl	8002002 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d009      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8f9 	bl	8001fee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2210      	movs	r2, #16
 8001e16:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f8fc 	bl	8002016 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00b      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d006      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2208      	movs	r2, #8
 8001e38:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8f5 	bl	800202a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d07b      	beq.n	8001f42 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d072      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d008      	beq.n	8001e70 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	f043 0302 	orr.w	r3, r3, #2
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d008      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d043      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d03e      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ec2:	2b60      	cmp	r3, #96	; 0x60
 8001ec4:	d02b      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x32a>
 8001ec6:	2b60      	cmp	r3, #96	; 0x60
 8001ec8:	d82e      	bhi.n	8001f28 <HAL_CAN_IRQHandler+0x334>
 8001eca:	2b50      	cmp	r3, #80	; 0x50
 8001ecc:	d022      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x320>
 8001ece:	2b50      	cmp	r3, #80	; 0x50
 8001ed0:	d82a      	bhi.n	8001f28 <HAL_CAN_IRQHandler+0x334>
 8001ed2:	2b40      	cmp	r3, #64	; 0x40
 8001ed4:	d019      	beq.n	8001f0a <HAL_CAN_IRQHandler+0x316>
 8001ed6:	2b40      	cmp	r3, #64	; 0x40
 8001ed8:	d826      	bhi.n	8001f28 <HAL_CAN_IRQHandler+0x334>
 8001eda:	2b30      	cmp	r3, #48	; 0x30
 8001edc:	d010      	beq.n	8001f00 <HAL_CAN_IRQHandler+0x30c>
 8001ede:	2b30      	cmp	r3, #48	; 0x30
 8001ee0:	d822      	bhi.n	8001f28 <HAL_CAN_IRQHandler+0x334>
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d002      	beq.n	8001eec <HAL_CAN_IRQHandler+0x2f8>
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	d005      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001eea:	e01d      	b.n	8001f28 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ef4:	e019      	b.n	8001f2a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	f043 0310 	orr.w	r3, r3, #16
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001efe:	e014      	b.n	8001f2a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	f043 0320 	orr.w	r3, r3, #32
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f08:	e00f      	b.n	8001f2a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f12:	e00a      	b.n	8001f2a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f1c:	e005      	b.n	8001f2a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f26:	e000      	b.n	8001f2a <HAL_CAN_IRQHandler+0x336>
            break;
 8001f28:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699a      	ldr	r2, [r3, #24]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f38:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2204      	movs	r2, #4
 8001f40:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f872 	bl	800203e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3728      	adds	r7, #40	; 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <__NVIC_SetPriorityGrouping+0x40>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002070:	4013      	ands	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	4313      	orrs	r3, r2
 8002080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002082:	4a04      	ldr	r2, [pc, #16]	; (8002094 <__NVIC_SetPriorityGrouping+0x40>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	60d3      	str	r3, [r2, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00
 8002098:	05fa0000 	.word	0x05fa0000

0800209c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <__NVIC_GetPriorityGrouping+0x18>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	f003 0307 	and.w	r3, r3, #7
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	db0b      	blt.n	80020e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	f003 021f 	and.w	r2, r3, #31
 80020d0:	4907      	ldr	r1, [pc, #28]	; (80020f0 <__NVIC_EnableIRQ+0x38>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	2001      	movs	r0, #1
 80020da:	fa00 f202 	lsl.w	r2, r0, r2
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000e100 	.word	0xe000e100

080020f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	db0a      	blt.n	800211e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	b2da      	uxtb	r2, r3
 800210c:	490c      	ldr	r1, [pc, #48]	; (8002140 <__NVIC_SetPriority+0x4c>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	0112      	lsls	r2, r2, #4
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	440b      	add	r3, r1
 8002118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800211c:	e00a      	b.n	8002134 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4908      	ldr	r1, [pc, #32]	; (8002144 <__NVIC_SetPriority+0x50>)
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	3b04      	subs	r3, #4
 800212c:	0112      	lsls	r2, r2, #4
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	440b      	add	r3, r1
 8002132:	761a      	strb	r2, [r3, #24]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000e100 	.word	0xe000e100
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f1c3 0307 	rsb	r3, r3, #7
 8002162:	2b04      	cmp	r3, #4
 8002164:	bf28      	it	cs
 8002166:	2304      	movcs	r3, #4
 8002168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3304      	adds	r3, #4
 800216e:	2b06      	cmp	r3, #6
 8002170:	d902      	bls.n	8002178 <NVIC_EncodePriority+0x30>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3b03      	subs	r3, #3
 8002176:	e000      	b.n	800217a <NVIC_EncodePriority+0x32>
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43da      	mvns	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	401a      	ands	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002190:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43d9      	mvns	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	4313      	orrs	r3, r2
         );
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3724      	adds	r7, #36	; 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c0:	d301      	bcc.n	80021c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00f      	b.n	80021e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c6:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <SysTick_Config+0x40>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ce:	210f      	movs	r1, #15
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021d4:	f7ff ff8e 	bl	80020f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <SysTick_Config+0x40>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021de:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <SysTick_Config+0x40>)
 80021e0:	2207      	movs	r2, #7
 80021e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	e000e010 	.word	0xe000e010

080021f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff29 	bl	8002054 <__NVIC_SetPriorityGrouping>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800221c:	f7ff ff3e 	bl	800209c <__NVIC_GetPriorityGrouping>
 8002220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	6978      	ldr	r0, [r7, #20]
 8002228:	f7ff ff8e 	bl	8002148 <NVIC_EncodePriority>
 800222c:	4602      	mov	r2, r0
 800222e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff5d 	bl	80020f4 <__NVIC_SetPriority>
}
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff31 	bl	80020b8 <__NVIC_EnableIRQ>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff ffa2 	bl	80021b0 <SysTick_Config>
 800226c:	4603      	mov	r3, r0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002284:	f7ff f922 	bl	80014cc <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e099      	b.n	80023c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b4:	e00f      	b.n	80022d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022b6:	f7ff f909 	bl	80014cc <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b05      	cmp	r3, #5
 80022c2:	d908      	bls.n	80022d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2220      	movs	r2, #32
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2203      	movs	r2, #3
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e078      	b.n	80023c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1e8      	bne.n	80022b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4b38      	ldr	r3, [pc, #224]	; (80023d0 <HAL_DMA_Init+0x158>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002302:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800230e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4313      	orrs	r3, r2
 8002326:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	2b04      	cmp	r3, #4
 800232e:	d107      	bne.n	8002340 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	4313      	orrs	r3, r2
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f023 0307 	bic.w	r3, r3, #7
 8002356:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	2b04      	cmp	r3, #4
 8002368:	d117      	bne.n	800239a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00e      	beq.n	800239a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 faa5 	bl	80028cc <DMA_CheckFifoParam>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2240      	movs	r2, #64	; 0x40
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002396:	2301      	movs	r3, #1
 8002398:	e016      	b.n	80023c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fa5c 	bl	8002860 <DMA_CalcBaseAndBitshift>
 80023a8:	4603      	mov	r3, r0
 80023aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b0:	223f      	movs	r2, #63	; 0x3f
 80023b2:	409a      	lsls	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	e010803f 	.word	0xe010803f

080023d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_DMA_Start_IT+0x26>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e048      	b.n	800248c <HAL_DMA_Start_IT+0xb8>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d137      	bne.n	800247e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2202      	movs	r2, #2
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f9ee 	bl	8002804 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242c:	223f      	movs	r2, #63	; 0x3f
 800242e:	409a      	lsls	r2, r3
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0216 	orr.w	r2, r2, #22
 8002442:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002452:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0208 	orr.w	r2, r2, #8
 800246a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e005      	b.n	800248a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002486:	2302      	movs	r3, #2
 8002488:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800248a:	7dfb      	ldrb	r3, [r7, #23]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d004      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2280      	movs	r2, #128	; 0x80
 80024ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00c      	b.n	80024cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2205      	movs	r2, #5
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0201 	bic.w	r2, r2, #1
 80024c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80024e4:	4b8e      	ldr	r3, [pc, #568]	; (8002720 <HAL_DMA_IRQHandler+0x248>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a8e      	ldr	r2, [pc, #568]	; (8002724 <HAL_DMA_IRQHandler+0x24c>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0a9b      	lsrs	r3, r3, #10
 80024f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002502:	2208      	movs	r2, #8
 8002504:	409a      	lsls	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d01a      	beq.n	8002544 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0204 	bic.w	r2, r2, #4
 800252a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	2208      	movs	r2, #8
 8002532:	409a      	lsls	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253c:	f043 0201 	orr.w	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002548:	2201      	movs	r2, #1
 800254a:	409a      	lsls	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d012      	beq.n	800257a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002566:	2201      	movs	r2, #1
 8002568:	409a      	lsls	r2, r3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002572:	f043 0202 	orr.w	r2, r3, #2
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	2204      	movs	r2, #4
 8002580:	409a      	lsls	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d012      	beq.n	80025b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00b      	beq.n	80025b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259c:	2204      	movs	r2, #4
 800259e:	409a      	lsls	r2, r3
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	f043 0204 	orr.w	r2, r3, #4
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b4:	2210      	movs	r2, #16
 80025b6:	409a      	lsls	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d043      	beq.n	8002648 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d03c      	beq.n	8002648 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d2:	2210      	movs	r2, #16
 80025d4:	409a      	lsls	r2, r3
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d018      	beq.n	800261a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d108      	bne.n	8002608 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d024      	beq.n	8002648 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	4798      	blx	r3
 8002606:	e01f      	b.n	8002648 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01b      	beq.n	8002648 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
 8002618:	e016      	b.n	8002648 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0208 	bic.w	r2, r2, #8
 8002636:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	2220      	movs	r2, #32
 800264e:	409a      	lsls	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 808f 	beq.w	8002778 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8087 	beq.w	8002778 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266e:	2220      	movs	r2, #32
 8002670:	409a      	lsls	r2, r3
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b05      	cmp	r3, #5
 8002680:	d136      	bne.n	80026f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0216 	bic.w	r2, r2, #22
 8002690:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d103      	bne.n	80026b2 <HAL_DMA_IRQHandler+0x1da>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d007      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0208 	bic.w	r2, r2, #8
 80026c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c6:	223f      	movs	r2, #63	; 0x3f
 80026c8:	409a      	lsls	r2, r3
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d07e      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	4798      	blx	r3
        }
        return;
 80026ee:	e079      	b.n	80027e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d01d      	beq.n	800273a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10d      	bne.n	8002728 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002710:	2b00      	cmp	r3, #0
 8002712:	d031      	beq.n	8002778 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4798      	blx	r3
 800271c:	e02c      	b.n	8002778 <HAL_DMA_IRQHandler+0x2a0>
 800271e:	bf00      	nop
 8002720:	20000000 	.word	0x20000000
 8002724:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d023      	beq.n	8002778 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
 8002738:	e01e      	b.n	8002778 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10f      	bne.n	8002768 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0210 	bic.w	r2, r2, #16
 8002756:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	2b00      	cmp	r3, #0
 800277e:	d032      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d022      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2205      	movs	r2, #5
 8002790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	3301      	adds	r3, #1
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d307      	bcc.n	80027c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f2      	bne.n	80027a4 <HAL_DMA_IRQHandler+0x2cc>
 80027be:	e000      	b.n	80027c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
 80027e2:	e000      	b.n	80027e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027e4:	bf00      	nop
    }
  }
}
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002820:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d108      	bne.n	8002844 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002842:	e007      	b.n	8002854 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	60da      	str	r2, [r3, #12]
}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	3b10      	subs	r3, #16
 8002870:	4a13      	ldr	r2, [pc, #76]	; (80028c0 <DMA_CalcBaseAndBitshift+0x60>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800287a:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <DMA_CalcBaseAndBitshift+0x64>)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b03      	cmp	r3, #3
 800288c:	d908      	bls.n	80028a0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <DMA_CalcBaseAndBitshift+0x68>)
 8002896:	4013      	ands	r3, r2
 8002898:	1d1a      	adds	r2, r3, #4
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	659a      	str	r2, [r3, #88]	; 0x58
 800289e:	e006      	b.n	80028ae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <DMA_CalcBaseAndBitshift+0x68>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	aaaaaaab 	.word	0xaaaaaaab
 80028c4:	0800fc2c 	.word	0x0800fc2c
 80028c8:	fffffc00 	.word	0xfffffc00

080028cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d11f      	bne.n	8002926 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d856      	bhi.n	800299a <DMA_CheckFifoParam+0xce>
 80028ec:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <DMA_CheckFifoParam+0x28>)
 80028ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f2:	bf00      	nop
 80028f4:	08002905 	.word	0x08002905
 80028f8:	08002917 	.word	0x08002917
 80028fc:	08002905 	.word	0x08002905
 8002900:	0800299b 	.word	0x0800299b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d046      	beq.n	800299e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002914:	e043      	b.n	800299e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800291e:	d140      	bne.n	80029a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002924:	e03d      	b.n	80029a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800292e:	d121      	bne.n	8002974 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b03      	cmp	r3, #3
 8002934:	d837      	bhi.n	80029a6 <DMA_CheckFifoParam+0xda>
 8002936:	a201      	add	r2, pc, #4	; (adr r2, 800293c <DMA_CheckFifoParam+0x70>)
 8002938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293c:	0800294d 	.word	0x0800294d
 8002940:	08002953 	.word	0x08002953
 8002944:	0800294d 	.word	0x0800294d
 8002948:	08002965 	.word	0x08002965
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
      break;
 8002950:	e030      	b.n	80029b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d025      	beq.n	80029aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002962:	e022      	b.n	80029aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800296c:	d11f      	bne.n	80029ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002972:	e01c      	b.n	80029ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d903      	bls.n	8002982 <DMA_CheckFifoParam+0xb6>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b03      	cmp	r3, #3
 800297e:	d003      	beq.n	8002988 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002980:	e018      	b.n	80029b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
      break;
 8002986:	e015      	b.n	80029b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00e      	beq.n	80029b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
      break;
 8002998:	e00b      	b.n	80029b2 <DMA_CheckFifoParam+0xe6>
      break;
 800299a:	bf00      	nop
 800299c:	e00a      	b.n	80029b4 <DMA_CheckFifoParam+0xe8>
      break;
 800299e:	bf00      	nop
 80029a0:	e008      	b.n	80029b4 <DMA_CheckFifoParam+0xe8>
      break;
 80029a2:	bf00      	nop
 80029a4:	e006      	b.n	80029b4 <DMA_CheckFifoParam+0xe8>
      break;
 80029a6:	bf00      	nop
 80029a8:	e004      	b.n	80029b4 <DMA_CheckFifoParam+0xe8>
      break;
 80029aa:	bf00      	nop
 80029ac:	e002      	b.n	80029b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80029ae:	bf00      	nop
 80029b0:	e000      	b.n	80029b4 <DMA_CheckFifoParam+0xe8>
      break;
 80029b2:	bf00      	nop
    }
  } 
  
  return status; 
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop

080029c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b089      	sub	sp, #36	; 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	e175      	b.n	8002cd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029e4:	2201      	movs	r2, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	f040 8164 	bne.w	8002cca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d005      	beq.n	8002a1a <HAL_GPIO_Init+0x56>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d130      	bne.n	8002a7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	2203      	movs	r2, #3
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a50:	2201      	movs	r2, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 0201 	and.w	r2, r3, #1
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d017      	beq.n	8002ab8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d123      	bne.n	8002b0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	08da      	lsrs	r2, r3, #3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3208      	adds	r2, #8
 8002acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	220f      	movs	r2, #15
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	08da      	lsrs	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3208      	adds	r2, #8
 8002b06:	69b9      	ldr	r1, [r7, #24]
 8002b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	2203      	movs	r2, #3
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0203 	and.w	r2, r3, #3
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80be 	beq.w	8002cca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4e:	4b66      	ldr	r3, [pc, #408]	; (8002ce8 <HAL_GPIO_Init+0x324>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	4a65      	ldr	r2, [pc, #404]	; (8002ce8 <HAL_GPIO_Init+0x324>)
 8002b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b58:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5a:	4b63      	ldr	r3, [pc, #396]	; (8002ce8 <HAL_GPIO_Init+0x324>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b66:	4a61      	ldr	r2, [pc, #388]	; (8002cec <HAL_GPIO_Init+0x328>)
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	089b      	lsrs	r3, r3, #2
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	220f      	movs	r2, #15
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a58      	ldr	r2, [pc, #352]	; (8002cf0 <HAL_GPIO_Init+0x32c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d037      	beq.n	8002c02 <HAL_GPIO_Init+0x23e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a57      	ldr	r2, [pc, #348]	; (8002cf4 <HAL_GPIO_Init+0x330>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d031      	beq.n	8002bfe <HAL_GPIO_Init+0x23a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a56      	ldr	r2, [pc, #344]	; (8002cf8 <HAL_GPIO_Init+0x334>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d02b      	beq.n	8002bfa <HAL_GPIO_Init+0x236>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a55      	ldr	r2, [pc, #340]	; (8002cfc <HAL_GPIO_Init+0x338>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d025      	beq.n	8002bf6 <HAL_GPIO_Init+0x232>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a54      	ldr	r2, [pc, #336]	; (8002d00 <HAL_GPIO_Init+0x33c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d01f      	beq.n	8002bf2 <HAL_GPIO_Init+0x22e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a53      	ldr	r2, [pc, #332]	; (8002d04 <HAL_GPIO_Init+0x340>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d019      	beq.n	8002bee <HAL_GPIO_Init+0x22a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a52      	ldr	r2, [pc, #328]	; (8002d08 <HAL_GPIO_Init+0x344>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_GPIO_Init+0x226>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a51      	ldr	r2, [pc, #324]	; (8002d0c <HAL_GPIO_Init+0x348>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00d      	beq.n	8002be6 <HAL_GPIO_Init+0x222>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a50      	ldr	r2, [pc, #320]	; (8002d10 <HAL_GPIO_Init+0x34c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d007      	beq.n	8002be2 <HAL_GPIO_Init+0x21e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4f      	ldr	r2, [pc, #316]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <HAL_GPIO_Init+0x21a>
 8002bda:	2309      	movs	r3, #9
 8002bdc:	e012      	b.n	8002c04 <HAL_GPIO_Init+0x240>
 8002bde:	230a      	movs	r3, #10
 8002be0:	e010      	b.n	8002c04 <HAL_GPIO_Init+0x240>
 8002be2:	2308      	movs	r3, #8
 8002be4:	e00e      	b.n	8002c04 <HAL_GPIO_Init+0x240>
 8002be6:	2307      	movs	r3, #7
 8002be8:	e00c      	b.n	8002c04 <HAL_GPIO_Init+0x240>
 8002bea:	2306      	movs	r3, #6
 8002bec:	e00a      	b.n	8002c04 <HAL_GPIO_Init+0x240>
 8002bee:	2305      	movs	r3, #5
 8002bf0:	e008      	b.n	8002c04 <HAL_GPIO_Init+0x240>
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	e006      	b.n	8002c04 <HAL_GPIO_Init+0x240>
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e004      	b.n	8002c04 <HAL_GPIO_Init+0x240>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e002      	b.n	8002c04 <HAL_GPIO_Init+0x240>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_GPIO_Init+0x240>
 8002c02:	2300      	movs	r3, #0
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	f002 0203 	and.w	r2, r2, #3
 8002c0a:	0092      	lsls	r2, r2, #2
 8002c0c:	4093      	lsls	r3, r2
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c14:	4935      	ldr	r1, [pc, #212]	; (8002cec <HAL_GPIO_Init+0x328>)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c22:	4b3d      	ldr	r3, [pc, #244]	; (8002d18 <HAL_GPIO_Init+0x354>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c46:	4a34      	ldr	r2, [pc, #208]	; (8002d18 <HAL_GPIO_Init+0x354>)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c4c:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <HAL_GPIO_Init+0x354>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c70:	4a29      	ldr	r2, [pc, #164]	; (8002d18 <HAL_GPIO_Init+0x354>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c76:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <HAL_GPIO_Init+0x354>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c9a:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <HAL_GPIO_Init+0x354>)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <HAL_GPIO_Init+0x354>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc4:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <HAL_GPIO_Init+0x354>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	61fb      	str	r3, [r7, #28]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b0f      	cmp	r3, #15
 8002cd4:	f67f ae86 	bls.w	80029e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	3724      	adds	r7, #36	; 0x24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40013800 	.word	0x40013800
 8002cf0:	40020000 	.word	0x40020000
 8002cf4:	40020400 	.word	0x40020400
 8002cf8:	40020800 	.word	0x40020800
 8002cfc:	40020c00 	.word	0x40020c00
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40021400 	.word	0x40021400
 8002d08:	40021800 	.word	0x40021800
 8002d0c:	40021c00 	.word	0x40021c00
 8002d10:	40022000 	.word	0x40022000
 8002d14:	40022400 	.word	0x40022400
 8002d18:	40013c00 	.word	0x40013c00

08002d1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	887b      	ldrh	r3, [r7, #2]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
 8002d38:	e001      	b.n	8002d3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	807b      	strh	r3, [r7, #2]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d5c:	787b      	ldrb	r3, [r7, #1]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d68:	e003      	b.n	8002d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d6a:	887b      	ldrh	r3, [r7, #2]
 8002d6c:	041a      	lsls	r2, r3, #16
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	619a      	str	r2, [r3, #24]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d80:	b08f      	sub	sp, #60	; 0x3c
 8002d82:	af0a      	add	r7, sp, #40	; 0x28
 8002d84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e116      	b.n	8002fbe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f00b f940 	bl	800e030 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2203      	movs	r2, #3
 8002db4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 ffdb 	bl	8007d8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	603b      	str	r3, [r7, #0]
 8002dda:	687e      	ldr	r6, [r7, #4]
 8002ddc:	466d      	mov	r5, sp
 8002dde:	f106 0410 	add.w	r4, r6, #16
 8002de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dee:	e885 0003 	stmia.w	r5, {r0, r1}
 8002df2:	1d33      	adds	r3, r6, #4
 8002df4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002df6:	6838      	ldr	r0, [r7, #0]
 8002df8:	f004 febc 	bl	8007b74 <USB_CoreInit>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2202      	movs	r2, #2
 8002e06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e0d7      	b.n	8002fbe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f004 ffc9 	bl	8007dac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
 8002e1e:	e04a      	b.n	8002eb6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	333d      	adds	r3, #61	; 0x3d
 8002e30:	2201      	movs	r2, #1
 8002e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e34:	7bfa      	ldrb	r2, [r7, #15]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	333c      	adds	r3, #60	; 0x3c
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	b298      	uxth	r0, r3
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	3344      	adds	r3, #68	; 0x44
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3340      	adds	r3, #64	; 0x40
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	3348      	adds	r3, #72	; 0x48
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	334c      	adds	r3, #76	; 0x4c
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3354      	adds	r3, #84	; 0x54
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
 8002eb6:	7bfa      	ldrb	r2, [r7, #15]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d3af      	bcc.n	8002e20 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]
 8002ec4:	e044      	b.n	8002f50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002edc:	7bfa      	ldrb	r2, [r7, #15]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002eee:	7bfa      	ldrb	r2, [r7, #15]
 8002ef0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ef2:	7bfa      	ldrb	r2, [r7, #15]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d3b5      	bcc.n	8002ec6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	687e      	ldr	r6, [r7, #4]
 8002f62:	466d      	mov	r5, sp
 8002f64:	f106 0410 	add.w	r4, r6, #16
 8002f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f74:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f78:	1d33      	adds	r3, r6, #4
 8002f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f7c:	6838      	ldr	r0, [r7, #0]
 8002f7e:	f004 ff61 	bl	8007e44 <USB_DevInit>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e014      	b.n	8002fbe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d102      	bne.n	8002fb2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f001 f97b 	bl	80042a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f006 f8af 	bl	800911a <USB_DevDisconnect>

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fc6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_PCD_Start+0x16>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e012      	b.n	8003002 <HAL_PCD_Start+0x3c>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f004 febd 	bl	8007d68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f006 f870 	bl	80090d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800300a:	b590      	push	{r4, r7, lr}
 800300c:	b08d      	sub	sp, #52	; 0x34
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f006 f92e 	bl	8009282 <USB_GetMode>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	f040 84b7 	bne.w	800399c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f006 f892 	bl	800915c <USB_ReadInterrupts>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 84ad 	beq.w	800399a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f006 f87f 	bl	800915c <USB_ReadInterrupts>
 800305e:	4603      	mov	r3, r0
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b02      	cmp	r3, #2
 8003066:	d107      	bne.n	8003078 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f002 0202 	and.w	r2, r2, #2
 8003076:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f006 f86d 	bl	800915c <USB_ReadInterrupts>
 8003082:	4603      	mov	r3, r0
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b10      	cmp	r3, #16
 800308a:	d161      	bne.n	8003150 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0210 	bic.w	r2, r2, #16
 800309a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	f003 020f 	and.w	r2, r3, #15
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	3304      	adds	r3, #4
 80030ba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	0c5b      	lsrs	r3, r3, #17
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d124      	bne.n	8003112 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d035      	beq.n	8003140 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	091b      	lsrs	r3, r3, #4
 80030dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	6a38      	ldr	r0, [r7, #32]
 80030e8:	f005 fea4 	bl	8008e34 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030f8:	441a      	add	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	6a1a      	ldr	r2, [r3, #32]
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800310a:	441a      	add	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	621a      	str	r2, [r3, #32]
 8003110:	e016      	b.n	8003140 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	0c5b      	lsrs	r3, r3, #17
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	2b06      	cmp	r3, #6
 800311c:	d110      	bne.n	8003140 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003124:	2208      	movs	r2, #8
 8003126:	4619      	mov	r1, r3
 8003128:	6a38      	ldr	r0, [r7, #32]
 800312a:	f005 fe83 	bl	8008e34 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	6a1a      	ldr	r2, [r3, #32]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800313a:	441a      	add	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699a      	ldr	r2, [r3, #24]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0210 	orr.w	r2, r2, #16
 800314e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f006 f801 	bl	800915c <USB_ReadInterrupts>
 800315a:	4603      	mov	r3, r0
 800315c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003160:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003164:	f040 80a7 	bne.w	80032b6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f006 f806 	bl	8009182 <USB_ReadDevAllOutEpInterrupt>
 8003176:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003178:	e099      	b.n	80032ae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 808e 	beq.w	80032a2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f006 f82a 	bl	80091ea <USB_ReadDevOutEPInterrupt>
 8003196:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00c      	beq.n	80031bc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ae:	461a      	mov	r2, r3
 80031b0:	2301      	movs	r3, #1
 80031b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fef0 	bl	8003f9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d2:	461a      	mov	r2, r3
 80031d4:	2308      	movs	r3, #8
 80031d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 ffc6 	bl	800416c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f6:	461a      	mov	r2, r3
 80031f8:	2310      	movs	r3, #16
 80031fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d030      	beq.n	8003268 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320e:	2b80      	cmp	r3, #128	; 0x80
 8003210:	d109      	bne.n	8003226 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003220:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003224:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	4413      	add	r3, r2
 8003238:	3304      	adds	r3, #4
 800323a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	78db      	ldrb	r3, [r3, #3]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d108      	bne.n	8003256 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2200      	movs	r2, #0
 8003248:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	b2db      	uxtb	r3, r3
 800324e:	4619      	mov	r1, r3
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f00b f811 	bl	800e278 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003262:	461a      	mov	r2, r3
 8003264:	2302      	movs	r3, #2
 8003266:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327e:	461a      	mov	r2, r3
 8003280:	2320      	movs	r3, #32
 8003282:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329a:	461a      	mov	r2, r3
 800329c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	3301      	adds	r3, #1
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	085b      	lsrs	r3, r3, #1
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f47f af62 	bne.w	800317a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f005 ff4e 	bl	800915c <USB_ReadInterrupts>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032ca:	f040 80db 	bne.w	8003484 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f005 ff6f 	bl	80091b6 <USB_ReadDevAllInEpInterrupt>
 80032d8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80032de:	e0cd      	b.n	800347c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80c2 	beq.w	8003470 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f005 ff95 	bl	8009226 <USB_ReadDevInEPInterrupt>
 80032fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d057      	beq.n	80033b8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	2201      	movs	r2, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	43db      	mvns	r3, r3
 8003322:	69f9      	ldr	r1, [r7, #28]
 8003324:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003328:	4013      	ands	r3, r2
 800332a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003338:	461a      	mov	r2, r3
 800333a:	2301      	movs	r3, #1
 800333c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d132      	bne.n	80033ac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334a:	4613      	mov	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	334c      	adds	r3, #76	; 0x4c
 8003356:	6819      	ldr	r1, [r3, #0]
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4403      	add	r3, r0
 8003366:	3348      	adds	r3, #72	; 0x48
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4419      	add	r1, r3
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4403      	add	r3, r0
 800337a:	334c      	adds	r3, #76	; 0x4c
 800337c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	2b00      	cmp	r3, #0
 8003382:	d113      	bne.n	80033ac <HAL_PCD_IRQHandler+0x3a2>
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	3354      	adds	r3, #84	; 0x54
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d108      	bne.n	80033ac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033a4:	461a      	mov	r2, r3
 80033a6:	2101      	movs	r1, #1
 80033a8:	f005 ff9e 	bl	80092e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	4619      	mov	r1, r3
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f00a fedb 	bl	800e16e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ce:	461a      	mov	r2, r3
 80033d0:	2308      	movs	r3, #8
 80033d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d008      	beq.n	80033f0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ea:	461a      	mov	r2, r3
 80033ec:	2310      	movs	r3, #16
 80033ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003406:	461a      	mov	r2, r3
 8003408:	2340      	movs	r3, #64	; 0x40
 800340a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d023      	beq.n	800345e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003416:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003418:	6a38      	ldr	r0, [r7, #32]
 800341a:	f004 fe71 	bl	8008100 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	3338      	adds	r3, #56	; 0x38
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	4413      	add	r3, r2
 800342e:	3304      	adds	r3, #4
 8003430:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	78db      	ldrb	r3, [r3, #3]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d108      	bne.n	800344c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2200      	movs	r2, #0
 800343e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	b2db      	uxtb	r3, r3
 8003444:	4619      	mov	r1, r3
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f00a ff28 	bl	800e29c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	4413      	add	r3, r2
 8003454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003458:	461a      	mov	r2, r3
 800345a:	2302      	movs	r3, #2
 800345c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fd08 	bl	8003e80 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	3301      	adds	r3, #1
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800347c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347e:	2b00      	cmp	r3, #0
 8003480:	f47f af2e 	bne.w	80032e0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f005 fe67 	bl	800915c <USB_ReadInterrupts>
 800348e:	4603      	mov	r3, r0
 8003490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003498:	d122      	bne.n	80034e0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d108      	bne.n	80034ca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034c0:	2100      	movs	r1, #0
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f00b f8a2 	bl	800e60c <HAL_PCDEx_LPM_Callback>
 80034c8:	e002      	b.n	80034d0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f00a fec6 	bl	800e25c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f005 fe39 	bl	800915c <USB_ReadInterrupts>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f4:	d112      	bne.n	800351c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b01      	cmp	r3, #1
 8003504:	d102      	bne.n	800350c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f00a fe82 	bl	800e210 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800351a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f005 fe1b 	bl	800915c <USB_ReadInterrupts>
 8003526:	4603      	mov	r3, r0
 8003528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800352c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003530:	d121      	bne.n	8003576 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003540:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d111      	bne.n	8003570 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	f003 020f 	and.w	r2, r3, #15
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003566:	2101      	movs	r1, #1
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f00b f84f 	bl	800e60c <HAL_PCDEx_LPM_Callback>
 800356e:	e002      	b.n	8003576 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f00a fe4d 	bl	800e210 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f005 fdee 	bl	800915c <USB_ReadInterrupts>
 8003580:	4603      	mov	r3, r0
 8003582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358a:	f040 80b7 	bne.w	80036fc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2110      	movs	r1, #16
 80035a8:	4618      	mov	r0, r3
 80035aa:	f004 fda9 	bl	8008100 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b2:	e046      	b.n	8003642 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c0:	461a      	mov	r2, r3
 80035c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035c6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d8:	0151      	lsls	r1, r2, #5
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	440a      	add	r2, r1
 80035de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f4:	461a      	mov	r2, r3
 80035f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	440a      	add	r2, r1
 8003612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800361a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800362c:	0151      	lsls	r1, r2, #5
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	440a      	add	r2, r1
 8003632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003636:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800363a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	3301      	adds	r3, #1
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003648:	429a      	cmp	r2, r3
 800364a:	d3b3      	bcc.n	80035b4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	69fa      	ldr	r2, [r7, #28]
 8003656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800365e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	2b00      	cmp	r3, #0
 8003666:	d016      	beq.n	8003696 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003678:	f043 030b 	orr.w	r3, r3, #11
 800367c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368e:	f043 030b 	orr.w	r3, r3, #11
 8003692:	6453      	str	r3, [r2, #68]	; 0x44
 8003694:	e015      	b.n	80036c2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a4:	4619      	mov	r1, r3
 80036a6:	f242 032b 	movw	r3, #8235	; 0x202b
 80036aa:	4313      	orrs	r3, r2
 80036ac:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036bc:	f043 030b 	orr.w	r3, r3, #11
 80036c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036e6:	461a      	mov	r2, r3
 80036e8:	f005 fdfe 	bl	80092e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695a      	ldr	r2, [r3, #20]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f005 fd2b 	bl	800915c <USB_ReadInterrupts>
 8003706:	4603      	mov	r3, r0
 8003708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003710:	d124      	bne.n	800375c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f005 fdc2 	bl	80092a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f004 fd6a 	bl	80081fa <USB_GetDevSpeed>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681c      	ldr	r4, [r3, #0]
 8003732:	f001 fa7d 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8003736:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	4620      	mov	r0, r4
 8003742:	f004 fa6f 	bl	8007c24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f00a fd39 	bl	800e1be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800375a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f005 fcfb 	bl	800915c <USB_ReadInterrupts>
 8003766:	4603      	mov	r3, r0
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b08      	cmp	r3, #8
 800376e:	d10a      	bne.n	8003786 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f00a fd16 	bl	800e1a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f002 0208 	and.w	r2, r2, #8
 8003784:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f005 fce6 	bl	800915c <USB_ReadInterrupts>
 8003790:	4603      	mov	r3, r0
 8003792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003796:	2b80      	cmp	r3, #128	; 0x80
 8003798:	d122      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037a6:	2301      	movs	r3, #1
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
 80037aa:	e014      	b.n	80037d6 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d105      	bne.n	80037d0 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	4619      	mov	r1, r3
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fb27 	bl	8003e1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	3301      	adds	r3, #1
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037dc:	429a      	cmp	r2, r3
 80037de:	d3e5      	bcc.n	80037ac <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f005 fcb9 	bl	800915c <USB_ReadInterrupts>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f4:	d13b      	bne.n	800386e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037f6:	2301      	movs	r3, #1
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
 80037fa:	e02b      	b.n	8003854 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	3340      	adds	r3, #64	; 0x40
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d115      	bne.n	800384e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003822:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003824:	2b00      	cmp	r3, #0
 8003826:	da12      	bge.n	800384e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	333f      	adds	r3, #63	; 0x3f
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003844:	b2db      	uxtb	r3, r3
 8003846:	4619      	mov	r1, r3
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fae8 	bl	8003e1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	3301      	adds	r3, #1
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385a:	429a      	cmp	r2, r3
 800385c:	d3ce      	bcc.n	80037fc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800386c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f005 fc72 	bl	800915c <USB_ReadInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003882:	d155      	bne.n	8003930 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003884:	2301      	movs	r3, #1
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
 8003888:	e045      	b.n	8003916 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d12e      	bne.n	8003910 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	da2b      	bge.n	8003910 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038c4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d121      	bne.n	8003910 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10a      	bne.n	8003910 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800390c:	6053      	str	r3, [r2, #4]
            break;
 800390e:	e007      	b.n	8003920 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	3301      	adds	r3, #1
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391c:	429a      	cmp	r2, r3
 800391e:	d3b4      	bcc.n	800388a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800392e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f005 fc11 	bl	800915c <USB_ReadInterrupts>
 800393a:	4603      	mov	r3, r0
 800393c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d10a      	bne.n	800395c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f00a fcba 	bl	800e2c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800395a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f005 fbfb 	bl	800915c <USB_ReadInterrupts>
 8003966:	4603      	mov	r3, r0
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b04      	cmp	r3, #4
 800396e:	d115      	bne.n	800399c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f00a fcaa 	bl	800e2dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6859      	ldr	r1, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	430a      	orrs	r2, r1
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	e000      	b.n	800399c <HAL_PCD_IRQHandler+0x992>
      return;
 800399a:	bf00      	nop
    }
  }
}
 800399c:	3734      	adds	r7, #52	; 0x34
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd90      	pop	{r4, r7, pc}

080039a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	460b      	mov	r3, r1
 80039ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_PCD_SetAddress+0x1a>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e013      	b.n	80039e4 <HAL_PCD_SetAddress+0x42>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f005 fb59 	bl	800908c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	4608      	mov	r0, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	461a      	mov	r2, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	70fb      	strb	r3, [r7, #3]
 80039fe:	460b      	mov	r3, r1
 8003a00:	803b      	strh	r3, [r7, #0]
 8003a02:	4613      	mov	r3, r2
 8003a04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	da0f      	bge.n	8003a32 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	f003 020f 	and.w	r2, r3, #15
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	3338      	adds	r3, #56	; 0x38
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	3304      	adds	r3, #4
 8003a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	705a      	strb	r2, [r3, #1]
 8003a30:	e00f      	b.n	8003a52 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	f003 020f 	and.w	r2, r3, #15
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	4413      	add	r3, r2
 8003a48:	3304      	adds	r3, #4
 8003a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a5e:	883a      	ldrh	r2, [r7, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	78ba      	ldrb	r2, [r7, #2]
 8003a68:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	785b      	ldrb	r3, [r3, #1]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a7c:	78bb      	ldrb	r3, [r7, #2]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d102      	bne.n	8003a88 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_PCD_EP_Open+0xaa>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e00e      	b.n	8003ab4 <HAL_PCD_EP_Open+0xc8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68f9      	ldr	r1, [r7, #12]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f004 fbcd 	bl	8008244 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ab2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	da0f      	bge.n	8003af0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	f003 020f 	and.w	r2, r3, #15
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	3338      	adds	r3, #56	; 0x38
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	705a      	strb	r2, [r3, #1]
 8003aee:	e00f      	b.n	8003b10 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	f003 020f 	and.w	r2, r3, #15
 8003af6:	4613      	mov	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	4413      	add	r3, r2
 8003b06:	3304      	adds	r3, #4
 8003b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_PCD_EP_Close+0x6e>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e00e      	b.n	8003b48 <HAL_PCD_EP_Close+0x8c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68f9      	ldr	r1, [r7, #12]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f004 fc0b 	bl	8008354 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b60:	7afb      	ldrb	r3, [r7, #11]
 8003b62:	f003 020f 	and.w	r2, r3, #15
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4413      	add	r3, r2
 8003b76:	3304      	adds	r3, #4
 8003b78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b92:	7afb      	ldrb	r3, [r7, #11]
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d102      	bne.n	8003bac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bac:	7afb      	ldrb	r3, [r7, #11]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	6979      	ldr	r1, [r7, #20]
 8003bc4:	f004 fef2 	bl	80089ac <USB_EP0StartXfer>
 8003bc8:	e008      	b.n	8003bdc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6979      	ldr	r1, [r7, #20]
 8003bd8:	f004 fc98 	bl	800850c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	f003 020f 	and.w	r2, r3, #15
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003c08:	681b      	ldr	r3, [r3, #0]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b086      	sub	sp, #24
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	460b      	mov	r3, r1
 8003c24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c26:	7afb      	ldrb	r3, [r7, #11]
 8003c28:	f003 020f 	and.w	r2, r3, #15
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	3338      	adds	r3, #56	; 0x38
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4413      	add	r3, r2
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2201      	movs	r2, #1
 8003c54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c56:	7afb      	ldrb	r3, [r7, #11]
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d102      	bne.n	8003c70 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c70:	7afb      	ldrb	r3, [r7, #11]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	6979      	ldr	r1, [r7, #20]
 8003c88:	f004 fe90 	bl	80089ac <USB_EP0StartXfer>
 8003c8c:	e008      	b.n	8003ca0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6979      	ldr	r1, [r7, #20]
 8003c9c:	f004 fc36 	bl	800850c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	f003 020f 	and.w	r2, r3, #15
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d901      	bls.n	8003cc8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e050      	b.n	8003d6a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	da0f      	bge.n	8003cf0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	f003 020f 	and.w	r2, r3, #15
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	3338      	adds	r3, #56	; 0x38
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	705a      	strb	r2, [r3, #1]
 8003cee:	e00d      	b.n	8003d0c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	3304      	adds	r3, #4
 8003d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_PCD_EP_SetStall+0x82>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e01e      	b.n	8003d6a <HAL_PCD_EP_SetStall+0xc0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68f9      	ldr	r1, [r7, #12]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f005 f8d2 	bl	8008ee4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	b2d9      	uxtb	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f005 fac4 	bl	80092e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	f003 020f 	and.w	r2, r3, #15
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d901      	bls.n	8003d90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e042      	b.n	8003e16 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	da0f      	bge.n	8003db8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	f003 020f 	and.w	r2, r3, #15
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	3338      	adds	r3, #56	; 0x38
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4413      	add	r3, r2
 8003dac:	3304      	adds	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	705a      	strb	r2, [r3, #1]
 8003db6:	e00f      	b.n	8003dd8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	f003 020f 	and.w	r2, r3, #15
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	3304      	adds	r3, #4
 8003dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_PCD_EP_ClrStall+0x86>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e00e      	b.n	8003e16 <HAL_PCD_EP_ClrStall+0xa4>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68f9      	ldr	r1, [r7, #12]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f005 f8da 	bl	8008fc0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	460b      	mov	r3, r1
 8003e28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	da0c      	bge.n	8003e4c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	f003 020f 	and.w	r2, r3, #15
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	3338      	adds	r3, #56	; 0x38
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	3304      	adds	r3, #4
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	e00c      	b.n	8003e66 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	f003 020f 	and.w	r2, r3, #15
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	4413      	add	r3, r2
 8003e62:	3304      	adds	r3, #4
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68f9      	ldr	r1, [r7, #12]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f004 fef9 	bl	8008c64 <USB_EPStopXfer>
 8003e72:	4603      	mov	r3, r0
 8003e74:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e76:	7afb      	ldrb	r3, [r7, #11]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08a      	sub	sp, #40	; 0x28
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	4613      	mov	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	3338      	adds	r3, #56	; 0x38
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a1a      	ldr	r2, [r3, #32]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d901      	bls.n	8003eb8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e06c      	b.n	8003f92 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	699a      	ldr	r2, [r3, #24]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d902      	bls.n	8003ed4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	3303      	adds	r3, #3
 8003ed8:	089b      	lsrs	r3, r3, #2
 8003eda:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003edc:	e02b      	b.n	8003f36 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d902      	bls.n	8003efa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3303      	adds	r3, #3
 8003efe:	089b      	lsrs	r3, r3, #2
 8003f00:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6919      	ldr	r1, [r3, #16]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	4603      	mov	r3, r0
 8003f18:	6978      	ldr	r0, [r7, #20]
 8003f1a:	f004 ff4d 	bl	8008db8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	441a      	add	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1a      	ldr	r2, [r3, #32]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	441a      	add	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d809      	bhi.n	8003f60 <PCD_WriteEmptyTxFifo+0xe0>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1a      	ldr	r2, [r3, #32]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d203      	bcs.n	8003f60 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1be      	bne.n	8003ede <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	699a      	ldr	r2, [r3, #24]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d811      	bhi.n	8003f90 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	2201      	movs	r2, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	6939      	ldr	r1, [r7, #16]
 8003f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3720      	adds	r7, #32
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	333c      	adds	r3, #60	; 0x3c
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d17b      	bne.n	80040ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d015      	beq.n	8004008 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	4a61      	ldr	r2, [pc, #388]	; (8004164 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	f240 80b9 	bls.w	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80b3 	beq.w	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	461a      	mov	r2, r3
 8004000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004004:	6093      	str	r3, [r2, #8]
 8004006:	e0a7      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401e:	461a      	mov	r2, r3
 8004020:	2320      	movs	r3, #32
 8004022:	6093      	str	r3, [r2, #8]
 8004024:	e098      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800402c:	2b00      	cmp	r3, #0
 800402e:	f040 8093 	bne.w	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	4a4b      	ldr	r2, [pc, #300]	; (8004164 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d90f      	bls.n	800405a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004050:	461a      	mov	r2, r3
 8004052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004056:	6093      	str	r3, [r2, #8]
 8004058:	e07e      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4413      	add	r3, r2
 800406c:	3304      	adds	r3, #4
 800406e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	0159      	lsls	r1, r3, #5
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	440b      	add	r3, r1
 800407c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004086:	1ad2      	subs	r2, r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d114      	bne.n	80040bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040a4:	461a      	mov	r2, r3
 80040a6:	2101      	movs	r1, #1
 80040a8:	f005 f91e 	bl	80092e8 <USB_EP0_OutStart>
 80040ac:	e006      	b.n	80040bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	441a      	add	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f00a f838 	bl	800e138 <HAL_PCD_DataOutStageCallback>
 80040c8:	e046      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4a26      	ldr	r2, [pc, #152]	; (8004168 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d124      	bne.n	800411c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e8:	461a      	mov	r2, r3
 80040ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ee:	6093      	str	r3, [r2, #8]
 80040f0:	e032      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004108:	461a      	mov	r2, r3
 800410a:	2320      	movs	r3, #32
 800410c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f00a f80f 	bl	800e138 <HAL_PCD_DataOutStageCallback>
 800411a:	e01d      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d114      	bne.n	800414c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d108      	bne.n	800414c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004144:	461a      	mov	r2, r3
 8004146:	2100      	movs	r1, #0
 8004148:	f005 f8ce 	bl	80092e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	4619      	mov	r1, r3
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f009 fff0 	bl	800e138 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3720      	adds	r7, #32
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	4f54300a 	.word	0x4f54300a
 8004168:	4f54310a 	.word	0x4f54310a

0800416c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	333c      	adds	r3, #60	; 0x3c
 8004184:	3304      	adds	r3, #4
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4a15      	ldr	r2, [pc, #84]	; (80041f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d90e      	bls.n	80041c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d009      	beq.n	80041c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b8:	461a      	mov	r2, r3
 80041ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f009 ffa7 	bl	800e114 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4a0a      	ldr	r2, [pc, #40]	; (80041f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d90c      	bls.n	80041e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d108      	bne.n	80041e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041e0:	461a      	mov	r2, r3
 80041e2:	2101      	movs	r1, #1
 80041e4:	f005 f880 	bl	80092e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	4f54300a 	.word	0x4f54300a

080041f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
 8004204:	4613      	mov	r3, r2
 8004206:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d107      	bne.n	8004226 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004216:	883b      	ldrh	r3, [r7, #0]
 8004218:	0419      	lsls	r1, r3, #16
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	430a      	orrs	r2, r1
 8004222:	629a      	str	r2, [r3, #40]	; 0x28
 8004224:	e028      	b.n	8004278 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	4413      	add	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]
 8004238:	e00d      	b.n	8004256 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	3340      	adds	r3, #64	; 0x40
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	4413      	add	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	3301      	adds	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
 8004256:	7bfa      	ldrb	r2, [r7, #15]
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	3b01      	subs	r3, #1
 800425c:	429a      	cmp	r2, r3
 800425e:	d3ec      	bcc.n	800423a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004260:	883b      	ldrh	r3, [r7, #0]
 8004262:	0418      	lsls	r0, r3, #16
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6819      	ldr	r1, [r3, #0]
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	3b01      	subs	r3, #1
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	4302      	orrs	r2, r0
 8004270:	3340      	adds	r3, #64	; 0x40
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	887a      	ldrh	r2, [r7, #2]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_PCDEx_ActivateLPM+0x44>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	10000003 	.word	0x10000003

080042f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80042f8:	2300      	movs	r3, #0
 80042fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e29b      	b.n	800483e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8087 	beq.w	8004422 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004314:	4b96      	ldr	r3, [pc, #600]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b04      	cmp	r3, #4
 800431e:	d00c      	beq.n	800433a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004320:	4b93      	ldr	r3, [pc, #588]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b08      	cmp	r3, #8
 800432a:	d112      	bne.n	8004352 <HAL_RCC_OscConfig+0x62>
 800432c:	4b90      	ldr	r3, [pc, #576]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004338:	d10b      	bne.n	8004352 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433a:	4b8d      	ldr	r3, [pc, #564]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d06c      	beq.n	8004420 <HAL_RCC_OscConfig+0x130>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d168      	bne.n	8004420 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e275      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800435a:	d106      	bne.n	800436a <HAL_RCC_OscConfig+0x7a>
 800435c:	4b84      	ldr	r3, [pc, #528]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a83      	ldr	r2, [pc, #524]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	e02e      	b.n	80043c8 <HAL_RCC_OscConfig+0xd8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10c      	bne.n	800438c <HAL_RCC_OscConfig+0x9c>
 8004372:	4b7f      	ldr	r3, [pc, #508]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a7e      	ldr	r2, [pc, #504]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	4b7c      	ldr	r3, [pc, #496]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a7b      	ldr	r2, [pc, #492]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e01d      	b.n	80043c8 <HAL_RCC_OscConfig+0xd8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0xc0>
 8004396:	4b76      	ldr	r3, [pc, #472]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a75      	ldr	r2, [pc, #468]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800439c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	4b73      	ldr	r3, [pc, #460]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a72      	ldr	r2, [pc, #456]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e00b      	b.n	80043c8 <HAL_RCC_OscConfig+0xd8>
 80043b0:	4b6f      	ldr	r3, [pc, #444]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a6e      	ldr	r2, [pc, #440]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80043b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	4b6c      	ldr	r3, [pc, #432]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a6b      	ldr	r2, [pc, #428]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80043c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d013      	beq.n	80043f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fd f87c 	bl	80014cc <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fd f878 	bl	80014cc <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	; 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e229      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ea:	4b61      	ldr	r3, [pc, #388]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0xe8>
 80043f6:	e014      	b.n	8004422 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fd f868 	bl	80014cc <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004400:	f7fd f864 	bl	80014cc <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e215      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004412:	4b57      	ldr	r3, [pc, #348]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x110>
 800441e:	e000      	b.n	8004422 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d069      	beq.n	8004502 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800442e:	4b50      	ldr	r3, [pc, #320]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00b      	beq.n	8004452 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800443a:	4b4d      	ldr	r3, [pc, #308]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b08      	cmp	r3, #8
 8004444:	d11c      	bne.n	8004480 <HAL_RCC_OscConfig+0x190>
 8004446:	4b4a      	ldr	r3, [pc, #296]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d116      	bne.n	8004480 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004452:	4b47      	ldr	r3, [pc, #284]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <HAL_RCC_OscConfig+0x17a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d001      	beq.n	800446a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e1e9      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446a:	4b41      	ldr	r3, [pc, #260]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	493d      	ldr	r1, [pc, #244]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447e:	e040      	b.n	8004502 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d023      	beq.n	80044d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004488:	4b39      	ldr	r3, [pc, #228]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a38      	ldr	r2, [pc, #224]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fd f81a 	bl	80014cc <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800449c:	f7fd f816 	bl	80014cc <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e1c7      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ae:	4b30      	ldr	r3, [pc, #192]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ba:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4929      	ldr	r1, [pc, #164]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]
 80044ce:	e018      	b.n	8004502 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d0:	4b27      	ldr	r3, [pc, #156]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a26      	ldr	r2, [pc, #152]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fc fff6 	bl	80014cc <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e4:	f7fc fff2 	bl	80014cc <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e1a3      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f6:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d038      	beq.n	8004580 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d019      	beq.n	800454a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004516:	4b16      	ldr	r3, [pc, #88]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800451c:	f043 0301 	orr.w	r3, r3, #1
 8004520:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004522:	f7fc ffd3 	bl	80014cc <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800452a:	f7fc ffcf 	bl	80014cc <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e180      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800453e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x23a>
 8004548:	e01a      	b.n	8004580 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800454c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454e:	4a08      	ldr	r2, [pc, #32]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004556:	f7fc ffb9 	bl	80014cc <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800455c:	e00a      	b.n	8004574 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455e:	f7fc ffb5 	bl	80014cc <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d903      	bls.n	8004574 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e166      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
 8004570:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	4b92      	ldr	r3, [pc, #584]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1ee      	bne.n	800455e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80a4 	beq.w	80046d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458e:	4b8c      	ldr	r3, [pc, #560]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10d      	bne.n	80045b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800459a:	4b89      	ldr	r3, [pc, #548]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	4a88      	ldr	r2, [pc, #544]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80045a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a4:	6413      	str	r3, [r2, #64]	; 0x40
 80045a6:	4b86      	ldr	r3, [pc, #536]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b6:	4b83      	ldr	r3, [pc, #524]	; (80047c4 <HAL_RCC_OscConfig+0x4d4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d118      	bne.n	80045f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045c2:	4b80      	ldr	r3, [pc, #512]	; (80047c4 <HAL_RCC_OscConfig+0x4d4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a7f      	ldr	r2, [pc, #508]	; (80047c4 <HAL_RCC_OscConfig+0x4d4>)
 80045c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ce:	f7fc ff7d 	bl	80014cc <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d6:	f7fc ff79 	bl	80014cc <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b64      	cmp	r3, #100	; 0x64
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e12a      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e8:	4b76      	ldr	r3, [pc, #472]	; (80047c4 <HAL_RCC_OscConfig+0x4d4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d106      	bne.n	800460a <HAL_RCC_OscConfig+0x31a>
 80045fc:	4b70      	ldr	r3, [pc, #448]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	4a6f      	ldr	r2, [pc, #444]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6713      	str	r3, [r2, #112]	; 0x70
 8004608:	e02d      	b.n	8004666 <HAL_RCC_OscConfig+0x376>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10c      	bne.n	800462c <HAL_RCC_OscConfig+0x33c>
 8004612:	4b6b      	ldr	r3, [pc, #428]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4a6a      	ldr	r2, [pc, #424]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	6713      	str	r3, [r2, #112]	; 0x70
 800461e:	4b68      	ldr	r3, [pc, #416]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	4a67      	ldr	r2, [pc, #412]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004624:	f023 0304 	bic.w	r3, r3, #4
 8004628:	6713      	str	r3, [r2, #112]	; 0x70
 800462a:	e01c      	b.n	8004666 <HAL_RCC_OscConfig+0x376>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b05      	cmp	r3, #5
 8004632:	d10c      	bne.n	800464e <HAL_RCC_OscConfig+0x35e>
 8004634:	4b62      	ldr	r3, [pc, #392]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	4a61      	ldr	r2, [pc, #388]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800463a:	f043 0304 	orr.w	r3, r3, #4
 800463e:	6713      	str	r3, [r2, #112]	; 0x70
 8004640:	4b5f      	ldr	r3, [pc, #380]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	4a5e      	ldr	r2, [pc, #376]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6713      	str	r3, [r2, #112]	; 0x70
 800464c:	e00b      	b.n	8004666 <HAL_RCC_OscConfig+0x376>
 800464e:	4b5c      	ldr	r3, [pc, #368]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	4a5b      	ldr	r2, [pc, #364]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	6713      	str	r3, [r2, #112]	; 0x70
 800465a:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004660:	f023 0304 	bic.w	r3, r3, #4
 8004664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d015      	beq.n	800469a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466e:	f7fc ff2d 	bl	80014cc <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004674:	e00a      	b.n	800468c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004676:	f7fc ff29 	bl	80014cc <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	f241 3288 	movw	r2, #5000	; 0x1388
 8004684:	4293      	cmp	r3, r2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e0d8      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468c:	4b4c      	ldr	r3, [pc, #304]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0ee      	beq.n	8004676 <HAL_RCC_OscConfig+0x386>
 8004698:	e014      	b.n	80046c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469a:	f7fc ff17 	bl	80014cc <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a0:	e00a      	b.n	80046b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a2:	f7fc ff13 	bl	80014cc <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e0c2      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b8:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1ee      	bne.n	80046a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d105      	bne.n	80046d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ca:	4b3d      	ldr	r3, [pc, #244]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	4a3c      	ldr	r2, [pc, #240]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80046d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80ae 	beq.w	800483c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e0:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d06d      	beq.n	80047c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d14b      	bne.n	800478c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f4:	4b32      	ldr	r3, [pc, #200]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a31      	ldr	r2, [pc, #196]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80046fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fc fee4 	bl	80014cc <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004708:	f7fc fee0 	bl	80014cc <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e091      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471a:	4b29      	ldr	r3, [pc, #164]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69da      	ldr	r2, [r3, #28]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	019b      	lsls	r3, r3, #6
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	3b01      	subs	r3, #1
 8004740:	041b      	lsls	r3, r3, #16
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	061b      	lsls	r3, r3, #24
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	071b      	lsls	r3, r3, #28
 8004752:	491b      	ldr	r1, [pc, #108]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004754:	4313      	orrs	r3, r2
 8004756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004758:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a18      	ldr	r2, [pc, #96]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800475e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fc feb2 	bl	80014cc <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476c:	f7fc feae 	bl	80014cc <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e05f      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x47c>
 800478a:	e057      	b.n	800483c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0b      	ldr	r2, [pc, #44]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fc fe98 	bl	80014cc <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fc fe94 	bl	80014cc <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e045      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4b0>
 80047be:	e03d      	b.n	800483c <HAL_RCC_OscConfig+0x54c>
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047c8:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <HAL_RCC_OscConfig+0x558>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d030      	beq.n	8004838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d129      	bne.n	8004838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d122      	bne.n	8004838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047f8:	4013      	ands	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004800:	4293      	cmp	r3, r2
 8004802:	d119      	bne.n	8004838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	085b      	lsrs	r3, r3, #1
 8004810:	3b01      	subs	r3, #1
 8004812:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d10f      	bne.n	8004838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d107      	bne.n	8004838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40023800 	.word	0x40023800

0800484c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0d0      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004864:	4b6a      	ldr	r3, [pc, #424]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d910      	bls.n	8004894 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	4b67      	ldr	r3, [pc, #412]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f023 020f 	bic.w	r2, r3, #15
 800487a:	4965      	ldr	r1, [pc, #404]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004882:	4b63      	ldr	r3, [pc, #396]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d001      	beq.n	8004894 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0b8      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d020      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ac:	4b59      	ldr	r3, [pc, #356]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	4a58      	ldr	r2, [pc, #352]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80048b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0308 	and.w	r3, r3, #8
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c4:	4b53      	ldr	r3, [pc, #332]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4a52      	ldr	r2, [pc, #328]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80048ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d0:	4b50      	ldr	r3, [pc, #320]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	494d      	ldr	r1, [pc, #308]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d040      	beq.n	8004970 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d107      	bne.n	8004906 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f6:	4b47      	ldr	r3, [pc, #284]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d115      	bne.n	800492e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e07f      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d107      	bne.n	800491e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490e:	4b41      	ldr	r3, [pc, #260]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e073      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491e:	4b3d      	ldr	r3, [pc, #244]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e06b      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800492e:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f023 0203 	bic.w	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4936      	ldr	r1, [pc, #216]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	4313      	orrs	r3, r2
 800493e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004940:	f7fc fdc4 	bl	80014cc <HAL_GetTick>
 8004944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004946:	e00a      	b.n	800495e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004948:	f7fc fdc0 	bl	80014cc <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	; 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e053      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495e:	4b2d      	ldr	r3, [pc, #180]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 020c 	and.w	r2, r3, #12
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	429a      	cmp	r2, r3
 800496e:	d1eb      	bne.n	8004948 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004970:	4b27      	ldr	r3, [pc, #156]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d210      	bcs.n	80049a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b24      	ldr	r3, [pc, #144]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f023 020f 	bic.w	r2, r3, #15
 8004986:	4922      	ldr	r1, [pc, #136]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	4313      	orrs	r3, r2
 800498c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800498e:	4b20      	ldr	r3, [pc, #128]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e032      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ac:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4916      	ldr	r1, [pc, #88]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049ca:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	490e      	ldr	r1, [pc, #56]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049de:	f000 f821 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 80049e2:	4602      	mov	r2, r0
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	490a      	ldr	r1, [pc, #40]	; (8004a18 <HAL_RCC_ClockConfig+0x1cc>)
 80049f0:	5ccb      	ldrb	r3, [r1, r3]
 80049f2:	fa22 f303 	lsr.w	r3, r2, r3
 80049f6:	4a09      	ldr	r2, [pc, #36]	; (8004a1c <HAL_RCC_ClockConfig+0x1d0>)
 80049f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049fa:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <HAL_RCC_ClockConfig+0x1d4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fc fd20 	bl	8001444 <HAL_InitTick>

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023c00 	.word	0x40023c00
 8004a14:	40023800 	.word	0x40023800
 8004a18:	0800fc14 	.word	0x0800fc14
 8004a1c:	20000000 	.word	0x20000000
 8004a20:	20000004 	.word	0x20000004

08004a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a28:	b094      	sub	sp, #80	; 0x50
 8004a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a30:	2300      	movs	r3, #0
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a34:	2300      	movs	r3, #0
 8004a36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a3c:	4b79      	ldr	r3, [pc, #484]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d00d      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0x40>
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	f200 80e1 	bhi.w	8004c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0x34>
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d003      	beq.n	8004a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a56:	e0db      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a58:	4b73      	ldr	r3, [pc, #460]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a5c:	e0db      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a5e:	4b73      	ldr	r3, [pc, #460]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8004a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a62:	e0d8      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a64:	4b6f      	ldr	r3, [pc, #444]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a6c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a6e:	4b6d      	ldr	r3, [pc, #436]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d063      	beq.n	8004b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a7a:	4b6a      	ldr	r3, [pc, #424]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	099b      	lsrs	r3, r3, #6
 8004a80:	2200      	movs	r2, #0
 8004a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a8e:	2300      	movs	r3, #0
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
 8004a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a96:	4622      	mov	r2, r4
 8004a98:	462b      	mov	r3, r5
 8004a9a:	f04f 0000 	mov.w	r0, #0
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	0159      	lsls	r1, r3, #5
 8004aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aa8:	0150      	lsls	r0, r2, #5
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4621      	mov	r1, r4
 8004ab0:	1a51      	subs	r1, r2, r1
 8004ab2:	6139      	str	r1, [r7, #16]
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ac8:	4659      	mov	r1, fp
 8004aca:	018b      	lsls	r3, r1, #6
 8004acc:	4651      	mov	r1, sl
 8004ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ad2:	4651      	mov	r1, sl
 8004ad4:	018a      	lsls	r2, r1, #6
 8004ad6:	4651      	mov	r1, sl
 8004ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8004adc:	4659      	mov	r1, fp
 8004ade:	eb63 0901 	sbc.w	r9, r3, r1
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004af6:	4690      	mov	r8, r2
 8004af8:	4699      	mov	r9, r3
 8004afa:	4623      	mov	r3, r4
 8004afc:	eb18 0303 	adds.w	r3, r8, r3
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	462b      	mov	r3, r5
 8004b04:	eb49 0303 	adc.w	r3, r9, r3
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b16:	4629      	mov	r1, r5
 8004b18:	024b      	lsls	r3, r1, #9
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b20:	4621      	mov	r1, r4
 8004b22:	024a      	lsls	r2, r1, #9
 8004b24:	4610      	mov	r0, r2
 8004b26:	4619      	mov	r1, r3
 8004b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b34:	f7fb fbdc 	bl	80002f0 <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b40:	e058      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b42:	4b38      	ldr	r3, [pc, #224]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	099b      	lsrs	r3, r3, #6
 8004b48:	2200      	movs	r2, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b52:	623b      	str	r3, [r7, #32]
 8004b54:	2300      	movs	r3, #0
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
 8004b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	464b      	mov	r3, r9
 8004b60:	f04f 0000 	mov.w	r0, #0
 8004b64:	f04f 0100 	mov.w	r1, #0
 8004b68:	0159      	lsls	r1, r3, #5
 8004b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b6e:	0150      	lsls	r0, r2, #5
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4641      	mov	r1, r8
 8004b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b94:	ebb2 040a 	subs.w	r4, r2, sl
 8004b98:	eb63 050b 	sbc.w	r5, r3, fp
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	00eb      	lsls	r3, r5, #3
 8004ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004baa:	00e2      	lsls	r2, r4, #3
 8004bac:	4614      	mov	r4, r2
 8004bae:	461d      	mov	r5, r3
 8004bb0:	4643      	mov	r3, r8
 8004bb2:	18e3      	adds	r3, r4, r3
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	eb45 0303 	adc.w	r3, r5, r3
 8004bbc:	607b      	str	r3, [r7, #4]
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bca:	4629      	mov	r1, r5
 8004bcc:	028b      	lsls	r3, r1, #10
 8004bce:	4621      	mov	r1, r4
 8004bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	028a      	lsls	r2, r1, #10
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bde:	2200      	movs	r2, #0
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	61fa      	str	r2, [r7, #28]
 8004be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be8:	f7fb fb82 	bl	80002f0 <__aeabi_uldivmod>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	3301      	adds	r3, #1
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c0e:	e002      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c10:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3750      	adds	r7, #80	; 0x50
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c22:	bf00      	nop
 8004c24:	40023800 	.word	0x40023800
 8004c28:	00f42400 	.word	0x00f42400
 8004c2c:	007a1200 	.word	0x007a1200

08004c30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c36:	681b      	ldr	r3, [r3, #0]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	20000000 	.word	0x20000000

08004c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c4c:	f7ff fff0 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	0a9b      	lsrs	r3, r3, #10
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	4903      	ldr	r1, [pc, #12]	; (8004c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c5e:	5ccb      	ldrb	r3, [r1, r3]
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	0800fc24 	.word	0x0800fc24

08004c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c74:	f7ff ffdc 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	0b5b      	lsrs	r3, r3, #13
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	4903      	ldr	r1, [pc, #12]	; (8004c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c86:	5ccb      	ldrb	r3, [r1, r3]
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40023800 	.word	0x40023800
 8004c94:	0800fc24 	.word	0x0800fc24

08004c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d012      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cc0:	4b69      	ldr	r3, [pc, #420]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	4a68      	ldr	r2, [pc, #416]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cca:	6093      	str	r3, [r2, #8]
 8004ccc:	4b66      	ldr	r3, [pc, #408]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd4:	4964      	ldr	r1, [pc, #400]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d017      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cf2:	4b5d      	ldr	r3, [pc, #372]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	4959      	ldr	r1, [pc, #356]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d10:	d101      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d12:	2301      	movs	r3, #1
 8004d14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d017      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d2e:	4b4e      	ldr	r3, [pc, #312]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	494a      	ldr	r1, [pc, #296]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 808b 	beq.w	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d7c:	4b3a      	ldr	r3, [pc, #232]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	4a39      	ldr	r2, [pc, #228]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d86:	6413      	str	r3, [r2, #64]	; 0x40
 8004d88:	4b37      	ldr	r3, [pc, #220]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d94:	4b35      	ldr	r3, [pc, #212]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a34      	ldr	r2, [pc, #208]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da0:	f7fc fb94 	bl	80014cc <HAL_GetTick>
 8004da4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da8:	f7fc fb90 	bl	80014cc <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b64      	cmp	r3, #100	; 0x64
 8004db4:	d901      	bls.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e38f      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004dba:	4b2c      	ldr	r3, [pc, #176]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0f0      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dc6:	4b28      	ldr	r3, [pc, #160]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d035      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d02e      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004de4:	4b20      	ldr	r3, [pc, #128]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dee:	4b1e      	ldr	r3, [pc, #120]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df2:	4a1d      	ldr	r2, [pc, #116]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dfa:	4b1b      	ldr	r3, [pc, #108]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	4a1a      	ldr	r2, [pc, #104]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e06:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e0c:	4b16      	ldr	r3, [pc, #88]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d114      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fc fb58 	bl	80014cc <HAL_GetTick>
 8004e1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e1e:	e00a      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e20:	f7fc fb54 	bl	80014cc <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e351      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e36:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0ee      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e4e:	d111      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e50:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e5c:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e5e:	400b      	ands	r3, r1
 8004e60:	4901      	ldr	r1, [pc, #4]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
 8004e66:	e00b      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	40007000 	.word	0x40007000
 8004e70:	0ffffcff 	.word	0x0ffffcff
 8004e74:	4bac      	ldr	r3, [pc, #688]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4aab      	ldr	r2, [pc, #684]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e7e:	6093      	str	r3, [r2, #8]
 8004e80:	4ba9      	ldr	r3, [pc, #676]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e8c:	49a6      	ldr	r1, [pc, #664]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d010      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e9e:	4ba2      	ldr	r3, [pc, #648]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ea4:	4aa0      	ldr	r2, [pc, #640]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004eae:	4b9e      	ldr	r3, [pc, #632]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	499b      	ldr	r1, [pc, #620]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ecc:	4b96      	ldr	r3, [pc, #600]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eda:	4993      	ldr	r1, [pc, #588]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eee:	4b8e      	ldr	r3, [pc, #568]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004efc:	498a      	ldr	r1, [pc, #552]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f10:	4b85      	ldr	r3, [pc, #532]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f1e:	4982      	ldr	r1, [pc, #520]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f32:	4b7d      	ldr	r3, [pc, #500]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	4979      	ldr	r1, [pc, #484]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f54:	4b74      	ldr	r3, [pc, #464]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	f023 0203 	bic.w	r2, r3, #3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f62:	4971      	ldr	r1, [pc, #452]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f76:	4b6c      	ldr	r3, [pc, #432]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	f023 020c 	bic.w	r2, r3, #12
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f84:	4968      	ldr	r1, [pc, #416]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f98:	4b63      	ldr	r3, [pc, #396]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa6:	4960      	ldr	r1, [pc, #384]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fba:	4b5b      	ldr	r3, [pc, #364]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc8:	4957      	ldr	r1, [pc, #348]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fdc:	4b52      	ldr	r3, [pc, #328]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fea:	494f      	ldr	r1, [pc, #316]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005004:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500c:	4946      	ldr	r1, [pc, #280]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005020:	4b41      	ldr	r3, [pc, #260]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502e:	493e      	ldr	r1, [pc, #248]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005042:	4b39      	ldr	r3, [pc, #228]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005048:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005050:	4935      	ldr	r1, [pc, #212]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005064:	4b30      	ldr	r3, [pc, #192]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005072:	492d      	ldr	r1, [pc, #180]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d011      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005086:	4b28      	ldr	r3, [pc, #160]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005094:	4924      	ldr	r1, [pc, #144]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a4:	d101      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80050a6:	2301      	movs	r3, #1
 80050a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80050b6:	2301      	movs	r3, #1
 80050b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050c6:	4b18      	ldr	r3, [pc, #96]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d4:	4914      	ldr	r1, [pc, #80]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00b      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050e8:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f8:	490b      	ldr	r1, [pc, #44]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00f      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800510c:	4b06      	ldr	r3, [pc, #24]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511c:	4902      	ldr	r1, [pc, #8]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005124:	e002      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005126:	bf00      	nop
 8005128:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00b      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005138:	4b8a      	ldr	r3, [pc, #552]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800513a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800513e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005148:	4986      	ldr	r1, [pc, #536]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00b      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800515c:	4b81      	ldr	r3, [pc, #516]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800515e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005162:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800516c:	497d      	ldr	r1, [pc, #500]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d006      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80d6 	beq.w	8005334 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005188:	4b76      	ldr	r3, [pc, #472]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a75      	ldr	r2, [pc, #468]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800518e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005194:	f7fc f99a 	bl	80014cc <HAL_GetTick>
 8005198:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800519a:	e008      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800519c:	f7fc f996 	bl	80014cc <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b64      	cmp	r3, #100	; 0x64
 80051a8:	d901      	bls.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e195      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051ae:	4b6d      	ldr	r3, [pc, #436]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1f0      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d021      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d11d      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051ce:	4b65      	ldr	r3, [pc, #404]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051d4:	0c1b      	lsrs	r3, r3, #16
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051dc:	4b61      	ldr	r3, [pc, #388]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e2:	0e1b      	lsrs	r3, r3, #24
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	019a      	lsls	r2, r3, #6
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	041b      	lsls	r3, r3, #16
 80051f4:	431a      	orrs	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	061b      	lsls	r3, r3, #24
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	071b      	lsls	r3, r3, #28
 8005202:	4958      	ldr	r1, [pc, #352]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005228:	2b00      	cmp	r3, #0
 800522a:	d02e      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005234:	d129      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005236:	4b4b      	ldr	r3, [pc, #300]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800523c:	0c1b      	lsrs	r3, r3, #16
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005244:	4b47      	ldr	r3, [pc, #284]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524a:	0f1b      	lsrs	r3, r3, #28
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	019a      	lsls	r2, r3, #6
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	041b      	lsls	r3, r3, #16
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	061b      	lsls	r3, r3, #24
 8005264:	431a      	orrs	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	071b      	lsls	r3, r3, #28
 800526a:	493e      	ldr	r1, [pc, #248]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005272:	4b3c      	ldr	r3, [pc, #240]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005278:	f023 021f 	bic.w	r2, r3, #31
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	3b01      	subs	r3, #1
 8005282:	4938      	ldr	r1, [pc, #224]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01d      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005296:	4b33      	ldr	r3, [pc, #204]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800529c:	0e1b      	lsrs	r3, r3, #24
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052a4:	4b2f      	ldr	r3, [pc, #188]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052aa:	0f1b      	lsrs	r3, r3, #28
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	019a      	lsls	r2, r3, #6
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	431a      	orrs	r2, r3
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	061b      	lsls	r3, r3, #24
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	071b      	lsls	r3, r3, #28
 80052ca:	4926      	ldr	r1, [pc, #152]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d011      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	019a      	lsls	r2, r3, #6
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	041b      	lsls	r3, r3, #16
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	061b      	lsls	r3, r3, #24
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	071b      	lsls	r3, r3, #28
 80052fa:	491a      	ldr	r1, [pc, #104]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005302:	4b18      	ldr	r3, [pc, #96]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a17      	ldr	r2, [pc, #92]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005308:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800530c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530e:	f7fc f8dd 	bl	80014cc <HAL_GetTick>
 8005312:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005314:	e008      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005316:	f7fc f8d9 	bl	80014cc <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b64      	cmp	r3, #100	; 0x64
 8005322:	d901      	bls.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e0d8      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005328:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f0      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b01      	cmp	r3, #1
 8005338:	f040 80ce 	bne.w	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a08      	ldr	r2, [pc, #32]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005348:	f7fc f8c0 	bl	80014cc <HAL_GetTick>
 800534c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800534e:	e00b      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005350:	f7fc f8bc 	bl	80014cc <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d904      	bls.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e0bb      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005362:	bf00      	nop
 8005364:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005368:	4b5e      	ldr	r3, [pc, #376]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005374:	d0ec      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005392:	2b00      	cmp	r3, #0
 8005394:	d02e      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	2b00      	cmp	r3, #0
 800539c:	d12a      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800539e:	4b51      	ldr	r3, [pc, #324]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	0c1b      	lsrs	r3, r3, #16
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053ac:	4b4d      	ldr	r3, [pc, #308]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	0f1b      	lsrs	r3, r3, #28
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	019a      	lsls	r2, r3, #6
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	061b      	lsls	r3, r3, #24
 80053cc:	431a      	orrs	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	071b      	lsls	r3, r3, #28
 80053d2:	4944      	ldr	r1, [pc, #272]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053da:	4b42      	ldr	r3, [pc, #264]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e8:	3b01      	subs	r3, #1
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	493d      	ldr	r1, [pc, #244]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d022      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005408:	d11d      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800540a:	4b36      	ldr	r3, [pc, #216]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005410:	0e1b      	lsrs	r3, r3, #24
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005418:	4b32      	ldr	r3, [pc, #200]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	0f1b      	lsrs	r3, r3, #28
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	019a      	lsls	r2, r3, #6
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	041b      	lsls	r3, r3, #16
 8005432:	431a      	orrs	r2, r3
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	061b      	lsls	r3, r3, #24
 8005438:	431a      	orrs	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	071b      	lsls	r3, r3, #28
 800543e:	4929      	ldr	r1, [pc, #164]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d028      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005452:	4b24      	ldr	r3, [pc, #144]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	0e1b      	lsrs	r3, r3, #24
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005460:	4b20      	ldr	r3, [pc, #128]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	0c1b      	lsrs	r3, r3, #16
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	019a      	lsls	r2, r3, #6
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	041b      	lsls	r3, r3, #16
 8005478:	431a      	orrs	r2, r3
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	061b      	lsls	r3, r3, #24
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	071b      	lsls	r3, r3, #28
 8005486:	4917      	ldr	r1, [pc, #92]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800548e:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005494:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	4911      	ldr	r1, [pc, #68]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054a4:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a0e      	ldr	r2, [pc, #56]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b0:	f7fc f80c 	bl	80014cc <HAL_GetTick>
 80054b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054b6:	e008      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054b8:	f7fc f808 	bl	80014cc <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b64      	cmp	r3, #100	; 0x64
 80054c4:	d901      	bls.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e007      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d6:	d1ef      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3720      	adds	r7, #32
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40023800 	.word	0x40023800

080054e8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e022      	b.n	8005540 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d105      	bne.n	8005512 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7fb fce5 	bl	8000edc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2203      	movs	r2, #3
 8005516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f814 	bl	8005548 <HAL_SD_InitCard>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e00a      	b.n	8005540 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005548:	b5b0      	push	{r4, r5, r7, lr}
 800554a:	b08e      	sub	sp, #56	; 0x38
 800554c:	af04      	add	r7, sp, #16
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005550:	2300      	movs	r3, #0
 8005552:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005558:	2300      	movs	r3, #0
 800555a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005560:	2300      	movs	r3, #0
 8005562:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005564:	2376      	movs	r3, #118	; 0x76
 8005566:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681d      	ldr	r5, [r3, #0]
 800556c:	466c      	mov	r4, sp
 800556e:	f107 0314 	add.w	r3, r7, #20
 8005572:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800557a:	f107 0308 	add.w	r3, r7, #8
 800557e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005580:	4628      	mov	r0, r5
 8005582:	f001 fdc5 	bl	8007110 <SDMMC_Init>
 8005586:	4603      	mov	r3, r0
 8005588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800558c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e059      	b.n	800564c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055a6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 fdf9 	bl	80071a4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055c0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80055c2:	2002      	movs	r0, #2
 80055c4:	f7fb ff8e 	bl	80014e4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 ff59 	bl	8006480 <SD_PowerON>
 80055ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00b      	beq.n	80055ee <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e02e      	b.n	800564c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fe78 	bl	80062e4 <SD_InitCard>
 80055f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00b      	beq.n	8005614 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e01b      	b.n	800564c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f44f 7100 	mov.w	r1, #512	; 0x200
 800561c:	4618      	mov	r0, r3
 800561e:	f001 fe53 	bl	80072c8 <SDMMC_CmdBlockLength>
 8005622:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00f      	beq.n	800564a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a09      	ldr	r2, [pc, #36]	; (8005654 <HAL_SD_InitCard+0x10c>)
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3728      	adds	r7, #40	; 0x28
 8005650:	46bd      	mov	sp, r7
 8005652:	bdb0      	pop	{r4, r5, r7, pc}
 8005654:	004005ff 	.word	0x004005ff

08005658 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08c      	sub	sp, #48	; 0x30
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d107      	bne.n	8005680 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0c3      	b.n	8005808 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	f040 80bc 	bne.w	8005806 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	441a      	add	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569e:	429a      	cmp	r2, r3
 80056a0:	d907      	bls.n	80056b2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e0aa      	b.n	8005808 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2203      	movs	r2, #3
 80056b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2200      	movs	r2, #0
 80056c0:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80056d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	4a4e      	ldr	r2, [pc, #312]	; (8005810 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80056d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	4a4d      	ldr	r2, [pc, #308]	; (8005814 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80056e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	2200      	movs	r2, #0
 80056e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	2200      	movs	r2, #0
 80056f0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3380      	adds	r3, #128	; 0x80
 8005718:	4619      	mov	r1, r3
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	025b      	lsls	r3, r3, #9
 8005720:	089b      	lsrs	r3, r3, #2
 8005722:	f7fc fe57 	bl	80023d4 <HAL_DMA_Start_IT>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d017      	beq.n	800575c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800573a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a35      	ldr	r2, [pc, #212]	; (8005818 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005742:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e055      	b.n	8005808 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0208 	orr.w	r2, r2, #8
 800576a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005770:	2b01      	cmp	r3, #1
 8005772:	d002      	beq.n	800577a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	025b      	lsls	r3, r3, #9
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800577a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800577e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	025b      	lsls	r3, r3, #9
 8005784:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005786:	2390      	movs	r3, #144	; 0x90
 8005788:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800578a:	2302      	movs	r3, #2
 800578c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800578e:	2300      	movs	r3, #0
 8005790:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005792:	2301      	movs	r3, #1
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f107 0210 	add.w	r2, r7, #16
 800579e:	4611      	mov	r1, r2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 fd65 	bl	8007270 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d90a      	bls.n	80057c2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2282      	movs	r2, #130	; 0x82
 80057b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 fdc9 	bl	8007350 <SDMMC_CmdReadMultiBlock>
 80057be:	62f8      	str	r0, [r7, #44]	; 0x2c
 80057c0:	e009      	b.n	80057d6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2281      	movs	r2, #129	; 0x81
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ce:	4618      	mov	r0, r3
 80057d0:	f001 fd9c 	bl	800730c <SDMMC_CmdReadSingleBlock>
 80057d4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80057d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d012      	beq.n	8005802 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a0d      	ldr	r2, [pc, #52]	; (8005818 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80057e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	431a      	orrs	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e002      	b.n	8005808 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	e000      	b.n	8005808 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005806:	2302      	movs	r3, #2
  }
}
 8005808:	4618      	mov	r0, r3
 800580a:	3730      	adds	r7, #48	; 0x30
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	080060f3 	.word	0x080060f3
 8005814:	08006165 	.word	0x08006165
 8005818:	004005ff 	.word	0x004005ff

0800581c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08c      	sub	sp, #48	; 0x30
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d107      	bne.n	8005844 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e0c6      	b.n	80059d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	f040 80bf 	bne.w	80059d0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	441a      	add	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005862:	429a      	cmp	r2, r3
 8005864:	d907      	bls.n	8005876 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e0ad      	b.n	80059d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2203      	movs	r2, #3
 800587a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2200      	movs	r2, #0
 8005884:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 021a 	orr.w	r2, r2, #26
 8005894:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	4a50      	ldr	r2, [pc, #320]	; (80059dc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800589c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a2:	4a4f      	ldr	r2, [pc, #316]	; (80059e0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80058a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058aa:	2200      	movs	r2, #0
 80058ac:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d002      	beq.n	80058bc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80058b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b8:	025b      	lsls	r3, r3, #9
 80058ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d90a      	bls.n	80058d8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	22a0      	movs	r2, #160	; 0xa0
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058ce:	4618      	mov	r0, r3
 80058d0:	f001 fd82 	bl	80073d8 <SDMMC_CmdWriteMultiBlock>
 80058d4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80058d6:	e009      	b.n	80058ec <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2290      	movs	r2, #144	; 0x90
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058e4:	4618      	mov	r0, r3
 80058e6:	f001 fd55 	bl	8007394 <SDMMC_CmdWriteSingleBlock>
 80058ea:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80058ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d012      	beq.n	8005918 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a3b      	ldr	r2, [pc, #236]	; (80059e4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005900:	431a      	orrs	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e05c      	b.n	80059d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0208 	orr.w	r2, r2, #8
 8005926:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592c:	2240      	movs	r2, #64	; 0x40
 800592e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005950:	68b9      	ldr	r1, [r7, #8]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3380      	adds	r3, #128	; 0x80
 8005958:	461a      	mov	r2, r3
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	025b      	lsls	r3, r3, #9
 800595e:	089b      	lsrs	r3, r3, #2
 8005960:	f7fc fd38 	bl	80023d4 <HAL_DMA_Start_IT>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01a      	beq.n	80059a0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 021a 	bic.w	r2, r2, #26
 8005978:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a19      	ldr	r2, [pc, #100]	; (80059e4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005980:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e018      	b.n	80059d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80059a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059a4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	025b      	lsls	r3, r3, #9
 80059aa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80059ac:	2390      	movs	r3, #144	; 0x90
 80059ae:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80059b8:	2301      	movs	r3, #1
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f107 0210 	add.w	r2, r7, #16
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 fc52 	bl	8007270 <SDMMC_ConfigData>

      return HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e000      	b.n	80059d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80059d0:	2302      	movs	r3, #2
  }
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3730      	adds	r7, #48	; 0x30
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	080060c9 	.word	0x080060c9
 80059e0:	08006165 	.word	0x08006165
 80059e4:	004005ff 	.word	0x004005ff

080059e8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_SD_IRQHandler+0x2e>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fdec 	bl	80065ec <SD_Read_IT>
 8005a14:	e15a      	b.n	8005ccc <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 808d 	beq.w	8005b40 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a2e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	4b9a      	ldr	r3, [pc, #616]	; (8005ca4 <HAL_SD_IRQHandler+0x2bc>)
 8005a3c:	400b      	ands	r3, r1
 8005a3e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0201 	bic.w	r2, r2, #1
 8005a4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d039      	beq.n	8005ace <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <HAL_SD_IRQHandler+0x86>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d011      	beq.n	8005a92 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 fcd2 	bl	800741c <SDMMC_CmdStopTransfer>
 8005a78:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f921 	bl	8005cd4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f240 523a 	movw	r2, #1338	; 0x53a
 8005a9a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d104      	bne.n	8005abe <HAL_SD_IRQHandler+0xd6>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f003 fd3c 	bl	800953c <HAL_SD_RxCpltCallback>
 8005ac4:	e102      	b.n	8005ccc <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f003 fd2e 	bl	8009528 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005acc:	e0fe      	b.n	8005ccc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 80f9 	beq.w	8005ccc <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d011      	beq.n	8005b08 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f001 fc97 	bl	800741c <SDMMC_CmdStopTransfer>
 8005aee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d008      	beq.n	8005b08 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f8e6 	bl	8005cd4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f040 80dc 	bne.w	8005ccc <HAL_SD_IRQHandler+0x2e4>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f040 80d6 	bne.w	8005ccc <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0208 	bic.w	r2, r2, #8
 8005b2e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f003 fcf5 	bl	8009528 <HAL_SD_TxCpltCallback>
}
 8005b3e:	e0c5      	b.n	8005ccc <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <HAL_SD_IRQHandler+0x178>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fd98 	bl	800668e <SD_Write_IT>
 8005b5e:	e0b5      	b.n	8005ccc <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b66:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 80ae 	beq.w	8005ccc <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	f043 0202 	orr.w	r2, r3, #2
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	f043 0208 	orr.w	r2, r3, #8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d005      	beq.n	8005bbe <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	f043 0220 	orr.w	r2, r3, #32
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc4:	f003 0310 	and.w	r3, r3, #16
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	f043 0210 	orr.w	r2, r3, #16
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f240 523a 	movw	r2, #1338	; 0x53a
 8005be0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005bf0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 fc10 	bl	800741c <SDMMC_CmdStopTransfer>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00a      	beq.n	8005c28 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f857 	bl	8005cd4 <HAL_SD_ErrorCallback>
}
 8005c26:	e051      	b.n	8005ccc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d04c      	beq.n	8005ccc <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d104      	bne.n	8005c46 <HAL_SD_IRQHandler+0x25e>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d011      	beq.n	8005c6a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4a:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <HAL_SD_IRQHandler+0x2c0>)
 8005c4c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fc fc1e 	bl	8002494 <HAL_DMA_Abort_IT>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d036      	beq.n	8005ccc <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fad0 	bl	8006208 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005c68:	e030      	b.n	8005ccc <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d104      	bne.n	8005c7e <HAL_SD_IRQHandler+0x296>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d018      	beq.n	8005cb0 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	4a0a      	ldr	r2, [pc, #40]	; (8005cac <HAL_SD_IRQHandler+0x2c4>)
 8005c84:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fc fc02 	bl	8002494 <HAL_DMA_Abort_IT>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d01a      	beq.n	8005ccc <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 faeb 	bl	8006276 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005ca0:	e014      	b.n	8005ccc <HAL_SD_IRQHandler+0x2e4>
 8005ca2:	bf00      	nop
 8005ca4:	ffff3ec5 	.word	0xffff3ec5
 8005ca8:	08006209 	.word	0x08006209
 8005cac:	08006277 	.word	0x08006277
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f003 fc25 	bl	8009514 <HAL_SD_AbortCallback>
}
 8005cca:	e7ff      	b.n	8005ccc <HAL_SD_IRQHandler+0x2e4>
 8005ccc:	bf00      	nop
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf6:	0f9b      	lsrs	r3, r3, #30
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d02:	0e9b      	lsrs	r3, r3, #26
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d14:	0e1b      	lsrs	r3, r3, #24
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f003 0303 	and.w	r3, r3, #3
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d26:	0c1b      	lsrs	r3, r3, #16
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d32:	0a1b      	lsrs	r3, r3, #8
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d48:	0d1b      	lsrs	r3, r3, #20
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d54:	0c1b      	lsrs	r3, r3, #16
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d66:	0bdb      	lsrs	r3, r3, #15
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d78:	0b9b      	lsrs	r3, r3, #14
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d8a:	0b5b      	lsrs	r3, r3, #13
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d9c:	0b1b      	lsrs	r3, r3, #12
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2200      	movs	r2, #0
 8005dae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d163      	bne.n	8005e80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dbc:	009a      	lsls	r2, r3, #2
 8005dbe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005dc8:	0f92      	lsrs	r2, r2, #30
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd4:	0edb      	lsrs	r3, r3, #27
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de6:	0e1b      	lsrs	r3, r3, #24
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df8:	0d5b      	lsrs	r3, r3, #21
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e0a:	0c9b      	lsrs	r3, r3, #18
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e1c:	0bdb      	lsrs	r3, r3, #15
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	7e1b      	ldrb	r3, [r3, #24]
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	3302      	adds	r3, #2
 8005e40:	2201      	movs	r2, #1
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005e4a:	fb03 f202 	mul.w	r2, r3, r2
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	7a1b      	ldrb	r3, [r3, #8]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	409a      	lsls	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005e6c:	0a52      	lsrs	r2, r2, #9
 8005e6e:	fb03 f202 	mul.w	r2, r3, r2
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e7c:	661a      	str	r2, [r3, #96]	; 0x60
 8005e7e:	e031      	b.n	8005ee4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d11d      	bne.n	8005ec4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e8c:	041b      	lsls	r3, r3, #16
 8005e8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e96:	0c1b      	lsrs	r3, r3, #16
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	029a      	lsls	r2, r3, #10
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	661a      	str	r2, [r3, #96]	; 0x60
 8005ec2:	e00f      	b.n	8005ee4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a58      	ldr	r2, [pc, #352]	; (800602c <HAL_SD_GetCardCSD+0x344>)
 8005eca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e09d      	b.n	8006020 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ee8:	0b9b      	lsrs	r3, r3, #14
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005efa:	09db      	lsrs	r3, r3, #7
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1c:	0fdb      	lsrs	r3, r3, #31
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f28:	0f5b      	lsrs	r3, r3, #29
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	f003 0303 	and.w	r3, r3, #3
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3a:	0e9b      	lsrs	r3, r3, #26
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4c:	0d9b      	lsrs	r3, r3, #22
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	f003 030f 	and.w	r3, r3, #15
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	0d5b      	lsrs	r3, r3, #21
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7a:	0c1b      	lsrs	r3, r3, #16
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8e:	0bdb      	lsrs	r3, r3, #15
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa2:	0b9b      	lsrs	r3, r3, #14
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	0b5b      	lsrs	r3, r3, #13
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fca:	0b1b      	lsrs	r3, r3, #12
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	0a9b      	lsrs	r3, r3, #10
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	f003 0303 	and.w	r3, r3, #3
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff2:	0a1b      	lsrs	r3, r3, #8
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006006:	085b      	lsrs	r3, r3, #1
 8006008:	b2db      	uxtb	r3, r3
 800600a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800600e:	b2da      	uxtb	r2, r3
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	004005ff 	.word	0x004005ff

08006030 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006094:	f107 030c 	add.w	r3, r7, #12
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa7e 	bl	800659c <SD_SendStatus>
 80060a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	0a5b      	lsrs	r3, r3, #9
 80060b8:	f003 030f 	and.w	r3, r3, #15
 80060bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80060be:	693b      	ldr	r3, [r7, #16]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060e4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80060e6:	bf00      	nop
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006104:	2b82      	cmp	r3, #130	; 0x82
 8006106:	d111      	bne.n	800612c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f001 f985 	bl	800741c <SDMMC_CmdStopTransfer>
 8006112:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d008      	beq.n	800612c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	431a      	orrs	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f7ff fdd4 	bl	8005cd4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0208 	bic.w	r2, r2, #8
 800613a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f240 523a 	movw	r2, #1338	; 0x53a
 8006144:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f003 f9f1 	bl	800953c <HAL_SD_RxCpltCallback>
#endif
}
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fc fb3a 	bl	80027ec <HAL_DMA_GetError>
 8006178:	4603      	mov	r3, r0
 800617a:	2b02      	cmp	r3, #2
 800617c:	d03e      	beq.n	80061fc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006184:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d002      	beq.n	800619a <SD_DMAError+0x36>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d12d      	bne.n	80061f6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a19      	ldr	r2, [pc, #100]	; (8006204 <SD_DMAError+0xa0>)
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80061b0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80061be:	6978      	ldr	r0, [r7, #20]
 80061c0:	f7ff ff62 	bl	8006088 <HAL_SD_GetCardState>
 80061c4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b06      	cmp	r3, #6
 80061ca:	d002      	beq.n	80061d2 <SD_DMAError+0x6e>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b05      	cmp	r3, #5
 80061d0:	d10a      	bne.n	80061e8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 f920 	bl	800741c <SDMMC_CmdStopTransfer>
 80061dc:	4602      	mov	r2, r0
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	431a      	orrs	r2, r3
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80061f6:	6978      	ldr	r0, [r7, #20]
 80061f8:	f7ff fd6c 	bl	8005cd4 <HAL_SD_ErrorCallback>
#endif
  }
}
 80061fc:	bf00      	nop
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	004005ff 	.word	0x004005ff

08006208 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f240 523a 	movw	r2, #1338	; 0x53a
 800621e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff ff31 	bl	8006088 <HAL_SD_GetCardState>
 8006226:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b06      	cmp	r3, #6
 800623a:	d002      	beq.n	8006242 <SD_DMATxAbort+0x3a>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b05      	cmp	r3, #5
 8006240:	d10a      	bne.n	8006258 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f001 f8e8 	bl	800741c <SDMMC_CmdStopTransfer>
 800624c:	4602      	mov	r2, r0
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006252:	431a      	orrs	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	2b00      	cmp	r3, #0
 800625e:	d103      	bne.n	8006268 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f003 f957 	bl	8009514 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006266:	e002      	b.n	800626e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f7ff fd33 	bl	8005cd4 <HAL_SD_ErrorCallback>
}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f240 523a 	movw	r2, #1338	; 0x53a
 800628c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7ff fefa 	bl	8006088 <HAL_SD_GetCardState>
 8006294:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b06      	cmp	r3, #6
 80062a8:	d002      	beq.n	80062b0 <SD_DMARxAbort+0x3a>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b05      	cmp	r3, #5
 80062ae:	d10a      	bne.n	80062c6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f001 f8b1 	bl	800741c <SDMMC_CmdStopTransfer>
 80062ba:	4602      	mov	r2, r0
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	431a      	orrs	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d103      	bne.n	80062d6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f003 f920 	bl	8009514 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80062d4:	e002      	b.n	80062dc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f7ff fcfc 	bl	8005cd4 <HAL_SD_ErrorCallback>
}
 80062dc:	bf00      	nop
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80062e4:	b5b0      	push	{r4, r5, r7, lr}
 80062e6:	b094      	sub	sp, #80	; 0x50
 80062e8:	af04      	add	r7, sp, #16
 80062ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80062ec:	2301      	movs	r3, #1
 80062ee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 ff63 	bl	80071c0 <SDMMC_GetPowerState>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d102      	bne.n	8006306 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006300:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006304:	e0b8      	b.n	8006478 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630a:	2b03      	cmp	r3, #3
 800630c:	d02f      	beq.n	800636e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f001 f94a 	bl	80075ac <SDMMC_CmdSendCID>
 8006318:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800631a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <SD_InitCard+0x40>
    {
      return errorstate;
 8006320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006322:	e0a9      	b.n	8006478 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2100      	movs	r1, #0
 800632a:	4618      	mov	r0, r3
 800632c:	f000 ff8d 	bl	800724a <SDMMC_GetResponse>
 8006330:	4602      	mov	r2, r0
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2104      	movs	r1, #4
 800633c:	4618      	mov	r0, r3
 800633e:	f000 ff84 	bl	800724a <SDMMC_GetResponse>
 8006342:	4602      	mov	r2, r0
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2108      	movs	r1, #8
 800634e:	4618      	mov	r0, r3
 8006350:	f000 ff7b 	bl	800724a <SDMMC_GetResponse>
 8006354:	4602      	mov	r2, r0
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	210c      	movs	r1, #12
 8006360:	4618      	mov	r0, r3
 8006362:	f000 ff72 	bl	800724a <SDMMC_GetResponse>
 8006366:	4602      	mov	r2, r0
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006372:	2b03      	cmp	r3, #3
 8006374:	d00d      	beq.n	8006392 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f107 020e 	add.w	r2, r7, #14
 800637e:	4611      	mov	r1, r2
 8006380:	4618      	mov	r0, r3
 8006382:	f001 f950 	bl	8007626 <SDMMC_CmdSetRelAdd>
 8006386:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <SD_InitCard+0xae>
    {
      return errorstate;
 800638e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006390:	e072      	b.n	8006478 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006396:	2b03      	cmp	r3, #3
 8006398:	d036      	beq.n	8006408 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800639a:	89fb      	ldrh	r3, [r7, #14]
 800639c:	461a      	mov	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063aa:	041b      	lsls	r3, r3, #16
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	f001 f91a 	bl	80075e8 <SDMMC_CmdSendCSD>
 80063b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80063b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80063bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063be:	e05b      	b.n	8006478 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2100      	movs	r1, #0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 ff3f 	bl	800724a <SDMMC_GetResponse>
 80063cc:	4602      	mov	r2, r0
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2104      	movs	r1, #4
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 ff36 	bl	800724a <SDMMC_GetResponse>
 80063de:	4602      	mov	r2, r0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2108      	movs	r1, #8
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 ff2d 	bl	800724a <SDMMC_GetResponse>
 80063f0:	4602      	mov	r2, r0
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	210c      	movs	r1, #12
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 ff24 	bl	800724a <SDMMC_GetResponse>
 8006402:	4602      	mov	r2, r0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2104      	movs	r1, #4
 800640e:	4618      	mov	r0, r3
 8006410:	f000 ff1b 	bl	800724a <SDMMC_GetResponse>
 8006414:	4603      	mov	r3, r0
 8006416:	0d1a      	lsrs	r2, r3, #20
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800641c:	f107 0310 	add.w	r3, r7, #16
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7ff fc60 	bl	8005ce8 <HAL_SD_GetCardCSD>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800642e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006432:	e021      	b.n	8006478 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6819      	ldr	r1, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643c:	041b      	lsls	r3, r3, #16
 800643e:	2200      	movs	r2, #0
 8006440:	461c      	mov	r4, r3
 8006442:	4615      	mov	r5, r2
 8006444:	4622      	mov	r2, r4
 8006446:	462b      	mov	r3, r5
 8006448:	4608      	mov	r0, r1
 800644a:	f001 f809 	bl	8007460 <SDMMC_CmdSelDesel>
 800644e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <SD_InitCard+0x176>
  {
    return errorstate;
 8006456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006458:	e00e      	b.n	8006478 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681d      	ldr	r5, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	466c      	mov	r4, sp
 8006462:	f103 0210 	add.w	r2, r3, #16
 8006466:	ca07      	ldmia	r2, {r0, r1, r2}
 8006468:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800646c:	3304      	adds	r3, #4
 800646e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006470:	4628      	mov	r0, r5
 8006472:	f000 fe4d 	bl	8007110 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3740      	adds	r7, #64	; 0x40
 800647c:	46bd      	mov	sp, r7
 800647e:	bdb0      	pop	{r4, r5, r7, pc}

08006480 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	2300      	movs	r3, #0
 8006492:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4618      	mov	r0, r3
 800649a:	f001 f804 	bl	80074a6 <SDMMC_CmdGoIdleState>
 800649e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <SD_PowerON+0x2a>
  {
    return errorstate;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	e072      	b.n	8006590 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 f817 	bl	80074e2 <SDMMC_CmdOperCond>
 80064b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00d      	beq.n	80064d8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 ffed 	bl	80074a6 <SDMMC_CmdGoIdleState>
 80064cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d004      	beq.n	80064de <SD_PowerON+0x5e>
    {
      return errorstate;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	e05b      	b.n	8006590 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d137      	bne.n	8006556 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2100      	movs	r1, #0
 80064ec:	4618      	mov	r0, r3
 80064ee:	f001 f817 	bl	8007520 <SDMMC_CmdAppCommand>
 80064f2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d02d      	beq.n	8006556 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80064fe:	e047      	b.n	8006590 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2100      	movs	r1, #0
 8006506:	4618      	mov	r0, r3
 8006508:	f001 f80a 	bl	8007520 <SDMMC_CmdAppCommand>
 800650c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <SD_PowerON+0x98>
    {
      return errorstate;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	e03b      	b.n	8006590 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	491e      	ldr	r1, [pc, #120]	; (8006598 <SD_PowerON+0x118>)
 800651e:	4618      	mov	r0, r3
 8006520:	f001 f820 	bl	8007564 <SDMMC_CmdAppOperCommand>
 8006524:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800652c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006530:	e02e      	b.n	8006590 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2100      	movs	r1, #0
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fe86 	bl	800724a <SDMMC_GetResponse>
 800653e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	0fdb      	lsrs	r3, r3, #31
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <SD_PowerON+0xcc>
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <SD_PowerON+0xce>
 800654c:	2300      	movs	r3, #0
 800654e:	613b      	str	r3, [r7, #16]

    count++;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	3301      	adds	r3, #1
 8006554:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800655c:	4293      	cmp	r3, r2
 800655e:	d802      	bhi.n	8006566 <SD_PowerON+0xe6>
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0cc      	beq.n	8006500 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800656c:	4293      	cmp	r3, r2
 800656e:	d902      	bls.n	8006576 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006574:	e00c      	b.n	8006590 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	645a      	str	r2, [r3, #68]	; 0x44
 8006586:	e002      	b.n	800658e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	c1100000 	.word	0xc1100000

0800659c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d102      	bne.n	80065b2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80065ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065b0:	e018      	b.n	80065e4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ba:	041b      	lsls	r3, r3, #16
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f001 f852 	bl	8007668 <SDMMC_CmdSendStatus>
 80065c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	e009      	b.n	80065e4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2100      	movs	r1, #0
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fe37 	bl	800724a <SDMMC_GetResponse>
 80065dc:	4602      	mov	r2, r0
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d03f      	beq.n	8006686 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	e033      	b.n	8006674 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fda9 	bl	8007168 <SDMMC_ReadFIFO>
 8006616:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	b2da      	uxtb	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3301      	adds	r3, #1
 8006624:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	3b01      	subs	r3, #1
 800662a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	0a1b      	lsrs	r3, r3, #8
 8006630:	b2da      	uxtb	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3301      	adds	r3, #1
 800663a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	3b01      	subs	r3, #1
 8006640:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	0c1b      	lsrs	r3, r3, #16
 8006646:	b2da      	uxtb	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3301      	adds	r3, #1
 8006650:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3b01      	subs	r3, #1
 8006656:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	0e1b      	lsrs	r3, r3, #24
 800665c:	b2da      	uxtb	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3301      	adds	r3, #1
 8006666:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	3b01      	subs	r3, #1
 800666c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	3301      	adds	r3, #1
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b07      	cmp	r3, #7
 8006678:	d9c8      	bls.n	800660c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006686:	bf00      	nop
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b086      	sub	sp, #24
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d043      	beq.n	8006730 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	e037      	b.n	800671e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3301      	adds	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	3b01      	subs	r3, #1
 80066be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	021a      	lsls	r2, r3, #8
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3301      	adds	r3, #1
 80066d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	041a      	lsls	r2, r3, #16
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3301      	adds	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	061a      	lsls	r2, r3, #24
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3301      	adds	r3, #1
 8006700:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	3b01      	subs	r3, #1
 8006706:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f107 0208 	add.w	r2, r7, #8
 8006710:	4611      	mov	r1, r2
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fd35 	bl	8007182 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	3301      	adds	r3, #1
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b07      	cmp	r3, #7
 8006722:	d9c4      	bls.n	80066ae <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006730:	bf00      	nop
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e040      	b.n	80067cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fa fcca 	bl	80010f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2224      	movs	r2, #36	; 0x24
 8006764:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0201 	bic.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f8b0 	bl	80068dc <UART_SetConfig>
 800677c:	4603      	mov	r3, r0
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e022      	b.n	80067cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fb08 	bl	8006da4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fb8f 	bl	8006ee8 <UART_CheckIdleState>
 80067ca:	4603      	mov	r3, r0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08a      	sub	sp, #40	; 0x28
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	4613      	mov	r3, r2
 80067e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d171      	bne.n	80068d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <HAL_UART_Transmit+0x24>
 80067f2:	88fb      	ldrh	r3, [r7, #6]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e06a      	b.n	80068d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2221      	movs	r2, #33	; 0x21
 8006808:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800680a:	f7fa fe5f 	bl	80014cc <HAL_GetTick>
 800680e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	88fa      	ldrh	r2, [r7, #6]
 8006814:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	88fa      	ldrh	r2, [r7, #6]
 800681c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006828:	d108      	bne.n	800683c <HAL_UART_Transmit+0x68>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d104      	bne.n	800683c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006832:	2300      	movs	r3, #0
 8006834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	e003      	b.n	8006844 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006840:	2300      	movs	r3, #0
 8006842:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006844:	e02c      	b.n	80068a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2200      	movs	r2, #0
 800684e:	2180      	movs	r1, #128	; 0x80
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 fb96 	bl	8006f82 <UART_WaitOnFlagUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e038      	b.n	80068d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10b      	bne.n	800687e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006874:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	3302      	adds	r3, #2
 800687a:	61bb      	str	r3, [r7, #24]
 800687c:	e007      	b.n	800688e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	3301      	adds	r3, #1
 800688c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1cc      	bne.n	8006846 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2200      	movs	r2, #0
 80068b4:	2140      	movs	r1, #64	; 0x40
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 fb63 	bl	8006f82 <UART_WaitOnFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e005      	b.n	80068d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2220      	movs	r2, #32
 80068ca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	e000      	b.n	80068d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80068d0:	2302      	movs	r3, #2
  }
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3720      	adds	r7, #32
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	4ba6      	ldr	r3, [pc, #664]	; (8006ba0 <UART_SetConfig+0x2c4>)
 8006908:	4013      	ands	r3, r2
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6812      	ldr	r2, [r2, #0]
 800690e:	6979      	ldr	r1, [r7, #20]
 8006910:	430b      	orrs	r3, r1
 8006912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4313      	orrs	r3, r2
 8006938:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	430a      	orrs	r2, r1
 800694c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a94      	ldr	r2, [pc, #592]	; (8006ba4 <UART_SetConfig+0x2c8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d120      	bne.n	800699a <UART_SetConfig+0xbe>
 8006958:	4b93      	ldr	r3, [pc, #588]	; (8006ba8 <UART_SetConfig+0x2cc>)
 800695a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	2b03      	cmp	r3, #3
 8006964:	d816      	bhi.n	8006994 <UART_SetConfig+0xb8>
 8006966:	a201      	add	r2, pc, #4	; (adr r2, 800696c <UART_SetConfig+0x90>)
 8006968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696c:	0800697d 	.word	0x0800697d
 8006970:	08006989 	.word	0x08006989
 8006974:	08006983 	.word	0x08006983
 8006978:	0800698f 	.word	0x0800698f
 800697c:	2301      	movs	r3, #1
 800697e:	77fb      	strb	r3, [r7, #31]
 8006980:	e150      	b.n	8006c24 <UART_SetConfig+0x348>
 8006982:	2302      	movs	r3, #2
 8006984:	77fb      	strb	r3, [r7, #31]
 8006986:	e14d      	b.n	8006c24 <UART_SetConfig+0x348>
 8006988:	2304      	movs	r3, #4
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	e14a      	b.n	8006c24 <UART_SetConfig+0x348>
 800698e:	2308      	movs	r3, #8
 8006990:	77fb      	strb	r3, [r7, #31]
 8006992:	e147      	b.n	8006c24 <UART_SetConfig+0x348>
 8006994:	2310      	movs	r3, #16
 8006996:	77fb      	strb	r3, [r7, #31]
 8006998:	e144      	b.n	8006c24 <UART_SetConfig+0x348>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a83      	ldr	r2, [pc, #524]	; (8006bac <UART_SetConfig+0x2d0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d132      	bne.n	8006a0a <UART_SetConfig+0x12e>
 80069a4:	4b80      	ldr	r3, [pc, #512]	; (8006ba8 <UART_SetConfig+0x2cc>)
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069aa:	f003 030c 	and.w	r3, r3, #12
 80069ae:	2b0c      	cmp	r3, #12
 80069b0:	d828      	bhi.n	8006a04 <UART_SetConfig+0x128>
 80069b2:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <UART_SetConfig+0xdc>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	080069ed 	.word	0x080069ed
 80069bc:	08006a05 	.word	0x08006a05
 80069c0:	08006a05 	.word	0x08006a05
 80069c4:	08006a05 	.word	0x08006a05
 80069c8:	080069f9 	.word	0x080069f9
 80069cc:	08006a05 	.word	0x08006a05
 80069d0:	08006a05 	.word	0x08006a05
 80069d4:	08006a05 	.word	0x08006a05
 80069d8:	080069f3 	.word	0x080069f3
 80069dc:	08006a05 	.word	0x08006a05
 80069e0:	08006a05 	.word	0x08006a05
 80069e4:	08006a05 	.word	0x08006a05
 80069e8:	080069ff 	.word	0x080069ff
 80069ec:	2300      	movs	r3, #0
 80069ee:	77fb      	strb	r3, [r7, #31]
 80069f0:	e118      	b.n	8006c24 <UART_SetConfig+0x348>
 80069f2:	2302      	movs	r3, #2
 80069f4:	77fb      	strb	r3, [r7, #31]
 80069f6:	e115      	b.n	8006c24 <UART_SetConfig+0x348>
 80069f8:	2304      	movs	r3, #4
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e112      	b.n	8006c24 <UART_SetConfig+0x348>
 80069fe:	2308      	movs	r3, #8
 8006a00:	77fb      	strb	r3, [r7, #31]
 8006a02:	e10f      	b.n	8006c24 <UART_SetConfig+0x348>
 8006a04:	2310      	movs	r3, #16
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e10c      	b.n	8006c24 <UART_SetConfig+0x348>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a68      	ldr	r2, [pc, #416]	; (8006bb0 <UART_SetConfig+0x2d4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d120      	bne.n	8006a56 <UART_SetConfig+0x17a>
 8006a14:	4b64      	ldr	r3, [pc, #400]	; (8006ba8 <UART_SetConfig+0x2cc>)
 8006a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a1e:	2b30      	cmp	r3, #48	; 0x30
 8006a20:	d013      	beq.n	8006a4a <UART_SetConfig+0x16e>
 8006a22:	2b30      	cmp	r3, #48	; 0x30
 8006a24:	d814      	bhi.n	8006a50 <UART_SetConfig+0x174>
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d009      	beq.n	8006a3e <UART_SetConfig+0x162>
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	d810      	bhi.n	8006a50 <UART_SetConfig+0x174>
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <UART_SetConfig+0x15c>
 8006a32:	2b10      	cmp	r3, #16
 8006a34:	d006      	beq.n	8006a44 <UART_SetConfig+0x168>
 8006a36:	e00b      	b.n	8006a50 <UART_SetConfig+0x174>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e0f2      	b.n	8006c24 <UART_SetConfig+0x348>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	77fb      	strb	r3, [r7, #31]
 8006a42:	e0ef      	b.n	8006c24 <UART_SetConfig+0x348>
 8006a44:	2304      	movs	r3, #4
 8006a46:	77fb      	strb	r3, [r7, #31]
 8006a48:	e0ec      	b.n	8006c24 <UART_SetConfig+0x348>
 8006a4a:	2308      	movs	r3, #8
 8006a4c:	77fb      	strb	r3, [r7, #31]
 8006a4e:	e0e9      	b.n	8006c24 <UART_SetConfig+0x348>
 8006a50:	2310      	movs	r3, #16
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e0e6      	b.n	8006c24 <UART_SetConfig+0x348>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a56      	ldr	r2, [pc, #344]	; (8006bb4 <UART_SetConfig+0x2d8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d120      	bne.n	8006aa2 <UART_SetConfig+0x1c6>
 8006a60:	4b51      	ldr	r3, [pc, #324]	; (8006ba8 <UART_SetConfig+0x2cc>)
 8006a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a6c:	d013      	beq.n	8006a96 <UART_SetConfig+0x1ba>
 8006a6e:	2bc0      	cmp	r3, #192	; 0xc0
 8006a70:	d814      	bhi.n	8006a9c <UART_SetConfig+0x1c0>
 8006a72:	2b80      	cmp	r3, #128	; 0x80
 8006a74:	d009      	beq.n	8006a8a <UART_SetConfig+0x1ae>
 8006a76:	2b80      	cmp	r3, #128	; 0x80
 8006a78:	d810      	bhi.n	8006a9c <UART_SetConfig+0x1c0>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <UART_SetConfig+0x1a8>
 8006a7e:	2b40      	cmp	r3, #64	; 0x40
 8006a80:	d006      	beq.n	8006a90 <UART_SetConfig+0x1b4>
 8006a82:	e00b      	b.n	8006a9c <UART_SetConfig+0x1c0>
 8006a84:	2300      	movs	r3, #0
 8006a86:	77fb      	strb	r3, [r7, #31]
 8006a88:	e0cc      	b.n	8006c24 <UART_SetConfig+0x348>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	77fb      	strb	r3, [r7, #31]
 8006a8e:	e0c9      	b.n	8006c24 <UART_SetConfig+0x348>
 8006a90:	2304      	movs	r3, #4
 8006a92:	77fb      	strb	r3, [r7, #31]
 8006a94:	e0c6      	b.n	8006c24 <UART_SetConfig+0x348>
 8006a96:	2308      	movs	r3, #8
 8006a98:	77fb      	strb	r3, [r7, #31]
 8006a9a:	e0c3      	b.n	8006c24 <UART_SetConfig+0x348>
 8006a9c:	2310      	movs	r3, #16
 8006a9e:	77fb      	strb	r3, [r7, #31]
 8006aa0:	e0c0      	b.n	8006c24 <UART_SetConfig+0x348>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a44      	ldr	r2, [pc, #272]	; (8006bb8 <UART_SetConfig+0x2dc>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d125      	bne.n	8006af8 <UART_SetConfig+0x21c>
 8006aac:	4b3e      	ldr	r3, [pc, #248]	; (8006ba8 <UART_SetConfig+0x2cc>)
 8006aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aba:	d017      	beq.n	8006aec <UART_SetConfig+0x210>
 8006abc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ac0:	d817      	bhi.n	8006af2 <UART_SetConfig+0x216>
 8006ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac6:	d00b      	beq.n	8006ae0 <UART_SetConfig+0x204>
 8006ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006acc:	d811      	bhi.n	8006af2 <UART_SetConfig+0x216>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <UART_SetConfig+0x1fe>
 8006ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad6:	d006      	beq.n	8006ae6 <UART_SetConfig+0x20a>
 8006ad8:	e00b      	b.n	8006af2 <UART_SetConfig+0x216>
 8006ada:	2300      	movs	r3, #0
 8006adc:	77fb      	strb	r3, [r7, #31]
 8006ade:	e0a1      	b.n	8006c24 <UART_SetConfig+0x348>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	77fb      	strb	r3, [r7, #31]
 8006ae4:	e09e      	b.n	8006c24 <UART_SetConfig+0x348>
 8006ae6:	2304      	movs	r3, #4
 8006ae8:	77fb      	strb	r3, [r7, #31]
 8006aea:	e09b      	b.n	8006c24 <UART_SetConfig+0x348>
 8006aec:	2308      	movs	r3, #8
 8006aee:	77fb      	strb	r3, [r7, #31]
 8006af0:	e098      	b.n	8006c24 <UART_SetConfig+0x348>
 8006af2:	2310      	movs	r3, #16
 8006af4:	77fb      	strb	r3, [r7, #31]
 8006af6:	e095      	b.n	8006c24 <UART_SetConfig+0x348>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a2f      	ldr	r2, [pc, #188]	; (8006bbc <UART_SetConfig+0x2e0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d125      	bne.n	8006b4e <UART_SetConfig+0x272>
 8006b02:	4b29      	ldr	r3, [pc, #164]	; (8006ba8 <UART_SetConfig+0x2cc>)
 8006b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b10:	d017      	beq.n	8006b42 <UART_SetConfig+0x266>
 8006b12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b16:	d817      	bhi.n	8006b48 <UART_SetConfig+0x26c>
 8006b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b1c:	d00b      	beq.n	8006b36 <UART_SetConfig+0x25a>
 8006b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b22:	d811      	bhi.n	8006b48 <UART_SetConfig+0x26c>
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <UART_SetConfig+0x254>
 8006b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b2c:	d006      	beq.n	8006b3c <UART_SetConfig+0x260>
 8006b2e:	e00b      	b.n	8006b48 <UART_SetConfig+0x26c>
 8006b30:	2301      	movs	r3, #1
 8006b32:	77fb      	strb	r3, [r7, #31]
 8006b34:	e076      	b.n	8006c24 <UART_SetConfig+0x348>
 8006b36:	2302      	movs	r3, #2
 8006b38:	77fb      	strb	r3, [r7, #31]
 8006b3a:	e073      	b.n	8006c24 <UART_SetConfig+0x348>
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	77fb      	strb	r3, [r7, #31]
 8006b40:	e070      	b.n	8006c24 <UART_SetConfig+0x348>
 8006b42:	2308      	movs	r3, #8
 8006b44:	77fb      	strb	r3, [r7, #31]
 8006b46:	e06d      	b.n	8006c24 <UART_SetConfig+0x348>
 8006b48:	2310      	movs	r3, #16
 8006b4a:	77fb      	strb	r3, [r7, #31]
 8006b4c:	e06a      	b.n	8006c24 <UART_SetConfig+0x348>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a1b      	ldr	r2, [pc, #108]	; (8006bc0 <UART_SetConfig+0x2e4>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d138      	bne.n	8006bca <UART_SetConfig+0x2ee>
 8006b58:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <UART_SetConfig+0x2cc>)
 8006b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006b62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b66:	d017      	beq.n	8006b98 <UART_SetConfig+0x2bc>
 8006b68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b6c:	d82a      	bhi.n	8006bc4 <UART_SetConfig+0x2e8>
 8006b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b72:	d00b      	beq.n	8006b8c <UART_SetConfig+0x2b0>
 8006b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b78:	d824      	bhi.n	8006bc4 <UART_SetConfig+0x2e8>
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <UART_SetConfig+0x2aa>
 8006b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b82:	d006      	beq.n	8006b92 <UART_SetConfig+0x2b6>
 8006b84:	e01e      	b.n	8006bc4 <UART_SetConfig+0x2e8>
 8006b86:	2300      	movs	r3, #0
 8006b88:	77fb      	strb	r3, [r7, #31]
 8006b8a:	e04b      	b.n	8006c24 <UART_SetConfig+0x348>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	77fb      	strb	r3, [r7, #31]
 8006b90:	e048      	b.n	8006c24 <UART_SetConfig+0x348>
 8006b92:	2304      	movs	r3, #4
 8006b94:	77fb      	strb	r3, [r7, #31]
 8006b96:	e045      	b.n	8006c24 <UART_SetConfig+0x348>
 8006b98:	2308      	movs	r3, #8
 8006b9a:	77fb      	strb	r3, [r7, #31]
 8006b9c:	e042      	b.n	8006c24 <UART_SetConfig+0x348>
 8006b9e:	bf00      	nop
 8006ba0:	efff69f3 	.word	0xefff69f3
 8006ba4:	40011000 	.word	0x40011000
 8006ba8:	40023800 	.word	0x40023800
 8006bac:	40004400 	.word	0x40004400
 8006bb0:	40004800 	.word	0x40004800
 8006bb4:	40004c00 	.word	0x40004c00
 8006bb8:	40005000 	.word	0x40005000
 8006bbc:	40011400 	.word	0x40011400
 8006bc0:	40007800 	.word	0x40007800
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	77fb      	strb	r3, [r7, #31]
 8006bc8:	e02c      	b.n	8006c24 <UART_SetConfig+0x348>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a72      	ldr	r2, [pc, #456]	; (8006d98 <UART_SetConfig+0x4bc>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d125      	bne.n	8006c20 <UART_SetConfig+0x344>
 8006bd4:	4b71      	ldr	r3, [pc, #452]	; (8006d9c <UART_SetConfig+0x4c0>)
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006bde:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006be2:	d017      	beq.n	8006c14 <UART_SetConfig+0x338>
 8006be4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006be8:	d817      	bhi.n	8006c1a <UART_SetConfig+0x33e>
 8006bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bee:	d00b      	beq.n	8006c08 <UART_SetConfig+0x32c>
 8006bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf4:	d811      	bhi.n	8006c1a <UART_SetConfig+0x33e>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <UART_SetConfig+0x326>
 8006bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bfe:	d006      	beq.n	8006c0e <UART_SetConfig+0x332>
 8006c00:	e00b      	b.n	8006c1a <UART_SetConfig+0x33e>
 8006c02:	2300      	movs	r3, #0
 8006c04:	77fb      	strb	r3, [r7, #31]
 8006c06:	e00d      	b.n	8006c24 <UART_SetConfig+0x348>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	77fb      	strb	r3, [r7, #31]
 8006c0c:	e00a      	b.n	8006c24 <UART_SetConfig+0x348>
 8006c0e:	2304      	movs	r3, #4
 8006c10:	77fb      	strb	r3, [r7, #31]
 8006c12:	e007      	b.n	8006c24 <UART_SetConfig+0x348>
 8006c14:	2308      	movs	r3, #8
 8006c16:	77fb      	strb	r3, [r7, #31]
 8006c18:	e004      	b.n	8006c24 <UART_SetConfig+0x348>
 8006c1a:	2310      	movs	r3, #16
 8006c1c:	77fb      	strb	r3, [r7, #31]
 8006c1e:	e001      	b.n	8006c24 <UART_SetConfig+0x348>
 8006c20:	2310      	movs	r3, #16
 8006c22:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c2c:	d15b      	bne.n	8006ce6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006c2e:	7ffb      	ldrb	r3, [r7, #31]
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d828      	bhi.n	8006c86 <UART_SetConfig+0x3aa>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <UART_SetConfig+0x360>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c61 	.word	0x08006c61
 8006c40:	08006c69 	.word	0x08006c69
 8006c44:	08006c71 	.word	0x08006c71
 8006c48:	08006c87 	.word	0x08006c87
 8006c4c:	08006c77 	.word	0x08006c77
 8006c50:	08006c87 	.word	0x08006c87
 8006c54:	08006c87 	.word	0x08006c87
 8006c58:	08006c87 	.word	0x08006c87
 8006c5c:	08006c7f 	.word	0x08006c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c60:	f7fd fff2 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 8006c64:	61b8      	str	r0, [r7, #24]
        break;
 8006c66:	e013      	b.n	8006c90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c68:	f7fe f802 	bl	8004c70 <HAL_RCC_GetPCLK2Freq>
 8006c6c:	61b8      	str	r0, [r7, #24]
        break;
 8006c6e:	e00f      	b.n	8006c90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c70:	4b4b      	ldr	r3, [pc, #300]	; (8006da0 <UART_SetConfig+0x4c4>)
 8006c72:	61bb      	str	r3, [r7, #24]
        break;
 8006c74:	e00c      	b.n	8006c90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c76:	f7fd fed5 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 8006c7a:	61b8      	str	r0, [r7, #24]
        break;
 8006c7c:	e008      	b.n	8006c90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c82:	61bb      	str	r3, [r7, #24]
        break;
 8006c84:	e004      	b.n	8006c90 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	77bb      	strb	r3, [r7, #30]
        break;
 8006c8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d074      	beq.n	8006d80 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	005a      	lsls	r2, r3, #1
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	085b      	lsrs	r3, r3, #1
 8006ca0:	441a      	add	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006caa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	2b0f      	cmp	r3, #15
 8006cb0:	d916      	bls.n	8006ce0 <UART_SetConfig+0x404>
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb8:	d212      	bcs.n	8006ce0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f023 030f 	bic.w	r3, r3, #15
 8006cc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	085b      	lsrs	r3, r3, #1
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f003 0307 	and.w	r3, r3, #7
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	89fb      	ldrh	r3, [r7, #14]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	89fa      	ldrh	r2, [r7, #14]
 8006cdc:	60da      	str	r2, [r3, #12]
 8006cde:	e04f      	b.n	8006d80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	77bb      	strb	r3, [r7, #30]
 8006ce4:	e04c      	b.n	8006d80 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ce6:	7ffb      	ldrb	r3, [r7, #31]
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d828      	bhi.n	8006d3e <UART_SetConfig+0x462>
 8006cec:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <UART_SetConfig+0x418>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d21 	.word	0x08006d21
 8006cfc:	08006d29 	.word	0x08006d29
 8006d00:	08006d3f 	.word	0x08006d3f
 8006d04:	08006d2f 	.word	0x08006d2f
 8006d08:	08006d3f 	.word	0x08006d3f
 8006d0c:	08006d3f 	.word	0x08006d3f
 8006d10:	08006d3f 	.word	0x08006d3f
 8006d14:	08006d37 	.word	0x08006d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d18:	f7fd ff96 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 8006d1c:	61b8      	str	r0, [r7, #24]
        break;
 8006d1e:	e013      	b.n	8006d48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d20:	f7fd ffa6 	bl	8004c70 <HAL_RCC_GetPCLK2Freq>
 8006d24:	61b8      	str	r0, [r7, #24]
        break;
 8006d26:	e00f      	b.n	8006d48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d28:	4b1d      	ldr	r3, [pc, #116]	; (8006da0 <UART_SetConfig+0x4c4>)
 8006d2a:	61bb      	str	r3, [r7, #24]
        break;
 8006d2c:	e00c      	b.n	8006d48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d2e:	f7fd fe79 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 8006d32:	61b8      	str	r0, [r7, #24]
        break;
 8006d34:	e008      	b.n	8006d48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d3a:	61bb      	str	r3, [r7, #24]
        break;
 8006d3c:	e004      	b.n	8006d48 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	77bb      	strb	r3, [r7, #30]
        break;
 8006d46:	bf00      	nop
    }

    if (pclk != 0U)
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d018      	beq.n	8006d80 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	085a      	lsrs	r2, r3, #1
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	441a      	add	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b0f      	cmp	r3, #15
 8006d66:	d909      	bls.n	8006d7c <UART_SetConfig+0x4a0>
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d6e:	d205      	bcs.n	8006d7c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	60da      	str	r2, [r3, #12]
 8006d7a:	e001      	b.n	8006d80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3720      	adds	r7, #32
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	40007c00 	.word	0x40007c00
 8006d9c:	40023800 	.word	0x40023800
 8006da0:	00f42400 	.word	0x00f42400

08006da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00a      	beq.n	8006dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00a      	beq.n	8006df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00a      	beq.n	8006e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	f003 0308 	and.w	r3, r3, #8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	f003 0310 	and.w	r3, r3, #16
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00a      	beq.n	8006e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	f003 0320 	and.w	r3, r3, #32
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01a      	beq.n	8006eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ea2:	d10a      	bne.n	8006eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00a      	beq.n	8006edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	605a      	str	r2, [r3, #4]
  }
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af02      	add	r7, sp, #8
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ef8:	f7fa fae8 	bl	80014cc <HAL_GetTick>
 8006efc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0308 	and.w	r3, r3, #8
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d10e      	bne.n	8006f2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f831 	bl	8006f82 <UART_WaitOnFlagUntilTimeout>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e027      	b.n	8006f7a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d10e      	bne.n	8006f56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f81b 	bl	8006f82 <UART_WaitOnFlagUntilTimeout>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e011      	b.n	8006f7a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b09c      	sub	sp, #112	; 0x70
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	603b      	str	r3, [r7, #0]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f92:	e0a7      	b.n	80070e4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f9a:	f000 80a3 	beq.w	80070e4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f9e:	f7fa fa95 	bl	80014cc <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d302      	bcc.n	8006fb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006fae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d13f      	bne.n	8007034 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fc8:	667b      	str	r3, [r7, #100]	; 0x64
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fd4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e6      	bne.n	8006fb4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	f023 0301 	bic.w	r3, r3, #1
 8006ffc:	663b      	str	r3, [r7, #96]	; 0x60
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007006:	64ba      	str	r2, [r7, #72]	; 0x48
 8007008:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800700c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e5      	bne.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2220      	movs	r2, #32
 8007024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e068      	b.n	8007106 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d050      	beq.n	80070e4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800704c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007050:	d148      	bne.n	80070e4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800705a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007070:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707a:	637b      	str	r3, [r7, #52]	; 0x34
 800707c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e6      	bne.n	800705c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3308      	adds	r3, #8
 8007094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	613b      	str	r3, [r7, #16]
   return(result);
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f023 0301 	bic.w	r3, r3, #1
 80070a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3308      	adds	r3, #8
 80070ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070ae:	623a      	str	r2, [r7, #32]
 80070b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	69f9      	ldr	r1, [r7, #28]
 80070b4:	6a3a      	ldr	r2, [r7, #32]
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e5      	bne.n	800708e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2220      	movs	r2, #32
 80070c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e010      	b.n	8007106 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69da      	ldr	r2, [r3, #28]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	4013      	ands	r3, r2
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	bf0c      	ite	eq
 80070f4:	2301      	moveq	r3, #1
 80070f6:	2300      	movne	r3, #0
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	461a      	mov	r2, r3
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	429a      	cmp	r2, r3
 8007100:	f43f af48 	beq.w	8006f94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3770      	adds	r7, #112	; 0x70
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007110:	b084      	sub	sp, #16
 8007112:	b480      	push	{r7}
 8007114:	b085      	sub	sp, #20
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	f107 001c 	add.w	r0, r7, #28
 800711e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007126:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007128:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800712a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800712e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007132:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007136:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800713a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	4b07      	ldr	r3, [pc, #28]	; (8007164 <SDMMC_Init+0x54>)
 8007148:	4013      	ands	r3, r2
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	431a      	orrs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	b004      	add	sp, #16
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	ffff8100 	.word	0xffff8100

08007168 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007176:	4618      	mov	r0, r3
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2203      	movs	r2, #3
 80071b0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0303 	and.w	r3, r3, #3
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071fa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007200:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007206:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	4313      	orrs	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	4b06      	ldr	r3, [pc, #24]	; (800722c <SDMMC_SendCommand+0x50>)
 8007214:	4013      	ands	r3, r2
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	431a      	orrs	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	fffff000 	.word	0xfffff000

08007230 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	b2db      	uxtb	r3, r3
}
 800723e:	4618      	mov	r0, r3
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800724a:	b480      	push	{r7}
 800724c:	b085      	sub	sp, #20
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	3314      	adds	r3, #20
 8007258:	461a      	mov	r2, r3
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	4413      	add	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
}  
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007296:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800729c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80072a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ae:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	431a      	orrs	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0

}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80072d6:	2310      	movs	r3, #16
 80072d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072da:	2340      	movs	r3, #64	; 0x40
 80072dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072de:	2300      	movs	r3, #0
 80072e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072e8:	f107 0308 	add.w	r3, r7, #8
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff ff74 	bl	80071dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80072f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f8:	2110      	movs	r1, #16
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f9d6 	bl	80076ac <SDMMC_GetCmdResp1>
 8007300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007302:	69fb      	ldr	r3, [r7, #28]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3720      	adds	r7, #32
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800731a:	2311      	movs	r3, #17
 800731c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800731e:	2340      	movs	r3, #64	; 0x40
 8007320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007322:	2300      	movs	r3, #0
 8007324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800732a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800732c:	f107 0308 	add.w	r3, r7, #8
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7ff ff52 	bl	80071dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007338:	f241 3288 	movw	r2, #5000	; 0x1388
 800733c:	2111      	movs	r1, #17
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f9b4 	bl	80076ac <SDMMC_GetCmdResp1>
 8007344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007346:	69fb      	ldr	r3, [r7, #28]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3720      	adds	r7, #32
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b088      	sub	sp, #32
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800735e:	2312      	movs	r3, #18
 8007360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007362:	2340      	movs	r3, #64	; 0x40
 8007364:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007366:	2300      	movs	r3, #0
 8007368:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800736a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800736e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007370:	f107 0308 	add.w	r3, r7, #8
 8007374:	4619      	mov	r1, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7ff ff30 	bl	80071dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800737c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007380:	2112      	movs	r1, #18
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f992 	bl	80076ac <SDMMC_GetCmdResp1>
 8007388:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800738a:	69fb      	ldr	r3, [r7, #28]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80073a2:	2318      	movs	r3, #24
 80073a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073a6:	2340      	movs	r3, #64	; 0x40
 80073a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073aa:	2300      	movs	r3, #0
 80073ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073b4:	f107 0308 	add.w	r3, r7, #8
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7ff ff0e 	bl	80071dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80073c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c4:	2118      	movs	r1, #24
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f970 	bl	80076ac <SDMMC_GetCmdResp1>
 80073cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073ce:	69fb      	ldr	r3, [r7, #28]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3720      	adds	r7, #32
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80073e6:	2319      	movs	r3, #25
 80073e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073ea:	2340      	movs	r3, #64	; 0x40
 80073ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073ee:	2300      	movs	r3, #0
 80073f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073f8:	f107 0308 	add.w	r3, r7, #8
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff feec 	bl	80071dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007404:	f241 3288 	movw	r2, #5000	; 0x1388
 8007408:	2119      	movs	r1, #25
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f94e 	bl	80076ac <SDMMC_GetCmdResp1>
 8007410:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007412:	69fb      	ldr	r3, [r7, #28]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3720      	adds	r7, #32
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007428:	230c      	movs	r3, #12
 800742a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800742c:	2340      	movs	r3, #64	; 0x40
 800742e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007430:	2300      	movs	r3, #0
 8007432:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007438:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800743a:	f107 0308 	add.w	r3, r7, #8
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff fecb 	bl	80071dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007446:	4a05      	ldr	r2, [pc, #20]	; (800745c <SDMMC_CmdStopTransfer+0x40>)
 8007448:	210c      	movs	r1, #12
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f92e 	bl	80076ac <SDMMC_GetCmdResp1>
 8007450:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007452:	69fb      	ldr	r3, [r7, #28]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3720      	adds	r7, #32
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	05f5e100 	.word	0x05f5e100

08007460 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08a      	sub	sp, #40	; 0x28
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007470:	2307      	movs	r3, #7
 8007472:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007474:	2340      	movs	r3, #64	; 0x40
 8007476:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007478:	2300      	movs	r3, #0
 800747a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800747c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007480:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007482:	f107 0310 	add.w	r3, r7, #16
 8007486:	4619      	mov	r1, r3
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f7ff fea7 	bl	80071dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800748e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007492:	2107      	movs	r1, #7
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f909 	bl	80076ac <SDMMC_GetCmdResp1>
 800749a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3728      	adds	r7, #40	; 0x28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b088      	sub	sp, #32
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80074b6:	2300      	movs	r3, #0
 80074b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074ba:	2300      	movs	r3, #0
 80074bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074c4:	f107 0308 	add.w	r3, r7, #8
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff fe86 	bl	80071dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fb23 	bl	8007b1c <SDMMC_GetCmdError>
 80074d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074d8:	69fb      	ldr	r3, [r7, #28]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3720      	adds	r7, #32
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b088      	sub	sp, #32
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80074ea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80074ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80074f0:	2308      	movs	r3, #8
 80074f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074f4:	2340      	movs	r3, #64	; 0x40
 80074f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074f8:	2300      	movs	r3, #0
 80074fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007500:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007502:	f107 0308 	add.w	r3, r7, #8
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff fe67 	bl	80071dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fab6 	bl	8007a80 <SDMMC_GetCmdResp7>
 8007514:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007516:	69fb      	ldr	r3, [r7, #28]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3720      	adds	r7, #32
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800752e:	2337      	movs	r3, #55	; 0x37
 8007530:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007532:	2340      	movs	r3, #64	; 0x40
 8007534:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800753a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800753e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007540:	f107 0308 	add.w	r3, r7, #8
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff fe48 	bl	80071dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800754c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007550:	2137      	movs	r1, #55	; 0x37
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f8aa 	bl	80076ac <SDMMC_GetCmdResp1>
 8007558:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800755a:	69fb      	ldr	r3, [r7, #28]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3720      	adds	r7, #32
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b088      	sub	sp, #32
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	4b0d      	ldr	r3, [pc, #52]	; (80075a8 <SDMMC_CmdAppOperCommand+0x44>)
 8007572:	4313      	orrs	r3, r2
 8007574:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007576:	2329      	movs	r3, #41	; 0x29
 8007578:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800757a:	2340      	movs	r3, #64	; 0x40
 800757c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800757e:	2300      	movs	r3, #0
 8007580:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007586:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007588:	f107 0308 	add.w	r3, r7, #8
 800758c:	4619      	mov	r1, r3
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff fe24 	bl	80071dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f9bf 	bl	8007918 <SDMMC_GetCmdResp3>
 800759a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800759c:	69fb      	ldr	r3, [r7, #28]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3720      	adds	r7, #32
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	80100000 	.word	0x80100000

080075ac <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80075b8:	2302      	movs	r3, #2
 80075ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80075bc:	23c0      	movs	r3, #192	; 0xc0
 80075be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075c0:	2300      	movs	r3, #0
 80075c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075ca:	f107 0308 	add.w	r3, r7, #8
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff fe03 	bl	80071dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f956 	bl	8007888 <SDMMC_GetCmdResp2>
 80075dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075de:	69fb      	ldr	r3, [r7, #28]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3720      	adds	r7, #32
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80075f6:	2309      	movs	r3, #9
 80075f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80075fa:	23c0      	movs	r3, #192	; 0xc0
 80075fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007606:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007608:	f107 0308 	add.w	r3, r7, #8
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff fde4 	bl	80071dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f937 	bl	8007888 <SDMMC_GetCmdResp2>
 800761a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800761c:	69fb      	ldr	r3, [r7, #28]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3720      	adds	r7, #32
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b088      	sub	sp, #32
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007634:	2303      	movs	r3, #3
 8007636:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007638:	2340      	movs	r3, #64	; 0x40
 800763a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800763c:	2300      	movs	r3, #0
 800763e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007644:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007646:	f107 0308 	add.w	r3, r7, #8
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7ff fdc5 	bl	80071dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	2103      	movs	r1, #3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f99c 	bl	8007994 <SDMMC_GetCmdResp6>
 800765c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800765e:	69fb      	ldr	r3, [r7, #28]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3720      	adds	r7, #32
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007676:	230d      	movs	r3, #13
 8007678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800767a:	2340      	movs	r3, #64	; 0x40
 800767c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800767e:	2300      	movs	r3, #0
 8007680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007686:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007688:	f107 0308 	add.w	r3, r7, #8
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff fda4 	bl	80071dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007694:	f241 3288 	movw	r2, #5000	; 0x1388
 8007698:	210d      	movs	r1, #13
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f806 	bl	80076ac <SDMMC_GetCmdResp1>
 80076a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076a2:	69fb      	ldr	r3, [r7, #28]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3720      	adds	r7, #32
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	460b      	mov	r3, r1
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076ba:	4b70      	ldr	r3, [pc, #448]	; (800787c <SDMMC_GetCmdResp1+0x1d0>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a70      	ldr	r2, [pc, #448]	; (8007880 <SDMMC_GetCmdResp1+0x1d4>)
 80076c0:	fba2 2303 	umull	r2, r3, r2, r3
 80076c4:	0a5a      	lsrs	r2, r3, #9
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	fb02 f303 	mul.w	r3, r2, r3
 80076cc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	1e5a      	subs	r2, r3, #1
 80076d2:	61fa      	str	r2, [r7, #28]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d102      	bne.n	80076de <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076dc:	e0c9      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0ef      	beq.n	80076ce <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1ea      	bne.n	80076ce <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2204      	movs	r2, #4
 8007708:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800770a:	2304      	movs	r3, #4
 800770c:	e0b1      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007720:	2301      	movs	r3, #1
 8007722:	e0a6      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	22c5      	movs	r2, #197	; 0xc5
 8007728:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f7ff fd80 	bl	8007230 <SDMMC_GetCommandResponse>
 8007730:	4603      	mov	r3, r0
 8007732:	461a      	mov	r2, r3
 8007734:	7afb      	ldrb	r3, [r7, #11]
 8007736:	4293      	cmp	r3, r2
 8007738:	d001      	beq.n	800773e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800773a:	2301      	movs	r3, #1
 800773c:	e099      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800773e:	2100      	movs	r1, #0
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7ff fd82 	bl	800724a <SDMMC_GetResponse>
 8007746:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4b4e      	ldr	r3, [pc, #312]	; (8007884 <SDMMC_GetCmdResp1+0x1d8>)
 800774c:	4013      	ands	r3, r2
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007752:	2300      	movs	r3, #0
 8007754:	e08d      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	2b00      	cmp	r3, #0
 800775a:	da02      	bge.n	8007762 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800775c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007760:	e087      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800776c:	2340      	movs	r3, #64	; 0x40
 800776e:	e080      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800777a:	2380      	movs	r3, #128	; 0x80
 800777c:	e079      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800778c:	e071      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007798:	f44f 7300 	mov.w	r3, #512	; 0x200
 800779c:	e069      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80077a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077ac:	e061      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80077b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077bc:	e059      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80077c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077cc:	e051      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80077d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077dc:	e049      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80077e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077ec:	e041      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80077f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077fc:	e039      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800780c:	e031      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007818:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800781c:	e029      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007828:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800782c:	e021      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007838:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800783c:	e019      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007848:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800784c:	e011      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007858:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800785c:	e009      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f003 0308 	and.w	r3, r3, #8
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007868:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800786c:	e001      	b.n	8007872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800786e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007872:	4618      	mov	r0, r3
 8007874:	3720      	adds	r7, #32
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20000000 	.word	0x20000000
 8007880:	10624dd3 	.word	0x10624dd3
 8007884:	fdffe008 	.word	0xfdffe008

08007888 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007890:	4b1f      	ldr	r3, [pc, #124]	; (8007910 <SDMMC_GetCmdResp2+0x88>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a1f      	ldr	r2, [pc, #124]	; (8007914 <SDMMC_GetCmdResp2+0x8c>)
 8007896:	fba2 2303 	umull	r2, r3, r2, r3
 800789a:	0a5b      	lsrs	r3, r3, #9
 800789c:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a0:	fb02 f303 	mul.w	r3, r2, r3
 80078a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	1e5a      	subs	r2, r3, #1
 80078aa:	60fa      	str	r2, [r7, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d102      	bne.n	80078b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078b4:	e026      	b.n	8007904 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0ef      	beq.n	80078a6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1ea      	bne.n	80078a6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d4:	f003 0304 	and.w	r3, r3, #4
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d004      	beq.n	80078e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2204      	movs	r2, #4
 80078e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078e2:	2304      	movs	r3, #4
 80078e4:	e00e      	b.n	8007904 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e003      	b.n	8007904 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	22c5      	movs	r2, #197	; 0xc5
 8007900:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	20000000 	.word	0x20000000
 8007914:	10624dd3 	.word	0x10624dd3

08007918 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007920:	4b1a      	ldr	r3, [pc, #104]	; (800798c <SDMMC_GetCmdResp3+0x74>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1a      	ldr	r2, [pc, #104]	; (8007990 <SDMMC_GetCmdResp3+0x78>)
 8007926:	fba2 2303 	umull	r2, r3, r2, r3
 800792a:	0a5b      	lsrs	r3, r3, #9
 800792c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007930:	fb02 f303 	mul.w	r3, r2, r3
 8007934:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	1e5a      	subs	r2, r3, #1
 800793a:	60fa      	str	r2, [r7, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d102      	bne.n	8007946 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007940:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007944:	e01b      	b.n	800797e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0ef      	beq.n	8007936 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1ea      	bne.n	8007936 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007964:	f003 0304 	and.w	r3, r3, #4
 8007968:	2b00      	cmp	r3, #0
 800796a:	d004      	beq.n	8007976 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2204      	movs	r2, #4
 8007970:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007972:	2304      	movs	r3, #4
 8007974:	e003      	b.n	800797e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	22c5      	movs	r2, #197	; 0xc5
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	20000000 	.word	0x20000000
 8007990:	10624dd3 	.word	0x10624dd3

08007994 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	460b      	mov	r3, r1
 800799e:	607a      	str	r2, [r7, #4]
 80079a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079a2:	4b35      	ldr	r3, [pc, #212]	; (8007a78 <SDMMC_GetCmdResp6+0xe4>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a35      	ldr	r2, [pc, #212]	; (8007a7c <SDMMC_GetCmdResp6+0xe8>)
 80079a8:	fba2 2303 	umull	r2, r3, r2, r3
 80079ac:	0a5b      	lsrs	r3, r3, #9
 80079ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b2:	fb02 f303 	mul.w	r3, r2, r3
 80079b6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	1e5a      	subs	r2, r3, #1
 80079bc:	61fa      	str	r2, [r7, #28]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d102      	bne.n	80079c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079c6:	e052      	b.n	8007a6e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079cc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d0ef      	beq.n	80079b8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1ea      	bne.n	80079b8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e6:	f003 0304 	and.w	r3, r3, #4
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d004      	beq.n	80079f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2204      	movs	r2, #4
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079f4:	2304      	movs	r3, #4
 80079f6:	e03a      	b.n	8007a6e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d004      	beq.n	8007a0e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e02f      	b.n	8007a6e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f7ff fc0e 	bl	8007230 <SDMMC_GetCommandResponse>
 8007a14:	4603      	mov	r3, r0
 8007a16:	461a      	mov	r2, r3
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d001      	beq.n	8007a22 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e025      	b.n	8007a6e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	22c5      	movs	r2, #197	; 0xc5
 8007a26:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007a28:	2100      	movs	r1, #0
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f7ff fc0d 	bl	800724a <SDMMC_GetResponse>
 8007a30:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d106      	bne.n	8007a4a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	0c1b      	lsrs	r3, r3, #16
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007a46:	2300      	movs	r3, #0
 8007a48:	e011      	b.n	8007a6e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a58:	e009      	b.n	8007a6e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a68:	e001      	b.n	8007a6e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3720      	adds	r7, #32
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000000 	.word	0x20000000
 8007a7c:	10624dd3 	.word	0x10624dd3

08007a80 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a88:	4b22      	ldr	r3, [pc, #136]	; (8007b14 <SDMMC_GetCmdResp7+0x94>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a22      	ldr	r2, [pc, #136]	; (8007b18 <SDMMC_GetCmdResp7+0x98>)
 8007a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a92:	0a5b      	lsrs	r3, r3, #9
 8007a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a98:	fb02 f303 	mul.w	r3, r2, r3
 8007a9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	1e5a      	subs	r2, r3, #1
 8007aa2:	60fa      	str	r2, [r7, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d102      	bne.n	8007aae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007aa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007aac:	e02c      	b.n	8007b08 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0ef      	beq.n	8007a9e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1ea      	bne.n	8007a9e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d004      	beq.n	8007ade <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ada:	2304      	movs	r3, #4
 8007adc:	e014      	b.n	8007b08 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d004      	beq.n	8007af4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e009      	b.n	8007b08 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2240      	movs	r2, #64	; 0x40
 8007b04:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007b06:	2300      	movs	r3, #0
  
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	20000000 	.word	0x20000000
 8007b18:	10624dd3 	.word	0x10624dd3

08007b1c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b24:	4b11      	ldr	r3, [pc, #68]	; (8007b6c <SDMMC_GetCmdError+0x50>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a11      	ldr	r2, [pc, #68]	; (8007b70 <SDMMC_GetCmdError+0x54>)
 8007b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2e:	0a5b      	lsrs	r3, r3, #9
 8007b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b34:	fb02 f303 	mul.w	r3, r2, r3
 8007b38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	1e5a      	subs	r2, r3, #1
 8007b3e:	60fa      	str	r2, [r7, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d102      	bne.n	8007b4a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b48:	e009      	b.n	8007b5e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0f1      	beq.n	8007b3a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	22c5      	movs	r2, #197	; 0xc5
 8007b5a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	20000000 	.word	0x20000000
 8007b70:	10624dd3 	.word	0x10624dd3

08007b74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b74:	b084      	sub	sp, #16
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	f107 001c 	add.w	r0, r7, #28
 8007b82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d120      	bne.n	8007bce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	4b20      	ldr	r3, [pc, #128]	; (8007c20 <USB_CoreInit+0xac>)
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d105      	bne.n	8007bc2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 fbee 	bl	80093a4 <USB_CoreReset>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73fb      	strb	r3, [r7, #15]
 8007bcc:	e010      	b.n	8007bf0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f001 fbe2 	bl	80093a4 <USB_CoreReset>
 8007be0:	4603      	mov	r3, r0
 8007be2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d10b      	bne.n	8007c0e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f043 0206 	orr.w	r2, r3, #6
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f043 0220 	orr.w	r2, r3, #32
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c1a:	b004      	add	sp, #16
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	ffbdffbf 	.word	0xffbdffbf

08007c24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d165      	bne.n	8007d04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4a41      	ldr	r2, [pc, #260]	; (8007d40 <USB_SetTurnaroundTime+0x11c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d906      	bls.n	8007c4e <USB_SetTurnaroundTime+0x2a>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4a40      	ldr	r2, [pc, #256]	; (8007d44 <USB_SetTurnaroundTime+0x120>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d202      	bcs.n	8007c4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007c48:	230f      	movs	r3, #15
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	e062      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	4a3c      	ldr	r2, [pc, #240]	; (8007d44 <USB_SetTurnaroundTime+0x120>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d306      	bcc.n	8007c64 <USB_SetTurnaroundTime+0x40>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	4a3b      	ldr	r2, [pc, #236]	; (8007d48 <USB_SetTurnaroundTime+0x124>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d202      	bcs.n	8007c64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007c5e:	230e      	movs	r3, #14
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	e057      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	4a38      	ldr	r2, [pc, #224]	; (8007d48 <USB_SetTurnaroundTime+0x124>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d306      	bcc.n	8007c7a <USB_SetTurnaroundTime+0x56>
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4a37      	ldr	r2, [pc, #220]	; (8007d4c <USB_SetTurnaroundTime+0x128>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d202      	bcs.n	8007c7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007c74:	230d      	movs	r3, #13
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	e04c      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	4a33      	ldr	r2, [pc, #204]	; (8007d4c <USB_SetTurnaroundTime+0x128>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d306      	bcc.n	8007c90 <USB_SetTurnaroundTime+0x6c>
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	4a32      	ldr	r2, [pc, #200]	; (8007d50 <USB_SetTurnaroundTime+0x12c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d802      	bhi.n	8007c90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	617b      	str	r3, [r7, #20]
 8007c8e:	e041      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4a2f      	ldr	r2, [pc, #188]	; (8007d50 <USB_SetTurnaroundTime+0x12c>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d906      	bls.n	8007ca6 <USB_SetTurnaroundTime+0x82>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	4a2e      	ldr	r2, [pc, #184]	; (8007d54 <USB_SetTurnaroundTime+0x130>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d802      	bhi.n	8007ca6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007ca0:	230b      	movs	r3, #11
 8007ca2:	617b      	str	r3, [r7, #20]
 8007ca4:	e036      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	4a2a      	ldr	r2, [pc, #168]	; (8007d54 <USB_SetTurnaroundTime+0x130>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d906      	bls.n	8007cbc <USB_SetTurnaroundTime+0x98>
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	4a29      	ldr	r2, [pc, #164]	; (8007d58 <USB_SetTurnaroundTime+0x134>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d802      	bhi.n	8007cbc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007cb6:	230a      	movs	r3, #10
 8007cb8:	617b      	str	r3, [r7, #20]
 8007cba:	e02b      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	4a26      	ldr	r2, [pc, #152]	; (8007d58 <USB_SetTurnaroundTime+0x134>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d906      	bls.n	8007cd2 <USB_SetTurnaroundTime+0xae>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	4a25      	ldr	r2, [pc, #148]	; (8007d5c <USB_SetTurnaroundTime+0x138>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d202      	bcs.n	8007cd2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ccc:	2309      	movs	r3, #9
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	e020      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	4a21      	ldr	r2, [pc, #132]	; (8007d5c <USB_SetTurnaroundTime+0x138>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d306      	bcc.n	8007ce8 <USB_SetTurnaroundTime+0xc4>
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	4a20      	ldr	r2, [pc, #128]	; (8007d60 <USB_SetTurnaroundTime+0x13c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d802      	bhi.n	8007ce8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007ce2:	2308      	movs	r3, #8
 8007ce4:	617b      	str	r3, [r7, #20]
 8007ce6:	e015      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4a1d      	ldr	r2, [pc, #116]	; (8007d60 <USB_SetTurnaroundTime+0x13c>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d906      	bls.n	8007cfe <USB_SetTurnaroundTime+0xda>
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	4a1c      	ldr	r2, [pc, #112]	; (8007d64 <USB_SetTurnaroundTime+0x140>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d202      	bcs.n	8007cfe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007cf8:	2307      	movs	r3, #7
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	e00a      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007cfe:	2306      	movs	r3, #6
 8007d00:	617b      	str	r3, [r7, #20]
 8007d02:	e007      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d102      	bne.n	8007d10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007d0a:	2309      	movs	r3, #9
 8007d0c:	617b      	str	r3, [r7, #20]
 8007d0e:	e001      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007d10:	2309      	movs	r3, #9
 8007d12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	029b      	lsls	r3, r3, #10
 8007d28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007d2c:	431a      	orrs	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	371c      	adds	r7, #28
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	00d8acbf 	.word	0x00d8acbf
 8007d44:	00e4e1c0 	.word	0x00e4e1c0
 8007d48:	00f42400 	.word	0x00f42400
 8007d4c:	01067380 	.word	0x01067380
 8007d50:	011a499f 	.word	0x011a499f
 8007d54:	01312cff 	.word	0x01312cff
 8007d58:	014ca43f 	.word	0x014ca43f
 8007d5c:	016e3600 	.word	0x016e3600
 8007d60:	01a6ab1f 	.word	0x01a6ab1f
 8007d64:	01e84800 	.word	0x01e84800

08007d68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f043 0201 	orr.w	r2, r3, #1
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f023 0201 	bic.w	r2, r3, #1
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007dc8:	78fb      	ldrb	r3, [r7, #3]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d115      	bne.n	8007dfa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007dda:	2001      	movs	r0, #1
 8007ddc:	f7f9 fb82 	bl	80014e4 <HAL_Delay>
      ms++;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3301      	adds	r3, #1
 8007de4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 fa4b 	bl	8009282 <USB_GetMode>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d01e      	beq.n	8007e30 <USB_SetCurrentMode+0x84>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2b31      	cmp	r3, #49	; 0x31
 8007df6:	d9f0      	bls.n	8007dda <USB_SetCurrentMode+0x2e>
 8007df8:	e01a      	b.n	8007e30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dfa:	78fb      	ldrb	r3, [r7, #3]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d115      	bne.n	8007e2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e0c:	2001      	movs	r0, #1
 8007e0e:	f7f9 fb69 	bl	80014e4 <HAL_Delay>
      ms++;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3301      	adds	r3, #1
 8007e16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f001 fa32 	bl	8009282 <USB_GetMode>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d005      	beq.n	8007e30 <USB_SetCurrentMode+0x84>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b31      	cmp	r3, #49	; 0x31
 8007e28:	d9f0      	bls.n	8007e0c <USB_SetCurrentMode+0x60>
 8007e2a:	e001      	b.n	8007e30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e005      	b.n	8007e3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2b32      	cmp	r3, #50	; 0x32
 8007e34:	d101      	bne.n	8007e3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e000      	b.n	8007e3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e44:	b084      	sub	sp, #16
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b086      	sub	sp, #24
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e5e:	2300      	movs	r3, #0
 8007e60:	613b      	str	r3, [r7, #16]
 8007e62:	e009      	b.n	8007e78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	3340      	adds	r3, #64	; 0x40
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	2200      	movs	r2, #0
 8007e70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	3301      	adds	r3, #1
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2b0e      	cmp	r3, #14
 8007e7c:	d9f2      	bls.n	8007e64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d11c      	bne.n	8007ebe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e92:	f043 0302 	orr.w	r3, r3, #2
 8007e96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	e005      	b.n	8007eca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007edc:	4619      	mov	r1, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	680b      	ldr	r3, [r1, #0]
 8007ee8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d10c      	bne.n	8007f0a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d104      	bne.n	8007f00 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f965 	bl	80081c8 <USB_SetDevSpeed>
 8007efe:	e008      	b.n	8007f12 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f00:	2101      	movs	r1, #1
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f960 	bl	80081c8 <USB_SetDevSpeed>
 8007f08:	e003      	b.n	8007f12 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f0a:	2103      	movs	r1, #3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f95b 	bl	80081c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f12:	2110      	movs	r1, #16
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f8f3 	bl	8008100 <USB_FlushTxFifo>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f91f 	bl	8008168 <USB_FlushRxFifo>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f46:	461a      	mov	r2, r3
 8007f48:	2300      	movs	r3, #0
 8007f4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f52:	461a      	mov	r2, r3
 8007f54:	2300      	movs	r3, #0
 8007f56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f58:	2300      	movs	r3, #0
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	e043      	b.n	8007fe6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f74:	d118      	bne.n	8007fa8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f88:	461a      	mov	r2, r3
 8007f8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	e013      	b.n	8007fba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	e008      	b.n	8007fba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	2300      	movs	r3, #0
 8007fca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd8:	461a      	mov	r2, r3
 8007fda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	613b      	str	r3, [r7, #16]
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d3b7      	bcc.n	8007f5e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fee:	2300      	movs	r3, #0
 8007ff0:	613b      	str	r3, [r7, #16]
 8007ff2:	e043      	b.n	800807c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800800a:	d118      	bne.n	800803e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10a      	bne.n	8008028 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801e:	461a      	mov	r2, r3
 8008020:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	e013      	b.n	8008050 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008034:	461a      	mov	r2, r3
 8008036:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	e008      	b.n	8008050 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804a:	461a      	mov	r2, r3
 800804c:	2300      	movs	r3, #0
 800804e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805c:	461a      	mov	r2, r3
 800805e:	2300      	movs	r3, #0
 8008060:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	4413      	add	r3, r2
 800806a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806e:	461a      	mov	r2, r3
 8008070:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008074:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	3301      	adds	r3, #1
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	429a      	cmp	r2, r3
 8008082:	d3b7      	bcc.n	8007ff4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008092:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008096:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80080a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d105      	bne.n	80080b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	f043 0210 	orr.w	r2, r3, #16
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699a      	ldr	r2, [r3, #24]
 80080bc:	4b0e      	ldr	r3, [pc, #56]	; (80080f8 <USB_DevInit+0x2b4>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80080c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d005      	beq.n	80080d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	f043 0208 	orr.w	r2, r3, #8
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80080d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d105      	bne.n	80080e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699a      	ldr	r2, [r3, #24]
 80080e0:	4b06      	ldr	r3, [pc, #24]	; (80080fc <USB_DevInit+0x2b8>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080f4:	b004      	add	sp, #16
 80080f6:	4770      	bx	lr
 80080f8:	803c3800 	.word	0x803c3800
 80080fc:	40000004 	.word	0x40000004

08008100 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3301      	adds	r3, #1
 8008112:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4a13      	ldr	r2, [pc, #76]	; (8008164 <USB_FlushTxFifo+0x64>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d901      	bls.n	8008120 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e01b      	b.n	8008158 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	2b00      	cmp	r3, #0
 8008126:	daf2      	bge.n	800810e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	019b      	lsls	r3, r3, #6
 8008130:	f043 0220 	orr.w	r2, r3, #32
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	3301      	adds	r3, #1
 800813c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4a08      	ldr	r2, [pc, #32]	; (8008164 <USB_FlushTxFifo+0x64>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d901      	bls.n	800814a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e006      	b.n	8008158 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b20      	cmp	r3, #32
 8008154:	d0f0      	beq.n	8008138 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	00030d40 	.word	0x00030d40

08008168 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	3301      	adds	r3, #1
 8008178:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4a11      	ldr	r2, [pc, #68]	; (80081c4 <USB_FlushRxFifo+0x5c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d901      	bls.n	8008186 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e018      	b.n	80081b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	2b00      	cmp	r3, #0
 800818c:	daf2      	bge.n	8008174 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800818e:	2300      	movs	r3, #0
 8008190:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2210      	movs	r2, #16
 8008196:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3301      	adds	r3, #1
 800819c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4a08      	ldr	r2, [pc, #32]	; (80081c4 <USB_FlushRxFifo+0x5c>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d901      	bls.n	80081aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e006      	b.n	80081b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	f003 0310 	and.w	r3, r3, #16
 80081b2:	2b10      	cmp	r3, #16
 80081b4:	d0f0      	beq.n	8008198 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	00030d40 	.word	0x00030d40

080081c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	78fb      	ldrb	r3, [r7, #3]
 80081e2:	68f9      	ldr	r1, [r7, #12]
 80081e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081e8:	4313      	orrs	r3, r2
 80081ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b087      	sub	sp, #28
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f003 0306 	and.w	r3, r3, #6
 8008212:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d102      	bne.n	8008220 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800821a:	2300      	movs	r3, #0
 800821c:	75fb      	strb	r3, [r7, #23]
 800821e:	e00a      	b.n	8008236 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d002      	beq.n	800822c <USB_GetDevSpeed+0x32>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2b06      	cmp	r3, #6
 800822a:	d102      	bne.n	8008232 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800822c:	2302      	movs	r3, #2
 800822e:	75fb      	strb	r3, [r7, #23]
 8008230:	e001      	b.n	8008236 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008232:	230f      	movs	r3, #15
 8008234:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008236:	7dfb      	ldrb	r3, [r7, #23]
}
 8008238:	4618      	mov	r0, r3
 800823a:	371c      	adds	r7, #28
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	785b      	ldrb	r3, [r3, #1]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d139      	bne.n	80082d4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008266:	69da      	ldr	r2, [r3, #28]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	f003 030f 	and.w	r3, r3, #15
 8008270:	2101      	movs	r1, #1
 8008272:	fa01 f303 	lsl.w	r3, r1, r3
 8008276:	b29b      	uxth	r3, r3
 8008278:	68f9      	ldr	r1, [r7, #12]
 800827a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800827e:	4313      	orrs	r3, r2
 8008280:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d153      	bne.n	8008340 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	791b      	ldrb	r3, [r3, #4]
 80082b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80082b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	059b      	lsls	r3, r3, #22
 80082ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80082bc:	431a      	orrs	r2, r3
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	0159      	lsls	r1, r3, #5
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	440b      	add	r3, r1
 80082c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ca:	4619      	mov	r1, r3
 80082cc:	4b20      	ldr	r3, [pc, #128]	; (8008350 <USB_ActivateEndpoint+0x10c>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	600b      	str	r3, [r1, #0]
 80082d2:	e035      	b.n	8008340 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082da:	69da      	ldr	r2, [r3, #28]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	f003 030f 	and.w	r3, r3, #15
 80082e4:	2101      	movs	r1, #1
 80082e6:	fa01 f303 	lsl.w	r3, r1, r3
 80082ea:	041b      	lsls	r3, r3, #16
 80082ec:	68f9      	ldr	r1, [r7, #12]
 80082ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082f2:	4313      	orrs	r3, r2
 80082f4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d119      	bne.n	8008340 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4413      	add	r3, r2
 8008314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	791b      	ldrb	r3, [r3, #4]
 8008326:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008328:	430b      	orrs	r3, r1
 800832a:	431a      	orrs	r2, r3
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	0159      	lsls	r1, r3, #5
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	440b      	add	r3, r1
 8008334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008338:	4619      	mov	r1, r3
 800833a:	4b05      	ldr	r3, [pc, #20]	; (8008350 <USB_ActivateEndpoint+0x10c>)
 800833c:	4313      	orrs	r3, r2
 800833e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	10008000 	.word	0x10008000

08008354 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	785b      	ldrb	r3, [r3, #1]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d161      	bne.n	8008434 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4413      	add	r3, r2
 8008378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008382:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008386:	d11f      	bne.n	80083c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	0151      	lsls	r1, r2, #5
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	440a      	add	r2, r1
 800839e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	0151      	lsls	r1, r2, #5
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	440a      	add	r2, r1
 80083be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	f003 030f 	and.w	r3, r3, #15
 80083d8:	2101      	movs	r1, #1
 80083da:	fa01 f303 	lsl.w	r3, r1, r3
 80083de:	b29b      	uxth	r3, r3
 80083e0:	43db      	mvns	r3, r3
 80083e2:	68f9      	ldr	r1, [r7, #12]
 80083e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083e8:	4013      	ands	r3, r2
 80083ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f2:	69da      	ldr	r2, [r3, #28]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	f003 030f 	and.w	r3, r3, #15
 80083fc:	2101      	movs	r1, #1
 80083fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008402:	b29b      	uxth	r3, r3
 8008404:	43db      	mvns	r3, r3
 8008406:	68f9      	ldr	r1, [r7, #12]
 8008408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800840c:	4013      	ands	r3, r2
 800840e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	0159      	lsls	r1, r3, #5
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	440b      	add	r3, r1
 8008426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800842a:	4619      	mov	r1, r3
 800842c:	4b35      	ldr	r3, [pc, #212]	; (8008504 <USB_DeactivateEndpoint+0x1b0>)
 800842e:	4013      	ands	r3, r2
 8008430:	600b      	str	r3, [r1, #0]
 8008432:	e060      	b.n	80084f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800844a:	d11f      	bne.n	800848c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	440a      	add	r2, r1
 8008462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008466:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800846a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	0151      	lsls	r1, r2, #5
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	440a      	add	r2, r1
 8008482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008486:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800848a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	f003 030f 	and.w	r3, r3, #15
 800849c:	2101      	movs	r1, #1
 800849e:	fa01 f303 	lsl.w	r3, r1, r3
 80084a2:	041b      	lsls	r3, r3, #16
 80084a4:	43db      	mvns	r3, r3
 80084a6:	68f9      	ldr	r1, [r7, #12]
 80084a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084ac:	4013      	ands	r3, r2
 80084ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b6:	69da      	ldr	r2, [r3, #28]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	f003 030f 	and.w	r3, r3, #15
 80084c0:	2101      	movs	r1, #1
 80084c2:	fa01 f303 	lsl.w	r3, r1, r3
 80084c6:	041b      	lsls	r3, r3, #16
 80084c8:	43db      	mvns	r3, r3
 80084ca:	68f9      	ldr	r1, [r7, #12]
 80084cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084d0:	4013      	ands	r3, r2
 80084d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	0159      	lsls	r1, r3, #5
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	440b      	add	r3, r1
 80084ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ee:	4619      	mov	r1, r3
 80084f0:	4b05      	ldr	r3, [pc, #20]	; (8008508 <USB_DeactivateEndpoint+0x1b4>)
 80084f2:	4013      	ands	r3, r2
 80084f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	ec337800 	.word	0xec337800
 8008508:	eff37800 	.word	0xeff37800

0800850c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b08a      	sub	sp, #40	; 0x28
 8008510:	af02      	add	r7, sp, #8
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	4613      	mov	r3, r2
 8008518:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	785b      	ldrb	r3, [r3, #1]
 8008528:	2b01      	cmp	r3, #1
 800852a:	f040 8163 	bne.w	80087f4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d132      	bne.n	800859c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008542:	691a      	ldr	r2, [r3, #16]
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	0159      	lsls	r1, r3, #5
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	440b      	add	r3, r1
 800854c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008550:	4619      	mov	r1, r3
 8008552:	4ba5      	ldr	r3, [pc, #660]	; (80087e8 <USB_EPStartXfer+0x2dc>)
 8008554:	4013      	ands	r3, r2
 8008556:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	69ba      	ldr	r2, [r7, #24]
 8008568:	0151      	lsls	r1, r2, #5
 800856a:	69fa      	ldr	r2, [r7, #28]
 800856c:	440a      	add	r2, r1
 800856e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008572:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008576:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	4413      	add	r3, r2
 8008580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008584:	691a      	ldr	r2, [r3, #16]
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	0159      	lsls	r1, r3, #5
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	440b      	add	r3, r1
 800858e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008592:	4619      	mov	r1, r3
 8008594:	4b95      	ldr	r3, [pc, #596]	; (80087ec <USB_EPStartXfer+0x2e0>)
 8008596:	4013      	ands	r3, r2
 8008598:	610b      	str	r3, [r1, #16]
 800859a:	e074      	b.n	8008686 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a8:	691a      	ldr	r2, [r3, #16]
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	0159      	lsls	r1, r3, #5
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	440b      	add	r3, r1
 80085b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b6:	4619      	mov	r1, r3
 80085b8:	4b8c      	ldr	r3, [pc, #560]	; (80087ec <USB_EPStartXfer+0x2e0>)
 80085ba:	4013      	ands	r3, r2
 80085bc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	015a      	lsls	r2, r3, #5
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ca:	691a      	ldr	r2, [r3, #16]
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	0159      	lsls	r1, r3, #5
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	440b      	add	r3, r1
 80085d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d8:	4619      	mov	r1, r3
 80085da:	4b83      	ldr	r3, [pc, #524]	; (80087e8 <USB_EPStartXfer+0x2dc>)
 80085dc:	4013      	ands	r3, r2
 80085de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	015a      	lsls	r2, r3, #5
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	6999      	ldr	r1, [r3, #24]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	440b      	add	r3, r1
 80085f8:	1e59      	subs	r1, r3, #1
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8008602:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008604:	4b7a      	ldr	r3, [pc, #488]	; (80087f0 <USB_EPStartXfer+0x2e4>)
 8008606:	400b      	ands	r3, r1
 8008608:	69b9      	ldr	r1, [r7, #24]
 800860a:	0148      	lsls	r0, r1, #5
 800860c:	69f9      	ldr	r1, [r7, #28]
 800860e:	4401      	add	r1, r0
 8008610:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008614:	4313      	orrs	r3, r2
 8008616:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	4413      	add	r3, r2
 8008620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008624:	691a      	ldr	r2, [r3, #16]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800862e:	69b9      	ldr	r1, [r7, #24]
 8008630:	0148      	lsls	r0, r1, #5
 8008632:	69f9      	ldr	r1, [r7, #28]
 8008634:	4401      	add	r1, r0
 8008636:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800863a:	4313      	orrs	r3, r2
 800863c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	791b      	ldrb	r3, [r3, #4]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d11f      	bne.n	8008686 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	015a      	lsls	r2, r3, #5
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	4413      	add	r3, r2
 800864e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	0151      	lsls	r1, r2, #5
 8008658:	69fa      	ldr	r2, [r7, #28]
 800865a:	440a      	add	r2, r1
 800865c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008660:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008664:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	015a      	lsls	r2, r3, #5
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	4413      	add	r3, r2
 800866e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	0151      	lsls	r1, r2, #5
 8008678:	69fa      	ldr	r2, [r7, #28]
 800867a:	440a      	add	r2, r1
 800867c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008680:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008684:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008686:	79fb      	ldrb	r3, [r7, #7]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d14b      	bne.n	8008724 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d009      	beq.n	80086a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a0:	461a      	mov	r2, r3
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	791b      	ldrb	r3, [r3, #4]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d128      	bne.n	8008702 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d110      	bne.n	80086e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	0151      	lsls	r1, r2, #5
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	440a      	add	r2, r1
 80086d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	e00f      	b.n	8008702 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	0151      	lsls	r1, r2, #5
 80086f4:	69fa      	ldr	r2, [r7, #28]
 80086f6:	440a      	add	r2, r1
 80086f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008700:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	4413      	add	r3, r2
 800870a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	69ba      	ldr	r2, [r7, #24]
 8008712:	0151      	lsls	r1, r2, #5
 8008714:	69fa      	ldr	r2, [r7, #28]
 8008716:	440a      	add	r2, r1
 8008718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800871c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	e137      	b.n	8008994 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	015a      	lsls	r2, r3, #5
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	4413      	add	r3, r2
 800872c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	0151      	lsls	r1, r2, #5
 8008736:	69fa      	ldr	r2, [r7, #28]
 8008738:	440a      	add	r2, r1
 800873a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800873e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008742:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	791b      	ldrb	r3, [r3, #4]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d015      	beq.n	8008778 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 811f 	beq.w	8008994 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	f003 030f 	and.w	r3, r3, #15
 8008766:	2101      	movs	r1, #1
 8008768:	fa01 f303 	lsl.w	r3, r1, r3
 800876c:	69f9      	ldr	r1, [r7, #28]
 800876e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008772:	4313      	orrs	r3, r2
 8008774:	634b      	str	r3, [r1, #52]	; 0x34
 8008776:	e10d      	b.n	8008994 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008784:	2b00      	cmp	r3, #0
 8008786:	d110      	bne.n	80087aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	4413      	add	r3, r2
 8008790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	0151      	lsls	r1, r2, #5
 800879a:	69fa      	ldr	r2, [r7, #28]
 800879c:	440a      	add	r2, r1
 800879e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	e00f      	b.n	80087ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	4413      	add	r3, r2
 80087b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	0151      	lsls	r1, r2, #5
 80087bc:	69fa      	ldr	r2, [r7, #28]
 80087be:	440a      	add	r2, r1
 80087c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	6919      	ldr	r1, [r3, #16]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	781a      	ldrb	r2, [r3, #0]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	b298      	uxth	r0, r3
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	4603      	mov	r3, r0
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 faea 	bl	8008db8 <USB_WritePacket>
 80087e4:	e0d6      	b.n	8008994 <USB_EPStartXfer+0x488>
 80087e6:	bf00      	nop
 80087e8:	e007ffff 	.word	0xe007ffff
 80087ec:	fff80000 	.word	0xfff80000
 80087f0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	015a      	lsls	r2, r3, #5
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	4413      	add	r3, r2
 80087fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008800:	691a      	ldr	r2, [r3, #16]
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	0159      	lsls	r1, r3, #5
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	440b      	add	r3, r1
 800880a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880e:	4619      	mov	r1, r3
 8008810:	4b63      	ldr	r3, [pc, #396]	; (80089a0 <USB_EPStartXfer+0x494>)
 8008812:	4013      	ands	r3, r2
 8008814:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	4413      	add	r3, r2
 800881e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008822:	691a      	ldr	r2, [r3, #16]
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	0159      	lsls	r1, r3, #5
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	440b      	add	r3, r1
 800882c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008830:	4619      	mov	r1, r3
 8008832:	4b5c      	ldr	r3, [pc, #368]	; (80089a4 <USB_EPStartXfer+0x498>)
 8008834:	4013      	ands	r3, r2
 8008836:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d123      	bne.n	8008888 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884c:	691a      	ldr	r2, [r3, #16]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008856:	69b9      	ldr	r1, [r7, #24]
 8008858:	0148      	lsls	r0, r1, #5
 800885a:	69f9      	ldr	r1, [r7, #28]
 800885c:	4401      	add	r1, r0
 800885e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008862:	4313      	orrs	r3, r2
 8008864:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	4413      	add	r3, r2
 800886e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	69ba      	ldr	r2, [r7, #24]
 8008876:	0151      	lsls	r1, r2, #5
 8008878:	69fa      	ldr	r2, [r7, #28]
 800887a:	440a      	add	r2, r1
 800887c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008884:	6113      	str	r3, [r2, #16]
 8008886:	e037      	b.n	80088f8 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	699a      	ldr	r2, [r3, #24]
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	4413      	add	r3, r2
 8008892:	1e5a      	subs	r2, r3, #1
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	fbb2 f3f3 	udiv	r3, r2, r3
 800889c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	8afa      	ldrh	r2, [r7, #22]
 80088a4:	fb03 f202 	mul.w	r2, r3, r2
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b8:	691a      	ldr	r2, [r3, #16]
 80088ba:	8afb      	ldrh	r3, [r7, #22]
 80088bc:	04d9      	lsls	r1, r3, #19
 80088be:	4b3a      	ldr	r3, [pc, #232]	; (80089a8 <USB_EPStartXfer+0x49c>)
 80088c0:	400b      	ands	r3, r1
 80088c2:	69b9      	ldr	r1, [r7, #24]
 80088c4:	0148      	lsls	r0, r1, #5
 80088c6:	69f9      	ldr	r1, [r7, #28]
 80088c8:	4401      	add	r1, r0
 80088ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088ce:	4313      	orrs	r3, r2
 80088d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088de:	691a      	ldr	r2, [r3, #16]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088e8:	69b9      	ldr	r1, [r7, #24]
 80088ea:	0148      	lsls	r0, r1, #5
 80088ec:	69f9      	ldr	r1, [r7, #28]
 80088ee:	4401      	add	r1, r0
 80088f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088f4:	4313      	orrs	r3, r2
 80088f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80088f8:	79fb      	ldrb	r3, [r7, #7]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d10d      	bne.n	800891a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d009      	beq.n	800891a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	6919      	ldr	r1, [r3, #16]
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	4413      	add	r3, r2
 8008912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008916:	460a      	mov	r2, r1
 8008918:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	791b      	ldrb	r3, [r3, #4]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d128      	bne.n	8008974 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800892e:	2b00      	cmp	r3, #0
 8008930:	d110      	bne.n	8008954 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	015a      	lsls	r2, r3, #5
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	4413      	add	r3, r2
 800893a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	69ba      	ldr	r2, [r7, #24]
 8008942:	0151      	lsls	r1, r2, #5
 8008944:	69fa      	ldr	r2, [r7, #28]
 8008946:	440a      	add	r2, r1
 8008948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800894c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008950:	6013      	str	r3, [r2, #0]
 8008952:	e00f      	b.n	8008974 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	015a      	lsls	r2, r3, #5
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	4413      	add	r3, r2
 800895c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	69ba      	ldr	r2, [r7, #24]
 8008964:	0151      	lsls	r1, r2, #5
 8008966:	69fa      	ldr	r2, [r7, #28]
 8008968:	440a      	add	r2, r1
 800896a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800896e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008972:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	0151      	lsls	r1, r2, #5
 8008986:	69fa      	ldr	r2, [r7, #28]
 8008988:	440a      	add	r2, r1
 800898a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800898e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008992:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3720      	adds	r7, #32
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	fff80000 	.word	0xfff80000
 80089a4:	e007ffff 	.word	0xe007ffff
 80089a8:	1ff80000 	.word	0x1ff80000

080089ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	4613      	mov	r3, r2
 80089b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	785b      	ldrb	r3, [r3, #1]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	f040 80ce 	bne.w	8008b6a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d132      	bne.n	8008a3c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e2:	691a      	ldr	r2, [r3, #16]
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	0159      	lsls	r1, r3, #5
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	440b      	add	r3, r1
 80089ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f0:	4619      	mov	r1, r3
 80089f2:	4b9a      	ldr	r3, [pc, #616]	; (8008c5c <USB_EP0StartXfer+0x2b0>)
 80089f4:	4013      	ands	r3, r2
 80089f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	0151      	lsls	r1, r2, #5
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	440a      	add	r2, r1
 8008a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a24:	691a      	ldr	r2, [r3, #16]
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	0159      	lsls	r1, r3, #5
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	440b      	add	r3, r1
 8008a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a32:	4619      	mov	r1, r3
 8008a34:	4b8a      	ldr	r3, [pc, #552]	; (8008c60 <USB_EP0StartXfer+0x2b4>)
 8008a36:	4013      	ands	r3, r2
 8008a38:	610b      	str	r3, [r1, #16]
 8008a3a:	e04e      	b.n	8008ada <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a48:	691a      	ldr	r2, [r3, #16]
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	0159      	lsls	r1, r3, #5
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	440b      	add	r3, r1
 8008a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a56:	4619      	mov	r1, r3
 8008a58:	4b81      	ldr	r3, [pc, #516]	; (8008c60 <USB_EP0StartXfer+0x2b4>)
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6a:	691a      	ldr	r2, [r3, #16]
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	0159      	lsls	r1, r3, #5
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	440b      	add	r3, r1
 8008a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a78:	4619      	mov	r1, r3
 8008a7a:	4b78      	ldr	r3, [pc, #480]	; (8008c5c <USB_EP0StartXfer+0x2b0>)
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	699a      	ldr	r2, [r3, #24]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d903      	bls.n	8008a94 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	68da      	ldr	r2, [r3, #12]
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	0151      	lsls	r1, r2, #5
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	440a      	add	r2, r1
 8008aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ab2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac0:	691a      	ldr	r2, [r3, #16]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aca:	6939      	ldr	r1, [r7, #16]
 8008acc:	0148      	lsls	r0, r1, #5
 8008ace:	6979      	ldr	r1, [r7, #20]
 8008ad0:	4401      	add	r1, r0
 8008ad2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d11e      	bne.n	8008b1e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d009      	beq.n	8008afc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	015a      	lsls	r2, r3, #5
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af4:	461a      	mov	r2, r3
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	0151      	lsls	r1, r2, #5
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	440a      	add	r2, r1
 8008b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	e097      	b.n	8008c4e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	015a      	lsls	r2, r3, #5
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	4413      	add	r3, r2
 8008b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	0151      	lsls	r1, r2, #5
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	440a      	add	r2, r1
 8008b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b3c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 8083 	beq.w	8008c4e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	f003 030f 	and.w	r3, r3, #15
 8008b58:	2101      	movs	r1, #1
 8008b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b5e:	6979      	ldr	r1, [r7, #20]
 8008b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b64:	4313      	orrs	r3, r2
 8008b66:	634b      	str	r3, [r1, #52]	; 0x34
 8008b68:	e071      	b.n	8008c4e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b76:	691a      	ldr	r2, [r3, #16]
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	0159      	lsls	r1, r3, #5
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	440b      	add	r3, r1
 8008b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b84:	4619      	mov	r1, r3
 8008b86:	4b36      	ldr	r3, [pc, #216]	; (8008c60 <USB_EP0StartXfer+0x2b4>)
 8008b88:	4013      	ands	r3, r2
 8008b8a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b98:	691a      	ldr	r2, [r3, #16]
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	0159      	lsls	r1, r3, #5
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	440b      	add	r3, r1
 8008ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	4b2c      	ldr	r3, [pc, #176]	; (8008c5c <USB_EP0StartXfer+0x2b0>)
 8008baa:	4013      	ands	r3, r2
 8008bac:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	68da      	ldr	r2, [r3, #12]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	68da      	ldr	r2, [r3, #12]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	015a      	lsls	r2, r3, #5
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	0151      	lsls	r1, r2, #5
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	440a      	add	r2, r1
 8008bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008be0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008be4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf2:	691a      	ldr	r2, [r3, #16]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bfc:	6939      	ldr	r1, [r7, #16]
 8008bfe:	0148      	lsls	r0, r1, #5
 8008c00:	6979      	ldr	r1, [r7, #20]
 8008c02:	4401      	add	r1, r0
 8008c04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008c0c:	79fb      	ldrb	r3, [r7, #7]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d10d      	bne.n	8008c2e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d009      	beq.n	8008c2e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	6919      	ldr	r1, [r3, #16]
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2a:	460a      	mov	r2, r1
 8008c2c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	0151      	lsls	r1, r2, #5
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	440a      	add	r2, r1
 8008c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	371c      	adds	r7, #28
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	e007ffff 	.word	0xe007ffff
 8008c60:	fff80000 	.word	0xfff80000

08008c64 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	785b      	ldrb	r3, [r3, #1]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d14a      	bne.n	8008d18 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c9a:	f040 8086 	bne.w	8008daa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	7812      	ldrb	r2, [r2, #0]
 8008cb2:	0151      	lsls	r1, r2, #5
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	440a      	add	r2, r1
 8008cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cc0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	7812      	ldrb	r2, [r2, #0]
 8008cd6:	0151      	lsls	r1, r2, #5
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	440a      	add	r2, r1
 8008cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ce0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ce4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f242 7210 	movw	r2, #10000	; 0x2710
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d902      	bls.n	8008cfc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8008cfa:	e056      	b.n	8008daa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d14:	d0e7      	beq.n	8008ce6 <USB_EPStopXfer+0x82>
 8008d16:	e048      	b.n	8008daa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	015a      	lsls	r2, r3, #5
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	4413      	add	r3, r2
 8008d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d30:	d13b      	bne.n	8008daa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	7812      	ldrb	r2, [r2, #0]
 8008d46:	0151      	lsls	r1, r2, #5
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	440a      	add	r2, r1
 8008d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d54:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	015a      	lsls	r2, r3, #5
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	7812      	ldrb	r2, [r2, #0]
 8008d6a:	0151      	lsls	r1, r2, #5
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	440a      	add	r2, r1
 8008d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f242 7210 	movw	r2, #10000	; 0x2710
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d902      	bls.n	8008d90 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d8e:	e00c      	b.n	8008daa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008da8:	d0e7      	beq.n	8008d7a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	371c      	adds	r7, #28
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b089      	sub	sp, #36	; 0x24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	71fb      	strb	r3, [r7, #7]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008dd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d123      	bne.n	8008e26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008dde:	88bb      	ldrh	r3, [r7, #4]
 8008de0:	3303      	adds	r3, #3
 8008de2:	089b      	lsrs	r3, r3, #2
 8008de4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008de6:	2300      	movs	r3, #0
 8008de8:	61bb      	str	r3, [r7, #24]
 8008dea:	e018      	b.n	8008e1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008dec:	79fb      	ldrb	r3, [r7, #7]
 8008dee:	031a      	lsls	r2, r3, #12
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df8:	461a      	mov	r2, r3
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	3301      	adds	r3, #1
 8008e04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	3301      	adds	r3, #1
 8008e16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	61bb      	str	r3, [r7, #24]
 8008e1e:	69ba      	ldr	r2, [r7, #24]
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d3e2      	bcc.n	8008dec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3724      	adds	r7, #36	; 0x24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b08b      	sub	sp, #44	; 0x2c
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e4a:	88fb      	ldrh	r3, [r7, #6]
 8008e4c:	089b      	lsrs	r3, r3, #2
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e52:	88fb      	ldrh	r3, [r7, #6]
 8008e54:	f003 0303 	and.w	r3, r3, #3
 8008e58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	623b      	str	r3, [r7, #32]
 8008e5e:	e014      	b.n	8008e8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	3301      	adds	r3, #1
 8008e70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	3301      	adds	r3, #1
 8008e76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	3301      	adds	r3, #1
 8008e82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	3301      	adds	r3, #1
 8008e88:	623b      	str	r3, [r7, #32]
 8008e8a:	6a3a      	ldr	r2, [r7, #32]
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d3e6      	bcc.n	8008e60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e92:	8bfb      	ldrh	r3, [r7, #30]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d01e      	beq.n	8008ed6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f107 0310 	add.w	r3, r7, #16
 8008ea8:	6812      	ldr	r2, [r2, #0]
 8008eaa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	00db      	lsls	r3, r3, #3
 8008eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	701a      	strb	r2, [r3, #0]
      i++;
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	623b      	str	r3, [r7, #32]
      pDest++;
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008eca:	8bfb      	ldrh	r3, [r7, #30]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ed0:	8bfb      	ldrh	r3, [r7, #30]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1ea      	bne.n	8008eac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	372c      	adds	r7, #44	; 0x2c
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	785b      	ldrb	r3, [r3, #1]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d12c      	bne.n	8008f5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	db12      	blt.n	8008f38 <USB_EPSetStall+0x54>
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00f      	beq.n	8008f38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	0151      	lsls	r1, r2, #5
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	440a      	add	r2, r1
 8008f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	0151      	lsls	r1, r2, #5
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	440a      	add	r2, r1
 8008f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	e02b      	b.n	8008fb2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	db12      	blt.n	8008f92 <USB_EPSetStall+0xae>
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00f      	beq.n	8008f92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	0151      	lsls	r1, r2, #5
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	440a      	add	r2, r1
 8008f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	015a      	lsls	r2, r3, #5
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	4413      	add	r3, r2
 8008f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	0151      	lsls	r1, r2, #5
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	440a      	add	r2, r1
 8008fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	785b      	ldrb	r3, [r3, #1]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d128      	bne.n	800902e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	0151      	lsls	r1, r2, #5
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	440a      	add	r2, r1
 8008ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ff6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ffa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	791b      	ldrb	r3, [r3, #4]
 8009000:	2b03      	cmp	r3, #3
 8009002:	d003      	beq.n	800900c <USB_EPClearStall+0x4c>
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	791b      	ldrb	r3, [r3, #4]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d138      	bne.n	800907e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	0151      	lsls	r1, r2, #5
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	440a      	add	r2, r1
 8009022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800902a:	6013      	str	r3, [r2, #0]
 800902c:	e027      	b.n	800907e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	015a      	lsls	r2, r3, #5
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	4413      	add	r3, r2
 8009036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	0151      	lsls	r1, r2, #5
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	440a      	add	r2, r1
 8009044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009048:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800904c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	791b      	ldrb	r3, [r3, #4]
 8009052:	2b03      	cmp	r3, #3
 8009054:	d003      	beq.n	800905e <USB_EPClearStall+0x9e>
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	791b      	ldrb	r3, [r3, #4]
 800905a:	2b02      	cmp	r3, #2
 800905c:	d10f      	bne.n	800907e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	015a      	lsls	r2, r3, #5
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	4413      	add	r3, r2
 8009066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	0151      	lsls	r1, r2, #5
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	440a      	add	r2, r1
 8009074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800907c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80090ae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	78fb      	ldrb	r3, [r7, #3]
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80090c0:	68f9      	ldr	r1, [r7, #12]
 80090c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090c6:	4313      	orrs	r3, r2
 80090c8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090f2:	f023 0303 	bic.w	r3, r3, #3
 80090f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009106:	f023 0302 	bic.w	r3, r3, #2
 800910a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800911a:	b480      	push	{r7}
 800911c:	b085      	sub	sp, #20
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009134:	f023 0303 	bic.w	r3, r3, #3
 8009138:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009148:	f043 0302 	orr.w	r3, r3, #2
 800914c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	4013      	ands	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009174:	68fb      	ldr	r3, [r7, #12]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3714      	adds	r7, #20
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009182:	b480      	push	{r7}
 8009184:	b085      	sub	sp, #20
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	4013      	ands	r3, r2
 80091a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	0c1b      	lsrs	r3, r3, #16
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b085      	sub	sp, #20
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	4013      	ands	r3, r2
 80091d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	b29b      	uxth	r3, r3
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b085      	sub	sp, #20
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80091fa:	78fb      	ldrb	r3, [r7, #3]
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	4413      	add	r3, r2
 8009202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4013      	ands	r3, r2
 8009216:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009218:	68bb      	ldr	r3, [r7, #8]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009226:	b480      	push	{r7}
 8009228:	b087      	sub	sp, #28
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	460b      	mov	r3, r1
 8009230:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009248:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	f003 030f 	and.w	r3, r3, #15
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	fa22 f303 	lsr.w	r3, r2, r3
 8009256:	01db      	lsls	r3, r3, #7
 8009258:	b2db      	uxtb	r3, r3
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	4313      	orrs	r3, r2
 800925e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009260:	78fb      	ldrb	r3, [r7, #3]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	4013      	ands	r3, r2
 8009272:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009274:	68bb      	ldr	r3, [r7, #8]
}
 8009276:	4618      	mov	r0, r3
 8009278:	371c      	adds	r7, #28
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	f003 0301 	and.w	r3, r3, #1
}
 8009292:	4618      	mov	r0, r3
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
	...

080092a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ba:	4619      	mov	r1, r3
 80092bc:	4b09      	ldr	r3, [pc, #36]	; (80092e4 <USB_ActivateSetup+0x44>)
 80092be:	4013      	ands	r3, r2
 80092c0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3714      	adds	r7, #20
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	fffff800 	.word	0xfffff800

080092e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	460b      	mov	r3, r1
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	333c      	adds	r3, #60	; 0x3c
 80092fe:	3304      	adds	r3, #4
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	4a26      	ldr	r2, [pc, #152]	; (80093a0 <USB_EP0_OutStart+0xb8>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d90a      	bls.n	8009322 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800931c:	d101      	bne.n	8009322 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	e037      	b.n	8009392 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009328:	461a      	mov	r2, r3
 800932a:	2300      	movs	r3, #0
 800932c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800933c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009340:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009350:	f043 0318 	orr.w	r3, r3, #24
 8009354:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009364:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009368:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800936a:	7afb      	ldrb	r3, [r7, #11]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d10f      	bne.n	8009390 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009376:	461a      	mov	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800938a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800938e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	371c      	adds	r7, #28
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	4f54300a 	.word	0x4f54300a

080093a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	3301      	adds	r3, #1
 80093b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	4a13      	ldr	r2, [pc, #76]	; (8009408 <USB_CoreReset+0x64>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d901      	bls.n	80093c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	e01b      	b.n	80093fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	daf2      	bge.n	80093b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	f043 0201 	orr.w	r2, r3, #1
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3301      	adds	r3, #1
 80093de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4a09      	ldr	r2, [pc, #36]	; (8009408 <USB_CoreReset+0x64>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d901      	bls.n	80093ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e006      	b.n	80093fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d0f0      	beq.n	80093da <USB_CoreReset+0x36>

  return HAL_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	00030d40 	.word	0x00030d40

0800940c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009410:	4904      	ldr	r1, [pc, #16]	; (8009424 <MX_FATFS_Init+0x18>)
 8009412:	4805      	ldr	r0, [pc, #20]	; (8009428 <MX_FATFS_Init+0x1c>)
 8009414:	f004 fbe4 	bl	800dbe0 <FATFS_LinkDriver>
 8009418:	4603      	mov	r3, r0
 800941a:	461a      	mov	r2, r3
 800941c:	4b03      	ldr	r3, [pc, #12]	; (800942c <MX_FATFS_Init+0x20>)
 800941e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009420:	bf00      	nop
 8009422:	bd80      	pop	{r7, pc}
 8009424:	200023e8 	.word	0x200023e8
 8009428:	0800fc34 	.word	0x0800fc34
 800942c:	200023e4 	.word	0x200023e4

08009430 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009434:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009436:	4618      	mov	r0, r3
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800944a:	f000 f888 	bl	800955e <BSP_SD_IsDetected>
 800944e:	4603      	mov	r3, r0
 8009450:	2b01      	cmp	r3, #1
 8009452:	d001      	beq.n	8009458 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009454:	2302      	movs	r3, #2
 8009456:	e005      	b.n	8009464 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009458:	4804      	ldr	r0, [pc, #16]	; (800946c <BSP_SD_Init+0x2c>)
 800945a:	f7fc f845 	bl	80054e8 <HAL_SD_Init>
 800945e:	4603      	mov	r3, r0
 8009460:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009462:	79fb      	ldrb	r3, [r7, #7]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	200001ac 	.word	0x200001ac

08009470 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	68f9      	ldr	r1, [r7, #12]
 8009486:	4806      	ldr	r0, [pc, #24]	; (80094a0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009488:	f7fc f8e6 	bl	8005658 <HAL_SD_ReadBlocks_DMA>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009496:	7dfb      	ldrb	r3, [r7, #23]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3718      	adds	r7, #24
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	200001ac 	.word	0x200001ac

080094a4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b086      	sub	sp, #24
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	68f9      	ldr	r1, [r7, #12]
 80094ba:	4806      	ldr	r0, [pc, #24]	; (80094d4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80094bc:	f7fc f9ae 	bl	800581c <HAL_SD_WriteBlocks_DMA>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	200001ac 	.word	0x200001ac

080094d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80094dc:	4805      	ldr	r0, [pc, #20]	; (80094f4 <BSP_SD_GetCardState+0x1c>)
 80094de:	f7fc fdd3 	bl	8006088 <HAL_SD_GetCardState>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b04      	cmp	r3, #4
 80094e6:	bf14      	ite	ne
 80094e8:	2301      	movne	r3, #1
 80094ea:	2300      	moveq	r3, #0
 80094ec:	b2db      	uxtb	r3, r3
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	200001ac 	.word	0x200001ac

080094f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009500:	6879      	ldr	r1, [r7, #4]
 8009502:	4803      	ldr	r0, [pc, #12]	; (8009510 <BSP_SD_GetCardInfo+0x18>)
 8009504:	f7fc fd94 	bl	8006030 <HAL_SD_GetCardInfo>
}
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	200001ac 	.word	0x200001ac

08009514 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800951c:	f000 f818 	bl	8009550 <BSP_SD_AbortCallback>
}
 8009520:	bf00      	nop
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009530:	f000 f9a8 	bl	8009884 <BSP_SD_WriteCpltCallback>
}
 8009534:	bf00      	nop
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009544:	f000 f9aa 	bl	800989c <BSP_SD_ReadCpltCallback>
}
 8009548:	bf00      	nop
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009550:	b480      	push	{r7}
 8009552:	af00      	add	r7, sp, #0

}
 8009554:	bf00      	nop
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b082      	sub	sp, #8
 8009562:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009564:	2301      	movs	r3, #1
 8009566:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009568:	f000 f80c 	bl	8009584 <BSP_PlatformIsDetected>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009572:	2300      	movs	r3, #0
 8009574:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009576:	79fb      	ldrb	r3, [r7, #7]
 8009578:	b2db      	uxtb	r3, r3
}
 800957a:	4618      	mov	r0, r3
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800958a:	2301      	movs	r3, #1
 800958c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800958e:	2104      	movs	r1, #4
 8009590:	4806      	ldr	r0, [pc, #24]	; (80095ac <BSP_PlatformIsDetected+0x28>)
 8009592:	f7f9 fbc3 	bl	8002d1c <HAL_GPIO_ReadPin>
 8009596:	4603      	mov	r3, r0
 8009598:	2b01      	cmp	r3, #1
 800959a:	d001      	beq.n	80095a0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800959c:	2300      	movs	r3, #0
 800959e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80095a0:	79fb      	ldrb	r3, [r7, #7]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	40021800 	.word	0x40021800

080095b0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80095b8:	f7f7 ff88 	bl	80014cc <HAL_GetTick>
 80095bc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80095be:	e006      	b.n	80095ce <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80095c0:	f7ff ff8a 	bl	80094d8 <BSP_SD_GetCardState>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	e009      	b.n	80095e2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80095ce:	f7f7 ff7d 	bl	80014cc <HAL_GetTick>
 80095d2:	4602      	mov	r2, r0
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d8f0      	bhi.n	80095c0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80095de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
	...

080095ec <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80095f6:	4b0b      	ldr	r3, [pc, #44]	; (8009624 <SD_CheckStatus+0x38>)
 80095f8:	2201      	movs	r2, #1
 80095fa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80095fc:	f7ff ff6c 	bl	80094d8 <BSP_SD_GetCardState>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d107      	bne.n	8009616 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009606:	4b07      	ldr	r3, [pc, #28]	; (8009624 <SD_CheckStatus+0x38>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	b2db      	uxtb	r3, r3
 800960c:	f023 0301 	bic.w	r3, r3, #1
 8009610:	b2da      	uxtb	r2, r3
 8009612:	4b04      	ldr	r3, [pc, #16]	; (8009624 <SD_CheckStatus+0x38>)
 8009614:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009616:	4b03      	ldr	r3, [pc, #12]	; (8009624 <SD_CheckStatus+0x38>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	b2db      	uxtb	r3, r3
}
 800961c:	4618      	mov	r0, r3
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	20000009 	.word	0x20000009

08009628 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	4603      	mov	r3, r0
 8009630:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009632:	f7ff ff05 	bl	8009440 <BSP_SD_Init>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d107      	bne.n	800964c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800963c:	79fb      	ldrb	r3, [r7, #7]
 800963e:	4618      	mov	r0, r3
 8009640:	f7ff ffd4 	bl	80095ec <SD_CheckStatus>
 8009644:	4603      	mov	r3, r0
 8009646:	461a      	mov	r2, r3
 8009648:	4b04      	ldr	r3, [pc, #16]	; (800965c <SD_initialize+0x34>)
 800964a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800964c:	4b03      	ldr	r3, [pc, #12]	; (800965c <SD_initialize+0x34>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	b2db      	uxtb	r3, r3
}
 8009652:	4618      	mov	r0, r3
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20000009 	.word	0x20000009

08009660 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	4603      	mov	r3, r0
 8009668:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800966a:	79fb      	ldrb	r3, [r7, #7]
 800966c:	4618      	mov	r0, r3
 800966e:	f7ff ffbd 	bl	80095ec <SD_CheckStatus>
 8009672:	4603      	mov	r3, r0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	60b9      	str	r1, [r7, #8]
 8009684:	607a      	str	r2, [r7, #4]
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	4603      	mov	r3, r0
 800968a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009690:	f247 5030 	movw	r0, #30000	; 0x7530
 8009694:	f7ff ff8c 	bl	80095b0 <SD_CheckStatusWithTimeout>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	da01      	bge.n	80096a2 <SD_read+0x26>
  {
    return res;
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	e03b      	b.n	800971a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80096a2:	683a      	ldr	r2, [r7, #0]
 80096a4:	6879      	ldr	r1, [r7, #4]
 80096a6:	68b8      	ldr	r0, [r7, #8]
 80096a8:	f7ff fee2 	bl	8009470 <BSP_SD_ReadBlocks_DMA>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d132      	bne.n	8009718 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80096b2:	4b1c      	ldr	r3, [pc, #112]	; (8009724 <SD_read+0xa8>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80096b8:	f7f7 ff08 	bl	80014cc <HAL_GetTick>
 80096bc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80096be:	bf00      	nop
 80096c0:	4b18      	ldr	r3, [pc, #96]	; (8009724 <SD_read+0xa8>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d108      	bne.n	80096da <SD_read+0x5e>
 80096c8:	f7f7 ff00 	bl	80014cc <HAL_GetTick>
 80096cc:	4602      	mov	r2, r0
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	f247 522f 	movw	r2, #29999	; 0x752f
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d9f2      	bls.n	80096c0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80096da:	4b12      	ldr	r3, [pc, #72]	; (8009724 <SD_read+0xa8>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d102      	bne.n	80096e8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	75fb      	strb	r3, [r7, #23]
 80096e6:	e017      	b.n	8009718 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80096e8:	4b0e      	ldr	r3, [pc, #56]	; (8009724 <SD_read+0xa8>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80096ee:	f7f7 feed 	bl	80014cc <HAL_GetTick>
 80096f2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80096f4:	e007      	b.n	8009706 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80096f6:	f7ff feef 	bl	80094d8 <BSP_SD_GetCardState>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d102      	bne.n	8009706 <SD_read+0x8a>
          {
            res = RES_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009704:	e008      	b.n	8009718 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009706:	f7f7 fee1 	bl	80014cc <HAL_GetTick>
 800970a:	4602      	mov	r2, r0
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	f247 522f 	movw	r2, #29999	; 0x752f
 8009714:	4293      	cmp	r3, r2
 8009716:	d9ee      	bls.n	80096f6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	20002850 	.word	0x20002850

08009728 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	607a      	str	r2, [r7, #4]
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800973c:	4b24      	ldr	r3, [pc, #144]	; (80097d0 <SD_write+0xa8>)
 800973e:	2200      	movs	r2, #0
 8009740:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009742:	f247 5030 	movw	r0, #30000	; 0x7530
 8009746:	f7ff ff33 	bl	80095b0 <SD_CheckStatusWithTimeout>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	da01      	bge.n	8009754 <SD_write+0x2c>
  {
    return res;
 8009750:	7dfb      	ldrb	r3, [r7, #23]
 8009752:	e038      	b.n	80097c6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	6879      	ldr	r1, [r7, #4]
 8009758:	68b8      	ldr	r0, [r7, #8]
 800975a:	f7ff fea3 	bl	80094a4 <BSP_SD_WriteBlocks_DMA>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d12f      	bne.n	80097c4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009764:	f7f7 feb2 	bl	80014cc <HAL_GetTick>
 8009768:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800976a:	bf00      	nop
 800976c:	4b18      	ldr	r3, [pc, #96]	; (80097d0 <SD_write+0xa8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d108      	bne.n	8009786 <SD_write+0x5e>
 8009774:	f7f7 feaa 	bl	80014cc <HAL_GetTick>
 8009778:	4602      	mov	r2, r0
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	f247 522f 	movw	r2, #29999	; 0x752f
 8009782:	4293      	cmp	r3, r2
 8009784:	d9f2      	bls.n	800976c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009786:	4b12      	ldr	r3, [pc, #72]	; (80097d0 <SD_write+0xa8>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d102      	bne.n	8009794 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	75fb      	strb	r3, [r7, #23]
 8009792:	e017      	b.n	80097c4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009794:	4b0e      	ldr	r3, [pc, #56]	; (80097d0 <SD_write+0xa8>)
 8009796:	2200      	movs	r2, #0
 8009798:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800979a:	f7f7 fe97 	bl	80014cc <HAL_GetTick>
 800979e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80097a0:	e007      	b.n	80097b2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80097a2:	f7ff fe99 	bl	80094d8 <BSP_SD_GetCardState>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d102      	bne.n	80097b2 <SD_write+0x8a>
          {
            res = RES_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	75fb      	strb	r3, [r7, #23]
            break;
 80097b0:	e008      	b.n	80097c4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80097b2:	f7f7 fe8b 	bl	80014cc <HAL_GetTick>
 80097b6:	4602      	mov	r2, r0
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	f247 522f 	movw	r2, #29999	; 0x752f
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d9ee      	bls.n	80097a2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80097c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3718      	adds	r7, #24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	2000284c 	.word	0x2000284c

080097d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b08c      	sub	sp, #48	; 0x30
 80097d8:	af00      	add	r7, sp, #0
 80097da:	4603      	mov	r3, r0
 80097dc:	603a      	str	r2, [r7, #0]
 80097de:	71fb      	strb	r3, [r7, #7]
 80097e0:	460b      	mov	r3, r1
 80097e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80097ea:	4b25      	ldr	r3, [pc, #148]	; (8009880 <SD_ioctl+0xac>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d001      	beq.n	80097fc <SD_ioctl+0x28>
 80097f8:	2303      	movs	r3, #3
 80097fa:	e03c      	b.n	8009876 <SD_ioctl+0xa2>

  switch (cmd)
 80097fc:	79bb      	ldrb	r3, [r7, #6]
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d834      	bhi.n	800986c <SD_ioctl+0x98>
 8009802:	a201      	add	r2, pc, #4	; (adr r2, 8009808 <SD_ioctl+0x34>)
 8009804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009808:	08009819 	.word	0x08009819
 800980c:	08009821 	.word	0x08009821
 8009810:	08009839 	.word	0x08009839
 8009814:	08009853 	.word	0x08009853
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800981e:	e028      	b.n	8009872 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009820:	f107 030c 	add.w	r3, r7, #12
 8009824:	4618      	mov	r0, r3
 8009826:	f7ff fe67 	bl	80094f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800982a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009836:	e01c      	b.n	8009872 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009838:	f107 030c 	add.w	r3, r7, #12
 800983c:	4618      	mov	r0, r3
 800983e:	f7ff fe5b 	bl	80094f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009844:	b29a      	uxth	r2, r3
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009850:	e00f      	b.n	8009872 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009852:	f107 030c 	add.w	r3, r7, #12
 8009856:	4618      	mov	r0, r3
 8009858:	f7ff fe4e 	bl	80094f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	0a5a      	lsrs	r2, r3, #9
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800986a:	e002      	b.n	8009872 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800986c:	2304      	movs	r3, #4
 800986e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009876:	4618      	mov	r0, r3
 8009878:	3730      	adds	r7, #48	; 0x30
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000009 	.word	0x20000009

08009884 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009884:	b480      	push	{r7}
 8009886:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009888:	4b03      	ldr	r3, [pc, #12]	; (8009898 <BSP_SD_WriteCpltCallback+0x14>)
 800988a:	2201      	movs	r2, #1
 800988c:	601a      	str	r2, [r3, #0]
}
 800988e:	bf00      	nop
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr
 8009898:	2000284c 	.word	0x2000284c

0800989c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800989c:	b480      	push	{r7}
 800989e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80098a0:	4b03      	ldr	r3, [pc, #12]	; (80098b0 <BSP_SD_ReadCpltCallback+0x14>)
 80098a2:	2201      	movs	r2, #1
 80098a4:	601a      	str	r2, [r3, #0]
}
 80098a6:	bf00      	nop
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	20002850 	.word	0x20002850

080098b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80098c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80098c4:	f004 ff22 	bl	800e70c <malloc>
 80098c8:	4603      	mov	r3, r0
 80098ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d109      	bne.n	80098e6 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	32b0      	adds	r2, #176	; 0xb0
 80098dc:	2100      	movs	r1, #0
 80098de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80098e2:	2302      	movs	r3, #2
 80098e4:	e0d4      	b.n	8009a90 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80098e6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80098ea:	2100      	movs	r1, #0
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f005 f92d 	bl	800eb4c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	32b0      	adds	r2, #176	; 0xb0
 80098fc:	68f9      	ldr	r1, [r7, #12]
 80098fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	32b0      	adds	r2, #176	; 0xb0
 800990c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	7c1b      	ldrb	r3, [r3, #16]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d138      	bne.n	8009990 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800991e:	4b5e      	ldr	r3, [pc, #376]	; (8009a98 <USBD_CDC_Init+0x1e4>)
 8009920:	7819      	ldrb	r1, [r3, #0]
 8009922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009926:	2202      	movs	r2, #2
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f004 fd4c 	bl	800e3c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800992e:	4b5a      	ldr	r3, [pc, #360]	; (8009a98 <USBD_CDC_Init+0x1e4>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	f003 020f 	and.w	r2, r3, #15
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	4613      	mov	r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	440b      	add	r3, r1
 8009942:	3324      	adds	r3, #36	; 0x24
 8009944:	2201      	movs	r2, #1
 8009946:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009948:	4b54      	ldr	r3, [pc, #336]	; (8009a9c <USBD_CDC_Init+0x1e8>)
 800994a:	7819      	ldrb	r1, [r3, #0]
 800994c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009950:	2202      	movs	r2, #2
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f004 fd37 	bl	800e3c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009958:	4b50      	ldr	r3, [pc, #320]	; (8009a9c <USBD_CDC_Init+0x1e8>)
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	f003 020f 	and.w	r2, r3, #15
 8009960:	6879      	ldr	r1, [r7, #4]
 8009962:	4613      	mov	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	440b      	add	r3, r1
 800996c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009970:	2201      	movs	r2, #1
 8009972:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009974:	4b4a      	ldr	r3, [pc, #296]	; (8009aa0 <USBD_CDC_Init+0x1ec>)
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	f003 020f 	and.w	r2, r3, #15
 800997c:	6879      	ldr	r1, [r7, #4]
 800997e:	4613      	mov	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	440b      	add	r3, r1
 8009988:	3326      	adds	r3, #38	; 0x26
 800998a:	2210      	movs	r2, #16
 800998c:	801a      	strh	r2, [r3, #0]
 800998e:	e035      	b.n	80099fc <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009990:	4b41      	ldr	r3, [pc, #260]	; (8009a98 <USBD_CDC_Init+0x1e4>)
 8009992:	7819      	ldrb	r1, [r3, #0]
 8009994:	2340      	movs	r3, #64	; 0x40
 8009996:	2202      	movs	r2, #2
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f004 fd14 	bl	800e3c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800999e:	4b3e      	ldr	r3, [pc, #248]	; (8009a98 <USBD_CDC_Init+0x1e4>)
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	f003 020f 	and.w	r2, r3, #15
 80099a6:	6879      	ldr	r1, [r7, #4]
 80099a8:	4613      	mov	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4413      	add	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	440b      	add	r3, r1
 80099b2:	3324      	adds	r3, #36	; 0x24
 80099b4:	2201      	movs	r2, #1
 80099b6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80099b8:	4b38      	ldr	r3, [pc, #224]	; (8009a9c <USBD_CDC_Init+0x1e8>)
 80099ba:	7819      	ldrb	r1, [r3, #0]
 80099bc:	2340      	movs	r3, #64	; 0x40
 80099be:	2202      	movs	r2, #2
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f004 fd00 	bl	800e3c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80099c6:	4b35      	ldr	r3, [pc, #212]	; (8009a9c <USBD_CDC_Init+0x1e8>)
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	f003 020f 	and.w	r2, r3, #15
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	440b      	add	r3, r1
 80099da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099de:	2201      	movs	r2, #1
 80099e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80099e2:	4b2f      	ldr	r3, [pc, #188]	; (8009aa0 <USBD_CDC_Init+0x1ec>)
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	f003 020f 	and.w	r2, r3, #15
 80099ea:	6879      	ldr	r1, [r7, #4]
 80099ec:	4613      	mov	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	440b      	add	r3, r1
 80099f6:	3326      	adds	r3, #38	; 0x26
 80099f8:	2210      	movs	r2, #16
 80099fa:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80099fc:	4b28      	ldr	r3, [pc, #160]	; (8009aa0 <USBD_CDC_Init+0x1ec>)
 80099fe:	7819      	ldrb	r1, [r3, #0]
 8009a00:	2308      	movs	r3, #8
 8009a02:	2203      	movs	r2, #3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f004 fcde 	bl	800e3c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009a0a:	4b25      	ldr	r3, [pc, #148]	; (8009aa0 <USBD_CDC_Init+0x1ec>)
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	f003 020f 	and.w	r2, r3, #15
 8009a12:	6879      	ldr	r1, [r7, #4]
 8009a14:	4613      	mov	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	440b      	add	r3, r1
 8009a1e:	3324      	adds	r3, #36	; 0x24
 8009a20:	2201      	movs	r2, #1
 8009a22:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	33b0      	adds	r3, #176	; 0xb0
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	e018      	b.n	8009a90 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	7c1b      	ldrb	r3, [r3, #16]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10a      	bne.n	8009a7c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a66:	4b0d      	ldr	r3, [pc, #52]	; (8009a9c <USBD_CDC_Init+0x1e8>)
 8009a68:	7819      	ldrb	r1, [r3, #0]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f004 fd95 	bl	800e5a4 <USBD_LL_PrepareReceive>
 8009a7a:	e008      	b.n	8009a8e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a7c:	4b07      	ldr	r3, [pc, #28]	; (8009a9c <USBD_CDC_Init+0x1e8>)
 8009a7e:	7819      	ldrb	r1, [r3, #0]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a86:	2340      	movs	r3, #64	; 0x40
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f004 fd8b 	bl	800e5a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	20000093 	.word	0x20000093
 8009a9c:	20000094 	.word	0x20000094
 8009aa0:	20000095 	.word	0x20000095

08009aa4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	460b      	mov	r3, r1
 8009aae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009ab0:	4b3a      	ldr	r3, [pc, #232]	; (8009b9c <USBD_CDC_DeInit+0xf8>)
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f004 fcab 	bl	800e412 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009abc:	4b37      	ldr	r3, [pc, #220]	; (8009b9c <USBD_CDC_DeInit+0xf8>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	f003 020f 	and.w	r2, r3, #15
 8009ac4:	6879      	ldr	r1, [r7, #4]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	440b      	add	r3, r1
 8009ad0:	3324      	adds	r3, #36	; 0x24
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009ad6:	4b32      	ldr	r3, [pc, #200]	; (8009ba0 <USBD_CDC_DeInit+0xfc>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f004 fc98 	bl	800e412 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009ae2:	4b2f      	ldr	r3, [pc, #188]	; (8009ba0 <USBD_CDC_DeInit+0xfc>)
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	f003 020f 	and.w	r2, r3, #15
 8009aea:	6879      	ldr	r1, [r7, #4]
 8009aec:	4613      	mov	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	440b      	add	r3, r1
 8009af6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009afa:	2200      	movs	r2, #0
 8009afc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009afe:	4b29      	ldr	r3, [pc, #164]	; (8009ba4 <USBD_CDC_DeInit+0x100>)
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f004 fc84 	bl	800e412 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009b0a:	4b26      	ldr	r3, [pc, #152]	; (8009ba4 <USBD_CDC_DeInit+0x100>)
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	f003 020f 	and.w	r2, r3, #15
 8009b12:	6879      	ldr	r1, [r7, #4]
 8009b14:	4613      	mov	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	440b      	add	r3, r1
 8009b1e:	3324      	adds	r3, #36	; 0x24
 8009b20:	2200      	movs	r2, #0
 8009b22:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009b24:	4b1f      	ldr	r3, [pc, #124]	; (8009ba4 <USBD_CDC_DeInit+0x100>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	f003 020f 	and.w	r2, r3, #15
 8009b2c:	6879      	ldr	r1, [r7, #4]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	440b      	add	r3, r1
 8009b38:	3326      	adds	r3, #38	; 0x26
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	32b0      	adds	r2, #176	; 0xb0
 8009b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d01f      	beq.n	8009b90 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	33b0      	adds	r3, #176	; 0xb0
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4413      	add	r3, r2
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	32b0      	adds	r2, #176	; 0xb0
 8009b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f004 fdd2 	bl	800e71c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	32b0      	adds	r2, #176	; 0xb0
 8009b82:	2100      	movs	r1, #0
 8009b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20000093 	.word	0x20000093
 8009ba0:	20000094 	.word	0x20000094
 8009ba4:	20000095 	.word	0x20000095

08009ba8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	32b0      	adds	r2, #176	; 0xb0
 8009bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d101      	bne.n	8009bd8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e0bf      	b.n	8009d58 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d050      	beq.n	8009c86 <USBD_CDC_Setup+0xde>
 8009be4:	2b20      	cmp	r3, #32
 8009be6:	f040 80af 	bne.w	8009d48 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	88db      	ldrh	r3, [r3, #6]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d03a      	beq.n	8009c68 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	b25b      	sxtb	r3, r3
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	da1b      	bge.n	8009c34 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	33b0      	adds	r3, #176	; 0xb0
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009c12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	88d2      	ldrh	r2, [r2, #6]
 8009c18:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	88db      	ldrh	r3, [r3, #6]
 8009c1e:	2b07      	cmp	r3, #7
 8009c20:	bf28      	it	cs
 8009c22:	2307      	movcs	r3, #7
 8009c24:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	89fa      	ldrh	r2, [r7, #14]
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 fdad 	bl	800b78c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009c32:	e090      	b.n	8009d56 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	785a      	ldrb	r2, [r3, #1]
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	88db      	ldrh	r3, [r3, #6]
 8009c42:	2b3f      	cmp	r3, #63	; 0x3f
 8009c44:	d803      	bhi.n	8009c4e <USBD_CDC_Setup+0xa6>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	88db      	ldrh	r3, [r3, #6]
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	e000      	b.n	8009c50 <USBD_CDC_Setup+0xa8>
 8009c4e:	2240      	movs	r2, #64	; 0x40
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009c56:	6939      	ldr	r1, [r7, #16]
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009c5e:	461a      	mov	r2, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f001 fdbf 	bl	800b7e4 <USBD_CtlPrepareRx>
      break;
 8009c66:	e076      	b.n	8009d56 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	33b0      	adds	r3, #176	; 0xb0
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	7850      	ldrb	r0, [r2, #1]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	4798      	blx	r3
      break;
 8009c84:	e067      	b.n	8009d56 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	785b      	ldrb	r3, [r3, #1]
 8009c8a:	2b0b      	cmp	r3, #11
 8009c8c:	d851      	bhi.n	8009d32 <USBD_CDC_Setup+0x18a>
 8009c8e:	a201      	add	r2, pc, #4	; (adr r2, 8009c94 <USBD_CDC_Setup+0xec>)
 8009c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c94:	08009cc5 	.word	0x08009cc5
 8009c98:	08009d41 	.word	0x08009d41
 8009c9c:	08009d33 	.word	0x08009d33
 8009ca0:	08009d33 	.word	0x08009d33
 8009ca4:	08009d33 	.word	0x08009d33
 8009ca8:	08009d33 	.word	0x08009d33
 8009cac:	08009d33 	.word	0x08009d33
 8009cb0:	08009d33 	.word	0x08009d33
 8009cb4:	08009d33 	.word	0x08009d33
 8009cb8:	08009d33 	.word	0x08009d33
 8009cbc:	08009cef 	.word	0x08009cef
 8009cc0:	08009d19 	.word	0x08009d19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	d107      	bne.n	8009ce0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009cd0:	f107 030a 	add.w	r3, r7, #10
 8009cd4:	2202      	movs	r2, #2
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f001 fd57 	bl	800b78c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009cde:	e032      	b.n	8009d46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f001 fce1 	bl	800b6aa <USBD_CtlError>
            ret = USBD_FAIL;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	75fb      	strb	r3, [r7, #23]
          break;
 8009cec:	e02b      	b.n	8009d46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	2b03      	cmp	r3, #3
 8009cf8:	d107      	bne.n	8009d0a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009cfa:	f107 030d 	add.w	r3, r7, #13
 8009cfe:	2201      	movs	r2, #1
 8009d00:	4619      	mov	r1, r3
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f001 fd42 	bl	800b78c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d08:	e01d      	b.n	8009d46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f001 fccc 	bl	800b6aa <USBD_CtlError>
            ret = USBD_FAIL;
 8009d12:	2303      	movs	r3, #3
 8009d14:	75fb      	strb	r3, [r7, #23]
          break;
 8009d16:	e016      	b.n	8009d46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	2b03      	cmp	r3, #3
 8009d22:	d00f      	beq.n	8009d44 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f001 fcbf 	bl	800b6aa <USBD_CtlError>
            ret = USBD_FAIL;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009d30:	e008      	b.n	8009d44 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f001 fcb8 	bl	800b6aa <USBD_CtlError>
          ret = USBD_FAIL;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8009d3e:	e002      	b.n	8009d46 <USBD_CDC_Setup+0x19e>
          break;
 8009d40:	bf00      	nop
 8009d42:	e008      	b.n	8009d56 <USBD_CDC_Setup+0x1ae>
          break;
 8009d44:	bf00      	nop
      }
      break;
 8009d46:	e006      	b.n	8009d56 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f001 fcad 	bl	800b6aa <USBD_CtlError>
      ret = USBD_FAIL;
 8009d50:	2303      	movs	r3, #3
 8009d52:	75fb      	strb	r3, [r7, #23]
      break;
 8009d54:	bf00      	nop
  }

  return (uint8_t)ret;
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	32b0      	adds	r2, #176	; 0xb0
 8009d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009d86:	2303      	movs	r3, #3
 8009d88:	e065      	b.n	8009e56 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	32b0      	adds	r2, #176	; 0xb0
 8009d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d9a:	78fb      	ldrb	r3, [r7, #3]
 8009d9c:	f003 020f 	and.w	r2, r3, #15
 8009da0:	6879      	ldr	r1, [r7, #4]
 8009da2:	4613      	mov	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	440b      	add	r3, r1
 8009dac:	3318      	adds	r3, #24
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d02f      	beq.n	8009e14 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009db4:	78fb      	ldrb	r3, [r7, #3]
 8009db6:	f003 020f 	and.w	r2, r3, #15
 8009dba:	6879      	ldr	r1, [r7, #4]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	440b      	add	r3, r1
 8009dc6:	3318      	adds	r3, #24
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	78fb      	ldrb	r3, [r7, #3]
 8009dcc:	f003 010f 	and.w	r1, r3, #15
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	00db      	lsls	r3, r3, #3
 8009dd6:	440b      	add	r3, r1
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4403      	add	r3, r0
 8009ddc:	3348      	adds	r3, #72	; 0x48
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	fbb2 f1f3 	udiv	r1, r2, r3
 8009de4:	fb01 f303 	mul.w	r3, r1, r3
 8009de8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d112      	bne.n	8009e14 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009dee:	78fb      	ldrb	r3, [r7, #3]
 8009df0:	f003 020f 	and.w	r2, r3, #15
 8009df4:	6879      	ldr	r1, [r7, #4]
 8009df6:	4613      	mov	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	440b      	add	r3, r1
 8009e00:	3318      	adds	r3, #24
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009e06:	78f9      	ldrb	r1, [r7, #3]
 8009e08:	2300      	movs	r3, #0
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f004 fba8 	bl	800e562 <USBD_LL_Transmit>
 8009e12:	e01f      	b.n	8009e54 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	33b0      	adds	r3, #176	; 0xb0
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d010      	beq.n	8009e54 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	33b0      	adds	r3, #176	; 0xb0
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	4413      	add	r3, r2
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009e50:	78fa      	ldrb	r2, [r7, #3]
 8009e52:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b084      	sub	sp, #16
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	460b      	mov	r3, r1
 8009e68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	32b0      	adds	r2, #176	; 0xb0
 8009e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	32b0      	adds	r2, #176	; 0xb0
 8009e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d101      	bne.n	8009e90 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	e01a      	b.n	8009ec6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e90:	78fb      	ldrb	r3, [r7, #3]
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f004 fba6 	bl	800e5e6 <USBD_LL_GetRxDataSize>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	33b0      	adds	r3, #176	; 0xb0
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4413      	add	r3, r2
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	32b0      	adds	r2, #176	; 0xb0
 8009ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009eec:	2303      	movs	r3, #3
 8009eee:	e025      	b.n	8009f3c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	33b0      	adds	r3, #176	; 0xb0
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d01a      	beq.n	8009f3a <USBD_CDC_EP0_RxReady+0x6c>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009f0a:	2bff      	cmp	r3, #255	; 0xff
 8009f0c:	d015      	beq.n	8009f3a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	33b0      	adds	r3, #176	; 0xb0
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	4413      	add	r3, r2
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009f26:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009f2e:	b292      	uxth	r2, r2
 8009f30:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	22ff      	movs	r2, #255	; 0xff
 8009f36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f4c:	2182      	movs	r1, #130	; 0x82
 8009f4e:	4818      	ldr	r0, [pc, #96]	; (8009fb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f50:	f000 fd49 	bl	800a9e6 <USBD_GetEpDesc>
 8009f54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f56:	2101      	movs	r1, #1
 8009f58:	4815      	ldr	r0, [pc, #84]	; (8009fb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f5a:	f000 fd44 	bl	800a9e6 <USBD_GetEpDesc>
 8009f5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f60:	2181      	movs	r1, #129	; 0x81
 8009f62:	4813      	ldr	r0, [pc, #76]	; (8009fb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f64:	f000 fd3f 	bl	800a9e6 <USBD_GetEpDesc>
 8009f68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d002      	beq.n	8009f76 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	2210      	movs	r2, #16
 8009f74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d006      	beq.n	8009f8a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f84:	711a      	strb	r2, [r3, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d006      	beq.n	8009f9e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f98:	711a      	strb	r2, [r3, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2243      	movs	r2, #67	; 0x43
 8009fa2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009fa4:	4b02      	ldr	r3, [pc, #8]	; (8009fb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	20000050 	.word	0x20000050

08009fb4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009fbc:	2182      	movs	r1, #130	; 0x82
 8009fbe:	4818      	ldr	r0, [pc, #96]	; (800a020 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009fc0:	f000 fd11 	bl	800a9e6 <USBD_GetEpDesc>
 8009fc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	4815      	ldr	r0, [pc, #84]	; (800a020 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009fca:	f000 fd0c 	bl	800a9e6 <USBD_GetEpDesc>
 8009fce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009fd0:	2181      	movs	r1, #129	; 0x81
 8009fd2:	4813      	ldr	r0, [pc, #76]	; (800a020 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009fd4:	f000 fd07 	bl	800a9e6 <USBD_GetEpDesc>
 8009fd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d002      	beq.n	8009fe6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	2210      	movs	r2, #16
 8009fe4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d006      	beq.n	8009ffa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	711a      	strb	r2, [r3, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f042 0202 	orr.w	r2, r2, #2
 8009ff8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d006      	beq.n	800a00e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2200      	movs	r2, #0
 800a004:	711a      	strb	r2, [r3, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	f042 0202 	orr.w	r2, r2, #2
 800a00c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2243      	movs	r2, #67	; 0x43
 800a012:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a014:	4b02      	ldr	r3, [pc, #8]	; (800a020 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a016:	4618      	mov	r0, r3
 800a018:	3718      	adds	r7, #24
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	20000050 	.word	0x20000050

0800a024 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a02c:	2182      	movs	r1, #130	; 0x82
 800a02e:	4818      	ldr	r0, [pc, #96]	; (800a090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a030:	f000 fcd9 	bl	800a9e6 <USBD_GetEpDesc>
 800a034:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a036:	2101      	movs	r1, #1
 800a038:	4815      	ldr	r0, [pc, #84]	; (800a090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a03a:	f000 fcd4 	bl	800a9e6 <USBD_GetEpDesc>
 800a03e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a040:	2181      	movs	r1, #129	; 0x81
 800a042:	4813      	ldr	r0, [pc, #76]	; (800a090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a044:	f000 fccf 	bl	800a9e6 <USBD_GetEpDesc>
 800a048:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d002      	beq.n	800a056 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	2210      	movs	r2, #16
 800a054:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d006      	beq.n	800a06a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	2200      	movs	r2, #0
 800a060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a064:	711a      	strb	r2, [r3, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d006      	beq.n	800a07e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a078:	711a      	strb	r2, [r3, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2243      	movs	r2, #67	; 0x43
 800a082:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a084:	4b02      	ldr	r3, [pc, #8]	; (800a090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a086:	4618      	mov	r0, r3
 800a088:	3718      	adds	r7, #24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	20000050 	.word	0x20000050

0800a094 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	220a      	movs	r2, #10
 800a0a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a0a2:	4b03      	ldr	r3, [pc, #12]	; (800a0b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	2000000c 	.word	0x2000000c

0800a0b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e009      	b.n	800a0dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	33b0      	adds	r3, #176	; 0xb0
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	683a      	ldr	r2, [r7, #0]
 800a0d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b087      	sub	sp, #28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	32b0      	adds	r2, #176	; 0xb0
 800a0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a102:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d101      	bne.n	800a10e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e008      	b.n	800a120 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	371c      	adds	r7, #28
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	32b0      	adds	r2, #176	; 0xb0
 800a140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a144:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d101      	bne.n	800a150 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a14c:	2303      	movs	r3, #3
 800a14e:	e004      	b.n	800a15a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
	...

0800a168 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	32b0      	adds	r2, #176	; 0xb0
 800a17a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a180:	2301      	movs	r3, #1
 800a182:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e025      	b.n	800a1da <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a194:	2b00      	cmp	r3, #0
 800a196:	d11f      	bne.n	800a1d8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a1a0:	4b10      	ldr	r3, [pc, #64]	; (800a1e4 <USBD_CDC_TransmitPacket+0x7c>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	f003 020f 	and.w	r2, r3, #15
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	4413      	add	r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	4403      	add	r3, r0
 800a1ba:	3318      	adds	r3, #24
 800a1bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a1be:	4b09      	ldr	r3, [pc, #36]	; (800a1e4 <USBD_CDC_TransmitPacket+0x7c>)
 800a1c0:	7819      	ldrb	r1, [r3, #0]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f004 f9c7 	bl	800e562 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	20000093 	.word	0x20000093

0800a1e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	32b0      	adds	r2, #176	; 0xb0
 800a1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	32b0      	adds	r2, #176	; 0xb0
 800a20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d101      	bne.n	800a216 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a212:	2303      	movs	r3, #3
 800a214:	e018      	b.n	800a248 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	7c1b      	ldrb	r3, [r3, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10a      	bne.n	800a234 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a21e:	4b0c      	ldr	r3, [pc, #48]	; (800a250 <USBD_CDC_ReceivePacket+0x68>)
 800a220:	7819      	ldrb	r1, [r3, #0]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f004 f9b9 	bl	800e5a4 <USBD_LL_PrepareReceive>
 800a232:	e008      	b.n	800a246 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a234:	4b06      	ldr	r3, [pc, #24]	; (800a250 <USBD_CDC_ReceivePacket+0x68>)
 800a236:	7819      	ldrb	r1, [r3, #0]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a23e:	2340      	movs	r3, #64	; 0x40
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f004 f9af 	bl	800e5a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	20000094 	.word	0x20000094

0800a254 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	4613      	mov	r3, r2
 800a260:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a268:	2303      	movs	r3, #3
 800a26a:	e01f      	b.n	800a2ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	79fa      	ldrb	r2, [r7, #7]
 800a29e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f004 f829 	bl	800e2f8 <USBD_LL_Init>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a2aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3718      	adds	r7, #24
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d101      	bne.n	800a2cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e025      	b.n	800a318 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	32ae      	adds	r2, #174	; 0xae
 800a2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00f      	beq.n	800a308 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	32ae      	adds	r2, #174	; 0xae
 800a2f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f8:	f107 020e 	add.w	r2, r7, #14
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	4798      	blx	r3
 800a300:	4602      	mov	r2, r0
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a30e:	1c5a      	adds	r2, r3, #1
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f004 f831 	bl	800e390 <USBD_LL_Start>
 800a32e:	4603      	mov	r3, r0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a340:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a342:	4618      	mov	r0, r3
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	460b      	mov	r3, r1
 800a358:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a364:	2b00      	cmp	r3, #0
 800a366:	d009      	beq.n	800a37c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	78fa      	ldrb	r2, [r7, #3]
 800a372:	4611      	mov	r1, r2
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	4798      	blx	r3
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b084      	sub	sp, #16
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	460b      	mov	r3, r1
 800a390:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	78fa      	ldrb	r2, [r7, #3]
 800a3a0:	4611      	mov	r1, r2
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	4798      	blx	r3
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b084      	sub	sp, #16
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3ca:	6839      	ldr	r1, [r7, #0]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f001 f932 	bl	800b636 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a3ee:	f003 031f 	and.w	r3, r3, #31
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d01a      	beq.n	800a42c <USBD_LL_SetupStage+0x72>
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d822      	bhi.n	800a440 <USBD_LL_SetupStage+0x86>
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <USBD_LL_SetupStage+0x4a>
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d00a      	beq.n	800a418 <USBD_LL_SetupStage+0x5e>
 800a402:	e01d      	b.n	800a440 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a40a:	4619      	mov	r1, r3
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 fb5f 	bl	800aad0 <USBD_StdDevReq>
 800a412:	4603      	mov	r3, r0
 800a414:	73fb      	strb	r3, [r7, #15]
      break;
 800a416:	e020      	b.n	800a45a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a41e:	4619      	mov	r1, r3
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fbc7 	bl	800abb4 <USBD_StdItfReq>
 800a426:	4603      	mov	r3, r0
 800a428:	73fb      	strb	r3, [r7, #15]
      break;
 800a42a:	e016      	b.n	800a45a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fc29 	bl	800ac8c <USBD_StdEPReq>
 800a43a:	4603      	mov	r3, r0
 800a43c:	73fb      	strb	r3, [r7, #15]
      break;
 800a43e:	e00c      	b.n	800a45a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a446:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f003 fffe 	bl	800e450 <USBD_LL_StallEP>
 800a454:	4603      	mov	r3, r0
 800a456:	73fb      	strb	r3, [r7, #15]
      break;
 800a458:	bf00      	nop
  }

  return ret;
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	460b      	mov	r3, r1
 800a46e:	607a      	str	r2, [r7, #4]
 800a470:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a472:	2300      	movs	r3, #0
 800a474:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a476:	7afb      	ldrb	r3, [r7, #11]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d16e      	bne.n	800a55a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a482:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	f040 8098 	bne.w	800a5c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	689a      	ldr	r2, [r3, #8]
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d913      	bls.n	800a4c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	689a      	ldr	r2, [r3, #8]
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	1ad2      	subs	r2, r2, r3
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	68da      	ldr	r2, [r3, #12]
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	bf28      	it	cs
 800a4b6:	4613      	movcs	r3, r2
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	6879      	ldr	r1, [r7, #4]
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f001 f9ae 	bl	800b81e <USBD_CtlContinueRx>
 800a4c2:	e07d      	b.n	800a5c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a4ca:	f003 031f 	and.w	r3, r3, #31
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d014      	beq.n	800a4fc <USBD_LL_DataOutStage+0x98>
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d81d      	bhi.n	800a512 <USBD_LL_DataOutStage+0xae>
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <USBD_LL_DataOutStage+0x7c>
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d003      	beq.n	800a4e6 <USBD_LL_DataOutStage+0x82>
 800a4de:	e018      	b.n	800a512 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	75bb      	strb	r3, [r7, #22]
            break;
 800a4e4:	e018      	b.n	800a518 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f000 fa5e 	bl	800a9b2 <USBD_CoreFindIF>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	75bb      	strb	r3, [r7, #22]
            break;
 800a4fa:	e00d      	b.n	800a518 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a502:	b2db      	uxtb	r3, r3
 800a504:	4619      	mov	r1, r3
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f000 fa60 	bl	800a9cc <USBD_CoreFindEP>
 800a50c:	4603      	mov	r3, r0
 800a50e:	75bb      	strb	r3, [r7, #22]
            break;
 800a510:	e002      	b.n	800a518 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a512:	2300      	movs	r3, #0
 800a514:	75bb      	strb	r3, [r7, #22]
            break;
 800a516:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a518:	7dbb      	ldrb	r3, [r7, #22]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d119      	bne.n	800a552 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b03      	cmp	r3, #3
 800a528:	d113      	bne.n	800a552 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a52a:	7dba      	ldrb	r2, [r7, #22]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	32ae      	adds	r2, #174	; 0xae
 800a530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00b      	beq.n	800a552 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a53a:	7dba      	ldrb	r2, [r7, #22]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a542:	7dba      	ldrb	r2, [r7, #22]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	32ae      	adds	r2, #174	; 0xae
 800a548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f001 f974 	bl	800b840 <USBD_CtlSendStatus>
 800a558:	e032      	b.n	800a5c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a55a:	7afb      	ldrb	r3, [r7, #11]
 800a55c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a560:	b2db      	uxtb	r3, r3
 800a562:	4619      	mov	r1, r3
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 fa31 	bl	800a9cc <USBD_CoreFindEP>
 800a56a:	4603      	mov	r3, r0
 800a56c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a56e:	7dbb      	ldrb	r3, [r7, #22]
 800a570:	2bff      	cmp	r3, #255	; 0xff
 800a572:	d025      	beq.n	800a5c0 <USBD_LL_DataOutStage+0x15c>
 800a574:	7dbb      	ldrb	r3, [r7, #22]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d122      	bne.n	800a5c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b03      	cmp	r3, #3
 800a584:	d117      	bne.n	800a5b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a586:	7dba      	ldrb	r2, [r7, #22]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	32ae      	adds	r2, #174	; 0xae
 800a58c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00f      	beq.n	800a5b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a596:	7dba      	ldrb	r2, [r7, #22]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a59e:	7dba      	ldrb	r2, [r7, #22]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	32ae      	adds	r2, #174	; 0xae
 800a5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	7afa      	ldrb	r2, [r7, #11]
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	4798      	blx	r3
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a5bc:	7dfb      	ldrb	r3, [r7, #23]
 800a5be:	e000      	b.n	800a5c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3718      	adds	r7, #24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b086      	sub	sp, #24
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	60f8      	str	r0, [r7, #12]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	607a      	str	r2, [r7, #4]
 800a5d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a5d8:	7afb      	ldrb	r3, [r7, #11]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d16f      	bne.n	800a6be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	3314      	adds	r3, #20
 800a5e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d15a      	bne.n	800a6a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	689a      	ldr	r2, [r3, #8]
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d914      	bls.n	800a624 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	689a      	ldr	r2, [r3, #8]
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	1ad2      	subs	r2, r2, r3
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	461a      	mov	r2, r3
 800a60e:	6879      	ldr	r1, [r7, #4]
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f001 f8d6 	bl	800b7c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a616:	2300      	movs	r3, #0
 800a618:	2200      	movs	r2, #0
 800a61a:	2100      	movs	r1, #0
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f003 ffc1 	bl	800e5a4 <USBD_LL_PrepareReceive>
 800a622:	e03f      	b.n	800a6a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	68da      	ldr	r2, [r3, #12]
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d11c      	bne.n	800a66a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a638:	429a      	cmp	r2, r3
 800a63a:	d316      	bcc.n	800a66a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a646:	429a      	cmp	r2, r3
 800a648:	d20f      	bcs.n	800a66a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a64a:	2200      	movs	r2, #0
 800a64c:	2100      	movs	r1, #0
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f001 f8b7 	bl	800b7c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a65c:	2300      	movs	r3, #0
 800a65e:	2200      	movs	r2, #0
 800a660:	2100      	movs	r1, #0
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f003 ff9e 	bl	800e5a4 <USBD_LL_PrepareReceive>
 800a668:	e01c      	b.n	800a6a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2b03      	cmp	r3, #3
 800a674:	d10f      	bne.n	800a696 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d009      	beq.n	800a696 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a696:	2180      	movs	r1, #128	; 0x80
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f003 fed9 	bl	800e450 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f001 f8e1 	bl	800b866 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d03a      	beq.n	800a724 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f7ff fe42 	bl	800a338 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a6bc:	e032      	b.n	800a724 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a6be:	7afb      	ldrb	r3, [r7, #11]
 800a6c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 f97f 	bl	800a9cc <USBD_CoreFindEP>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6d2:	7dfb      	ldrb	r3, [r7, #23]
 800a6d4:	2bff      	cmp	r3, #255	; 0xff
 800a6d6:	d025      	beq.n	800a724 <USBD_LL_DataInStage+0x15a>
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d122      	bne.n	800a724 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b03      	cmp	r3, #3
 800a6e8:	d11c      	bne.n	800a724 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a6ea:	7dfa      	ldrb	r2, [r7, #23]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	32ae      	adds	r2, #174	; 0xae
 800a6f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d014      	beq.n	800a724 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a6fa:	7dfa      	ldrb	r2, [r7, #23]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a702:	7dfa      	ldrb	r2, [r7, #23]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	32ae      	adds	r2, #174	; 0xae
 800a708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	7afa      	ldrb	r2, [r7, #11]
 800a710:	4611      	mov	r1, r2
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	4798      	blx	r3
 800a716:	4603      	mov	r3, r0
 800a718:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a71a:	7dbb      	ldrb	r3, [r7, #22]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a720:	7dbb      	ldrb	r3, [r7, #22]
 800a722:	e000      	b.n	800a726 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3718      	adds	r7, #24
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a766:	2b00      	cmp	r3, #0
 800a768:	d014      	beq.n	800a794 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00e      	beq.n	800a794 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	6852      	ldr	r2, [r2, #4]
 800a782:	b2d2      	uxtb	r2, r2
 800a784:	4611      	mov	r1, r2
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	4798      	blx	r3
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a790:	2303      	movs	r3, #3
 800a792:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a794:	2340      	movs	r3, #64	; 0x40
 800a796:	2200      	movs	r2, #0
 800a798:	2100      	movs	r1, #0
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f003 fe13 	bl	800e3c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2240      	movs	r2, #64	; 0x40
 800a7ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7b0:	2340      	movs	r3, #64	; 0x40
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2180      	movs	r1, #128	; 0x80
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f003 fe05 	bl	800e3c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2240      	movs	r2, #64	; 0x40
 800a7c6:	621a      	str	r2, [r3, #32]

  return ret;
 800a7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b083      	sub	sp, #12
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
 800a7da:	460b      	mov	r3, r1
 800a7dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	78fa      	ldrb	r2, [r7, #3]
 800a7e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b083      	sub	sp, #12
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a800:	b2da      	uxtb	r2, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2204      	movs	r2, #4
 800a80c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	370c      	adds	r7, #12
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a81e:	b480      	push	{r7}
 800a820:	b083      	sub	sp, #12
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d106      	bne.n	800a840 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a838:	b2da      	uxtb	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	370c      	adds	r7, #12
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b082      	sub	sp, #8
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b03      	cmp	r3, #3
 800a860:	d110      	bne.n	800a884 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00b      	beq.n	800a884 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a872:	69db      	ldr	r3, [r3, #28]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d005      	beq.n	800a884 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a87e:	69db      	ldr	r3, [r3, #28]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b082      	sub	sp, #8
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
 800a896:	460b      	mov	r3, r1
 800a898:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	32ae      	adds	r2, #174	; 0xae
 800a8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d101      	bne.n	800a8b0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e01c      	b.n	800a8ea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b03      	cmp	r3, #3
 800a8ba:	d115      	bne.n	800a8e8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	32ae      	adds	r2, #174	; 0xae
 800a8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ca:	6a1b      	ldr	r3, [r3, #32]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00b      	beq.n	800a8e8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	32ae      	adds	r2, #174	; 0xae
 800a8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8de:	6a1b      	ldr	r3, [r3, #32]
 800a8e0:	78fa      	ldrb	r2, [r7, #3]
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b082      	sub	sp, #8
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	32ae      	adds	r2, #174	; 0xae
 800a908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a910:	2303      	movs	r3, #3
 800a912:	e01c      	b.n	800a94e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	2b03      	cmp	r3, #3
 800a91e:	d115      	bne.n	800a94c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	32ae      	adds	r2, #174	; 0xae
 800a92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00b      	beq.n	800a94c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	32ae      	adds	r2, #174	; 0xae
 800a93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a944:	78fa      	ldrb	r2, [r7, #3]
 800a946:	4611      	mov	r1, r2
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a956:	b480      	push	{r7}
 800a958:	b083      	sub	sp, #12
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00e      	beq.n	800a9a8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	6852      	ldr	r2, [r2, #4]
 800a996:	b2d2      	uxtb	r2, r2
 800a998:	4611      	mov	r1, r2
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	4798      	blx	r3
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a9be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a9d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b086      	sub	sp, #24
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	885b      	ldrh	r3, [r3, #2]
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d920      	bls.n	800aa50 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aa16:	e013      	b.n	800aa40 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aa18:	f107 030a 	add.w	r3, r7, #10
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6978      	ldr	r0, [r7, #20]
 800aa20:	f000 f81b 	bl	800aa5a <USBD_GetNextDesc>
 800aa24:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	785b      	ldrb	r3, [r3, #1]
 800aa2a:	2b05      	cmp	r3, #5
 800aa2c:	d108      	bne.n	800aa40 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	789b      	ldrb	r3, [r3, #2]
 800aa36:	78fa      	ldrb	r2, [r7, #3]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d008      	beq.n	800aa4e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	885b      	ldrh	r3, [r3, #2]
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	897b      	ldrh	r3, [r7, #10]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d8e5      	bhi.n	800aa18 <USBD_GetEpDesc+0x32>
 800aa4c:	e000      	b.n	800aa50 <USBD_GetEpDesc+0x6a>
          break;
 800aa4e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aa50:	693b      	ldr	r3, [r7, #16]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3718      	adds	r7, #24
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b085      	sub	sp, #20
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	881a      	ldrh	r2, [r3, #0]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	4413      	add	r3, r2
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4413      	add	r3, r2
 800aa84:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa86:	68fb      	ldr	r3, [r7, #12]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3714      	adds	r7, #20
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b087      	sub	sp, #28
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aab2:	8a3b      	ldrh	r3, [r7, #16]
 800aab4:	021b      	lsls	r3, r3, #8
 800aab6:	b21a      	sxth	r2, r3
 800aab8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	b21b      	sxth	r3, r3
 800aac0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aac2:	89fb      	ldrh	r3, [r7, #14]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	371c      	adds	r7, #28
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aae6:	2b40      	cmp	r3, #64	; 0x40
 800aae8:	d005      	beq.n	800aaf6 <USBD_StdDevReq+0x26>
 800aaea:	2b40      	cmp	r3, #64	; 0x40
 800aaec:	d857      	bhi.n	800ab9e <USBD_StdDevReq+0xce>
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00f      	beq.n	800ab12 <USBD_StdDevReq+0x42>
 800aaf2:	2b20      	cmp	r3, #32
 800aaf4:	d153      	bne.n	800ab9e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	32ae      	adds	r2, #174	; 0xae
 800ab00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	4798      	blx	r3
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab10:	e04a      	b.n	800aba8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	785b      	ldrb	r3, [r3, #1]
 800ab16:	2b09      	cmp	r3, #9
 800ab18:	d83b      	bhi.n	800ab92 <USBD_StdDevReq+0xc2>
 800ab1a:	a201      	add	r2, pc, #4	; (adr r2, 800ab20 <USBD_StdDevReq+0x50>)
 800ab1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab20:	0800ab75 	.word	0x0800ab75
 800ab24:	0800ab89 	.word	0x0800ab89
 800ab28:	0800ab93 	.word	0x0800ab93
 800ab2c:	0800ab7f 	.word	0x0800ab7f
 800ab30:	0800ab93 	.word	0x0800ab93
 800ab34:	0800ab53 	.word	0x0800ab53
 800ab38:	0800ab49 	.word	0x0800ab49
 800ab3c:	0800ab93 	.word	0x0800ab93
 800ab40:	0800ab6b 	.word	0x0800ab6b
 800ab44:	0800ab5d 	.word	0x0800ab5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fa3c 	bl	800afc8 <USBD_GetDescriptor>
          break;
 800ab50:	e024      	b.n	800ab9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fbcb 	bl	800b2f0 <USBD_SetAddress>
          break;
 800ab5a:	e01f      	b.n	800ab9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fc0a 	bl	800b378 <USBD_SetConfig>
 800ab64:	4603      	mov	r3, r0
 800ab66:	73fb      	strb	r3, [r7, #15]
          break;
 800ab68:	e018      	b.n	800ab9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fcad 	bl	800b4cc <USBD_GetConfig>
          break;
 800ab72:	e013      	b.n	800ab9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab74:	6839      	ldr	r1, [r7, #0]
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fcde 	bl	800b538 <USBD_GetStatus>
          break;
 800ab7c:	e00e      	b.n	800ab9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 fd0d 	bl	800b5a0 <USBD_SetFeature>
          break;
 800ab86:	e009      	b.n	800ab9c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab88:	6839      	ldr	r1, [r7, #0]
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 fd31 	bl	800b5f2 <USBD_ClrFeature>
          break;
 800ab90:	e004      	b.n	800ab9c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ab92:	6839      	ldr	r1, [r7, #0]
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 fd88 	bl	800b6aa <USBD_CtlError>
          break;
 800ab9a:	bf00      	nop
      }
      break;
 800ab9c:	e004      	b.n	800aba8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 fd82 	bl	800b6aa <USBD_CtlError>
      break;
 800aba6:	bf00      	nop
  }

  return ret;
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop

0800abb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abca:	2b40      	cmp	r3, #64	; 0x40
 800abcc:	d005      	beq.n	800abda <USBD_StdItfReq+0x26>
 800abce:	2b40      	cmp	r3, #64	; 0x40
 800abd0:	d852      	bhi.n	800ac78 <USBD_StdItfReq+0xc4>
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d001      	beq.n	800abda <USBD_StdItfReq+0x26>
 800abd6:	2b20      	cmp	r3, #32
 800abd8:	d14e      	bne.n	800ac78 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	3b01      	subs	r3, #1
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d840      	bhi.n	800ac6a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	889b      	ldrh	r3, [r3, #4]
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d836      	bhi.n	800ac60 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	889b      	ldrh	r3, [r3, #4]
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	4619      	mov	r1, r3
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7ff fed9 	bl	800a9b2 <USBD_CoreFindIF>
 800ac00:	4603      	mov	r3, r0
 800ac02:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac04:	7bbb      	ldrb	r3, [r7, #14]
 800ac06:	2bff      	cmp	r3, #255	; 0xff
 800ac08:	d01d      	beq.n	800ac46 <USBD_StdItfReq+0x92>
 800ac0a:	7bbb      	ldrb	r3, [r7, #14]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d11a      	bne.n	800ac46 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ac10:	7bba      	ldrb	r2, [r7, #14]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	32ae      	adds	r2, #174	; 0xae
 800ac16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00f      	beq.n	800ac40 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ac20:	7bba      	ldrb	r2, [r7, #14]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac28:	7bba      	ldrb	r2, [r7, #14]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	32ae      	adds	r2, #174	; 0xae
 800ac2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	6839      	ldr	r1, [r7, #0]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	4798      	blx	r3
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac3e:	e004      	b.n	800ac4a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ac40:	2303      	movs	r3, #3
 800ac42:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac44:	e001      	b.n	800ac4a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ac46:	2303      	movs	r3, #3
 800ac48:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	88db      	ldrh	r3, [r3, #6]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d110      	bne.n	800ac74 <USBD_StdItfReq+0xc0>
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10d      	bne.n	800ac74 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fdf1 	bl	800b840 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ac5e:	e009      	b.n	800ac74 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 fd21 	bl	800b6aa <USBD_CtlError>
          break;
 800ac68:	e004      	b.n	800ac74 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ac6a:	6839      	ldr	r1, [r7, #0]
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fd1c 	bl	800b6aa <USBD_CtlError>
          break;
 800ac72:	e000      	b.n	800ac76 <USBD_StdItfReq+0xc2>
          break;
 800ac74:	bf00      	nop
      }
      break;
 800ac76:	e004      	b.n	800ac82 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ac78:	6839      	ldr	r1, [r7, #0]
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 fd15 	bl	800b6aa <USBD_CtlError>
      break;
 800ac80:	bf00      	nop
  }

  return ret;
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	889b      	ldrh	r3, [r3, #4]
 800ac9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aca8:	2b40      	cmp	r3, #64	; 0x40
 800acaa:	d007      	beq.n	800acbc <USBD_StdEPReq+0x30>
 800acac:	2b40      	cmp	r3, #64	; 0x40
 800acae:	f200 817f 	bhi.w	800afb0 <USBD_StdEPReq+0x324>
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d02a      	beq.n	800ad0c <USBD_StdEPReq+0x80>
 800acb6:	2b20      	cmp	r3, #32
 800acb8:	f040 817a 	bne.w	800afb0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800acbc:	7bbb      	ldrb	r3, [r7, #14]
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7ff fe83 	bl	800a9cc <USBD_CoreFindEP>
 800acc6:	4603      	mov	r3, r0
 800acc8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acca:	7b7b      	ldrb	r3, [r7, #13]
 800accc:	2bff      	cmp	r3, #255	; 0xff
 800acce:	f000 8174 	beq.w	800afba <USBD_StdEPReq+0x32e>
 800acd2:	7b7b      	ldrb	r3, [r7, #13]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f040 8170 	bne.w	800afba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800acda:	7b7a      	ldrb	r2, [r7, #13]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ace2:	7b7a      	ldrb	r2, [r7, #13]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	32ae      	adds	r2, #174	; 0xae
 800ace8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 8163 	beq.w	800afba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800acf4:	7b7a      	ldrb	r2, [r7, #13]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	32ae      	adds	r2, #174	; 0xae
 800acfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	4798      	blx	r3
 800ad06:	4603      	mov	r3, r0
 800ad08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ad0a:	e156      	b.n	800afba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	785b      	ldrb	r3, [r3, #1]
 800ad10:	2b03      	cmp	r3, #3
 800ad12:	d008      	beq.n	800ad26 <USBD_StdEPReq+0x9a>
 800ad14:	2b03      	cmp	r3, #3
 800ad16:	f300 8145 	bgt.w	800afa4 <USBD_StdEPReq+0x318>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 809b 	beq.w	800ae56 <USBD_StdEPReq+0x1ca>
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d03c      	beq.n	800ad9e <USBD_StdEPReq+0x112>
 800ad24:	e13e      	b.n	800afa4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d002      	beq.n	800ad38 <USBD_StdEPReq+0xac>
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d016      	beq.n	800ad64 <USBD_StdEPReq+0xd8>
 800ad36:	e02c      	b.n	800ad92 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad38:	7bbb      	ldrb	r3, [r7, #14]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00d      	beq.n	800ad5a <USBD_StdEPReq+0xce>
 800ad3e:	7bbb      	ldrb	r3, [r7, #14]
 800ad40:	2b80      	cmp	r3, #128	; 0x80
 800ad42:	d00a      	beq.n	800ad5a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad44:	7bbb      	ldrb	r3, [r7, #14]
 800ad46:	4619      	mov	r1, r3
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f003 fb81 	bl	800e450 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad4e:	2180      	movs	r1, #128	; 0x80
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f003 fb7d 	bl	800e450 <USBD_LL_StallEP>
 800ad56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad58:	e020      	b.n	800ad9c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fca4 	bl	800b6aa <USBD_CtlError>
              break;
 800ad62:	e01b      	b.n	800ad9c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	885b      	ldrh	r3, [r3, #2]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10e      	bne.n	800ad8a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00b      	beq.n	800ad8a <USBD_StdEPReq+0xfe>
 800ad72:	7bbb      	ldrb	r3, [r7, #14]
 800ad74:	2b80      	cmp	r3, #128	; 0x80
 800ad76:	d008      	beq.n	800ad8a <USBD_StdEPReq+0xfe>
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	88db      	ldrh	r3, [r3, #6]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d104      	bne.n	800ad8a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad80:	7bbb      	ldrb	r3, [r7, #14]
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f003 fb63 	bl	800e450 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fd58 	bl	800b840 <USBD_CtlSendStatus>

              break;
 800ad90:	e004      	b.n	800ad9c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ad92:	6839      	ldr	r1, [r7, #0]
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fc88 	bl	800b6aa <USBD_CtlError>
              break;
 800ad9a:	bf00      	nop
          }
          break;
 800ad9c:	e107      	b.n	800afae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d002      	beq.n	800adb0 <USBD_StdEPReq+0x124>
 800adaa:	2b03      	cmp	r3, #3
 800adac:	d016      	beq.n	800addc <USBD_StdEPReq+0x150>
 800adae:	e04b      	b.n	800ae48 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adb0:	7bbb      	ldrb	r3, [r7, #14]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00d      	beq.n	800add2 <USBD_StdEPReq+0x146>
 800adb6:	7bbb      	ldrb	r3, [r7, #14]
 800adb8:	2b80      	cmp	r3, #128	; 0x80
 800adba:	d00a      	beq.n	800add2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800adbc:	7bbb      	ldrb	r3, [r7, #14]
 800adbe:	4619      	mov	r1, r3
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f003 fb45 	bl	800e450 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800adc6:	2180      	movs	r1, #128	; 0x80
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f003 fb41 	bl	800e450 <USBD_LL_StallEP>
 800adce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800add0:	e040      	b.n	800ae54 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fc68 	bl	800b6aa <USBD_CtlError>
              break;
 800adda:	e03b      	b.n	800ae54 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	885b      	ldrh	r3, [r3, #2]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d136      	bne.n	800ae52 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ade4:	7bbb      	ldrb	r3, [r7, #14]
 800ade6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adea:	2b00      	cmp	r3, #0
 800adec:	d004      	beq.n	800adf8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800adee:	7bbb      	ldrb	r3, [r7, #14]
 800adf0:	4619      	mov	r1, r3
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f003 fb4b 	bl	800e48e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 fd21 	bl	800b840 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800adfe:	7bbb      	ldrb	r3, [r7, #14]
 800ae00:	4619      	mov	r1, r3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7ff fde2 	bl	800a9cc <USBD_CoreFindEP>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae0c:	7b7b      	ldrb	r3, [r7, #13]
 800ae0e:	2bff      	cmp	r3, #255	; 0xff
 800ae10:	d01f      	beq.n	800ae52 <USBD_StdEPReq+0x1c6>
 800ae12:	7b7b      	ldrb	r3, [r7, #13]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d11c      	bne.n	800ae52 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ae18:	7b7a      	ldrb	r2, [r7, #13]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ae20:	7b7a      	ldrb	r2, [r7, #13]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	32ae      	adds	r2, #174	; 0xae
 800ae26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d010      	beq.n	800ae52 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae30:	7b7a      	ldrb	r2, [r7, #13]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	32ae      	adds	r2, #174	; 0xae
 800ae36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	4798      	blx	r3
 800ae42:	4603      	mov	r3, r0
 800ae44:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ae46:	e004      	b.n	800ae52 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fc2d 	bl	800b6aa <USBD_CtlError>
              break;
 800ae50:	e000      	b.n	800ae54 <USBD_StdEPReq+0x1c8>
              break;
 800ae52:	bf00      	nop
          }
          break;
 800ae54:	e0ab      	b.n	800afae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d002      	beq.n	800ae68 <USBD_StdEPReq+0x1dc>
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d032      	beq.n	800aecc <USBD_StdEPReq+0x240>
 800ae66:	e097      	b.n	800af98 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae68:	7bbb      	ldrb	r3, [r7, #14]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d007      	beq.n	800ae7e <USBD_StdEPReq+0x1f2>
 800ae6e:	7bbb      	ldrb	r3, [r7, #14]
 800ae70:	2b80      	cmp	r3, #128	; 0x80
 800ae72:	d004      	beq.n	800ae7e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fc17 	bl	800b6aa <USBD_CtlError>
                break;
 800ae7c:	e091      	b.n	800afa2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	da0b      	bge.n	800ae9e <USBD_StdEPReq+0x212>
 800ae86:	7bbb      	ldrb	r3, [r7, #14]
 800ae88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4413      	add	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	3310      	adds	r3, #16
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	4413      	add	r3, r2
 800ae9a:	3304      	adds	r3, #4
 800ae9c:	e00b      	b.n	800aeb6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae9e:	7bbb      	ldrb	r3, [r7, #14]
 800aea0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aea4:	4613      	mov	r3, r2
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	4413      	add	r3, r2
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	2202      	movs	r2, #2
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 fc61 	bl	800b78c <USBD_CtlSendData>
              break;
 800aeca:	e06a      	b.n	800afa2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	da11      	bge.n	800aef8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aed4:	7bbb      	ldrb	r3, [r7, #14]
 800aed6:	f003 020f 	and.w	r2, r3, #15
 800aeda:	6879      	ldr	r1, [r7, #4]
 800aedc:	4613      	mov	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	440b      	add	r3, r1
 800aee6:	3324      	adds	r3, #36	; 0x24
 800aee8:	881b      	ldrh	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d117      	bne.n	800af1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fbda 	bl	800b6aa <USBD_CtlError>
                  break;
 800aef6:	e054      	b.n	800afa2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aef8:	7bbb      	ldrb	r3, [r7, #14]
 800aefa:	f003 020f 	and.w	r2, r3, #15
 800aefe:	6879      	ldr	r1, [r7, #4]
 800af00:	4613      	mov	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	440b      	add	r3, r1
 800af0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d104      	bne.n	800af1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fbc7 	bl	800b6aa <USBD_CtlError>
                  break;
 800af1c:	e041      	b.n	800afa2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af22:	2b00      	cmp	r3, #0
 800af24:	da0b      	bge.n	800af3e <USBD_StdEPReq+0x2b2>
 800af26:	7bbb      	ldrb	r3, [r7, #14]
 800af28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af2c:	4613      	mov	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	3310      	adds	r3, #16
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	4413      	add	r3, r2
 800af3a:	3304      	adds	r3, #4
 800af3c:	e00b      	b.n	800af56 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af3e:	7bbb      	ldrb	r3, [r7, #14]
 800af40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af44:	4613      	mov	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4413      	add	r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	4413      	add	r3, r2
 800af54:	3304      	adds	r3, #4
 800af56:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d002      	beq.n	800af64 <USBD_StdEPReq+0x2d8>
 800af5e:	7bbb      	ldrb	r3, [r7, #14]
 800af60:	2b80      	cmp	r3, #128	; 0x80
 800af62:	d103      	bne.n	800af6c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	2200      	movs	r2, #0
 800af68:	601a      	str	r2, [r3, #0]
 800af6a:	e00e      	b.n	800af8a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800af6c:	7bbb      	ldrb	r3, [r7, #14]
 800af6e:	4619      	mov	r1, r3
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f003 faab 	bl	800e4cc <USBD_LL_IsStallEP>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d003      	beq.n	800af84 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	2201      	movs	r2, #1
 800af80:	601a      	str	r2, [r3, #0]
 800af82:	e002      	b.n	800af8a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	2202      	movs	r2, #2
 800af8e:	4619      	mov	r1, r3
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fbfb 	bl	800b78c <USBD_CtlSendData>
              break;
 800af96:	e004      	b.n	800afa2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fb85 	bl	800b6aa <USBD_CtlError>
              break;
 800afa0:	bf00      	nop
          }
          break;
 800afa2:	e004      	b.n	800afae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fb7f 	bl	800b6aa <USBD_CtlError>
          break;
 800afac:	bf00      	nop
      }
      break;
 800afae:	e005      	b.n	800afbc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fb79 	bl	800b6aa <USBD_CtlError>
      break;
 800afb8:	e000      	b.n	800afbc <USBD_StdEPReq+0x330>
      break;
 800afba:	bf00      	nop
  }

  return ret;
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
	...

0800afc8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800afd2:	2300      	movs	r3, #0
 800afd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800afda:	2300      	movs	r3, #0
 800afdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	885b      	ldrh	r3, [r3, #2]
 800afe2:	0a1b      	lsrs	r3, r3, #8
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	3b01      	subs	r3, #1
 800afe8:	2b0e      	cmp	r3, #14
 800afea:	f200 8152 	bhi.w	800b292 <USBD_GetDescriptor+0x2ca>
 800afee:	a201      	add	r2, pc, #4	; (adr r2, 800aff4 <USBD_GetDescriptor+0x2c>)
 800aff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff4:	0800b065 	.word	0x0800b065
 800aff8:	0800b07d 	.word	0x0800b07d
 800affc:	0800b0bd 	.word	0x0800b0bd
 800b000:	0800b293 	.word	0x0800b293
 800b004:	0800b293 	.word	0x0800b293
 800b008:	0800b233 	.word	0x0800b233
 800b00c:	0800b25f 	.word	0x0800b25f
 800b010:	0800b293 	.word	0x0800b293
 800b014:	0800b293 	.word	0x0800b293
 800b018:	0800b293 	.word	0x0800b293
 800b01c:	0800b293 	.word	0x0800b293
 800b020:	0800b293 	.word	0x0800b293
 800b024:	0800b293 	.word	0x0800b293
 800b028:	0800b293 	.word	0x0800b293
 800b02c:	0800b031 	.word	0x0800b031
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b036:	69db      	ldr	r3, [r3, #28]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00b      	beq.n	800b054 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b042:	69db      	ldr	r3, [r3, #28]
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	7c12      	ldrb	r2, [r2, #16]
 800b048:	f107 0108 	add.w	r1, r7, #8
 800b04c:	4610      	mov	r0, r2
 800b04e:	4798      	blx	r3
 800b050:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b052:	e126      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fb27 	bl	800b6aa <USBD_CtlError>
        err++;
 800b05c:	7afb      	ldrb	r3, [r7, #11]
 800b05e:	3301      	adds	r3, #1
 800b060:	72fb      	strb	r3, [r7, #11]
      break;
 800b062:	e11e      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	7c12      	ldrb	r2, [r2, #16]
 800b070:	f107 0108 	add.w	r1, r7, #8
 800b074:	4610      	mov	r0, r2
 800b076:	4798      	blx	r3
 800b078:	60f8      	str	r0, [r7, #12]
      break;
 800b07a:	e112      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	7c1b      	ldrb	r3, [r3, #16]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10d      	bne.n	800b0a0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08c:	f107 0208 	add.w	r2, r7, #8
 800b090:	4610      	mov	r0, r2
 800b092:	4798      	blx	r3
 800b094:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3301      	adds	r3, #1
 800b09a:	2202      	movs	r2, #2
 800b09c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b09e:	e100      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a8:	f107 0208 	add.w	r2, r7, #8
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	4798      	blx	r3
 800b0b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	2202      	movs	r2, #2
 800b0b8:	701a      	strb	r2, [r3, #0]
      break;
 800b0ba:	e0f2      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	885b      	ldrh	r3, [r3, #2]
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	2b05      	cmp	r3, #5
 800b0c4:	f200 80ac 	bhi.w	800b220 <USBD_GetDescriptor+0x258>
 800b0c8:	a201      	add	r2, pc, #4	; (adr r2, 800b0d0 <USBD_GetDescriptor+0x108>)
 800b0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ce:	bf00      	nop
 800b0d0:	0800b0e9 	.word	0x0800b0e9
 800b0d4:	0800b11d 	.word	0x0800b11d
 800b0d8:	0800b151 	.word	0x0800b151
 800b0dc:	0800b185 	.word	0x0800b185
 800b0e0:	0800b1b9 	.word	0x0800b1b9
 800b0e4:	0800b1ed 	.word	0x0800b1ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00b      	beq.n	800b10c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	7c12      	ldrb	r2, [r2, #16]
 800b100:	f107 0108 	add.w	r1, r7, #8
 800b104:	4610      	mov	r0, r2
 800b106:	4798      	blx	r3
 800b108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b10a:	e091      	b.n	800b230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 facb 	bl	800b6aa <USBD_CtlError>
            err++;
 800b114:	7afb      	ldrb	r3, [r7, #11]
 800b116:	3301      	adds	r3, #1
 800b118:	72fb      	strb	r3, [r7, #11]
          break;
 800b11a:	e089      	b.n	800b230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00b      	beq.n	800b140 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	7c12      	ldrb	r2, [r2, #16]
 800b134:	f107 0108 	add.w	r1, r7, #8
 800b138:	4610      	mov	r0, r2
 800b13a:	4798      	blx	r3
 800b13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b13e:	e077      	b.n	800b230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 fab1 	bl	800b6aa <USBD_CtlError>
            err++;
 800b148:	7afb      	ldrb	r3, [r7, #11]
 800b14a:	3301      	adds	r3, #1
 800b14c:	72fb      	strb	r3, [r7, #11]
          break;
 800b14e:	e06f      	b.n	800b230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00b      	beq.n	800b174 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	7c12      	ldrb	r2, [r2, #16]
 800b168:	f107 0108 	add.w	r1, r7, #8
 800b16c:	4610      	mov	r0, r2
 800b16e:	4798      	blx	r3
 800b170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b172:	e05d      	b.n	800b230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fa97 	bl	800b6aa <USBD_CtlError>
            err++;
 800b17c:	7afb      	ldrb	r3, [r7, #11]
 800b17e:	3301      	adds	r3, #1
 800b180:	72fb      	strb	r3, [r7, #11]
          break;
 800b182:	e055      	b.n	800b230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00b      	beq.n	800b1a8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	7c12      	ldrb	r2, [r2, #16]
 800b19c:	f107 0108 	add.w	r1, r7, #8
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	4798      	blx	r3
 800b1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1a6:	e043      	b.n	800b230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 fa7d 	bl	800b6aa <USBD_CtlError>
            err++;
 800b1b0:	7afb      	ldrb	r3, [r7, #11]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1b6:	e03b      	b.n	800b230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1be:	695b      	ldr	r3, [r3, #20]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00b      	beq.n	800b1dc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ca:	695b      	ldr	r3, [r3, #20]
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	7c12      	ldrb	r2, [r2, #16]
 800b1d0:	f107 0108 	add.w	r1, r7, #8
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	4798      	blx	r3
 800b1d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1da:	e029      	b.n	800b230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fa63 	bl	800b6aa <USBD_CtlError>
            err++;
 800b1e4:	7afb      	ldrb	r3, [r7, #11]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1ea:	e021      	b.n	800b230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00b      	beq.n	800b210 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	7c12      	ldrb	r2, [r2, #16]
 800b204:	f107 0108 	add.w	r1, r7, #8
 800b208:	4610      	mov	r0, r2
 800b20a:	4798      	blx	r3
 800b20c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b20e:	e00f      	b.n	800b230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b210:	6839      	ldr	r1, [r7, #0]
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fa49 	bl	800b6aa <USBD_CtlError>
            err++;
 800b218:	7afb      	ldrb	r3, [r7, #11]
 800b21a:	3301      	adds	r3, #1
 800b21c:	72fb      	strb	r3, [r7, #11]
          break;
 800b21e:	e007      	b.n	800b230 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fa41 	bl	800b6aa <USBD_CtlError>
          err++;
 800b228:	7afb      	ldrb	r3, [r7, #11]
 800b22a:	3301      	adds	r3, #1
 800b22c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b22e:	bf00      	nop
      }
      break;
 800b230:	e037      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	7c1b      	ldrb	r3, [r3, #16]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d109      	bne.n	800b24e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b242:	f107 0208 	add.w	r2, r7, #8
 800b246:	4610      	mov	r0, r2
 800b248:	4798      	blx	r3
 800b24a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b24c:	e029      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b24e:	6839      	ldr	r1, [r7, #0]
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 fa2a 	bl	800b6aa <USBD_CtlError>
        err++;
 800b256:	7afb      	ldrb	r3, [r7, #11]
 800b258:	3301      	adds	r3, #1
 800b25a:	72fb      	strb	r3, [r7, #11]
      break;
 800b25c:	e021      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	7c1b      	ldrb	r3, [r3, #16]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d10d      	bne.n	800b282 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26e:	f107 0208 	add.w	r2, r7, #8
 800b272:	4610      	mov	r0, r2
 800b274:	4798      	blx	r3
 800b276:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	3301      	adds	r3, #1
 800b27c:	2207      	movs	r2, #7
 800b27e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b280:	e00f      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 fa10 	bl	800b6aa <USBD_CtlError>
        err++;
 800b28a:	7afb      	ldrb	r3, [r7, #11]
 800b28c:	3301      	adds	r3, #1
 800b28e:	72fb      	strb	r3, [r7, #11]
      break;
 800b290:	e007      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b292:	6839      	ldr	r1, [r7, #0]
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fa08 	bl	800b6aa <USBD_CtlError>
      err++;
 800b29a:	7afb      	ldrb	r3, [r7, #11]
 800b29c:	3301      	adds	r3, #1
 800b29e:	72fb      	strb	r3, [r7, #11]
      break;
 800b2a0:	bf00      	nop
  }

  if (err != 0U)
 800b2a2:	7afb      	ldrb	r3, [r7, #11]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d11e      	bne.n	800b2e6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	88db      	ldrh	r3, [r3, #6]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d016      	beq.n	800b2de <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b2b0:	893b      	ldrh	r3, [r7, #8]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00e      	beq.n	800b2d4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	88da      	ldrh	r2, [r3, #6]
 800b2ba:	893b      	ldrh	r3, [r7, #8]
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	bf28      	it	cs
 800b2c0:	4613      	movcs	r3, r2
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b2c6:	893b      	ldrh	r3, [r7, #8]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	68f9      	ldr	r1, [r7, #12]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 fa5d 	bl	800b78c <USBD_CtlSendData>
 800b2d2:	e009      	b.n	800b2e8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b2d4:	6839      	ldr	r1, [r7, #0]
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f9e7 	bl	800b6aa <USBD_CtlError>
 800b2dc:	e004      	b.n	800b2e8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 faae 	bl	800b840 <USBD_CtlSendStatus>
 800b2e4:	e000      	b.n	800b2e8 <USBD_GetDescriptor+0x320>
    return;
 800b2e6:	bf00      	nop
  }
}
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop

0800b2f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	889b      	ldrh	r3, [r3, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d131      	bne.n	800b366 <USBD_SetAddress+0x76>
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	88db      	ldrh	r3, [r3, #6]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d12d      	bne.n	800b366 <USBD_SetAddress+0x76>
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	885b      	ldrh	r3, [r3, #2]
 800b30e:	2b7f      	cmp	r3, #127	; 0x7f
 800b310:	d829      	bhi.n	800b366 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	885b      	ldrh	r3, [r3, #2]
 800b316:	b2db      	uxtb	r3, r3
 800b318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b31c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b03      	cmp	r3, #3
 800b328:	d104      	bne.n	800b334 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f9bc 	bl	800b6aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b332:	e01d      	b.n	800b370 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	7bfa      	ldrb	r2, [r7, #15]
 800b338:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
 800b33e:	4619      	mov	r1, r3
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f003 f8ef 	bl	800e524 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 fa7a 	bl	800b840 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b34c:	7bfb      	ldrb	r3, [r7, #15]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d004      	beq.n	800b35c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2202      	movs	r2, #2
 800b356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b35a:	e009      	b.n	800b370 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b364:	e004      	b.n	800b370 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b366:	6839      	ldr	r1, [r7, #0]
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f99e 	bl	800b6aa <USBD_CtlError>
  }
}
 800b36e:	bf00      	nop
 800b370:	bf00      	nop
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	885b      	ldrh	r3, [r3, #2]
 800b38a:	b2da      	uxtb	r2, r3
 800b38c:	4b4e      	ldr	r3, [pc, #312]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b38e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b390:	4b4d      	ldr	r3, [pc, #308]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d905      	bls.n	800b3a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b398:	6839      	ldr	r1, [r7, #0]
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 f985 	bl	800b6aa <USBD_CtlError>
    return USBD_FAIL;
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	e08c      	b.n	800b4be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d002      	beq.n	800b3b6 <USBD_SetConfig+0x3e>
 800b3b0:	2b03      	cmp	r3, #3
 800b3b2:	d029      	beq.n	800b408 <USBD_SetConfig+0x90>
 800b3b4:	e075      	b.n	800b4a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b3b6:	4b44      	ldr	r3, [pc, #272]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d020      	beq.n	800b400 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b3be:	4b42      	ldr	r3, [pc, #264]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b3c8:	4b3f      	ldr	r3, [pc, #252]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7fe ffbd 	bl	800a34e <USBD_SetClassConfig>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d008      	beq.n	800b3f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 f962 	bl	800b6aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2202      	movs	r2, #2
 800b3ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b3ee:	e065      	b.n	800b4bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fa25 	bl	800b840 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2203      	movs	r2, #3
 800b3fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b3fe:	e05d      	b.n	800b4bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 fa1d 	bl	800b840 <USBD_CtlSendStatus>
      break;
 800b406:	e059      	b.n	800b4bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b408:	4b2f      	ldr	r3, [pc, #188]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d112      	bne.n	800b436 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2202      	movs	r2, #2
 800b414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b418:	4b2b      	ldr	r3, [pc, #172]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	461a      	mov	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b422:	4b29      	ldr	r3, [pc, #164]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	4619      	mov	r1, r3
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f7fe ffac 	bl	800a386 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fa06 	bl	800b840 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b434:	e042      	b.n	800b4bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b436:	4b24      	ldr	r3, [pc, #144]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	461a      	mov	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	429a      	cmp	r2, r3
 800b442:	d02a      	beq.n	800b49a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	4619      	mov	r1, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7fe ff9a 	bl	800a386 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b452:	4b1d      	ldr	r3, [pc, #116]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	461a      	mov	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b45c:	4b1a      	ldr	r3, [pc, #104]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7fe ff73 	bl	800a34e <USBD_SetClassConfig>
 800b468:	4603      	mov	r3, r0
 800b46a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b46c:	7bfb      	ldrb	r3, [r7, #15]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00f      	beq.n	800b492 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f918 	bl	800b6aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	4619      	mov	r1, r3
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7fe ff7f 	bl	800a386 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2202      	movs	r2, #2
 800b48c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b490:	e014      	b.n	800b4bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 f9d4 	bl	800b840 <USBD_CtlSendStatus>
      break;
 800b498:	e010      	b.n	800b4bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 f9d0 	bl	800b840 <USBD_CtlSendStatus>
      break;
 800b4a0:	e00c      	b.n	800b4bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 f900 	bl	800b6aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4aa:	4b07      	ldr	r3, [pc, #28]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7fe ff68 	bl	800a386 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b4b6:	2303      	movs	r3, #3
 800b4b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ba:	bf00      	nop
  }

  return ret;
 800b4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	20002854 	.word	0x20002854

0800b4cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	88db      	ldrh	r3, [r3, #6]
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d004      	beq.n	800b4e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f8e2 	bl	800b6aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b4e6:	e023      	b.n	800b530 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	dc02      	bgt.n	800b4fa <USBD_GetConfig+0x2e>
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	dc03      	bgt.n	800b500 <USBD_GetConfig+0x34>
 800b4f8:	e015      	b.n	800b526 <USBD_GetConfig+0x5a>
 800b4fa:	2b03      	cmp	r3, #3
 800b4fc:	d00b      	beq.n	800b516 <USBD_GetConfig+0x4a>
 800b4fe:	e012      	b.n	800b526 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	3308      	adds	r3, #8
 800b50a:	2201      	movs	r2, #1
 800b50c:	4619      	mov	r1, r3
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 f93c 	bl	800b78c <USBD_CtlSendData>
        break;
 800b514:	e00c      	b.n	800b530 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	3304      	adds	r3, #4
 800b51a:	2201      	movs	r2, #1
 800b51c:	4619      	mov	r1, r3
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f934 	bl	800b78c <USBD_CtlSendData>
        break;
 800b524:	e004      	b.n	800b530 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 f8be 	bl	800b6aa <USBD_CtlError>
        break;
 800b52e:	bf00      	nop
}
 800b530:	bf00      	nop
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	3b01      	subs	r3, #1
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	d81e      	bhi.n	800b58e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	88db      	ldrh	r3, [r3, #6]
 800b554:	2b02      	cmp	r3, #2
 800b556:	d004      	beq.n	800b562 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 f8a5 	bl	800b6aa <USBD_CtlError>
        break;
 800b560:	e01a      	b.n	800b598 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2201      	movs	r2, #1
 800b566:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d005      	beq.n	800b57e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	f043 0202 	orr.w	r2, r3, #2
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	330c      	adds	r3, #12
 800b582:	2202      	movs	r2, #2
 800b584:	4619      	mov	r1, r3
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f900 	bl	800b78c <USBD_CtlSendData>
      break;
 800b58c:	e004      	b.n	800b598 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b58e:	6839      	ldr	r1, [r7, #0]
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 f88a 	bl	800b6aa <USBD_CtlError>
      break;
 800b596:	bf00      	nop
  }
}
 800b598:	bf00      	nop
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	885b      	ldrh	r3, [r3, #2]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d107      	bne.n	800b5c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f940 	bl	800b840 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b5c0:	e013      	b.n	800b5ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	885b      	ldrh	r3, [r3, #2]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d10b      	bne.n	800b5e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	889b      	ldrh	r3, [r3, #4]
 800b5ce:	0a1b      	lsrs	r3, r3, #8
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	b2da      	uxtb	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f930 	bl	800b840 <USBD_CtlSendStatus>
}
 800b5e0:	e003      	b.n	800b5ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b5e2:	6839      	ldr	r1, [r7, #0]
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f860 	bl	800b6aa <USBD_CtlError>
}
 800b5ea:	bf00      	nop
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b082      	sub	sp, #8
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b602:	b2db      	uxtb	r3, r3
 800b604:	3b01      	subs	r3, #1
 800b606:	2b02      	cmp	r3, #2
 800b608:	d80b      	bhi.n	800b622 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	885b      	ldrh	r3, [r3, #2]
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d10c      	bne.n	800b62c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f910 	bl	800b840 <USBD_CtlSendStatus>
      }
      break;
 800b620:	e004      	b.n	800b62c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b622:	6839      	ldr	r1, [r7, #0]
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 f840 	bl	800b6aa <USBD_CtlError>
      break;
 800b62a:	e000      	b.n	800b62e <USBD_ClrFeature+0x3c>
      break;
 800b62c:	bf00      	nop
  }
}
 800b62e:	bf00      	nop
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b084      	sub	sp, #16
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
 800b63e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	781a      	ldrb	r2, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	3301      	adds	r3, #1
 800b650:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	781a      	ldrb	r2, [r3, #0]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	3301      	adds	r3, #1
 800b65e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f7ff fa17 	bl	800aa94 <SWAPBYTE>
 800b666:	4603      	mov	r3, r0
 800b668:	461a      	mov	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3301      	adds	r3, #1
 800b672:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	3301      	adds	r3, #1
 800b678:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f7ff fa0a 	bl	800aa94 <SWAPBYTE>
 800b680:	4603      	mov	r3, r0
 800b682:	461a      	mov	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	3301      	adds	r3, #1
 800b68c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	3301      	adds	r3, #1
 800b692:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f7ff f9fd 	bl	800aa94 <SWAPBYTE>
 800b69a:	4603      	mov	r3, r0
 800b69c:	461a      	mov	r2, r3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	80da      	strh	r2, [r3, #6]
}
 800b6a2:	bf00      	nop
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b082      	sub	sp, #8
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6b4:	2180      	movs	r1, #128	; 0x80
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f002 feca 	bl	800e450 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b6bc:	2100      	movs	r1, #0
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f002 fec6 	bl	800e450 <USBD_LL_StallEP>
}
 800b6c4:	bf00      	nop
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d036      	beq.n	800b750 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b6e6:	6938      	ldr	r0, [r7, #16]
 800b6e8:	f000 f836 	bl	800b758 <USBD_GetLen>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	005b      	lsls	r3, r3, #1
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b6fa:	7dfb      	ldrb	r3, [r7, #23]
 800b6fc:	68ba      	ldr	r2, [r7, #8]
 800b6fe:	4413      	add	r3, r2
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	7812      	ldrb	r2, [r2, #0]
 800b704:	701a      	strb	r2, [r3, #0]
  idx++;
 800b706:	7dfb      	ldrb	r3, [r7, #23]
 800b708:	3301      	adds	r3, #1
 800b70a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	4413      	add	r3, r2
 800b712:	2203      	movs	r2, #3
 800b714:	701a      	strb	r2, [r3, #0]
  idx++;
 800b716:	7dfb      	ldrb	r3, [r7, #23]
 800b718:	3301      	adds	r3, #1
 800b71a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b71c:	e013      	b.n	800b746 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b71e:	7dfb      	ldrb	r3, [r7, #23]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	4413      	add	r3, r2
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	7812      	ldrb	r2, [r2, #0]
 800b728:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	3301      	adds	r3, #1
 800b72e:	613b      	str	r3, [r7, #16]
    idx++;
 800b730:	7dfb      	ldrb	r3, [r7, #23]
 800b732:	3301      	adds	r3, #1
 800b734:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b736:	7dfb      	ldrb	r3, [r7, #23]
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	4413      	add	r3, r2
 800b73c:	2200      	movs	r2, #0
 800b73e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b740:	7dfb      	ldrb	r3, [r7, #23]
 800b742:	3301      	adds	r3, #1
 800b744:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1e7      	bne.n	800b71e <USBD_GetString+0x52>
 800b74e:	e000      	b.n	800b752 <USBD_GetString+0x86>
    return;
 800b750:	bf00      	nop
  }
}
 800b752:	3718      	adds	r7, #24
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b760:	2300      	movs	r3, #0
 800b762:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b768:	e005      	b.n	800b776 <USBD_GetLen+0x1e>
  {
    len++;
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
 800b76c:	3301      	adds	r3, #1
 800b76e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	3301      	adds	r3, #1
 800b774:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1f5      	bne.n	800b76a <USBD_GetLen+0x12>
  }

  return len;
 800b77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3714      	adds	r7, #20
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2202      	movs	r2, #2
 800b79c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f002 fed5 	bl	800e562 <USBD_LL_Transmit>

  return USBD_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b084      	sub	sp, #16
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	60f8      	str	r0, [r7, #12]
 800b7ca:	60b9      	str	r1, [r7, #8]
 800b7cc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	68ba      	ldr	r2, [r7, #8]
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	f002 fec4 	bl	800e562 <USBD_LL_Transmit>

  return USBD_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2203      	movs	r2, #3
 800b7f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	68ba      	ldr	r2, [r7, #8]
 800b80c:	2100      	movs	r1, #0
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f002 fec8 	bl	800e5a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b084      	sub	sp, #16
 800b822:	af00      	add	r7, sp, #0
 800b824:	60f8      	str	r0, [r7, #12]
 800b826:	60b9      	str	r1, [r7, #8]
 800b828:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	2100      	movs	r1, #0
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f002 feb7 	bl	800e5a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2204      	movs	r2, #4
 800b84c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b850:	2300      	movs	r3, #0
 800b852:	2200      	movs	r2, #0
 800b854:	2100      	movs	r1, #0
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f002 fe83 	bl	800e562 <USBD_LL_Transmit>

  return USBD_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b082      	sub	sp, #8
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2205      	movs	r2, #5
 800b872:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b876:	2300      	movs	r3, #0
 800b878:	2200      	movs	r2, #0
 800b87a:	2100      	movs	r1, #0
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f002 fe91 	bl	800e5a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	4603      	mov	r3, r0
 800b894:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b896:	79fb      	ldrb	r3, [r7, #7]
 800b898:	4a08      	ldr	r2, [pc, #32]	; (800b8bc <disk_status+0x30>)
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4413      	add	r3, r2
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	79fa      	ldrb	r2, [r7, #7]
 800b8a4:	4905      	ldr	r1, [pc, #20]	; (800b8bc <disk_status+0x30>)
 800b8a6:	440a      	add	r2, r1
 800b8a8:	7a12      	ldrb	r2, [r2, #8]
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	4798      	blx	r3
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	20002880 	.word	0x20002880

0800b8c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b8ce:	79fb      	ldrb	r3, [r7, #7]
 800b8d0:	4a0d      	ldr	r2, [pc, #52]	; (800b908 <disk_initialize+0x48>)
 800b8d2:	5cd3      	ldrb	r3, [r2, r3]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d111      	bne.n	800b8fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b8d8:	79fb      	ldrb	r3, [r7, #7]
 800b8da:	4a0b      	ldr	r2, [pc, #44]	; (800b908 <disk_initialize+0x48>)
 800b8dc:	2101      	movs	r1, #1
 800b8de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b8e0:	79fb      	ldrb	r3, [r7, #7]
 800b8e2:	4a09      	ldr	r2, [pc, #36]	; (800b908 <disk_initialize+0x48>)
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4413      	add	r3, r2
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	79fa      	ldrb	r2, [r7, #7]
 800b8ee:	4906      	ldr	r1, [pc, #24]	; (800b908 <disk_initialize+0x48>)
 800b8f0:	440a      	add	r2, r1
 800b8f2:	7a12      	ldrb	r2, [r2, #8]
 800b8f4:	4610      	mov	r0, r2
 800b8f6:	4798      	blx	r3
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	20002880 	.word	0x20002880

0800b90c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b90c:	b590      	push	{r4, r7, lr}
 800b90e:	b087      	sub	sp, #28
 800b910:	af00      	add	r7, sp, #0
 800b912:	60b9      	str	r1, [r7, #8]
 800b914:	607a      	str	r2, [r7, #4]
 800b916:	603b      	str	r3, [r7, #0]
 800b918:	4603      	mov	r3, r0
 800b91a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
 800b91e:	4a0a      	ldr	r2, [pc, #40]	; (800b948 <disk_read+0x3c>)
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	4413      	add	r3, r2
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	689c      	ldr	r4, [r3, #8]
 800b928:	7bfb      	ldrb	r3, [r7, #15]
 800b92a:	4a07      	ldr	r2, [pc, #28]	; (800b948 <disk_read+0x3c>)
 800b92c:	4413      	add	r3, r2
 800b92e:	7a18      	ldrb	r0, [r3, #8]
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	68b9      	ldr	r1, [r7, #8]
 800b936:	47a0      	blx	r4
 800b938:	4603      	mov	r3, r0
 800b93a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b93c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	371c      	adds	r7, #28
 800b942:	46bd      	mov	sp, r7
 800b944:	bd90      	pop	{r4, r7, pc}
 800b946:	bf00      	nop
 800b948:	20002880 	.word	0x20002880

0800b94c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b94c:	b590      	push	{r4, r7, lr}
 800b94e:	b087      	sub	sp, #28
 800b950:	af00      	add	r7, sp, #0
 800b952:	60b9      	str	r1, [r7, #8]
 800b954:	607a      	str	r2, [r7, #4]
 800b956:	603b      	str	r3, [r7, #0]
 800b958:	4603      	mov	r3, r0
 800b95a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
 800b95e:	4a0a      	ldr	r2, [pc, #40]	; (800b988 <disk_write+0x3c>)
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4413      	add	r3, r2
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	68dc      	ldr	r4, [r3, #12]
 800b968:	7bfb      	ldrb	r3, [r7, #15]
 800b96a:	4a07      	ldr	r2, [pc, #28]	; (800b988 <disk_write+0x3c>)
 800b96c:	4413      	add	r3, r2
 800b96e:	7a18      	ldrb	r0, [r3, #8]
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	68b9      	ldr	r1, [r7, #8]
 800b976:	47a0      	blx	r4
 800b978:	4603      	mov	r3, r0
 800b97a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b97c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b97e:	4618      	mov	r0, r3
 800b980:	371c      	adds	r7, #28
 800b982:	46bd      	mov	sp, r7
 800b984:	bd90      	pop	{r4, r7, pc}
 800b986:	bf00      	nop
 800b988:	20002880 	.word	0x20002880

0800b98c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	4603      	mov	r3, r0
 800b994:	603a      	str	r2, [r7, #0]
 800b996:	71fb      	strb	r3, [r7, #7]
 800b998:	460b      	mov	r3, r1
 800b99a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b99c:	79fb      	ldrb	r3, [r7, #7]
 800b99e:	4a09      	ldr	r2, [pc, #36]	; (800b9c4 <disk_ioctl+0x38>)
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	4413      	add	r3, r2
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	691b      	ldr	r3, [r3, #16]
 800b9a8:	79fa      	ldrb	r2, [r7, #7]
 800b9aa:	4906      	ldr	r1, [pc, #24]	; (800b9c4 <disk_ioctl+0x38>)
 800b9ac:	440a      	add	r2, r1
 800b9ae:	7a10      	ldrb	r0, [r2, #8]
 800b9b0:	79b9      	ldrb	r1, [r7, #6]
 800b9b2:	683a      	ldr	r2, [r7, #0]
 800b9b4:	4798      	blx	r3
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	73fb      	strb	r3, [r7, #15]
  return res;
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	20002880 	.word	0x20002880

0800b9c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b9d8:	89fb      	ldrh	r3, [r7, #14]
 800b9da:	021b      	lsls	r3, r3, #8
 800b9dc:	b21a      	sxth	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	b21b      	sxth	r3, r3
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	b21b      	sxth	r3, r3
 800b9e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b9ea:	89fb      	ldrh	r3, [r7, #14]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	3303      	adds	r3, #3
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	021b      	lsls	r3, r3, #8
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	3202      	adds	r2, #2
 800ba10:	7812      	ldrb	r2, [r2, #0]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	021b      	lsls	r3, r3, #8
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	3201      	adds	r2, #1
 800ba1e:	7812      	ldrb	r2, [r2, #0]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	021b      	lsls	r3, r3, #8
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	7812      	ldrb	r2, [r2, #0]
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	60fb      	str	r3, [r7, #12]
	return rv;
 800ba30:	68fb      	ldr	r3, [r7, #12]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3714      	adds	r7, #20
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr

0800ba3e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b083      	sub	sp, #12
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	460b      	mov	r3, r1
 800ba48:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	1c5a      	adds	r2, r3, #1
 800ba4e:	607a      	str	r2, [r7, #4]
 800ba50:	887a      	ldrh	r2, [r7, #2]
 800ba52:	b2d2      	uxtb	r2, r2
 800ba54:	701a      	strb	r2, [r3, #0]
 800ba56:	887b      	ldrh	r3, [r7, #2]
 800ba58:	0a1b      	lsrs	r3, r3, #8
 800ba5a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	1c5a      	adds	r2, r3, #1
 800ba60:	607a      	str	r2, [r7, #4]
 800ba62:	887a      	ldrh	r2, [r7, #2]
 800ba64:	b2d2      	uxtb	r2, r2
 800ba66:	701a      	strb	r2, [r3, #0]
}
 800ba68:	bf00      	nop
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	1c5a      	adds	r2, r3, #1
 800ba82:	607a      	str	r2, [r7, #4]
 800ba84:	683a      	ldr	r2, [r7, #0]
 800ba86:	b2d2      	uxtb	r2, r2
 800ba88:	701a      	strb	r2, [r3, #0]
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	0a1b      	lsrs	r3, r3, #8
 800ba8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	1c5a      	adds	r2, r3, #1
 800ba94:	607a      	str	r2, [r7, #4]
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	b2d2      	uxtb	r2, r2
 800ba9a:	701a      	strb	r2, [r3, #0]
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	0a1b      	lsrs	r3, r3, #8
 800baa0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	1c5a      	adds	r2, r3, #1
 800baa6:	607a      	str	r2, [r7, #4]
 800baa8:	683a      	ldr	r2, [r7, #0]
 800baaa:	b2d2      	uxtb	r2, r2
 800baac:	701a      	strb	r2, [r3, #0]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	0a1b      	lsrs	r3, r3, #8
 800bab2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	607a      	str	r2, [r7, #4]
 800baba:	683a      	ldr	r2, [r7, #0]
 800babc:	b2d2      	uxtb	r2, r2
 800babe:	701a      	strb	r2, [r3, #0]
}
 800bac0:	bf00      	nop
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bacc:	b480      	push	{r7}
 800bace:	b087      	sub	sp, #28
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00d      	beq.n	800bb02 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bae6:	693a      	ldr	r2, [r7, #16]
 800bae8:	1c53      	adds	r3, r2, #1
 800baea:	613b      	str	r3, [r7, #16]
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	1c59      	adds	r1, r3, #1
 800baf0:	6179      	str	r1, [r7, #20]
 800baf2:	7812      	ldrb	r2, [r2, #0]
 800baf4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	3b01      	subs	r3, #1
 800bafa:	607b      	str	r3, [r7, #4]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1f1      	bne.n	800bae6 <mem_cpy+0x1a>
	}
}
 800bb02:	bf00      	nop
 800bb04:	371c      	adds	r7, #28
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bb0e:	b480      	push	{r7}
 800bb10:	b087      	sub	sp, #28
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	60f8      	str	r0, [r7, #12]
 800bb16:	60b9      	str	r1, [r7, #8]
 800bb18:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	1c5a      	adds	r2, r3, #1
 800bb22:	617a      	str	r2, [r7, #20]
 800bb24:	68ba      	ldr	r2, [r7, #8]
 800bb26:	b2d2      	uxtb	r2, r2
 800bb28:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	607b      	str	r3, [r7, #4]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1f3      	bne.n	800bb1e <mem_set+0x10>
}
 800bb36:	bf00      	nop
 800bb38:	bf00      	nop
 800bb3a:	371c      	adds	r7, #28
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bb44:	b480      	push	{r7}
 800bb46:	b089      	sub	sp, #36	; 0x24
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	61fb      	str	r3, [r7, #28]
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	1c5a      	adds	r2, r3, #1
 800bb60:	61fa      	str	r2, [r7, #28]
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	4619      	mov	r1, r3
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	1c5a      	adds	r2, r3, #1
 800bb6a:	61ba      	str	r2, [r7, #24]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	1acb      	subs	r3, r1, r3
 800bb70:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	3b01      	subs	r3, #1
 800bb76:	607b      	str	r3, [r7, #4]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d002      	beq.n	800bb84 <mem_cmp+0x40>
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d0eb      	beq.n	800bb5c <mem_cmp+0x18>

	return r;
 800bb84:	697b      	ldr	r3, [r7, #20]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3724      	adds	r7, #36	; 0x24
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr

0800bb92 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bb92:	b480      	push	{r7}
 800bb94:	b083      	sub	sp, #12
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bb9c:	e002      	b.n	800bba4 <chk_chr+0x12>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	3301      	adds	r3, #1
 800bba2:	607b      	str	r3, [r7, #4]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d005      	beq.n	800bbb8 <chk_chr+0x26>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d1f2      	bne.n	800bb9e <chk_chr+0xc>
	return *str;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	781b      	ldrb	r3, [r3, #0]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	60bb      	str	r3, [r7, #8]
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	60fb      	str	r3, [r7, #12]
 800bbda:	e029      	b.n	800bc30 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bbdc:	4a27      	ldr	r2, [pc, #156]	; (800bc7c <chk_lock+0xb4>)
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	011b      	lsls	r3, r3, #4
 800bbe2:	4413      	add	r3, r2
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d01d      	beq.n	800bc26 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bbea:	4a24      	ldr	r2, [pc, #144]	; (800bc7c <chk_lock+0xb4>)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	011b      	lsls	r3, r3, #4
 800bbf0:	4413      	add	r3, r2
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d116      	bne.n	800bc2a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bbfc:	4a1f      	ldr	r2, [pc, #124]	; (800bc7c <chk_lock+0xb4>)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	011b      	lsls	r3, r3, #4
 800bc02:	4413      	add	r3, r2
 800bc04:	3304      	adds	r3, #4
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d10c      	bne.n	800bc2a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc10:	4a1a      	ldr	r2, [pc, #104]	; (800bc7c <chk_lock+0xb4>)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	011b      	lsls	r3, r3, #4
 800bc16:	4413      	add	r3, r2
 800bc18:	3308      	adds	r3, #8
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d102      	bne.n	800bc2a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc24:	e007      	b.n	800bc36 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bc26:	2301      	movs	r3, #1
 800bc28:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	60fb      	str	r3, [r7, #12]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d9d2      	bls.n	800bbdc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d109      	bne.n	800bc50 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d102      	bne.n	800bc48 <chk_lock+0x80>
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	2b02      	cmp	r3, #2
 800bc46:	d101      	bne.n	800bc4c <chk_lock+0x84>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	e010      	b.n	800bc6e <chk_lock+0xa6>
 800bc4c:	2312      	movs	r3, #18
 800bc4e:	e00e      	b.n	800bc6e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d108      	bne.n	800bc68 <chk_lock+0xa0>
 800bc56:	4a09      	ldr	r2, [pc, #36]	; (800bc7c <chk_lock+0xb4>)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	011b      	lsls	r3, r3, #4
 800bc5c:	4413      	add	r3, r2
 800bc5e:	330c      	adds	r3, #12
 800bc60:	881b      	ldrh	r3, [r3, #0]
 800bc62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc66:	d101      	bne.n	800bc6c <chk_lock+0xa4>
 800bc68:	2310      	movs	r3, #16
 800bc6a:	e000      	b.n	800bc6e <chk_lock+0xa6>
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	20002860 	.word	0x20002860

0800bc80 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bc86:	2300      	movs	r3, #0
 800bc88:	607b      	str	r3, [r7, #4]
 800bc8a:	e002      	b.n	800bc92 <enq_lock+0x12>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	607b      	str	r3, [r7, #4]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d806      	bhi.n	800bca6 <enq_lock+0x26>
 800bc98:	4a09      	ldr	r2, [pc, #36]	; (800bcc0 <enq_lock+0x40>)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	011b      	lsls	r3, r3, #4
 800bc9e:	4413      	add	r3, r2
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d1f2      	bne.n	800bc8c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2b02      	cmp	r3, #2
 800bcaa:	bf14      	ite	ne
 800bcac:	2301      	movne	r3, #1
 800bcae:	2300      	moveq	r3, #0
 800bcb0:	b2db      	uxtb	r3, r3
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	370c      	adds	r7, #12
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	20002860 	.word	0x20002860

0800bcc4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bcce:	2300      	movs	r3, #0
 800bcd0:	60fb      	str	r3, [r7, #12]
 800bcd2:	e01f      	b.n	800bd14 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bcd4:	4a41      	ldr	r2, [pc, #260]	; (800bddc <inc_lock+0x118>)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	011b      	lsls	r3, r3, #4
 800bcda:	4413      	add	r3, r2
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d113      	bne.n	800bd0e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bce6:	4a3d      	ldr	r2, [pc, #244]	; (800bddc <inc_lock+0x118>)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	011b      	lsls	r3, r3, #4
 800bcec:	4413      	add	r3, r2
 800bcee:	3304      	adds	r3, #4
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d109      	bne.n	800bd0e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bcfa:	4a38      	ldr	r2, [pc, #224]	; (800bddc <inc_lock+0x118>)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	011b      	lsls	r3, r3, #4
 800bd00:	4413      	add	r3, r2
 800bd02:	3308      	adds	r3, #8
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d006      	beq.n	800bd1c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	3301      	adds	r3, #1
 800bd12:	60fb      	str	r3, [r7, #12]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d9dc      	bls.n	800bcd4 <inc_lock+0x10>
 800bd1a:	e000      	b.n	800bd1e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bd1c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2b02      	cmp	r3, #2
 800bd22:	d132      	bne.n	800bd8a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bd24:	2300      	movs	r3, #0
 800bd26:	60fb      	str	r3, [r7, #12]
 800bd28:	e002      	b.n	800bd30 <inc_lock+0x6c>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	60fb      	str	r3, [r7, #12]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d806      	bhi.n	800bd44 <inc_lock+0x80>
 800bd36:	4a29      	ldr	r2, [pc, #164]	; (800bddc <inc_lock+0x118>)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	011b      	lsls	r3, r3, #4
 800bd3c:	4413      	add	r3, r2
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1f2      	bne.n	800bd2a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	d101      	bne.n	800bd4e <inc_lock+0x8a>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	e040      	b.n	800bdd0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	4922      	ldr	r1, [pc, #136]	; (800bddc <inc_lock+0x118>)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	011b      	lsls	r3, r3, #4
 800bd58:	440b      	add	r3, r1
 800bd5a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	689a      	ldr	r2, [r3, #8]
 800bd60:	491e      	ldr	r1, [pc, #120]	; (800bddc <inc_lock+0x118>)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	011b      	lsls	r3, r3, #4
 800bd66:	440b      	add	r3, r1
 800bd68:	3304      	adds	r3, #4
 800bd6a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	695a      	ldr	r2, [r3, #20]
 800bd70:	491a      	ldr	r1, [pc, #104]	; (800bddc <inc_lock+0x118>)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	011b      	lsls	r3, r3, #4
 800bd76:	440b      	add	r3, r1
 800bd78:	3308      	adds	r3, #8
 800bd7a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bd7c:	4a17      	ldr	r2, [pc, #92]	; (800bddc <inc_lock+0x118>)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	011b      	lsls	r3, r3, #4
 800bd82:	4413      	add	r3, r2
 800bd84:	330c      	adds	r3, #12
 800bd86:	2200      	movs	r2, #0
 800bd88:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d009      	beq.n	800bda4 <inc_lock+0xe0>
 800bd90:	4a12      	ldr	r2, [pc, #72]	; (800bddc <inc_lock+0x118>)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	011b      	lsls	r3, r3, #4
 800bd96:	4413      	add	r3, r2
 800bd98:	330c      	adds	r3, #12
 800bd9a:	881b      	ldrh	r3, [r3, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <inc_lock+0xe0>
 800bda0:	2300      	movs	r3, #0
 800bda2:	e015      	b.n	800bdd0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d108      	bne.n	800bdbc <inc_lock+0xf8>
 800bdaa:	4a0c      	ldr	r2, [pc, #48]	; (800bddc <inc_lock+0x118>)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	011b      	lsls	r3, r3, #4
 800bdb0:	4413      	add	r3, r2
 800bdb2:	330c      	adds	r3, #12
 800bdb4:	881b      	ldrh	r3, [r3, #0]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	b29a      	uxth	r2, r3
 800bdba:	e001      	b.n	800bdc0 <inc_lock+0xfc>
 800bdbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bdc0:	4906      	ldr	r1, [pc, #24]	; (800bddc <inc_lock+0x118>)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	011b      	lsls	r3, r3, #4
 800bdc6:	440b      	add	r3, r1
 800bdc8:	330c      	adds	r3, #12
 800bdca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	3301      	adds	r3, #1
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3714      	adds	r7, #20
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	20002860 	.word	0x20002860

0800bde0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	3b01      	subs	r3, #1
 800bdec:	607b      	str	r3, [r7, #4]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d825      	bhi.n	800be40 <dec_lock+0x60>
		n = Files[i].ctr;
 800bdf4:	4a17      	ldr	r2, [pc, #92]	; (800be54 <dec_lock+0x74>)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	011b      	lsls	r3, r3, #4
 800bdfa:	4413      	add	r3, r2
 800bdfc:	330c      	adds	r3, #12
 800bdfe:	881b      	ldrh	r3, [r3, #0]
 800be00:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800be02:	89fb      	ldrh	r3, [r7, #14]
 800be04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be08:	d101      	bne.n	800be0e <dec_lock+0x2e>
 800be0a:	2300      	movs	r3, #0
 800be0c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800be0e:	89fb      	ldrh	r3, [r7, #14]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d002      	beq.n	800be1a <dec_lock+0x3a>
 800be14:	89fb      	ldrh	r3, [r7, #14]
 800be16:	3b01      	subs	r3, #1
 800be18:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800be1a:	4a0e      	ldr	r2, [pc, #56]	; (800be54 <dec_lock+0x74>)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	011b      	lsls	r3, r3, #4
 800be20:	4413      	add	r3, r2
 800be22:	330c      	adds	r3, #12
 800be24:	89fa      	ldrh	r2, [r7, #14]
 800be26:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800be28:	89fb      	ldrh	r3, [r7, #14]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d105      	bne.n	800be3a <dec_lock+0x5a>
 800be2e:	4a09      	ldr	r2, [pc, #36]	; (800be54 <dec_lock+0x74>)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	011b      	lsls	r3, r3, #4
 800be34:	4413      	add	r3, r2
 800be36:	2200      	movs	r2, #0
 800be38:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	737b      	strb	r3, [r7, #13]
 800be3e:	e001      	b.n	800be44 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800be40:	2302      	movs	r3, #2
 800be42:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800be44:	7b7b      	ldrb	r3, [r7, #13]
}
 800be46:	4618      	mov	r0, r3
 800be48:	3714      	adds	r7, #20
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr
 800be52:	bf00      	nop
 800be54:	20002860 	.word	0x20002860

0800be58 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800be60:	2300      	movs	r3, #0
 800be62:	60fb      	str	r3, [r7, #12]
 800be64:	e010      	b.n	800be88 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800be66:	4a0d      	ldr	r2, [pc, #52]	; (800be9c <clear_lock+0x44>)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	011b      	lsls	r3, r3, #4
 800be6c:	4413      	add	r3, r2
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	429a      	cmp	r2, r3
 800be74:	d105      	bne.n	800be82 <clear_lock+0x2a>
 800be76:	4a09      	ldr	r2, [pc, #36]	; (800be9c <clear_lock+0x44>)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	011b      	lsls	r3, r3, #4
 800be7c:	4413      	add	r3, r2
 800be7e:	2200      	movs	r2, #0
 800be80:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	3301      	adds	r3, #1
 800be86:	60fb      	str	r3, [r7, #12]
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d9eb      	bls.n	800be66 <clear_lock+0xe>
	}
}
 800be8e:	bf00      	nop
 800be90:	bf00      	nop
 800be92:	3714      	adds	r7, #20
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr
 800be9c:	20002860 	.word	0x20002860

0800bea0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bea8:	2300      	movs	r3, #0
 800beaa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	78db      	ldrb	r3, [r3, #3]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d034      	beq.n	800bf1e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	7858      	ldrb	r0, [r3, #1]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bec4:	2301      	movs	r3, #1
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	f7ff fd40 	bl	800b94c <disk_write>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d002      	beq.n	800bed8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	73fb      	strb	r3, [r7, #15]
 800bed6:	e022      	b.n	800bf1e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a1b      	ldr	r3, [r3, #32]
 800bee2:	697a      	ldr	r2, [r7, #20]
 800bee4:	1ad2      	subs	r2, r2, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	429a      	cmp	r2, r3
 800beec:	d217      	bcs.n	800bf1e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	789b      	ldrb	r3, [r3, #2]
 800bef2:	613b      	str	r3, [r7, #16]
 800bef4:	e010      	b.n	800bf18 <sync_window+0x78>
					wsect += fs->fsize;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	699b      	ldr	r3, [r3, #24]
 800befa:	697a      	ldr	r2, [r7, #20]
 800befc:	4413      	add	r3, r2
 800befe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	7858      	ldrb	r0, [r3, #1]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	697a      	ldr	r2, [r7, #20]
 800bf0e:	f7ff fd1d 	bl	800b94c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	3b01      	subs	r3, #1
 800bf16:	613b      	str	r3, [r7, #16]
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d8eb      	bhi.n	800bef6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bf1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3718      	adds	r7, #24
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bf32:	2300      	movs	r3, #0
 800bf34:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d01b      	beq.n	800bf78 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f7ff ffad 	bl	800bea0 <sync_window>
 800bf46:	4603      	mov	r3, r0
 800bf48:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bf4a:	7bfb      	ldrb	r3, [r7, #15]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d113      	bne.n	800bf78 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	7858      	ldrb	r0, [r3, #1]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	683a      	ldr	r2, [r7, #0]
 800bf5e:	f7ff fcd5 	bl	800b90c <disk_read>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d004      	beq.n	800bf72 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bf68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf6c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800bf78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
	...

0800bf84 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f7ff ff87 	bl	800bea0 <sync_window>
 800bf92:	4603      	mov	r3, r0
 800bf94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bf96:	7bfb      	ldrb	r3, [r7, #15]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d158      	bne.n	800c04e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	2b03      	cmp	r3, #3
 800bfa2:	d148      	bne.n	800c036 <sync_fs+0xb2>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	791b      	ldrb	r3, [r3, #4]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d144      	bne.n	800c036 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	3330      	adds	r3, #48	; 0x30
 800bfb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7ff fda9 	bl	800bb0e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	3330      	adds	r3, #48	; 0x30
 800bfc0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bfc4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7ff fd38 	bl	800ba3e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	3330      	adds	r3, #48	; 0x30
 800bfd2:	4921      	ldr	r1, [pc, #132]	; (800c058 <sync_fs+0xd4>)
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7ff fd4d 	bl	800ba74 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	3330      	adds	r3, #48	; 0x30
 800bfde:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bfe2:	491e      	ldr	r1, [pc, #120]	; (800c05c <sync_fs+0xd8>)
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7ff fd45 	bl	800ba74 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	3330      	adds	r3, #48	; 0x30
 800bfee:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	691b      	ldr	r3, [r3, #16]
 800bff6:	4619      	mov	r1, r3
 800bff8:	4610      	mov	r0, r2
 800bffa:	f7ff fd3b 	bl	800ba74 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	3330      	adds	r3, #48	; 0x30
 800c002:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	4619      	mov	r1, r3
 800c00c:	4610      	mov	r0, r2
 800c00e:	f7ff fd31 	bl	800ba74 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	69db      	ldr	r3, [r3, #28]
 800c016:	1c5a      	adds	r2, r3, #1
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	7858      	ldrb	r0, [r3, #1]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c02a:	2301      	movs	r3, #1
 800c02c:	f7ff fc8e 	bl	800b94c <disk_write>
			fs->fsi_flag = 0;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	785b      	ldrb	r3, [r3, #1]
 800c03a:	2200      	movs	r2, #0
 800c03c:	2100      	movs	r1, #0
 800c03e:	4618      	mov	r0, r3
 800c040:	f7ff fca4 	bl	800b98c <disk_ioctl>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d001      	beq.n	800c04e <sync_fs+0xca>
 800c04a:	2301      	movs	r3, #1
 800c04c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c050:	4618      	mov	r0, r3
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	41615252 	.word	0x41615252
 800c05c:	61417272 	.word	0x61417272

0800c060 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	3b02      	subs	r3, #2
 800c06e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	695b      	ldr	r3, [r3, #20]
 800c074:	3b02      	subs	r3, #2
 800c076:	683a      	ldr	r2, [r7, #0]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d301      	bcc.n	800c080 <clust2sect+0x20>
 800c07c:	2300      	movs	r3, #0
 800c07e:	e008      	b.n	800c092 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	895b      	ldrh	r3, [r3, #10]
 800c084:	461a      	mov	r2, r3
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	fb03 f202 	mul.w	r2, r3, r2
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c090:	4413      	add	r3, r2
}
 800c092:	4618      	mov	r0, r3
 800c094:	370c      	adds	r7, #12
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr

0800c09e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b086      	sub	sp, #24
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d904      	bls.n	800c0be <get_fat+0x20>
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	695b      	ldr	r3, [r3, #20]
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d302      	bcc.n	800c0c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c0be:	2301      	movs	r3, #1
 800c0c0:	617b      	str	r3, [r7, #20]
 800c0c2:	e08f      	b.n	800c1e4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c0c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	d062      	beq.n	800c198 <get_fat+0xfa>
 800c0d2:	2b03      	cmp	r3, #3
 800c0d4:	dc7c      	bgt.n	800c1d0 <get_fat+0x132>
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d002      	beq.n	800c0e0 <get_fat+0x42>
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d042      	beq.n	800c164 <get_fat+0xc6>
 800c0de:	e077      	b.n	800c1d0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	60fb      	str	r3, [r7, #12]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	085b      	lsrs	r3, r3, #1
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	6a1a      	ldr	r2, [r3, #32]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	0a5b      	lsrs	r3, r3, #9
 800c0f6:	4413      	add	r3, r2
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	6938      	ldr	r0, [r7, #16]
 800c0fc:	f7ff ff14 	bl	800bf28 <move_window>
 800c100:	4603      	mov	r3, r0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d167      	bne.n	800c1d6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	1c5a      	adds	r2, r3, #1
 800c10a:	60fa      	str	r2, [r7, #12]
 800c10c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c110:	693a      	ldr	r2, [r7, #16]
 800c112:	4413      	add	r3, r2
 800c114:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c118:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	6a1a      	ldr	r2, [r3, #32]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	0a5b      	lsrs	r3, r3, #9
 800c122:	4413      	add	r3, r2
 800c124:	4619      	mov	r1, r3
 800c126:	6938      	ldr	r0, [r7, #16]
 800c128:	f7ff fefe 	bl	800bf28 <move_window>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d153      	bne.n	800c1da <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c138:	693a      	ldr	r2, [r7, #16]
 800c13a:	4413      	add	r3, r2
 800c13c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c140:	021b      	lsls	r3, r3, #8
 800c142:	461a      	mov	r2, r3
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	4313      	orrs	r3, r2
 800c148:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	f003 0301 	and.w	r3, r3, #1
 800c150:	2b00      	cmp	r3, #0
 800c152:	d002      	beq.n	800c15a <get_fat+0xbc>
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	091b      	lsrs	r3, r3, #4
 800c158:	e002      	b.n	800c160 <get_fat+0xc2>
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c160:	617b      	str	r3, [r7, #20]
			break;
 800c162:	e03f      	b.n	800c1e4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	6a1a      	ldr	r2, [r3, #32]
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	0a1b      	lsrs	r3, r3, #8
 800c16c:	4413      	add	r3, r2
 800c16e:	4619      	mov	r1, r3
 800c170:	6938      	ldr	r0, [r7, #16]
 800c172:	f7ff fed9 	bl	800bf28 <move_window>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d130      	bne.n	800c1de <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	005b      	lsls	r3, r3, #1
 800c186:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c18a:	4413      	add	r3, r2
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7ff fc1b 	bl	800b9c8 <ld_word>
 800c192:	4603      	mov	r3, r0
 800c194:	617b      	str	r3, [r7, #20]
			break;
 800c196:	e025      	b.n	800c1e4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	6a1a      	ldr	r2, [r3, #32]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	09db      	lsrs	r3, r3, #7
 800c1a0:	4413      	add	r3, r2
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	6938      	ldr	r0, [r7, #16]
 800c1a6:	f7ff febf 	bl	800bf28 <move_window>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d118      	bne.n	800c1e2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c1be:	4413      	add	r3, r2
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7ff fc19 	bl	800b9f8 <ld_dword>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c1cc:	617b      	str	r3, [r7, #20]
			break;
 800c1ce:	e009      	b.n	800c1e4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	617b      	str	r3, [r7, #20]
 800c1d4:	e006      	b.n	800c1e4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c1d6:	bf00      	nop
 800c1d8:	e004      	b.n	800c1e4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c1da:	bf00      	nop
 800c1dc:	e002      	b.n	800c1e4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c1de:	bf00      	nop
 800c1e0:	e000      	b.n	800c1e4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c1e2:	bf00      	nop
		}
	}

	return val;
 800c1e4:	697b      	ldr	r3, [r7, #20]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3718      	adds	r7, #24
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c1ee:	b590      	push	{r4, r7, lr}
 800c1f0:	b089      	sub	sp, #36	; 0x24
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	60f8      	str	r0, [r7, #12]
 800c1f6:	60b9      	str	r1, [r7, #8]
 800c1f8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c1fa:	2302      	movs	r3, #2
 800c1fc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	2b01      	cmp	r3, #1
 800c202:	f240 80d9 	bls.w	800c3b8 <put_fat+0x1ca>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	695b      	ldr	r3, [r3, #20]
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	f080 80d3 	bcs.w	800c3b8 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	2b03      	cmp	r3, #3
 800c218:	f000 8096 	beq.w	800c348 <put_fat+0x15a>
 800c21c:	2b03      	cmp	r3, #3
 800c21e:	f300 80cb 	bgt.w	800c3b8 <put_fat+0x1ca>
 800c222:	2b01      	cmp	r3, #1
 800c224:	d002      	beq.n	800c22c <put_fat+0x3e>
 800c226:	2b02      	cmp	r3, #2
 800c228:	d06e      	beq.n	800c308 <put_fat+0x11a>
 800c22a:	e0c5      	b.n	800c3b8 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	61bb      	str	r3, [r7, #24]
 800c230:	69bb      	ldr	r3, [r7, #24]
 800c232:	085b      	lsrs	r3, r3, #1
 800c234:	69ba      	ldr	r2, [r7, #24]
 800c236:	4413      	add	r3, r2
 800c238:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6a1a      	ldr	r2, [r3, #32]
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	0a5b      	lsrs	r3, r3, #9
 800c242:	4413      	add	r3, r2
 800c244:	4619      	mov	r1, r3
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f7ff fe6e 	bl	800bf28 <move_window>
 800c24c:	4603      	mov	r3, r0
 800c24e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c250:	7ffb      	ldrb	r3, [r7, #31]
 800c252:	2b00      	cmp	r3, #0
 800c254:	f040 80a9 	bne.w	800c3aa <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	1c59      	adds	r1, r3, #1
 800c262:	61b9      	str	r1, [r7, #24]
 800c264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c268:	4413      	add	r3, r2
 800c26a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	f003 0301 	and.w	r3, r3, #1
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00d      	beq.n	800c292 <put_fat+0xa4>
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	b25b      	sxtb	r3, r3
 800c27c:	f003 030f 	and.w	r3, r3, #15
 800c280:	b25a      	sxtb	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	b2db      	uxtb	r3, r3
 800c286:	011b      	lsls	r3, r3, #4
 800c288:	b25b      	sxtb	r3, r3
 800c28a:	4313      	orrs	r3, r2
 800c28c:	b25b      	sxtb	r3, r3
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	e001      	b.n	800c296 <put_fat+0xa8>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	b2db      	uxtb	r3, r3
 800c296:	697a      	ldr	r2, [r7, #20]
 800c298:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2201      	movs	r2, #1
 800c29e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6a1a      	ldr	r2, [r3, #32]
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	0a5b      	lsrs	r3, r3, #9
 800c2a8:	4413      	add	r3, r2
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f7ff fe3b 	bl	800bf28 <move_window>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2b6:	7ffb      	ldrb	r3, [r7, #31]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d178      	bne.n	800c3ae <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2c8:	4413      	add	r3, r2
 800c2ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	f003 0301 	and.w	r3, r3, #1
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d003      	beq.n	800c2de <put_fat+0xf0>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	091b      	lsrs	r3, r3, #4
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	e00e      	b.n	800c2fc <put_fat+0x10e>
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	b25b      	sxtb	r3, r3
 800c2e4:	f023 030f 	bic.w	r3, r3, #15
 800c2e8:	b25a      	sxtb	r2, r3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	0a1b      	lsrs	r3, r3, #8
 800c2ee:	b25b      	sxtb	r3, r3
 800c2f0:	f003 030f 	and.w	r3, r3, #15
 800c2f4:	b25b      	sxtb	r3, r3
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	b25b      	sxtb	r3, r3
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	697a      	ldr	r2, [r7, #20]
 800c2fe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2201      	movs	r2, #1
 800c304:	70da      	strb	r2, [r3, #3]
			break;
 800c306:	e057      	b.n	800c3b8 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6a1a      	ldr	r2, [r3, #32]
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	0a1b      	lsrs	r3, r3, #8
 800c310:	4413      	add	r3, r2
 800c312:	4619      	mov	r1, r3
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	f7ff fe07 	bl	800bf28 <move_window>
 800c31a:	4603      	mov	r3, r0
 800c31c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c31e:	7ffb      	ldrb	r3, [r7, #31]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d146      	bne.n	800c3b2 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	005b      	lsls	r3, r3, #1
 800c32e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c332:	4413      	add	r3, r2
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	b292      	uxth	r2, r2
 800c338:	4611      	mov	r1, r2
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7ff fb7f 	bl	800ba3e <st_word>
			fs->wflag = 1;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2201      	movs	r2, #1
 800c344:	70da      	strb	r2, [r3, #3]
			break;
 800c346:	e037      	b.n	800c3b8 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6a1a      	ldr	r2, [r3, #32]
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	09db      	lsrs	r3, r3, #7
 800c350:	4413      	add	r3, r2
 800c352:	4619      	mov	r1, r3
 800c354:	68f8      	ldr	r0, [r7, #12]
 800c356:	f7ff fde7 	bl	800bf28 <move_window>
 800c35a:	4603      	mov	r3, r0
 800c35c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c35e:	7ffb      	ldrb	r3, [r7, #31]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d128      	bne.n	800c3b6 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c378:	4413      	add	r3, r2
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7ff fb3c 	bl	800b9f8 <ld_dword>
 800c380:	4603      	mov	r3, r0
 800c382:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c386:	4323      	orrs	r3, r4
 800c388:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c398:	4413      	add	r3, r2
 800c39a:	6879      	ldr	r1, [r7, #4]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7ff fb69 	bl	800ba74 <st_dword>
			fs->wflag = 1;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	70da      	strb	r2, [r3, #3]
			break;
 800c3a8:	e006      	b.n	800c3b8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c3aa:	bf00      	nop
 800c3ac:	e004      	b.n	800c3b8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c3ae:	bf00      	nop
 800c3b0:	e002      	b.n	800c3b8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c3b2:	bf00      	nop
 800c3b4:	e000      	b.n	800c3b8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c3b6:	bf00      	nop
		}
	}
	return res;
 800c3b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3724      	adds	r7, #36	; 0x24
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd90      	pop	{r4, r7, pc}

0800c3c2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b088      	sub	sp, #32
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	60f8      	str	r0, [r7, #12]
 800c3ca:	60b9      	str	r1, [r7, #8]
 800c3cc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d904      	bls.n	800c3e8 <remove_chain+0x26>
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	695b      	ldr	r3, [r3, #20]
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d301      	bcc.n	800c3ec <remove_chain+0x2a>
 800c3e8:	2302      	movs	r3, #2
 800c3ea:	e04b      	b.n	800c484 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00c      	beq.n	800c40c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c3f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3f6:	6879      	ldr	r1, [r7, #4]
 800c3f8:	69b8      	ldr	r0, [r7, #24]
 800c3fa:	f7ff fef8 	bl	800c1ee <put_fat>
 800c3fe:	4603      	mov	r3, r0
 800c400:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c402:	7ffb      	ldrb	r3, [r7, #31]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d001      	beq.n	800c40c <remove_chain+0x4a>
 800c408:	7ffb      	ldrb	r3, [r7, #31]
 800c40a:	e03b      	b.n	800c484 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c40c:	68b9      	ldr	r1, [r7, #8]
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f7ff fe45 	bl	800c09e <get_fat>
 800c414:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d031      	beq.n	800c480 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d101      	bne.n	800c426 <remove_chain+0x64>
 800c422:	2302      	movs	r3, #2
 800c424:	e02e      	b.n	800c484 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c42c:	d101      	bne.n	800c432 <remove_chain+0x70>
 800c42e:	2301      	movs	r3, #1
 800c430:	e028      	b.n	800c484 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c432:	2200      	movs	r2, #0
 800c434:	68b9      	ldr	r1, [r7, #8]
 800c436:	69b8      	ldr	r0, [r7, #24]
 800c438:	f7ff fed9 	bl	800c1ee <put_fat>
 800c43c:	4603      	mov	r3, r0
 800c43e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c440:	7ffb      	ldrb	r3, [r7, #31]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d001      	beq.n	800c44a <remove_chain+0x88>
 800c446:	7ffb      	ldrb	r3, [r7, #31]
 800c448:	e01c      	b.n	800c484 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	691a      	ldr	r2, [r3, #16]
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	3b02      	subs	r3, #2
 800c454:	429a      	cmp	r2, r3
 800c456:	d20b      	bcs.n	800c470 <remove_chain+0xae>
			fs->free_clst++;
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	1c5a      	adds	r2, r3, #1
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	791b      	ldrb	r3, [r3, #4]
 800c466:	f043 0301 	orr.w	r3, r3, #1
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	695b      	ldr	r3, [r3, #20]
 800c478:	68ba      	ldr	r2, [r7, #8]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d3c6      	bcc.n	800c40c <remove_chain+0x4a>
 800c47e:	e000      	b.n	800c482 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c480:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c482:	2300      	movs	r3, #0
}
 800c484:	4618      	mov	r0, r3
 800c486:	3720      	adds	r7, #32
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b088      	sub	sp, #32
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10d      	bne.n	800c4be <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d004      	beq.n	800c4b8 <create_chain+0x2c>
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	695b      	ldr	r3, [r3, #20]
 800c4b2:	69ba      	ldr	r2, [r7, #24]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d31b      	bcc.n	800c4f0 <create_chain+0x64>
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	61bb      	str	r3, [r7, #24]
 800c4bc:	e018      	b.n	800c4f0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c4be:	6839      	ldr	r1, [r7, #0]
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f7ff fdec 	bl	800c09e <get_fat>
 800c4c6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d801      	bhi.n	800c4d2 <create_chain+0x46>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e070      	b.n	800c5b4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4d8:	d101      	bne.n	800c4de <create_chain+0x52>
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	e06a      	b.n	800c5b4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	695b      	ldr	r3, [r3, #20]
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d201      	bcs.n	800c4ec <create_chain+0x60>
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	e063      	b.n	800c5b4 <create_chain+0x128>
		scl = clst;
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	69fa      	ldr	r2, [r7, #28]
 800c500:	429a      	cmp	r2, r3
 800c502:	d307      	bcc.n	800c514 <create_chain+0x88>
				ncl = 2;
 800c504:	2302      	movs	r3, #2
 800c506:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c508:	69fa      	ldr	r2, [r7, #28]
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d901      	bls.n	800c514 <create_chain+0x88>
 800c510:	2300      	movs	r3, #0
 800c512:	e04f      	b.n	800c5b4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c514:	69f9      	ldr	r1, [r7, #28]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7ff fdc1 	bl	800c09e <get_fat>
 800c51c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00e      	beq.n	800c542 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2b01      	cmp	r3, #1
 800c528:	d003      	beq.n	800c532 <create_chain+0xa6>
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c530:	d101      	bne.n	800c536 <create_chain+0xaa>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	e03e      	b.n	800c5b4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c536:	69fa      	ldr	r2, [r7, #28]
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d1da      	bne.n	800c4f4 <create_chain+0x68>
 800c53e:	2300      	movs	r3, #0
 800c540:	e038      	b.n	800c5b4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c542:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c548:	69f9      	ldr	r1, [r7, #28]
 800c54a:	6938      	ldr	r0, [r7, #16]
 800c54c:	f7ff fe4f 	bl	800c1ee <put_fat>
 800c550:	4603      	mov	r3, r0
 800c552:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c554:	7dfb      	ldrb	r3, [r7, #23]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d109      	bne.n	800c56e <create_chain+0xe2>
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d006      	beq.n	800c56e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c560:	69fa      	ldr	r2, [r7, #28]
 800c562:	6839      	ldr	r1, [r7, #0]
 800c564:	6938      	ldr	r0, [r7, #16]
 800c566:	f7ff fe42 	bl	800c1ee <put_fat>
 800c56a:	4603      	mov	r3, r0
 800c56c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d116      	bne.n	800c5a2 <create_chain+0x116>
		fs->last_clst = ncl;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	69fa      	ldr	r2, [r7, #28]
 800c578:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	691a      	ldr	r2, [r3, #16]
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	695b      	ldr	r3, [r3, #20]
 800c582:	3b02      	subs	r3, #2
 800c584:	429a      	cmp	r2, r3
 800c586:	d804      	bhi.n	800c592 <create_chain+0x106>
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	1e5a      	subs	r2, r3, #1
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	791b      	ldrb	r3, [r3, #4]
 800c596:	f043 0301 	orr.w	r3, r3, #1
 800c59a:	b2da      	uxtb	r2, r3
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	711a      	strb	r2, [r3, #4]
 800c5a0:	e007      	b.n	800c5b2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d102      	bne.n	800c5ae <create_chain+0x122>
 800c5a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5ac:	e000      	b.n	800c5b0 <create_chain+0x124>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c5b2:	69fb      	ldr	r3, [r7, #28]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3720      	adds	r7, #32
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b087      	sub	sp, #28
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d0:	3304      	adds	r3, #4
 800c5d2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	0a5b      	lsrs	r3, r3, #9
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	8952      	ldrh	r2, [r2, #10]
 800c5dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	1d1a      	adds	r2, r3, #4
 800c5e6:	613a      	str	r2, [r7, #16]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d101      	bne.n	800c5f6 <clmt_clust+0x3a>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	e010      	b.n	800c618 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c5f6:	697a      	ldr	r2, [r7, #20]
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d307      	bcc.n	800c60e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c5fe:	697a      	ldr	r2, [r7, #20]
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	1ad3      	subs	r3, r2, r3
 800c604:	617b      	str	r3, [r7, #20]
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	3304      	adds	r3, #4
 800c60a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c60c:	e7e9      	b.n	800c5e2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c60e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	4413      	add	r3, r2
}
 800c618:	4618      	mov	r0, r3
 800c61a:	371c      	adds	r7, #28
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c63a:	d204      	bcs.n	800c646 <dir_sdi+0x22>
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	f003 031f 	and.w	r3, r3, #31
 800c642:	2b00      	cmp	r3, #0
 800c644:	d001      	beq.n	800c64a <dir_sdi+0x26>
		return FR_INT_ERR;
 800c646:	2302      	movs	r3, #2
 800c648:	e063      	b.n	800c712 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	683a      	ldr	r2, [r7, #0]
 800c64e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d106      	bne.n	800c66a <dir_sdi+0x46>
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	2b02      	cmp	r3, #2
 800c662:	d902      	bls.n	800c66a <dir_sdi+0x46>
		clst = fs->dirbase;
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c668:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d10c      	bne.n	800c68a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	095b      	lsrs	r3, r3, #5
 800c674:	693a      	ldr	r2, [r7, #16]
 800c676:	8912      	ldrh	r2, [r2, #8]
 800c678:	4293      	cmp	r3, r2
 800c67a:	d301      	bcc.n	800c680 <dir_sdi+0x5c>
 800c67c:	2302      	movs	r3, #2
 800c67e:	e048      	b.n	800c712 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	61da      	str	r2, [r3, #28]
 800c688:	e029      	b.n	800c6de <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	895b      	ldrh	r3, [r3, #10]
 800c68e:	025b      	lsls	r3, r3, #9
 800c690:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c692:	e019      	b.n	800c6c8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6979      	ldr	r1, [r7, #20]
 800c698:	4618      	mov	r0, r3
 800c69a:	f7ff fd00 	bl	800c09e <get_fat>
 800c69e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6a6:	d101      	bne.n	800c6ac <dir_sdi+0x88>
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e032      	b.n	800c712 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d904      	bls.n	800c6bc <dir_sdi+0x98>
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	695b      	ldr	r3, [r3, #20]
 800c6b6:	697a      	ldr	r2, [r7, #20]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d301      	bcc.n	800c6c0 <dir_sdi+0x9c>
 800c6bc:	2302      	movs	r3, #2
 800c6be:	e028      	b.n	800c712 <dir_sdi+0xee>
			ofs -= csz;
 800c6c0:	683a      	ldr	r2, [r7, #0]
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	1ad3      	subs	r3, r2, r3
 800c6c6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c6c8:	683a      	ldr	r2, [r7, #0]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d2e1      	bcs.n	800c694 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c6d0:	6979      	ldr	r1, [r7, #20]
 800c6d2:	6938      	ldr	r0, [r7, #16]
 800c6d4:	f7ff fcc4 	bl	800c060 <clust2sect>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	697a      	ldr	r2, [r7, #20]
 800c6e2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	69db      	ldr	r3, [r3, #28]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d101      	bne.n	800c6f0 <dir_sdi+0xcc>
 800c6ec:	2302      	movs	r3, #2
 800c6ee:	e010      	b.n	800c712 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	69da      	ldr	r2, [r3, #28]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	0a5b      	lsrs	r3, r3, #9
 800c6f8:	441a      	add	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c70a:	441a      	add	r2, r3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c710:	2300      	movs	r3, #0
}
 800c712:	4618      	mov	r0, r3
 800c714:	3718      	adds	r7, #24
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b086      	sub	sp, #24
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	695b      	ldr	r3, [r3, #20]
 800c72e:	3320      	adds	r3, #32
 800c730:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	69db      	ldr	r3, [r3, #28]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d003      	beq.n	800c742 <dir_next+0x28>
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c740:	d301      	bcc.n	800c746 <dir_next+0x2c>
 800c742:	2304      	movs	r3, #4
 800c744:	e0aa      	b.n	800c89c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f040 8098 	bne.w	800c882 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	69db      	ldr	r3, [r3, #28]
 800c756:	1c5a      	adds	r2, r3, #1
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	699b      	ldr	r3, [r3, #24]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10b      	bne.n	800c77c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	095b      	lsrs	r3, r3, #5
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	8912      	ldrh	r2, [r2, #8]
 800c76c:	4293      	cmp	r3, r2
 800c76e:	f0c0 8088 	bcc.w	800c882 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	61da      	str	r2, [r3, #28]
 800c778:	2304      	movs	r3, #4
 800c77a:	e08f      	b.n	800c89c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	0a5b      	lsrs	r3, r3, #9
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	8952      	ldrh	r2, [r2, #10]
 800c784:	3a01      	subs	r2, #1
 800c786:	4013      	ands	r3, r2
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d17a      	bne.n	800c882 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	4619      	mov	r1, r3
 800c794:	4610      	mov	r0, r2
 800c796:	f7ff fc82 	bl	800c09e <get_fat>
 800c79a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d801      	bhi.n	800c7a6 <dir_next+0x8c>
 800c7a2:	2302      	movs	r3, #2
 800c7a4:	e07a      	b.n	800c89c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7ac:	d101      	bne.n	800c7b2 <dir_next+0x98>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e074      	b.n	800c89c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	695b      	ldr	r3, [r3, #20]
 800c7b6:	697a      	ldr	r2, [r7, #20]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d358      	bcc.n	800c86e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d104      	bne.n	800c7cc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	61da      	str	r2, [r3, #28]
 800c7c8:	2304      	movs	r3, #4
 800c7ca:	e067      	b.n	800c89c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	699b      	ldr	r3, [r3, #24]
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	f7ff fe59 	bl	800c48c <create_chain>
 800c7da:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d101      	bne.n	800c7e6 <dir_next+0xcc>
 800c7e2:	2307      	movs	r3, #7
 800c7e4:	e05a      	b.n	800c89c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d101      	bne.n	800c7f0 <dir_next+0xd6>
 800c7ec:	2302      	movs	r3, #2
 800c7ee:	e055      	b.n	800c89c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7f6:	d101      	bne.n	800c7fc <dir_next+0xe2>
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e04f      	b.n	800c89c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f7ff fb4f 	bl	800bea0 <sync_window>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d001      	beq.n	800c80c <dir_next+0xf2>
 800c808:	2301      	movs	r3, #1
 800c80a:	e047      	b.n	800c89c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	3330      	adds	r3, #48	; 0x30
 800c810:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c814:	2100      	movs	r1, #0
 800c816:	4618      	mov	r0, r3
 800c818:	f7ff f979 	bl	800bb0e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c81c:	2300      	movs	r3, #0
 800c81e:	613b      	str	r3, [r7, #16]
 800c820:	6979      	ldr	r1, [r7, #20]
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	f7ff fc1c 	bl	800c060 <clust2sect>
 800c828:	4602      	mov	r2, r0
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c82e:	e012      	b.n	800c856 <dir_next+0x13c>
						fs->wflag = 1;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2201      	movs	r2, #1
 800c834:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f7ff fb32 	bl	800bea0 <sync_window>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d001      	beq.n	800c846 <dir_next+0x12c>
 800c842:	2301      	movs	r3, #1
 800c844:	e02a      	b.n	800c89c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	3301      	adds	r3, #1
 800c84a:	613b      	str	r3, [r7, #16]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c850:	1c5a      	adds	r2, r3, #1
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	62da      	str	r2, [r3, #44]	; 0x2c
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	895b      	ldrh	r3, [r3, #10]
 800c85a:	461a      	mov	r2, r3
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	4293      	cmp	r3, r2
 800c860:	d3e6      	bcc.n	800c830 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	1ad2      	subs	r2, r2, r3
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	697a      	ldr	r2, [r7, #20]
 800c872:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c874:	6979      	ldr	r1, [r7, #20]
 800c876:	68f8      	ldr	r0, [r7, #12]
 800c878:	f7ff fbf2 	bl	800c060 <clust2sect>
 800c87c:	4602      	mov	r2, r0
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	68ba      	ldr	r2, [r7, #8]
 800c886:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c894:	441a      	add	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c89a:	2300      	movs	r3, #0
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3718      	adds	r7, #24
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b086      	sub	sp, #24
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7ff feb4 	bl	800c624 <dir_sdi>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c8c0:	7dfb      	ldrb	r3, [r7, #23]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d12b      	bne.n	800c91e <dir_alloc+0x7a>
		n = 0;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	69db      	ldr	r3, [r3, #28]
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f7ff fb29 	bl	800bf28 <move_window>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c8da:	7dfb      	ldrb	r3, [r7, #23]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d11d      	bne.n	800c91c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6a1b      	ldr	r3, [r3, #32]
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	2be5      	cmp	r3, #229	; 0xe5
 800c8e8:	d004      	beq.n	800c8f4 <dir_alloc+0x50>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6a1b      	ldr	r3, [r3, #32]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d107      	bne.n	800c904 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	613b      	str	r3, [r7, #16]
 800c8fa:	693a      	ldr	r2, [r7, #16]
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d102      	bne.n	800c908 <dir_alloc+0x64>
 800c902:	e00c      	b.n	800c91e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c904:	2300      	movs	r3, #0
 800c906:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c908:	2101      	movs	r1, #1
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f7ff ff05 	bl	800c71a <dir_next>
 800c910:	4603      	mov	r3, r0
 800c912:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c914:	7dfb      	ldrb	r3, [r7, #23]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d0d7      	beq.n	800c8ca <dir_alloc+0x26>
 800c91a:	e000      	b.n	800c91e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c91c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c91e:	7dfb      	ldrb	r3, [r7, #23]
 800c920:	2b04      	cmp	r3, #4
 800c922:	d101      	bne.n	800c928 <dir_alloc+0x84>
 800c924:	2307      	movs	r3, #7
 800c926:	75fb      	strb	r3, [r7, #23]
	return res;
 800c928:	7dfb      	ldrb	r3, [r7, #23]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3718      	adds	r7, #24
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b084      	sub	sp, #16
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	331a      	adds	r3, #26
 800c940:	4618      	mov	r0, r3
 800c942:	f7ff f841 	bl	800b9c8 <ld_word>
 800c946:	4603      	mov	r3, r0
 800c948:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	2b03      	cmp	r3, #3
 800c950:	d109      	bne.n	800c966 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	3314      	adds	r3, #20
 800c956:	4618      	mov	r0, r3
 800c958:	f7ff f836 	bl	800b9c8 <ld_word>
 800c95c:	4603      	mov	r3, r0
 800c95e:	041b      	lsls	r3, r3, #16
 800c960:	68fa      	ldr	r2, [r7, #12]
 800c962:	4313      	orrs	r3, r2
 800c964:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c966:	68fb      	ldr	r3, [r7, #12]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	331a      	adds	r3, #26
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	b292      	uxth	r2, r2
 800c984:	4611      	mov	r1, r2
 800c986:	4618      	mov	r0, r3
 800c988:	f7ff f859 	bl	800ba3e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	2b03      	cmp	r3, #3
 800c992:	d109      	bne.n	800c9a8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	f103 0214 	add.w	r2, r3, #20
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	0c1b      	lsrs	r3, r3, #16
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	4610      	mov	r0, r2
 800c9a4:	f7ff f84b 	bl	800ba3e <st_word>
	}
}
 800c9a8:	bf00      	nop
 800c9aa:	3710      	adds	r7, #16
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c9be:	2100      	movs	r1, #0
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7ff fe2f 	bl	800c624 <dir_sdi>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c9ca:	7dfb      	ldrb	r3, [r7, #23]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d001      	beq.n	800c9d4 <dir_find+0x24>
 800c9d0:	7dfb      	ldrb	r3, [r7, #23]
 800c9d2:	e03e      	b.n	800ca52 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	69db      	ldr	r3, [r3, #28]
 800c9d8:	4619      	mov	r1, r3
 800c9da:	6938      	ldr	r0, [r7, #16]
 800c9dc:	f7ff faa4 	bl	800bf28 <move_window>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c9e4:	7dfb      	ldrb	r3, [r7, #23]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d12f      	bne.n	800ca4a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6a1b      	ldr	r3, [r3, #32]
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c9f2:	7bfb      	ldrb	r3, [r7, #15]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d102      	bne.n	800c9fe <dir_find+0x4e>
 800c9f8:	2304      	movs	r3, #4
 800c9fa:	75fb      	strb	r3, [r7, #23]
 800c9fc:	e028      	b.n	800ca50 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6a1b      	ldr	r3, [r3, #32]
 800ca02:	330b      	adds	r3, #11
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca0a:	b2da      	uxtb	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6a1b      	ldr	r3, [r3, #32]
 800ca14:	330b      	adds	r3, #11
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	f003 0308 	and.w	r3, r3, #8
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10a      	bne.n	800ca36 <dir_find+0x86>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6a18      	ldr	r0, [r3, #32]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	3324      	adds	r3, #36	; 0x24
 800ca28:	220b      	movs	r2, #11
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	f7ff f88a 	bl	800bb44 <mem_cmp>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00b      	beq.n	800ca4e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ca36:	2100      	movs	r1, #0
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7ff fe6e 	bl	800c71a <dir_next>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ca42:	7dfb      	ldrb	r3, [r7, #23]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d0c5      	beq.n	800c9d4 <dir_find+0x24>
 800ca48:	e002      	b.n	800ca50 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ca4a:	bf00      	nop
 800ca4c:	e000      	b.n	800ca50 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ca4e:	bf00      	nop

	return res;
 800ca50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3718      	adds	r7, #24
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b084      	sub	sp, #16
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ca68:	2101      	movs	r1, #1
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f7ff ff1a 	bl	800c8a4 <dir_alloc>
 800ca70:	4603      	mov	r3, r0
 800ca72:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d11c      	bne.n	800cab4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	69db      	ldr	r3, [r3, #28]
 800ca7e:	4619      	mov	r1, r3
 800ca80:	68b8      	ldr	r0, [r7, #8]
 800ca82:	f7ff fa51 	bl	800bf28 <move_window>
 800ca86:	4603      	mov	r3, r0
 800ca88:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ca8a:	7bfb      	ldrb	r3, [r7, #15]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d111      	bne.n	800cab4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	2220      	movs	r2, #32
 800ca96:	2100      	movs	r1, #0
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7ff f838 	bl	800bb0e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6a18      	ldr	r0, [r3, #32]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	3324      	adds	r3, #36	; 0x24
 800caa6:	220b      	movs	r2, #11
 800caa8:	4619      	mov	r1, r3
 800caaa:	f7ff f80f 	bl	800bacc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	2201      	movs	r2, #1
 800cab2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
	...

0800cac0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b088      	sub	sp, #32
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	60fb      	str	r3, [r7, #12]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	3324      	adds	r3, #36	; 0x24
 800cad4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cad6:	220b      	movs	r2, #11
 800cad8:	2120      	movs	r1, #32
 800cada:	68b8      	ldr	r0, [r7, #8]
 800cadc:	f7ff f817 	bl	800bb0e <mem_set>
	si = i = 0; ni = 8;
 800cae0:	2300      	movs	r3, #0
 800cae2:	613b      	str	r3, [r7, #16]
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	61fb      	str	r3, [r7, #28]
 800cae8:	2308      	movs	r3, #8
 800caea:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	1c5a      	adds	r2, r3, #1
 800caf0:	61fa      	str	r2, [r7, #28]
 800caf2:	68fa      	ldr	r2, [r7, #12]
 800caf4:	4413      	add	r3, r2
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cafa:	7efb      	ldrb	r3, [r7, #27]
 800cafc:	2b20      	cmp	r3, #32
 800cafe:	d94e      	bls.n	800cb9e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cb00:	7efb      	ldrb	r3, [r7, #27]
 800cb02:	2b2f      	cmp	r3, #47	; 0x2f
 800cb04:	d006      	beq.n	800cb14 <create_name+0x54>
 800cb06:	7efb      	ldrb	r3, [r7, #27]
 800cb08:	2b5c      	cmp	r3, #92	; 0x5c
 800cb0a:	d110      	bne.n	800cb2e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cb0c:	e002      	b.n	800cb14 <create_name+0x54>
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	3301      	adds	r3, #1
 800cb12:	61fb      	str	r3, [r7, #28]
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	4413      	add	r3, r2
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	2b2f      	cmp	r3, #47	; 0x2f
 800cb1e:	d0f6      	beq.n	800cb0e <create_name+0x4e>
 800cb20:	68fa      	ldr	r2, [r7, #12]
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	4413      	add	r3, r2
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	2b5c      	cmp	r3, #92	; 0x5c
 800cb2a:	d0f0      	beq.n	800cb0e <create_name+0x4e>
			break;
 800cb2c:	e038      	b.n	800cba0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cb2e:	7efb      	ldrb	r3, [r7, #27]
 800cb30:	2b2e      	cmp	r3, #46	; 0x2e
 800cb32:	d003      	beq.n	800cb3c <create_name+0x7c>
 800cb34:	693a      	ldr	r2, [r7, #16]
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d30c      	bcc.n	800cb56 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	2b0b      	cmp	r3, #11
 800cb40:	d002      	beq.n	800cb48 <create_name+0x88>
 800cb42:	7efb      	ldrb	r3, [r7, #27]
 800cb44:	2b2e      	cmp	r3, #46	; 0x2e
 800cb46:	d001      	beq.n	800cb4c <create_name+0x8c>
 800cb48:	2306      	movs	r3, #6
 800cb4a:	e044      	b.n	800cbd6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cb4c:	2308      	movs	r3, #8
 800cb4e:	613b      	str	r3, [r7, #16]
 800cb50:	230b      	movs	r3, #11
 800cb52:	617b      	str	r3, [r7, #20]
			continue;
 800cb54:	e022      	b.n	800cb9c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cb56:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	da04      	bge.n	800cb68 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cb5e:	7efb      	ldrb	r3, [r7, #27]
 800cb60:	3b80      	subs	r3, #128	; 0x80
 800cb62:	4a1f      	ldr	r2, [pc, #124]	; (800cbe0 <create_name+0x120>)
 800cb64:	5cd3      	ldrb	r3, [r2, r3]
 800cb66:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cb68:	7efb      	ldrb	r3, [r7, #27]
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	481d      	ldr	r0, [pc, #116]	; (800cbe4 <create_name+0x124>)
 800cb6e:	f7ff f810 	bl	800bb92 <chk_chr>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d001      	beq.n	800cb7c <create_name+0xbc>
 800cb78:	2306      	movs	r3, #6
 800cb7a:	e02c      	b.n	800cbd6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cb7c:	7efb      	ldrb	r3, [r7, #27]
 800cb7e:	2b60      	cmp	r3, #96	; 0x60
 800cb80:	d905      	bls.n	800cb8e <create_name+0xce>
 800cb82:	7efb      	ldrb	r3, [r7, #27]
 800cb84:	2b7a      	cmp	r3, #122	; 0x7a
 800cb86:	d802      	bhi.n	800cb8e <create_name+0xce>
 800cb88:	7efb      	ldrb	r3, [r7, #27]
 800cb8a:	3b20      	subs	r3, #32
 800cb8c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	1c5a      	adds	r2, r3, #1
 800cb92:	613a      	str	r2, [r7, #16]
 800cb94:	68ba      	ldr	r2, [r7, #8]
 800cb96:	4413      	add	r3, r2
 800cb98:	7efa      	ldrb	r2, [r7, #27]
 800cb9a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cb9c:	e7a6      	b.n	800caec <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cb9e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	441a      	add	r2, r3
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d101      	bne.n	800cbb4 <create_name+0xf4>
 800cbb0:	2306      	movs	r3, #6
 800cbb2:	e010      	b.n	800cbd6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	2be5      	cmp	r3, #229	; 0xe5
 800cbba:	d102      	bne.n	800cbc2 <create_name+0x102>
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	2205      	movs	r2, #5
 800cbc0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cbc2:	7efb      	ldrb	r3, [r7, #27]
 800cbc4:	2b20      	cmp	r3, #32
 800cbc6:	d801      	bhi.n	800cbcc <create_name+0x10c>
 800cbc8:	2204      	movs	r2, #4
 800cbca:	e000      	b.n	800cbce <create_name+0x10e>
 800cbcc:	2200      	movs	r2, #0
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	330b      	adds	r3, #11
 800cbd2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cbd4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3720      	adds	r7, #32
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	0800fc48 	.word	0x0800fc48
 800cbe4:	0800fb88 	.word	0x0800fb88

0800cbe8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b086      	sub	sp, #24
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cbfc:	e002      	b.n	800cc04 <follow_path+0x1c>
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	3301      	adds	r3, #1
 800cc02:	603b      	str	r3, [r7, #0]
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	2b2f      	cmp	r3, #47	; 0x2f
 800cc0a:	d0f8      	beq.n	800cbfe <follow_path+0x16>
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	2b5c      	cmp	r3, #92	; 0x5c
 800cc12:	d0f4      	beq.n	800cbfe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	2200      	movs	r2, #0
 800cc18:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	2b1f      	cmp	r3, #31
 800cc20:	d80a      	bhi.n	800cc38 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2280      	movs	r2, #128	; 0x80
 800cc26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f7ff fcf9 	bl	800c624 <dir_sdi>
 800cc32:	4603      	mov	r3, r0
 800cc34:	75fb      	strb	r3, [r7, #23]
 800cc36:	e043      	b.n	800ccc0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc38:	463b      	mov	r3, r7
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7ff ff3f 	bl	800cac0 <create_name>
 800cc42:	4603      	mov	r3, r0
 800cc44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc46:	7dfb      	ldrb	r3, [r7, #23]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d134      	bne.n	800ccb6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7ff feaf 	bl	800c9b0 <dir_find>
 800cc52:	4603      	mov	r3, r0
 800cc54:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc5c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cc5e:	7dfb      	ldrb	r3, [r7, #23]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d00a      	beq.n	800cc7a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cc64:	7dfb      	ldrb	r3, [r7, #23]
 800cc66:	2b04      	cmp	r3, #4
 800cc68:	d127      	bne.n	800ccba <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cc6a:	7afb      	ldrb	r3, [r7, #11]
 800cc6c:	f003 0304 	and.w	r3, r3, #4
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d122      	bne.n	800ccba <follow_path+0xd2>
 800cc74:	2305      	movs	r3, #5
 800cc76:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cc78:	e01f      	b.n	800ccba <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cc7a:	7afb      	ldrb	r3, [r7, #11]
 800cc7c:	f003 0304 	and.w	r3, r3, #4
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d11c      	bne.n	800ccbe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	799b      	ldrb	r3, [r3, #6]
 800cc88:	f003 0310 	and.w	r3, r3, #16
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d102      	bne.n	800cc96 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cc90:	2305      	movs	r3, #5
 800cc92:	75fb      	strb	r3, [r7, #23]
 800cc94:	e014      	b.n	800ccc0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	695b      	ldr	r3, [r3, #20]
 800cca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cca4:	4413      	add	r3, r2
 800cca6:	4619      	mov	r1, r3
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f7ff fe42 	bl	800c932 <ld_clust>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ccb4:	e7c0      	b.n	800cc38 <follow_path+0x50>
			if (res != FR_OK) break;
 800ccb6:	bf00      	nop
 800ccb8:	e002      	b.n	800ccc0 <follow_path+0xd8>
				break;
 800ccba:	bf00      	nop
 800ccbc:	e000      	b.n	800ccc0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ccbe:	bf00      	nop
			}
		}
	}

	return res;
 800ccc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3718      	adds	r7, #24
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ccca:	b480      	push	{r7}
 800cccc:	b087      	sub	sp, #28
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ccd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccd6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d031      	beq.n	800cd44 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	617b      	str	r3, [r7, #20]
 800cce6:	e002      	b.n	800ccee <get_ldnumber+0x24>
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	3301      	adds	r3, #1
 800ccec:	617b      	str	r3, [r7, #20]
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	2b20      	cmp	r3, #32
 800ccf4:	d903      	bls.n	800ccfe <get_ldnumber+0x34>
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	2b3a      	cmp	r3, #58	; 0x3a
 800ccfc:	d1f4      	bne.n	800cce8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	2b3a      	cmp	r3, #58	; 0x3a
 800cd04:	d11c      	bne.n	800cd40 <get_ldnumber+0x76>
			tp = *path;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	1c5a      	adds	r2, r3, #1
 800cd10:	60fa      	str	r2, [r7, #12]
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	3b30      	subs	r3, #48	; 0x30
 800cd16:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2b09      	cmp	r3, #9
 800cd1c:	d80e      	bhi.n	800cd3c <get_ldnumber+0x72>
 800cd1e:	68fa      	ldr	r2, [r7, #12]
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d10a      	bne.n	800cd3c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d107      	bne.n	800cd3c <get_ldnumber+0x72>
					vol = (int)i;
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	3301      	adds	r3, #1
 800cd34:	617b      	str	r3, [r7, #20]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	697a      	ldr	r2, [r7, #20]
 800cd3a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	e002      	b.n	800cd46 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cd40:	2300      	movs	r3, #0
 800cd42:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cd44:	693b      	ldr	r3, [r7, #16]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	371c      	adds	r7, #28
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
	...

0800cd54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2200      	movs	r2, #0
 800cd62:	70da      	strb	r2, [r3, #3]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd6a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cd6c:	6839      	ldr	r1, [r7, #0]
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f7ff f8da 	bl	800bf28 <move_window>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d001      	beq.n	800cd7e <check_fs+0x2a>
 800cd7a:	2304      	movs	r3, #4
 800cd7c:	e038      	b.n	800cdf0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	3330      	adds	r3, #48	; 0x30
 800cd82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fe fe1e 	bl	800b9c8 <ld_word>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	461a      	mov	r2, r3
 800cd90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d001      	beq.n	800cd9c <check_fs+0x48>
 800cd98:	2303      	movs	r3, #3
 800cd9a:	e029      	b.n	800cdf0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cda2:	2be9      	cmp	r3, #233	; 0xe9
 800cda4:	d009      	beq.n	800cdba <check_fs+0x66>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdac:	2beb      	cmp	r3, #235	; 0xeb
 800cdae:	d11e      	bne.n	800cdee <check_fs+0x9a>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cdb6:	2b90      	cmp	r3, #144	; 0x90
 800cdb8:	d119      	bne.n	800cdee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	3330      	adds	r3, #48	; 0x30
 800cdbe:	3336      	adds	r3, #54	; 0x36
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7fe fe19 	bl	800b9f8 <ld_dword>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cdcc:	4a0a      	ldr	r2, [pc, #40]	; (800cdf8 <check_fs+0xa4>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d101      	bne.n	800cdd6 <check_fs+0x82>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e00c      	b.n	800cdf0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	3330      	adds	r3, #48	; 0x30
 800cdda:	3352      	adds	r3, #82	; 0x52
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fe fe0b 	bl	800b9f8 <ld_dword>
 800cde2:	4603      	mov	r3, r0
 800cde4:	4a05      	ldr	r2, [pc, #20]	; (800cdfc <check_fs+0xa8>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d101      	bne.n	800cdee <check_fs+0x9a>
 800cdea:	2300      	movs	r3, #0
 800cdec:	e000      	b.n	800cdf0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cdee:	2302      	movs	r3, #2
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3708      	adds	r7, #8
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	00544146 	.word	0x00544146
 800cdfc:	33544146 	.word	0x33544146

0800ce00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b096      	sub	sp, #88	; 0x58
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	2200      	movs	r2, #0
 800ce12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ce14:	68f8      	ldr	r0, [r7, #12]
 800ce16:	f7ff ff58 	bl	800ccca <get_ldnumber>
 800ce1a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	da01      	bge.n	800ce26 <find_volume+0x26>
 800ce22:	230b      	movs	r3, #11
 800ce24:	e22d      	b.n	800d282 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ce26:	4aa1      	ldr	r2, [pc, #644]	; (800d0ac <find_volume+0x2ac>)
 800ce28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce2e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d101      	bne.n	800ce3a <find_volume+0x3a>
 800ce36:	230c      	movs	r3, #12
 800ce38:	e223      	b.n	800d282 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce3e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ce40:	79fb      	ldrb	r3, [r7, #7]
 800ce42:	f023 0301 	bic.w	r3, r3, #1
 800ce46:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ce48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d01a      	beq.n	800ce86 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ce50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce52:	785b      	ldrb	r3, [r3, #1]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7fe fd19 	bl	800b88c <disk_status>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ce60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce64:	f003 0301 	and.w	r3, r3, #1
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10c      	bne.n	800ce86 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ce6c:	79fb      	ldrb	r3, [r7, #7]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d007      	beq.n	800ce82 <find_volume+0x82>
 800ce72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce76:	f003 0304 	and.w	r3, r3, #4
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d001      	beq.n	800ce82 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ce7e:	230a      	movs	r3, #10
 800ce80:	e1ff      	b.n	800d282 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ce82:	2300      	movs	r3, #0
 800ce84:	e1fd      	b.n	800d282 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ce86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce88:	2200      	movs	r2, #0
 800ce8a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ce8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce8e:	b2da      	uxtb	r2, r3
 800ce90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce92:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ce94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce96:	785b      	ldrb	r3, [r3, #1]
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7fe fd11 	bl	800b8c0 <disk_initialize>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cea4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cea8:	f003 0301 	and.w	r3, r3, #1
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d001      	beq.n	800ceb4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ceb0:	2303      	movs	r3, #3
 800ceb2:	e1e6      	b.n	800d282 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ceb4:	79fb      	ldrb	r3, [r7, #7]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d007      	beq.n	800ceca <find_volume+0xca>
 800ceba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cebe:	f003 0304 	and.w	r3, r3, #4
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d001      	beq.n	800ceca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cec6:	230a      	movs	r3, #10
 800cec8:	e1db      	b.n	800d282 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ceca:	2300      	movs	r3, #0
 800cecc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cece:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ced0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ced2:	f7ff ff3f 	bl	800cd54 <check_fs>
 800ced6:	4603      	mov	r3, r0
 800ced8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cedc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cee0:	2b02      	cmp	r3, #2
 800cee2:	d149      	bne.n	800cf78 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cee4:	2300      	movs	r3, #0
 800cee6:	643b      	str	r3, [r7, #64]	; 0x40
 800cee8:	e01e      	b.n	800cf28 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ceea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cef2:	011b      	lsls	r3, r3, #4
 800cef4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cef8:	4413      	add	r3, r2
 800cefa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefe:	3304      	adds	r3, #4
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d006      	beq.n	800cf14 <find_volume+0x114>
 800cf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf08:	3308      	adds	r3, #8
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7fe fd74 	bl	800b9f8 <ld_dword>
 800cf10:	4602      	mov	r2, r0
 800cf12:	e000      	b.n	800cf16 <find_volume+0x116>
 800cf14:	2200      	movs	r2, #0
 800cf16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	3358      	adds	r3, #88	; 0x58
 800cf1c:	443b      	add	r3, r7
 800cf1e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf24:	3301      	adds	r3, #1
 800cf26:	643b      	str	r3, [r7, #64]	; 0x40
 800cf28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf2a:	2b03      	cmp	r3, #3
 800cf2c:	d9dd      	bls.n	800ceea <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cf2e:	2300      	movs	r3, #0
 800cf30:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cf32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d002      	beq.n	800cf3e <find_volume+0x13e>
 800cf38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf3a:	3b01      	subs	r3, #1
 800cf3c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cf3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	3358      	adds	r3, #88	; 0x58
 800cf44:	443b      	add	r3, r7
 800cf46:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cf4a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cf4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d005      	beq.n	800cf5e <find_volume+0x15e>
 800cf52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf56:	f7ff fefd 	bl	800cd54 <check_fs>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	e000      	b.n	800cf60 <find_volume+0x160>
 800cf5e:	2303      	movs	r3, #3
 800cf60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cf64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d905      	bls.n	800cf78 <find_volume+0x178>
 800cf6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf6e:	3301      	adds	r3, #1
 800cf70:	643b      	str	r3, [r7, #64]	; 0x40
 800cf72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf74:	2b03      	cmp	r3, #3
 800cf76:	d9e2      	bls.n	800cf3e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cf78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf7c:	2b04      	cmp	r3, #4
 800cf7e:	d101      	bne.n	800cf84 <find_volume+0x184>
 800cf80:	2301      	movs	r3, #1
 800cf82:	e17e      	b.n	800d282 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cf84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d901      	bls.n	800cf90 <find_volume+0x190>
 800cf8c:	230d      	movs	r3, #13
 800cf8e:	e178      	b.n	800d282 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf92:	3330      	adds	r3, #48	; 0x30
 800cf94:	330b      	adds	r3, #11
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7fe fd16 	bl	800b9c8 <ld_word>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfa2:	d001      	beq.n	800cfa8 <find_volume+0x1a8>
 800cfa4:	230d      	movs	r3, #13
 800cfa6:	e16c      	b.n	800d282 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfaa:	3330      	adds	r3, #48	; 0x30
 800cfac:	3316      	adds	r3, #22
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fe fd0a 	bl	800b9c8 <ld_word>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cfb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d106      	bne.n	800cfcc <find_volume+0x1cc>
 800cfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc0:	3330      	adds	r3, #48	; 0x30
 800cfc2:	3324      	adds	r3, #36	; 0x24
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7fe fd17 	bl	800b9f8 <ld_dword>
 800cfca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cfd0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800cfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfda:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfde:	789b      	ldrb	r3, [r3, #2]
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d005      	beq.n	800cff0 <find_volume+0x1f0>
 800cfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe6:	789b      	ldrb	r3, [r3, #2]
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	d001      	beq.n	800cff0 <find_volume+0x1f0>
 800cfec:	230d      	movs	r3, #13
 800cfee:	e148      	b.n	800d282 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff2:	789b      	ldrb	r3, [r3, #2]
 800cff4:	461a      	mov	r2, r3
 800cff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cff8:	fb02 f303 	mul.w	r3, r2, r3
 800cffc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d004:	b29a      	uxth	r2, r3
 800d006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d008:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00c:	895b      	ldrh	r3, [r3, #10]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d008      	beq.n	800d024 <find_volume+0x224>
 800d012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d014:	895b      	ldrh	r3, [r3, #10]
 800d016:	461a      	mov	r2, r3
 800d018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01a:	895b      	ldrh	r3, [r3, #10]
 800d01c:	3b01      	subs	r3, #1
 800d01e:	4013      	ands	r3, r2
 800d020:	2b00      	cmp	r3, #0
 800d022:	d001      	beq.n	800d028 <find_volume+0x228>
 800d024:	230d      	movs	r3, #13
 800d026:	e12c      	b.n	800d282 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02a:	3330      	adds	r3, #48	; 0x30
 800d02c:	3311      	adds	r3, #17
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fe fcca 	bl	800b9c8 <ld_word>
 800d034:	4603      	mov	r3, r0
 800d036:	461a      	mov	r2, r3
 800d038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03e:	891b      	ldrh	r3, [r3, #8]
 800d040:	f003 030f 	and.w	r3, r3, #15
 800d044:	b29b      	uxth	r3, r3
 800d046:	2b00      	cmp	r3, #0
 800d048:	d001      	beq.n	800d04e <find_volume+0x24e>
 800d04a:	230d      	movs	r3, #13
 800d04c:	e119      	b.n	800d282 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d050:	3330      	adds	r3, #48	; 0x30
 800d052:	3313      	adds	r3, #19
 800d054:	4618      	mov	r0, r3
 800d056:	f7fe fcb7 	bl	800b9c8 <ld_word>
 800d05a:	4603      	mov	r3, r0
 800d05c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d05e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d060:	2b00      	cmp	r3, #0
 800d062:	d106      	bne.n	800d072 <find_volume+0x272>
 800d064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d066:	3330      	adds	r3, #48	; 0x30
 800d068:	3320      	adds	r3, #32
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe fcc4 	bl	800b9f8 <ld_dword>
 800d070:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d074:	3330      	adds	r3, #48	; 0x30
 800d076:	330e      	adds	r3, #14
 800d078:	4618      	mov	r0, r3
 800d07a:	f7fe fca5 	bl	800b9c8 <ld_word>
 800d07e:	4603      	mov	r3, r0
 800d080:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d082:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d084:	2b00      	cmp	r3, #0
 800d086:	d101      	bne.n	800d08c <find_volume+0x28c>
 800d088:	230d      	movs	r3, #13
 800d08a:	e0fa      	b.n	800d282 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d08c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d08e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d090:	4413      	add	r3, r2
 800d092:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d094:	8912      	ldrh	r2, [r2, #8]
 800d096:	0912      	lsrs	r2, r2, #4
 800d098:	b292      	uxth	r2, r2
 800d09a:	4413      	add	r3, r2
 800d09c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d09e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d204      	bcs.n	800d0b0 <find_volume+0x2b0>
 800d0a6:	230d      	movs	r3, #13
 800d0a8:	e0eb      	b.n	800d282 <find_volume+0x482>
 800d0aa:	bf00      	nop
 800d0ac:	20002858 	.word	0x20002858
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d0b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b4:	1ad3      	subs	r3, r2, r3
 800d0b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0b8:	8952      	ldrh	r2, [r2, #10]
 800d0ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0be:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d101      	bne.n	800d0ca <find_volume+0x2ca>
 800d0c6:	230d      	movs	r3, #13
 800d0c8:	e0db      	b.n	800d282 <find_volume+0x482>
		fmt = FS_FAT32;
 800d0ca:	2303      	movs	r3, #3
 800d0cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d802      	bhi.n	800d0e0 <find_volume+0x2e0>
 800d0da:	2302      	movs	r3, #2
 800d0dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d802      	bhi.n	800d0f0 <find_volume+0x2f0>
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f2:	1c9a      	adds	r2, r3, #2
 800d0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0fc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d0fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d102:	441a      	add	r2, r3
 800d104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d106:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d108:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10c:	441a      	add	r2, r3
 800d10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d110:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d112:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d116:	2b03      	cmp	r3, #3
 800d118:	d11e      	bne.n	800d158 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11c:	3330      	adds	r3, #48	; 0x30
 800d11e:	332a      	adds	r3, #42	; 0x2a
 800d120:	4618      	mov	r0, r3
 800d122:	f7fe fc51 	bl	800b9c8 <ld_word>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d001      	beq.n	800d130 <find_volume+0x330>
 800d12c:	230d      	movs	r3, #13
 800d12e:	e0a8      	b.n	800d282 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d132:	891b      	ldrh	r3, [r3, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d001      	beq.n	800d13c <find_volume+0x33c>
 800d138:	230d      	movs	r3, #13
 800d13a:	e0a2      	b.n	800d282 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13e:	3330      	adds	r3, #48	; 0x30
 800d140:	332c      	adds	r3, #44	; 0x2c
 800d142:	4618      	mov	r0, r3
 800d144:	f7fe fc58 	bl	800b9f8 <ld_dword>
 800d148:	4602      	mov	r2, r0
 800d14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d150:	695b      	ldr	r3, [r3, #20]
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	647b      	str	r3, [r7, #68]	; 0x44
 800d156:	e01f      	b.n	800d198 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15a:	891b      	ldrh	r3, [r3, #8]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d101      	bne.n	800d164 <find_volume+0x364>
 800d160:	230d      	movs	r3, #13
 800d162:	e08e      	b.n	800d282 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d166:	6a1a      	ldr	r2, [r3, #32]
 800d168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d16a:	441a      	add	r2, r3
 800d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d170:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d174:	2b02      	cmp	r3, #2
 800d176:	d103      	bne.n	800d180 <find_volume+0x380>
 800d178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17a:	695b      	ldr	r3, [r3, #20]
 800d17c:	005b      	lsls	r3, r3, #1
 800d17e:	e00a      	b.n	800d196 <find_volume+0x396>
 800d180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d182:	695a      	ldr	r2, [r3, #20]
 800d184:	4613      	mov	r3, r2
 800d186:	005b      	lsls	r3, r3, #1
 800d188:	4413      	add	r3, r2
 800d18a:	085a      	lsrs	r2, r3, #1
 800d18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18e:	695b      	ldr	r3, [r3, #20]
 800d190:	f003 0301 	and.w	r3, r3, #1
 800d194:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d196:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19a:	699a      	ldr	r2, [r3, #24]
 800d19c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d19e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d1a2:	0a5b      	lsrs	r3, r3, #9
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d201      	bcs.n	800d1ac <find_volume+0x3ac>
 800d1a8:	230d      	movs	r3, #13
 800d1aa:	e06a      	b.n	800d282 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1b2:	611a      	str	r2, [r3, #16]
 800d1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b6:	691a      	ldr	r2, [r3, #16]
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1be:	2280      	movs	r2, #128	; 0x80
 800d1c0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d1c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d1c6:	2b03      	cmp	r3, #3
 800d1c8:	d149      	bne.n	800d25e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1cc:	3330      	adds	r3, #48	; 0x30
 800d1ce:	3330      	adds	r3, #48	; 0x30
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7fe fbf9 	bl	800b9c8 <ld_word>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d140      	bne.n	800d25e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d1dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1de:	3301      	adds	r3, #1
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d1e4:	f7fe fea0 	bl	800bf28 <move_window>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d137      	bne.n	800d25e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f6:	3330      	adds	r3, #48	; 0x30
 800d1f8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7fe fbe3 	bl	800b9c8 <ld_word>
 800d202:	4603      	mov	r3, r0
 800d204:	461a      	mov	r2, r3
 800d206:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d127      	bne.n	800d25e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d210:	3330      	adds	r3, #48	; 0x30
 800d212:	4618      	mov	r0, r3
 800d214:	f7fe fbf0 	bl	800b9f8 <ld_dword>
 800d218:	4603      	mov	r3, r0
 800d21a:	4a1c      	ldr	r2, [pc, #112]	; (800d28c <find_volume+0x48c>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d11e      	bne.n	800d25e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d222:	3330      	adds	r3, #48	; 0x30
 800d224:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d228:	4618      	mov	r0, r3
 800d22a:	f7fe fbe5 	bl	800b9f8 <ld_dword>
 800d22e:	4603      	mov	r3, r0
 800d230:	4a17      	ldr	r2, [pc, #92]	; (800d290 <find_volume+0x490>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d113      	bne.n	800d25e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d238:	3330      	adds	r3, #48	; 0x30
 800d23a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d23e:	4618      	mov	r0, r3
 800d240:	f7fe fbda 	bl	800b9f8 <ld_dword>
 800d244:	4602      	mov	r2, r0
 800d246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d248:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d24c:	3330      	adds	r3, #48	; 0x30
 800d24e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d252:	4618      	mov	r0, r3
 800d254:	f7fe fbd0 	bl	800b9f8 <ld_dword>
 800d258:	4602      	mov	r2, r0
 800d25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d260:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d264:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d266:	4b0b      	ldr	r3, [pc, #44]	; (800d294 <find_volume+0x494>)
 800d268:	881b      	ldrh	r3, [r3, #0]
 800d26a:	3301      	adds	r3, #1
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	4b09      	ldr	r3, [pc, #36]	; (800d294 <find_volume+0x494>)
 800d270:	801a      	strh	r2, [r3, #0]
 800d272:	4b08      	ldr	r3, [pc, #32]	; (800d294 <find_volume+0x494>)
 800d274:	881a      	ldrh	r2, [r3, #0]
 800d276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d278:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d27a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d27c:	f7fe fdec 	bl	800be58 <clear_lock>
#endif
	return FR_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3758      	adds	r7, #88	; 0x58
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	41615252 	.word	0x41615252
 800d290:	61417272 	.word	0x61417272
 800d294:	2000285c 	.word	0x2000285c

0800d298 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d2a2:	2309      	movs	r3, #9
 800d2a4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d01c      	beq.n	800d2e6 <validate+0x4e>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d018      	beq.n	800d2e6 <validate+0x4e>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d013      	beq.n	800d2e6 <validate+0x4e>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	889a      	ldrh	r2, [r3, #4]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	88db      	ldrh	r3, [r3, #6]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d10c      	bne.n	800d2e6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	785b      	ldrb	r3, [r3, #1]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fe fada 	bl	800b88c <disk_status>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	f003 0301 	and.w	r3, r3, #1
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d101      	bne.n	800d2e6 <validate+0x4e>
			res = FR_OK;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d2e6:	7bfb      	ldrb	r3, [r7, #15]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d102      	bne.n	800d2f2 <validate+0x5a>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	e000      	b.n	800d2f4 <validate+0x5c>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	683a      	ldr	r2, [r7, #0]
 800d2f6:	6013      	str	r3, [r2, #0]
	return res;
 800d2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3710      	adds	r7, #16
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
	...

0800d304 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b088      	sub	sp, #32
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	4613      	mov	r3, r2
 800d310:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d316:	f107 0310 	add.w	r3, r7, #16
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7ff fcd5 	bl	800ccca <get_ldnumber>
 800d320:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	2b00      	cmp	r3, #0
 800d326:	da01      	bge.n	800d32c <f_mount+0x28>
 800d328:	230b      	movs	r3, #11
 800d32a:	e02b      	b.n	800d384 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d32c:	4a17      	ldr	r2, [pc, #92]	; (800d38c <f_mount+0x88>)
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d334:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d005      	beq.n	800d348 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d33c:	69b8      	ldr	r0, [r7, #24]
 800d33e:	f7fe fd8b 	bl	800be58 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d342:	69bb      	ldr	r3, [r7, #24]
 800d344:	2200      	movs	r2, #0
 800d346:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d002      	beq.n	800d354 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2200      	movs	r2, #0
 800d352:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	490d      	ldr	r1, [pc, #52]	; (800d38c <f_mount+0x88>)
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d002      	beq.n	800d36a <f_mount+0x66>
 800d364:	79fb      	ldrb	r3, [r7, #7]
 800d366:	2b01      	cmp	r3, #1
 800d368:	d001      	beq.n	800d36e <f_mount+0x6a>
 800d36a:	2300      	movs	r3, #0
 800d36c:	e00a      	b.n	800d384 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d36e:	f107 010c 	add.w	r1, r7, #12
 800d372:	f107 0308 	add.w	r3, r7, #8
 800d376:	2200      	movs	r2, #0
 800d378:	4618      	mov	r0, r3
 800d37a:	f7ff fd41 	bl	800ce00 <find_volume>
 800d37e:	4603      	mov	r3, r0
 800d380:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d382:	7dfb      	ldrb	r3, [r7, #23]
}
 800d384:	4618      	mov	r0, r3
 800d386:	3720      	adds	r7, #32
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	20002858 	.word	0x20002858

0800d390 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b098      	sub	sp, #96	; 0x60
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	4613      	mov	r3, r2
 800d39c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d101      	bne.n	800d3a8 <f_open+0x18>
 800d3a4:	2309      	movs	r3, #9
 800d3a6:	e1ad      	b.n	800d704 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d3a8:	79fb      	ldrb	r3, [r7, #7]
 800d3aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3ae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d3b0:	79fa      	ldrb	r2, [r7, #7]
 800d3b2:	f107 0110 	add.w	r1, r7, #16
 800d3b6:	f107 0308 	add.w	r3, r7, #8
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7ff fd20 	bl	800ce00 <find_volume>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d3c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	f040 8191 	bne.w	800d6f2 <f_open+0x362>
		dj.obj.fs = fs;
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d3d4:	68ba      	ldr	r2, [r7, #8]
 800d3d6:	f107 0314 	add.w	r3, r7, #20
 800d3da:	4611      	mov	r1, r2
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7ff fc03 	bl	800cbe8 <follow_path>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d3e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d11a      	bne.n	800d426 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d3f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d3f4:	b25b      	sxtb	r3, r3
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	da03      	bge.n	800d402 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d3fa:	2306      	movs	r3, #6
 800d3fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d400:	e011      	b.n	800d426 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d402:	79fb      	ldrb	r3, [r7, #7]
 800d404:	f023 0301 	bic.w	r3, r3, #1
 800d408:	2b00      	cmp	r3, #0
 800d40a:	bf14      	ite	ne
 800d40c:	2301      	movne	r3, #1
 800d40e:	2300      	moveq	r3, #0
 800d410:	b2db      	uxtb	r3, r3
 800d412:	461a      	mov	r2, r3
 800d414:	f107 0314 	add.w	r3, r7, #20
 800d418:	4611      	mov	r1, r2
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7fe fbd4 	bl	800bbc8 <chk_lock>
 800d420:	4603      	mov	r3, r0
 800d422:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d426:	79fb      	ldrb	r3, [r7, #7]
 800d428:	f003 031c 	and.w	r3, r3, #28
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d07f      	beq.n	800d530 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d430:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d434:	2b00      	cmp	r3, #0
 800d436:	d017      	beq.n	800d468 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d43c:	2b04      	cmp	r3, #4
 800d43e:	d10e      	bne.n	800d45e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d440:	f7fe fc1e 	bl	800bc80 <enq_lock>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d006      	beq.n	800d458 <f_open+0xc8>
 800d44a:	f107 0314 	add.w	r3, r7, #20
 800d44e:	4618      	mov	r0, r3
 800d450:	f7ff fb03 	bl	800ca5a <dir_register>
 800d454:	4603      	mov	r3, r0
 800d456:	e000      	b.n	800d45a <f_open+0xca>
 800d458:	2312      	movs	r3, #18
 800d45a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d45e:	79fb      	ldrb	r3, [r7, #7]
 800d460:	f043 0308 	orr.w	r3, r3, #8
 800d464:	71fb      	strb	r3, [r7, #7]
 800d466:	e010      	b.n	800d48a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d468:	7ebb      	ldrb	r3, [r7, #26]
 800d46a:	f003 0311 	and.w	r3, r3, #17
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d003      	beq.n	800d47a <f_open+0xea>
					res = FR_DENIED;
 800d472:	2307      	movs	r3, #7
 800d474:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d478:	e007      	b.n	800d48a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d47a:	79fb      	ldrb	r3, [r7, #7]
 800d47c:	f003 0304 	and.w	r3, r3, #4
 800d480:	2b00      	cmp	r3, #0
 800d482:	d002      	beq.n	800d48a <f_open+0xfa>
 800d484:	2308      	movs	r3, #8
 800d486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d48a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d168      	bne.n	800d564 <f_open+0x1d4>
 800d492:	79fb      	ldrb	r3, [r7, #7]
 800d494:	f003 0308 	and.w	r3, r3, #8
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d063      	beq.n	800d564 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d49c:	f7fb ffc8 	bl	8009430 <get_fattime>
 800d4a0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a4:	330e      	adds	r3, #14
 800d4a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7fe fae3 	bl	800ba74 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b0:	3316      	adds	r3, #22
 800d4b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7fe fadd 	bl	800ba74 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d4ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4bc:	330b      	adds	r3, #11
 800d4be:	2220      	movs	r2, #32
 800d4c0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4c6:	4611      	mov	r1, r2
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7ff fa32 	bl	800c932 <ld_clust>
 800d4ce:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7ff fa4a 	bl	800c970 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4de:	331c      	adds	r3, #28
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7fe fac6 	bl	800ba74 <st_dword>
					fs->wflag = 1;
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d4ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d037      	beq.n	800d564 <f_open+0x1d4>
						dw = fs->winsect;
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d4fa:	f107 0314 	add.w	r3, r7, #20
 800d4fe:	2200      	movs	r2, #0
 800d500:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d502:	4618      	mov	r0, r3
 800d504:	f7fe ff5d 	bl	800c3c2 <remove_chain>
 800d508:	4603      	mov	r3, r0
 800d50a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d50e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d512:	2b00      	cmp	r3, #0
 800d514:	d126      	bne.n	800d564 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7fe fd04 	bl	800bf28 <move_window>
 800d520:	4603      	mov	r3, r0
 800d522:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d52a:	3a01      	subs	r2, #1
 800d52c:	60da      	str	r2, [r3, #12]
 800d52e:	e019      	b.n	800d564 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d530:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d534:	2b00      	cmp	r3, #0
 800d536:	d115      	bne.n	800d564 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d538:	7ebb      	ldrb	r3, [r7, #26]
 800d53a:	f003 0310 	and.w	r3, r3, #16
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d003      	beq.n	800d54a <f_open+0x1ba>
					res = FR_NO_FILE;
 800d542:	2304      	movs	r3, #4
 800d544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d548:	e00c      	b.n	800d564 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d54a:	79fb      	ldrb	r3, [r7, #7]
 800d54c:	f003 0302 	and.w	r3, r3, #2
 800d550:	2b00      	cmp	r3, #0
 800d552:	d007      	beq.n	800d564 <f_open+0x1d4>
 800d554:	7ebb      	ldrb	r3, [r7, #26]
 800d556:	f003 0301 	and.w	r3, r3, #1
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d002      	beq.n	800d564 <f_open+0x1d4>
						res = FR_DENIED;
 800d55e:	2307      	movs	r3, #7
 800d560:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d564:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d128      	bne.n	800d5be <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d56c:	79fb      	ldrb	r3, [r7, #7]
 800d56e:	f003 0308 	and.w	r3, r3, #8
 800d572:	2b00      	cmp	r3, #0
 800d574:	d003      	beq.n	800d57e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d576:	79fb      	ldrb	r3, [r7, #7]
 800d578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d57c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d58c:	79fb      	ldrb	r3, [r7, #7]
 800d58e:	f023 0301 	bic.w	r3, r3, #1
 800d592:	2b00      	cmp	r3, #0
 800d594:	bf14      	ite	ne
 800d596:	2301      	movne	r3, #1
 800d598:	2300      	moveq	r3, #0
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	461a      	mov	r2, r3
 800d59e:	f107 0314 	add.w	r3, r7, #20
 800d5a2:	4611      	mov	r1, r2
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7fe fb8d 	bl	800bcc4 <inc_lock>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	691b      	ldr	r3, [r3, #16]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d102      	bne.n	800d5be <f_open+0x22e>
 800d5b8:	2302      	movs	r3, #2
 800d5ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d5be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	f040 8095 	bne.w	800d6f2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5cc:	4611      	mov	r1, r2
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7ff f9af 	bl	800c932 <ld_clust>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5dc:	331c      	adds	r3, #28
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7fe fa0a 	bl	800b9f8 <ld_dword>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d5f0:	693a      	ldr	r2, [r7, #16]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	88da      	ldrh	r2, [r3, #6]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	79fa      	ldrb	r2, [r7, #7]
 800d602:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2200      	movs	r2, #0
 800d608:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2200      	movs	r2, #0
 800d60e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2200      	movs	r2, #0
 800d614:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	3330      	adds	r3, #48	; 0x30
 800d61a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d61e:	2100      	movs	r1, #0
 800d620:	4618      	mov	r0, r3
 800d622:	f7fe fa74 	bl	800bb0e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d626:	79fb      	ldrb	r3, [r7, #7]
 800d628:	f003 0320 	and.w	r3, r3, #32
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d060      	beq.n	800d6f2 <f_open+0x362>
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d05c      	beq.n	800d6f2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	68da      	ldr	r2, [r3, #12]
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	895b      	ldrh	r3, [r3, #10]
 800d644:	025b      	lsls	r3, r3, #9
 800d646:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	657b      	str	r3, [r7, #84]	; 0x54
 800d654:	e016      	b.n	800d684 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fe fd1f 	bl	800c09e <get_fat>
 800d660:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d664:	2b01      	cmp	r3, #1
 800d666:	d802      	bhi.n	800d66e <f_open+0x2de>
 800d668:	2302      	movs	r3, #2
 800d66a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d66e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d674:	d102      	bne.n	800d67c <f_open+0x2ec>
 800d676:	2301      	movs	r3, #1
 800d678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d67c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d67e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	657b      	str	r3, [r7, #84]	; 0x54
 800d684:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d103      	bne.n	800d694 <f_open+0x304>
 800d68c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d68e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d690:	429a      	cmp	r2, r3
 800d692:	d8e0      	bhi.n	800d656 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d698:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d69a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d127      	bne.n	800d6f2 <f_open+0x362>
 800d6a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d022      	beq.n	800d6f2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fe fcd5 	bl	800c060 <clust2sect>
 800d6b6:	6478      	str	r0, [r7, #68]	; 0x44
 800d6b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d103      	bne.n	800d6c6 <f_open+0x336>
						res = FR_INT_ERR;
 800d6be:	2302      	movs	r3, #2
 800d6c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d6c4:	e015      	b.n	800d6f2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d6c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6c8:	0a5a      	lsrs	r2, r3, #9
 800d6ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6cc:	441a      	add	r2, r3
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	7858      	ldrb	r0, [r3, #1]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6a1a      	ldr	r2, [r3, #32]
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	f7fe f913 	bl	800b90c <disk_read>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d002      	beq.n	800d6f2 <f_open+0x362>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d6f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d002      	beq.n	800d700 <f_open+0x370>
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d704:	4618      	mov	r0, r3
 800d706:	3760      	adds	r7, #96	; 0x60
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b08c      	sub	sp, #48	; 0x30
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
 800d718:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	2200      	movs	r2, #0
 800d722:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f107 0210 	add.w	r2, r7, #16
 800d72a:	4611      	mov	r1, r2
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7ff fdb3 	bl	800d298 <validate>
 800d732:	4603      	mov	r3, r0
 800d734:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d738:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d107      	bne.n	800d750 <f_write+0x44>
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	7d5b      	ldrb	r3, [r3, #21]
 800d744:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d002      	beq.n	800d756 <f_write+0x4a>
 800d750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d754:	e14b      	b.n	800d9ee <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	7d1b      	ldrb	r3, [r3, #20]
 800d75a:	f003 0302 	and.w	r3, r3, #2
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d101      	bne.n	800d766 <f_write+0x5a>
 800d762:	2307      	movs	r3, #7
 800d764:	e143      	b.n	800d9ee <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	699a      	ldr	r2, [r3, #24]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	441a      	add	r2, r3
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	699b      	ldr	r3, [r3, #24]
 800d772:	429a      	cmp	r2, r3
 800d774:	f080 812d 	bcs.w	800d9d2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	699b      	ldr	r3, [r3, #24]
 800d77c:	43db      	mvns	r3, r3
 800d77e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d780:	e127      	b.n	800d9d2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	699b      	ldr	r3, [r3, #24]
 800d786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f040 80e3 	bne.w	800d956 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	699b      	ldr	r3, [r3, #24]
 800d794:	0a5b      	lsrs	r3, r3, #9
 800d796:	693a      	ldr	r2, [r7, #16]
 800d798:	8952      	ldrh	r2, [r2, #10]
 800d79a:	3a01      	subs	r2, #1
 800d79c:	4013      	ands	r3, r2
 800d79e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d143      	bne.n	800d82e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	699b      	ldr	r3, [r3, #24]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d10c      	bne.n	800d7c8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	689b      	ldr	r3, [r3, #8]
 800d7b2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d11a      	bne.n	800d7f0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2100      	movs	r1, #0
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fe fe64 	bl	800c48c <create_chain>
 800d7c4:	62b8      	str	r0, [r7, #40]	; 0x28
 800d7c6:	e013      	b.n	800d7f0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d007      	beq.n	800d7e0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	699b      	ldr	r3, [r3, #24]
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f7fe fef0 	bl	800c5bc <clmt_clust>
 800d7dc:	62b8      	str	r0, [r7, #40]	; 0x28
 800d7de:	e007      	b.n	800d7f0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d7e0:	68fa      	ldr	r2, [r7, #12]
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	69db      	ldr	r3, [r3, #28]
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	4610      	mov	r0, r2
 800d7ea:	f7fe fe4f 	bl	800c48c <create_chain>
 800d7ee:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f000 80f2 	beq.w	800d9dc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d104      	bne.n	800d808 <f_write+0xfc>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2202      	movs	r2, #2
 800d802:	755a      	strb	r2, [r3, #21]
 800d804:	2302      	movs	r3, #2
 800d806:	e0f2      	b.n	800d9ee <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d80e:	d104      	bne.n	800d81a <f_write+0x10e>
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2201      	movs	r2, #1
 800d814:	755a      	strb	r2, [r3, #21]
 800d816:	2301      	movs	r3, #1
 800d818:	e0e9      	b.n	800d9ee <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d81e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	689b      	ldr	r3, [r3, #8]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d102      	bne.n	800d82e <f_write+0x122>
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d82c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	7d1b      	ldrb	r3, [r3, #20]
 800d832:	b25b      	sxtb	r3, r3
 800d834:	2b00      	cmp	r3, #0
 800d836:	da18      	bge.n	800d86a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	7858      	ldrb	r0, [r3, #1]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	6a1a      	ldr	r2, [r3, #32]
 800d846:	2301      	movs	r3, #1
 800d848:	f7fe f880 	bl	800b94c <disk_write>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d004      	beq.n	800d85c <f_write+0x150>
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2201      	movs	r2, #1
 800d856:	755a      	strb	r2, [r3, #21]
 800d858:	2301      	movs	r3, #1
 800d85a:	e0c8      	b.n	800d9ee <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	7d1b      	ldrb	r3, [r3, #20]
 800d860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d864:	b2da      	uxtb	r2, r3
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d86a:	693a      	ldr	r2, [r7, #16]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	69db      	ldr	r3, [r3, #28]
 800d870:	4619      	mov	r1, r3
 800d872:	4610      	mov	r0, r2
 800d874:	f7fe fbf4 	bl	800c060 <clust2sect>
 800d878:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d104      	bne.n	800d88a <f_write+0x17e>
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2202      	movs	r2, #2
 800d884:	755a      	strb	r2, [r3, #21]
 800d886:	2302      	movs	r3, #2
 800d888:	e0b1      	b.n	800d9ee <f_write+0x2e2>
			sect += csect;
 800d88a:	697a      	ldr	r2, [r7, #20]
 800d88c:	69bb      	ldr	r3, [r7, #24]
 800d88e:	4413      	add	r3, r2
 800d890:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	0a5b      	lsrs	r3, r3, #9
 800d896:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d898:	6a3b      	ldr	r3, [r7, #32]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d03c      	beq.n	800d918 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d89e:	69ba      	ldr	r2, [r7, #24]
 800d8a0:	6a3b      	ldr	r3, [r7, #32]
 800d8a2:	4413      	add	r3, r2
 800d8a4:	693a      	ldr	r2, [r7, #16]
 800d8a6:	8952      	ldrh	r2, [r2, #10]
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d905      	bls.n	800d8b8 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	895b      	ldrh	r3, [r3, #10]
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	7858      	ldrb	r0, [r3, #1]
 800d8bc:	6a3b      	ldr	r3, [r7, #32]
 800d8be:	697a      	ldr	r2, [r7, #20]
 800d8c0:	69f9      	ldr	r1, [r7, #28]
 800d8c2:	f7fe f843 	bl	800b94c <disk_write>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d004      	beq.n	800d8d6 <f_write+0x1ca>
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	755a      	strb	r2, [r3, #21]
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e08b      	b.n	800d9ee <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	6a1a      	ldr	r2, [r3, #32]
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	1ad3      	subs	r3, r2, r3
 800d8de:	6a3a      	ldr	r2, [r7, #32]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d915      	bls.n	800d910 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	6a1a      	ldr	r2, [r3, #32]
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	1ad3      	subs	r3, r2, r3
 800d8f2:	025b      	lsls	r3, r3, #9
 800d8f4:	69fa      	ldr	r2, [r7, #28]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	f7fe f8e5 	bl	800bacc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	7d1b      	ldrb	r3, [r3, #20]
 800d906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d90a:	b2da      	uxtb	r2, r3
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d910:	6a3b      	ldr	r3, [r7, #32]
 800d912:	025b      	lsls	r3, r3, #9
 800d914:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d916:	e03f      	b.n	800d998 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	6a1b      	ldr	r3, [r3, #32]
 800d91c:	697a      	ldr	r2, [r7, #20]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d016      	beq.n	800d950 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	699a      	ldr	r2, [r3, #24]
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d210      	bcs.n	800d950 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	7858      	ldrb	r0, [r3, #1]
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d938:	2301      	movs	r3, #1
 800d93a:	697a      	ldr	r2, [r7, #20]
 800d93c:	f7fd ffe6 	bl	800b90c <disk_read>
 800d940:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d942:	2b00      	cmp	r3, #0
 800d944:	d004      	beq.n	800d950 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2201      	movs	r2, #1
 800d94a:	755a      	strb	r2, [r3, #21]
 800d94c:	2301      	movs	r3, #1
 800d94e:	e04e      	b.n	800d9ee <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	697a      	ldr	r2, [r7, #20]
 800d954:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	699b      	ldr	r3, [r3, #24]
 800d95a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d95e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d962:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d901      	bls.n	800d970 <f_write+0x264>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	699b      	ldr	r3, [r3, #24]
 800d97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d97e:	4413      	add	r3, r2
 800d980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d982:	69f9      	ldr	r1, [r7, #28]
 800d984:	4618      	mov	r0, r3
 800d986:	f7fe f8a1 	bl	800bacc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	7d1b      	ldrb	r3, [r3, #20]
 800d98e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d992:	b2da      	uxtb	r2, r3
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d998:	69fa      	ldr	r2, [r7, #28]
 800d99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99c:	4413      	add	r3, r2
 800d99e:	61fb      	str	r3, [r7, #28]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	699a      	ldr	r2, [r3, #24]
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a6:	441a      	add	r2, r3
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	619a      	str	r2, [r3, #24]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	68da      	ldr	r2, [r3, #12]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	699b      	ldr	r3, [r3, #24]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	bf38      	it	cc
 800d9b8:	461a      	movcc	r2, r3
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	60da      	str	r2, [r3, #12]
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c4:	441a      	add	r2, r3
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	601a      	str	r2, [r3, #0]
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ce:	1ad3      	subs	r3, r2, r3
 800d9d0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	f47f aed4 	bne.w	800d782 <f_write+0x76>
 800d9da:	e000      	b.n	800d9de <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d9dc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	7d1b      	ldrb	r3, [r3, #20]
 800d9e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9e6:	b2da      	uxtb	r2, r3
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d9ec:	2300      	movs	r3, #0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3730      	adds	r7, #48	; 0x30
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b086      	sub	sp, #24
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f107 0208 	add.w	r2, r7, #8
 800da04:	4611      	mov	r1, r2
 800da06:	4618      	mov	r0, r3
 800da08:	f7ff fc46 	bl	800d298 <validate>
 800da0c:	4603      	mov	r3, r0
 800da0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800da10:	7dfb      	ldrb	r3, [r7, #23]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d168      	bne.n	800dae8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	7d1b      	ldrb	r3, [r3, #20]
 800da1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d062      	beq.n	800dae8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	7d1b      	ldrb	r3, [r3, #20]
 800da26:	b25b      	sxtb	r3, r3
 800da28:	2b00      	cmp	r3, #0
 800da2a:	da15      	bge.n	800da58 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	7858      	ldrb	r0, [r3, #1]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a1a      	ldr	r2, [r3, #32]
 800da3a:	2301      	movs	r3, #1
 800da3c:	f7fd ff86 	bl	800b94c <disk_write>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d001      	beq.n	800da4a <f_sync+0x54>
 800da46:	2301      	movs	r3, #1
 800da48:	e04f      	b.n	800daea <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	7d1b      	ldrb	r3, [r3, #20]
 800da4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da52:	b2da      	uxtb	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800da58:	f7fb fcea 	bl	8009430 <get_fattime>
 800da5c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800da5e:	68ba      	ldr	r2, [r7, #8]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da64:	4619      	mov	r1, r3
 800da66:	4610      	mov	r0, r2
 800da68:	f7fe fa5e 	bl	800bf28 <move_window>
 800da6c:	4603      	mov	r3, r0
 800da6e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800da70:	7dfb      	ldrb	r3, [r7, #23]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d138      	bne.n	800dae8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da7a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	330b      	adds	r3, #11
 800da80:	781a      	ldrb	r2, [r3, #0]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	330b      	adds	r3, #11
 800da86:	f042 0220 	orr.w	r2, r2, #32
 800da8a:	b2d2      	uxtb	r2, r2
 800da8c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6818      	ldr	r0, [r3, #0]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	689b      	ldr	r3, [r3, #8]
 800da96:	461a      	mov	r2, r3
 800da98:	68f9      	ldr	r1, [r7, #12]
 800da9a:	f7fe ff69 	bl	800c970 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f103 021c 	add.w	r2, r3, #28
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	4619      	mov	r1, r3
 800daaa:	4610      	mov	r0, r2
 800daac:	f7fd ffe2 	bl	800ba74 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	3316      	adds	r3, #22
 800dab4:	6939      	ldr	r1, [r7, #16]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7fd ffdc 	bl	800ba74 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	3312      	adds	r3, #18
 800dac0:	2100      	movs	r1, #0
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7fd ffbb 	bl	800ba3e <st_word>
					fs->wflag = 1;
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	2201      	movs	r2, #1
 800dacc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7fe fa57 	bl	800bf84 <sync_fs>
 800dad6:	4603      	mov	r3, r0
 800dad8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	7d1b      	ldrb	r3, [r3, #20]
 800dade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dae2:	b2da      	uxtb	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dae8:	7dfb      	ldrb	r3, [r7, #23]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3718      	adds	r7, #24
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b084      	sub	sp, #16
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f7ff ff7b 	bl	800d9f6 <f_sync>
 800db00:	4603      	mov	r3, r0
 800db02:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800db04:	7bfb      	ldrb	r3, [r7, #15]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d118      	bne.n	800db3c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f107 0208 	add.w	r2, r7, #8
 800db10:	4611      	mov	r1, r2
 800db12:	4618      	mov	r0, r3
 800db14:	f7ff fbc0 	bl	800d298 <validate>
 800db18:	4603      	mov	r3, r0
 800db1a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800db1c:	7bfb      	ldrb	r3, [r7, #15]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d10c      	bne.n	800db3c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	691b      	ldr	r3, [r3, #16]
 800db26:	4618      	mov	r0, r3
 800db28:	f7fe f95a 	bl	800bde0 <dec_lock>
 800db2c:	4603      	mov	r3, r0
 800db2e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800db30:	7bfb      	ldrb	r3, [r7, #15]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d102      	bne.n	800db3c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2200      	movs	r2, #0
 800db3a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800db3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3710      	adds	r7, #16
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
	...

0800db48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800db48:	b480      	push	{r7}
 800db4a:	b087      	sub	sp, #28
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	60f8      	str	r0, [r7, #12]
 800db50:	60b9      	str	r1, [r7, #8]
 800db52:	4613      	mov	r3, r2
 800db54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800db56:	2301      	movs	r3, #1
 800db58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800db5a:	2300      	movs	r3, #0
 800db5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800db5e:	4b1f      	ldr	r3, [pc, #124]	; (800dbdc <FATFS_LinkDriverEx+0x94>)
 800db60:	7a5b      	ldrb	r3, [r3, #9]
 800db62:	b2db      	uxtb	r3, r3
 800db64:	2b00      	cmp	r3, #0
 800db66:	d131      	bne.n	800dbcc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800db68:	4b1c      	ldr	r3, [pc, #112]	; (800dbdc <FATFS_LinkDriverEx+0x94>)
 800db6a:	7a5b      	ldrb	r3, [r3, #9]
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	461a      	mov	r2, r3
 800db70:	4b1a      	ldr	r3, [pc, #104]	; (800dbdc <FATFS_LinkDriverEx+0x94>)
 800db72:	2100      	movs	r1, #0
 800db74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800db76:	4b19      	ldr	r3, [pc, #100]	; (800dbdc <FATFS_LinkDriverEx+0x94>)
 800db78:	7a5b      	ldrb	r3, [r3, #9]
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	4a17      	ldr	r2, [pc, #92]	; (800dbdc <FATFS_LinkDriverEx+0x94>)
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	4413      	add	r3, r2
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800db86:	4b15      	ldr	r3, [pc, #84]	; (800dbdc <FATFS_LinkDriverEx+0x94>)
 800db88:	7a5b      	ldrb	r3, [r3, #9]
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	461a      	mov	r2, r3
 800db8e:	4b13      	ldr	r3, [pc, #76]	; (800dbdc <FATFS_LinkDriverEx+0x94>)
 800db90:	4413      	add	r3, r2
 800db92:	79fa      	ldrb	r2, [r7, #7]
 800db94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800db96:	4b11      	ldr	r3, [pc, #68]	; (800dbdc <FATFS_LinkDriverEx+0x94>)
 800db98:	7a5b      	ldrb	r3, [r3, #9]
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	1c5a      	adds	r2, r3, #1
 800db9e:	b2d1      	uxtb	r1, r2
 800dba0:	4a0e      	ldr	r2, [pc, #56]	; (800dbdc <FATFS_LinkDriverEx+0x94>)
 800dba2:	7251      	strb	r1, [r2, #9]
 800dba4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dba6:	7dbb      	ldrb	r3, [r7, #22]
 800dba8:	3330      	adds	r3, #48	; 0x30
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	223a      	movs	r2, #58	; 0x3a
 800dbb6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	3302      	adds	r3, #2
 800dbbc:	222f      	movs	r2, #47	; 0x2f
 800dbbe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	3303      	adds	r3, #3
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dbcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	371c      	adds	r7, #28
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr
 800dbda:	bf00      	nop
 800dbdc:	20002880 	.word	0x20002880

0800dbe0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dbea:	2200      	movs	r2, #0
 800dbec:	6839      	ldr	r1, [r7, #0]
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f7ff ffaa 	bl	800db48 <FATFS_LinkDriverEx>
 800dbf4:	4603      	mov	r3, r0
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3708      	adds	r7, #8
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
	...

0800dc00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dc04:	2200      	movs	r2, #0
 800dc06:	4912      	ldr	r1, [pc, #72]	; (800dc50 <MX_USB_DEVICE_Init+0x50>)
 800dc08:	4812      	ldr	r0, [pc, #72]	; (800dc54 <MX_USB_DEVICE_Init+0x54>)
 800dc0a:	f7fc fb23 	bl	800a254 <USBD_Init>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d001      	beq.n	800dc18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dc14:	f7f3 f8e0 	bl	8000dd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dc18:	490f      	ldr	r1, [pc, #60]	; (800dc58 <MX_USB_DEVICE_Init+0x58>)
 800dc1a:	480e      	ldr	r0, [pc, #56]	; (800dc54 <MX_USB_DEVICE_Init+0x54>)
 800dc1c:	f7fc fb4a 	bl	800a2b4 <USBD_RegisterClass>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d001      	beq.n	800dc2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dc26:	f7f3 f8d7 	bl	8000dd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dc2a:	490c      	ldr	r1, [pc, #48]	; (800dc5c <MX_USB_DEVICE_Init+0x5c>)
 800dc2c:	4809      	ldr	r0, [pc, #36]	; (800dc54 <MX_USB_DEVICE_Init+0x54>)
 800dc2e:	f7fc fa41 	bl	800a0b4 <USBD_CDC_RegisterInterface>
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d001      	beq.n	800dc3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dc38:	f7f3 f8ce 	bl	8000dd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dc3c:	4805      	ldr	r0, [pc, #20]	; (800dc54 <MX_USB_DEVICE_Init+0x54>)
 800dc3e:	f7fc fb6f 	bl	800a320 <USBD_Start>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d001      	beq.n	800dc4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dc48:	f7f3 f8c6 	bl	8000dd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dc4c:	bf00      	nop
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	200000ac 	.word	0x200000ac
 800dc54:	2000288c 	.word	0x2000288c
 800dc58:	20000018 	.word	0x20000018
 800dc5c:	20000098 	.word	0x20000098

0800dc60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dc64:	2200      	movs	r2, #0
 800dc66:	4905      	ldr	r1, [pc, #20]	; (800dc7c <CDC_Init_FS+0x1c>)
 800dc68:	4805      	ldr	r0, [pc, #20]	; (800dc80 <CDC_Init_FS+0x20>)
 800dc6a:	f7fc fa3d 	bl	800a0e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dc6e:	4905      	ldr	r1, [pc, #20]	; (800dc84 <CDC_Init_FS+0x24>)
 800dc70:	4803      	ldr	r0, [pc, #12]	; (800dc80 <CDC_Init_FS+0x20>)
 800dc72:	f7fc fa5b 	bl	800a12c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dc76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	20003368 	.word	0x20003368
 800dc80:	2000288c 	.word	0x2000288c
 800dc84:	20002b68 	.word	0x20002b68

0800dc88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dc8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b083      	sub	sp, #12
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	4603      	mov	r3, r0
 800dca0:	6039      	str	r1, [r7, #0]
 800dca2:	71fb      	strb	r3, [r7, #7]
 800dca4:	4613      	mov	r3, r2
 800dca6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dca8:	79fb      	ldrb	r3, [r7, #7]
 800dcaa:	2b23      	cmp	r3, #35	; 0x23
 800dcac:	d84a      	bhi.n	800dd44 <CDC_Control_FS+0xac>
 800dcae:	a201      	add	r2, pc, #4	; (adr r2, 800dcb4 <CDC_Control_FS+0x1c>)
 800dcb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb4:	0800dd45 	.word	0x0800dd45
 800dcb8:	0800dd45 	.word	0x0800dd45
 800dcbc:	0800dd45 	.word	0x0800dd45
 800dcc0:	0800dd45 	.word	0x0800dd45
 800dcc4:	0800dd45 	.word	0x0800dd45
 800dcc8:	0800dd45 	.word	0x0800dd45
 800dccc:	0800dd45 	.word	0x0800dd45
 800dcd0:	0800dd45 	.word	0x0800dd45
 800dcd4:	0800dd45 	.word	0x0800dd45
 800dcd8:	0800dd45 	.word	0x0800dd45
 800dcdc:	0800dd45 	.word	0x0800dd45
 800dce0:	0800dd45 	.word	0x0800dd45
 800dce4:	0800dd45 	.word	0x0800dd45
 800dce8:	0800dd45 	.word	0x0800dd45
 800dcec:	0800dd45 	.word	0x0800dd45
 800dcf0:	0800dd45 	.word	0x0800dd45
 800dcf4:	0800dd45 	.word	0x0800dd45
 800dcf8:	0800dd45 	.word	0x0800dd45
 800dcfc:	0800dd45 	.word	0x0800dd45
 800dd00:	0800dd45 	.word	0x0800dd45
 800dd04:	0800dd45 	.word	0x0800dd45
 800dd08:	0800dd45 	.word	0x0800dd45
 800dd0c:	0800dd45 	.word	0x0800dd45
 800dd10:	0800dd45 	.word	0x0800dd45
 800dd14:	0800dd45 	.word	0x0800dd45
 800dd18:	0800dd45 	.word	0x0800dd45
 800dd1c:	0800dd45 	.word	0x0800dd45
 800dd20:	0800dd45 	.word	0x0800dd45
 800dd24:	0800dd45 	.word	0x0800dd45
 800dd28:	0800dd45 	.word	0x0800dd45
 800dd2c:	0800dd45 	.word	0x0800dd45
 800dd30:	0800dd45 	.word	0x0800dd45
 800dd34:	0800dd45 	.word	0x0800dd45
 800dd38:	0800dd45 	.word	0x0800dd45
 800dd3c:	0800dd45 	.word	0x0800dd45
 800dd40:	0800dd45 	.word	0x0800dd45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dd44:	bf00      	nop
  }

  return (USBD_OK);
 800dd46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	370c      	adds	r7, #12
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr

0800dd54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dd5e:	6879      	ldr	r1, [r7, #4]
 800dd60:	4805      	ldr	r0, [pc, #20]	; (800dd78 <CDC_Receive_FS+0x24>)
 800dd62:	f7fc f9e3 	bl	800a12c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dd66:	4804      	ldr	r0, [pc, #16]	; (800dd78 <CDC_Receive_FS+0x24>)
 800dd68:	f7fc fa3e 	bl	800a1e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dd6c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	2000288c 	.word	0x2000288c

0800dd7c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	460b      	mov	r3, r1
 800dd86:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dd8c:	4b0d      	ldr	r3, [pc, #52]	; (800ddc4 <CDC_Transmit_FS+0x48>)
 800dd8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd92:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d001      	beq.n	800dda2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dd9e:	2301      	movs	r3, #1
 800dda0:	e00b      	b.n	800ddba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dda2:	887b      	ldrh	r3, [r7, #2]
 800dda4:	461a      	mov	r2, r3
 800dda6:	6879      	ldr	r1, [r7, #4]
 800dda8:	4806      	ldr	r0, [pc, #24]	; (800ddc4 <CDC_Transmit_FS+0x48>)
 800ddaa:	f7fc f99d 	bl	800a0e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ddae:	4805      	ldr	r0, [pc, #20]	; (800ddc4 <CDC_Transmit_FS+0x48>)
 800ddb0:	f7fc f9da 	bl	800a168 <USBD_CDC_TransmitPacket>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ddb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3710      	adds	r7, #16
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	2000288c 	.word	0x2000288c

0800ddc8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b087      	sub	sp, #28
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	4613      	mov	r3, r2
 800ddd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ddda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	371c      	adds	r7, #28
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr
	...

0800ddec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	6039      	str	r1, [r7, #0]
 800ddf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	2212      	movs	r2, #18
 800ddfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ddfe:	4b03      	ldr	r3, [pc, #12]	; (800de0c <USBD_FS_DeviceDescriptor+0x20>)
}
 800de00:	4618      	mov	r0, r3
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr
 800de0c:	200000cc 	.word	0x200000cc

0800de10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
 800de16:	4603      	mov	r3, r0
 800de18:	6039      	str	r1, [r7, #0]
 800de1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	2204      	movs	r2, #4
 800de20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800de22:	4b03      	ldr	r3, [pc, #12]	; (800de30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800de24:	4618      	mov	r0, r3
 800de26:	370c      	adds	r7, #12
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr
 800de30:	200000ec 	.word	0x200000ec

0800de34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	4603      	mov	r3, r0
 800de3c:	6039      	str	r1, [r7, #0]
 800de3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de40:	79fb      	ldrb	r3, [r7, #7]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d105      	bne.n	800de52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800de46:	683a      	ldr	r2, [r7, #0]
 800de48:	4907      	ldr	r1, [pc, #28]	; (800de68 <USBD_FS_ProductStrDescriptor+0x34>)
 800de4a:	4808      	ldr	r0, [pc, #32]	; (800de6c <USBD_FS_ProductStrDescriptor+0x38>)
 800de4c:	f7fd fc3e 	bl	800b6cc <USBD_GetString>
 800de50:	e004      	b.n	800de5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800de52:	683a      	ldr	r2, [r7, #0]
 800de54:	4904      	ldr	r1, [pc, #16]	; (800de68 <USBD_FS_ProductStrDescriptor+0x34>)
 800de56:	4805      	ldr	r0, [pc, #20]	; (800de6c <USBD_FS_ProductStrDescriptor+0x38>)
 800de58:	f7fd fc38 	bl	800b6cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800de5c:	4b02      	ldr	r3, [pc, #8]	; (800de68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3708      	adds	r7, #8
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	20003b68 	.word	0x20003b68
 800de6c:	0800fbcc 	.word	0x0800fbcc

0800de70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	4603      	mov	r3, r0
 800de78:	6039      	str	r1, [r7, #0]
 800de7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800de7c:	683a      	ldr	r2, [r7, #0]
 800de7e:	4904      	ldr	r1, [pc, #16]	; (800de90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800de80:	4804      	ldr	r0, [pc, #16]	; (800de94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800de82:	f7fd fc23 	bl	800b6cc <USBD_GetString>
  return USBD_StrDesc;
 800de86:	4b02      	ldr	r3, [pc, #8]	; (800de90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	20003b68 	.word	0x20003b68
 800de94:	0800fbe4 	.word	0x0800fbe4

0800de98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	4603      	mov	r3, r0
 800dea0:	6039      	str	r1, [r7, #0]
 800dea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	221a      	movs	r2, #26
 800dea8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800deaa:	f000 f855 	bl	800df58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800deae:	4b02      	ldr	r3, [pc, #8]	; (800deb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	200000f0 	.word	0x200000f0

0800debc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	4603      	mov	r3, r0
 800dec4:	6039      	str	r1, [r7, #0]
 800dec6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dec8:	79fb      	ldrb	r3, [r7, #7]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d105      	bne.n	800deda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dece:	683a      	ldr	r2, [r7, #0]
 800ded0:	4907      	ldr	r1, [pc, #28]	; (800def0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ded2:	4808      	ldr	r0, [pc, #32]	; (800def4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ded4:	f7fd fbfa 	bl	800b6cc <USBD_GetString>
 800ded8:	e004      	b.n	800dee4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800deda:	683a      	ldr	r2, [r7, #0]
 800dedc:	4904      	ldr	r1, [pc, #16]	; (800def0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dede:	4805      	ldr	r0, [pc, #20]	; (800def4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dee0:	f7fd fbf4 	bl	800b6cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800dee4:	4b02      	ldr	r3, [pc, #8]	; (800def0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3708      	adds	r7, #8
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	20003b68 	.word	0x20003b68
 800def4:	0800fbf8 	.word	0x0800fbf8

0800def8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	4603      	mov	r3, r0
 800df00:	6039      	str	r1, [r7, #0]
 800df02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800df04:	79fb      	ldrb	r3, [r7, #7]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d105      	bne.n	800df16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800df0a:	683a      	ldr	r2, [r7, #0]
 800df0c:	4907      	ldr	r1, [pc, #28]	; (800df2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800df0e:	4808      	ldr	r0, [pc, #32]	; (800df30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800df10:	f7fd fbdc 	bl	800b6cc <USBD_GetString>
 800df14:	e004      	b.n	800df20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800df16:	683a      	ldr	r2, [r7, #0]
 800df18:	4904      	ldr	r1, [pc, #16]	; (800df2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800df1a:	4805      	ldr	r0, [pc, #20]	; (800df30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800df1c:	f7fd fbd6 	bl	800b6cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800df20:	4b02      	ldr	r3, [pc, #8]	; (800df2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800df22:	4618      	mov	r0, r3
 800df24:	3708      	adds	r7, #8
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	20003b68 	.word	0x20003b68
 800df30:	0800fc04 	.word	0x0800fc04

0800df34 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
 800df3a:	4603      	mov	r3, r0
 800df3c:	6039      	str	r1, [r7, #0]
 800df3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	220c      	movs	r2, #12
 800df44:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800df46:	4b03      	ldr	r3, [pc, #12]	; (800df54 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800df48:	4618      	mov	r0, r3
 800df4a:	370c      	adds	r7, #12
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr
 800df54:	200000e0 	.word	0x200000e0

0800df58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800df5e:	4b0f      	ldr	r3, [pc, #60]	; (800df9c <Get_SerialNum+0x44>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800df64:	4b0e      	ldr	r3, [pc, #56]	; (800dfa0 <Get_SerialNum+0x48>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800df6a:	4b0e      	ldr	r3, [pc, #56]	; (800dfa4 <Get_SerialNum+0x4c>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800df70:	68fa      	ldr	r2, [r7, #12]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	4413      	add	r3, r2
 800df76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d009      	beq.n	800df92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800df7e:	2208      	movs	r2, #8
 800df80:	4909      	ldr	r1, [pc, #36]	; (800dfa8 <Get_SerialNum+0x50>)
 800df82:	68f8      	ldr	r0, [r7, #12]
 800df84:	f000 f814 	bl	800dfb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800df88:	2204      	movs	r2, #4
 800df8a:	4908      	ldr	r1, [pc, #32]	; (800dfac <Get_SerialNum+0x54>)
 800df8c:	68b8      	ldr	r0, [r7, #8]
 800df8e:	f000 f80f 	bl	800dfb0 <IntToUnicode>
  }
}
 800df92:	bf00      	nop
 800df94:	3710      	adds	r7, #16
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	1ff0f420 	.word	0x1ff0f420
 800dfa0:	1ff0f424 	.word	0x1ff0f424
 800dfa4:	1ff0f428 	.word	0x1ff0f428
 800dfa8:	200000f2 	.word	0x200000f2
 800dfac:	20000102 	.word	0x20000102

0800dfb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b087      	sub	sp, #28
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	60f8      	str	r0, [r7, #12]
 800dfb8:	60b9      	str	r1, [r7, #8]
 800dfba:	4613      	mov	r3, r2
 800dfbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	75fb      	strb	r3, [r7, #23]
 800dfc6:	e027      	b.n	800e018 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	0f1b      	lsrs	r3, r3, #28
 800dfcc:	2b09      	cmp	r3, #9
 800dfce:	d80b      	bhi.n	800dfe8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	0f1b      	lsrs	r3, r3, #28
 800dfd4:	b2da      	uxtb	r2, r3
 800dfd6:	7dfb      	ldrb	r3, [r7, #23]
 800dfd8:	005b      	lsls	r3, r3, #1
 800dfda:	4619      	mov	r1, r3
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	440b      	add	r3, r1
 800dfe0:	3230      	adds	r2, #48	; 0x30
 800dfe2:	b2d2      	uxtb	r2, r2
 800dfe4:	701a      	strb	r2, [r3, #0]
 800dfe6:	e00a      	b.n	800dffe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	0f1b      	lsrs	r3, r3, #28
 800dfec:	b2da      	uxtb	r2, r3
 800dfee:	7dfb      	ldrb	r3, [r7, #23]
 800dff0:	005b      	lsls	r3, r3, #1
 800dff2:	4619      	mov	r1, r3
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	440b      	add	r3, r1
 800dff8:	3237      	adds	r2, #55	; 0x37
 800dffa:	b2d2      	uxtb	r2, r2
 800dffc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	011b      	lsls	r3, r3, #4
 800e002:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e004:	7dfb      	ldrb	r3, [r7, #23]
 800e006:	005b      	lsls	r3, r3, #1
 800e008:	3301      	adds	r3, #1
 800e00a:	68ba      	ldr	r2, [r7, #8]
 800e00c:	4413      	add	r3, r2
 800e00e:	2200      	movs	r2, #0
 800e010:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e012:	7dfb      	ldrb	r3, [r7, #23]
 800e014:	3301      	adds	r3, #1
 800e016:	75fb      	strb	r3, [r7, #23]
 800e018:	7dfa      	ldrb	r2, [r7, #23]
 800e01a:	79fb      	ldrb	r3, [r7, #7]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d3d3      	bcc.n	800dfc8 <IntToUnicode+0x18>
  }
}
 800e020:	bf00      	nop
 800e022:	bf00      	nop
 800e024:	371c      	adds	r7, #28
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr
	...

0800e030 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b0ae      	sub	sp, #184	; 0xb8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e038:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e03c:	2200      	movs	r2, #0
 800e03e:	601a      	str	r2, [r3, #0]
 800e040:	605a      	str	r2, [r3, #4]
 800e042:	609a      	str	r2, [r3, #8]
 800e044:	60da      	str	r2, [r3, #12]
 800e046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e048:	f107 0314 	add.w	r3, r7, #20
 800e04c:	2290      	movs	r2, #144	; 0x90
 800e04e:	2100      	movs	r1, #0
 800e050:	4618      	mov	r0, r3
 800e052:	f000 fd7b 	bl	800eb4c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e05e:	d151      	bne.n	800e104 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800e060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e064:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800e066:	2300      	movs	r3, #0
 800e068:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e06c:	f107 0314 	add.w	r3, r7, #20
 800e070:	4618      	mov	r0, r3
 800e072:	f7f6 fe11 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d001      	beq.n	800e080 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e07c:	f7f2 feac 	bl	8000dd8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e080:	4b22      	ldr	r3, [pc, #136]	; (800e10c <HAL_PCD_MspInit+0xdc>)
 800e082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e084:	4a21      	ldr	r2, [pc, #132]	; (800e10c <HAL_PCD_MspInit+0xdc>)
 800e086:	f043 0301 	orr.w	r3, r3, #1
 800e08a:	6313      	str	r3, [r2, #48]	; 0x30
 800e08c:	4b1f      	ldr	r3, [pc, #124]	; (800e10c <HAL_PCD_MspInit+0xdc>)
 800e08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e090:	f003 0301 	and.w	r3, r3, #1
 800e094:	613b      	str	r3, [r7, #16]
 800e096:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e098:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e09c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0a0:	2302      	movs	r3, #2
 800e0a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e0ac:	2303      	movs	r3, #3
 800e0ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e0b2:	230a      	movs	r3, #10
 800e0b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e0b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e0bc:	4619      	mov	r1, r3
 800e0be:	4814      	ldr	r0, [pc, #80]	; (800e110 <HAL_PCD_MspInit+0xe0>)
 800e0c0:	f7f4 fc80 	bl	80029c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e0c4:	4b11      	ldr	r3, [pc, #68]	; (800e10c <HAL_PCD_MspInit+0xdc>)
 800e0c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0c8:	4a10      	ldr	r2, [pc, #64]	; (800e10c <HAL_PCD_MspInit+0xdc>)
 800e0ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0ce:	6353      	str	r3, [r2, #52]	; 0x34
 800e0d0:	4b0e      	ldr	r3, [pc, #56]	; (800e10c <HAL_PCD_MspInit+0xdc>)
 800e0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0d8:	60fb      	str	r3, [r7, #12]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	4b0b      	ldr	r3, [pc, #44]	; (800e10c <HAL_PCD_MspInit+0xdc>)
 800e0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0e0:	4a0a      	ldr	r2, [pc, #40]	; (800e10c <HAL_PCD_MspInit+0xdc>)
 800e0e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e0e6:	6453      	str	r3, [r2, #68]	; 0x44
 800e0e8:	4b08      	ldr	r3, [pc, #32]	; (800e10c <HAL_PCD_MspInit+0xdc>)
 800e0ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e0f0:	60bb      	str	r3, [r7, #8]
 800e0f2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	2100      	movs	r1, #0
 800e0f8:	2043      	movs	r0, #67	; 0x43
 800e0fa:	f7f4 f886 	bl	800220a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e0fe:	2043      	movs	r0, #67	; 0x43
 800e100:	f7f4 f89f 	bl	8002242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e104:	bf00      	nop
 800e106:	37b8      	adds	r7, #184	; 0xb8
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	40023800 	.word	0x40023800
 800e110:	40020000 	.word	0x40020000

0800e114 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e128:	4619      	mov	r1, r3
 800e12a:	4610      	mov	r0, r2
 800e12c:	f7fc f945 	bl	800a3ba <USBD_LL_SetupStage>
}
 800e130:	bf00      	nop
 800e132:	3708      	adds	r7, #8
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	460b      	mov	r3, r1
 800e142:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e14a:	78fa      	ldrb	r2, [r7, #3]
 800e14c:	6879      	ldr	r1, [r7, #4]
 800e14e:	4613      	mov	r3, r2
 800e150:	00db      	lsls	r3, r3, #3
 800e152:	4413      	add	r3, r2
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	440b      	add	r3, r1
 800e158:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	78fb      	ldrb	r3, [r7, #3]
 800e160:	4619      	mov	r1, r3
 800e162:	f7fc f97f 	bl	800a464 <USBD_LL_DataOutStage>
}
 800e166:	bf00      	nop
 800e168:	3708      	adds	r7, #8
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}

0800e16e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e16e:	b580      	push	{r7, lr}
 800e170:	b082      	sub	sp, #8
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
 800e176:	460b      	mov	r3, r1
 800e178:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e180:	78fa      	ldrb	r2, [r7, #3]
 800e182:	6879      	ldr	r1, [r7, #4]
 800e184:	4613      	mov	r3, r2
 800e186:	00db      	lsls	r3, r3, #3
 800e188:	4413      	add	r3, r2
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	440b      	add	r3, r1
 800e18e:	334c      	adds	r3, #76	; 0x4c
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	78fb      	ldrb	r3, [r7, #3]
 800e194:	4619      	mov	r1, r3
 800e196:	f7fc fa18 	bl	800a5ca <USBD_LL_DataInStage>
}
 800e19a:	bf00      	nop
 800e19c:	3708      	adds	r7, #8
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b082      	sub	sp, #8
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7fc fb4c 	bl	800a84e <USBD_LL_SOF>
}
 800e1b6:	bf00      	nop
 800e1b8:	3708      	adds	r7, #8
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b084      	sub	sp, #16
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	68db      	ldr	r3, [r3, #12]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d102      	bne.n	800e1d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	73fb      	strb	r3, [r7, #15]
 800e1d6:	e008      	b.n	800e1ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	2b02      	cmp	r3, #2
 800e1de:	d102      	bne.n	800e1e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	73fb      	strb	r3, [r7, #15]
 800e1e4:	e001      	b.n	800e1ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e1e6:	f7f2 fdf7 	bl	8000dd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e1f0:	7bfa      	ldrb	r2, [r7, #15]
 800e1f2:	4611      	mov	r1, r2
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7fc faec 	bl	800a7d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e200:	4618      	mov	r0, r3
 800e202:	f7fc fa94 	bl	800a72e <USBD_LL_Reset>
}
 800e206:	bf00      	nop
 800e208:	3710      	adds	r7, #16
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
	...

0800e210 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fc fae7 	bl	800a7f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	6812      	ldr	r2, [r2, #0]
 800e232:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e236:	f043 0301 	orr.w	r3, r3, #1
 800e23a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6a1b      	ldr	r3, [r3, #32]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d005      	beq.n	800e250 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e244:	4b04      	ldr	r3, [pc, #16]	; (800e258 <HAL_PCD_SuspendCallback+0x48>)
 800e246:	691b      	ldr	r3, [r3, #16]
 800e248:	4a03      	ldr	r2, [pc, #12]	; (800e258 <HAL_PCD_SuspendCallback+0x48>)
 800e24a:	f043 0306 	orr.w	r3, r3, #6
 800e24e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e250:	bf00      	nop
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}
 800e258:	e000ed00 	.word	0xe000ed00

0800e25c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fc fad7 	bl	800a81e <USBD_LL_Resume>
}
 800e270:	bf00      	nop
 800e272:	3708      	adds	r7, #8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	460b      	mov	r3, r1
 800e282:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e28a:	78fa      	ldrb	r2, [r7, #3]
 800e28c:	4611      	mov	r1, r2
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fc fb2f 	bl	800a8f2 <USBD_LL_IsoOUTIncomplete>
}
 800e294:	bf00      	nop
 800e296:	3708      	adds	r7, #8
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e2ae:	78fa      	ldrb	r2, [r7, #3]
 800e2b0:	4611      	mov	r1, r2
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fc faeb 	bl	800a88e <USBD_LL_IsoINIncomplete>
}
 800e2b8:	bf00      	nop
 800e2ba:	3708      	adds	r7, #8
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fc fb41 	bl	800a956 <USBD_LL_DevConnected>
}
 800e2d4:	bf00      	nop
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7fc fb3e 	bl	800a96c <USBD_LL_DevDisconnected>
}
 800e2f0:	bf00      	nop
 800e2f2:	3708      	adds	r7, #8
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d13c      	bne.n	800e382 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e308:	4a20      	ldr	r2, [pc, #128]	; (800e38c <USBD_LL_Init+0x94>)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	4a1e      	ldr	r2, [pc, #120]	; (800e38c <USBD_LL_Init+0x94>)
 800e314:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e318:	4b1c      	ldr	r3, [pc, #112]	; (800e38c <USBD_LL_Init+0x94>)
 800e31a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e31e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e320:	4b1a      	ldr	r3, [pc, #104]	; (800e38c <USBD_LL_Init+0x94>)
 800e322:	2206      	movs	r2, #6
 800e324:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e326:	4b19      	ldr	r3, [pc, #100]	; (800e38c <USBD_LL_Init+0x94>)
 800e328:	2202      	movs	r2, #2
 800e32a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e32c:	4b17      	ldr	r3, [pc, #92]	; (800e38c <USBD_LL_Init+0x94>)
 800e32e:	2200      	movs	r2, #0
 800e330:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e332:	4b16      	ldr	r3, [pc, #88]	; (800e38c <USBD_LL_Init+0x94>)
 800e334:	2202      	movs	r2, #2
 800e336:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e338:	4b14      	ldr	r3, [pc, #80]	; (800e38c <USBD_LL_Init+0x94>)
 800e33a:	2200      	movs	r2, #0
 800e33c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e33e:	4b13      	ldr	r3, [pc, #76]	; (800e38c <USBD_LL_Init+0x94>)
 800e340:	2200      	movs	r2, #0
 800e342:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e344:	4b11      	ldr	r3, [pc, #68]	; (800e38c <USBD_LL_Init+0x94>)
 800e346:	2200      	movs	r2, #0
 800e348:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e34a:	4b10      	ldr	r3, [pc, #64]	; (800e38c <USBD_LL_Init+0x94>)
 800e34c:	2200      	movs	r2, #0
 800e34e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e350:	4b0e      	ldr	r3, [pc, #56]	; (800e38c <USBD_LL_Init+0x94>)
 800e352:	2200      	movs	r2, #0
 800e354:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e356:	480d      	ldr	r0, [pc, #52]	; (800e38c <USBD_LL_Init+0x94>)
 800e358:	f7f4 fd11 	bl	8002d7e <HAL_PCD_Init>
 800e35c:	4603      	mov	r3, r0
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d001      	beq.n	800e366 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e362:	f7f2 fd39 	bl	8000dd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e366:	2180      	movs	r1, #128	; 0x80
 800e368:	4808      	ldr	r0, [pc, #32]	; (800e38c <USBD_LL_Init+0x94>)
 800e36a:	f7f5 ff8c 	bl	8004286 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e36e:	2240      	movs	r2, #64	; 0x40
 800e370:	2100      	movs	r1, #0
 800e372:	4806      	ldr	r0, [pc, #24]	; (800e38c <USBD_LL_Init+0x94>)
 800e374:	f7f5 ff40 	bl	80041f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e378:	2280      	movs	r2, #128	; 0x80
 800e37a:	2101      	movs	r1, #1
 800e37c:	4803      	ldr	r0, [pc, #12]	; (800e38c <USBD_LL_Init+0x94>)
 800e37e:	f7f5 ff3b 	bl	80041f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e382:	2300      	movs	r3, #0
}
 800e384:	4618      	mov	r0, r3
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	20003d68 	.word	0x20003d68

0800e390 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e398:	2300      	movs	r3, #0
 800e39a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e39c:	2300      	movs	r3, #0
 800e39e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7f4 fe0d 	bl	8002fc6 <HAL_PCD_Start>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3b0:	7bfb      	ldrb	r3, [r7, #15]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f000 f97e 	bl	800e6b4 <USBD_Get_USB_Status>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3710      	adds	r7, #16
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}

0800e3c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b084      	sub	sp, #16
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	6078      	str	r0, [r7, #4]
 800e3ce:	4608      	mov	r0, r1
 800e3d0:	4611      	mov	r1, r2
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	70fb      	strb	r3, [r7, #3]
 800e3d8:	460b      	mov	r3, r1
 800e3da:	70bb      	strb	r3, [r7, #2]
 800e3dc:	4613      	mov	r3, r2
 800e3de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e3ee:	78bb      	ldrb	r3, [r7, #2]
 800e3f0:	883a      	ldrh	r2, [r7, #0]
 800e3f2:	78f9      	ldrb	r1, [r7, #3]
 800e3f4:	f7f5 fafa 	bl	80039ec <HAL_PCD_EP_Open>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3fc:	7bfb      	ldrb	r3, [r7, #15]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f000 f958 	bl	800e6b4 <USBD_Get_USB_Status>
 800e404:	4603      	mov	r3, r0
 800e406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e408:	7bbb      	ldrb	r3, [r7, #14]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}

0800e412 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e412:	b580      	push	{r7, lr}
 800e414:	b084      	sub	sp, #16
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
 800e41a:	460b      	mov	r3, r1
 800e41c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e41e:	2300      	movs	r3, #0
 800e420:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e422:	2300      	movs	r3, #0
 800e424:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e42c:	78fa      	ldrb	r2, [r7, #3]
 800e42e:	4611      	mov	r1, r2
 800e430:	4618      	mov	r0, r3
 800e432:	f7f5 fb43 	bl	8003abc <HAL_PCD_EP_Close>
 800e436:	4603      	mov	r3, r0
 800e438:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e43a:	7bfb      	ldrb	r3, [r7, #15]
 800e43c:	4618      	mov	r0, r3
 800e43e:	f000 f939 	bl	800e6b4 <USBD_Get_USB_Status>
 800e442:	4603      	mov	r3, r0
 800e444:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e446:	7bbb      	ldrb	r3, [r7, #14]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	460b      	mov	r3, r1
 800e45a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e45c:	2300      	movs	r3, #0
 800e45e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e460:	2300      	movs	r3, #0
 800e462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e46a:	78fa      	ldrb	r2, [r7, #3]
 800e46c:	4611      	mov	r1, r2
 800e46e:	4618      	mov	r0, r3
 800e470:	f7f5 fc1b 	bl	8003caa <HAL_PCD_EP_SetStall>
 800e474:	4603      	mov	r3, r0
 800e476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e478:	7bfb      	ldrb	r3, [r7, #15]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 f91a 	bl	800e6b4 <USBD_Get_USB_Status>
 800e480:	4603      	mov	r3, r0
 800e482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e484:	7bbb      	ldrb	r3, [r7, #14]
}
 800e486:	4618      	mov	r0, r3
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e48e:	b580      	push	{r7, lr}
 800e490:	b084      	sub	sp, #16
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
 800e496:	460b      	mov	r3, r1
 800e498:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e49a:	2300      	movs	r3, #0
 800e49c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e4a8:	78fa      	ldrb	r2, [r7, #3]
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7f5 fc60 	bl	8003d72 <HAL_PCD_EP_ClrStall>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4b6:	7bfb      	ldrb	r3, [r7, #15]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f000 f8fb 	bl	800e6b4 <USBD_Get_USB_Status>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3710      	adds	r7, #16
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}

0800e4cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e4de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e4e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	da0b      	bge.n	800e500 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e4e8:	78fb      	ldrb	r3, [r7, #3]
 800e4ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e4ee:	68f9      	ldr	r1, [r7, #12]
 800e4f0:	4613      	mov	r3, r2
 800e4f2:	00db      	lsls	r3, r3, #3
 800e4f4:	4413      	add	r3, r2
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	440b      	add	r3, r1
 800e4fa:	333e      	adds	r3, #62	; 0x3e
 800e4fc:	781b      	ldrb	r3, [r3, #0]
 800e4fe:	e00b      	b.n	800e518 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e500:	78fb      	ldrb	r3, [r7, #3]
 800e502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e506:	68f9      	ldr	r1, [r7, #12]
 800e508:	4613      	mov	r3, r2
 800e50a:	00db      	lsls	r3, r3, #3
 800e50c:	4413      	add	r3, r2
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	440b      	add	r3, r1
 800e512:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e516:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3714      	adds	r7, #20
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr

0800e524 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	460b      	mov	r3, r1
 800e52e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e530:	2300      	movs	r3, #0
 800e532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e534:	2300      	movs	r3, #0
 800e536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e53e:	78fa      	ldrb	r2, [r7, #3]
 800e540:	4611      	mov	r1, r2
 800e542:	4618      	mov	r0, r3
 800e544:	f7f5 fa2d 	bl	80039a2 <HAL_PCD_SetAddress>
 800e548:	4603      	mov	r3, r0
 800e54a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e54c:	7bfb      	ldrb	r3, [r7, #15]
 800e54e:	4618      	mov	r0, r3
 800e550:	f000 f8b0 	bl	800e6b4 <USBD_Get_USB_Status>
 800e554:	4603      	mov	r3, r0
 800e556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e558:	7bbb      	ldrb	r3, [r7, #14]
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3710      	adds	r7, #16
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}

0800e562 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e562:	b580      	push	{r7, lr}
 800e564:	b086      	sub	sp, #24
 800e566:	af00      	add	r7, sp, #0
 800e568:	60f8      	str	r0, [r7, #12]
 800e56a:	607a      	str	r2, [r7, #4]
 800e56c:	603b      	str	r3, [r7, #0]
 800e56e:	460b      	mov	r3, r1
 800e570:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e572:	2300      	movs	r3, #0
 800e574:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e576:	2300      	movs	r3, #0
 800e578:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e580:	7af9      	ldrb	r1, [r7, #11]
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	f7f5 fb46 	bl	8003c16 <HAL_PCD_EP_Transmit>
 800e58a:	4603      	mov	r3, r0
 800e58c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e58e:	7dfb      	ldrb	r3, [r7, #23]
 800e590:	4618      	mov	r0, r3
 800e592:	f000 f88f 	bl	800e6b4 <USBD_Get_USB_Status>
 800e596:	4603      	mov	r3, r0
 800e598:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e59a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3718      	adds	r7, #24
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b086      	sub	sp, #24
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	607a      	str	r2, [r7, #4]
 800e5ae:	603b      	str	r3, [r7, #0]
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e5c2:	7af9      	ldrb	r1, [r7, #11]
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	f7f5 fac2 	bl	8003b50 <HAL_PCD_EP_Receive>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5d0:	7dfb      	ldrb	r3, [r7, #23]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f000 f86e 	bl	800e6b4 <USBD_Get_USB_Status>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e5dc:	7dbb      	ldrb	r3, [r7, #22]
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3718      	adds	r7, #24
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}

0800e5e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5e6:	b580      	push	{r7, lr}
 800e5e8:	b082      	sub	sp, #8
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
 800e5ee:	460b      	mov	r3, r1
 800e5f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e5f8:	78fa      	ldrb	r2, [r7, #3]
 800e5fa:	4611      	mov	r1, r2
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7f5 faf2 	bl	8003be6 <HAL_PCD_EP_GetRxCount>
 800e602:	4603      	mov	r3, r0
}
 800e604:	4618      	mov	r0, r3
 800e606:	3708      	adds	r7, #8
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b082      	sub	sp, #8
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	460b      	mov	r3, r1
 800e616:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e618:	78fb      	ldrb	r3, [r7, #3]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d002      	beq.n	800e624 <HAL_PCDEx_LPM_Callback+0x18>
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d01f      	beq.n	800e662 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e622:	e03b      	b.n	800e69c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6a1b      	ldr	r3, [r3, #32]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d007      	beq.n	800e63c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e62c:	f000 f83c 	bl	800e6a8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e630:	4b1c      	ldr	r3, [pc, #112]	; (800e6a4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e632:	691b      	ldr	r3, [r3, #16]
 800e634:	4a1b      	ldr	r2, [pc, #108]	; (800e6a4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e636:	f023 0306 	bic.w	r3, r3, #6
 800e63a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	6812      	ldr	r2, [r2, #0]
 800e64a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e64e:	f023 0301 	bic.w	r3, r3, #1
 800e652:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fc f8df 	bl	800a81e <USBD_LL_Resume>
    break;
 800e660:	e01c      	b.n	800e69c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	6812      	ldr	r2, [r2, #0]
 800e670:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e674:	f043 0301 	orr.w	r3, r3, #1
 800e678:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e680:	4618      	mov	r0, r3
 800e682:	f7fc f8b6 	bl	800a7f2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6a1b      	ldr	r3, [r3, #32]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d005      	beq.n	800e69a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e68e:	4b05      	ldr	r3, [pc, #20]	; (800e6a4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e690:	691b      	ldr	r3, [r3, #16]
 800e692:	4a04      	ldr	r2, [pc, #16]	; (800e6a4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e694:	f043 0306 	orr.w	r3, r3, #6
 800e698:	6113      	str	r3, [r2, #16]
    break;
 800e69a:	bf00      	nop
}
 800e69c:	bf00      	nop
 800e69e:	3708      	adds	r7, #8
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	e000ed00 	.word	0xe000ed00

0800e6a8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e6ac:	f7f2 f8aa 	bl	8000804 <SystemClock_Config>
}
 800e6b0:	bf00      	nop
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b085      	sub	sp, #20
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e6c2:	79fb      	ldrb	r3, [r7, #7]
 800e6c4:	2b03      	cmp	r3, #3
 800e6c6:	d817      	bhi.n	800e6f8 <USBD_Get_USB_Status+0x44>
 800e6c8:	a201      	add	r2, pc, #4	; (adr r2, 800e6d0 <USBD_Get_USB_Status+0x1c>)
 800e6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ce:	bf00      	nop
 800e6d0:	0800e6e1 	.word	0x0800e6e1
 800e6d4:	0800e6e7 	.word	0x0800e6e7
 800e6d8:	0800e6ed 	.word	0x0800e6ed
 800e6dc:	0800e6f3 	.word	0x0800e6f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	73fb      	strb	r3, [r7, #15]
    break;
 800e6e4:	e00b      	b.n	800e6fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e6e6:	2303      	movs	r3, #3
 800e6e8:	73fb      	strb	r3, [r7, #15]
    break;
 800e6ea:	e008      	b.n	800e6fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	73fb      	strb	r3, [r7, #15]
    break;
 800e6f0:	e005      	b.n	800e6fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e6f2:	2303      	movs	r3, #3
 800e6f4:	73fb      	strb	r3, [r7, #15]
    break;
 800e6f6:	e002      	b.n	800e6fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e6f8:	2303      	movs	r3, #3
 800e6fa:	73fb      	strb	r3, [r7, #15]
    break;
 800e6fc:	bf00      	nop
  }
  return usb_status;
 800e6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e700:	4618      	mov	r0, r3
 800e702:	3714      	adds	r7, #20
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <malloc>:
 800e70c:	4b02      	ldr	r3, [pc, #8]	; (800e718 <malloc+0xc>)
 800e70e:	4601      	mov	r1, r0
 800e710:	6818      	ldr	r0, [r3, #0]
 800e712:	f000 b82b 	b.w	800e76c <_malloc_r>
 800e716:	bf00      	nop
 800e718:	20000164 	.word	0x20000164

0800e71c <free>:
 800e71c:	4b02      	ldr	r3, [pc, #8]	; (800e728 <free+0xc>)
 800e71e:	4601      	mov	r1, r0
 800e720:	6818      	ldr	r0, [r3, #0]
 800e722:	f000 ba59 	b.w	800ebd8 <_free_r>
 800e726:	bf00      	nop
 800e728:	20000164 	.word	0x20000164

0800e72c <sbrk_aligned>:
 800e72c:	b570      	push	{r4, r5, r6, lr}
 800e72e:	4e0e      	ldr	r6, [pc, #56]	; (800e768 <sbrk_aligned+0x3c>)
 800e730:	460c      	mov	r4, r1
 800e732:	6831      	ldr	r1, [r6, #0]
 800e734:	4605      	mov	r5, r0
 800e736:	b911      	cbnz	r1, 800e73e <sbrk_aligned+0x12>
 800e738:	f000 fa10 	bl	800eb5c <_sbrk_r>
 800e73c:	6030      	str	r0, [r6, #0]
 800e73e:	4621      	mov	r1, r4
 800e740:	4628      	mov	r0, r5
 800e742:	f000 fa0b 	bl	800eb5c <_sbrk_r>
 800e746:	1c43      	adds	r3, r0, #1
 800e748:	d00a      	beq.n	800e760 <sbrk_aligned+0x34>
 800e74a:	1cc4      	adds	r4, r0, #3
 800e74c:	f024 0403 	bic.w	r4, r4, #3
 800e750:	42a0      	cmp	r0, r4
 800e752:	d007      	beq.n	800e764 <sbrk_aligned+0x38>
 800e754:	1a21      	subs	r1, r4, r0
 800e756:	4628      	mov	r0, r5
 800e758:	f000 fa00 	bl	800eb5c <_sbrk_r>
 800e75c:	3001      	adds	r0, #1
 800e75e:	d101      	bne.n	800e764 <sbrk_aligned+0x38>
 800e760:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e764:	4620      	mov	r0, r4
 800e766:	bd70      	pop	{r4, r5, r6, pc}
 800e768:	20004274 	.word	0x20004274

0800e76c <_malloc_r>:
 800e76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e770:	1ccd      	adds	r5, r1, #3
 800e772:	f025 0503 	bic.w	r5, r5, #3
 800e776:	3508      	adds	r5, #8
 800e778:	2d0c      	cmp	r5, #12
 800e77a:	bf38      	it	cc
 800e77c:	250c      	movcc	r5, #12
 800e77e:	2d00      	cmp	r5, #0
 800e780:	4607      	mov	r7, r0
 800e782:	db01      	blt.n	800e788 <_malloc_r+0x1c>
 800e784:	42a9      	cmp	r1, r5
 800e786:	d905      	bls.n	800e794 <_malloc_r+0x28>
 800e788:	230c      	movs	r3, #12
 800e78a:	603b      	str	r3, [r7, #0]
 800e78c:	2600      	movs	r6, #0
 800e78e:	4630      	mov	r0, r6
 800e790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e794:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e868 <_malloc_r+0xfc>
 800e798:	f000 f89c 	bl	800e8d4 <__malloc_lock>
 800e79c:	f8d8 3000 	ldr.w	r3, [r8]
 800e7a0:	461c      	mov	r4, r3
 800e7a2:	bb5c      	cbnz	r4, 800e7fc <_malloc_r+0x90>
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	4638      	mov	r0, r7
 800e7a8:	f7ff ffc0 	bl	800e72c <sbrk_aligned>
 800e7ac:	1c43      	adds	r3, r0, #1
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	d155      	bne.n	800e85e <_malloc_r+0xf2>
 800e7b2:	f8d8 4000 	ldr.w	r4, [r8]
 800e7b6:	4626      	mov	r6, r4
 800e7b8:	2e00      	cmp	r6, #0
 800e7ba:	d145      	bne.n	800e848 <_malloc_r+0xdc>
 800e7bc:	2c00      	cmp	r4, #0
 800e7be:	d048      	beq.n	800e852 <_malloc_r+0xe6>
 800e7c0:	6823      	ldr	r3, [r4, #0]
 800e7c2:	4631      	mov	r1, r6
 800e7c4:	4638      	mov	r0, r7
 800e7c6:	eb04 0903 	add.w	r9, r4, r3
 800e7ca:	f000 f9c7 	bl	800eb5c <_sbrk_r>
 800e7ce:	4581      	cmp	r9, r0
 800e7d0:	d13f      	bne.n	800e852 <_malloc_r+0xe6>
 800e7d2:	6821      	ldr	r1, [r4, #0]
 800e7d4:	1a6d      	subs	r5, r5, r1
 800e7d6:	4629      	mov	r1, r5
 800e7d8:	4638      	mov	r0, r7
 800e7da:	f7ff ffa7 	bl	800e72c <sbrk_aligned>
 800e7de:	3001      	adds	r0, #1
 800e7e0:	d037      	beq.n	800e852 <_malloc_r+0xe6>
 800e7e2:	6823      	ldr	r3, [r4, #0]
 800e7e4:	442b      	add	r3, r5
 800e7e6:	6023      	str	r3, [r4, #0]
 800e7e8:	f8d8 3000 	ldr.w	r3, [r8]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d038      	beq.n	800e862 <_malloc_r+0xf6>
 800e7f0:	685a      	ldr	r2, [r3, #4]
 800e7f2:	42a2      	cmp	r2, r4
 800e7f4:	d12b      	bne.n	800e84e <_malloc_r+0xe2>
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	605a      	str	r2, [r3, #4]
 800e7fa:	e00f      	b.n	800e81c <_malloc_r+0xb0>
 800e7fc:	6822      	ldr	r2, [r4, #0]
 800e7fe:	1b52      	subs	r2, r2, r5
 800e800:	d41f      	bmi.n	800e842 <_malloc_r+0xd6>
 800e802:	2a0b      	cmp	r2, #11
 800e804:	d917      	bls.n	800e836 <_malloc_r+0xca>
 800e806:	1961      	adds	r1, r4, r5
 800e808:	42a3      	cmp	r3, r4
 800e80a:	6025      	str	r5, [r4, #0]
 800e80c:	bf18      	it	ne
 800e80e:	6059      	strne	r1, [r3, #4]
 800e810:	6863      	ldr	r3, [r4, #4]
 800e812:	bf08      	it	eq
 800e814:	f8c8 1000 	streq.w	r1, [r8]
 800e818:	5162      	str	r2, [r4, r5]
 800e81a:	604b      	str	r3, [r1, #4]
 800e81c:	4638      	mov	r0, r7
 800e81e:	f104 060b 	add.w	r6, r4, #11
 800e822:	f000 f85d 	bl	800e8e0 <__malloc_unlock>
 800e826:	f026 0607 	bic.w	r6, r6, #7
 800e82a:	1d23      	adds	r3, r4, #4
 800e82c:	1af2      	subs	r2, r6, r3
 800e82e:	d0ae      	beq.n	800e78e <_malloc_r+0x22>
 800e830:	1b9b      	subs	r3, r3, r6
 800e832:	50a3      	str	r3, [r4, r2]
 800e834:	e7ab      	b.n	800e78e <_malloc_r+0x22>
 800e836:	42a3      	cmp	r3, r4
 800e838:	6862      	ldr	r2, [r4, #4]
 800e83a:	d1dd      	bne.n	800e7f8 <_malloc_r+0x8c>
 800e83c:	f8c8 2000 	str.w	r2, [r8]
 800e840:	e7ec      	b.n	800e81c <_malloc_r+0xb0>
 800e842:	4623      	mov	r3, r4
 800e844:	6864      	ldr	r4, [r4, #4]
 800e846:	e7ac      	b.n	800e7a2 <_malloc_r+0x36>
 800e848:	4634      	mov	r4, r6
 800e84a:	6876      	ldr	r6, [r6, #4]
 800e84c:	e7b4      	b.n	800e7b8 <_malloc_r+0x4c>
 800e84e:	4613      	mov	r3, r2
 800e850:	e7cc      	b.n	800e7ec <_malloc_r+0x80>
 800e852:	230c      	movs	r3, #12
 800e854:	603b      	str	r3, [r7, #0]
 800e856:	4638      	mov	r0, r7
 800e858:	f000 f842 	bl	800e8e0 <__malloc_unlock>
 800e85c:	e797      	b.n	800e78e <_malloc_r+0x22>
 800e85e:	6025      	str	r5, [r4, #0]
 800e860:	e7dc      	b.n	800e81c <_malloc_r+0xb0>
 800e862:	605b      	str	r3, [r3, #4]
 800e864:	deff      	udf	#255	; 0xff
 800e866:	bf00      	nop
 800e868:	20004270 	.word	0x20004270

0800e86c <sniprintf>:
 800e86c:	b40c      	push	{r2, r3}
 800e86e:	b530      	push	{r4, r5, lr}
 800e870:	4b17      	ldr	r3, [pc, #92]	; (800e8d0 <sniprintf+0x64>)
 800e872:	1e0c      	subs	r4, r1, #0
 800e874:	681d      	ldr	r5, [r3, #0]
 800e876:	b09d      	sub	sp, #116	; 0x74
 800e878:	da08      	bge.n	800e88c <sniprintf+0x20>
 800e87a:	238b      	movs	r3, #139	; 0x8b
 800e87c:	602b      	str	r3, [r5, #0]
 800e87e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e882:	b01d      	add	sp, #116	; 0x74
 800e884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e888:	b002      	add	sp, #8
 800e88a:	4770      	bx	lr
 800e88c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e890:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e894:	bf14      	ite	ne
 800e896:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e89a:	4623      	moveq	r3, r4
 800e89c:	9304      	str	r3, [sp, #16]
 800e89e:	9307      	str	r3, [sp, #28]
 800e8a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e8a4:	9002      	str	r0, [sp, #8]
 800e8a6:	9006      	str	r0, [sp, #24]
 800e8a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e8ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e8ae:	ab21      	add	r3, sp, #132	; 0x84
 800e8b0:	a902      	add	r1, sp, #8
 800e8b2:	4628      	mov	r0, r5
 800e8b4:	9301      	str	r3, [sp, #4]
 800e8b6:	f000 fa35 	bl	800ed24 <_svfiprintf_r>
 800e8ba:	1c43      	adds	r3, r0, #1
 800e8bc:	bfbc      	itt	lt
 800e8be:	238b      	movlt	r3, #139	; 0x8b
 800e8c0:	602b      	strlt	r3, [r5, #0]
 800e8c2:	2c00      	cmp	r4, #0
 800e8c4:	d0dd      	beq.n	800e882 <sniprintf+0x16>
 800e8c6:	9b02      	ldr	r3, [sp, #8]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	701a      	strb	r2, [r3, #0]
 800e8cc:	e7d9      	b.n	800e882 <sniprintf+0x16>
 800e8ce:	bf00      	nop
 800e8d0:	20000164 	.word	0x20000164

0800e8d4 <__malloc_lock>:
 800e8d4:	4801      	ldr	r0, [pc, #4]	; (800e8dc <__malloc_lock+0x8>)
 800e8d6:	f000 b97c 	b.w	800ebd2 <__retarget_lock_acquire_recursive>
 800e8da:	bf00      	nop
 800e8dc:	200043b4 	.word	0x200043b4

0800e8e0 <__malloc_unlock>:
 800e8e0:	4801      	ldr	r0, [pc, #4]	; (800e8e8 <__malloc_unlock+0x8>)
 800e8e2:	f000 b977 	b.w	800ebd4 <__retarget_lock_release_recursive>
 800e8e6:	bf00      	nop
 800e8e8:	200043b4 	.word	0x200043b4

0800e8ec <std>:
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	b510      	push	{r4, lr}
 800e8f0:	4604      	mov	r4, r0
 800e8f2:	e9c0 3300 	strd	r3, r3, [r0]
 800e8f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8fa:	6083      	str	r3, [r0, #8]
 800e8fc:	8181      	strh	r1, [r0, #12]
 800e8fe:	6643      	str	r3, [r0, #100]	; 0x64
 800e900:	81c2      	strh	r2, [r0, #14]
 800e902:	6183      	str	r3, [r0, #24]
 800e904:	4619      	mov	r1, r3
 800e906:	2208      	movs	r2, #8
 800e908:	305c      	adds	r0, #92	; 0x5c
 800e90a:	f000 f91f 	bl	800eb4c <memset>
 800e90e:	4b0d      	ldr	r3, [pc, #52]	; (800e944 <std+0x58>)
 800e910:	6263      	str	r3, [r4, #36]	; 0x24
 800e912:	4b0d      	ldr	r3, [pc, #52]	; (800e948 <std+0x5c>)
 800e914:	62a3      	str	r3, [r4, #40]	; 0x28
 800e916:	4b0d      	ldr	r3, [pc, #52]	; (800e94c <std+0x60>)
 800e918:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e91a:	4b0d      	ldr	r3, [pc, #52]	; (800e950 <std+0x64>)
 800e91c:	6323      	str	r3, [r4, #48]	; 0x30
 800e91e:	4b0d      	ldr	r3, [pc, #52]	; (800e954 <std+0x68>)
 800e920:	6224      	str	r4, [r4, #32]
 800e922:	429c      	cmp	r4, r3
 800e924:	d006      	beq.n	800e934 <std+0x48>
 800e926:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e92a:	4294      	cmp	r4, r2
 800e92c:	d002      	beq.n	800e934 <std+0x48>
 800e92e:	33d0      	adds	r3, #208	; 0xd0
 800e930:	429c      	cmp	r4, r3
 800e932:	d105      	bne.n	800e940 <std+0x54>
 800e934:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e93c:	f000 b948 	b.w	800ebd0 <__retarget_lock_init_recursive>
 800e940:	bd10      	pop	{r4, pc}
 800e942:	bf00      	nop
 800e944:	0800f625 	.word	0x0800f625
 800e948:	0800f647 	.word	0x0800f647
 800e94c:	0800f67f 	.word	0x0800f67f
 800e950:	0800f6a3 	.word	0x0800f6a3
 800e954:	20004278 	.word	0x20004278

0800e958 <stdio_exit_handler>:
 800e958:	4a02      	ldr	r2, [pc, #8]	; (800e964 <stdio_exit_handler+0xc>)
 800e95a:	4903      	ldr	r1, [pc, #12]	; (800e968 <stdio_exit_handler+0x10>)
 800e95c:	4803      	ldr	r0, [pc, #12]	; (800e96c <stdio_exit_handler+0x14>)
 800e95e:	f000 b869 	b.w	800ea34 <_fwalk_sglue>
 800e962:	bf00      	nop
 800e964:	2000010c 	.word	0x2000010c
 800e968:	0800f5d5 	.word	0x0800f5d5
 800e96c:	20000118 	.word	0x20000118

0800e970 <cleanup_stdio>:
 800e970:	6841      	ldr	r1, [r0, #4]
 800e972:	4b0c      	ldr	r3, [pc, #48]	; (800e9a4 <cleanup_stdio+0x34>)
 800e974:	4299      	cmp	r1, r3
 800e976:	b510      	push	{r4, lr}
 800e978:	4604      	mov	r4, r0
 800e97a:	d001      	beq.n	800e980 <cleanup_stdio+0x10>
 800e97c:	f000 fe2a 	bl	800f5d4 <_fflush_r>
 800e980:	68a1      	ldr	r1, [r4, #8]
 800e982:	4b09      	ldr	r3, [pc, #36]	; (800e9a8 <cleanup_stdio+0x38>)
 800e984:	4299      	cmp	r1, r3
 800e986:	d002      	beq.n	800e98e <cleanup_stdio+0x1e>
 800e988:	4620      	mov	r0, r4
 800e98a:	f000 fe23 	bl	800f5d4 <_fflush_r>
 800e98e:	68e1      	ldr	r1, [r4, #12]
 800e990:	4b06      	ldr	r3, [pc, #24]	; (800e9ac <cleanup_stdio+0x3c>)
 800e992:	4299      	cmp	r1, r3
 800e994:	d004      	beq.n	800e9a0 <cleanup_stdio+0x30>
 800e996:	4620      	mov	r0, r4
 800e998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e99c:	f000 be1a 	b.w	800f5d4 <_fflush_r>
 800e9a0:	bd10      	pop	{r4, pc}
 800e9a2:	bf00      	nop
 800e9a4:	20004278 	.word	0x20004278
 800e9a8:	200042e0 	.word	0x200042e0
 800e9ac:	20004348 	.word	0x20004348

0800e9b0 <global_stdio_init.part.0>:
 800e9b0:	b510      	push	{r4, lr}
 800e9b2:	4b0b      	ldr	r3, [pc, #44]	; (800e9e0 <global_stdio_init.part.0+0x30>)
 800e9b4:	4c0b      	ldr	r4, [pc, #44]	; (800e9e4 <global_stdio_init.part.0+0x34>)
 800e9b6:	4a0c      	ldr	r2, [pc, #48]	; (800e9e8 <global_stdio_init.part.0+0x38>)
 800e9b8:	601a      	str	r2, [r3, #0]
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	2200      	movs	r2, #0
 800e9be:	2104      	movs	r1, #4
 800e9c0:	f7ff ff94 	bl	800e8ec <std>
 800e9c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e9c8:	2201      	movs	r2, #1
 800e9ca:	2109      	movs	r1, #9
 800e9cc:	f7ff ff8e 	bl	800e8ec <std>
 800e9d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e9d4:	2202      	movs	r2, #2
 800e9d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9da:	2112      	movs	r1, #18
 800e9dc:	f7ff bf86 	b.w	800e8ec <std>
 800e9e0:	200043b0 	.word	0x200043b0
 800e9e4:	20004278 	.word	0x20004278
 800e9e8:	0800e959 	.word	0x0800e959

0800e9ec <__sfp_lock_acquire>:
 800e9ec:	4801      	ldr	r0, [pc, #4]	; (800e9f4 <__sfp_lock_acquire+0x8>)
 800e9ee:	f000 b8f0 	b.w	800ebd2 <__retarget_lock_acquire_recursive>
 800e9f2:	bf00      	nop
 800e9f4:	200043b5 	.word	0x200043b5

0800e9f8 <__sfp_lock_release>:
 800e9f8:	4801      	ldr	r0, [pc, #4]	; (800ea00 <__sfp_lock_release+0x8>)
 800e9fa:	f000 b8eb 	b.w	800ebd4 <__retarget_lock_release_recursive>
 800e9fe:	bf00      	nop
 800ea00:	200043b5 	.word	0x200043b5

0800ea04 <__sinit>:
 800ea04:	b510      	push	{r4, lr}
 800ea06:	4604      	mov	r4, r0
 800ea08:	f7ff fff0 	bl	800e9ec <__sfp_lock_acquire>
 800ea0c:	6a23      	ldr	r3, [r4, #32]
 800ea0e:	b11b      	cbz	r3, 800ea18 <__sinit+0x14>
 800ea10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea14:	f7ff bff0 	b.w	800e9f8 <__sfp_lock_release>
 800ea18:	4b04      	ldr	r3, [pc, #16]	; (800ea2c <__sinit+0x28>)
 800ea1a:	6223      	str	r3, [r4, #32]
 800ea1c:	4b04      	ldr	r3, [pc, #16]	; (800ea30 <__sinit+0x2c>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d1f5      	bne.n	800ea10 <__sinit+0xc>
 800ea24:	f7ff ffc4 	bl	800e9b0 <global_stdio_init.part.0>
 800ea28:	e7f2      	b.n	800ea10 <__sinit+0xc>
 800ea2a:	bf00      	nop
 800ea2c:	0800e971 	.word	0x0800e971
 800ea30:	200043b0 	.word	0x200043b0

0800ea34 <_fwalk_sglue>:
 800ea34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea38:	4607      	mov	r7, r0
 800ea3a:	4688      	mov	r8, r1
 800ea3c:	4614      	mov	r4, r2
 800ea3e:	2600      	movs	r6, #0
 800ea40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea44:	f1b9 0901 	subs.w	r9, r9, #1
 800ea48:	d505      	bpl.n	800ea56 <_fwalk_sglue+0x22>
 800ea4a:	6824      	ldr	r4, [r4, #0]
 800ea4c:	2c00      	cmp	r4, #0
 800ea4e:	d1f7      	bne.n	800ea40 <_fwalk_sglue+0xc>
 800ea50:	4630      	mov	r0, r6
 800ea52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea56:	89ab      	ldrh	r3, [r5, #12]
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d907      	bls.n	800ea6c <_fwalk_sglue+0x38>
 800ea5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea60:	3301      	adds	r3, #1
 800ea62:	d003      	beq.n	800ea6c <_fwalk_sglue+0x38>
 800ea64:	4629      	mov	r1, r5
 800ea66:	4638      	mov	r0, r7
 800ea68:	47c0      	blx	r8
 800ea6a:	4306      	orrs	r6, r0
 800ea6c:	3568      	adds	r5, #104	; 0x68
 800ea6e:	e7e9      	b.n	800ea44 <_fwalk_sglue+0x10>

0800ea70 <iprintf>:
 800ea70:	b40f      	push	{r0, r1, r2, r3}
 800ea72:	b507      	push	{r0, r1, r2, lr}
 800ea74:	4906      	ldr	r1, [pc, #24]	; (800ea90 <iprintf+0x20>)
 800ea76:	ab04      	add	r3, sp, #16
 800ea78:	6808      	ldr	r0, [r1, #0]
 800ea7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea7e:	6881      	ldr	r1, [r0, #8]
 800ea80:	9301      	str	r3, [sp, #4]
 800ea82:	f000 fa77 	bl	800ef74 <_vfiprintf_r>
 800ea86:	b003      	add	sp, #12
 800ea88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea8c:	b004      	add	sp, #16
 800ea8e:	4770      	bx	lr
 800ea90:	20000164 	.word	0x20000164

0800ea94 <_puts_r>:
 800ea94:	6a03      	ldr	r3, [r0, #32]
 800ea96:	b570      	push	{r4, r5, r6, lr}
 800ea98:	6884      	ldr	r4, [r0, #8]
 800ea9a:	4605      	mov	r5, r0
 800ea9c:	460e      	mov	r6, r1
 800ea9e:	b90b      	cbnz	r3, 800eaa4 <_puts_r+0x10>
 800eaa0:	f7ff ffb0 	bl	800ea04 <__sinit>
 800eaa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eaa6:	07db      	lsls	r3, r3, #31
 800eaa8:	d405      	bmi.n	800eab6 <_puts_r+0x22>
 800eaaa:	89a3      	ldrh	r3, [r4, #12]
 800eaac:	0598      	lsls	r0, r3, #22
 800eaae:	d402      	bmi.n	800eab6 <_puts_r+0x22>
 800eab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eab2:	f000 f88e 	bl	800ebd2 <__retarget_lock_acquire_recursive>
 800eab6:	89a3      	ldrh	r3, [r4, #12]
 800eab8:	0719      	lsls	r1, r3, #28
 800eaba:	d513      	bpl.n	800eae4 <_puts_r+0x50>
 800eabc:	6923      	ldr	r3, [r4, #16]
 800eabe:	b18b      	cbz	r3, 800eae4 <_puts_r+0x50>
 800eac0:	3e01      	subs	r6, #1
 800eac2:	68a3      	ldr	r3, [r4, #8]
 800eac4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eac8:	3b01      	subs	r3, #1
 800eaca:	60a3      	str	r3, [r4, #8]
 800eacc:	b9e9      	cbnz	r1, 800eb0a <_puts_r+0x76>
 800eace:	2b00      	cmp	r3, #0
 800ead0:	da2e      	bge.n	800eb30 <_puts_r+0x9c>
 800ead2:	4622      	mov	r2, r4
 800ead4:	210a      	movs	r1, #10
 800ead6:	4628      	mov	r0, r5
 800ead8:	f000 fe16 	bl	800f708 <__swbuf_r>
 800eadc:	3001      	adds	r0, #1
 800eade:	d007      	beq.n	800eaf0 <_puts_r+0x5c>
 800eae0:	250a      	movs	r5, #10
 800eae2:	e007      	b.n	800eaf4 <_puts_r+0x60>
 800eae4:	4621      	mov	r1, r4
 800eae6:	4628      	mov	r0, r5
 800eae8:	f000 fe4c 	bl	800f784 <__swsetup_r>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	d0e7      	beq.n	800eac0 <_puts_r+0x2c>
 800eaf0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800eaf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eaf6:	07da      	lsls	r2, r3, #31
 800eaf8:	d405      	bmi.n	800eb06 <_puts_r+0x72>
 800eafa:	89a3      	ldrh	r3, [r4, #12]
 800eafc:	059b      	lsls	r3, r3, #22
 800eafe:	d402      	bmi.n	800eb06 <_puts_r+0x72>
 800eb00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb02:	f000 f867 	bl	800ebd4 <__retarget_lock_release_recursive>
 800eb06:	4628      	mov	r0, r5
 800eb08:	bd70      	pop	{r4, r5, r6, pc}
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	da04      	bge.n	800eb18 <_puts_r+0x84>
 800eb0e:	69a2      	ldr	r2, [r4, #24]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	dc06      	bgt.n	800eb22 <_puts_r+0x8e>
 800eb14:	290a      	cmp	r1, #10
 800eb16:	d004      	beq.n	800eb22 <_puts_r+0x8e>
 800eb18:	6823      	ldr	r3, [r4, #0]
 800eb1a:	1c5a      	adds	r2, r3, #1
 800eb1c:	6022      	str	r2, [r4, #0]
 800eb1e:	7019      	strb	r1, [r3, #0]
 800eb20:	e7cf      	b.n	800eac2 <_puts_r+0x2e>
 800eb22:	4622      	mov	r2, r4
 800eb24:	4628      	mov	r0, r5
 800eb26:	f000 fdef 	bl	800f708 <__swbuf_r>
 800eb2a:	3001      	adds	r0, #1
 800eb2c:	d1c9      	bne.n	800eac2 <_puts_r+0x2e>
 800eb2e:	e7df      	b.n	800eaf0 <_puts_r+0x5c>
 800eb30:	6823      	ldr	r3, [r4, #0]
 800eb32:	250a      	movs	r5, #10
 800eb34:	1c5a      	adds	r2, r3, #1
 800eb36:	6022      	str	r2, [r4, #0]
 800eb38:	701d      	strb	r5, [r3, #0]
 800eb3a:	e7db      	b.n	800eaf4 <_puts_r+0x60>

0800eb3c <puts>:
 800eb3c:	4b02      	ldr	r3, [pc, #8]	; (800eb48 <puts+0xc>)
 800eb3e:	4601      	mov	r1, r0
 800eb40:	6818      	ldr	r0, [r3, #0]
 800eb42:	f7ff bfa7 	b.w	800ea94 <_puts_r>
 800eb46:	bf00      	nop
 800eb48:	20000164 	.word	0x20000164

0800eb4c <memset>:
 800eb4c:	4402      	add	r2, r0
 800eb4e:	4603      	mov	r3, r0
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d100      	bne.n	800eb56 <memset+0xa>
 800eb54:	4770      	bx	lr
 800eb56:	f803 1b01 	strb.w	r1, [r3], #1
 800eb5a:	e7f9      	b.n	800eb50 <memset+0x4>

0800eb5c <_sbrk_r>:
 800eb5c:	b538      	push	{r3, r4, r5, lr}
 800eb5e:	4d06      	ldr	r5, [pc, #24]	; (800eb78 <_sbrk_r+0x1c>)
 800eb60:	2300      	movs	r3, #0
 800eb62:	4604      	mov	r4, r0
 800eb64:	4608      	mov	r0, r1
 800eb66:	602b      	str	r3, [r5, #0]
 800eb68:	f7f2 fbee 	bl	8001348 <_sbrk>
 800eb6c:	1c43      	adds	r3, r0, #1
 800eb6e:	d102      	bne.n	800eb76 <_sbrk_r+0x1a>
 800eb70:	682b      	ldr	r3, [r5, #0]
 800eb72:	b103      	cbz	r3, 800eb76 <_sbrk_r+0x1a>
 800eb74:	6023      	str	r3, [r4, #0]
 800eb76:	bd38      	pop	{r3, r4, r5, pc}
 800eb78:	200043b8 	.word	0x200043b8

0800eb7c <__errno>:
 800eb7c:	4b01      	ldr	r3, [pc, #4]	; (800eb84 <__errno+0x8>)
 800eb7e:	6818      	ldr	r0, [r3, #0]
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	20000164 	.word	0x20000164

0800eb88 <__libc_init_array>:
 800eb88:	b570      	push	{r4, r5, r6, lr}
 800eb8a:	4d0d      	ldr	r5, [pc, #52]	; (800ebc0 <__libc_init_array+0x38>)
 800eb8c:	4c0d      	ldr	r4, [pc, #52]	; (800ebc4 <__libc_init_array+0x3c>)
 800eb8e:	1b64      	subs	r4, r4, r5
 800eb90:	10a4      	asrs	r4, r4, #2
 800eb92:	2600      	movs	r6, #0
 800eb94:	42a6      	cmp	r6, r4
 800eb96:	d109      	bne.n	800ebac <__libc_init_array+0x24>
 800eb98:	4d0b      	ldr	r5, [pc, #44]	; (800ebc8 <__libc_init_array+0x40>)
 800eb9a:	4c0c      	ldr	r4, [pc, #48]	; (800ebcc <__libc_init_array+0x44>)
 800eb9c:	f000 ff44 	bl	800fa28 <_init>
 800eba0:	1b64      	subs	r4, r4, r5
 800eba2:	10a4      	asrs	r4, r4, #2
 800eba4:	2600      	movs	r6, #0
 800eba6:	42a6      	cmp	r6, r4
 800eba8:	d105      	bne.n	800ebb6 <__libc_init_array+0x2e>
 800ebaa:	bd70      	pop	{r4, r5, r6, pc}
 800ebac:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebb0:	4798      	blx	r3
 800ebb2:	3601      	adds	r6, #1
 800ebb4:	e7ee      	b.n	800eb94 <__libc_init_array+0xc>
 800ebb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebba:	4798      	blx	r3
 800ebbc:	3601      	adds	r6, #1
 800ebbe:	e7f2      	b.n	800eba6 <__libc_init_array+0x1e>
 800ebc0:	0800fd04 	.word	0x0800fd04
 800ebc4:	0800fd04 	.word	0x0800fd04
 800ebc8:	0800fd04 	.word	0x0800fd04
 800ebcc:	0800fd08 	.word	0x0800fd08

0800ebd0 <__retarget_lock_init_recursive>:
 800ebd0:	4770      	bx	lr

0800ebd2 <__retarget_lock_acquire_recursive>:
 800ebd2:	4770      	bx	lr

0800ebd4 <__retarget_lock_release_recursive>:
 800ebd4:	4770      	bx	lr
	...

0800ebd8 <_free_r>:
 800ebd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebda:	2900      	cmp	r1, #0
 800ebdc:	d044      	beq.n	800ec68 <_free_r+0x90>
 800ebde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebe2:	9001      	str	r0, [sp, #4]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f1a1 0404 	sub.w	r4, r1, #4
 800ebea:	bfb8      	it	lt
 800ebec:	18e4      	addlt	r4, r4, r3
 800ebee:	f7ff fe71 	bl	800e8d4 <__malloc_lock>
 800ebf2:	4a1e      	ldr	r2, [pc, #120]	; (800ec6c <_free_r+0x94>)
 800ebf4:	9801      	ldr	r0, [sp, #4]
 800ebf6:	6813      	ldr	r3, [r2, #0]
 800ebf8:	b933      	cbnz	r3, 800ec08 <_free_r+0x30>
 800ebfa:	6063      	str	r3, [r4, #4]
 800ebfc:	6014      	str	r4, [r2, #0]
 800ebfe:	b003      	add	sp, #12
 800ec00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec04:	f7ff be6c 	b.w	800e8e0 <__malloc_unlock>
 800ec08:	42a3      	cmp	r3, r4
 800ec0a:	d908      	bls.n	800ec1e <_free_r+0x46>
 800ec0c:	6825      	ldr	r5, [r4, #0]
 800ec0e:	1961      	adds	r1, r4, r5
 800ec10:	428b      	cmp	r3, r1
 800ec12:	bf01      	itttt	eq
 800ec14:	6819      	ldreq	r1, [r3, #0]
 800ec16:	685b      	ldreq	r3, [r3, #4]
 800ec18:	1949      	addeq	r1, r1, r5
 800ec1a:	6021      	streq	r1, [r4, #0]
 800ec1c:	e7ed      	b.n	800ebfa <_free_r+0x22>
 800ec1e:	461a      	mov	r2, r3
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	b10b      	cbz	r3, 800ec28 <_free_r+0x50>
 800ec24:	42a3      	cmp	r3, r4
 800ec26:	d9fa      	bls.n	800ec1e <_free_r+0x46>
 800ec28:	6811      	ldr	r1, [r2, #0]
 800ec2a:	1855      	adds	r5, r2, r1
 800ec2c:	42a5      	cmp	r5, r4
 800ec2e:	d10b      	bne.n	800ec48 <_free_r+0x70>
 800ec30:	6824      	ldr	r4, [r4, #0]
 800ec32:	4421      	add	r1, r4
 800ec34:	1854      	adds	r4, r2, r1
 800ec36:	42a3      	cmp	r3, r4
 800ec38:	6011      	str	r1, [r2, #0]
 800ec3a:	d1e0      	bne.n	800ebfe <_free_r+0x26>
 800ec3c:	681c      	ldr	r4, [r3, #0]
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	6053      	str	r3, [r2, #4]
 800ec42:	440c      	add	r4, r1
 800ec44:	6014      	str	r4, [r2, #0]
 800ec46:	e7da      	b.n	800ebfe <_free_r+0x26>
 800ec48:	d902      	bls.n	800ec50 <_free_r+0x78>
 800ec4a:	230c      	movs	r3, #12
 800ec4c:	6003      	str	r3, [r0, #0]
 800ec4e:	e7d6      	b.n	800ebfe <_free_r+0x26>
 800ec50:	6825      	ldr	r5, [r4, #0]
 800ec52:	1961      	adds	r1, r4, r5
 800ec54:	428b      	cmp	r3, r1
 800ec56:	bf04      	itt	eq
 800ec58:	6819      	ldreq	r1, [r3, #0]
 800ec5a:	685b      	ldreq	r3, [r3, #4]
 800ec5c:	6063      	str	r3, [r4, #4]
 800ec5e:	bf04      	itt	eq
 800ec60:	1949      	addeq	r1, r1, r5
 800ec62:	6021      	streq	r1, [r4, #0]
 800ec64:	6054      	str	r4, [r2, #4]
 800ec66:	e7ca      	b.n	800ebfe <_free_r+0x26>
 800ec68:	b003      	add	sp, #12
 800ec6a:	bd30      	pop	{r4, r5, pc}
 800ec6c:	20004270 	.word	0x20004270

0800ec70 <__ssputs_r>:
 800ec70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec74:	688e      	ldr	r6, [r1, #8]
 800ec76:	461f      	mov	r7, r3
 800ec78:	42be      	cmp	r6, r7
 800ec7a:	680b      	ldr	r3, [r1, #0]
 800ec7c:	4682      	mov	sl, r0
 800ec7e:	460c      	mov	r4, r1
 800ec80:	4690      	mov	r8, r2
 800ec82:	d82c      	bhi.n	800ecde <__ssputs_r+0x6e>
 800ec84:	898a      	ldrh	r2, [r1, #12]
 800ec86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec8a:	d026      	beq.n	800ecda <__ssputs_r+0x6a>
 800ec8c:	6965      	ldr	r5, [r4, #20]
 800ec8e:	6909      	ldr	r1, [r1, #16]
 800ec90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec94:	eba3 0901 	sub.w	r9, r3, r1
 800ec98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec9c:	1c7b      	adds	r3, r7, #1
 800ec9e:	444b      	add	r3, r9
 800eca0:	106d      	asrs	r5, r5, #1
 800eca2:	429d      	cmp	r5, r3
 800eca4:	bf38      	it	cc
 800eca6:	461d      	movcc	r5, r3
 800eca8:	0553      	lsls	r3, r2, #21
 800ecaa:	d527      	bpl.n	800ecfc <__ssputs_r+0x8c>
 800ecac:	4629      	mov	r1, r5
 800ecae:	f7ff fd5d 	bl	800e76c <_malloc_r>
 800ecb2:	4606      	mov	r6, r0
 800ecb4:	b360      	cbz	r0, 800ed10 <__ssputs_r+0xa0>
 800ecb6:	6921      	ldr	r1, [r4, #16]
 800ecb8:	464a      	mov	r2, r9
 800ecba:	f000 fe9f 	bl	800f9fc <memcpy>
 800ecbe:	89a3      	ldrh	r3, [r4, #12]
 800ecc0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ecc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecc8:	81a3      	strh	r3, [r4, #12]
 800ecca:	6126      	str	r6, [r4, #16]
 800eccc:	6165      	str	r5, [r4, #20]
 800ecce:	444e      	add	r6, r9
 800ecd0:	eba5 0509 	sub.w	r5, r5, r9
 800ecd4:	6026      	str	r6, [r4, #0]
 800ecd6:	60a5      	str	r5, [r4, #8]
 800ecd8:	463e      	mov	r6, r7
 800ecda:	42be      	cmp	r6, r7
 800ecdc:	d900      	bls.n	800ece0 <__ssputs_r+0x70>
 800ecde:	463e      	mov	r6, r7
 800ece0:	6820      	ldr	r0, [r4, #0]
 800ece2:	4632      	mov	r2, r6
 800ece4:	4641      	mov	r1, r8
 800ece6:	f000 fe07 	bl	800f8f8 <memmove>
 800ecea:	68a3      	ldr	r3, [r4, #8]
 800ecec:	1b9b      	subs	r3, r3, r6
 800ecee:	60a3      	str	r3, [r4, #8]
 800ecf0:	6823      	ldr	r3, [r4, #0]
 800ecf2:	4433      	add	r3, r6
 800ecf4:	6023      	str	r3, [r4, #0]
 800ecf6:	2000      	movs	r0, #0
 800ecf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecfc:	462a      	mov	r2, r5
 800ecfe:	f000 fcd4 	bl	800f6aa <_realloc_r>
 800ed02:	4606      	mov	r6, r0
 800ed04:	2800      	cmp	r0, #0
 800ed06:	d1e0      	bne.n	800ecca <__ssputs_r+0x5a>
 800ed08:	6921      	ldr	r1, [r4, #16]
 800ed0a:	4650      	mov	r0, sl
 800ed0c:	f7ff ff64 	bl	800ebd8 <_free_r>
 800ed10:	230c      	movs	r3, #12
 800ed12:	f8ca 3000 	str.w	r3, [sl]
 800ed16:	89a3      	ldrh	r3, [r4, #12]
 800ed18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed1c:	81a3      	strh	r3, [r4, #12]
 800ed1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed22:	e7e9      	b.n	800ecf8 <__ssputs_r+0x88>

0800ed24 <_svfiprintf_r>:
 800ed24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed28:	4698      	mov	r8, r3
 800ed2a:	898b      	ldrh	r3, [r1, #12]
 800ed2c:	061b      	lsls	r3, r3, #24
 800ed2e:	b09d      	sub	sp, #116	; 0x74
 800ed30:	4607      	mov	r7, r0
 800ed32:	460d      	mov	r5, r1
 800ed34:	4614      	mov	r4, r2
 800ed36:	d50e      	bpl.n	800ed56 <_svfiprintf_r+0x32>
 800ed38:	690b      	ldr	r3, [r1, #16]
 800ed3a:	b963      	cbnz	r3, 800ed56 <_svfiprintf_r+0x32>
 800ed3c:	2140      	movs	r1, #64	; 0x40
 800ed3e:	f7ff fd15 	bl	800e76c <_malloc_r>
 800ed42:	6028      	str	r0, [r5, #0]
 800ed44:	6128      	str	r0, [r5, #16]
 800ed46:	b920      	cbnz	r0, 800ed52 <_svfiprintf_r+0x2e>
 800ed48:	230c      	movs	r3, #12
 800ed4a:	603b      	str	r3, [r7, #0]
 800ed4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed50:	e0d0      	b.n	800eef4 <_svfiprintf_r+0x1d0>
 800ed52:	2340      	movs	r3, #64	; 0x40
 800ed54:	616b      	str	r3, [r5, #20]
 800ed56:	2300      	movs	r3, #0
 800ed58:	9309      	str	r3, [sp, #36]	; 0x24
 800ed5a:	2320      	movs	r3, #32
 800ed5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed60:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed64:	2330      	movs	r3, #48	; 0x30
 800ed66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ef0c <_svfiprintf_r+0x1e8>
 800ed6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed6e:	f04f 0901 	mov.w	r9, #1
 800ed72:	4623      	mov	r3, r4
 800ed74:	469a      	mov	sl, r3
 800ed76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed7a:	b10a      	cbz	r2, 800ed80 <_svfiprintf_r+0x5c>
 800ed7c:	2a25      	cmp	r2, #37	; 0x25
 800ed7e:	d1f9      	bne.n	800ed74 <_svfiprintf_r+0x50>
 800ed80:	ebba 0b04 	subs.w	fp, sl, r4
 800ed84:	d00b      	beq.n	800ed9e <_svfiprintf_r+0x7a>
 800ed86:	465b      	mov	r3, fp
 800ed88:	4622      	mov	r2, r4
 800ed8a:	4629      	mov	r1, r5
 800ed8c:	4638      	mov	r0, r7
 800ed8e:	f7ff ff6f 	bl	800ec70 <__ssputs_r>
 800ed92:	3001      	adds	r0, #1
 800ed94:	f000 80a9 	beq.w	800eeea <_svfiprintf_r+0x1c6>
 800ed98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed9a:	445a      	add	r2, fp
 800ed9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ed9e:	f89a 3000 	ldrb.w	r3, [sl]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	f000 80a1 	beq.w	800eeea <_svfiprintf_r+0x1c6>
 800eda8:	2300      	movs	r3, #0
 800edaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800edae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edb2:	f10a 0a01 	add.w	sl, sl, #1
 800edb6:	9304      	str	r3, [sp, #16]
 800edb8:	9307      	str	r3, [sp, #28]
 800edba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800edbe:	931a      	str	r3, [sp, #104]	; 0x68
 800edc0:	4654      	mov	r4, sl
 800edc2:	2205      	movs	r2, #5
 800edc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edc8:	4850      	ldr	r0, [pc, #320]	; (800ef0c <_svfiprintf_r+0x1e8>)
 800edca:	f7f1 fa41 	bl	8000250 <memchr>
 800edce:	9a04      	ldr	r2, [sp, #16]
 800edd0:	b9d8      	cbnz	r0, 800ee0a <_svfiprintf_r+0xe6>
 800edd2:	06d0      	lsls	r0, r2, #27
 800edd4:	bf44      	itt	mi
 800edd6:	2320      	movmi	r3, #32
 800edd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eddc:	0711      	lsls	r1, r2, #28
 800edde:	bf44      	itt	mi
 800ede0:	232b      	movmi	r3, #43	; 0x2b
 800ede2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ede6:	f89a 3000 	ldrb.w	r3, [sl]
 800edea:	2b2a      	cmp	r3, #42	; 0x2a
 800edec:	d015      	beq.n	800ee1a <_svfiprintf_r+0xf6>
 800edee:	9a07      	ldr	r2, [sp, #28]
 800edf0:	4654      	mov	r4, sl
 800edf2:	2000      	movs	r0, #0
 800edf4:	f04f 0c0a 	mov.w	ip, #10
 800edf8:	4621      	mov	r1, r4
 800edfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edfe:	3b30      	subs	r3, #48	; 0x30
 800ee00:	2b09      	cmp	r3, #9
 800ee02:	d94d      	bls.n	800eea0 <_svfiprintf_r+0x17c>
 800ee04:	b1b0      	cbz	r0, 800ee34 <_svfiprintf_r+0x110>
 800ee06:	9207      	str	r2, [sp, #28]
 800ee08:	e014      	b.n	800ee34 <_svfiprintf_r+0x110>
 800ee0a:	eba0 0308 	sub.w	r3, r0, r8
 800ee0e:	fa09 f303 	lsl.w	r3, r9, r3
 800ee12:	4313      	orrs	r3, r2
 800ee14:	9304      	str	r3, [sp, #16]
 800ee16:	46a2      	mov	sl, r4
 800ee18:	e7d2      	b.n	800edc0 <_svfiprintf_r+0x9c>
 800ee1a:	9b03      	ldr	r3, [sp, #12]
 800ee1c:	1d19      	adds	r1, r3, #4
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	9103      	str	r1, [sp, #12]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	bfbb      	ittet	lt
 800ee26:	425b      	neglt	r3, r3
 800ee28:	f042 0202 	orrlt.w	r2, r2, #2
 800ee2c:	9307      	strge	r3, [sp, #28]
 800ee2e:	9307      	strlt	r3, [sp, #28]
 800ee30:	bfb8      	it	lt
 800ee32:	9204      	strlt	r2, [sp, #16]
 800ee34:	7823      	ldrb	r3, [r4, #0]
 800ee36:	2b2e      	cmp	r3, #46	; 0x2e
 800ee38:	d10c      	bne.n	800ee54 <_svfiprintf_r+0x130>
 800ee3a:	7863      	ldrb	r3, [r4, #1]
 800ee3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ee3e:	d134      	bne.n	800eeaa <_svfiprintf_r+0x186>
 800ee40:	9b03      	ldr	r3, [sp, #12]
 800ee42:	1d1a      	adds	r2, r3, #4
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	9203      	str	r2, [sp, #12]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	bfb8      	it	lt
 800ee4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ee50:	3402      	adds	r4, #2
 800ee52:	9305      	str	r3, [sp, #20]
 800ee54:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ef1c <_svfiprintf_r+0x1f8>
 800ee58:	7821      	ldrb	r1, [r4, #0]
 800ee5a:	2203      	movs	r2, #3
 800ee5c:	4650      	mov	r0, sl
 800ee5e:	f7f1 f9f7 	bl	8000250 <memchr>
 800ee62:	b138      	cbz	r0, 800ee74 <_svfiprintf_r+0x150>
 800ee64:	9b04      	ldr	r3, [sp, #16]
 800ee66:	eba0 000a 	sub.w	r0, r0, sl
 800ee6a:	2240      	movs	r2, #64	; 0x40
 800ee6c:	4082      	lsls	r2, r0
 800ee6e:	4313      	orrs	r3, r2
 800ee70:	3401      	adds	r4, #1
 800ee72:	9304      	str	r3, [sp, #16]
 800ee74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee78:	4825      	ldr	r0, [pc, #148]	; (800ef10 <_svfiprintf_r+0x1ec>)
 800ee7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee7e:	2206      	movs	r2, #6
 800ee80:	f7f1 f9e6 	bl	8000250 <memchr>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d038      	beq.n	800eefa <_svfiprintf_r+0x1d6>
 800ee88:	4b22      	ldr	r3, [pc, #136]	; (800ef14 <_svfiprintf_r+0x1f0>)
 800ee8a:	bb1b      	cbnz	r3, 800eed4 <_svfiprintf_r+0x1b0>
 800ee8c:	9b03      	ldr	r3, [sp, #12]
 800ee8e:	3307      	adds	r3, #7
 800ee90:	f023 0307 	bic.w	r3, r3, #7
 800ee94:	3308      	adds	r3, #8
 800ee96:	9303      	str	r3, [sp, #12]
 800ee98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee9a:	4433      	add	r3, r6
 800ee9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee9e:	e768      	b.n	800ed72 <_svfiprintf_r+0x4e>
 800eea0:	fb0c 3202 	mla	r2, ip, r2, r3
 800eea4:	460c      	mov	r4, r1
 800eea6:	2001      	movs	r0, #1
 800eea8:	e7a6      	b.n	800edf8 <_svfiprintf_r+0xd4>
 800eeaa:	2300      	movs	r3, #0
 800eeac:	3401      	adds	r4, #1
 800eeae:	9305      	str	r3, [sp, #20]
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	f04f 0c0a 	mov.w	ip, #10
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eebc:	3a30      	subs	r2, #48	; 0x30
 800eebe:	2a09      	cmp	r2, #9
 800eec0:	d903      	bls.n	800eeca <_svfiprintf_r+0x1a6>
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d0c6      	beq.n	800ee54 <_svfiprintf_r+0x130>
 800eec6:	9105      	str	r1, [sp, #20]
 800eec8:	e7c4      	b.n	800ee54 <_svfiprintf_r+0x130>
 800eeca:	fb0c 2101 	mla	r1, ip, r1, r2
 800eece:	4604      	mov	r4, r0
 800eed0:	2301      	movs	r3, #1
 800eed2:	e7f0      	b.n	800eeb6 <_svfiprintf_r+0x192>
 800eed4:	ab03      	add	r3, sp, #12
 800eed6:	9300      	str	r3, [sp, #0]
 800eed8:	462a      	mov	r2, r5
 800eeda:	4b0f      	ldr	r3, [pc, #60]	; (800ef18 <_svfiprintf_r+0x1f4>)
 800eedc:	a904      	add	r1, sp, #16
 800eede:	4638      	mov	r0, r7
 800eee0:	f3af 8000 	nop.w
 800eee4:	1c42      	adds	r2, r0, #1
 800eee6:	4606      	mov	r6, r0
 800eee8:	d1d6      	bne.n	800ee98 <_svfiprintf_r+0x174>
 800eeea:	89ab      	ldrh	r3, [r5, #12]
 800eeec:	065b      	lsls	r3, r3, #25
 800eeee:	f53f af2d 	bmi.w	800ed4c <_svfiprintf_r+0x28>
 800eef2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eef4:	b01d      	add	sp, #116	; 0x74
 800eef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eefa:	ab03      	add	r3, sp, #12
 800eefc:	9300      	str	r3, [sp, #0]
 800eefe:	462a      	mov	r2, r5
 800ef00:	4b05      	ldr	r3, [pc, #20]	; (800ef18 <_svfiprintf_r+0x1f4>)
 800ef02:	a904      	add	r1, sp, #16
 800ef04:	4638      	mov	r0, r7
 800ef06:	f000 f9bd 	bl	800f284 <_printf_i>
 800ef0a:	e7eb      	b.n	800eee4 <_svfiprintf_r+0x1c0>
 800ef0c:	0800fcc8 	.word	0x0800fcc8
 800ef10:	0800fcd2 	.word	0x0800fcd2
 800ef14:	00000000 	.word	0x00000000
 800ef18:	0800ec71 	.word	0x0800ec71
 800ef1c:	0800fcce 	.word	0x0800fcce

0800ef20 <__sfputc_r>:
 800ef20:	6893      	ldr	r3, [r2, #8]
 800ef22:	3b01      	subs	r3, #1
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	b410      	push	{r4}
 800ef28:	6093      	str	r3, [r2, #8]
 800ef2a:	da08      	bge.n	800ef3e <__sfputc_r+0x1e>
 800ef2c:	6994      	ldr	r4, [r2, #24]
 800ef2e:	42a3      	cmp	r3, r4
 800ef30:	db01      	blt.n	800ef36 <__sfputc_r+0x16>
 800ef32:	290a      	cmp	r1, #10
 800ef34:	d103      	bne.n	800ef3e <__sfputc_r+0x1e>
 800ef36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef3a:	f000 bbe5 	b.w	800f708 <__swbuf_r>
 800ef3e:	6813      	ldr	r3, [r2, #0]
 800ef40:	1c58      	adds	r0, r3, #1
 800ef42:	6010      	str	r0, [r2, #0]
 800ef44:	7019      	strb	r1, [r3, #0]
 800ef46:	4608      	mov	r0, r1
 800ef48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef4c:	4770      	bx	lr

0800ef4e <__sfputs_r>:
 800ef4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef50:	4606      	mov	r6, r0
 800ef52:	460f      	mov	r7, r1
 800ef54:	4614      	mov	r4, r2
 800ef56:	18d5      	adds	r5, r2, r3
 800ef58:	42ac      	cmp	r4, r5
 800ef5a:	d101      	bne.n	800ef60 <__sfputs_r+0x12>
 800ef5c:	2000      	movs	r0, #0
 800ef5e:	e007      	b.n	800ef70 <__sfputs_r+0x22>
 800ef60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef64:	463a      	mov	r2, r7
 800ef66:	4630      	mov	r0, r6
 800ef68:	f7ff ffda 	bl	800ef20 <__sfputc_r>
 800ef6c:	1c43      	adds	r3, r0, #1
 800ef6e:	d1f3      	bne.n	800ef58 <__sfputs_r+0xa>
 800ef70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ef74 <_vfiprintf_r>:
 800ef74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef78:	460d      	mov	r5, r1
 800ef7a:	b09d      	sub	sp, #116	; 0x74
 800ef7c:	4614      	mov	r4, r2
 800ef7e:	4698      	mov	r8, r3
 800ef80:	4606      	mov	r6, r0
 800ef82:	b118      	cbz	r0, 800ef8c <_vfiprintf_r+0x18>
 800ef84:	6a03      	ldr	r3, [r0, #32]
 800ef86:	b90b      	cbnz	r3, 800ef8c <_vfiprintf_r+0x18>
 800ef88:	f7ff fd3c 	bl	800ea04 <__sinit>
 800ef8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef8e:	07d9      	lsls	r1, r3, #31
 800ef90:	d405      	bmi.n	800ef9e <_vfiprintf_r+0x2a>
 800ef92:	89ab      	ldrh	r3, [r5, #12]
 800ef94:	059a      	lsls	r2, r3, #22
 800ef96:	d402      	bmi.n	800ef9e <_vfiprintf_r+0x2a>
 800ef98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef9a:	f7ff fe1a 	bl	800ebd2 <__retarget_lock_acquire_recursive>
 800ef9e:	89ab      	ldrh	r3, [r5, #12]
 800efa0:	071b      	lsls	r3, r3, #28
 800efa2:	d501      	bpl.n	800efa8 <_vfiprintf_r+0x34>
 800efa4:	692b      	ldr	r3, [r5, #16]
 800efa6:	b99b      	cbnz	r3, 800efd0 <_vfiprintf_r+0x5c>
 800efa8:	4629      	mov	r1, r5
 800efaa:	4630      	mov	r0, r6
 800efac:	f000 fbea 	bl	800f784 <__swsetup_r>
 800efb0:	b170      	cbz	r0, 800efd0 <_vfiprintf_r+0x5c>
 800efb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efb4:	07dc      	lsls	r4, r3, #31
 800efb6:	d504      	bpl.n	800efc2 <_vfiprintf_r+0x4e>
 800efb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efbc:	b01d      	add	sp, #116	; 0x74
 800efbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efc2:	89ab      	ldrh	r3, [r5, #12]
 800efc4:	0598      	lsls	r0, r3, #22
 800efc6:	d4f7      	bmi.n	800efb8 <_vfiprintf_r+0x44>
 800efc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efca:	f7ff fe03 	bl	800ebd4 <__retarget_lock_release_recursive>
 800efce:	e7f3      	b.n	800efb8 <_vfiprintf_r+0x44>
 800efd0:	2300      	movs	r3, #0
 800efd2:	9309      	str	r3, [sp, #36]	; 0x24
 800efd4:	2320      	movs	r3, #32
 800efd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800efda:	f8cd 800c 	str.w	r8, [sp, #12]
 800efde:	2330      	movs	r3, #48	; 0x30
 800efe0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f194 <_vfiprintf_r+0x220>
 800efe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800efe8:	f04f 0901 	mov.w	r9, #1
 800efec:	4623      	mov	r3, r4
 800efee:	469a      	mov	sl, r3
 800eff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eff4:	b10a      	cbz	r2, 800effa <_vfiprintf_r+0x86>
 800eff6:	2a25      	cmp	r2, #37	; 0x25
 800eff8:	d1f9      	bne.n	800efee <_vfiprintf_r+0x7a>
 800effa:	ebba 0b04 	subs.w	fp, sl, r4
 800effe:	d00b      	beq.n	800f018 <_vfiprintf_r+0xa4>
 800f000:	465b      	mov	r3, fp
 800f002:	4622      	mov	r2, r4
 800f004:	4629      	mov	r1, r5
 800f006:	4630      	mov	r0, r6
 800f008:	f7ff ffa1 	bl	800ef4e <__sfputs_r>
 800f00c:	3001      	adds	r0, #1
 800f00e:	f000 80a9 	beq.w	800f164 <_vfiprintf_r+0x1f0>
 800f012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f014:	445a      	add	r2, fp
 800f016:	9209      	str	r2, [sp, #36]	; 0x24
 800f018:	f89a 3000 	ldrb.w	r3, [sl]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	f000 80a1 	beq.w	800f164 <_vfiprintf_r+0x1f0>
 800f022:	2300      	movs	r3, #0
 800f024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f02c:	f10a 0a01 	add.w	sl, sl, #1
 800f030:	9304      	str	r3, [sp, #16]
 800f032:	9307      	str	r3, [sp, #28]
 800f034:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f038:	931a      	str	r3, [sp, #104]	; 0x68
 800f03a:	4654      	mov	r4, sl
 800f03c:	2205      	movs	r2, #5
 800f03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f042:	4854      	ldr	r0, [pc, #336]	; (800f194 <_vfiprintf_r+0x220>)
 800f044:	f7f1 f904 	bl	8000250 <memchr>
 800f048:	9a04      	ldr	r2, [sp, #16]
 800f04a:	b9d8      	cbnz	r0, 800f084 <_vfiprintf_r+0x110>
 800f04c:	06d1      	lsls	r1, r2, #27
 800f04e:	bf44      	itt	mi
 800f050:	2320      	movmi	r3, #32
 800f052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f056:	0713      	lsls	r3, r2, #28
 800f058:	bf44      	itt	mi
 800f05a:	232b      	movmi	r3, #43	; 0x2b
 800f05c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f060:	f89a 3000 	ldrb.w	r3, [sl]
 800f064:	2b2a      	cmp	r3, #42	; 0x2a
 800f066:	d015      	beq.n	800f094 <_vfiprintf_r+0x120>
 800f068:	9a07      	ldr	r2, [sp, #28]
 800f06a:	4654      	mov	r4, sl
 800f06c:	2000      	movs	r0, #0
 800f06e:	f04f 0c0a 	mov.w	ip, #10
 800f072:	4621      	mov	r1, r4
 800f074:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f078:	3b30      	subs	r3, #48	; 0x30
 800f07a:	2b09      	cmp	r3, #9
 800f07c:	d94d      	bls.n	800f11a <_vfiprintf_r+0x1a6>
 800f07e:	b1b0      	cbz	r0, 800f0ae <_vfiprintf_r+0x13a>
 800f080:	9207      	str	r2, [sp, #28]
 800f082:	e014      	b.n	800f0ae <_vfiprintf_r+0x13a>
 800f084:	eba0 0308 	sub.w	r3, r0, r8
 800f088:	fa09 f303 	lsl.w	r3, r9, r3
 800f08c:	4313      	orrs	r3, r2
 800f08e:	9304      	str	r3, [sp, #16]
 800f090:	46a2      	mov	sl, r4
 800f092:	e7d2      	b.n	800f03a <_vfiprintf_r+0xc6>
 800f094:	9b03      	ldr	r3, [sp, #12]
 800f096:	1d19      	adds	r1, r3, #4
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	9103      	str	r1, [sp, #12]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	bfbb      	ittet	lt
 800f0a0:	425b      	neglt	r3, r3
 800f0a2:	f042 0202 	orrlt.w	r2, r2, #2
 800f0a6:	9307      	strge	r3, [sp, #28]
 800f0a8:	9307      	strlt	r3, [sp, #28]
 800f0aa:	bfb8      	it	lt
 800f0ac:	9204      	strlt	r2, [sp, #16]
 800f0ae:	7823      	ldrb	r3, [r4, #0]
 800f0b0:	2b2e      	cmp	r3, #46	; 0x2e
 800f0b2:	d10c      	bne.n	800f0ce <_vfiprintf_r+0x15a>
 800f0b4:	7863      	ldrb	r3, [r4, #1]
 800f0b6:	2b2a      	cmp	r3, #42	; 0x2a
 800f0b8:	d134      	bne.n	800f124 <_vfiprintf_r+0x1b0>
 800f0ba:	9b03      	ldr	r3, [sp, #12]
 800f0bc:	1d1a      	adds	r2, r3, #4
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	9203      	str	r2, [sp, #12]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	bfb8      	it	lt
 800f0c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f0ca:	3402      	adds	r4, #2
 800f0cc:	9305      	str	r3, [sp, #20]
 800f0ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f1a4 <_vfiprintf_r+0x230>
 800f0d2:	7821      	ldrb	r1, [r4, #0]
 800f0d4:	2203      	movs	r2, #3
 800f0d6:	4650      	mov	r0, sl
 800f0d8:	f7f1 f8ba 	bl	8000250 <memchr>
 800f0dc:	b138      	cbz	r0, 800f0ee <_vfiprintf_r+0x17a>
 800f0de:	9b04      	ldr	r3, [sp, #16]
 800f0e0:	eba0 000a 	sub.w	r0, r0, sl
 800f0e4:	2240      	movs	r2, #64	; 0x40
 800f0e6:	4082      	lsls	r2, r0
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	3401      	adds	r4, #1
 800f0ec:	9304      	str	r3, [sp, #16]
 800f0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0f2:	4829      	ldr	r0, [pc, #164]	; (800f198 <_vfiprintf_r+0x224>)
 800f0f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0f8:	2206      	movs	r2, #6
 800f0fa:	f7f1 f8a9 	bl	8000250 <memchr>
 800f0fe:	2800      	cmp	r0, #0
 800f100:	d03f      	beq.n	800f182 <_vfiprintf_r+0x20e>
 800f102:	4b26      	ldr	r3, [pc, #152]	; (800f19c <_vfiprintf_r+0x228>)
 800f104:	bb1b      	cbnz	r3, 800f14e <_vfiprintf_r+0x1da>
 800f106:	9b03      	ldr	r3, [sp, #12]
 800f108:	3307      	adds	r3, #7
 800f10a:	f023 0307 	bic.w	r3, r3, #7
 800f10e:	3308      	adds	r3, #8
 800f110:	9303      	str	r3, [sp, #12]
 800f112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f114:	443b      	add	r3, r7
 800f116:	9309      	str	r3, [sp, #36]	; 0x24
 800f118:	e768      	b.n	800efec <_vfiprintf_r+0x78>
 800f11a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f11e:	460c      	mov	r4, r1
 800f120:	2001      	movs	r0, #1
 800f122:	e7a6      	b.n	800f072 <_vfiprintf_r+0xfe>
 800f124:	2300      	movs	r3, #0
 800f126:	3401      	adds	r4, #1
 800f128:	9305      	str	r3, [sp, #20]
 800f12a:	4619      	mov	r1, r3
 800f12c:	f04f 0c0a 	mov.w	ip, #10
 800f130:	4620      	mov	r0, r4
 800f132:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f136:	3a30      	subs	r2, #48	; 0x30
 800f138:	2a09      	cmp	r2, #9
 800f13a:	d903      	bls.n	800f144 <_vfiprintf_r+0x1d0>
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d0c6      	beq.n	800f0ce <_vfiprintf_r+0x15a>
 800f140:	9105      	str	r1, [sp, #20]
 800f142:	e7c4      	b.n	800f0ce <_vfiprintf_r+0x15a>
 800f144:	fb0c 2101 	mla	r1, ip, r1, r2
 800f148:	4604      	mov	r4, r0
 800f14a:	2301      	movs	r3, #1
 800f14c:	e7f0      	b.n	800f130 <_vfiprintf_r+0x1bc>
 800f14e:	ab03      	add	r3, sp, #12
 800f150:	9300      	str	r3, [sp, #0]
 800f152:	462a      	mov	r2, r5
 800f154:	4b12      	ldr	r3, [pc, #72]	; (800f1a0 <_vfiprintf_r+0x22c>)
 800f156:	a904      	add	r1, sp, #16
 800f158:	4630      	mov	r0, r6
 800f15a:	f3af 8000 	nop.w
 800f15e:	4607      	mov	r7, r0
 800f160:	1c78      	adds	r0, r7, #1
 800f162:	d1d6      	bne.n	800f112 <_vfiprintf_r+0x19e>
 800f164:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f166:	07d9      	lsls	r1, r3, #31
 800f168:	d405      	bmi.n	800f176 <_vfiprintf_r+0x202>
 800f16a:	89ab      	ldrh	r3, [r5, #12]
 800f16c:	059a      	lsls	r2, r3, #22
 800f16e:	d402      	bmi.n	800f176 <_vfiprintf_r+0x202>
 800f170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f172:	f7ff fd2f 	bl	800ebd4 <__retarget_lock_release_recursive>
 800f176:	89ab      	ldrh	r3, [r5, #12]
 800f178:	065b      	lsls	r3, r3, #25
 800f17a:	f53f af1d 	bmi.w	800efb8 <_vfiprintf_r+0x44>
 800f17e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f180:	e71c      	b.n	800efbc <_vfiprintf_r+0x48>
 800f182:	ab03      	add	r3, sp, #12
 800f184:	9300      	str	r3, [sp, #0]
 800f186:	462a      	mov	r2, r5
 800f188:	4b05      	ldr	r3, [pc, #20]	; (800f1a0 <_vfiprintf_r+0x22c>)
 800f18a:	a904      	add	r1, sp, #16
 800f18c:	4630      	mov	r0, r6
 800f18e:	f000 f879 	bl	800f284 <_printf_i>
 800f192:	e7e4      	b.n	800f15e <_vfiprintf_r+0x1ea>
 800f194:	0800fcc8 	.word	0x0800fcc8
 800f198:	0800fcd2 	.word	0x0800fcd2
 800f19c:	00000000 	.word	0x00000000
 800f1a0:	0800ef4f 	.word	0x0800ef4f
 800f1a4:	0800fcce 	.word	0x0800fcce

0800f1a8 <_printf_common>:
 800f1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1ac:	4616      	mov	r6, r2
 800f1ae:	4699      	mov	r9, r3
 800f1b0:	688a      	ldr	r2, [r1, #8]
 800f1b2:	690b      	ldr	r3, [r1, #16]
 800f1b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	bfb8      	it	lt
 800f1bc:	4613      	movlt	r3, r2
 800f1be:	6033      	str	r3, [r6, #0]
 800f1c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f1c4:	4607      	mov	r7, r0
 800f1c6:	460c      	mov	r4, r1
 800f1c8:	b10a      	cbz	r2, 800f1ce <_printf_common+0x26>
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	6033      	str	r3, [r6, #0]
 800f1ce:	6823      	ldr	r3, [r4, #0]
 800f1d0:	0699      	lsls	r1, r3, #26
 800f1d2:	bf42      	ittt	mi
 800f1d4:	6833      	ldrmi	r3, [r6, #0]
 800f1d6:	3302      	addmi	r3, #2
 800f1d8:	6033      	strmi	r3, [r6, #0]
 800f1da:	6825      	ldr	r5, [r4, #0]
 800f1dc:	f015 0506 	ands.w	r5, r5, #6
 800f1e0:	d106      	bne.n	800f1f0 <_printf_common+0x48>
 800f1e2:	f104 0a19 	add.w	sl, r4, #25
 800f1e6:	68e3      	ldr	r3, [r4, #12]
 800f1e8:	6832      	ldr	r2, [r6, #0]
 800f1ea:	1a9b      	subs	r3, r3, r2
 800f1ec:	42ab      	cmp	r3, r5
 800f1ee:	dc26      	bgt.n	800f23e <_printf_common+0x96>
 800f1f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f1f4:	1e13      	subs	r3, r2, #0
 800f1f6:	6822      	ldr	r2, [r4, #0]
 800f1f8:	bf18      	it	ne
 800f1fa:	2301      	movne	r3, #1
 800f1fc:	0692      	lsls	r2, r2, #26
 800f1fe:	d42b      	bmi.n	800f258 <_printf_common+0xb0>
 800f200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f204:	4649      	mov	r1, r9
 800f206:	4638      	mov	r0, r7
 800f208:	47c0      	blx	r8
 800f20a:	3001      	adds	r0, #1
 800f20c:	d01e      	beq.n	800f24c <_printf_common+0xa4>
 800f20e:	6823      	ldr	r3, [r4, #0]
 800f210:	6922      	ldr	r2, [r4, #16]
 800f212:	f003 0306 	and.w	r3, r3, #6
 800f216:	2b04      	cmp	r3, #4
 800f218:	bf02      	ittt	eq
 800f21a:	68e5      	ldreq	r5, [r4, #12]
 800f21c:	6833      	ldreq	r3, [r6, #0]
 800f21e:	1aed      	subeq	r5, r5, r3
 800f220:	68a3      	ldr	r3, [r4, #8]
 800f222:	bf0c      	ite	eq
 800f224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f228:	2500      	movne	r5, #0
 800f22a:	4293      	cmp	r3, r2
 800f22c:	bfc4      	itt	gt
 800f22e:	1a9b      	subgt	r3, r3, r2
 800f230:	18ed      	addgt	r5, r5, r3
 800f232:	2600      	movs	r6, #0
 800f234:	341a      	adds	r4, #26
 800f236:	42b5      	cmp	r5, r6
 800f238:	d11a      	bne.n	800f270 <_printf_common+0xc8>
 800f23a:	2000      	movs	r0, #0
 800f23c:	e008      	b.n	800f250 <_printf_common+0xa8>
 800f23e:	2301      	movs	r3, #1
 800f240:	4652      	mov	r2, sl
 800f242:	4649      	mov	r1, r9
 800f244:	4638      	mov	r0, r7
 800f246:	47c0      	blx	r8
 800f248:	3001      	adds	r0, #1
 800f24a:	d103      	bne.n	800f254 <_printf_common+0xac>
 800f24c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f254:	3501      	adds	r5, #1
 800f256:	e7c6      	b.n	800f1e6 <_printf_common+0x3e>
 800f258:	18e1      	adds	r1, r4, r3
 800f25a:	1c5a      	adds	r2, r3, #1
 800f25c:	2030      	movs	r0, #48	; 0x30
 800f25e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f262:	4422      	add	r2, r4
 800f264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f26c:	3302      	adds	r3, #2
 800f26e:	e7c7      	b.n	800f200 <_printf_common+0x58>
 800f270:	2301      	movs	r3, #1
 800f272:	4622      	mov	r2, r4
 800f274:	4649      	mov	r1, r9
 800f276:	4638      	mov	r0, r7
 800f278:	47c0      	blx	r8
 800f27a:	3001      	adds	r0, #1
 800f27c:	d0e6      	beq.n	800f24c <_printf_common+0xa4>
 800f27e:	3601      	adds	r6, #1
 800f280:	e7d9      	b.n	800f236 <_printf_common+0x8e>
	...

0800f284 <_printf_i>:
 800f284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f288:	7e0f      	ldrb	r7, [r1, #24]
 800f28a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f28c:	2f78      	cmp	r7, #120	; 0x78
 800f28e:	4691      	mov	r9, r2
 800f290:	4680      	mov	r8, r0
 800f292:	460c      	mov	r4, r1
 800f294:	469a      	mov	sl, r3
 800f296:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f29a:	d807      	bhi.n	800f2ac <_printf_i+0x28>
 800f29c:	2f62      	cmp	r7, #98	; 0x62
 800f29e:	d80a      	bhi.n	800f2b6 <_printf_i+0x32>
 800f2a0:	2f00      	cmp	r7, #0
 800f2a2:	f000 80d4 	beq.w	800f44e <_printf_i+0x1ca>
 800f2a6:	2f58      	cmp	r7, #88	; 0x58
 800f2a8:	f000 80c0 	beq.w	800f42c <_printf_i+0x1a8>
 800f2ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f2b4:	e03a      	b.n	800f32c <_printf_i+0xa8>
 800f2b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f2ba:	2b15      	cmp	r3, #21
 800f2bc:	d8f6      	bhi.n	800f2ac <_printf_i+0x28>
 800f2be:	a101      	add	r1, pc, #4	; (adr r1, 800f2c4 <_printf_i+0x40>)
 800f2c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f2c4:	0800f31d 	.word	0x0800f31d
 800f2c8:	0800f331 	.word	0x0800f331
 800f2cc:	0800f2ad 	.word	0x0800f2ad
 800f2d0:	0800f2ad 	.word	0x0800f2ad
 800f2d4:	0800f2ad 	.word	0x0800f2ad
 800f2d8:	0800f2ad 	.word	0x0800f2ad
 800f2dc:	0800f331 	.word	0x0800f331
 800f2e0:	0800f2ad 	.word	0x0800f2ad
 800f2e4:	0800f2ad 	.word	0x0800f2ad
 800f2e8:	0800f2ad 	.word	0x0800f2ad
 800f2ec:	0800f2ad 	.word	0x0800f2ad
 800f2f0:	0800f435 	.word	0x0800f435
 800f2f4:	0800f35d 	.word	0x0800f35d
 800f2f8:	0800f3ef 	.word	0x0800f3ef
 800f2fc:	0800f2ad 	.word	0x0800f2ad
 800f300:	0800f2ad 	.word	0x0800f2ad
 800f304:	0800f457 	.word	0x0800f457
 800f308:	0800f2ad 	.word	0x0800f2ad
 800f30c:	0800f35d 	.word	0x0800f35d
 800f310:	0800f2ad 	.word	0x0800f2ad
 800f314:	0800f2ad 	.word	0x0800f2ad
 800f318:	0800f3f7 	.word	0x0800f3f7
 800f31c:	682b      	ldr	r3, [r5, #0]
 800f31e:	1d1a      	adds	r2, r3, #4
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	602a      	str	r2, [r5, #0]
 800f324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f32c:	2301      	movs	r3, #1
 800f32e:	e09f      	b.n	800f470 <_printf_i+0x1ec>
 800f330:	6820      	ldr	r0, [r4, #0]
 800f332:	682b      	ldr	r3, [r5, #0]
 800f334:	0607      	lsls	r7, r0, #24
 800f336:	f103 0104 	add.w	r1, r3, #4
 800f33a:	6029      	str	r1, [r5, #0]
 800f33c:	d501      	bpl.n	800f342 <_printf_i+0xbe>
 800f33e:	681e      	ldr	r6, [r3, #0]
 800f340:	e003      	b.n	800f34a <_printf_i+0xc6>
 800f342:	0646      	lsls	r6, r0, #25
 800f344:	d5fb      	bpl.n	800f33e <_printf_i+0xba>
 800f346:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f34a:	2e00      	cmp	r6, #0
 800f34c:	da03      	bge.n	800f356 <_printf_i+0xd2>
 800f34e:	232d      	movs	r3, #45	; 0x2d
 800f350:	4276      	negs	r6, r6
 800f352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f356:	485a      	ldr	r0, [pc, #360]	; (800f4c0 <_printf_i+0x23c>)
 800f358:	230a      	movs	r3, #10
 800f35a:	e012      	b.n	800f382 <_printf_i+0xfe>
 800f35c:	682b      	ldr	r3, [r5, #0]
 800f35e:	6820      	ldr	r0, [r4, #0]
 800f360:	1d19      	adds	r1, r3, #4
 800f362:	6029      	str	r1, [r5, #0]
 800f364:	0605      	lsls	r5, r0, #24
 800f366:	d501      	bpl.n	800f36c <_printf_i+0xe8>
 800f368:	681e      	ldr	r6, [r3, #0]
 800f36a:	e002      	b.n	800f372 <_printf_i+0xee>
 800f36c:	0641      	lsls	r1, r0, #25
 800f36e:	d5fb      	bpl.n	800f368 <_printf_i+0xe4>
 800f370:	881e      	ldrh	r6, [r3, #0]
 800f372:	4853      	ldr	r0, [pc, #332]	; (800f4c0 <_printf_i+0x23c>)
 800f374:	2f6f      	cmp	r7, #111	; 0x6f
 800f376:	bf0c      	ite	eq
 800f378:	2308      	moveq	r3, #8
 800f37a:	230a      	movne	r3, #10
 800f37c:	2100      	movs	r1, #0
 800f37e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f382:	6865      	ldr	r5, [r4, #4]
 800f384:	60a5      	str	r5, [r4, #8]
 800f386:	2d00      	cmp	r5, #0
 800f388:	bfa2      	ittt	ge
 800f38a:	6821      	ldrge	r1, [r4, #0]
 800f38c:	f021 0104 	bicge.w	r1, r1, #4
 800f390:	6021      	strge	r1, [r4, #0]
 800f392:	b90e      	cbnz	r6, 800f398 <_printf_i+0x114>
 800f394:	2d00      	cmp	r5, #0
 800f396:	d04b      	beq.n	800f430 <_printf_i+0x1ac>
 800f398:	4615      	mov	r5, r2
 800f39a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f39e:	fb03 6711 	mls	r7, r3, r1, r6
 800f3a2:	5dc7      	ldrb	r7, [r0, r7]
 800f3a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f3a8:	4637      	mov	r7, r6
 800f3aa:	42bb      	cmp	r3, r7
 800f3ac:	460e      	mov	r6, r1
 800f3ae:	d9f4      	bls.n	800f39a <_printf_i+0x116>
 800f3b0:	2b08      	cmp	r3, #8
 800f3b2:	d10b      	bne.n	800f3cc <_printf_i+0x148>
 800f3b4:	6823      	ldr	r3, [r4, #0]
 800f3b6:	07de      	lsls	r6, r3, #31
 800f3b8:	d508      	bpl.n	800f3cc <_printf_i+0x148>
 800f3ba:	6923      	ldr	r3, [r4, #16]
 800f3bc:	6861      	ldr	r1, [r4, #4]
 800f3be:	4299      	cmp	r1, r3
 800f3c0:	bfde      	ittt	le
 800f3c2:	2330      	movle	r3, #48	; 0x30
 800f3c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f3c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f3cc:	1b52      	subs	r2, r2, r5
 800f3ce:	6122      	str	r2, [r4, #16]
 800f3d0:	f8cd a000 	str.w	sl, [sp]
 800f3d4:	464b      	mov	r3, r9
 800f3d6:	aa03      	add	r2, sp, #12
 800f3d8:	4621      	mov	r1, r4
 800f3da:	4640      	mov	r0, r8
 800f3dc:	f7ff fee4 	bl	800f1a8 <_printf_common>
 800f3e0:	3001      	adds	r0, #1
 800f3e2:	d14a      	bne.n	800f47a <_printf_i+0x1f6>
 800f3e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3e8:	b004      	add	sp, #16
 800f3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3ee:	6823      	ldr	r3, [r4, #0]
 800f3f0:	f043 0320 	orr.w	r3, r3, #32
 800f3f4:	6023      	str	r3, [r4, #0]
 800f3f6:	4833      	ldr	r0, [pc, #204]	; (800f4c4 <_printf_i+0x240>)
 800f3f8:	2778      	movs	r7, #120	; 0x78
 800f3fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f3fe:	6823      	ldr	r3, [r4, #0]
 800f400:	6829      	ldr	r1, [r5, #0]
 800f402:	061f      	lsls	r7, r3, #24
 800f404:	f851 6b04 	ldr.w	r6, [r1], #4
 800f408:	d402      	bmi.n	800f410 <_printf_i+0x18c>
 800f40a:	065f      	lsls	r7, r3, #25
 800f40c:	bf48      	it	mi
 800f40e:	b2b6      	uxthmi	r6, r6
 800f410:	07df      	lsls	r7, r3, #31
 800f412:	bf48      	it	mi
 800f414:	f043 0320 	orrmi.w	r3, r3, #32
 800f418:	6029      	str	r1, [r5, #0]
 800f41a:	bf48      	it	mi
 800f41c:	6023      	strmi	r3, [r4, #0]
 800f41e:	b91e      	cbnz	r6, 800f428 <_printf_i+0x1a4>
 800f420:	6823      	ldr	r3, [r4, #0]
 800f422:	f023 0320 	bic.w	r3, r3, #32
 800f426:	6023      	str	r3, [r4, #0]
 800f428:	2310      	movs	r3, #16
 800f42a:	e7a7      	b.n	800f37c <_printf_i+0xf8>
 800f42c:	4824      	ldr	r0, [pc, #144]	; (800f4c0 <_printf_i+0x23c>)
 800f42e:	e7e4      	b.n	800f3fa <_printf_i+0x176>
 800f430:	4615      	mov	r5, r2
 800f432:	e7bd      	b.n	800f3b0 <_printf_i+0x12c>
 800f434:	682b      	ldr	r3, [r5, #0]
 800f436:	6826      	ldr	r6, [r4, #0]
 800f438:	6961      	ldr	r1, [r4, #20]
 800f43a:	1d18      	adds	r0, r3, #4
 800f43c:	6028      	str	r0, [r5, #0]
 800f43e:	0635      	lsls	r5, r6, #24
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	d501      	bpl.n	800f448 <_printf_i+0x1c4>
 800f444:	6019      	str	r1, [r3, #0]
 800f446:	e002      	b.n	800f44e <_printf_i+0x1ca>
 800f448:	0670      	lsls	r0, r6, #25
 800f44a:	d5fb      	bpl.n	800f444 <_printf_i+0x1c0>
 800f44c:	8019      	strh	r1, [r3, #0]
 800f44e:	2300      	movs	r3, #0
 800f450:	6123      	str	r3, [r4, #16]
 800f452:	4615      	mov	r5, r2
 800f454:	e7bc      	b.n	800f3d0 <_printf_i+0x14c>
 800f456:	682b      	ldr	r3, [r5, #0]
 800f458:	1d1a      	adds	r2, r3, #4
 800f45a:	602a      	str	r2, [r5, #0]
 800f45c:	681d      	ldr	r5, [r3, #0]
 800f45e:	6862      	ldr	r2, [r4, #4]
 800f460:	2100      	movs	r1, #0
 800f462:	4628      	mov	r0, r5
 800f464:	f7f0 fef4 	bl	8000250 <memchr>
 800f468:	b108      	cbz	r0, 800f46e <_printf_i+0x1ea>
 800f46a:	1b40      	subs	r0, r0, r5
 800f46c:	6060      	str	r0, [r4, #4]
 800f46e:	6863      	ldr	r3, [r4, #4]
 800f470:	6123      	str	r3, [r4, #16]
 800f472:	2300      	movs	r3, #0
 800f474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f478:	e7aa      	b.n	800f3d0 <_printf_i+0x14c>
 800f47a:	6923      	ldr	r3, [r4, #16]
 800f47c:	462a      	mov	r2, r5
 800f47e:	4649      	mov	r1, r9
 800f480:	4640      	mov	r0, r8
 800f482:	47d0      	blx	sl
 800f484:	3001      	adds	r0, #1
 800f486:	d0ad      	beq.n	800f3e4 <_printf_i+0x160>
 800f488:	6823      	ldr	r3, [r4, #0]
 800f48a:	079b      	lsls	r3, r3, #30
 800f48c:	d413      	bmi.n	800f4b6 <_printf_i+0x232>
 800f48e:	68e0      	ldr	r0, [r4, #12]
 800f490:	9b03      	ldr	r3, [sp, #12]
 800f492:	4298      	cmp	r0, r3
 800f494:	bfb8      	it	lt
 800f496:	4618      	movlt	r0, r3
 800f498:	e7a6      	b.n	800f3e8 <_printf_i+0x164>
 800f49a:	2301      	movs	r3, #1
 800f49c:	4632      	mov	r2, r6
 800f49e:	4649      	mov	r1, r9
 800f4a0:	4640      	mov	r0, r8
 800f4a2:	47d0      	blx	sl
 800f4a4:	3001      	adds	r0, #1
 800f4a6:	d09d      	beq.n	800f3e4 <_printf_i+0x160>
 800f4a8:	3501      	adds	r5, #1
 800f4aa:	68e3      	ldr	r3, [r4, #12]
 800f4ac:	9903      	ldr	r1, [sp, #12]
 800f4ae:	1a5b      	subs	r3, r3, r1
 800f4b0:	42ab      	cmp	r3, r5
 800f4b2:	dcf2      	bgt.n	800f49a <_printf_i+0x216>
 800f4b4:	e7eb      	b.n	800f48e <_printf_i+0x20a>
 800f4b6:	2500      	movs	r5, #0
 800f4b8:	f104 0619 	add.w	r6, r4, #25
 800f4bc:	e7f5      	b.n	800f4aa <_printf_i+0x226>
 800f4be:	bf00      	nop
 800f4c0:	0800fcd9 	.word	0x0800fcd9
 800f4c4:	0800fcea 	.word	0x0800fcea

0800f4c8 <__sflush_r>:
 800f4c8:	898a      	ldrh	r2, [r1, #12]
 800f4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ce:	4605      	mov	r5, r0
 800f4d0:	0710      	lsls	r0, r2, #28
 800f4d2:	460c      	mov	r4, r1
 800f4d4:	d458      	bmi.n	800f588 <__sflush_r+0xc0>
 800f4d6:	684b      	ldr	r3, [r1, #4]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	dc05      	bgt.n	800f4e8 <__sflush_r+0x20>
 800f4dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	dc02      	bgt.n	800f4e8 <__sflush_r+0x20>
 800f4e2:	2000      	movs	r0, #0
 800f4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4ea:	2e00      	cmp	r6, #0
 800f4ec:	d0f9      	beq.n	800f4e2 <__sflush_r+0x1a>
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f4f4:	682f      	ldr	r7, [r5, #0]
 800f4f6:	6a21      	ldr	r1, [r4, #32]
 800f4f8:	602b      	str	r3, [r5, #0]
 800f4fa:	d032      	beq.n	800f562 <__sflush_r+0x9a>
 800f4fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f4fe:	89a3      	ldrh	r3, [r4, #12]
 800f500:	075a      	lsls	r2, r3, #29
 800f502:	d505      	bpl.n	800f510 <__sflush_r+0x48>
 800f504:	6863      	ldr	r3, [r4, #4]
 800f506:	1ac0      	subs	r0, r0, r3
 800f508:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f50a:	b10b      	cbz	r3, 800f510 <__sflush_r+0x48>
 800f50c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f50e:	1ac0      	subs	r0, r0, r3
 800f510:	2300      	movs	r3, #0
 800f512:	4602      	mov	r2, r0
 800f514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f516:	6a21      	ldr	r1, [r4, #32]
 800f518:	4628      	mov	r0, r5
 800f51a:	47b0      	blx	r6
 800f51c:	1c43      	adds	r3, r0, #1
 800f51e:	89a3      	ldrh	r3, [r4, #12]
 800f520:	d106      	bne.n	800f530 <__sflush_r+0x68>
 800f522:	6829      	ldr	r1, [r5, #0]
 800f524:	291d      	cmp	r1, #29
 800f526:	d82b      	bhi.n	800f580 <__sflush_r+0xb8>
 800f528:	4a29      	ldr	r2, [pc, #164]	; (800f5d0 <__sflush_r+0x108>)
 800f52a:	410a      	asrs	r2, r1
 800f52c:	07d6      	lsls	r6, r2, #31
 800f52e:	d427      	bmi.n	800f580 <__sflush_r+0xb8>
 800f530:	2200      	movs	r2, #0
 800f532:	6062      	str	r2, [r4, #4]
 800f534:	04d9      	lsls	r1, r3, #19
 800f536:	6922      	ldr	r2, [r4, #16]
 800f538:	6022      	str	r2, [r4, #0]
 800f53a:	d504      	bpl.n	800f546 <__sflush_r+0x7e>
 800f53c:	1c42      	adds	r2, r0, #1
 800f53e:	d101      	bne.n	800f544 <__sflush_r+0x7c>
 800f540:	682b      	ldr	r3, [r5, #0]
 800f542:	b903      	cbnz	r3, 800f546 <__sflush_r+0x7e>
 800f544:	6560      	str	r0, [r4, #84]	; 0x54
 800f546:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f548:	602f      	str	r7, [r5, #0]
 800f54a:	2900      	cmp	r1, #0
 800f54c:	d0c9      	beq.n	800f4e2 <__sflush_r+0x1a>
 800f54e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f552:	4299      	cmp	r1, r3
 800f554:	d002      	beq.n	800f55c <__sflush_r+0x94>
 800f556:	4628      	mov	r0, r5
 800f558:	f7ff fb3e 	bl	800ebd8 <_free_r>
 800f55c:	2000      	movs	r0, #0
 800f55e:	6360      	str	r0, [r4, #52]	; 0x34
 800f560:	e7c0      	b.n	800f4e4 <__sflush_r+0x1c>
 800f562:	2301      	movs	r3, #1
 800f564:	4628      	mov	r0, r5
 800f566:	47b0      	blx	r6
 800f568:	1c41      	adds	r1, r0, #1
 800f56a:	d1c8      	bne.n	800f4fe <__sflush_r+0x36>
 800f56c:	682b      	ldr	r3, [r5, #0]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d0c5      	beq.n	800f4fe <__sflush_r+0x36>
 800f572:	2b1d      	cmp	r3, #29
 800f574:	d001      	beq.n	800f57a <__sflush_r+0xb2>
 800f576:	2b16      	cmp	r3, #22
 800f578:	d101      	bne.n	800f57e <__sflush_r+0xb6>
 800f57a:	602f      	str	r7, [r5, #0]
 800f57c:	e7b1      	b.n	800f4e2 <__sflush_r+0x1a>
 800f57e:	89a3      	ldrh	r3, [r4, #12]
 800f580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f584:	81a3      	strh	r3, [r4, #12]
 800f586:	e7ad      	b.n	800f4e4 <__sflush_r+0x1c>
 800f588:	690f      	ldr	r7, [r1, #16]
 800f58a:	2f00      	cmp	r7, #0
 800f58c:	d0a9      	beq.n	800f4e2 <__sflush_r+0x1a>
 800f58e:	0793      	lsls	r3, r2, #30
 800f590:	680e      	ldr	r6, [r1, #0]
 800f592:	bf08      	it	eq
 800f594:	694b      	ldreq	r3, [r1, #20]
 800f596:	600f      	str	r7, [r1, #0]
 800f598:	bf18      	it	ne
 800f59a:	2300      	movne	r3, #0
 800f59c:	eba6 0807 	sub.w	r8, r6, r7
 800f5a0:	608b      	str	r3, [r1, #8]
 800f5a2:	f1b8 0f00 	cmp.w	r8, #0
 800f5a6:	dd9c      	ble.n	800f4e2 <__sflush_r+0x1a>
 800f5a8:	6a21      	ldr	r1, [r4, #32]
 800f5aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f5ac:	4643      	mov	r3, r8
 800f5ae:	463a      	mov	r2, r7
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	47b0      	blx	r6
 800f5b4:	2800      	cmp	r0, #0
 800f5b6:	dc06      	bgt.n	800f5c6 <__sflush_r+0xfe>
 800f5b8:	89a3      	ldrh	r3, [r4, #12]
 800f5ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5be:	81a3      	strh	r3, [r4, #12]
 800f5c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5c4:	e78e      	b.n	800f4e4 <__sflush_r+0x1c>
 800f5c6:	4407      	add	r7, r0
 800f5c8:	eba8 0800 	sub.w	r8, r8, r0
 800f5cc:	e7e9      	b.n	800f5a2 <__sflush_r+0xda>
 800f5ce:	bf00      	nop
 800f5d0:	dfbffffe 	.word	0xdfbffffe

0800f5d4 <_fflush_r>:
 800f5d4:	b538      	push	{r3, r4, r5, lr}
 800f5d6:	690b      	ldr	r3, [r1, #16]
 800f5d8:	4605      	mov	r5, r0
 800f5da:	460c      	mov	r4, r1
 800f5dc:	b913      	cbnz	r3, 800f5e4 <_fflush_r+0x10>
 800f5de:	2500      	movs	r5, #0
 800f5e0:	4628      	mov	r0, r5
 800f5e2:	bd38      	pop	{r3, r4, r5, pc}
 800f5e4:	b118      	cbz	r0, 800f5ee <_fflush_r+0x1a>
 800f5e6:	6a03      	ldr	r3, [r0, #32]
 800f5e8:	b90b      	cbnz	r3, 800f5ee <_fflush_r+0x1a>
 800f5ea:	f7ff fa0b 	bl	800ea04 <__sinit>
 800f5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d0f3      	beq.n	800f5de <_fflush_r+0xa>
 800f5f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f5f8:	07d0      	lsls	r0, r2, #31
 800f5fa:	d404      	bmi.n	800f606 <_fflush_r+0x32>
 800f5fc:	0599      	lsls	r1, r3, #22
 800f5fe:	d402      	bmi.n	800f606 <_fflush_r+0x32>
 800f600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f602:	f7ff fae6 	bl	800ebd2 <__retarget_lock_acquire_recursive>
 800f606:	4628      	mov	r0, r5
 800f608:	4621      	mov	r1, r4
 800f60a:	f7ff ff5d 	bl	800f4c8 <__sflush_r>
 800f60e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f610:	07da      	lsls	r2, r3, #31
 800f612:	4605      	mov	r5, r0
 800f614:	d4e4      	bmi.n	800f5e0 <_fflush_r+0xc>
 800f616:	89a3      	ldrh	r3, [r4, #12]
 800f618:	059b      	lsls	r3, r3, #22
 800f61a:	d4e1      	bmi.n	800f5e0 <_fflush_r+0xc>
 800f61c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f61e:	f7ff fad9 	bl	800ebd4 <__retarget_lock_release_recursive>
 800f622:	e7dd      	b.n	800f5e0 <_fflush_r+0xc>

0800f624 <__sread>:
 800f624:	b510      	push	{r4, lr}
 800f626:	460c      	mov	r4, r1
 800f628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f62c:	f000 f9c2 	bl	800f9b4 <_read_r>
 800f630:	2800      	cmp	r0, #0
 800f632:	bfab      	itete	ge
 800f634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f636:	89a3      	ldrhlt	r3, [r4, #12]
 800f638:	181b      	addge	r3, r3, r0
 800f63a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f63e:	bfac      	ite	ge
 800f640:	6563      	strge	r3, [r4, #84]	; 0x54
 800f642:	81a3      	strhlt	r3, [r4, #12]
 800f644:	bd10      	pop	{r4, pc}

0800f646 <__swrite>:
 800f646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f64a:	461f      	mov	r7, r3
 800f64c:	898b      	ldrh	r3, [r1, #12]
 800f64e:	05db      	lsls	r3, r3, #23
 800f650:	4605      	mov	r5, r0
 800f652:	460c      	mov	r4, r1
 800f654:	4616      	mov	r6, r2
 800f656:	d505      	bpl.n	800f664 <__swrite+0x1e>
 800f658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f65c:	2302      	movs	r3, #2
 800f65e:	2200      	movs	r2, #0
 800f660:	f000 f996 	bl	800f990 <_lseek_r>
 800f664:	89a3      	ldrh	r3, [r4, #12]
 800f666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f66a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f66e:	81a3      	strh	r3, [r4, #12]
 800f670:	4632      	mov	r2, r6
 800f672:	463b      	mov	r3, r7
 800f674:	4628      	mov	r0, r5
 800f676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f67a:	f000 b9ad 	b.w	800f9d8 <_write_r>

0800f67e <__sseek>:
 800f67e:	b510      	push	{r4, lr}
 800f680:	460c      	mov	r4, r1
 800f682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f686:	f000 f983 	bl	800f990 <_lseek_r>
 800f68a:	1c43      	adds	r3, r0, #1
 800f68c:	89a3      	ldrh	r3, [r4, #12]
 800f68e:	bf15      	itete	ne
 800f690:	6560      	strne	r0, [r4, #84]	; 0x54
 800f692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f69a:	81a3      	strheq	r3, [r4, #12]
 800f69c:	bf18      	it	ne
 800f69e:	81a3      	strhne	r3, [r4, #12]
 800f6a0:	bd10      	pop	{r4, pc}

0800f6a2 <__sclose>:
 800f6a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6a6:	f000 b941 	b.w	800f92c <_close_r>

0800f6aa <_realloc_r>:
 800f6aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ae:	4680      	mov	r8, r0
 800f6b0:	4614      	mov	r4, r2
 800f6b2:	460e      	mov	r6, r1
 800f6b4:	b921      	cbnz	r1, 800f6c0 <_realloc_r+0x16>
 800f6b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ba:	4611      	mov	r1, r2
 800f6bc:	f7ff b856 	b.w	800e76c <_malloc_r>
 800f6c0:	b92a      	cbnz	r2, 800f6ce <_realloc_r+0x24>
 800f6c2:	f7ff fa89 	bl	800ebd8 <_free_r>
 800f6c6:	4625      	mov	r5, r4
 800f6c8:	4628      	mov	r0, r5
 800f6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ce:	f000 f9a3 	bl	800fa18 <_malloc_usable_size_r>
 800f6d2:	4284      	cmp	r4, r0
 800f6d4:	4607      	mov	r7, r0
 800f6d6:	d802      	bhi.n	800f6de <_realloc_r+0x34>
 800f6d8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f6dc:	d812      	bhi.n	800f704 <_realloc_r+0x5a>
 800f6de:	4621      	mov	r1, r4
 800f6e0:	4640      	mov	r0, r8
 800f6e2:	f7ff f843 	bl	800e76c <_malloc_r>
 800f6e6:	4605      	mov	r5, r0
 800f6e8:	2800      	cmp	r0, #0
 800f6ea:	d0ed      	beq.n	800f6c8 <_realloc_r+0x1e>
 800f6ec:	42bc      	cmp	r4, r7
 800f6ee:	4622      	mov	r2, r4
 800f6f0:	4631      	mov	r1, r6
 800f6f2:	bf28      	it	cs
 800f6f4:	463a      	movcs	r2, r7
 800f6f6:	f000 f981 	bl	800f9fc <memcpy>
 800f6fa:	4631      	mov	r1, r6
 800f6fc:	4640      	mov	r0, r8
 800f6fe:	f7ff fa6b 	bl	800ebd8 <_free_r>
 800f702:	e7e1      	b.n	800f6c8 <_realloc_r+0x1e>
 800f704:	4635      	mov	r5, r6
 800f706:	e7df      	b.n	800f6c8 <_realloc_r+0x1e>

0800f708 <__swbuf_r>:
 800f708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70a:	460e      	mov	r6, r1
 800f70c:	4614      	mov	r4, r2
 800f70e:	4605      	mov	r5, r0
 800f710:	b118      	cbz	r0, 800f71a <__swbuf_r+0x12>
 800f712:	6a03      	ldr	r3, [r0, #32]
 800f714:	b90b      	cbnz	r3, 800f71a <__swbuf_r+0x12>
 800f716:	f7ff f975 	bl	800ea04 <__sinit>
 800f71a:	69a3      	ldr	r3, [r4, #24]
 800f71c:	60a3      	str	r3, [r4, #8]
 800f71e:	89a3      	ldrh	r3, [r4, #12]
 800f720:	071a      	lsls	r2, r3, #28
 800f722:	d525      	bpl.n	800f770 <__swbuf_r+0x68>
 800f724:	6923      	ldr	r3, [r4, #16]
 800f726:	b31b      	cbz	r3, 800f770 <__swbuf_r+0x68>
 800f728:	6823      	ldr	r3, [r4, #0]
 800f72a:	6922      	ldr	r2, [r4, #16]
 800f72c:	1a98      	subs	r0, r3, r2
 800f72e:	6963      	ldr	r3, [r4, #20]
 800f730:	b2f6      	uxtb	r6, r6
 800f732:	4283      	cmp	r3, r0
 800f734:	4637      	mov	r7, r6
 800f736:	dc04      	bgt.n	800f742 <__swbuf_r+0x3a>
 800f738:	4621      	mov	r1, r4
 800f73a:	4628      	mov	r0, r5
 800f73c:	f7ff ff4a 	bl	800f5d4 <_fflush_r>
 800f740:	b9e0      	cbnz	r0, 800f77c <__swbuf_r+0x74>
 800f742:	68a3      	ldr	r3, [r4, #8]
 800f744:	3b01      	subs	r3, #1
 800f746:	60a3      	str	r3, [r4, #8]
 800f748:	6823      	ldr	r3, [r4, #0]
 800f74a:	1c5a      	adds	r2, r3, #1
 800f74c:	6022      	str	r2, [r4, #0]
 800f74e:	701e      	strb	r6, [r3, #0]
 800f750:	6962      	ldr	r2, [r4, #20]
 800f752:	1c43      	adds	r3, r0, #1
 800f754:	429a      	cmp	r2, r3
 800f756:	d004      	beq.n	800f762 <__swbuf_r+0x5a>
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	07db      	lsls	r3, r3, #31
 800f75c:	d506      	bpl.n	800f76c <__swbuf_r+0x64>
 800f75e:	2e0a      	cmp	r6, #10
 800f760:	d104      	bne.n	800f76c <__swbuf_r+0x64>
 800f762:	4621      	mov	r1, r4
 800f764:	4628      	mov	r0, r5
 800f766:	f7ff ff35 	bl	800f5d4 <_fflush_r>
 800f76a:	b938      	cbnz	r0, 800f77c <__swbuf_r+0x74>
 800f76c:	4638      	mov	r0, r7
 800f76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f770:	4621      	mov	r1, r4
 800f772:	4628      	mov	r0, r5
 800f774:	f000 f806 	bl	800f784 <__swsetup_r>
 800f778:	2800      	cmp	r0, #0
 800f77a:	d0d5      	beq.n	800f728 <__swbuf_r+0x20>
 800f77c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f780:	e7f4      	b.n	800f76c <__swbuf_r+0x64>
	...

0800f784 <__swsetup_r>:
 800f784:	b538      	push	{r3, r4, r5, lr}
 800f786:	4b2a      	ldr	r3, [pc, #168]	; (800f830 <__swsetup_r+0xac>)
 800f788:	4605      	mov	r5, r0
 800f78a:	6818      	ldr	r0, [r3, #0]
 800f78c:	460c      	mov	r4, r1
 800f78e:	b118      	cbz	r0, 800f798 <__swsetup_r+0x14>
 800f790:	6a03      	ldr	r3, [r0, #32]
 800f792:	b90b      	cbnz	r3, 800f798 <__swsetup_r+0x14>
 800f794:	f7ff f936 	bl	800ea04 <__sinit>
 800f798:	89a3      	ldrh	r3, [r4, #12]
 800f79a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f79e:	0718      	lsls	r0, r3, #28
 800f7a0:	d422      	bmi.n	800f7e8 <__swsetup_r+0x64>
 800f7a2:	06d9      	lsls	r1, r3, #27
 800f7a4:	d407      	bmi.n	800f7b6 <__swsetup_r+0x32>
 800f7a6:	2309      	movs	r3, #9
 800f7a8:	602b      	str	r3, [r5, #0]
 800f7aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f7ae:	81a3      	strh	r3, [r4, #12]
 800f7b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7b4:	e034      	b.n	800f820 <__swsetup_r+0x9c>
 800f7b6:	0758      	lsls	r0, r3, #29
 800f7b8:	d512      	bpl.n	800f7e0 <__swsetup_r+0x5c>
 800f7ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7bc:	b141      	cbz	r1, 800f7d0 <__swsetup_r+0x4c>
 800f7be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7c2:	4299      	cmp	r1, r3
 800f7c4:	d002      	beq.n	800f7cc <__swsetup_r+0x48>
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	f7ff fa06 	bl	800ebd8 <_free_r>
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	6363      	str	r3, [r4, #52]	; 0x34
 800f7d0:	89a3      	ldrh	r3, [r4, #12]
 800f7d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f7d6:	81a3      	strh	r3, [r4, #12]
 800f7d8:	2300      	movs	r3, #0
 800f7da:	6063      	str	r3, [r4, #4]
 800f7dc:	6923      	ldr	r3, [r4, #16]
 800f7de:	6023      	str	r3, [r4, #0]
 800f7e0:	89a3      	ldrh	r3, [r4, #12]
 800f7e2:	f043 0308 	orr.w	r3, r3, #8
 800f7e6:	81a3      	strh	r3, [r4, #12]
 800f7e8:	6923      	ldr	r3, [r4, #16]
 800f7ea:	b94b      	cbnz	r3, 800f800 <__swsetup_r+0x7c>
 800f7ec:	89a3      	ldrh	r3, [r4, #12]
 800f7ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f7f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7f6:	d003      	beq.n	800f800 <__swsetup_r+0x7c>
 800f7f8:	4621      	mov	r1, r4
 800f7fa:	4628      	mov	r0, r5
 800f7fc:	f000 f840 	bl	800f880 <__smakebuf_r>
 800f800:	89a0      	ldrh	r0, [r4, #12]
 800f802:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f806:	f010 0301 	ands.w	r3, r0, #1
 800f80a:	d00a      	beq.n	800f822 <__swsetup_r+0x9e>
 800f80c:	2300      	movs	r3, #0
 800f80e:	60a3      	str	r3, [r4, #8]
 800f810:	6963      	ldr	r3, [r4, #20]
 800f812:	425b      	negs	r3, r3
 800f814:	61a3      	str	r3, [r4, #24]
 800f816:	6923      	ldr	r3, [r4, #16]
 800f818:	b943      	cbnz	r3, 800f82c <__swsetup_r+0xa8>
 800f81a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f81e:	d1c4      	bne.n	800f7aa <__swsetup_r+0x26>
 800f820:	bd38      	pop	{r3, r4, r5, pc}
 800f822:	0781      	lsls	r1, r0, #30
 800f824:	bf58      	it	pl
 800f826:	6963      	ldrpl	r3, [r4, #20]
 800f828:	60a3      	str	r3, [r4, #8]
 800f82a:	e7f4      	b.n	800f816 <__swsetup_r+0x92>
 800f82c:	2000      	movs	r0, #0
 800f82e:	e7f7      	b.n	800f820 <__swsetup_r+0x9c>
 800f830:	20000164 	.word	0x20000164

0800f834 <__swhatbuf_r>:
 800f834:	b570      	push	{r4, r5, r6, lr}
 800f836:	460c      	mov	r4, r1
 800f838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f83c:	2900      	cmp	r1, #0
 800f83e:	b096      	sub	sp, #88	; 0x58
 800f840:	4615      	mov	r5, r2
 800f842:	461e      	mov	r6, r3
 800f844:	da0d      	bge.n	800f862 <__swhatbuf_r+0x2e>
 800f846:	89a3      	ldrh	r3, [r4, #12]
 800f848:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f84c:	f04f 0100 	mov.w	r1, #0
 800f850:	bf0c      	ite	eq
 800f852:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f856:	2340      	movne	r3, #64	; 0x40
 800f858:	2000      	movs	r0, #0
 800f85a:	6031      	str	r1, [r6, #0]
 800f85c:	602b      	str	r3, [r5, #0]
 800f85e:	b016      	add	sp, #88	; 0x58
 800f860:	bd70      	pop	{r4, r5, r6, pc}
 800f862:	466a      	mov	r2, sp
 800f864:	f000 f872 	bl	800f94c <_fstat_r>
 800f868:	2800      	cmp	r0, #0
 800f86a:	dbec      	blt.n	800f846 <__swhatbuf_r+0x12>
 800f86c:	9901      	ldr	r1, [sp, #4]
 800f86e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f872:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f876:	4259      	negs	r1, r3
 800f878:	4159      	adcs	r1, r3
 800f87a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f87e:	e7eb      	b.n	800f858 <__swhatbuf_r+0x24>

0800f880 <__smakebuf_r>:
 800f880:	898b      	ldrh	r3, [r1, #12]
 800f882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f884:	079d      	lsls	r5, r3, #30
 800f886:	4606      	mov	r6, r0
 800f888:	460c      	mov	r4, r1
 800f88a:	d507      	bpl.n	800f89c <__smakebuf_r+0x1c>
 800f88c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f890:	6023      	str	r3, [r4, #0]
 800f892:	6123      	str	r3, [r4, #16]
 800f894:	2301      	movs	r3, #1
 800f896:	6163      	str	r3, [r4, #20]
 800f898:	b002      	add	sp, #8
 800f89a:	bd70      	pop	{r4, r5, r6, pc}
 800f89c:	ab01      	add	r3, sp, #4
 800f89e:	466a      	mov	r2, sp
 800f8a0:	f7ff ffc8 	bl	800f834 <__swhatbuf_r>
 800f8a4:	9900      	ldr	r1, [sp, #0]
 800f8a6:	4605      	mov	r5, r0
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	f7fe ff5f 	bl	800e76c <_malloc_r>
 800f8ae:	b948      	cbnz	r0, 800f8c4 <__smakebuf_r+0x44>
 800f8b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8b4:	059a      	lsls	r2, r3, #22
 800f8b6:	d4ef      	bmi.n	800f898 <__smakebuf_r+0x18>
 800f8b8:	f023 0303 	bic.w	r3, r3, #3
 800f8bc:	f043 0302 	orr.w	r3, r3, #2
 800f8c0:	81a3      	strh	r3, [r4, #12]
 800f8c2:	e7e3      	b.n	800f88c <__smakebuf_r+0xc>
 800f8c4:	89a3      	ldrh	r3, [r4, #12]
 800f8c6:	6020      	str	r0, [r4, #0]
 800f8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8cc:	81a3      	strh	r3, [r4, #12]
 800f8ce:	9b00      	ldr	r3, [sp, #0]
 800f8d0:	6163      	str	r3, [r4, #20]
 800f8d2:	9b01      	ldr	r3, [sp, #4]
 800f8d4:	6120      	str	r0, [r4, #16]
 800f8d6:	b15b      	cbz	r3, 800f8f0 <__smakebuf_r+0x70>
 800f8d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8dc:	4630      	mov	r0, r6
 800f8de:	f000 f847 	bl	800f970 <_isatty_r>
 800f8e2:	b128      	cbz	r0, 800f8f0 <__smakebuf_r+0x70>
 800f8e4:	89a3      	ldrh	r3, [r4, #12]
 800f8e6:	f023 0303 	bic.w	r3, r3, #3
 800f8ea:	f043 0301 	orr.w	r3, r3, #1
 800f8ee:	81a3      	strh	r3, [r4, #12]
 800f8f0:	89a3      	ldrh	r3, [r4, #12]
 800f8f2:	431d      	orrs	r5, r3
 800f8f4:	81a5      	strh	r5, [r4, #12]
 800f8f6:	e7cf      	b.n	800f898 <__smakebuf_r+0x18>

0800f8f8 <memmove>:
 800f8f8:	4288      	cmp	r0, r1
 800f8fa:	b510      	push	{r4, lr}
 800f8fc:	eb01 0402 	add.w	r4, r1, r2
 800f900:	d902      	bls.n	800f908 <memmove+0x10>
 800f902:	4284      	cmp	r4, r0
 800f904:	4623      	mov	r3, r4
 800f906:	d807      	bhi.n	800f918 <memmove+0x20>
 800f908:	1e43      	subs	r3, r0, #1
 800f90a:	42a1      	cmp	r1, r4
 800f90c:	d008      	beq.n	800f920 <memmove+0x28>
 800f90e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f912:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f916:	e7f8      	b.n	800f90a <memmove+0x12>
 800f918:	4402      	add	r2, r0
 800f91a:	4601      	mov	r1, r0
 800f91c:	428a      	cmp	r2, r1
 800f91e:	d100      	bne.n	800f922 <memmove+0x2a>
 800f920:	bd10      	pop	{r4, pc}
 800f922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f92a:	e7f7      	b.n	800f91c <memmove+0x24>

0800f92c <_close_r>:
 800f92c:	b538      	push	{r3, r4, r5, lr}
 800f92e:	4d06      	ldr	r5, [pc, #24]	; (800f948 <_close_r+0x1c>)
 800f930:	2300      	movs	r3, #0
 800f932:	4604      	mov	r4, r0
 800f934:	4608      	mov	r0, r1
 800f936:	602b      	str	r3, [r5, #0]
 800f938:	f7f1 fcd1 	bl	80012de <_close>
 800f93c:	1c43      	adds	r3, r0, #1
 800f93e:	d102      	bne.n	800f946 <_close_r+0x1a>
 800f940:	682b      	ldr	r3, [r5, #0]
 800f942:	b103      	cbz	r3, 800f946 <_close_r+0x1a>
 800f944:	6023      	str	r3, [r4, #0]
 800f946:	bd38      	pop	{r3, r4, r5, pc}
 800f948:	200043b8 	.word	0x200043b8

0800f94c <_fstat_r>:
 800f94c:	b538      	push	{r3, r4, r5, lr}
 800f94e:	4d07      	ldr	r5, [pc, #28]	; (800f96c <_fstat_r+0x20>)
 800f950:	2300      	movs	r3, #0
 800f952:	4604      	mov	r4, r0
 800f954:	4608      	mov	r0, r1
 800f956:	4611      	mov	r1, r2
 800f958:	602b      	str	r3, [r5, #0]
 800f95a:	f7f1 fccc 	bl	80012f6 <_fstat>
 800f95e:	1c43      	adds	r3, r0, #1
 800f960:	d102      	bne.n	800f968 <_fstat_r+0x1c>
 800f962:	682b      	ldr	r3, [r5, #0]
 800f964:	b103      	cbz	r3, 800f968 <_fstat_r+0x1c>
 800f966:	6023      	str	r3, [r4, #0]
 800f968:	bd38      	pop	{r3, r4, r5, pc}
 800f96a:	bf00      	nop
 800f96c:	200043b8 	.word	0x200043b8

0800f970 <_isatty_r>:
 800f970:	b538      	push	{r3, r4, r5, lr}
 800f972:	4d06      	ldr	r5, [pc, #24]	; (800f98c <_isatty_r+0x1c>)
 800f974:	2300      	movs	r3, #0
 800f976:	4604      	mov	r4, r0
 800f978:	4608      	mov	r0, r1
 800f97a:	602b      	str	r3, [r5, #0]
 800f97c:	f7f1 fccb 	bl	8001316 <_isatty>
 800f980:	1c43      	adds	r3, r0, #1
 800f982:	d102      	bne.n	800f98a <_isatty_r+0x1a>
 800f984:	682b      	ldr	r3, [r5, #0]
 800f986:	b103      	cbz	r3, 800f98a <_isatty_r+0x1a>
 800f988:	6023      	str	r3, [r4, #0]
 800f98a:	bd38      	pop	{r3, r4, r5, pc}
 800f98c:	200043b8 	.word	0x200043b8

0800f990 <_lseek_r>:
 800f990:	b538      	push	{r3, r4, r5, lr}
 800f992:	4d07      	ldr	r5, [pc, #28]	; (800f9b0 <_lseek_r+0x20>)
 800f994:	4604      	mov	r4, r0
 800f996:	4608      	mov	r0, r1
 800f998:	4611      	mov	r1, r2
 800f99a:	2200      	movs	r2, #0
 800f99c:	602a      	str	r2, [r5, #0]
 800f99e:	461a      	mov	r2, r3
 800f9a0:	f7f1 fcc4 	bl	800132c <_lseek>
 800f9a4:	1c43      	adds	r3, r0, #1
 800f9a6:	d102      	bne.n	800f9ae <_lseek_r+0x1e>
 800f9a8:	682b      	ldr	r3, [r5, #0]
 800f9aa:	b103      	cbz	r3, 800f9ae <_lseek_r+0x1e>
 800f9ac:	6023      	str	r3, [r4, #0]
 800f9ae:	bd38      	pop	{r3, r4, r5, pc}
 800f9b0:	200043b8 	.word	0x200043b8

0800f9b4 <_read_r>:
 800f9b4:	b538      	push	{r3, r4, r5, lr}
 800f9b6:	4d07      	ldr	r5, [pc, #28]	; (800f9d4 <_read_r+0x20>)
 800f9b8:	4604      	mov	r4, r0
 800f9ba:	4608      	mov	r0, r1
 800f9bc:	4611      	mov	r1, r2
 800f9be:	2200      	movs	r2, #0
 800f9c0:	602a      	str	r2, [r5, #0]
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	f7f1 fc52 	bl	800126c <_read>
 800f9c8:	1c43      	adds	r3, r0, #1
 800f9ca:	d102      	bne.n	800f9d2 <_read_r+0x1e>
 800f9cc:	682b      	ldr	r3, [r5, #0]
 800f9ce:	b103      	cbz	r3, 800f9d2 <_read_r+0x1e>
 800f9d0:	6023      	str	r3, [r4, #0]
 800f9d2:	bd38      	pop	{r3, r4, r5, pc}
 800f9d4:	200043b8 	.word	0x200043b8

0800f9d8 <_write_r>:
 800f9d8:	b538      	push	{r3, r4, r5, lr}
 800f9da:	4d07      	ldr	r5, [pc, #28]	; (800f9f8 <_write_r+0x20>)
 800f9dc:	4604      	mov	r4, r0
 800f9de:	4608      	mov	r0, r1
 800f9e0:	4611      	mov	r1, r2
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	602a      	str	r2, [r5, #0]
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	f7f1 fc5d 	bl	80012a6 <_write>
 800f9ec:	1c43      	adds	r3, r0, #1
 800f9ee:	d102      	bne.n	800f9f6 <_write_r+0x1e>
 800f9f0:	682b      	ldr	r3, [r5, #0]
 800f9f2:	b103      	cbz	r3, 800f9f6 <_write_r+0x1e>
 800f9f4:	6023      	str	r3, [r4, #0]
 800f9f6:	bd38      	pop	{r3, r4, r5, pc}
 800f9f8:	200043b8 	.word	0x200043b8

0800f9fc <memcpy>:
 800f9fc:	440a      	add	r2, r1
 800f9fe:	4291      	cmp	r1, r2
 800fa00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fa04:	d100      	bne.n	800fa08 <memcpy+0xc>
 800fa06:	4770      	bx	lr
 800fa08:	b510      	push	{r4, lr}
 800fa0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa12:	4291      	cmp	r1, r2
 800fa14:	d1f9      	bne.n	800fa0a <memcpy+0xe>
 800fa16:	bd10      	pop	{r4, pc}

0800fa18 <_malloc_usable_size_r>:
 800fa18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa1c:	1f18      	subs	r0, r3, #4
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	bfbc      	itt	lt
 800fa22:	580b      	ldrlt	r3, [r1, r0]
 800fa24:	18c0      	addlt	r0, r0, r3
 800fa26:	4770      	bx	lr

0800fa28 <_init>:
 800fa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa2a:	bf00      	nop
 800fa2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa2e:	bc08      	pop	{r3}
 800fa30:	469e      	mov	lr, r3
 800fa32:	4770      	bx	lr

0800fa34 <_fini>:
 800fa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa36:	bf00      	nop
 800fa38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa3a:	bc08      	pop	{r3}
 800fa3c:	469e      	mov	lr, r3
 800fa3e:	4770      	bx	lr
