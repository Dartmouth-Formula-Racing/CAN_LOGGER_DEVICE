
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c74  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  08010e74  08010e74  00020e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080117e8  080117e8  00030168  2**0
                  CONTENTS
  4 .ARM          00000008  080117e8  080117e8  000217e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080117f0  080117f0  00030168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080117f0  080117f0  000217f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080117f4  080117f4  000217f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  080117f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e54  20000168  08011960  00030168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004fbc  08011960  00034fbc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f286  00000000  00000000  000301d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b5b  00000000  00000000  0004f45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  00053fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001256  00000000  00000000  000557f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e070  00000000  00000000  00056a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000219ef  00000000  00000000  00084ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001009c4  00000000  00000000  000a64a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d70  00000000  00000000  001a6e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001adbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000168 	.word	0x20000168
 800021c:	00000000 	.word	0x00000000
 8000220:	08010e5c 	.word	0x08010e5c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000016c 	.word	0x2000016c
 800023c:	08010e5c 	.word	0x08010e5c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b0c9      	sub	sp, #292	; 0x124
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 f8a8 	bl	8001736 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 fa6d 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fb85 	bl	8000cf8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 fb5d 	bl	8000cac <MX_DMA_Init>
  MX_CAN1_Init();
 80005f2:	f000 facf 	bl	8000b94 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 80005f6:	f000 fb03 	bl	8000c00 <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 fb27 	bl	8000c4c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005fe:	f009 f91f 	bl	8009840 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000602:	f00e fc7b 	bl	800eefc <MX_USB_DEVICE_Init>
		RESET_BUFFER,
		RESET_STATE,
		POWER_OFF
	} state_t;
	//Starting state is PERIPHERAL_INIT
	state_t state = TURN_ON;
 8000606:	2300      	movs	r3, #0
 8000608:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	uint32_t byteswritten; /* File write/read counts */
	uint32_t buffer_emptyings = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	uint32_t total_size = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 8000618:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800061c:	2b0c      	cmp	r3, #12
 800061e:	f200 8227 	bhi.w	8000a70 <main+0x494>
 8000622:	a201      	add	r2, pc, #4	; (adr r2, 8000628 <main+0x4c>)
 8000624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000628:	0800065d 	.word	0x0800065d
 800062c:	0800068f 	.word	0x0800068f
 8000630:	0800070d 	.word	0x0800070d
 8000634:	08000853 	.word	0x08000853
 8000638:	08000a85 	.word	0x08000a85
 800063c:	08000a85 	.word	0x08000a85
 8000640:	0800087d 	.word	0x0800087d
 8000644:	08000a85 	.word	0x08000a85
 8000648:	080008c3 	.word	0x080008c3
 800064c:	08000a85 	.word	0x08000a85
 8000650:	080008e3 	.word	0x080008e3
 8000654:	080009f7 	.word	0x080009f7
 8000658:	08000a4b 	.word	0x08000a4b
		case TURN_ON:
			MX_DMA_Init();
 800065c:	f000 fb26 	bl	8000cac <MX_DMA_Init>
			MX_SDMMC1_SD_Init();
 8000660:	f000 face 	bl	8000c00 <MX_SDMMC1_SD_Init>
			MX_FATFS_Init();
 8000664:	f009 f8ec 	bl	8009840 <MX_FATFS_Init>
			POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 8000668:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800066c:	48b3      	ldr	r0, [pc, #716]	; (800093c <main+0x360>)
 800066e:	f002 fd4b 	bl	8003108 <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4bb2      	ldr	r3, [pc, #712]	; (8000940 <main+0x364>)
 8000678:	701a      	strb	r2, [r3, #0]
			state = POWER_STATE ? PERIPHERAL_INIT : POWER_OFF;
 800067a:	4bb1      	ldr	r3, [pc, #708]	; (8000940 <main+0x364>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <main+0xaa>
 8000682:	2301      	movs	r3, #1
 8000684:	e000      	b.n	8000688 <main+0xac>
 8000686:	230c      	movs	r3, #12
 8000688:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 800068c:	e1ff      	b.n	8000a8e <main+0x4b2>

		case PERIPHERAL_INIT:
			buffer1[0] = '\00';
 800068e:	4bad      	ldr	r3, [pc, #692]	; (8000944 <main+0x368>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
			buffer2[0] = '\00';
 8000694:	4bac      	ldr	r3, [pc, #688]	; (8000948 <main+0x36c>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
			double_buffer_fill_level[0] = 0;
 800069a:	4bac      	ldr	r3, [pc, #688]	; (800094c <main+0x370>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
			double_buffer_fill_level[1] = 0;
 80006a0:	4baa      	ldr	r3, [pc, #680]	; (800094c <main+0x370>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	705a      	strb	r2, [r3, #1]
			filling_buffer = 0;
 80006a6:	4baa      	ldr	r3, [pc, #680]	; (8000950 <main+0x374>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]

			printf("Initializing Peripherals...\r\n");
 80006ac:	48a9      	ldr	r0, [pc, #676]	; (8000954 <main+0x378>)
 80006ae:	f00f fc4f 	bl	800ff50 <puts>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin,
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b8:	48a7      	ldr	r0, [pc, #668]	; (8000958 <main+0x37c>)
 80006ba:	f002 fd3d 	bl	8003138 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET); //Red LED

			//Initializing CAN
			if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80006be:	48a7      	ldr	r0, [pc, #668]	; (800095c <main+0x380>)
 80006c0:	f001 faa2 	bl	8001c08 <HAL_CAN_Start>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d002      	beq.n	80006d0 <main+0xf4>
				Error_Handler();
 80006ca:	f000 fcf5 	bl	80010b8 <Error_Handler>
 80006ce:	e006      	b.n	80006de <main+0x102>
			else if (CAN_Filter_Config() != HAL_OK)
 80006d0:	f000 fc78 	bl	8000fc4 <CAN_Filter_Config>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <main+0x102>
				Error_Handler();
 80006da:	f000 fced 	bl	80010b8 <Error_Handler>

			printf("CAN initialization succeeded...\r\n");
 80006de:	48a0      	ldr	r0, [pc, #640]	; (8000960 <main+0x384>)
 80006e0:	f00f fc36 	bl	800ff50 <puts>

			//Mount and Format SD Card
			if (f_mount(&SDFatFS, SDPath, 0) != FR_OK) {
 80006e4:	2200      	movs	r2, #0
 80006e6:	499f      	ldr	r1, [pc, #636]	; (8000964 <main+0x388>)
 80006e8:	489f      	ldr	r0, [pc, #636]	; (8000968 <main+0x38c>)
 80006ea:	f00d fded 	bl	800e2c8 <f_mount>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d004      	beq.n	80006fe <main+0x122>
				printf("Mounting failed!\r\n");
 80006f4:	489d      	ldr	r0, [pc, #628]	; (800096c <main+0x390>)
 80006f6:	f00f fc2b 	bl	800ff50 <puts>
				Error_Handler();
 80006fa:	f000 fcdd 	bl	80010b8 <Error_Handler>
			}

			printf("SD initialization succeeded...\r\n");
 80006fe:	489c      	ldr	r0, [pc, #624]	; (8000970 <main+0x394>)
 8000700:	f00f fc26 	bl	800ff50 <puts>

			state = CREATE_LOG_FILE;
 8000704:	2302      	movs	r3, #2
 8000706:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

			break;
 800070a:	e1c0      	b.n	8000a8e <main+0x4b2>
		case CREATE_LOG_FILE:
			printf("Creating new log file...\r\n");
 800070c:	4899      	ldr	r0, [pc, #612]	; (8000974 <main+0x398>)
 800070e:	f00f fc1f 	bl	800ff50 <puts>

			TCHAR filename[FILENAME_MAX_BYTES];

			if (f_opendir(&dir, "/CAN_DATA") != FR_OK) {
 8000712:	4999      	ldr	r1, [pc, #612]	; (8000978 <main+0x39c>)
 8000714:	4899      	ldr	r0, [pc, #612]	; (800097c <main+0x3a0>)
 8000716:	f00e f9f8 	bl	800eb0a <f_opendir>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d004      	beq.n	800072a <main+0x14e>
				printf("Failed to open root directory!\r\n");
 8000720:	4897      	ldr	r0, [pc, #604]	; (8000980 <main+0x3a4>)
 8000722:	f00f fc15 	bl	800ff50 <puts>
				Error_Handler();
 8000726:	f000 fcc7 	bl	80010b8 <Error_Handler>
			}
			char last_file_number[5];
			uint16_t max_file_number = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			do {
				if (f_readdir(&dir, &fno) != FR_OK){
 8000730:	4994      	ldr	r1, [pc, #592]	; (8000984 <main+0x3a8>)
 8000732:	4892      	ldr	r0, [pc, #584]	; (800097c <main+0x3a0>)
 8000734:	f00e fa82 	bl	800ec3c <f_readdir>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d004      	beq.n	8000748 <main+0x16c>
					printf("Failed to read /CAN_DATA directory!\r\n");
 800073e:	4892      	ldr	r0, [pc, #584]	; (8000988 <main+0x3ac>)
 8000740:	f00f fc06 	bl	800ff50 <puts>
					Error_Handler();
 8000744:	f000 fcb8 	bl	80010b8 <Error_Handler>
				}
				if (fno.fname[0] != 0){
 8000748:	4b8e      	ldr	r3, [pc, #568]	; (8000984 <main+0x3a8>)
 800074a:	7d9b      	ldrb	r3, [r3, #22]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d03d      	beq.n	80007cc <main+0x1f0>
					for(int i=4; i<9; i++)
 8000750:	2304      	movs	r3, #4
 8000752:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000756:	e012      	b.n	800077e <main+0x1a2>
						last_file_number[i-4] = fno.fname[i];
 8000758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800075c:	3b04      	subs	r3, #4
 800075e:	4989      	ldr	r1, [pc, #548]	; (8000984 <main+0x3a8>)
 8000760:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000764:	440a      	add	r2, r1
 8000766:	3216      	adds	r2, #22
 8000768:	7812      	ldrb	r2, [r2, #0]
 800076a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800076e:	443b      	add	r3, r7
 8000770:	f803 2c20 	strb.w	r2, [r3, #-32]
					for(int i=4; i<9; i++)
 8000774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000778:	3301      	adds	r3, #1
 800077a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800077e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000782:	2b08      	cmp	r3, #8
 8000784:	dde8      	ble.n	8000758 <main+0x17c>

					if (max_file_number < strtol(last_file_number, NULL, 10))
 8000786:	f8b7 4112 	ldrh.w	r4, [r7, #274]	; 0x112
 800078a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800078e:	220a      	movs	r2, #10
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f00f fb4e 	bl	800fe34 <strtol>
 8000798:	4603      	mov	r3, r0
 800079a:	429c      	cmp	r4, r3
 800079c:	da09      	bge.n	80007b2 <main+0x1d6>
						max_file_number = strtol(last_file_number, NULL, 10);
 800079e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80007a2:	220a      	movs	r2, #10
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f00f fb44 	bl	800fe34 <strtol>
 80007ac:	4603      	mov	r3, r0
 80007ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

					printf("File Name String: %s File Name Number: %d\n\r", last_file_number, max_file_number + 1);
 80007b2:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80007bc:	4619      	mov	r1, r3
 80007be:	4873      	ldr	r0, [pc, #460]	; (800098c <main+0x3b0>)
 80007c0:	f00f fb60 	bl	800fe84 <iprintf>
					printf("File found: %s\n\r", fno.fname); // Print File Name
 80007c4:	4972      	ldr	r1, [pc, #456]	; (8000990 <main+0x3b4>)
 80007c6:	4873      	ldr	r0, [pc, #460]	; (8000994 <main+0x3b8>)
 80007c8:	f00f fb5c 	bl	800fe84 <iprintf>
				}
			} while (fno.fname[0] != 0);
 80007cc:	4b6d      	ldr	r3, [pc, #436]	; (8000984 <main+0x3a8>)
 80007ce:	7d9b      	ldrb	r3, [r3, #22]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1ad      	bne.n	8000730 <main+0x154>

			snprintf(filename, FILENAME_MAX_BYTES, "/CAN_DATA/CAN_%05d.log", max_file_number + 1);
 80007d4:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80007d8:	3301      	adds	r3, #1
 80007da:	4638      	mov	r0, r7
 80007dc:	4a6e      	ldr	r2, [pc, #440]	; (8000998 <main+0x3bc>)
 80007de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e2:	f00f f9c1 	bl	800fb68 <sniprintf>
			printf("Exited while with file Name String: %s \n\r", filename);
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	486c      	ldr	r0, [pc, #432]	; (800099c <main+0x3c0>)
 80007ec:	f00f fb4a 	bl	800fe84 <iprintf>

			f_closedir(&dir);
 80007f0:	4862      	ldr	r0, [pc, #392]	; (800097c <main+0x3a0>)
 80007f2:	f00e f9fd 	bl	800ebf0 <f_closedir>
			printf("Closing directory and attempting to open file.\n\r");
 80007f6:	486a      	ldr	r0, [pc, #424]	; (80009a0 <main+0x3c4>)
 80007f8:	f00f fb44 	bl	800fe84 <iprintf>
			//Open file for writing (Create)
			if (f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE)
 80007fc:	463b      	mov	r3, r7
 80007fe:	220a      	movs	r2, #10
 8000800:	4619      	mov	r1, r3
 8000802:	4868      	ldr	r0, [pc, #416]	; (80009a4 <main+0x3c8>)
 8000804:	f00d fda6 	bl	800e354 <f_open>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d006      	beq.n	800081c <main+0x240>
					!= FR_OK) {
				printf("Failed to create new log file: %s ...!\r\n", filename);
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4865      	ldr	r0, [pc, #404]	; (80009a8 <main+0x3cc>)
 8000814:	f00f fb36 	bl	800fe84 <iprintf>
				Error_Handler();
 8000818:	f000 fc4e 	bl	80010b8 <Error_Handler>
			}
			printf("Starting new log file: %s ...\r\n", filename);
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4862      	ldr	r0, [pc, #392]	; (80009ac <main+0x3d0>)
 8000822:	f00f fb2f 	bl	800fe84 <iprintf>

			if (HAL_CAN_ActivateNotification(&hcan1,
 8000826:	2102      	movs	r1, #2
 8000828:	484c      	ldr	r0, [pc, #304]	; (800095c <main+0x380>)
 800082a:	f001 fb8c 	bl	8001f46 <HAL_CAN_ActivateNotification>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d004      	beq.n	800083e <main+0x262>
					CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
				/* Notification Error */
				printf("Failed to activate CAN\n\r");
 8000834:	485e      	ldr	r0, [pc, #376]	; (80009b0 <main+0x3d4>)
 8000836:	f00f fb25 	bl	800fe84 <iprintf>
				Error_Handler();
 800083a:	f000 fc3d 	bl	80010b8 <Error_Handler>
			}

			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_SET); // Green LED
 800083e:	2201      	movs	r2, #1
 8000840:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000844:	4844      	ldr	r0, [pc, #272]	; (8000958 <main+0x37c>)
 8000846:	f002 fc77 	bl	8003138 <HAL_GPIO_WritePin>

			state = STANDBY;
 800084a:	2303      	movs	r3, #3
 800084c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 8000850:	e11d      	b.n	8000a8e <main+0x4b2>

		case STANDBY:
			if (POWER_STATE & buffer_filled)
 8000852:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <main+0x364>)
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	4b57      	ldr	r3, [pc, #348]	; (80009b4 <main+0x3d8>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4013      	ands	r3, r2
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d003      	beq.n	800086a <main+0x28e>
				state = SD_CARD_WRITE;
 8000862:	2306      	movs	r3, #6
 8000864:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			else if (!POWER_STATE)
				state = RESET_STATE;
			break;
 8000868:	e10e      	b.n	8000a88 <main+0x4ac>
			else if (!POWER_STATE)
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <main+0x364>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	f040 810a 	bne.w	8000a88 <main+0x4ac>
				state = RESET_STATE;
 8000874:	230b      	movs	r3, #11
 8000876:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 800087a:	e105      	b.n	8000a88 <main+0x4ac>

		case SWITCH_BUFFER:
			break;

		case SD_CARD_WRITE:
			res = f_write(&SDFile, filling_buffer ? buffer1 : buffer2,
 800087c:	4b34      	ldr	r3, [pc, #208]	; (8000950 <main+0x374>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <main+0x2ac>
 8000884:	492f      	ldr	r1, [pc, #188]	; (8000944 <main+0x368>)
 8000886:	e000      	b.n	800088a <main+0x2ae>
 8000888:	492f      	ldr	r1, [pc, #188]	; (8000948 <main+0x36c>)
 800088a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800088e:	f44f 52a4 	mov.w	r2, #5248	; 0x1480
 8000892:	4844      	ldr	r0, [pc, #272]	; (80009a4 <main+0x3c8>)
 8000894:	f00d ff1c 	bl	800e6d0 <f_write>
 8000898:	4603      	mov	r3, r0
 800089a:	461a      	mov	r2, r3
 800089c:	4b46      	ldr	r3, [pc, #280]	; (80009b8 <main+0x3dc>)
 800089e:	701a      	strb	r2, [r3, #0]
			ENCODED_CAN_SIZE_BYTES * CAN_MESSAGES_TO_BUFFER,
					(void*) &byteswritten);
			if ((byteswritten == 0) || (res != FR_OK)) {
 80008a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d003      	beq.n	80008b0 <main+0x2d4>
 80008a8:	4b43      	ldr	r3, [pc, #268]	; (80009b8 <main+0x3dc>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d004      	beq.n	80008ba <main+0x2de>
				printf("\r\nWriting Failed!\r\n");
 80008b0:	4842      	ldr	r0, [pc, #264]	; (80009bc <main+0x3e0>)
 80008b2:	f00f fb4d 	bl	800ff50 <puts>
				Error_Handler();
 80008b6:	f000 fbff 	bl	80010b8 <Error_Handler>
			}

			state = USB_TRANSMIT;
 80008ba:	2308      	movs	r3, #8
 80008bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 80008c0:	e0e5      	b.n	8000a8e <main+0x4b2>

		case SD_CARD_WRITE_ERROR:
			break;

		case USB_TRANSMIT:
			CDC_Transmit_FS(filling_buffer ? buffer1 : buffer2,
 80008c2:	4b23      	ldr	r3, [pc, #140]	; (8000950 <main+0x374>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <main+0x2f2>
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <main+0x368>)
 80008cc:	e000      	b.n	80008d0 <main+0x2f4>
 80008ce:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <main+0x36c>)
 80008d0:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 80008d4:	4618      	mov	r0, r3
 80008d6:	f00e fbcf 	bl	800f078 <CDC_Transmit_FS>
			ENCODED_CAN_SIZE_BYTES * CAN_MESSAGES_TO_BUFFER);

			state = RESET_BUFFER;
 80008da:	230a      	movs	r3, #10
 80008dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 80008e0:	e0d5      	b.n	8000a8e <main+0x4b2>

		case USB_TRANSMIT_ERROR:
			break;

		case RESET_BUFFER:
			buffer_emptyings++;
 80008e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80008e6:	3301      	adds	r3, #1
 80008e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
			printf("emptied buffer %d\n\r", !filling_buffer);
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <main+0x374>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	bf0c      	ite	eq
 80008f4:	2301      	moveq	r3, #1
 80008f6:	2300      	movne	r3, #0
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4619      	mov	r1, r3
 80008fc:	4830      	ldr	r0, [pc, #192]	; (80009c0 <main+0x3e4>)
 80008fe:	f00f fac1 	bl	800fe84 <iprintf>
			printf("buffers emptied: %ld\n\r", buffer_emptyings);
 8000902:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8000906:	482f      	ldr	r0, [pc, #188]	; (80009c4 <main+0x3e8>)
 8000908:	f00f fabc 	bl	800fe84 <iprintf>
			printf("Wrote buffer sizeof: %ld\n\r", byteswritten);
 800090c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000910:	4619      	mov	r1, r3
 8000912:	482d      	ldr	r0, [pc, #180]	; (80009c8 <main+0x3ec>)
 8000914:	f00f fab6 	bl	800fe84 <iprintf>
			total_size += byteswritten;
 8000918:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800091c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000920:	4413      	add	r3, r2
 8000922:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			byteswritten = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (filling_buffer) {
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <main+0x374>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d04b      	beq.n	80009cc <main+0x3f0>
				buffer1[0] = '\00';
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <main+0x368>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	e04a      	b.n	80009d2 <main+0x3f6>
 800093c:	40021000 	.word	0x40021000
 8000940:	200004c8 	.word	0x200004c8
 8000944:	200004cc 	.word	0x200004cc
 8000948:	20001950 	.word	0x20001950
 800094c:	20002dd4 	.word	0x20002dd4
 8000950:	20002dd6 	.word	0x20002dd6
 8000954:	08010e74 	.word	0x08010e74
 8000958:	40021400 	.word	0x40021400
 800095c:	20000184 	.word	0x20000184
 8000960:	08010e94 	.word	0x08010e94
 8000964:	20002de4 	.word	0x20002de4
 8000968:	20002de8 	.word	0x20002de8
 800096c:	08010eb8 	.word	0x08010eb8
 8000970:	08010ecc 	.word	0x08010ecc
 8000974:	08010eec 	.word	0x08010eec
 8000978:	08010f08 	.word	0x08010f08
 800097c:	2000037c 	.word	0x2000037c
 8000980:	08010f14 	.word	0x08010f14
 8000984:	200003b0 	.word	0x200003b0
 8000988:	08010f34 	.word	0x08010f34
 800098c:	08010f5c 	.word	0x08010f5c
 8000990:	200003c6 	.word	0x200003c6
 8000994:	08010f88 	.word	0x08010f88
 8000998:	08010f9c 	.word	0x08010f9c
 800099c:	08010fb4 	.word	0x08010fb4
 80009a0:	08010fe0 	.word	0x08010fe0
 80009a4:	2000301c 	.word	0x2000301c
 80009a8:	08011014 	.word	0x08011014
 80009ac:	08011040 	.word	0x08011040
 80009b0:	08011060 	.word	0x08011060
 80009b4:	20002dd7 	.word	0x20002dd7
 80009b8:	20000378 	.word	0x20000378
 80009bc:	0801107c 	.word	0x0801107c
 80009c0:	08011090 	.word	0x08011090
 80009c4:	080110a4 	.word	0x080110a4
 80009c8:	080110bc 	.word	0x080110bc
			} else {
				buffer2[0] = '\00';
 80009cc:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <main+0x4b4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
			}
			double_buffer_fill_level[!filling_buffer] = 0;
 80009d2:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <main+0x4b8>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	bf0c      	ite	eq
 80009da:	2301      	moveq	r3, #1
 80009dc:	2300      	movne	r3, #0
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <main+0x4bc>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	5499      	strb	r1, [r3, r2]
			buffer_filled = 0;
 80009e8:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <main+0x4c0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]

			state = STANDBY;
 80009ee:	2303      	movs	r3, #3
 80009f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 80009f4:	e04b      	b.n	8000a8e <main+0x4b2>

		case RESET_STATE:
			HAL_CAN_DeactivateNotification(&hcan1,
 80009f6:	2102      	movs	r1, #2
 80009f8:	4829      	ldr	r0, [pc, #164]	; (8000aa0 <main+0x4c4>)
 80009fa:	f001 faca 	bl	8001f92 <HAL_CAN_DeactivateNotification>
											CAN_IT_RX_FIFO0_MSG_PENDING);
			HAL_CAN_Stop(&hcan1);
 80009fe:	4828      	ldr	r0, [pc, #160]	; (8000aa0 <main+0x4c4>)
 8000a00:	f001 f946 	bl	8001c90 <HAL_CAN_Stop>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin,
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a0a:	4826      	ldr	r0, [pc, #152]	; (8000aa4 <main+0x4c8>)
 8000a0c:	f002 fb94 	bl	8003138 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET); //Red LED

			printf("total sizeof: %ld\n\r", total_size);
 8000a10:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000a14:	4824      	ldr	r0, [pc, #144]	; (8000aa8 <main+0x4cc>)
 8000a16:	f00f fa35 	bl	800fe84 <iprintf>
			total_size = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			buffer_emptyings = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
			printf("\r\nUnmounting!\r\n");
 8000a26:	4821      	ldr	r0, [pc, #132]	; (8000aac <main+0x4d0>)
 8000a28:	f00f fa92 	bl	800ff50 <puts>
			f_close(&SDFile);
 8000a2c:	4820      	ldr	r0, [pc, #128]	; (8000ab0 <main+0x4d4>)
 8000a2e:	f00e f842 	bl	800eab6 <f_close>
			f_mount(0, (TCHAR const*) NULL, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2000      	movs	r0, #0
 8000a38:	f00d fc46 	bl	800e2c8 <f_mount>

			printf("Turning off!\n\r");
 8000a3c:	481d      	ldr	r0, [pc, #116]	; (8000ab4 <main+0x4d8>)
 8000a3e:	f00f fa21 	bl	800fe84 <iprintf>
			state = POWER_OFF;
 8000a42:	230c      	movs	r3, #12
 8000a44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 8000a48:	e021      	b.n	8000a8e <main+0x4b2>

		case POWER_OFF:
			HAL_Delay(1000);
 8000a4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a4e:	f000 fecf 	bl	80017f0 <HAL_Delay>

			if (POWER_STATE) {
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <main+0x4dc>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d018      	beq.n	8000a8c <main+0x4b0>
				printf("Turning back on!\n\r");
 8000a5a:	4818      	ldr	r0, [pc, #96]	; (8000abc <main+0x4e0>)
 8000a5c:	f00f fa12 	bl	800fe84 <iprintf>
				HAL_Delay(3000);
 8000a60:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a64:	f000 fec4 	bl	80017f0 <HAL_Delay>
				state = TURN_ON;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			}
			break;
 8000a6e:	e00d      	b.n	8000a8c <main+0x4b0>

		default:
			printf("CAN logger in unknown state!\n\r");
 8000a70:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <main+0x4e4>)
 8000a72:	f00f fa07 	bl	800fe84 <iprintf>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin,
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <main+0x4c8>)
 8000a7e:	f002 fb5b 	bl	8003138 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET); // Red LED
			break;
 8000a82:	e004      	b.n	8000a8e <main+0x4b2>
			break;
 8000a84:	bf00      	nop
 8000a86:	e5c7      	b.n	8000618 <main+0x3c>
			break;
 8000a88:	bf00      	nop
 8000a8a:	e5c5      	b.n	8000618 <main+0x3c>
			break;
 8000a8c:	bf00      	nop
		switch (state) {
 8000a8e:	e5c3      	b.n	8000618 <main+0x3c>
 8000a90:	20001950 	.word	0x20001950
 8000a94:	20002dd6 	.word	0x20002dd6
 8000a98:	20002dd4 	.word	0x20002dd4
 8000a9c:	20002dd7 	.word	0x20002dd7
 8000aa0:	20000184 	.word	0x20000184
 8000aa4:	40021400 	.word	0x40021400
 8000aa8:	080110d8 	.word	0x080110d8
 8000aac:	080110ec 	.word	0x080110ec
 8000ab0:	2000301c 	.word	0x2000301c
 8000ab4:	080110fc 	.word	0x080110fc
 8000ab8:	200004c8 	.word	0x200004c8
 8000abc:	0801110c 	.word	0x0801110c
 8000ac0:	08011120 	.word	0x08011120

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	; 0x50
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	2234      	movs	r2, #52	; 0x34
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f00f fa53 	bl	800ff7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae8:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <SystemClock_Config+0xc8>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	4a27      	ldr	r2, [pc, #156]	; (8000b8c <SystemClock_Config+0xc8>)
 8000aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af2:	6413      	str	r3, [r2, #64]	; 0x40
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <SystemClock_Config+0xc8>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b00:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <SystemClock_Config+0xcc>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b08:	4a21      	ldr	r2, [pc, #132]	; (8000b90 <SystemClock_Config+0xcc>)
 8000b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <SystemClock_Config+0xcc>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b26:	2302      	movs	r3, #2
 8000b28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b30:	2304      	movs	r3, #4
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b34:	2360      	movs	r3, #96	; 0x60
 8000b36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 fdeb 	bl	8004724 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b54:	f000 fab0 	bl	80010b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	2101      	movs	r1, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f004 f883 	bl	8004c80 <HAL_RCC_ClockConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b80:	f000 fa9a 	bl	80010b8 <Error_Handler>
  }
}
 8000b84:	bf00      	nop
 8000b86:	3750      	adds	r7, #80	; 0x50
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40007000 	.word	0x40007000

08000b94 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000b9a:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <MX_CAN1_Init+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bb2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000bb6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bbe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000be6:	f000 fe27 	bl	8001838 <HAL_CAN_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000bf0:	f000 fa62 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000184 	.word	0x20000184
 8000bfc:	40006400 	.word	0x40006400

08000c00 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_SDMMC1_SD_Init+0x44>)
 8000c06:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <MX_SDMMC1_SD_Init+0x48>)
 8000c08:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_SDMMC1_SD_Init+0x44>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_SDMMC1_SD_Init+0x44>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_SDMMC1_SD_Init+0x44>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_SDMMC1_SD_Init+0x44>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_SDMMC1_SD_Init+0x44>)
 8000c24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c28:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_SDMMC1_SD_Init+0x44>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <MX_SDMMC1_SD_Init+0x44>)
 8000c32:	f004 fe73 	bl	800591c <HAL_SD_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_SDMMC1_SD_Init+0x40>
		Error_Handler();
 8000c3c:	f000 fa3c 	bl	80010b8 <Error_Handler>
	}
  /* USER CODE END SDMMC1_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200001ac 	.word	0x200001ac
 8000c48:	40012c00 	.word	0x40012c00

08000c4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_USART3_UART_Init+0x58>)
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <MX_USART3_UART_Init+0x5c>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_USART3_UART_Init+0x58>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_USART3_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_USART3_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_USART3_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_USART3_UART_Init+0x58>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_USART3_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_USART3_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <MX_USART3_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_USART3_UART_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_USART3_UART_Init+0x58>)
 8000c90:	f005 ff6c 	bl	8006b6c <HAL_UART_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c9a:	f000 fa0d 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200002f0 	.word	0x200002f0
 8000ca8:	40004800 	.word	0x40004800

08000cac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <MX_DMA_Init+0x48>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <MX_DMA_Init+0x48>)
 8000cb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <MX_DMA_Init+0x48>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	203b      	movs	r0, #59	; 0x3b
 8000cd0:	f001 fc91 	bl	80025f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000cd4:	203b      	movs	r0, #59	; 0x3b
 8000cd6:	f001 fcaa 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2045      	movs	r0, #69	; 0x45
 8000ce0:	f001 fc89 	bl	80025f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000ce4:	2045      	movs	r0, #69	; 0x45
 8000ce6:	f001 fca2 	bl	800262e <HAL_NVIC_EnableIRQ>

}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	; 0x38
 8000cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b69      	ldr	r3, [pc, #420]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a68      	ldr	r2, [pc, #416]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b66      	ldr	r3, [pc, #408]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	623b      	str	r3, [r7, #32]
 8000d24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	4b63      	ldr	r3, [pc, #396]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a62      	ldr	r2, [pc, #392]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b60      	ldr	r3, [pc, #384]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3a:	61fb      	str	r3, [r7, #28]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d3e:	4b5d      	ldr	r3, [pc, #372]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a5c      	ldr	r2, [pc, #368]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d44:	f043 0320 	orr.w	r3, r3, #32
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b5a      	ldr	r3, [pc, #360]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0320 	and.w	r3, r3, #32
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d56:	4b57      	ldr	r3, [pc, #348]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a56      	ldr	r2, [pc, #344]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d5c:	f043 0310 	orr.w	r3, r3, #16
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b54      	ldr	r3, [pc, #336]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6e:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a50      	ldr	r2, [pc, #320]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b4e      	ldr	r3, [pc, #312]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d86:	4b4b      	ldr	r3, [pc, #300]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a4a      	ldr	r2, [pc, #296]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b48      	ldr	r3, [pc, #288]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b45      	ldr	r3, [pc, #276]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a44      	ldr	r2, [pc, #272]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b42      	ldr	r3, [pc, #264]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a3e      	ldr	r2, [pc, #248]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b3c      	ldr	r3, [pc, #240]	; (8000eb4 <MX_GPIO_Init+0x1bc>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd4:	4838      	ldr	r0, [pc, #224]	; (8000eb8 <MX_GPIO_Init+0x1c0>)
 8000dd6:	f002 f9af 	bl	8003138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2140      	movs	r1, #64	; 0x40
 8000dde:	4837      	ldr	r0, [pc, #220]	; (8000ebc <MX_GPIO_Init+0x1c4>)
 8000de0:	f002 f9aa 	bl	8003138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2180      	movs	r1, #128	; 0x80
 8000de8:	4835      	ldr	r0, [pc, #212]	; (8000ec0 <MX_GPIO_Init+0x1c8>)
 8000dea:	f002 f9a5 	bl	8003138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Error_LED_Pin */
  GPIO_InitStruct.Pin = Error_LED_Pin;
 8000dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Error_LED_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	482c      	ldr	r0, [pc, #176]	; (8000eb8 <MX_GPIO_Init+0x1c0>)
 8000e08:	f001 ffd2 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e1e:	2306      	movs	r3, #6
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	4826      	ldr	r0, [pc, #152]	; (8000ec4 <MX_GPIO_Init+0x1cc>)
 8000e2a:	f001 ffc1 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PowerSwitch_Pin */
  GPIO_InitStruct.Pin = PowerSwitch_Pin;
 8000e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e34:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PowerSwitch_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	481f      	ldr	r0, [pc, #124]	; (8000ec4 <MX_GPIO_Init+0x1cc>)
 8000e46:	f001 ffb3 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin|USB_OverCurrent_Pin;
 8000e4a:	2384      	movs	r3, #132	; 0x84
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4817      	ldr	r0, [pc, #92]	; (8000ebc <MX_GPIO_Init+0x1c4>)
 8000e5e:	f001 ffa7 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e62:	2340      	movs	r3, #64	; 0x40
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	4810      	ldr	r0, [pc, #64]	; (8000ebc <MX_GPIO_Init+0x1c4>)
 8000e7a:	f001 ff99 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <MX_GPIO_Init+0x1c8>)
 8000e96:	f001 ff8b 	bl	8002db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2028      	movs	r0, #40	; 0x28
 8000ea0:	f001 fba9 	bl	80025f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ea4:	2028      	movs	r0, #40	; 0x28
 8000ea6:	f001 fbc2 	bl	800262e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eaa:	bf00      	nop
 8000eac:	3738      	adds	r7, #56	; 0x38
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40021400 	.word	0x40021400
 8000ebc:	40021800 	.word	0x40021800
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <Get_and_Append_CAN_Message_to_Buffer>:

/* USER CODE BEGIN 4 */
void Get_and_Append_CAN_Message_to_Buffer() {
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eca:	b09d      	sub	sp, #116	; 0x74
 8000ecc:	af06      	add	r7, sp, #24
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_msg[8];

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg)
 8000ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4833      	ldr	r0, [pc, #204]	; (8000fa8 <Get_and_Append_CAN_Message_to_Buffer+0xe0>)
 8000eda:	f000 ff22 	bl	8001d22 <HAL_CAN_GetRxMessage>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <Get_and_Append_CAN_Message_to_Buffer+0x26>
			!= HAL_OK){
		printf("Failed to get CAN message\n\r");
 8000ee4:	4831      	ldr	r0, [pc, #196]	; (8000fac <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 8000ee6:	f00e ffcd 	bl	800fe84 <iprintf>
		Error_Handler();
 8000eea:	f000 f8e5 	bl	80010b8 <Error_Handler>
	}

	uint16_t data1 = (rcvd_msg[0] << 8) + rcvd_msg[1];
 8000eee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	4413      	add	r3, r2
 8000f00:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint16_t data2 = (rcvd_msg[2] << 8) + rcvd_msg[3];
 8000f04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	021b      	lsls	r3, r3, #8
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	4413      	add	r3, r2
 8000f16:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t data3 = (rcvd_msg[4] << 8) + rcvd_msg[5];
 8000f1a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t data4 = (rcvd_msg[6] << 8) + rcvd_msg[7];
 8000f30:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	4413      	add	r3, r2
 8000f42:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	char encodedData[ENCODED_CAN_SIZE_BYTES];

	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8000f46:	f000 fc47 	bl	80017d8 <HAL_GetTick>
 8000f4a:	4606      	mov	r6, r0
 8000f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f4e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8000f52:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8000f56:	f8b7 0052 	ldrh.w	r0, [r7, #82]	; 0x52
 8000f5a:	f8b7 4050 	ldrh.w	r4, [r7, #80]	; 0x50
 8000f5e:	463d      	mov	r5, r7
 8000f60:	9404      	str	r4, [sp, #16]
 8000f62:	9003      	str	r0, [sp, #12]
 8000f64:	9102      	str	r1, [sp, #8]
 8000f66:	9201      	str	r2, [sp, #4]
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	4633      	mov	r3, r6
 8000f6c:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <Get_and_Append_CAN_Message_to_Buffer+0xe8>)
 8000f6e:	212a      	movs	r1, #42	; 0x2a
 8000f70:	4628      	mov	r0, r5
 8000f72:	f00e fdf9 	bl	800fb68 <sniprintf>
			"(%010ld) X %08lX#%04X%04X%04X%04X\n", HAL_GetTick(),
			RxHeader.ExtId, data1, data2, data3, data4);

	strcat(filling_buffer ? buffer2 : buffer1, encodedData);
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <Get_and_Append_CAN_Message_to_Buffer+0xba>
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000f80:	e000      	b.n	8000f84 <Get_and_Append_CAN_Message_to_Buffer+0xbc>
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <Get_and_Append_CAN_Message_to_Buffer+0xf4>)
 8000f84:	463a      	mov	r2, r7
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f00e ffe9 	bl	800ff60 <strcat>
	double_buffer_fill_level[filling_buffer]++;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 8000f94:	5cd2      	ldrb	r2, [r2, r3]
 8000f96:	3201      	adds	r2, #1
 8000f98:	b2d1      	uxtb	r1, r2
 8000f9a:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 8000f9c:	54d1      	strb	r1, [r2, r3]
}
 8000f9e:	bf00      	nop
 8000fa0:	375c      	adds	r7, #92	; 0x5c
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000184 	.word	0x20000184
 8000fac:	08011140 	.word	0x08011140
 8000fb0:	0801115c 	.word	0x0801115c
 8000fb4:	20002dd6 	.word	0x20002dd6
 8000fb8:	20001950 	.word	0x20001950
 8000fbc:	200004cc 	.word	0x200004cc
 8000fc0:	20002dd4 	.word	0x20002dd4

08000fc4 <CAN_Filter_Config>:

HAL_StatusTypeDef CAN_Filter_Config(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 8000fce:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 8000fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 8000fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe0:	0a1a      	lsrs	r2, r3, #8
 8000fe2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8000fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fec:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 8000ff0:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8000ff2:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 8000ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff6:	0a1a      	lsrs	r2, r3, #8
 8000ff8:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800100c:	2301      	movs	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 8001010:	2301      	movs	r3, #1
 8001012:	623b      	str	r3, [r7, #32]

	return HAL_CAN_ConfigFilter(&hcan1, &filter);
 8001014:	463b      	mov	r3, r7
 8001016:	4619      	mov	r1, r3
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <CAN_Filter_Config+0x64>)
 800101a:	f000 fd09 	bl	8001a30 <HAL_CAN_ConfigFilter>
 800101e:	4603      	mov	r3, r0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3730      	adds	r7, #48	; 0x30
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000184 	.word	0x20000184

0800102c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	if (double_buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b80      	cmp	r3, #128	; 0x80
 800103a:	d108      	bne.n	800104e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
			&& double_buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER)
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800103e:	785b      	ldrb	r3, [r3, #1]
 8001040:	2b80      	cmp	r3, #128	; 0x80
 8001042:	d104      	bne.n	800104e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		printf("Buffers are full\n\r");
 8001044:	4810      	ldr	r0, [pc, #64]	; (8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8001046:	f00e ff1d 	bl	800fe84 <iprintf>
		Error_Handler();
 800104a:	f000 f835 	bl	80010b8 <Error_Handler>
	}

	Get_and_Append_CAN_Message_to_Buffer();
 800104e:	f7ff ff3b 	bl	8000ec8 <Get_and_Append_CAN_Message_to_Buffer>

	if (double_buffer_fill_level[filling_buffer] == CAN_MESSAGES_TO_BUFFER) {
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800105a:	5c9b      	ldrb	r3, [r3, r2]
 800105c:	2b80      	cmp	r3, #128	; 0x80
 800105e:	d10c      	bne.n	800107a <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		buffer_filled = 1;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
		filling_buffer = !filling_buffer;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	bf0c      	ite	eq
 800106e:	2301      	moveq	r3, #1
 8001070:	2300      	movne	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001078:	701a      	strb	r2, [r3, #0]
	}
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20002dd4 	.word	0x20002dd4
 8001088:	08011180 	.word	0x08011180
 800108c:	20002dd6 	.word	0x20002dd6
 8001090:	20002dd7 	.word	0x20002dd7

08001094 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 800109c:	1d39      	adds	r1, r7, #4
 800109e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a2:	2201      	movs	r2, #1
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <__io_putchar+0x20>)
 80010a6:	f005 fdaf 	bl	8006c08 <HAL_UART_Transmit>

	return ch;
 80010aa:	687b      	ldr	r3, [r7, #4]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200002f0 	.word	0x200002f0

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("\r\nError Handler Reached\r\n");
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <Error_Handler+0x1c>)
 80010c2:	f00e ff45 	bl	800ff50 <puts>
	HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <Error_Handler+0x20>)
 80010ce:	f002 f833 	bl	8003138 <HAL_GPIO_WritePin>

	while (1) {
 80010d2:	e7fe      	b.n	80010d2 <Error_Handler+0x1a>
 80010d4:	08011194 	.word	0x08011194
 80010d8:	40021400 	.word	0x40021400

080010dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_MspInit+0x44>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_MspInit+0x44>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	6413      	str	r3, [r2, #64]	; 0x40
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_MspInit+0x44>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_MspInit+0x44>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <HAL_MspInit+0x44>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_MspInit+0x44>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800

08001124 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <HAL_CAN_MspInit+0x8c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d12f      	bne.n	80011a6 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_CAN_MspInit+0x90>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <HAL_CAN_MspInit+0x90>)
 800114c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001150:	6413      	str	r3, [r2, #64]	; 0x40
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_CAN_MspInit+0x90>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_CAN_MspInit+0x90>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <HAL_CAN_MspInit+0x90>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_CAN_MspInit+0x90>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001176:	2303      	movs	r3, #3
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001186:	2309      	movs	r3, #9
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4809      	ldr	r0, [pc, #36]	; (80011b8 <HAL_CAN_MspInit+0x94>)
 8001192:	f001 fe0d 	bl	8002db0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2014      	movs	r0, #20
 800119c:	f001 fa2b 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011a0:	2014      	movs	r0, #20
 80011a2:	f001 fa44 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	; 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40006400 	.word	0x40006400
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020c00 	.word	0x40020c00

080011bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0ae      	sub	sp, #184	; 0xb8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2290      	movs	r2, #144	; 0x90
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f00e fece 	bl	800ff7e <memset>
  if(hsd->Instance==SDMMC1)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a73      	ldr	r2, [pc, #460]	; (80013b4 <HAL_SD_MspInit+0x1f8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	f040 80de 	bne.w	80013aa <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80011ee:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80011f2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 80011f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4618      	mov	r0, r3
 8001202:	f003 ff63 	bl	80050cc <HAL_RCCEx_PeriphCLKConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800120c:	f7ff ff54 	bl	80010b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001210:	4b69      	ldr	r3, [pc, #420]	; (80013b8 <HAL_SD_MspInit+0x1fc>)
 8001212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001214:	4a68      	ldr	r2, [pc, #416]	; (80013b8 <HAL_SD_MspInit+0x1fc>)
 8001216:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800121a:	6453      	str	r3, [r2, #68]	; 0x44
 800121c:	4b66      	ldr	r3, [pc, #408]	; (80013b8 <HAL_SD_MspInit+0x1fc>)
 800121e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001228:	4b63      	ldr	r3, [pc, #396]	; (80013b8 <HAL_SD_MspInit+0x1fc>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	4a62      	ldr	r2, [pc, #392]	; (80013b8 <HAL_SD_MspInit+0x1fc>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	6313      	str	r3, [r2, #48]	; 0x30
 8001234:	4b60      	ldr	r3, [pc, #384]	; (80013b8 <HAL_SD_MspInit+0x1fc>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001240:	4b5d      	ldr	r3, [pc, #372]	; (80013b8 <HAL_SD_MspInit+0x1fc>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	4a5c      	ldr	r2, [pc, #368]	; (80013b8 <HAL_SD_MspInit+0x1fc>)
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	6313      	str	r3, [r2, #48]	; 0x30
 800124c:	4b5a      	ldr	r3, [pc, #360]	; (80013b8 <HAL_SD_MspInit+0x1fc>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001258:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800125c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001272:	230c      	movs	r3, #12
 8001274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001278:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800127c:	4619      	mov	r1, r3
 800127e:	484f      	ldr	r0, [pc, #316]	; (80013bc <HAL_SD_MspInit+0x200>)
 8001280:	f001 fd96 	bl	8002db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001284:	2304      	movs	r3, #4
 8001286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800129c:	230c      	movs	r3, #12
 800129e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4845      	ldr	r0, [pc, #276]	; (80013c0 <HAL_SD_MspInit+0x204>)
 80012aa:	f001 fd81 	bl	8002db0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80012ae:	4b45      	ldr	r3, [pc, #276]	; (80013c4 <HAL_SD_MspInit+0x208>)
 80012b0:	4a45      	ldr	r2, [pc, #276]	; (80013c8 <HAL_SD_MspInit+0x20c>)
 80012b2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80012b4:	4b43      	ldr	r3, [pc, #268]	; (80013c4 <HAL_SD_MspInit+0x208>)
 80012b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ba:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012bc:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <HAL_SD_MspInit+0x208>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c2:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <HAL_SD_MspInit+0x208>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012c8:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <HAL_SD_MspInit+0x208>)
 80012ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ce:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012d0:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <HAL_SD_MspInit+0x208>)
 80012d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012d6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012d8:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <HAL_SD_MspInit+0x208>)
 80012da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012de:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80012e0:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <HAL_SD_MspInit+0x208>)
 80012e2:	2220      	movs	r2, #32
 80012e4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012e6:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <HAL_SD_MspInit+0x208>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012ec:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <HAL_SD_MspInit+0x208>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <HAL_SD_MspInit+0x208>)
 80012f4:	2203      	movs	r2, #3
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80012f8:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <HAL_SD_MspInit+0x208>)
 80012fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001300:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <HAL_SD_MspInit+0x208>)
 8001302:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001308:	482e      	ldr	r0, [pc, #184]	; (80013c4 <HAL_SD_MspInit+0x208>)
 800130a:	f001 f9ab 	bl	8002664 <HAL_DMA_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001314:	f7ff fed0 	bl	80010b8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a2a      	ldr	r2, [pc, #168]	; (80013c4 <HAL_SD_MspInit+0x208>)
 800131c:	641a      	str	r2, [r3, #64]	; 0x40
 800131e:	4a29      	ldr	r2, [pc, #164]	; (80013c4 <HAL_SD_MspInit+0x208>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <HAL_SD_MspInit+0x210>)
 8001326:	4a2a      	ldr	r2, [pc, #168]	; (80013d0 <HAL_SD_MspInit+0x214>)
 8001328:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800132a:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_SD_MspInit+0x210>)
 800132c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001330:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_SD_MspInit+0x210>)
 8001334:	2240      	movs	r2, #64	; 0x40
 8001336:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <HAL_SD_MspInit+0x210>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <HAL_SD_MspInit+0x210>)
 8001340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001344:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_SD_MspInit+0x210>)
 8001348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800134c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <HAL_SD_MspInit+0x210>)
 8001350:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001354:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_SD_MspInit+0x210>)
 8001358:	2220      	movs	r2, #32
 800135a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_SD_MspInit+0x210>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <HAL_SD_MspInit+0x210>)
 8001364:	2204      	movs	r2, #4
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_SD_MspInit+0x210>)
 800136a:	2203      	movs	r2, #3
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_SD_MspInit+0x210>)
 8001370:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001374:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_SD_MspInit+0x210>)
 8001378:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800137c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800137e:	4813      	ldr	r0, [pc, #76]	; (80013cc <HAL_SD_MspInit+0x210>)
 8001380:	f001 f970 	bl	8002664 <HAL_DMA_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800138a:	f7ff fe95 	bl	80010b8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <HAL_SD_MspInit+0x210>)
 8001392:	63da      	str	r2, [r3, #60]	; 0x3c
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <HAL_SD_MspInit+0x210>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	2031      	movs	r0, #49	; 0x31
 80013a0:	f001 f929 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80013a4:	2031      	movs	r0, #49	; 0x31
 80013a6:	f001 f942 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	37b8      	adds	r7, #184	; 0xb8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40012c00 	.word	0x40012c00
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020c00 	.word	0x40020c00
 80013c4:	20000230 	.word	0x20000230
 80013c8:	40026458 	.word	0x40026458
 80013cc:	20000290 	.word	0x20000290
 80013d0:	400264a0 	.word	0x400264a0

080013d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0ae      	sub	sp, #184	; 0xb8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2290      	movs	r2, #144	; 0x90
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00e fdc2 	bl	800ff7e <memset>
  if(huart->Instance==USART3)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a22      	ldr	r2, [pc, #136]	; (8001488 <HAL_UART_MspInit+0xb4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d13c      	bne.n	800147e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001408:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800140a:	2300      	movs	r3, #0
 800140c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fe5a 	bl	80050cc <HAL_RCCEx_PeriphCLKConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800141e:	f7ff fe4b 	bl	80010b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <HAL_UART_MspInit+0xb8>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a19      	ldr	r2, [pc, #100]	; (800148c <HAL_UART_MspInit+0xb8>)
 8001428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <HAL_UART_MspInit+0xb8>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <HAL_UART_MspInit+0xb8>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a13      	ldr	r2, [pc, #76]	; (800148c <HAL_UART_MspInit+0xb8>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_UART_MspInit+0xb8>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001452:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800146c:	2307      	movs	r3, #7
 800146e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001472:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <HAL_UART_MspInit+0xbc>)
 800147a:	f001 fc99 	bl	8002db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	37b8      	adds	r7, #184	; 0xb8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40004800 	.word	0x40004800
 800148c:	40023800 	.word	0x40023800
 8001490:	40020c00 	.word	0x40020c00

08001494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <NMI_Handler+0x4>

0800149a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <HardFault_Handler+0x4>

080014a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <MemManage_Handler+0x4>

080014a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <BusFault_Handler+0x4>

080014ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <UsageFault_Handler+0x4>

080014b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e0:	f000 f966 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <CAN1_RX0_IRQHandler+0x10>)
 80014ee:	f000 fd77 	bl	8001fe0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000184 	.word	0x20000184

080014fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 8001500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001504:	4806      	ldr	r0, [pc, #24]	; (8001520 <EXTI15_10_IRQHandler+0x24>)
 8001506:	f001 fdff 	bl	8003108 <HAL_GPIO_ReadPin>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <EXTI15_10_IRQHandler+0x28>)
 8001510:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PowerSwitch_Pin);
 8001512:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001516:	f001 fe29 	bl	800316c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	200004c8 	.word	0x200004c8

08001528 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <SDMMC1_IRQHandler+0x10>)
 800152e:	f004 fc75 	bl	8005e1c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200001ac 	.word	0x200001ac

0800153c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <DMA2_Stream3_IRQHandler+0x10>)
 8001542:	f001 f9bf 	bl	80028c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000230 	.word	0x20000230

08001550 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <OTG_FS_IRQHandler+0x10>)
 8001556:	f001 ff72 	bl	800343e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20004968 	.word	0x20004968

08001564 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <DMA2_Stream6_IRQHandler+0x10>)
 800156a:	f001 f9ab 	bl	80028c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000290 	.word	0x20000290

08001578 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e00a      	b.n	80015a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800158a:	f3af 8000 	nop.w
 800158e:	4601      	mov	r1, r0
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	60ba      	str	r2, [r7, #8]
 8001596:	b2ca      	uxtb	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbf0      	blt.n	800158a <_read+0x12>
  }

  return len;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	e009      	b.n	80015d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	60ba      	str	r2, [r7, #8]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fd61 	bl	8001094 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbf1      	blt.n	80015c4 <_write+0x12>
  }
  return len;
 80015e0:	687b      	ldr	r3, [r7, #4]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <_close>:

int _close(int file)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001612:	605a      	str	r2, [r3, #4]
  return 0;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_isatty>:

int _isatty(int file)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d207      	bcs.n	8001694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001684:	f00e fc94 	bl	800ffb0 <__errno>
 8001688:	4603      	mov	r3, r0
 800168a:	220c      	movs	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001692:	e009      	b.n	80016a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <_sbrk+0x64>)
 80016a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20080000 	.word	0x20080000
 80016b4:	00000400 	.word	0x00000400
 80016b8:	20002dd8 	.word	0x20002dd8
 80016bc:	20004fc0 	.word	0x20004fc0

080016c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800171c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e8:	480d      	ldr	r0, [pc, #52]	; (8001720 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ea:	490e      	ldr	r1, [pc, #56]	; (8001724 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001700:	4c0b      	ldr	r4, [pc, #44]	; (8001730 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800170e:	f7ff ffd7 	bl	80016c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001712:	f00e fc53 	bl	800ffbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7fe ff61 	bl	80005dc <main>
  bx  lr    
 800171a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800171c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001728:	080117f8 	.word	0x080117f8
  ldr r2, =_sbss
 800172c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001730:	20004fbc 	.word	0x20004fbc

08001734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC_IRQHandler>

08001736 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173a:	2003      	movs	r0, #3
 800173c:	f000 ff50 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001740:	2000      	movs	r0, #0
 8001742:	f000 f805 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001746:	f7ff fcc9 	bl	80010dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 ff6b 	bl	800264a <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800178c:	f000 ff33 	bl	80025f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008
 80017d4:	20002ddc 	.word	0x20002ddc

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20002ddc 	.word	0x20002ddc

080017f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff ffee 	bl	80017d8 <HAL_GetTick>
 80017fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001808:	d005      	beq.n	8001816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_Delay+0x44>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001816:	bf00      	nop
 8001818:	f7ff ffde 	bl	80017d8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d8f7      	bhi.n	8001818 <HAL_Delay+0x28>
  {
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000008 	.word	0x20000008

08001838 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0ed      	b.n	8001a26 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fc64 	bl	8001124 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0201 	orr.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800186c:	f7ff ffb4 	bl	80017d8 <HAL_GetTick>
 8001870:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001872:	e012      	b.n	800189a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001874:	f7ff ffb0 	bl	80017d8 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b0a      	cmp	r3, #10
 8001880:	d90b      	bls.n	800189a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2205      	movs	r2, #5
 8001892:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0c5      	b.n	8001a26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0e5      	beq.n	8001874 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0202 	bic.w	r2, r2, #2
 80018b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018b8:	f7ff ff8e 	bl	80017d8 <HAL_GetTick>
 80018bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018be:	e012      	b.n	80018e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018c0:	f7ff ff8a 	bl	80017d8 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b0a      	cmp	r3, #10
 80018cc:	d90b      	bls.n	80018e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2205      	movs	r2, #5
 80018de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e09f      	b.n	8001a26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1e5      	bne.n	80018c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7e1b      	ldrb	r3, [r3, #24]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d108      	bne.n	800190e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e007      	b.n	800191e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7e5b      	ldrb	r3, [r3, #25]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d108      	bne.n	8001938 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e007      	b.n	8001948 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001946:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7e9b      	ldrb	r3, [r3, #26]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d108      	bne.n	8001962 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0220 	orr.w	r2, r2, #32
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	e007      	b.n	8001972 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0220 	bic.w	r2, r2, #32
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7edb      	ldrb	r3, [r3, #27]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d108      	bne.n	800198c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0210 	bic.w	r2, r2, #16
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	e007      	b.n	800199c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0210 	orr.w	r2, r2, #16
 800199a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7f1b      	ldrb	r3, [r3, #28]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d108      	bne.n	80019b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0208 	orr.w	r2, r2, #8
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e007      	b.n	80019c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0208 	bic.w	r2, r2, #8
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7f5b      	ldrb	r3, [r3, #29]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d108      	bne.n	80019e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 0204 	orr.w	r2, r2, #4
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e007      	b.n	80019f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0204 	bic.w	r2, r2, #4
 80019ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	ea42 0103 	orr.w	r1, r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	1e5a      	subs	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a46:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a48:	7cfb      	ldrb	r3, [r7, #19]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d003      	beq.n	8001a56 <HAL_CAN_ConfigFilter+0x26>
 8001a4e:	7cfb      	ldrb	r3, [r7, #19]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	f040 80c7 	bne.w	8001be4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a69      	ldr	r2, [pc, #420]	; (8001c00 <HAL_CAN_ConfigFilter+0x1d0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d001      	beq.n	8001a64 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001a60:	4b68      	ldr	r3, [pc, #416]	; (8001c04 <HAL_CAN_ConfigFilter+0x1d4>)
 8001a62:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a6a:	f043 0201 	orr.w	r2, r3, #1
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	4a63      	ldr	r2, [pc, #396]	; (8001c04 <HAL_CAN_ConfigFilter+0x1d4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d111      	bne.n	8001aa0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a82:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d123      	bne.n	8001b12 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001aec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3248      	adds	r2, #72	; 0x48
 8001af2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b06:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b08:	6979      	ldr	r1, [r7, #20]
 8001b0a:	3348      	adds	r3, #72	; 0x48
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	440b      	add	r3, r1
 8001b10:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d122      	bne.n	8001b60 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b3a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3248      	adds	r2, #72	; 0x48
 8001b40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b54:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b56:	6979      	ldr	r1, [r7, #20]
 8001b58:	3348      	adds	r3, #72	; 0x48
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d109      	bne.n	8001b7c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b7a:	e007      	b.n	8001b8c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001ba6:	e007      	b.n	8001bb8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d107      	bne.n	8001bd0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bd6:	f023 0201 	bic.w	r2, r3, #1
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e006      	b.n	8001bf2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
  }
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40003400 	.word	0x40003400
 8001c04:	40006400 	.word	0x40006400

08001c08 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d12e      	bne.n	8001c7a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c34:	f7ff fdd0 	bl	80017d8 <HAL_GetTick>
 8001c38:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c3a:	e012      	b.n	8001c62 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c3c:	f7ff fdcc 	bl	80017d8 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b0a      	cmp	r3, #10
 8001c48:	d90b      	bls.n	8001c62 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2205      	movs	r2, #5
 8001c5a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e012      	b.n	8001c88 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e5      	bne.n	8001c3c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e006      	b.n	8001c88 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
  }
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d133      	bne.n	8001d0c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cb4:	f7ff fd90 	bl	80017d8 <HAL_GetTick>
 8001cb8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cba:	e012      	b.n	8001ce2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cbc:	f7ff fd8c 	bl	80017d8 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b0a      	cmp	r3, #10
 8001cc8:	d90b      	bls.n	8001ce2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2205      	movs	r2, #5
 8001cda:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e01b      	b.n	8001d1a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0e5      	beq.n	8001cbc <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0202 	bic.w	r2, r2, #2
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e006      	b.n	8001d1a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
  }
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d22:	b480      	push	{r7}
 8001d24:	b087      	sub	sp, #28
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d36:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d003      	beq.n	8001d46 <HAL_CAN_GetRxMessage+0x24>
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	f040 80f3 	bne.w	8001f2c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10e      	bne.n	8001d6a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d116      	bne.n	8001d88 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e0e7      	b.n	8001f3a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d107      	bne.n	8001d88 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0d8      	b.n	8001f3a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	331b      	adds	r3, #27
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	4413      	add	r3, r2
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0204 	and.w	r2, r3, #4
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10c      	bne.n	8001dc0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	331b      	adds	r3, #27
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	4413      	add	r3, r2
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0d5b      	lsrs	r3, r3, #21
 8001db6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	331b      	adds	r3, #27
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	4413      	add	r3, r2
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	08db      	lsrs	r3, r3, #3
 8001dd0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	331b      	adds	r3, #27
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	4413      	add	r3, r2
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0202 	and.w	r2, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	331b      	adds	r3, #27
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	4413      	add	r3, r2
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 020f 	and.w	r2, r3, #15
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	331b      	adds	r3, #27
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	4413      	add	r3, r2
 8001e12:	3304      	adds	r3, #4
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	331b      	adds	r3, #27
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	4413      	add	r3, r2
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0a1a      	lsrs	r2, r3, #8
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	3301      	adds	r3, #1
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	0c1a      	lsrs	r2, r3, #16
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0e1a      	lsrs	r2, r3, #24
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	3303      	adds	r3, #3
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	3304      	adds	r3, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0a1a      	lsrs	r2, r3, #8
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	3305      	adds	r3, #5
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0c1a      	lsrs	r2, r3, #16
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	3306      	adds	r3, #6
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	0e1a      	lsrs	r2, r3, #24
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	3307      	adds	r3, #7
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d108      	bne.n	8001f18 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0220 	orr.w	r2, r2, #32
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	e007      	b.n	8001f28 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0220 	orr.w	r2, r2, #32
 8001f26:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e006      	b.n	8001f3a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
  }
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b085      	sub	sp, #20
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f56:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d002      	beq.n	8001f64 <HAL_CAN_ActivateNotification+0x1e>
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d109      	bne.n	8001f78 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6959      	ldr	r1, [r3, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	e006      	b.n	8001f86 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
  }
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b085      	sub	sp, #20
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d002      	beq.n	8001fb0 <HAL_CAN_DeactivateNotification+0x1e>
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d10a      	bne.n	8001fc6 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6959      	ldr	r1, [r3, #20]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e006      	b.n	8001fd4 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
  }
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d07c      	beq.n	8002120 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d023      	beq.n	8002078 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2201      	movs	r2, #1
 8002036:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f983 	bl	800234e <HAL_CAN_TxMailbox0CompleteCallback>
 8002048:	e016      	b.n	8002078 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d004      	beq.n	800205e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
 800205c:	e00c      	b.n	8002078 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
 8002070:	e002      	b.n	8002078 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f989 	bl	800238a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d024      	beq.n	80020cc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f963 	bl	8002362 <HAL_CAN_TxMailbox1CompleteCallback>
 800209c:	e016      	b.n	80020cc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d004      	beq.n	80020b2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
 80020b0:	e00c      	b.n	80020cc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d004      	beq.n	80020c6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
 80020c4:	e002      	b.n	80020cc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f969 	bl	800239e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d024      	beq.n	8002120 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f943 	bl	8002376 <HAL_CAN_TxMailbox2CompleteCallback>
 80020f0:	e016      	b.n	8002120 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d004      	beq.n	8002106 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
 8002104:	e00c      	b.n	8002120 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d004      	beq.n	800211a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
 8002118:	e002      	b.n	8002120 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f949 	bl	80023b2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00c      	beq.n	8002144 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2210      	movs	r2, #16
 8002142:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d006      	beq.n	8002166 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2208      	movs	r2, #8
 800215e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f930 	bl	80023c6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d009      	beq.n	8002184 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe ff54 	bl	800102c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00c      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800219e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2210      	movs	r2, #16
 80021a6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00b      	beq.n	80021ca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2208      	movs	r2, #8
 80021c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f912 	bl	80023ee <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d009      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f8f9 	bl	80023da <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d006      	beq.n	800220a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2210      	movs	r2, #16
 8002202:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f8fc 	bl	8002402 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d006      	beq.n	800222c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2208      	movs	r2, #8
 8002224:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f8f5 	bl	8002416 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d07b      	beq.n	800232e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d072      	beq.n	8002326 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002262:	2b00      	cmp	r3, #0
 8002264:	d008      	beq.n	8002278 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	f043 0302 	orr.w	r3, r3, #2
 8002276:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	f043 0304 	orr.w	r3, r3, #4
 8002292:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800229a:	2b00      	cmp	r3, #0
 800229c:	d043      	beq.n	8002326 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d03e      	beq.n	8002326 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022ae:	2b60      	cmp	r3, #96	; 0x60
 80022b0:	d02b      	beq.n	800230a <HAL_CAN_IRQHandler+0x32a>
 80022b2:	2b60      	cmp	r3, #96	; 0x60
 80022b4:	d82e      	bhi.n	8002314 <HAL_CAN_IRQHandler+0x334>
 80022b6:	2b50      	cmp	r3, #80	; 0x50
 80022b8:	d022      	beq.n	8002300 <HAL_CAN_IRQHandler+0x320>
 80022ba:	2b50      	cmp	r3, #80	; 0x50
 80022bc:	d82a      	bhi.n	8002314 <HAL_CAN_IRQHandler+0x334>
 80022be:	2b40      	cmp	r3, #64	; 0x40
 80022c0:	d019      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x316>
 80022c2:	2b40      	cmp	r3, #64	; 0x40
 80022c4:	d826      	bhi.n	8002314 <HAL_CAN_IRQHandler+0x334>
 80022c6:	2b30      	cmp	r3, #48	; 0x30
 80022c8:	d010      	beq.n	80022ec <HAL_CAN_IRQHandler+0x30c>
 80022ca:	2b30      	cmp	r3, #48	; 0x30
 80022cc:	d822      	bhi.n	8002314 <HAL_CAN_IRQHandler+0x334>
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d002      	beq.n	80022d8 <HAL_CAN_IRQHandler+0x2f8>
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d005      	beq.n	80022e2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80022d6:	e01d      	b.n	8002314 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	f043 0308 	orr.w	r3, r3, #8
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022e0:	e019      	b.n	8002316 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	f043 0310 	orr.w	r3, r3, #16
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022ea:	e014      	b.n	8002316 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	f043 0320 	orr.w	r3, r3, #32
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022f4:	e00f      	b.n	8002316 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022fe:	e00a      	b.n	8002316 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002308:	e005      	b.n	8002316 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002312:	e000      	b.n	8002316 <HAL_CAN_IRQHandler+0x336>
            break;
 8002314:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699a      	ldr	r2, [r3, #24]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002324:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2204      	movs	r2, #4
 800232c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f872 	bl	800242a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002346:	bf00      	nop
 8002348:	3728      	adds	r7, #40	; 0x28
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <__NVIC_SetPriorityGrouping+0x40>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	4313      	orrs	r3, r2
 800246c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246e:	4a04      	ldr	r2, [pc, #16]	; (8002480 <__NVIC_SetPriorityGrouping+0x40>)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	60d3      	str	r3, [r2, #12]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000ed00 	.word	0xe000ed00
 8002484:	05fa0000 	.word	0x05fa0000

08002488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <__NVIC_GetPriorityGrouping+0x18>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 0307 	and.w	r3, r3, #7
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db0b      	blt.n	80024ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4907      	ldr	r1, [pc, #28]	; (80024dc <__NVIC_EnableIRQ+0x38>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000e100 	.word	0xe000e100

080024e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	; (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	; (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf28      	it	cs
 8002552:	2304      	movcs	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3304      	adds	r3, #4
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b03      	subs	r3, #3
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
         );
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ac:	d301      	bcc.n	80025b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00f      	b.n	80025d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <SysTick_Config+0x40>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ba:	210f      	movs	r1, #15
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025c0:	f7ff ff8e 	bl	80024e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <SysTick_Config+0x40>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <SysTick_Config+0x40>)
 80025cc:	2207      	movs	r2, #7
 80025ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff29 	bl	8002440 <__NVIC_SetPriorityGrouping>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002608:	f7ff ff3e 	bl	8002488 <__NVIC_GetPriorityGrouping>
 800260c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f7ff ff8e 	bl	8002534 <NVIC_EncodePriority>
 8002618:	4602      	mov	r2, r0
 800261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff5d 	bl	80024e0 <__NVIC_SetPriority>
}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff31 	bl	80024a4 <__NVIC_EnableIRQ>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ffa2 	bl	800259c <SysTick_Config>
 8002658:	4603      	mov	r3, r0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002670:	f7ff f8b2 	bl	80017d8 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e099      	b.n	80027b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a0:	e00f      	b.n	80026c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026a2:	f7ff f899 	bl	80017d8 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	d908      	bls.n	80026c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2203      	movs	r2, #3
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e078      	b.n	80027b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1e8      	bne.n	80026a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	4b38      	ldr	r3, [pc, #224]	; (80027bc <HAL_DMA_Init+0x158>)
 80026dc:	4013      	ands	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002706:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	2b04      	cmp	r3, #4
 800271a:	d107      	bne.n	800272c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	4313      	orrs	r3, r2
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 0307 	bic.w	r3, r3, #7
 8002742:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2b04      	cmp	r3, #4
 8002754:	d117      	bne.n	8002786 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00e      	beq.n	8002786 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 faa5 	bl	8002cb8 <DMA_CheckFifoParam>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2240      	movs	r2, #64	; 0x40
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002782:	2301      	movs	r3, #1
 8002784:	e016      	b.n	80027b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fa5c 	bl	8002c4c <DMA_CalcBaseAndBitshift>
 8002794:	4603      	mov	r3, r0
 8002796:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	223f      	movs	r2, #63	; 0x3f
 800279e:	409a      	lsls	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	e010803f 	.word	0xe010803f

080027c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_DMA_Start_IT+0x26>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e048      	b.n	8002878 <HAL_DMA_Start_IT+0xb8>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d137      	bne.n	800286a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2202      	movs	r2, #2
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f9ee 	bl	8002bf0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	223f      	movs	r2, #63	; 0x3f
 800281a:	409a      	lsls	r2, r3
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0216 	orr.w	r2, r2, #22
 800282e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800283e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0208 	orr.w	r2, r2, #8
 8002856:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e005      	b.n	8002876 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002872:	2302      	movs	r3, #2
 8002874:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002876:	7dfb      	ldrb	r3, [r7, #23]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d004      	beq.n	800289e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e00c      	b.n	80028b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2205      	movs	r2, #5
 80028a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0201 	bic.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80028d0:	4b8e      	ldr	r3, [pc, #568]	; (8002b0c <HAL_DMA_IRQHandler+0x248>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a8e      	ldr	r2, [pc, #568]	; (8002b10 <HAL_DMA_IRQHandler+0x24c>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0a9b      	lsrs	r3, r3, #10
 80028dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ee:	2208      	movs	r2, #8
 80028f0:	409a      	lsls	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01a      	beq.n	8002930 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d013      	beq.n	8002930 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0204 	bic.w	r2, r2, #4
 8002916:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	2208      	movs	r2, #8
 800291e:	409a      	lsls	r2, r3
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002928:	f043 0201 	orr.w	r2, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	2201      	movs	r2, #1
 8002936:	409a      	lsls	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d012      	beq.n	8002966 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002952:	2201      	movs	r2, #1
 8002954:	409a      	lsls	r2, r3
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	f043 0202 	orr.w	r2, r3, #2
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	2204      	movs	r2, #4
 800296c:	409a      	lsls	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4013      	ands	r3, r2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d012      	beq.n	800299c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00b      	beq.n	800299c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	2204      	movs	r2, #4
 800298a:	409a      	lsls	r2, r3
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002994:	f043 0204 	orr.w	r2, r3, #4
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a0:	2210      	movs	r2, #16
 80029a2:	409a      	lsls	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d043      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d03c      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029be:	2210      	movs	r2, #16
 80029c0:	409a      	lsls	r2, r3
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d018      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d108      	bne.n	80029f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d024      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4798      	blx	r3
 80029f2:	e01f      	b.n	8002a34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01b      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
 8002a04:	e016      	b.n	8002a34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d107      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0208 	bic.w	r2, r2, #8
 8002a22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	2220      	movs	r2, #32
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 808f 	beq.w	8002b64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8087 	beq.w	8002b64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	d136      	bne.n	8002adc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0216 	bic.w	r2, r2, #22
 8002a7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695a      	ldr	r2, [r3, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <HAL_DMA_IRQHandler+0x1da>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0208 	bic.w	r2, r2, #8
 8002aac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab2:	223f      	movs	r2, #63	; 0x3f
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d07e      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
        }
        return;
 8002ada:	e079      	b.n	8002bd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d01d      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10d      	bne.n	8002b14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d031      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
 8002b08:	e02c      	b.n	8002b64 <HAL_DMA_IRQHandler+0x2a0>
 8002b0a:	bf00      	nop
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d023      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
 8002b24:	e01e      	b.n	8002b64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10f      	bne.n	8002b54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0210 	bic.w	r2, r2, #16
 8002b42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d032      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d022      	beq.n	8002bbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2205      	movs	r2, #5
 8002b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0201 	bic.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	3301      	adds	r3, #1
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d307      	bcc.n	8002bac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f2      	bne.n	8002b90 <HAL_DMA_IRQHandler+0x2cc>
 8002baa:	e000      	b.n	8002bae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
 8002bce:	e000      	b.n	8002bd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bd0:	bf00      	nop
    }
  }
}
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	d108      	bne.n	8002c30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c2e:	e007      	b.n	8002c40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	60da      	str	r2, [r3, #12]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	3b10      	subs	r3, #16
 8002c5c:	4a13      	ldr	r2, [pc, #76]	; (8002cac <DMA_CalcBaseAndBitshift+0x60>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c66:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d908      	bls.n	8002c8c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	1d1a      	adds	r2, r3, #4
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	659a      	str	r2, [r3, #88]	; 0x58
 8002c8a:	e006      	b.n	8002c9a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	aaaaaaab 	.word	0xaaaaaaab
 8002cb0:	08011258 	.word	0x08011258
 8002cb4:	fffffc00 	.word	0xfffffc00

08002cb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d11f      	bne.n	8002d12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d856      	bhi.n	8002d86 <DMA_CheckFifoParam+0xce>
 8002cd8:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <DMA_CheckFifoParam+0x28>)
 8002cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cde:	bf00      	nop
 8002ce0:	08002cf1 	.word	0x08002cf1
 8002ce4:	08002d03 	.word	0x08002d03
 8002ce8:	08002cf1 	.word	0x08002cf1
 8002cec:	08002d87 	.word	0x08002d87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d046      	beq.n	8002d8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d00:	e043      	b.n	8002d8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d0a:	d140      	bne.n	8002d8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d10:	e03d      	b.n	8002d8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1a:	d121      	bne.n	8002d60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d837      	bhi.n	8002d92 <DMA_CheckFifoParam+0xda>
 8002d22:	a201      	add	r2, pc, #4	; (adr r2, 8002d28 <DMA_CheckFifoParam+0x70>)
 8002d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d28:	08002d39 	.word	0x08002d39
 8002d2c:	08002d3f 	.word	0x08002d3f
 8002d30:	08002d39 	.word	0x08002d39
 8002d34:	08002d51 	.word	0x08002d51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3c:	e030      	b.n	8002da0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d025      	beq.n	8002d96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4e:	e022      	b.n	8002d96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d58:	d11f      	bne.n	8002d9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d5e:	e01c      	b.n	8002d9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d903      	bls.n	8002d6e <DMA_CheckFifoParam+0xb6>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d003      	beq.n	8002d74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d6c:	e018      	b.n	8002da0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
      break;
 8002d72:	e015      	b.n	8002da0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00e      	beq.n	8002d9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      break;
 8002d84:	e00b      	b.n	8002d9e <DMA_CheckFifoParam+0xe6>
      break;
 8002d86:	bf00      	nop
 8002d88:	e00a      	b.n	8002da0 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e008      	b.n	8002da0 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e006      	b.n	8002da0 <DMA_CheckFifoParam+0xe8>
      break;
 8002d92:	bf00      	nop
 8002d94:	e004      	b.n	8002da0 <DMA_CheckFifoParam+0xe8>
      break;
 8002d96:	bf00      	nop
 8002d98:	e002      	b.n	8002da0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d9a:	bf00      	nop
 8002d9c:	e000      	b.n	8002da0 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9e:	bf00      	nop
    }
  } 
  
  return status; 
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop

08002db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	; 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	e175      	b.n	80030bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	f040 8164 	bne.w	80030b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d005      	beq.n	8002e06 <HAL_GPIO_Init+0x56>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d130      	bne.n	8002e68 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	2203      	movs	r2, #3
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 0201 	and.w	r2, r3, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d017      	beq.n	8002ea4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d123      	bne.n	8002ef8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	08da      	lsrs	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3208      	adds	r2, #8
 8002eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	220f      	movs	r2, #15
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	08da      	lsrs	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3208      	adds	r2, #8
 8002ef2:	69b9      	ldr	r1, [r7, #24]
 8002ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	2203      	movs	r2, #3
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0203 	and.w	r2, r3, #3
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80be 	beq.w	80030b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3a:	4b66      	ldr	r3, [pc, #408]	; (80030d4 <HAL_GPIO_Init+0x324>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	4a65      	ldr	r2, [pc, #404]	; (80030d4 <HAL_GPIO_Init+0x324>)
 8002f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f44:	6453      	str	r3, [r2, #68]	; 0x44
 8002f46:	4b63      	ldr	r3, [pc, #396]	; (80030d4 <HAL_GPIO_Init+0x324>)
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f52:	4a61      	ldr	r2, [pc, #388]	; (80030d8 <HAL_GPIO_Init+0x328>)
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	089b      	lsrs	r3, r3, #2
 8002f58:	3302      	adds	r3, #2
 8002f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	220f      	movs	r2, #15
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a58      	ldr	r2, [pc, #352]	; (80030dc <HAL_GPIO_Init+0x32c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d037      	beq.n	8002fee <HAL_GPIO_Init+0x23e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a57      	ldr	r2, [pc, #348]	; (80030e0 <HAL_GPIO_Init+0x330>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d031      	beq.n	8002fea <HAL_GPIO_Init+0x23a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a56      	ldr	r2, [pc, #344]	; (80030e4 <HAL_GPIO_Init+0x334>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d02b      	beq.n	8002fe6 <HAL_GPIO_Init+0x236>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a55      	ldr	r2, [pc, #340]	; (80030e8 <HAL_GPIO_Init+0x338>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d025      	beq.n	8002fe2 <HAL_GPIO_Init+0x232>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a54      	ldr	r2, [pc, #336]	; (80030ec <HAL_GPIO_Init+0x33c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01f      	beq.n	8002fde <HAL_GPIO_Init+0x22e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a53      	ldr	r2, [pc, #332]	; (80030f0 <HAL_GPIO_Init+0x340>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d019      	beq.n	8002fda <HAL_GPIO_Init+0x22a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a52      	ldr	r2, [pc, #328]	; (80030f4 <HAL_GPIO_Init+0x344>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_GPIO_Init+0x226>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a51      	ldr	r2, [pc, #324]	; (80030f8 <HAL_GPIO_Init+0x348>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00d      	beq.n	8002fd2 <HAL_GPIO_Init+0x222>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a50      	ldr	r2, [pc, #320]	; (80030fc <HAL_GPIO_Init+0x34c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d007      	beq.n	8002fce <HAL_GPIO_Init+0x21e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a4f      	ldr	r2, [pc, #316]	; (8003100 <HAL_GPIO_Init+0x350>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_GPIO_Init+0x21a>
 8002fc6:	2309      	movs	r3, #9
 8002fc8:	e012      	b.n	8002ff0 <HAL_GPIO_Init+0x240>
 8002fca:	230a      	movs	r3, #10
 8002fcc:	e010      	b.n	8002ff0 <HAL_GPIO_Init+0x240>
 8002fce:	2308      	movs	r3, #8
 8002fd0:	e00e      	b.n	8002ff0 <HAL_GPIO_Init+0x240>
 8002fd2:	2307      	movs	r3, #7
 8002fd4:	e00c      	b.n	8002ff0 <HAL_GPIO_Init+0x240>
 8002fd6:	2306      	movs	r3, #6
 8002fd8:	e00a      	b.n	8002ff0 <HAL_GPIO_Init+0x240>
 8002fda:	2305      	movs	r3, #5
 8002fdc:	e008      	b.n	8002ff0 <HAL_GPIO_Init+0x240>
 8002fde:	2304      	movs	r3, #4
 8002fe0:	e006      	b.n	8002ff0 <HAL_GPIO_Init+0x240>
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e004      	b.n	8002ff0 <HAL_GPIO_Init+0x240>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e002      	b.n	8002ff0 <HAL_GPIO_Init+0x240>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_GPIO_Init+0x240>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	f002 0203 	and.w	r2, r2, #3
 8002ff6:	0092      	lsls	r2, r2, #2
 8002ff8:	4093      	lsls	r3, r2
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003000:	4935      	ldr	r1, [pc, #212]	; (80030d8 <HAL_GPIO_Init+0x328>)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	089b      	lsrs	r3, r3, #2
 8003006:	3302      	adds	r3, #2
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800300e:	4b3d      	ldr	r3, [pc, #244]	; (8003104 <HAL_GPIO_Init+0x354>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003032:	4a34      	ldr	r2, [pc, #208]	; (8003104 <HAL_GPIO_Init+0x354>)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003038:	4b32      	ldr	r3, [pc, #200]	; (8003104 <HAL_GPIO_Init+0x354>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800305c:	4a29      	ldr	r2, [pc, #164]	; (8003104 <HAL_GPIO_Init+0x354>)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003062:	4b28      	ldr	r3, [pc, #160]	; (8003104 <HAL_GPIO_Init+0x354>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003086:	4a1f      	ldr	r2, [pc, #124]	; (8003104 <HAL_GPIO_Init+0x354>)
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <HAL_GPIO_Init+0x354>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030b0:	4a14      	ldr	r2, [pc, #80]	; (8003104 <HAL_GPIO_Init+0x354>)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3301      	adds	r3, #1
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	2b0f      	cmp	r3, #15
 80030c0:	f67f ae86 	bls.w	8002dd0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
 80030c8:	3724      	adds	r7, #36	; 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40013800 	.word	0x40013800
 80030dc:	40020000 	.word	0x40020000
 80030e0:	40020400 	.word	0x40020400
 80030e4:	40020800 	.word	0x40020800
 80030e8:	40020c00 	.word	0x40020c00
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40021400 	.word	0x40021400
 80030f4:	40021800 	.word	0x40021800
 80030f8:	40021c00 	.word	0x40021c00
 80030fc:	40022000 	.word	0x40022000
 8003100:	40022400 	.word	0x40022400
 8003104:	40013c00 	.word	0x40013c00

08003108 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	887b      	ldrh	r3, [r7, #2]
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
 8003124:	e001      	b.n	800312a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800312a:	7bfb      	ldrb	r3, [r7, #15]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	807b      	strh	r3, [r7, #2]
 8003144:	4613      	mov	r3, r2
 8003146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003148:	787b      	ldrb	r3, [r7, #1]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800314e:	887a      	ldrh	r2, [r7, #2]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003154:	e003      	b.n	800315e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003156:	887b      	ldrh	r3, [r7, #2]
 8003158:	041a      	lsls	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	619a      	str	r2, [r3, #24]
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d006      	beq.n	8003190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003182:	4a05      	ldr	r2, [pc, #20]	; (8003198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f806 	bl	800319c <HAL_GPIO_EXTI_Callback>
  }
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40013c00 	.word	0x40013c00

0800319c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031b4:	b08f      	sub	sp, #60	; 0x3c
 80031b6:	af0a      	add	r7, sp, #40	; 0x28
 80031b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e116      	b.n	80033f2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f00c f8a4 	bl	800f32c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2203      	movs	r2, #3
 80031e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d102      	bne.n	80031fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f004 ffdb 	bl	80081be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	603b      	str	r3, [r7, #0]
 800320e:	687e      	ldr	r6, [r7, #4]
 8003210:	466d      	mov	r5, sp
 8003212:	f106 0410 	add.w	r4, r6, #16
 8003216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800321a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800321c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800321e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003222:	e885 0003 	stmia.w	r5, {r0, r1}
 8003226:	1d33      	adds	r3, r6, #4
 8003228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800322a:	6838      	ldr	r0, [r7, #0]
 800322c:	f004 febc 	bl	8007fa8 <USB_CoreInit>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e0d7      	b.n	80033f2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2100      	movs	r1, #0
 8003248:	4618      	mov	r0, r3
 800324a:	f004 ffc9 	bl	80081e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800324e:	2300      	movs	r3, #0
 8003250:	73fb      	strb	r3, [r7, #15]
 8003252:	e04a      	b.n	80032ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	333d      	adds	r3, #61	; 0x3d
 8003264:	2201      	movs	r2, #1
 8003266:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	333c      	adds	r3, #60	; 0x3c
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	b298      	uxth	r0, r3
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3344      	adds	r3, #68	; 0x44
 8003290:	4602      	mov	r2, r0
 8003292:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	3340      	adds	r3, #64	; 0x40
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032a8:	7bfa      	ldrb	r2, [r7, #15]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	3348      	adds	r3, #72	; 0x48
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	334c      	adds	r3, #76	; 0x4c
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	3354      	adds	r3, #84	; 0x54
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	3301      	adds	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
 80032ea:	7bfa      	ldrb	r2, [r7, #15]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d3af      	bcc.n	8003254 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]
 80032f8:	e044      	b.n	8003384 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003322:	7bfa      	ldrb	r2, [r7, #15]
 8003324:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003326:	7bfa      	ldrb	r2, [r7, #15]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	3301      	adds	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
 8003384:	7bfa      	ldrb	r2, [r7, #15]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	429a      	cmp	r2, r3
 800338c:	d3b5      	bcc.n	80032fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	687e      	ldr	r6, [r7, #4]
 8003396:	466d      	mov	r5, sp
 8003398:	f106 0410 	add.w	r4, r6, #16
 800339c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800339e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80033ac:	1d33      	adds	r3, r6, #4
 80033ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b0:	6838      	ldr	r0, [r7, #0]
 80033b2:	f004 ff61 	bl	8008278 <USB_DevInit>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e014      	b.n	80033f2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d102      	bne.n	80033e6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f001 f97b 	bl	80046dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f006 f8af 	bl	800954e <USB_DevDisconnect>

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_PCD_Start+0x16>
 800340c:	2302      	movs	r3, #2
 800340e:	e012      	b.n	8003436 <HAL_PCD_Start+0x3c>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f004 febd 	bl	800819c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f006 f870 	bl	800950c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800343e:	b590      	push	{r4, r7, lr}
 8003440:	b08d      	sub	sp, #52	; 0x34
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f006 f92e 	bl	80096b6 <USB_GetMode>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	f040 84b7 	bne.w	8003dd0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f006 f892 	bl	8009590 <USB_ReadInterrupts>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 84ad 	beq.w	8003dce <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	0a1b      	lsrs	r3, r3, #8
 800347e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f006 f87f 	bl	8009590 <USB_ReadInterrupts>
 8003492:	4603      	mov	r3, r0
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b02      	cmp	r3, #2
 800349a:	d107      	bne.n	80034ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f002 0202 	and.w	r2, r2, #2
 80034aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f006 f86d 	bl	8009590 <USB_ReadInterrupts>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d161      	bne.n	8003584 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0210 	bic.w	r2, r2, #16
 80034ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f003 020f 	and.w	r2, r3, #15
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	4413      	add	r3, r2
 80034ec:	3304      	adds	r3, #4
 80034ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	0c5b      	lsrs	r3, r3, #17
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d124      	bne.n	8003546 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d035      	beq.n	8003574 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003516:	b29b      	uxth	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	6a38      	ldr	r0, [r7, #32]
 800351c:	f005 fea4 	bl	8009268 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800352c:	441a      	add	r2, r3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	6a1a      	ldr	r2, [r3, #32]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800353e:	441a      	add	r2, r3
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	621a      	str	r2, [r3, #32]
 8003544:	e016      	b.n	8003574 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	0c5b      	lsrs	r3, r3, #17
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	2b06      	cmp	r3, #6
 8003550:	d110      	bne.n	8003574 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003558:	2208      	movs	r2, #8
 800355a:	4619      	mov	r1, r3
 800355c:	6a38      	ldr	r0, [r7, #32]
 800355e:	f005 fe83 	bl	8009268 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	6a1a      	ldr	r2, [r3, #32]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	091b      	lsrs	r3, r3, #4
 800356a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800356e:	441a      	add	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0210 	orr.w	r2, r2, #16
 8003582:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f006 f801 	bl	8009590 <USB_ReadInterrupts>
 800358e:	4603      	mov	r3, r0
 8003590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003594:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003598:	f040 80a7 	bne.w	80036ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f006 f806 	bl	80095b6 <USB_ReadDevAllOutEpInterrupt>
 80035aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80035ac:	e099      	b.n	80036e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 808e 	beq.w	80036d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f006 f82a 	bl	800961e <USB_ReadDevOutEPInterrupt>
 80035ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e2:	461a      	mov	r2, r3
 80035e4:	2301      	movs	r3, #1
 80035e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fef0 	bl	80043d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00c      	beq.n	8003614 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003606:	461a      	mov	r2, r3
 8003608:	2308      	movs	r3, #8
 800360a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800360c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 ffc6 	bl	80045a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362a:	461a      	mov	r2, r3
 800362c:	2310      	movs	r3, #16
 800362e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d030      	beq.n	800369c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	2b80      	cmp	r3, #128	; 0x80
 8003644:	d109      	bne.n	800365a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003654:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003658:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800365a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4413      	add	r3, r2
 800366c:	3304      	adds	r3, #4
 800366e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	78db      	ldrb	r3, [r3, #3]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d108      	bne.n	800368a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2200      	movs	r2, #0
 800367c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	b2db      	uxtb	r3, r3
 8003682:	4619      	mov	r1, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f00b ff75 	bl	800f574 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003696:	461a      	mov	r2, r3
 8003698:	2302      	movs	r3, #2
 800369a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b2:	461a      	mov	r2, r3
 80036b4:	2320      	movs	r3, #32
 80036b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ce:	461a      	mov	r2, r3
 80036d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	3301      	adds	r3, #1
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	085b      	lsrs	r3, r3, #1
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f47f af62 	bne.w	80035ae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f005 ff4e 	bl	8009590 <USB_ReadInterrupts>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036fe:	f040 80db 	bne.w	80038b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f005 ff6f 	bl	80095ea <USB_ReadDevAllInEpInterrupt>
 800370c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003712:	e0cd      	b.n	80038b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80c2 	beq.w	80038a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	4611      	mov	r1, r2
 800372a:	4618      	mov	r0, r3
 800372c:	f005 ff95 	bl	800965a <USB_ReadDevInEPInterrupt>
 8003730:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d057      	beq.n	80037ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	2201      	movs	r2, #1
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43db      	mvns	r3, r3
 8003756:	69f9      	ldr	r1, [r7, #28]
 8003758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800375c:	4013      	ands	r3, r2
 800375e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376c:	461a      	mov	r2, r3
 800376e:	2301      	movs	r3, #1
 8003770:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d132      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	334c      	adds	r3, #76	; 0x4c
 800378a:	6819      	ldr	r1, [r3, #0]
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4403      	add	r3, r0
 800379a:	3348      	adds	r3, #72	; 0x48
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4419      	add	r1, r3
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4403      	add	r3, r0
 80037ae:	334c      	adds	r3, #76	; 0x4c
 80037b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d113      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x3a2>
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037bc:	4613      	mov	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	3354      	adds	r3, #84	; 0x54
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d108      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037d8:	461a      	mov	r2, r3
 80037da:	2101      	movs	r1, #1
 80037dc:	f005 ff9e 	bl	800971c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	4619      	mov	r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f00b fe3f 	bl	800f46a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003802:	461a      	mov	r2, r3
 8003804:	2308      	movs	r3, #8
 8003806:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b00      	cmp	r3, #0
 8003810:	d008      	beq.n	8003824 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381e:	461a      	mov	r2, r3
 8003820:	2310      	movs	r3, #16
 8003822:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383a:	461a      	mov	r2, r3
 800383c:	2340      	movs	r3, #64	; 0x40
 800383e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d023      	beq.n	8003892 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800384a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800384c:	6a38      	ldr	r0, [r7, #32]
 800384e:	f004 fe71 	bl	8008534 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	3338      	adds	r3, #56	; 0x38
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	3304      	adds	r3, #4
 8003864:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	78db      	ldrb	r3, [r3, #3]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d108      	bne.n	8003880 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2200      	movs	r2, #0
 8003872:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	b2db      	uxtb	r3, r3
 8003878:	4619      	mov	r1, r3
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f00b fe8c 	bl	800f598 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388c:	461a      	mov	r2, r3
 800388e:	2302      	movs	r3, #2
 8003890:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800389c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fd08 	bl	80042b4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	3301      	adds	r3, #1
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f47f af2e 	bne.w	8003714 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f005 fe67 	bl	8009590 <USB_ReadInterrupts>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038cc:	d122      	bne.n	8003914 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d108      	bne.n	80038fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038f4:	2100      	movs	r1, #0
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f00c f806 	bl	800f908 <HAL_PCDEx_LPM_Callback>
 80038fc:	e002      	b.n	8003904 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f00b fe2a 	bl	800f558 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f005 fe39 	bl	8009590 <USB_ReadInterrupts>
 800391e:	4603      	mov	r3, r0
 8003920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003928:	d112      	bne.n	8003950 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d102      	bne.n	8003940 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f00b fde6 	bl	800f50c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800394e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f005 fe1b 	bl	8009590 <USB_ReadInterrupts>
 800395a:	4603      	mov	r3, r0
 800395c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003964:	d121      	bne.n	80039aa <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003974:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d111      	bne.n	80039a4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	f003 020f 	and.w	r2, r3, #15
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800399a:	2101      	movs	r1, #1
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f00b ffb3 	bl	800f908 <HAL_PCDEx_LPM_Callback>
 80039a2:	e002      	b.n	80039aa <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f00b fdb1 	bl	800f50c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f005 fdee 	bl	8009590 <USB_ReadInterrupts>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039be:	f040 80b7 	bne.w	8003b30 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2110      	movs	r1, #16
 80039dc:	4618      	mov	r0, r3
 80039de:	f004 fda9 	bl	8008534 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e6:	e046      	b.n	8003a76 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f4:	461a      	mov	r2, r3
 80039f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a0c:	0151      	lsls	r1, r2, #5
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	440a      	add	r2, r1
 8003a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a1a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a2e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a40:	0151      	lsls	r1, r2, #5
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	440a      	add	r2, r1
 8003a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a60:	0151      	lsls	r1, r2, #5
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	440a      	add	r2, r1
 8003a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a6e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a72:	3301      	adds	r3, #1
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d3b3      	bcc.n	80039e8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a8e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a92:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d016      	beq.n	8003aca <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aac:	f043 030b 	orr.w	r3, r3, #11
 8003ab0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ac2:	f043 030b 	orr.w	r3, r3, #11
 8003ac6:	6453      	str	r3, [r2, #68]	; 0x44
 8003ac8:	e015      	b.n	8003af6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad0:	695a      	ldr	r2, [r3, #20]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f242 032b 	movw	r3, #8235	; 0x202b
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003af0:	f043 030b 	orr.w	r3, r3, #11
 8003af4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b04:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003b08:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f005 fdfe 	bl	800971c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f005 fd2b 	bl	8009590 <USB_ReadInterrupts>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b44:	d124      	bne.n	8003b90 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f005 fdc2 	bl	80096d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f004 fd6a 	bl	800862e <USB_GetDevSpeed>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681c      	ldr	r4, [r3, #0]
 8003b66:	f001 fa7d 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 8003b6a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	4620      	mov	r0, r4
 8003b76:	f004 fa6f 	bl	8008058 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f00b fc9d 	bl	800f4ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695a      	ldr	r2, [r3, #20]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f005 fcfb 	bl	8009590 <USB_ReadInterrupts>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d10a      	bne.n	8003bba <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f00b fc7a 	bl	800f49e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f002 0208 	and.w	r2, r2, #8
 8003bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f005 fce6 	bl	8009590 <USB_ReadInterrupts>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bca:	2b80      	cmp	r3, #128	; 0x80
 8003bcc:	d122      	bne.n	8003c14 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bda:	2301      	movs	r3, #1
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bde:	e014      	b.n	8003c0a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d105      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fb27 	bl	8004252 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	3301      	adds	r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d3e5      	bcc.n	8003be0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f005 fcb9 	bl	8009590 <USB_ReadInterrupts>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c28:	d13b      	bne.n	8003ca2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2e:	e02b      	b.n	8003c88 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	3340      	adds	r3, #64	; 0x40
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d115      	bne.n	8003c82 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003c56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	da12      	bge.n	8003c82 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	333f      	adds	r3, #63	; 0x3f
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fae8 	bl	8004252 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	3301      	adds	r3, #1
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d3ce      	bcc.n	8003c30 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695a      	ldr	r2, [r3, #20]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f005 fc72 	bl	8009590 <USB_ReadInterrupts>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cb6:	d155      	bne.n	8003d64 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cb8:	2301      	movs	r3, #1
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbc:	e045      	b.n	8003d4a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d12e      	bne.n	8003d44 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ce6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	da2b      	bge.n	8003d44 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003cf8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d121      	bne.n	8003d44 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d12:	2201      	movs	r2, #1
 8003d14:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d40:	6053      	str	r3, [r2, #4]
            break;
 8003d42:	e007      	b.n	8003d54 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	3301      	adds	r3, #1
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d3b4      	bcc.n	8003cbe <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f005 fc11 	bl	8009590 <USB_ReadInterrupts>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d78:	d10a      	bne.n	8003d90 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f00b fc1e 	bl	800f5bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f005 fbfb 	bl	8009590 <USB_ReadInterrupts>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d115      	bne.n	8003dd0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f00b fc0e 	bl	800f5d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6859      	ldr	r1, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	e000      	b.n	8003dd0 <HAL_PCD_IRQHandler+0x992>
      return;
 8003dce:	bf00      	nop
    }
  }
}
 8003dd0:	3734      	adds	r7, #52	; 0x34
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd90      	pop	{r4, r7, pc}

08003dd6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	460b      	mov	r3, r1
 8003de0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_PCD_SetAddress+0x1a>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e013      	b.n	8003e18 <HAL_PCD_SetAddress+0x42>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f005 fb59 	bl	80094c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	4608      	mov	r0, r1
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	70fb      	strb	r3, [r7, #3]
 8003e32:	460b      	mov	r3, r1
 8003e34:	803b      	strh	r3, [r7, #0]
 8003e36:	4613      	mov	r3, r2
 8003e38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	da0f      	bge.n	8003e66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e46:	78fb      	ldrb	r3, [r7, #3]
 8003e48:	f003 020f 	and.w	r2, r3, #15
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	3338      	adds	r3, #56	; 0x38
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	4413      	add	r3, r2
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	705a      	strb	r2, [r3, #1]
 8003e64:	e00f      	b.n	8003e86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	f003 020f 	and.w	r2, r3, #15
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e92:	883a      	ldrh	r2, [r7, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	78ba      	ldrb	r2, [r7, #2]
 8003e9c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	785b      	ldrb	r3, [r3, #1]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003eb0:	78bb      	ldrb	r3, [r7, #2]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d102      	bne.n	8003ebc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <HAL_PCD_EP_Open+0xaa>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e00e      	b.n	8003ee8 <HAL_PCD_EP_Open+0xc8>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68f9      	ldr	r1, [r7, #12]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f004 fbcd 	bl	8008678 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ee6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	da0f      	bge.n	8003f24 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	f003 020f 	and.w	r2, r3, #15
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	3338      	adds	r3, #56	; 0x38
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	4413      	add	r3, r2
 8003f18:	3304      	adds	r3, #4
 8003f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	705a      	strb	r2, [r3, #1]
 8003f22:	e00f      	b.n	8003f44 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	f003 020f 	and.w	r2, r3, #15
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	4413      	add	r3, r2
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_PCD_EP_Close+0x6e>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e00e      	b.n	8003f7c <HAL_PCD_EP_Close+0x8c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68f9      	ldr	r1, [r7, #12]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f004 fc0b 	bl	8008788 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	607a      	str	r2, [r7, #4]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	460b      	mov	r3, r1
 8003f92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f94:	7afb      	ldrb	r3, [r7, #11]
 8003f96:	f003 020f 	and.w	r2, r3, #15
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4413      	add	r3, r2
 8003faa:	3304      	adds	r3, #4
 8003fac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc6:	7afb      	ldrb	r3, [r7, #11]
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d102      	bne.n	8003fe0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fe0:	7afb      	ldrb	r3, [r7, #11]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d109      	bne.n	8003ffe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6979      	ldr	r1, [r7, #20]
 8003ff8:	f004 fef2 	bl	8008de0 <USB_EP0StartXfer>
 8003ffc:	e008      	b.n	8004010 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	461a      	mov	r2, r3
 800400a:	6979      	ldr	r1, [r7, #20]
 800400c:	f004 fc98 	bl	8008940 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	460b      	mov	r3, r1
 8004024:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	f003 020f 	and.w	r2, r3, #15
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800403c:	681b      	ldr	r3, [r3, #0]
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b086      	sub	sp, #24
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	460b      	mov	r3, r1
 8004058:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800405a:	7afb      	ldrb	r3, [r7, #11]
 800405c:	f003 020f 	and.w	r2, r3, #15
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	3338      	adds	r3, #56	; 0x38
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4413      	add	r3, r2
 800406e:	3304      	adds	r3, #4
 8004070:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2200      	movs	r2, #0
 8004082:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2201      	movs	r2, #1
 8004088:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800408a:	7afb      	ldrb	r3, [r7, #11]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	b2da      	uxtb	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d102      	bne.n	80040a4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040a4:	7afb      	ldrb	r3, [r7, #11]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	6979      	ldr	r1, [r7, #20]
 80040bc:	f004 fe90 	bl	8008de0 <USB_EP0StartXfer>
 80040c0:	e008      	b.n	80040d4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	6979      	ldr	r1, [r7, #20]
 80040d0:	f004 fc36 	bl	8008940 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	460b      	mov	r3, r1
 80040e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	f003 020f 	and.w	r2, r3, #15
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d901      	bls.n	80040fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e050      	b.n	800419e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004100:	2b00      	cmp	r3, #0
 8004102:	da0f      	bge.n	8004124 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	f003 020f 	and.w	r2, r3, #15
 800410a:	4613      	mov	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	3338      	adds	r3, #56	; 0x38
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	4413      	add	r3, r2
 8004118:	3304      	adds	r3, #4
 800411a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	705a      	strb	r2, [r3, #1]
 8004122:	e00d      	b.n	8004140 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004124:	78fa      	ldrb	r2, [r7, #3]
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	4413      	add	r3, r2
 8004136:	3304      	adds	r3, #4
 8004138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_PCD_EP_SetStall+0x82>
 800415c:	2302      	movs	r3, #2
 800415e:	e01e      	b.n	800419e <HAL_PCD_EP_SetStall+0xc0>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68f9      	ldr	r1, [r7, #12]
 800416e:	4618      	mov	r0, r3
 8004170:	f005 f8d2 	bl	8009318 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10a      	bne.n	8004194 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	b2d9      	uxtb	r1, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800418e:	461a      	mov	r2, r3
 8004190:	f005 fac4 	bl	800971c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	f003 020f 	and.w	r2, r3, #15
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d901      	bls.n	80041c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e042      	b.n	800424a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	da0f      	bge.n	80041ec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	f003 020f 	and.w	r2, r3, #15
 80041d2:	4613      	mov	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	3338      	adds	r3, #56	; 0x38
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	4413      	add	r3, r2
 80041e0:	3304      	adds	r3, #4
 80041e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	705a      	strb	r2, [r3, #1]
 80041ea:	e00f      	b.n	800420c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	f003 020f 	and.w	r2, r3, #15
 80041f2:	4613      	mov	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	3304      	adds	r3, #4
 8004204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	b2da      	uxtb	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_PCD_EP_ClrStall+0x86>
 8004228:	2302      	movs	r3, #2
 800422a:	e00e      	b.n	800424a <HAL_PCD_EP_ClrStall+0xa4>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68f9      	ldr	r1, [r7, #12]
 800423a:	4618      	mov	r0, r3
 800423c:	f005 f8da 	bl	80093f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	460b      	mov	r3, r1
 800425c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800425e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004262:	2b00      	cmp	r3, #0
 8004264:	da0c      	bge.n	8004280 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	f003 020f 	and.w	r2, r3, #15
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	3338      	adds	r3, #56	; 0x38
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	3304      	adds	r3, #4
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	e00c      	b.n	800429a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	f003 020f 	and.w	r2, r3, #15
 8004286:	4613      	mov	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	3304      	adds	r3, #4
 8004298:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68f9      	ldr	r1, [r7, #12]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f004 fef9 	bl	8009098 <USB_EPStopXfer>
 80042a6:	4603      	mov	r3, r0
 80042a8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80042aa:	7afb      	ldrb	r3, [r7, #11]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	; 0x28
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	4613      	mov	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	3338      	adds	r3, #56	; 0x38
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	4413      	add	r3, r2
 80042d8:	3304      	adds	r3, #4
 80042da:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1a      	ldr	r2, [r3, #32]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d901      	bls.n	80042ec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e06c      	b.n	80043c6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	699a      	ldr	r2, [r3, #24]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d902      	bls.n	8004308 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	3303      	adds	r3, #3
 800430c:	089b      	lsrs	r3, r3, #2
 800430e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004310:	e02b      	b.n	800436a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	429a      	cmp	r2, r3
 8004326:	d902      	bls.n	800432e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	3303      	adds	r3, #3
 8004332:	089b      	lsrs	r3, r3, #2
 8004334:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6919      	ldr	r1, [r3, #16]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	b2da      	uxtb	r2, r3
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004346:	b2db      	uxtb	r3, r3
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	4603      	mov	r3, r0
 800434c:	6978      	ldr	r0, [r7, #20]
 800434e:	f004 ff4d 	bl	80091ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	441a      	add	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1a      	ldr	r2, [r3, #32]
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	441a      	add	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	429a      	cmp	r2, r3
 800437e:	d809      	bhi.n	8004394 <PCD_WriteEmptyTxFifo+0xe0>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a1a      	ldr	r2, [r3, #32]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004388:	429a      	cmp	r2, r3
 800438a:	d203      	bcs.n	8004394 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1be      	bne.n	8004312 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	699a      	ldr	r2, [r3, #24]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	429a      	cmp	r2, r3
 800439e:	d811      	bhi.n	80043c4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	2201      	movs	r2, #1
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	6939      	ldr	r1, [r7, #16]
 80043bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043c0:	4013      	ands	r3, r2
 80043c2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	333c      	adds	r3, #60	; 0x3c
 80043e8:	3304      	adds	r3, #4
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d17b      	bne.n	80044fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f003 0308 	and.w	r3, r3, #8
 800440c:	2b00      	cmp	r3, #0
 800440e:	d015      	beq.n	800443c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	4a61      	ldr	r2, [pc, #388]	; (8004598 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	f240 80b9 	bls.w	800458c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80b3 	beq.w	800458c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004432:	461a      	mov	r2, r3
 8004434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004438:	6093      	str	r3, [r2, #8]
 800443a:	e0a7      	b.n	800458c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004452:	461a      	mov	r2, r3
 8004454:	2320      	movs	r3, #32
 8004456:	6093      	str	r3, [r2, #8]
 8004458:	e098      	b.n	800458c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004460:	2b00      	cmp	r3, #0
 8004462:	f040 8093 	bne.w	800458c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	4a4b      	ldr	r2, [pc, #300]	; (8004598 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d90f      	bls.n	800448e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004484:	461a      	mov	r2, r3
 8004486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800448a:	6093      	str	r3, [r2, #8]
 800448c:	e07e      	b.n	800458c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	4413      	add	r3, r2
 80044a0:	3304      	adds	r3, #4
 80044a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	0159      	lsls	r1, r3, #5
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	440b      	add	r3, r1
 80044b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ba:	1ad2      	subs	r2, r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d114      	bne.n	80044f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044d8:	461a      	mov	r2, r3
 80044da:	2101      	movs	r1, #1
 80044dc:	f005 f91e 	bl	800971c <USB_EP0_OutStart>
 80044e0:	e006      	b.n	80044f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	441a      	add	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	4619      	mov	r1, r3
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f00a ff9c 	bl	800f434 <HAL_PCD_DataOutStageCallback>
 80044fc:	e046      	b.n	800458c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	4a26      	ldr	r2, [pc, #152]	; (800459c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d124      	bne.n	8004550 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451c:	461a      	mov	r2, r3
 800451e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004522:	6093      	str	r3, [r2, #8]
 8004524:	e032      	b.n	800458c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	461a      	mov	r2, r3
 800453e:	2320      	movs	r3, #32
 8004540:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	4619      	mov	r1, r3
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f00a ff73 	bl	800f434 <HAL_PCD_DataOutStageCallback>
 800454e:	e01d      	b.n	800458c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d114      	bne.n	8004580 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	4613      	mov	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4413      	add	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d108      	bne.n	8004580 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004578:	461a      	mov	r2, r3
 800457a:	2100      	movs	r1, #0
 800457c:	f005 f8ce 	bl	800971c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	4619      	mov	r1, r3
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f00a ff54 	bl	800f434 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	4f54300a 	.word	0x4f54300a
 800459c:	4f54310a 	.word	0x4f54310a

080045a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	333c      	adds	r3, #60	; 0x3c
 80045b8:	3304      	adds	r3, #4
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4a15      	ldr	r2, [pc, #84]	; (8004628 <PCD_EP_OutSetupPacket_int+0x88>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d90e      	bls.n	80045f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d009      	beq.n	80045f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ec:	461a      	mov	r2, r3
 80045ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f00a ff0b 	bl	800f410 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4a0a      	ldr	r2, [pc, #40]	; (8004628 <PCD_EP_OutSetupPacket_int+0x88>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d90c      	bls.n	800461c <PCD_EP_OutSetupPacket_int+0x7c>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d108      	bne.n	800461c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004614:	461a      	mov	r2, r3
 8004616:	2101      	movs	r1, #1
 8004618:	f005 f880 	bl	800971c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	4f54300a 	.word	0x4f54300a

0800462c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	70fb      	strb	r3, [r7, #3]
 8004638:	4613      	mov	r3, r2
 800463a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d107      	bne.n	800465a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800464a:	883b      	ldrh	r3, [r7, #0]
 800464c:	0419      	lsls	r1, r3, #16
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	430a      	orrs	r2, r1
 8004656:	629a      	str	r2, [r3, #40]	; 0x28
 8004658:	e028      	b.n	80046ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	4413      	add	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004668:	2300      	movs	r3, #0
 800466a:	73fb      	strb	r3, [r7, #15]
 800466c:	e00d      	b.n	800468a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	3340      	adds	r3, #64	; 0x40
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	4413      	add	r3, r2
 8004682:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	3301      	adds	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
 800468a:	7bfa      	ldrb	r2, [r7, #15]
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	3b01      	subs	r3, #1
 8004690:	429a      	cmp	r2, r3
 8004692:	d3ec      	bcc.n	800466e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004694:	883b      	ldrh	r3, [r7, #0]
 8004696:	0418      	lsls	r0, r3, #16
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6819      	ldr	r1, [r3, #0]
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	3b01      	subs	r3, #1
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	4302      	orrs	r2, r0
 80046a4:	3340      	adds	r3, #64	; 0x40
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	460b      	mov	r3, r1
 80046c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	887a      	ldrh	r2, [r7, #2]
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_PCDEx_ActivateLPM+0x44>)
 800470c:	4313      	orrs	r3, r2
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	10000003 	.word	0x10000003

08004724 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800472c:	2300      	movs	r3, #0
 800472e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e29b      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8087 	beq.w	8004856 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004748:	4b96      	ldr	r3, [pc, #600]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 030c 	and.w	r3, r3, #12
 8004750:	2b04      	cmp	r3, #4
 8004752:	d00c      	beq.n	800476e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004754:	4b93      	ldr	r3, [pc, #588]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b08      	cmp	r3, #8
 800475e:	d112      	bne.n	8004786 <HAL_RCC_OscConfig+0x62>
 8004760:	4b90      	ldr	r3, [pc, #576]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800476c:	d10b      	bne.n	8004786 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476e:	4b8d      	ldr	r3, [pc, #564]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d06c      	beq.n	8004854 <HAL_RCC_OscConfig+0x130>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d168      	bne.n	8004854 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e275      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478e:	d106      	bne.n	800479e <HAL_RCC_OscConfig+0x7a>
 8004790:	4b84      	ldr	r3, [pc, #528]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a83      	ldr	r2, [pc, #524]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	e02e      	b.n	80047fc <HAL_RCC_OscConfig+0xd8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x9c>
 80047a6:	4b7f      	ldr	r3, [pc, #508]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a7e      	ldr	r2, [pc, #504]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4b7c      	ldr	r3, [pc, #496]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a7b      	ldr	r2, [pc, #492]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e01d      	b.n	80047fc <HAL_RCC_OscConfig+0xd8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0xc0>
 80047ca:	4b76      	ldr	r3, [pc, #472]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a75      	ldr	r2, [pc, #468]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	4b73      	ldr	r3, [pc, #460]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a72      	ldr	r2, [pc, #456]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	e00b      	b.n	80047fc <HAL_RCC_OscConfig+0xd8>
 80047e4:	4b6f      	ldr	r3, [pc, #444]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a6e      	ldr	r2, [pc, #440]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	4b6c      	ldr	r3, [pc, #432]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a6b      	ldr	r2, [pc, #428]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d013      	beq.n	800482c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fc ffe8 	bl	80017d8 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800480c:	f7fc ffe4 	bl	80017d8 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	; 0x64
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e229      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481e:	4b61      	ldr	r3, [pc, #388]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0xe8>
 800482a:	e014      	b.n	8004856 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482c:	f7fc ffd4 	bl	80017d8 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004834:	f7fc ffd0 	bl	80017d8 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b64      	cmp	r3, #100	; 0x64
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e215      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004846:	4b57      	ldr	r3, [pc, #348]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x110>
 8004852:	e000      	b.n	8004856 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d069      	beq.n	8004936 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004862:	4b50      	ldr	r3, [pc, #320]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 030c 	and.w	r3, r3, #12
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00b      	beq.n	8004886 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800486e:	4b4d      	ldr	r3, [pc, #308]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	2b08      	cmp	r3, #8
 8004878:	d11c      	bne.n	80048b4 <HAL_RCC_OscConfig+0x190>
 800487a:	4b4a      	ldr	r3, [pc, #296]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d116      	bne.n	80048b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004886:	4b47      	ldr	r3, [pc, #284]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <HAL_RCC_OscConfig+0x17a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d001      	beq.n	800489e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e1e9      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489e:	4b41      	ldr	r3, [pc, #260]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	493d      	ldr	r1, [pc, #244]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b2:	e040      	b.n	8004936 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d023      	beq.n	8004904 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048bc:	4b39      	ldr	r3, [pc, #228]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a38      	ldr	r2, [pc, #224]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c8:	f7fc ff86 	bl	80017d8 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d0:	f7fc ff82 	bl	80017d8 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e1c7      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e2:	4b30      	ldr	r3, [pc, #192]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ee:	4b2d      	ldr	r3, [pc, #180]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4929      	ldr	r1, [pc, #164]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]
 8004902:	e018      	b.n	8004936 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004904:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fc ff62 	bl	80017d8 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004918:	f7fc ff5e 	bl	80017d8 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e1a3      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800492a:	4b1e      	ldr	r3, [pc, #120]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d038      	beq.n	80049b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d019      	beq.n	800497e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800494a:	4b16      	ldr	r3, [pc, #88]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 800494c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494e:	4a15      	ldr	r2, [pc, #84]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004956:	f7fc ff3f 	bl	80017d8 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800495e:	f7fc ff3b 	bl	80017d8 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e180      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0f0      	beq.n	800495e <HAL_RCC_OscConfig+0x23a>
 800497c:	e01a      	b.n	80049b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800497e:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004982:	4a08      	ldr	r2, [pc, #32]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498a:	f7fc ff25 	bl	80017d8 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004990:	e00a      	b.n	80049a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004992:	f7fc ff21 	bl	80017d8 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d903      	bls.n	80049a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e166      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>
 80049a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a8:	4b92      	ldr	r3, [pc, #584]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 80049aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1ee      	bne.n	8004992 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80a4 	beq.w	8004b0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c2:	4b8c      	ldr	r3, [pc, #560]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10d      	bne.n	80049ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ce:	4b89      	ldr	r3, [pc, #548]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	4a88      	ldr	r2, [pc, #544]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 80049d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d8:	6413      	str	r3, [r2, #64]	; 0x40
 80049da:	4b86      	ldr	r3, [pc, #536]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e6:	2301      	movs	r3, #1
 80049e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ea:	4b83      	ldr	r3, [pc, #524]	; (8004bf8 <HAL_RCC_OscConfig+0x4d4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d118      	bne.n	8004a28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80049f6:	4b80      	ldr	r3, [pc, #512]	; (8004bf8 <HAL_RCC_OscConfig+0x4d4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a7f      	ldr	r2, [pc, #508]	; (8004bf8 <HAL_RCC_OscConfig+0x4d4>)
 80049fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a02:	f7fc fee9 	bl	80017d8 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0a:	f7fc fee5 	bl	80017d8 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b64      	cmp	r3, #100	; 0x64
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e12a      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a1c:	4b76      	ldr	r3, [pc, #472]	; (8004bf8 <HAL_RCC_OscConfig+0x4d4>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_OscConfig+0x31a>
 8004a30:	4b70      	ldr	r3, [pc, #448]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a34:	4a6f      	ldr	r2, [pc, #444]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3c:	e02d      	b.n	8004a9a <HAL_RCC_OscConfig+0x376>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x33c>
 8004a46:	4b6b      	ldr	r3, [pc, #428]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	4a6a      	ldr	r2, [pc, #424]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004a4c:	f023 0301 	bic.w	r3, r3, #1
 8004a50:	6713      	str	r3, [r2, #112]	; 0x70
 8004a52:	4b68      	ldr	r3, [pc, #416]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	4a67      	ldr	r2, [pc, #412]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004a58:	f023 0304 	bic.w	r3, r3, #4
 8004a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a5e:	e01c      	b.n	8004a9a <HAL_RCC_OscConfig+0x376>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	2b05      	cmp	r3, #5
 8004a66:	d10c      	bne.n	8004a82 <HAL_RCC_OscConfig+0x35e>
 8004a68:	4b62      	ldr	r3, [pc, #392]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6c:	4a61      	ldr	r2, [pc, #388]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004a6e:	f043 0304 	orr.w	r3, r3, #4
 8004a72:	6713      	str	r3, [r2, #112]	; 0x70
 8004a74:	4b5f      	ldr	r3, [pc, #380]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a78:	4a5e      	ldr	r2, [pc, #376]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a80:	e00b      	b.n	8004a9a <HAL_RCC_OscConfig+0x376>
 8004a82:	4b5c      	ldr	r3, [pc, #368]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4a5b      	ldr	r2, [pc, #364]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8e:	4b59      	ldr	r3, [pc, #356]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	4a58      	ldr	r2, [pc, #352]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004a94:	f023 0304 	bic.w	r3, r3, #4
 8004a98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d015      	beq.n	8004ace <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa2:	f7fc fe99 	bl	80017d8 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa8:	e00a      	b.n	8004ac0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aaa:	f7fc fe95 	bl	80017d8 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e0d8      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac0:	4b4c      	ldr	r3, [pc, #304]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0ee      	beq.n	8004aaa <HAL_RCC_OscConfig+0x386>
 8004acc:	e014      	b.n	8004af8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ace:	f7fc fe83 	bl	80017d8 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad6:	f7fc fe7f 	bl	80017d8 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e0c2      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aec:	4b41      	ldr	r3, [pc, #260]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1ee      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d105      	bne.n	8004b0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afe:	4b3d      	ldr	r3, [pc, #244]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	4a3c      	ldr	r2, [pc, #240]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80ae 	beq.w	8004c70 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b14:	4b37      	ldr	r3, [pc, #220]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 030c 	and.w	r3, r3, #12
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d06d      	beq.n	8004bfc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d14b      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b28:	4b32      	ldr	r3, [pc, #200]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a31      	ldr	r2, [pc, #196]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b34:	f7fc fe50 	bl	80017d8 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3c:	f7fc fe4c 	bl	80017d8 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e091      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4e:	4b29      	ldr	r3, [pc, #164]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f0      	bne.n	8004b3c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69da      	ldr	r2, [r3, #28]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	019b      	lsls	r3, r3, #6
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	085b      	lsrs	r3, r3, #1
 8004b72:	3b01      	subs	r3, #1
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	061b      	lsls	r3, r3, #24
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	071b      	lsls	r3, r3, #28
 8004b86:	491b      	ldr	r1, [pc, #108]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b8c:	4b19      	ldr	r3, [pc, #100]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fc fe1e 	bl	80017d8 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba0:	f7fc fe1a 	bl	80017d8 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e05f      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb2:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x47c>
 8004bbe:	e057      	b.n	8004c70 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc0:	4b0c      	ldr	r3, [pc, #48]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a0b      	ldr	r2, [pc, #44]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fc fe04 	bl	80017d8 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd4:	f7fc fe00 	bl	80017d8 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e045      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be6:	4b03      	ldr	r3, [pc, #12]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x4b0>
 8004bf2:	e03d      	b.n	8004c70 <HAL_RCC_OscConfig+0x54c>
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004bfc:	4b1f      	ldr	r3, [pc, #124]	; (8004c7c <HAL_RCC_OscConfig+0x558>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d030      	beq.n	8004c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d129      	bne.n	8004c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d122      	bne.n	8004c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d119      	bne.n	8004c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	085b      	lsrs	r3, r3, #1
 8004c44:	3b01      	subs	r3, #1
 8004c46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d10f      	bne.n	8004c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d107      	bne.n	8004c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40023800 	.word	0x40023800

08004c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0d0      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c98:	4b6a      	ldr	r3, [pc, #424]	; (8004e44 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d910      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b67      	ldr	r3, [pc, #412]	; (8004e44 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f023 020f 	bic.w	r2, r3, #15
 8004cae:	4965      	ldr	r1, [pc, #404]	; (8004e44 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb6:	4b63      	ldr	r3, [pc, #396]	; (8004e44 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0b8      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d020      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ce0:	4b59      	ldr	r3, [pc, #356]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	4a58      	ldr	r2, [pc, #352]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cf8:	4b53      	ldr	r3, [pc, #332]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4a52      	ldr	r2, [pc, #328]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d04:	4b50      	ldr	r3, [pc, #320]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	494d      	ldr	r1, [pc, #308]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d040      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2a:	4b47      	ldr	r3, [pc, #284]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d115      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e07f      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d107      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d42:	4b41      	ldr	r3, [pc, #260]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e073      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d52:	4b3d      	ldr	r3, [pc, #244]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e06b      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d62:	4b39      	ldr	r3, [pc, #228]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f023 0203 	bic.w	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4936      	ldr	r1, [pc, #216]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d74:	f7fc fd30 	bl	80017d8 <HAL_GetTick>
 8004d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7c:	f7fc fd2c 	bl	80017d8 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e053      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d92:	4b2d      	ldr	r3, [pc, #180]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 020c 	and.w	r2, r3, #12
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d1eb      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004da4:	4b27      	ldr	r3, [pc, #156]	; (8004e44 <HAL_RCC_ClockConfig+0x1c4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d210      	bcs.n	8004dd4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db2:	4b24      	ldr	r3, [pc, #144]	; (8004e44 <HAL_RCC_ClockConfig+0x1c4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f023 020f 	bic.w	r2, r3, #15
 8004dba:	4922      	ldr	r1, [pc, #136]	; (8004e44 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc2:	4b20      	ldr	r3, [pc, #128]	; (8004e44 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e032      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	4916      	ldr	r1, [pc, #88]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	490e      	ldr	r1, [pc, #56]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e12:	f000 f821 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 8004e16:	4602      	mov	r2, r0
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	490a      	ldr	r1, [pc, #40]	; (8004e4c <HAL_RCC_ClockConfig+0x1cc>)
 8004e24:	5ccb      	ldrb	r3, [r1, r3]
 8004e26:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2a:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <HAL_RCC_ClockConfig+0x1d0>)
 8004e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e2e:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <HAL_RCC_ClockConfig+0x1d4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fc fc8c 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40023c00 	.word	0x40023c00
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	08011240 	.word	0x08011240
 8004e50:	20000000 	.word	0x20000000
 8004e54:	20000004 	.word	0x20000004

08004e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e5c:	b094      	sub	sp, #80	; 0x50
 8004e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	647b      	str	r3, [r7, #68]	; 0x44
 8004e64:	2300      	movs	r3, #0
 8004e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e68:	2300      	movs	r3, #0
 8004e6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e70:	4b79      	ldr	r3, [pc, #484]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 030c 	and.w	r3, r3, #12
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d00d      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0x40>
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	f200 80e1 	bhi.w	8005044 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq+0x34>
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d003      	beq.n	8004e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e8a:	e0db      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e8c:	4b73      	ldr	r3, [pc, #460]	; (800505c <HAL_RCC_GetSysClockFreq+0x204>)
 8004e8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e90:	e0db      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e92:	4b73      	ldr	r3, [pc, #460]	; (8005060 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e96:	e0d8      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e98:	4b6f      	ldr	r3, [pc, #444]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ea2:	4b6d      	ldr	r3, [pc, #436]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d063      	beq.n	8004f76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eae:	4b6a      	ldr	r3, [pc, #424]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	099b      	lsrs	r3, r3, #6
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004eca:	4622      	mov	r2, r4
 8004ecc:	462b      	mov	r3, r5
 8004ece:	f04f 0000 	mov.w	r0, #0
 8004ed2:	f04f 0100 	mov.w	r1, #0
 8004ed6:	0159      	lsls	r1, r3, #5
 8004ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004edc:	0150      	lsls	r0, r2, #5
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	1a51      	subs	r1, r2, r1
 8004ee6:	6139      	str	r1, [r7, #16]
 8004ee8:	4629      	mov	r1, r5
 8004eea:	eb63 0301 	sbc.w	r3, r3, r1
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004efc:	4659      	mov	r1, fp
 8004efe:	018b      	lsls	r3, r1, #6
 8004f00:	4651      	mov	r1, sl
 8004f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f06:	4651      	mov	r1, sl
 8004f08:	018a      	lsls	r2, r1, #6
 8004f0a:	4651      	mov	r1, sl
 8004f0c:	ebb2 0801 	subs.w	r8, r2, r1
 8004f10:	4659      	mov	r1, fp
 8004f12:	eb63 0901 	sbc.w	r9, r3, r1
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f2a:	4690      	mov	r8, r2
 8004f2c:	4699      	mov	r9, r3
 8004f2e:	4623      	mov	r3, r4
 8004f30:	eb18 0303 	adds.w	r3, r8, r3
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	462b      	mov	r3, r5
 8004f38:	eb49 0303 	adc.w	r3, r9, r3
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	024b      	lsls	r3, r1, #9
 8004f4e:	4621      	mov	r1, r4
 8004f50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f54:	4621      	mov	r1, r4
 8004f56:	024a      	lsls	r2, r1, #9
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5e:	2200      	movs	r2, #0
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f68:	f7fb f9ba 	bl	80002e0 <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4613      	mov	r3, r2
 8004f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f74:	e058      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f76:	4b38      	ldr	r3, [pc, #224]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	099b      	lsrs	r3, r3, #6
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	4611      	mov	r1, r2
 8004f82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f86:	623b      	str	r3, [r7, #32]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f90:	4642      	mov	r2, r8
 8004f92:	464b      	mov	r3, r9
 8004f94:	f04f 0000 	mov.w	r0, #0
 8004f98:	f04f 0100 	mov.w	r1, #0
 8004f9c:	0159      	lsls	r1, r3, #5
 8004f9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fa2:	0150      	lsls	r0, r2, #5
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4641      	mov	r1, r8
 8004faa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fae:	4649      	mov	r1, r9
 8004fb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fc8:	ebb2 040a 	subs.w	r4, r2, sl
 8004fcc:	eb63 050b 	sbc.w	r5, r3, fp
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	00eb      	lsls	r3, r5, #3
 8004fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fde:	00e2      	lsls	r2, r4, #3
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	461d      	mov	r5, r3
 8004fe4:	4643      	mov	r3, r8
 8004fe6:	18e3      	adds	r3, r4, r3
 8004fe8:	603b      	str	r3, [r7, #0]
 8004fea:	464b      	mov	r3, r9
 8004fec:	eb45 0303 	adc.w	r3, r5, r3
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ffe:	4629      	mov	r1, r5
 8005000:	028b      	lsls	r3, r1, #10
 8005002:	4621      	mov	r1, r4
 8005004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005008:	4621      	mov	r1, r4
 800500a:	028a      	lsls	r2, r1, #10
 800500c:	4610      	mov	r0, r2
 800500e:	4619      	mov	r1, r3
 8005010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005012:	2200      	movs	r2, #0
 8005014:	61bb      	str	r3, [r7, #24]
 8005016:	61fa      	str	r2, [r7, #28]
 8005018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800501c:	f7fb f960 	bl	80002e0 <__aeabi_uldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4613      	mov	r3, r2
 8005026:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	3301      	adds	r3, #1
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005038:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800503a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800503c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005040:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005042:	e002      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005044:	4b05      	ldr	r3, [pc, #20]	; (800505c <HAL_RCC_GetSysClockFreq+0x204>)
 8005046:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800504c:	4618      	mov	r0, r3
 800504e:	3750      	adds	r7, #80	; 0x50
 8005050:	46bd      	mov	sp, r7
 8005052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005056:	bf00      	nop
 8005058:	40023800 	.word	0x40023800
 800505c:	00f42400 	.word	0x00f42400
 8005060:	007a1200 	.word	0x007a1200

08005064 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005068:	4b03      	ldr	r3, [pc, #12]	; (8005078 <HAL_RCC_GetHCLKFreq+0x14>)
 800506a:	681b      	ldr	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000000 	.word	0x20000000

0800507c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005080:	f7ff fff0 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	0a9b      	lsrs	r3, r3, #10
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4903      	ldr	r1, [pc, #12]	; (80050a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005092:	5ccb      	ldrb	r3, [r1, r3]
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40023800 	.word	0x40023800
 80050a0:	08011250 	.word	0x08011250

080050a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050a8:	f7ff ffdc 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 80050ac:	4602      	mov	r2, r0
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	0b5b      	lsrs	r3, r3, #13
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	4903      	ldr	r1, [pc, #12]	; (80050c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ba:	5ccb      	ldrb	r3, [r1, r3]
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40023800 	.word	0x40023800
 80050c8:	08011250 	.word	0x08011250

080050cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d012      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050f4:	4b69      	ldr	r3, [pc, #420]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	4a68      	ldr	r2, [pc, #416]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80050fe:	6093      	str	r3, [r2, #8]
 8005100:	4b66      	ldr	r3, [pc, #408]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005108:	4964      	ldr	r1, [pc, #400]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510a:	4313      	orrs	r3, r2
 800510c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005116:	2301      	movs	r3, #1
 8005118:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d017      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005126:	4b5d      	ldr	r3, [pc, #372]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800512c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005134:	4959      	ldr	r1, [pc, #356]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005144:	d101      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005146:	2301      	movs	r3, #1
 8005148:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005152:	2301      	movs	r3, #1
 8005154:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d017      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005162:	4b4e      	ldr	r3, [pc, #312]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005168:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	494a      	ldr	r1, [pc, #296]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005180:	d101      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005182:	2301      	movs	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800518e:	2301      	movs	r3, #1
 8005190:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800519e:	2301      	movs	r3, #1
 80051a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 808b 	beq.w	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051b0:	4b3a      	ldr	r3, [pc, #232]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	4a39      	ldr	r2, [pc, #228]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ba:	6413      	str	r3, [r2, #64]	; 0x40
 80051bc:	4b37      	ldr	r3, [pc, #220]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c4:	60bb      	str	r3, [r7, #8]
 80051c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051c8:	4b35      	ldr	r3, [pc, #212]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a34      	ldr	r2, [pc, #208]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d4:	f7fc fb00 	bl	80017d8 <HAL_GetTick>
 80051d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051dc:	f7fc fafc 	bl	80017d8 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b64      	cmp	r3, #100	; 0x64
 80051e8:	d901      	bls.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e38f      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051ee:	4b2c      	ldr	r3, [pc, #176]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0f0      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051fa:	4b28      	ldr	r3, [pc, #160]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005202:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d035      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	429a      	cmp	r2, r3
 8005216:	d02e      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005218:	4b20      	ldr	r3, [pc, #128]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005220:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005222:	4b1e      	ldr	r3, [pc, #120]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005226:	4a1d      	ldr	r2, [pc, #116]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800522e:	4b1b      	ldr	r3, [pc, #108]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005232:	4a1a      	ldr	r2, [pc, #104]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005238:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800523a:	4a18      	ldr	r2, [pc, #96]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005240:	4b16      	ldr	r3, [pc, #88]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b01      	cmp	r3, #1
 800524a:	d114      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524c:	f7fc fac4 	bl	80017d8 <HAL_GetTick>
 8005250:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005252:	e00a      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005254:	f7fc fac0 	bl	80017d8 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e351      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526a:	4b0c      	ldr	r3, [pc, #48]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0ee      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005282:	d111      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005284:	4b05      	ldr	r3, [pc, #20]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005290:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005292:	400b      	ands	r3, r1
 8005294:	4901      	ldr	r1, [pc, #4]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005296:	4313      	orrs	r3, r2
 8005298:	608b      	str	r3, [r1, #8]
 800529a:	e00b      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800529c:	40023800 	.word	0x40023800
 80052a0:	40007000 	.word	0x40007000
 80052a4:	0ffffcff 	.word	0x0ffffcff
 80052a8:	4bac      	ldr	r3, [pc, #688]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	4aab      	ldr	r2, [pc, #684]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052b2:	6093      	str	r3, [r2, #8]
 80052b4:	4ba9      	ldr	r3, [pc, #676]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c0:	49a6      	ldr	r1, [pc, #664]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d010      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052d2:	4ba2      	ldr	r3, [pc, #648]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d8:	4aa0      	ldr	r2, [pc, #640]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80052e2:	4b9e      	ldr	r3, [pc, #632]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	499b      	ldr	r1, [pc, #620]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005300:	4b96      	ldr	r3, [pc, #600]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005306:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800530e:	4993      	ldr	r1, [pc, #588]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005322:	4b8e      	ldr	r3, [pc, #568]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005328:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005330:	498a      	ldr	r1, [pc, #552]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005344:	4b85      	ldr	r3, [pc, #532]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005352:	4982      	ldr	r1, [pc, #520]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005366:	4b7d      	ldr	r3, [pc, #500]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005374:	4979      	ldr	r1, [pc, #484]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005388:	4b74      	ldr	r3, [pc, #464]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538e:	f023 0203 	bic.w	r2, r3, #3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005396:	4971      	ldr	r1, [pc, #452]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053aa:	4b6c      	ldr	r3, [pc, #432]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b0:	f023 020c 	bic.w	r2, r3, #12
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b8:	4968      	ldr	r1, [pc, #416]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053cc:	4b63      	ldr	r3, [pc, #396]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053da:	4960      	ldr	r1, [pc, #384]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053ee:	4b5b      	ldr	r3, [pc, #364]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fc:	4957      	ldr	r1, [pc, #348]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005410:	4b52      	ldr	r3, [pc, #328]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005416:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541e:	494f      	ldr	r1, [pc, #316]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005432:	4b4a      	ldr	r3, [pc, #296]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005438:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005440:	4946      	ldr	r1, [pc, #280]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005454:	4b41      	ldr	r3, [pc, #260]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005462:	493e      	ldr	r1, [pc, #248]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005476:	4b39      	ldr	r3, [pc, #228]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005484:	4935      	ldr	r1, [pc, #212]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005498:	4b30      	ldr	r3, [pc, #192]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800549a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054a6:	492d      	ldr	r1, [pc, #180]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d011      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054ba:	4b28      	ldr	r3, [pc, #160]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c8:	4924      	ldr	r1, [pc, #144]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d8:	d101      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80054da:	2301      	movs	r3, #1
 80054dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80054ea:	2301      	movs	r3, #1
 80054ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054fa:	4b18      	ldr	r3, [pc, #96]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005500:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005508:	4914      	ldr	r1, [pc, #80]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800550a:	4313      	orrs	r3, r2
 800550c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00b      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800551c:	4b0f      	ldr	r3, [pc, #60]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005522:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800552c:	490b      	ldr	r1, [pc, #44]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00f      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005540:	4b06      	ldr	r3, [pc, #24]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005546:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005550:	4902      	ldr	r1, [pc, #8]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005558:	e002      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800555a:	bf00      	nop
 800555c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00b      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800556c:	4b8a      	ldr	r3, [pc, #552]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800556e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005572:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557c:	4986      	ldr	r1, [pc, #536]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00b      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005590:	4b81      	ldr	r3, [pc, #516]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005596:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055a0:	497d      	ldr	r1, [pc, #500]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d006      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80d6 	beq.w	8005768 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055bc:	4b76      	ldr	r3, [pc, #472]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a75      	ldr	r2, [pc, #468]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c8:	f7fc f906 	bl	80017d8 <HAL_GetTick>
 80055cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055d0:	f7fc f902 	bl	80017d8 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b64      	cmp	r3, #100	; 0x64
 80055dc:	d901      	bls.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e195      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055e2:	4b6d      	ldr	r3, [pc, #436]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d021      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d11d      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005602:	4b65      	ldr	r3, [pc, #404]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005608:	0c1b      	lsrs	r3, r3, #16
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005610:	4b61      	ldr	r3, [pc, #388]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005616:	0e1b      	lsrs	r3, r3, #24
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	019a      	lsls	r2, r3, #6
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	041b      	lsls	r3, r3, #16
 8005628:	431a      	orrs	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	061b      	lsls	r3, r3, #24
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	071b      	lsls	r3, r3, #28
 8005636:	4958      	ldr	r1, [pc, #352]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d004      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005652:	d00a      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800565c:	2b00      	cmp	r3, #0
 800565e:	d02e      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005668:	d129      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800566a:	4b4b      	ldr	r3, [pc, #300]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800566c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005670:	0c1b      	lsrs	r3, r3, #16
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005678:	4b47      	ldr	r3, [pc, #284]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800567a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800567e:	0f1b      	lsrs	r3, r3, #28
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	019a      	lsls	r2, r3, #6
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	041b      	lsls	r3, r3, #16
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	061b      	lsls	r3, r3, #24
 8005698:	431a      	orrs	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	071b      	lsls	r3, r3, #28
 800569e:	493e      	ldr	r1, [pc, #248]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056a6:	4b3c      	ldr	r3, [pc, #240]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ac:	f023 021f 	bic.w	r2, r3, #31
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	3b01      	subs	r3, #1
 80056b6:	4938      	ldr	r1, [pc, #224]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01d      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056ca:	4b33      	ldr	r3, [pc, #204]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d0:	0e1b      	lsrs	r3, r3, #24
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056d8:	4b2f      	ldr	r3, [pc, #188]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056de:	0f1b      	lsrs	r3, r3, #28
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	019a      	lsls	r2, r3, #6
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	431a      	orrs	r2, r3
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	061b      	lsls	r3, r3, #24
 80056f8:	431a      	orrs	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	071b      	lsls	r3, r3, #28
 80056fe:	4926      	ldr	r1, [pc, #152]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d011      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	019a      	lsls	r2, r3, #6
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	041b      	lsls	r3, r3, #16
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	061b      	lsls	r3, r3, #24
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	071b      	lsls	r3, r3, #28
 800572e:	491a      	ldr	r1, [pc, #104]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a17      	ldr	r2, [pc, #92]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800573c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005742:	f7fc f849 	bl	80017d8 <HAL_GetTick>
 8005746:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005748:	e008      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800574a:	f7fc f845 	bl	80017d8 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b64      	cmp	r3, #100	; 0x64
 8005756:	d901      	bls.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e0d8      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800575c:	4b0e      	ldr	r3, [pc, #56]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0f0      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2b01      	cmp	r3, #1
 800576c:	f040 80ce 	bne.w	800590c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005770:	4b09      	ldr	r3, [pc, #36]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a08      	ldr	r2, [pc, #32]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800577a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800577c:	f7fc f82c 	bl	80017d8 <HAL_GetTick>
 8005780:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005782:	e00b      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005784:	f7fc f828 	bl	80017d8 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	; 0x64
 8005790:	d904      	bls.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e0bb      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005796:	bf00      	nop
 8005798:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800579c:	4b5e      	ldr	r3, [pc, #376]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a8:	d0ec      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d009      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d02e      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d12a      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057d2:	4b51      	ldr	r3, [pc, #324]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d8:	0c1b      	lsrs	r3, r3, #16
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057e0:	4b4d      	ldr	r3, [pc, #308]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e6:	0f1b      	lsrs	r3, r3, #28
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	019a      	lsls	r2, r3, #6
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	041b      	lsls	r3, r3, #16
 80057f8:	431a      	orrs	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	061b      	lsls	r3, r3, #24
 8005800:	431a      	orrs	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	071b      	lsls	r3, r3, #28
 8005806:	4944      	ldr	r1, [pc, #272]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800580e:	4b42      	ldr	r3, [pc, #264]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005814:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	3b01      	subs	r3, #1
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	493d      	ldr	r1, [pc, #244]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d022      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800583c:	d11d      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800583e:	4b36      	ldr	r3, [pc, #216]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005844:	0e1b      	lsrs	r3, r3, #24
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800584c:	4b32      	ldr	r3, [pc, #200]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800584e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005852:	0f1b      	lsrs	r3, r3, #28
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	019a      	lsls	r2, r3, #6
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	041b      	lsls	r3, r3, #16
 8005866:	431a      	orrs	r2, r3
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	061b      	lsls	r3, r3, #24
 800586c:	431a      	orrs	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	071b      	lsls	r3, r3, #28
 8005872:	4929      	ldr	r1, [pc, #164]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b00      	cmp	r3, #0
 8005884:	d028      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005886:	4b24      	ldr	r3, [pc, #144]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588c:	0e1b      	lsrs	r3, r3, #24
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005894:	4b20      	ldr	r3, [pc, #128]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589a:	0c1b      	lsrs	r3, r3, #16
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	019a      	lsls	r2, r3, #6
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	041b      	lsls	r3, r3, #16
 80058ac:	431a      	orrs	r2, r3
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	061b      	lsls	r3, r3, #24
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	071b      	lsls	r3, r3, #28
 80058ba:	4917      	ldr	r1, [pc, #92]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058c2:	4b15      	ldr	r3, [pc, #84]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	4911      	ldr	r1, [pc, #68]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058d8:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a0e      	ldr	r2, [pc, #56]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e4:	f7fb ff78 	bl	80017d8 <HAL_GetTick>
 80058e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058ec:	f7fb ff74 	bl	80017d8 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b64      	cmp	r3, #100	; 0x64
 80058f8:	d901      	bls.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e007      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058fe:	4b06      	ldr	r3, [pc, #24]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800590a:	d1ef      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40023800 	.word	0x40023800

0800591c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e022      	b.n	8005974 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d105      	bne.n	8005946 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7fb fc3b 	bl	80011bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2203      	movs	r2, #3
 800594a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f814 	bl	800597c <HAL_SD_InitCard>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e00a      	b.n	8005974 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800597c:	b5b0      	push	{r4, r5, r7, lr}
 800597e:	b08e      	sub	sp, #56	; 0x38
 8005980:	af04      	add	r7, sp, #16
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005984:	2300      	movs	r3, #0
 8005986:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800598c:	2300      	movs	r3, #0
 800598e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005994:	2300      	movs	r3, #0
 8005996:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005998:	2376      	movs	r3, #118	; 0x76
 800599a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681d      	ldr	r5, [r3, #0]
 80059a0:	466c      	mov	r4, sp
 80059a2:	f107 0314 	add.w	r3, r7, #20
 80059a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80059ae:	f107 0308 	add.w	r3, r7, #8
 80059b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059b4:	4628      	mov	r0, r5
 80059b6:	f001 fdc5 	bl	8007544 <SDMMC_Init>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80059c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e059      	b.n	8005a80 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059da:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 fdf9 	bl	80075d8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059f4:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80059f6:	2002      	movs	r0, #2
 80059f8:	f7fb fefa 	bl	80017f0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 ff59 	bl	80068b4 <SD_PowerON>
 8005a02:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e02e      	b.n	8005a80 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fe78 	bl	8006718 <SD_InitCard>
 8005a28:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00b      	beq.n	8005a48 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e01b      	b.n	8005a80 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 fe53 	bl	80076fc <SDMMC_CmdBlockLength>
 8005a56:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00f      	beq.n	8005a7e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a09      	ldr	r2, [pc, #36]	; (8005a88 <HAL_SD_InitCard+0x10c>)
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3728      	adds	r7, #40	; 0x28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bdb0      	pop	{r4, r5, r7, pc}
 8005a88:	004005ff 	.word	0x004005ff

08005a8c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08c      	sub	sp, #48	; 0x30
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d107      	bne.n	8005ab4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0c3      	b.n	8005c3c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	f040 80bc 	bne.w	8005c3a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	441a      	add	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d907      	bls.n	8005ae6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e0aa      	b.n	8005c3c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2203      	movs	r2, #3
 8005aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2200      	movs	r2, #0
 8005af4:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005b04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	4a4e      	ldr	r2, [pc, #312]	; (8005c44 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005b0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	4a4d      	ldr	r2, [pc, #308]	; (8005c48 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005b14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	2200      	movs	r2, #0
 8005b24:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3380      	adds	r3, #128	; 0x80
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	025b      	lsls	r3, r3, #9
 8005b54:	089b      	lsrs	r3, r3, #2
 8005b56:	f7fc fe33 	bl	80027c0 <HAL_DMA_Start_IT>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d017      	beq.n	8005b90 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005b6e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a35      	ldr	r2, [pc, #212]	; (8005c4c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e055      	b.n	8005c3c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0208 	orr.w	r2, r2, #8
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d002      	beq.n	8005bae <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	025b      	lsls	r3, r3, #9
 8005bac:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bb2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	025b      	lsls	r3, r3, #9
 8005bb8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005bba:	2390      	movs	r3, #144	; 0x90
 8005bbc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f107 0210 	add.w	r2, r7, #16
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 fd65 	bl	80076a4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d90a      	bls.n	8005bf6 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2282      	movs	r2, #130	; 0x82
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bec:	4618      	mov	r0, r3
 8005bee:	f001 fdc9 	bl	8007784 <SDMMC_CmdReadMultiBlock>
 8005bf2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005bf4:	e009      	b.n	8005c0a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2281      	movs	r2, #129	; 0x81
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c02:	4618      	mov	r0, r3
 8005c04:	f001 fd9c 	bl	8007740 <SDMMC_CmdReadSingleBlock>
 8005c08:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d012      	beq.n	8005c36 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a0d      	ldr	r2, [pc, #52]	; (8005c4c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005c16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e002      	b.n	8005c3c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e000      	b.n	8005c3c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005c3a:	2302      	movs	r3, #2
  }
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3730      	adds	r7, #48	; 0x30
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	08006527 	.word	0x08006527
 8005c48:	08006599 	.word	0x08006599
 8005c4c:	004005ff 	.word	0x004005ff

08005c50 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08c      	sub	sp, #48	; 0x30
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d107      	bne.n	8005c78 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e0c6      	b.n	8005e06 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	f040 80bf 	bne.w	8005e04 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	441a      	add	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d907      	bls.n	8005caa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e0ad      	b.n	8005e06 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2203      	movs	r2, #3
 8005cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f042 021a 	orr.w	r2, r2, #26
 8005cc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cce:	4a50      	ldr	r2, [pc, #320]	; (8005e10 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8005cd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd6:	4a4f      	ldr	r2, [pc, #316]	; (8005e14 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005cd8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cde:	2200      	movs	r2, #0
 8005ce0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d002      	beq.n	8005cf0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	025b      	lsls	r3, r3, #9
 8005cee:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d90a      	bls.n	8005d0c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	22a0      	movs	r2, #160	; 0xa0
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d02:	4618      	mov	r0, r3
 8005d04:	f001 fd82 	bl	800780c <SDMMC_CmdWriteMultiBlock>
 8005d08:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005d0a:	e009      	b.n	8005d20 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2290      	movs	r2, #144	; 0x90
 8005d10:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f001 fd55 	bl	80077c8 <SDMMC_CmdWriteSingleBlock>
 8005d1e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d012      	beq.n	8005d4c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a3b      	ldr	r2, [pc, #236]	; (8005e18 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005d2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	431a      	orrs	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e05c      	b.n	8005e06 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0208 	orr.w	r2, r2, #8
 8005d5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d60:	2240      	movs	r2, #64	; 0x40
 8005d62:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3380      	adds	r3, #128	; 0x80
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	025b      	lsls	r3, r3, #9
 8005d92:	089b      	lsrs	r3, r3, #2
 8005d94:	f7fc fd14 	bl	80027c0 <HAL_DMA_Start_IT>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d01a      	beq.n	8005dd4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 021a 	bic.w	r2, r2, #26
 8005dac:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a19      	ldr	r2, [pc, #100]	; (8005e18 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e018      	b.n	8005e06 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dd8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	025b      	lsls	r3, r3, #9
 8005dde:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005de0:	2390      	movs	r3, #144	; 0x90
 8005de2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005de4:	2300      	movs	r3, #0
 8005de6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005dec:	2301      	movs	r3, #1
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f107 0210 	add.w	r2, r7, #16
 8005df8:	4611      	mov	r1, r2
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f001 fc52 	bl	80076a4 <SDMMC_ConfigData>

      return HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	e000      	b.n	8005e06 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8005e04:	2302      	movs	r3, #2
  }
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3730      	adds	r7, #48	; 0x30
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	080064fd 	.word	0x080064fd
 8005e14:	08006599 	.word	0x08006599
 8005e18:	004005ff 	.word	0x004005ff

08005e1c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d008      	beq.n	8005e4a <HAL_SD_IRQHandler+0x2e>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fdec 	bl	8006a20 <SD_Read_IT>
 8005e48:	e15a      	b.n	8006100 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 808d 	beq.w	8005f74 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4b9a      	ldr	r3, [pc, #616]	; (80060d8 <HAL_SD_IRQHandler+0x2bc>)
 8005e70:	400b      	ands	r3, r1
 8005e72:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0201 	bic.w	r2, r2, #1
 8005e82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d039      	beq.n	8005f02 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <HAL_SD_IRQHandler+0x86>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d011      	beq.n	8005ec6 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f001 fcd2 	bl	8007850 <SDMMC_CmdStopTransfer>
 8005eac:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d008      	beq.n	8005ec6 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f921 	bl	8006108 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ece:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <HAL_SD_IRQHandler+0xd6>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f003 fd3c 	bl	8009970 <HAL_SD_RxCpltCallback>
 8005ef8:	e102      	b.n	8006100 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f003 fd2e 	bl	800995c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f00:	e0fe      	b.n	8006100 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 80f9 	beq.w	8006100 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f003 0320 	and.w	r3, r3, #32
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d011      	beq.n	8005f3c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f001 fc97 	bl	8007850 <SDMMC_CmdStopTransfer>
 8005f22:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d008      	beq.n	8005f3c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f8e6 	bl	8006108 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f040 80dc 	bne.w	8006100 <HAL_SD_IRQHandler+0x2e4>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f040 80d6 	bne.w	8006100 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0208 	bic.w	r2, r2, #8
 8005f62:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f003 fcf5 	bl	800995c <HAL_SD_TxCpltCallback>
}
 8005f72:	e0c5      	b.n	8006100 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d008      	beq.n	8005f94 <HAL_SD_IRQHandler+0x178>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fd98 	bl	8006ac2 <SD_Write_IT>
 8005f92:	e0b5      	b.n	8006100 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 80ae 	beq.w	8006100 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	f043 0202 	orr.w	r2, r3, #2
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	f043 0208 	orr.w	r2, r3, #8
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	f043 0220 	orr.w	r2, r3, #32
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff8:	f003 0310 	and.w	r3, r3, #16
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	f043 0210 	orr.w	r2, r3, #16
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f240 523a 	movw	r2, #1338	; 0x53a
 8006014:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006024:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f001 fc10 	bl	8007850 <SDMMC_CmdStopTransfer>
 8006030:	4602      	mov	r2, r0
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006036:	431a      	orrs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f857 	bl	8006108 <HAL_SD_ErrorCallback>
}
 800605a:	e051      	b.n	8006100 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006062:	2b00      	cmp	r3, #0
 8006064:	d04c      	beq.n	8006100 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b00      	cmp	r3, #0
 800606e:	d104      	bne.n	800607a <HAL_SD_IRQHandler+0x25e>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	d011      	beq.n	800609e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607e:	4a17      	ldr	r2, [pc, #92]	; (80060dc <HAL_SD_IRQHandler+0x2c0>)
 8006080:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006086:	4618      	mov	r0, r3
 8006088:	f7fc fbfa 	bl	8002880 <HAL_DMA_Abort_IT>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d036      	beq.n	8006100 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fad0 	bl	800663c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800609c:	e030      	b.n	8006100 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d104      	bne.n	80060b2 <HAL_SD_IRQHandler+0x296>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d018      	beq.n	80060e4 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	4a0a      	ldr	r2, [pc, #40]	; (80060e0 <HAL_SD_IRQHandler+0x2c4>)
 80060b8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fc fbde 	bl	8002880 <HAL_DMA_Abort_IT>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01a      	beq.n	8006100 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 faeb 	bl	80066aa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80060d4:	e014      	b.n	8006100 <HAL_SD_IRQHandler+0x2e4>
 80060d6:	bf00      	nop
 80060d8:	ffff3ec5 	.word	0xffff3ec5
 80060dc:	0800663d 	.word	0x0800663d
 80060e0:	080066ab 	.word	0x080066ab
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f003 fc25 	bl	8009948 <HAL_SD_AbortCallback>
}
 80060fe:	e7ff      	b.n	8006100 <HAL_SD_IRQHandler+0x2e4>
 8006100:	bf00      	nop
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800612a:	0f9b      	lsrs	r3, r3, #30
 800612c:	b2da      	uxtb	r2, r3
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006136:	0e9b      	lsrs	r3, r3, #26
 8006138:	b2db      	uxtb	r3, r3
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	b2da      	uxtb	r2, r3
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006148:	0e1b      	lsrs	r3, r3, #24
 800614a:	b2db      	uxtb	r3, r3
 800614c:	f003 0303 	and.w	r3, r3, #3
 8006150:	b2da      	uxtb	r2, r3
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800615a:	0c1b      	lsrs	r3, r3, #16
 800615c:	b2da      	uxtb	r2, r3
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006166:	0a1b      	lsrs	r3, r3, #8
 8006168:	b2da      	uxtb	r2, r3
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006172:	b2da      	uxtb	r2, r3
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800617c:	0d1b      	lsrs	r3, r3, #20
 800617e:	b29a      	uxth	r2, r3
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006188:	0c1b      	lsrs	r3, r3, #16
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	b2da      	uxtb	r2, r3
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800619a:	0bdb      	lsrs	r3, r3, #15
 800619c:	b2db      	uxtb	r3, r3
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ac:	0b9b      	lsrs	r3, r3, #14
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061be:	0b5b      	lsrs	r3, r3, #13
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d0:	0b1b      	lsrs	r3, r3, #12
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2200      	movs	r2, #0
 80061e2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d163      	bne.n	80062b4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061f0:	009a      	lsls	r2, r3, #2
 80061f2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80061f6:	4013      	ands	r3, r2
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80061fc:	0f92      	lsrs	r2, r2, #30
 80061fe:	431a      	orrs	r2, r3
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006208:	0edb      	lsrs	r3, r3, #27
 800620a:	b2db      	uxtb	r3, r3
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	b2da      	uxtb	r2, r3
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800621a:	0e1b      	lsrs	r3, r3, #24
 800621c:	b2db      	uxtb	r3, r3
 800621e:	f003 0307 	and.w	r3, r3, #7
 8006222:	b2da      	uxtb	r2, r3
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800622c:	0d5b      	lsrs	r3, r3, #21
 800622e:	b2db      	uxtb	r3, r3
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	b2da      	uxtb	r2, r3
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800623e:	0c9b      	lsrs	r3, r3, #18
 8006240:	b2db      	uxtb	r3, r3
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	b2da      	uxtb	r2, r3
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006250:	0bdb      	lsrs	r3, r3, #15
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	b2da      	uxtb	r2, r3
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	7e1b      	ldrb	r3, [r3, #24]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	3302      	adds	r3, #2
 8006274:	2201      	movs	r2, #1
 8006276:	fa02 f303 	lsl.w	r3, r2, r3
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800627e:	fb03 f202 	mul.w	r2, r3, r2
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	7a1b      	ldrb	r3, [r3, #8]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	f003 030f 	and.w	r3, r3, #15
 8006290:	2201      	movs	r2, #1
 8006292:	409a      	lsls	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80062a0:	0a52      	lsrs	r2, r2, #9
 80062a2:	fb03 f202 	mul.w	r2, r3, r2
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062b0:	661a      	str	r2, [r3, #96]	; 0x60
 80062b2:	e031      	b.n	8006318 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d11d      	bne.n	80062f8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062c0:	041b      	lsls	r3, r3, #16
 80062c2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ca:	0c1b      	lsrs	r3, r3, #16
 80062cc:	431a      	orrs	r2, r3
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	3301      	adds	r3, #1
 80062d8:	029a      	lsls	r2, r3, #10
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	661a      	str	r2, [r3, #96]	; 0x60
 80062f6:	e00f      	b.n	8006318 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a58      	ldr	r2, [pc, #352]	; (8006460 <HAL_SD_GetCardCSD+0x344>)
 80062fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e09d      	b.n	8006454 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800631c:	0b9b      	lsrs	r3, r3, #14
 800631e:	b2db      	uxtb	r3, r3
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	b2da      	uxtb	r2, r3
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800632e:	09db      	lsrs	r3, r3, #7
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006336:	b2da      	uxtb	r2, r3
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006340:	b2db      	uxtb	r3, r3
 8006342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006346:	b2da      	uxtb	r2, r3
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006350:	0fdb      	lsrs	r3, r3, #31
 8006352:	b2da      	uxtb	r2, r3
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635c:	0f5b      	lsrs	r3, r3, #29
 800635e:	b2db      	uxtb	r3, r3
 8006360:	f003 0303 	and.w	r3, r3, #3
 8006364:	b2da      	uxtb	r2, r3
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636e:	0e9b      	lsrs	r3, r3, #26
 8006370:	b2db      	uxtb	r3, r3
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	b2da      	uxtb	r2, r3
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006380:	0d9b      	lsrs	r3, r3, #22
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	b2da      	uxtb	r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006392:	0d5b      	lsrs	r3, r3, #21
 8006394:	b2db      	uxtb	r3, r3
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	b2da      	uxtb	r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ae:	0c1b      	lsrs	r3, r3, #16
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c2:	0bdb      	lsrs	r3, r3, #15
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d6:	0b9b      	lsrs	r3, r3, #14
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ea:	0b5b      	lsrs	r3, r3, #13
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fe:	0b1b      	lsrs	r3, r3, #12
 8006400:	b2db      	uxtb	r3, r3
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	b2da      	uxtb	r2, r3
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006412:	0a9b      	lsrs	r3, r3, #10
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	b2da      	uxtb	r2, r3
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006426:	0a1b      	lsrs	r3, r3, #8
 8006428:	b2db      	uxtb	r3, r3
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	b2da      	uxtb	r2, r3
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006442:	b2da      	uxtb	r2, r3
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	004005ff 	.word	0x004005ff

08006464 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80064c8:	f107 030c 	add.w	r3, r7, #12
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa7e 	bl	80069d0 <SD_SendStatus>
 80064d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	0a5b      	lsrs	r3, r3, #9
 80064ec:	f003 030f 	and.w	r3, r3, #15
 80064f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80064f2:	693b      	ldr	r3, [r7, #16]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006508:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006518:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800651a:	bf00      	nop
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	2b82      	cmp	r3, #130	; 0x82
 800653a:	d111      	bne.n	8006560 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4618      	mov	r0, r3
 8006542:	f001 f985 	bl	8007850 <SDMMC_CmdStopTransfer>
 8006546:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d008      	beq.n	8006560 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	431a      	orrs	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f7ff fdd4 	bl	8006108 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0208 	bic.w	r2, r2, #8
 800656e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f240 523a 	movw	r2, #1338	; 0x53a
 8006578:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f003 f9f1 	bl	8009970 <HAL_SD_RxCpltCallback>
#endif
}
 800658e:	bf00      	nop
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fc fb16 	bl	8002bd8 <HAL_DMA_GetError>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d03e      	beq.n	8006630 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d002      	beq.n	80065ce <SD_DMAError+0x36>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d12d      	bne.n	800662a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a19      	ldr	r2, [pc, #100]	; (8006638 <SD_DMAError+0xa0>)
 80065d4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80065e4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80065f2:	6978      	ldr	r0, [r7, #20]
 80065f4:	f7ff ff62 	bl	80064bc <HAL_SD_GetCardState>
 80065f8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b06      	cmp	r3, #6
 80065fe:	d002      	beq.n	8006606 <SD_DMAError+0x6e>
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b05      	cmp	r3, #5
 8006604:	d10a      	bne.n	800661c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f001 f920 	bl	8007850 <SDMMC_CmdStopTransfer>
 8006610:	4602      	mov	r2, r0
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	431a      	orrs	r2, r3
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2200      	movs	r2, #0
 8006628:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800662a:	6978      	ldr	r0, [r7, #20]
 800662c:	f7ff fd6c 	bl	8006108 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006630:	bf00      	nop
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	004005ff 	.word	0x004005ff

0800663c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006652:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff ff31 	bl	80064bc <HAL_SD_GetCardState>
 800665a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b06      	cmp	r3, #6
 800666e:	d002      	beq.n	8006676 <SD_DMATxAbort+0x3a>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b05      	cmp	r3, #5
 8006674:	d10a      	bne.n	800668c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f001 f8e8 	bl	8007850 <SDMMC_CmdStopTransfer>
 8006680:	4602      	mov	r2, r0
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006686:	431a      	orrs	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006690:	2b00      	cmp	r3, #0
 8006692:	d103      	bne.n	800669c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f003 f957 	bl	8009948 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800669a:	e002      	b.n	80066a2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f7ff fd33 	bl	8006108 <HAL_SD_ErrorCallback>
}
 80066a2:	bf00      	nop
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f240 523a 	movw	r2, #1338	; 0x53a
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7ff fefa 	bl	80064bc <HAL_SD_GetCardState>
 80066c8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b06      	cmp	r3, #6
 80066dc:	d002      	beq.n	80066e4 <SD_DMARxAbort+0x3a>
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b05      	cmp	r3, #5
 80066e2:	d10a      	bne.n	80066fa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f001 f8b1 	bl	8007850 <SDMMC_CmdStopTransfer>
 80066ee:	4602      	mov	r2, r0
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	431a      	orrs	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d103      	bne.n	800670a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f003 f920 	bl	8009948 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006708:	e002      	b.n	8006710 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff fcfc 	bl	8006108 <HAL_SD_ErrorCallback>
}
 8006710:	bf00      	nop
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006718:	b5b0      	push	{r4, r5, r7, lr}
 800671a:	b094      	sub	sp, #80	; 0x50
 800671c:	af04      	add	r7, sp, #16
 800671e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006720:	2301      	movs	r3, #1
 8006722:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4618      	mov	r0, r3
 800672a:	f000 ff63 	bl	80075f4 <SDMMC_GetPowerState>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d102      	bne.n	800673a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006734:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006738:	e0b8      	b.n	80068ac <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673e:	2b03      	cmp	r3, #3
 8006740:	d02f      	beq.n	80067a2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	f001 f94a 	bl	80079e0 <SDMMC_CmdSendCID>
 800674c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800674e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <SD_InitCard+0x40>
    {
      return errorstate;
 8006754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006756:	e0a9      	b.n	80068ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2100      	movs	r1, #0
 800675e:	4618      	mov	r0, r3
 8006760:	f000 ff8d 	bl	800767e <SDMMC_GetResponse>
 8006764:	4602      	mov	r2, r0
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2104      	movs	r1, #4
 8006770:	4618      	mov	r0, r3
 8006772:	f000 ff84 	bl	800767e <SDMMC_GetResponse>
 8006776:	4602      	mov	r2, r0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2108      	movs	r1, #8
 8006782:	4618      	mov	r0, r3
 8006784:	f000 ff7b 	bl	800767e <SDMMC_GetResponse>
 8006788:	4602      	mov	r2, r0
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	210c      	movs	r1, #12
 8006794:	4618      	mov	r0, r3
 8006796:	f000 ff72 	bl	800767e <SDMMC_GetResponse>
 800679a:	4602      	mov	r2, r0
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d00d      	beq.n	80067c6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f107 020e 	add.w	r2, r7, #14
 80067b2:	4611      	mov	r1, r2
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 f950 	bl	8007a5a <SDMMC_CmdSetRelAdd>
 80067ba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80067bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <SD_InitCard+0xae>
    {
      return errorstate;
 80067c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c4:	e072      	b.n	80068ac <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d036      	beq.n	800683c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80067ce:	89fb      	ldrh	r3, [r7, #14]
 80067d0:	461a      	mov	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067de:	041b      	lsls	r3, r3, #16
 80067e0:	4619      	mov	r1, r3
 80067e2:	4610      	mov	r0, r2
 80067e4:	f001 f91a 	bl	8007a1c <SDMMC_CmdSendCSD>
 80067e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80067ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80067f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f2:	e05b      	b.n	80068ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2100      	movs	r1, #0
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 ff3f 	bl	800767e <SDMMC_GetResponse>
 8006800:	4602      	mov	r2, r0
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2104      	movs	r1, #4
 800680c:	4618      	mov	r0, r3
 800680e:	f000 ff36 	bl	800767e <SDMMC_GetResponse>
 8006812:	4602      	mov	r2, r0
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2108      	movs	r1, #8
 800681e:	4618      	mov	r0, r3
 8006820:	f000 ff2d 	bl	800767e <SDMMC_GetResponse>
 8006824:	4602      	mov	r2, r0
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	210c      	movs	r1, #12
 8006830:	4618      	mov	r0, r3
 8006832:	f000 ff24 	bl	800767e <SDMMC_GetResponse>
 8006836:	4602      	mov	r2, r0
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2104      	movs	r1, #4
 8006842:	4618      	mov	r0, r3
 8006844:	f000 ff1b 	bl	800767e <SDMMC_GetResponse>
 8006848:	4603      	mov	r3, r0
 800684a:	0d1a      	lsrs	r2, r3, #20
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006850:	f107 0310 	add.w	r3, r7, #16
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff fc60 	bl	800611c <HAL_SD_GetCardCSD>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006862:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006866:	e021      	b.n	80068ac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6819      	ldr	r1, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006870:	041b      	lsls	r3, r3, #16
 8006872:	2200      	movs	r2, #0
 8006874:	461c      	mov	r4, r3
 8006876:	4615      	mov	r5, r2
 8006878:	4622      	mov	r2, r4
 800687a:	462b      	mov	r3, r5
 800687c:	4608      	mov	r0, r1
 800687e:	f001 f809 	bl	8007894 <SDMMC_CmdSelDesel>
 8006882:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <SD_InitCard+0x176>
  {
    return errorstate;
 800688a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688c:	e00e      	b.n	80068ac <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681d      	ldr	r5, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	466c      	mov	r4, sp
 8006896:	f103 0210 	add.w	r2, r3, #16
 800689a:	ca07      	ldmia	r2, {r0, r1, r2}
 800689c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80068a0:	3304      	adds	r3, #4
 80068a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068a4:	4628      	mov	r0, r5
 80068a6:	f000 fe4d 	bl	8007544 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3740      	adds	r7, #64	; 0x40
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bdb0      	pop	{r4, r5, r7, pc}

080068b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068bc:	2300      	movs	r3, #0
 80068be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	2300      	movs	r3, #0
 80068c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f001 f804 	bl	80078da <SDMMC_CmdGoIdleState>
 80068d2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <SD_PowerON+0x2a>
  {
    return errorstate;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	e072      	b.n	80069c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 f817 	bl	8007916 <SDMMC_CmdOperCond>
 80068e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00d      	beq.n	800690c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 ffed 	bl	80078da <SDMMC_CmdGoIdleState>
 8006900:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d004      	beq.n	8006912 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	e05b      	b.n	80069c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006916:	2b01      	cmp	r3, #1
 8006918:	d137      	bne.n	800698a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2100      	movs	r1, #0
 8006920:	4618      	mov	r0, r3
 8006922:	f001 f817 	bl	8007954 <SDMMC_CmdAppCommand>
 8006926:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d02d      	beq.n	800698a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800692e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006932:	e047      	b.n	80069c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2100      	movs	r1, #0
 800693a:	4618      	mov	r0, r3
 800693c:	f001 f80a 	bl	8007954 <SDMMC_CmdAppCommand>
 8006940:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <SD_PowerON+0x98>
    {
      return errorstate;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	e03b      	b.n	80069c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	491e      	ldr	r1, [pc, #120]	; (80069cc <SD_PowerON+0x118>)
 8006952:	4618      	mov	r0, r3
 8006954:	f001 f820 	bl	8007998 <SDMMC_CmdAppOperCommand>
 8006958:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006960:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006964:	e02e      	b.n	80069c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2100      	movs	r1, #0
 800696c:	4618      	mov	r0, r3
 800696e:	f000 fe86 	bl	800767e <SDMMC_GetResponse>
 8006972:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	0fdb      	lsrs	r3, r3, #31
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <SD_PowerON+0xcc>
 800697c:	2301      	movs	r3, #1
 800697e:	e000      	b.n	8006982 <SD_PowerON+0xce>
 8006980:	2300      	movs	r3, #0
 8006982:	613b      	str	r3, [r7, #16]

    count++;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	3301      	adds	r3, #1
 8006988:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006990:	4293      	cmp	r3, r2
 8006992:	d802      	bhi.n	800699a <SD_PowerON+0xe6>
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0cc      	beq.n	8006934 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d902      	bls.n	80069aa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80069a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069a8:	e00c      	b.n	80069c4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	645a      	str	r2, [r3, #68]	; 0x44
 80069ba:	e002      	b.n	80069c2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3718      	adds	r7, #24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	c1100000 	.word	0xc1100000

080069d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d102      	bne.n	80069e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80069e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069e4:	e018      	b.n	8006a18 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ee:	041b      	lsls	r3, r3, #16
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f001 f852 	bl	8007a9c <SDMMC_CmdSendStatus>
 80069f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	e009      	b.n	8006a18 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2100      	movs	r1, #0
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fe37 	bl	800767e <SDMMC_GetResponse>
 8006a10:	4602      	mov	r2, r0
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a32:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d03f      	beq.n	8006aba <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	e033      	b.n	8006aa8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 fda9 	bl	800759c <SDMMC_ReadFIFO>
 8006a4a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3301      	adds	r3, #1
 8006a58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	0a1b      	lsrs	r3, r3, #8
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	0c1b      	lsrs	r3, r3, #16
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3301      	adds	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	0e1b      	lsrs	r3, r3, #24
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2b07      	cmp	r3, #7
 8006aac:	d9c8      	bls.n	8006a40 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006aba:	bf00      	nop
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b086      	sub	sp, #24
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d043      	beq.n	8006b64 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	e037      	b.n	8006b52 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3301      	adds	r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	021a      	lsls	r2, r3, #8
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3301      	adds	r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	041a      	lsls	r2, r3, #16
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	061a      	lsls	r2, r3, #24
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f107 0208 	add.w	r2, r7, #8
 8006b44:	4611      	mov	r1, r2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fd35 	bl	80075b6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b07      	cmp	r3, #7
 8006b56:	d9c4      	bls.n	8006ae2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006b64:	bf00      	nop
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e040      	b.n	8006c00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d106      	bne.n	8006b94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fa fc20 	bl	80013d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2224      	movs	r2, #36	; 0x24
 8006b98:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0201 	bic.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f8b0 	bl	8006d10 <UART_SetConfig>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e022      	b.n	8006c00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fb08 	bl	80071d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006be6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0201 	orr.w	r2, r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fb8f 	bl	800731c <UART_CheckIdleState>
 8006bfe:	4603      	mov	r3, r0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08a      	sub	sp, #40	; 0x28
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	603b      	str	r3, [r7, #0]
 8006c14:	4613      	mov	r3, r2
 8006c16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d171      	bne.n	8006d04 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <HAL_UART_Transmit+0x24>
 8006c26:	88fb      	ldrh	r3, [r7, #6]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e06a      	b.n	8006d06 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2221      	movs	r2, #33	; 0x21
 8006c3c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c3e:	f7fa fdcb 	bl	80017d8 <HAL_GetTick>
 8006c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	88fa      	ldrh	r2, [r7, #6]
 8006c48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	88fa      	ldrh	r2, [r7, #6]
 8006c50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5c:	d108      	bne.n	8006c70 <HAL_UART_Transmit+0x68>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	e003      	b.n	8006c78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c78:	e02c      	b.n	8006cd4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2200      	movs	r2, #0
 8006c82:	2180      	movs	r1, #128	; 0x80
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 fb96 	bl	80073b6 <UART_WaitOnFlagUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e038      	b.n	8006d06 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10b      	bne.n	8006cb2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ca8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	3302      	adds	r3, #2
 8006cae:	61bb      	str	r3, [r7, #24]
 8006cb0:	e007      	b.n	8006cc2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	781a      	ldrb	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1cc      	bne.n	8006c7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	2140      	movs	r1, #64	; 0x40
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 fb63 	bl	80073b6 <UART_WaitOnFlagUntilTimeout>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e005      	b.n	8006d06 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	e000      	b.n	8006d06 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006d04:	2302      	movs	r3, #2
  }
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3720      	adds	r7, #32
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	4ba6      	ldr	r3, [pc, #664]	; (8006fd4 <UART_SetConfig+0x2c4>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6812      	ldr	r2, [r2, #0]
 8006d42:	6979      	ldr	r1, [r7, #20]
 8006d44:	430b      	orrs	r3, r1
 8006d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a94      	ldr	r2, [pc, #592]	; (8006fd8 <UART_SetConfig+0x2c8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d120      	bne.n	8006dce <UART_SetConfig+0xbe>
 8006d8c:	4b93      	ldr	r3, [pc, #588]	; (8006fdc <UART_SetConfig+0x2cc>)
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d816      	bhi.n	8006dc8 <UART_SetConfig+0xb8>
 8006d9a:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <UART_SetConfig+0x90>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006db1 	.word	0x08006db1
 8006da4:	08006dbd 	.word	0x08006dbd
 8006da8:	08006db7 	.word	0x08006db7
 8006dac:	08006dc3 	.word	0x08006dc3
 8006db0:	2301      	movs	r3, #1
 8006db2:	77fb      	strb	r3, [r7, #31]
 8006db4:	e150      	b.n	8007058 <UART_SetConfig+0x348>
 8006db6:	2302      	movs	r3, #2
 8006db8:	77fb      	strb	r3, [r7, #31]
 8006dba:	e14d      	b.n	8007058 <UART_SetConfig+0x348>
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	77fb      	strb	r3, [r7, #31]
 8006dc0:	e14a      	b.n	8007058 <UART_SetConfig+0x348>
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	77fb      	strb	r3, [r7, #31]
 8006dc6:	e147      	b.n	8007058 <UART_SetConfig+0x348>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e144      	b.n	8007058 <UART_SetConfig+0x348>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a83      	ldr	r2, [pc, #524]	; (8006fe0 <UART_SetConfig+0x2d0>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d132      	bne.n	8006e3e <UART_SetConfig+0x12e>
 8006dd8:	4b80      	ldr	r3, [pc, #512]	; (8006fdc <UART_SetConfig+0x2cc>)
 8006dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dde:	f003 030c 	and.w	r3, r3, #12
 8006de2:	2b0c      	cmp	r3, #12
 8006de4:	d828      	bhi.n	8006e38 <UART_SetConfig+0x128>
 8006de6:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <UART_SetConfig+0xdc>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006e21 	.word	0x08006e21
 8006df0:	08006e39 	.word	0x08006e39
 8006df4:	08006e39 	.word	0x08006e39
 8006df8:	08006e39 	.word	0x08006e39
 8006dfc:	08006e2d 	.word	0x08006e2d
 8006e00:	08006e39 	.word	0x08006e39
 8006e04:	08006e39 	.word	0x08006e39
 8006e08:	08006e39 	.word	0x08006e39
 8006e0c:	08006e27 	.word	0x08006e27
 8006e10:	08006e39 	.word	0x08006e39
 8006e14:	08006e39 	.word	0x08006e39
 8006e18:	08006e39 	.word	0x08006e39
 8006e1c:	08006e33 	.word	0x08006e33
 8006e20:	2300      	movs	r3, #0
 8006e22:	77fb      	strb	r3, [r7, #31]
 8006e24:	e118      	b.n	8007058 <UART_SetConfig+0x348>
 8006e26:	2302      	movs	r3, #2
 8006e28:	77fb      	strb	r3, [r7, #31]
 8006e2a:	e115      	b.n	8007058 <UART_SetConfig+0x348>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	77fb      	strb	r3, [r7, #31]
 8006e30:	e112      	b.n	8007058 <UART_SetConfig+0x348>
 8006e32:	2308      	movs	r3, #8
 8006e34:	77fb      	strb	r3, [r7, #31]
 8006e36:	e10f      	b.n	8007058 <UART_SetConfig+0x348>
 8006e38:	2310      	movs	r3, #16
 8006e3a:	77fb      	strb	r3, [r7, #31]
 8006e3c:	e10c      	b.n	8007058 <UART_SetConfig+0x348>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a68      	ldr	r2, [pc, #416]	; (8006fe4 <UART_SetConfig+0x2d4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d120      	bne.n	8006e8a <UART_SetConfig+0x17a>
 8006e48:	4b64      	ldr	r3, [pc, #400]	; (8006fdc <UART_SetConfig+0x2cc>)
 8006e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e52:	2b30      	cmp	r3, #48	; 0x30
 8006e54:	d013      	beq.n	8006e7e <UART_SetConfig+0x16e>
 8006e56:	2b30      	cmp	r3, #48	; 0x30
 8006e58:	d814      	bhi.n	8006e84 <UART_SetConfig+0x174>
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	d009      	beq.n	8006e72 <UART_SetConfig+0x162>
 8006e5e:	2b20      	cmp	r3, #32
 8006e60:	d810      	bhi.n	8006e84 <UART_SetConfig+0x174>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <UART_SetConfig+0x15c>
 8006e66:	2b10      	cmp	r3, #16
 8006e68:	d006      	beq.n	8006e78 <UART_SetConfig+0x168>
 8006e6a:	e00b      	b.n	8006e84 <UART_SetConfig+0x174>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	77fb      	strb	r3, [r7, #31]
 8006e70:	e0f2      	b.n	8007058 <UART_SetConfig+0x348>
 8006e72:	2302      	movs	r3, #2
 8006e74:	77fb      	strb	r3, [r7, #31]
 8006e76:	e0ef      	b.n	8007058 <UART_SetConfig+0x348>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	77fb      	strb	r3, [r7, #31]
 8006e7c:	e0ec      	b.n	8007058 <UART_SetConfig+0x348>
 8006e7e:	2308      	movs	r3, #8
 8006e80:	77fb      	strb	r3, [r7, #31]
 8006e82:	e0e9      	b.n	8007058 <UART_SetConfig+0x348>
 8006e84:	2310      	movs	r3, #16
 8006e86:	77fb      	strb	r3, [r7, #31]
 8006e88:	e0e6      	b.n	8007058 <UART_SetConfig+0x348>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a56      	ldr	r2, [pc, #344]	; (8006fe8 <UART_SetConfig+0x2d8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d120      	bne.n	8006ed6 <UART_SetConfig+0x1c6>
 8006e94:	4b51      	ldr	r3, [pc, #324]	; (8006fdc <UART_SetConfig+0x2cc>)
 8006e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8006ea0:	d013      	beq.n	8006eca <UART_SetConfig+0x1ba>
 8006ea2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ea4:	d814      	bhi.n	8006ed0 <UART_SetConfig+0x1c0>
 8006ea6:	2b80      	cmp	r3, #128	; 0x80
 8006ea8:	d009      	beq.n	8006ebe <UART_SetConfig+0x1ae>
 8006eaa:	2b80      	cmp	r3, #128	; 0x80
 8006eac:	d810      	bhi.n	8006ed0 <UART_SetConfig+0x1c0>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <UART_SetConfig+0x1a8>
 8006eb2:	2b40      	cmp	r3, #64	; 0x40
 8006eb4:	d006      	beq.n	8006ec4 <UART_SetConfig+0x1b4>
 8006eb6:	e00b      	b.n	8006ed0 <UART_SetConfig+0x1c0>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	77fb      	strb	r3, [r7, #31]
 8006ebc:	e0cc      	b.n	8007058 <UART_SetConfig+0x348>
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	77fb      	strb	r3, [r7, #31]
 8006ec2:	e0c9      	b.n	8007058 <UART_SetConfig+0x348>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	77fb      	strb	r3, [r7, #31]
 8006ec8:	e0c6      	b.n	8007058 <UART_SetConfig+0x348>
 8006eca:	2308      	movs	r3, #8
 8006ecc:	77fb      	strb	r3, [r7, #31]
 8006ece:	e0c3      	b.n	8007058 <UART_SetConfig+0x348>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	77fb      	strb	r3, [r7, #31]
 8006ed4:	e0c0      	b.n	8007058 <UART_SetConfig+0x348>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a44      	ldr	r2, [pc, #272]	; (8006fec <UART_SetConfig+0x2dc>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d125      	bne.n	8006f2c <UART_SetConfig+0x21c>
 8006ee0:	4b3e      	ldr	r3, [pc, #248]	; (8006fdc <UART_SetConfig+0x2cc>)
 8006ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eee:	d017      	beq.n	8006f20 <UART_SetConfig+0x210>
 8006ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ef4:	d817      	bhi.n	8006f26 <UART_SetConfig+0x216>
 8006ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006efa:	d00b      	beq.n	8006f14 <UART_SetConfig+0x204>
 8006efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f00:	d811      	bhi.n	8006f26 <UART_SetConfig+0x216>
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <UART_SetConfig+0x1fe>
 8006f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f0a:	d006      	beq.n	8006f1a <UART_SetConfig+0x20a>
 8006f0c:	e00b      	b.n	8006f26 <UART_SetConfig+0x216>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	77fb      	strb	r3, [r7, #31]
 8006f12:	e0a1      	b.n	8007058 <UART_SetConfig+0x348>
 8006f14:	2302      	movs	r3, #2
 8006f16:	77fb      	strb	r3, [r7, #31]
 8006f18:	e09e      	b.n	8007058 <UART_SetConfig+0x348>
 8006f1a:	2304      	movs	r3, #4
 8006f1c:	77fb      	strb	r3, [r7, #31]
 8006f1e:	e09b      	b.n	8007058 <UART_SetConfig+0x348>
 8006f20:	2308      	movs	r3, #8
 8006f22:	77fb      	strb	r3, [r7, #31]
 8006f24:	e098      	b.n	8007058 <UART_SetConfig+0x348>
 8006f26:	2310      	movs	r3, #16
 8006f28:	77fb      	strb	r3, [r7, #31]
 8006f2a:	e095      	b.n	8007058 <UART_SetConfig+0x348>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a2f      	ldr	r2, [pc, #188]	; (8006ff0 <UART_SetConfig+0x2e0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d125      	bne.n	8006f82 <UART_SetConfig+0x272>
 8006f36:	4b29      	ldr	r3, [pc, #164]	; (8006fdc <UART_SetConfig+0x2cc>)
 8006f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f44:	d017      	beq.n	8006f76 <UART_SetConfig+0x266>
 8006f46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f4a:	d817      	bhi.n	8006f7c <UART_SetConfig+0x26c>
 8006f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f50:	d00b      	beq.n	8006f6a <UART_SetConfig+0x25a>
 8006f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f56:	d811      	bhi.n	8006f7c <UART_SetConfig+0x26c>
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <UART_SetConfig+0x254>
 8006f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f60:	d006      	beq.n	8006f70 <UART_SetConfig+0x260>
 8006f62:	e00b      	b.n	8006f7c <UART_SetConfig+0x26c>
 8006f64:	2301      	movs	r3, #1
 8006f66:	77fb      	strb	r3, [r7, #31]
 8006f68:	e076      	b.n	8007058 <UART_SetConfig+0x348>
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	77fb      	strb	r3, [r7, #31]
 8006f6e:	e073      	b.n	8007058 <UART_SetConfig+0x348>
 8006f70:	2304      	movs	r3, #4
 8006f72:	77fb      	strb	r3, [r7, #31]
 8006f74:	e070      	b.n	8007058 <UART_SetConfig+0x348>
 8006f76:	2308      	movs	r3, #8
 8006f78:	77fb      	strb	r3, [r7, #31]
 8006f7a:	e06d      	b.n	8007058 <UART_SetConfig+0x348>
 8006f7c:	2310      	movs	r3, #16
 8006f7e:	77fb      	strb	r3, [r7, #31]
 8006f80:	e06a      	b.n	8007058 <UART_SetConfig+0x348>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a1b      	ldr	r2, [pc, #108]	; (8006ff4 <UART_SetConfig+0x2e4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d138      	bne.n	8006ffe <UART_SetConfig+0x2ee>
 8006f8c:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <UART_SetConfig+0x2cc>)
 8006f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f9a:	d017      	beq.n	8006fcc <UART_SetConfig+0x2bc>
 8006f9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fa0:	d82a      	bhi.n	8006ff8 <UART_SetConfig+0x2e8>
 8006fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fa6:	d00b      	beq.n	8006fc0 <UART_SetConfig+0x2b0>
 8006fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fac:	d824      	bhi.n	8006ff8 <UART_SetConfig+0x2e8>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <UART_SetConfig+0x2aa>
 8006fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb6:	d006      	beq.n	8006fc6 <UART_SetConfig+0x2b6>
 8006fb8:	e01e      	b.n	8006ff8 <UART_SetConfig+0x2e8>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	77fb      	strb	r3, [r7, #31]
 8006fbe:	e04b      	b.n	8007058 <UART_SetConfig+0x348>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	77fb      	strb	r3, [r7, #31]
 8006fc4:	e048      	b.n	8007058 <UART_SetConfig+0x348>
 8006fc6:	2304      	movs	r3, #4
 8006fc8:	77fb      	strb	r3, [r7, #31]
 8006fca:	e045      	b.n	8007058 <UART_SetConfig+0x348>
 8006fcc:	2308      	movs	r3, #8
 8006fce:	77fb      	strb	r3, [r7, #31]
 8006fd0:	e042      	b.n	8007058 <UART_SetConfig+0x348>
 8006fd2:	bf00      	nop
 8006fd4:	efff69f3 	.word	0xefff69f3
 8006fd8:	40011000 	.word	0x40011000
 8006fdc:	40023800 	.word	0x40023800
 8006fe0:	40004400 	.word	0x40004400
 8006fe4:	40004800 	.word	0x40004800
 8006fe8:	40004c00 	.word	0x40004c00
 8006fec:	40005000 	.word	0x40005000
 8006ff0:	40011400 	.word	0x40011400
 8006ff4:	40007800 	.word	0x40007800
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	77fb      	strb	r3, [r7, #31]
 8006ffc:	e02c      	b.n	8007058 <UART_SetConfig+0x348>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a72      	ldr	r2, [pc, #456]	; (80071cc <UART_SetConfig+0x4bc>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d125      	bne.n	8007054 <UART_SetConfig+0x344>
 8007008:	4b71      	ldr	r3, [pc, #452]	; (80071d0 <UART_SetConfig+0x4c0>)
 800700a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800700e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007012:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007016:	d017      	beq.n	8007048 <UART_SetConfig+0x338>
 8007018:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800701c:	d817      	bhi.n	800704e <UART_SetConfig+0x33e>
 800701e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007022:	d00b      	beq.n	800703c <UART_SetConfig+0x32c>
 8007024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007028:	d811      	bhi.n	800704e <UART_SetConfig+0x33e>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <UART_SetConfig+0x326>
 800702e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007032:	d006      	beq.n	8007042 <UART_SetConfig+0x332>
 8007034:	e00b      	b.n	800704e <UART_SetConfig+0x33e>
 8007036:	2300      	movs	r3, #0
 8007038:	77fb      	strb	r3, [r7, #31]
 800703a:	e00d      	b.n	8007058 <UART_SetConfig+0x348>
 800703c:	2302      	movs	r3, #2
 800703e:	77fb      	strb	r3, [r7, #31]
 8007040:	e00a      	b.n	8007058 <UART_SetConfig+0x348>
 8007042:	2304      	movs	r3, #4
 8007044:	77fb      	strb	r3, [r7, #31]
 8007046:	e007      	b.n	8007058 <UART_SetConfig+0x348>
 8007048:	2308      	movs	r3, #8
 800704a:	77fb      	strb	r3, [r7, #31]
 800704c:	e004      	b.n	8007058 <UART_SetConfig+0x348>
 800704e:	2310      	movs	r3, #16
 8007050:	77fb      	strb	r3, [r7, #31]
 8007052:	e001      	b.n	8007058 <UART_SetConfig+0x348>
 8007054:	2310      	movs	r3, #16
 8007056:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007060:	d15b      	bne.n	800711a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007062:	7ffb      	ldrb	r3, [r7, #31]
 8007064:	2b08      	cmp	r3, #8
 8007066:	d828      	bhi.n	80070ba <UART_SetConfig+0x3aa>
 8007068:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <UART_SetConfig+0x360>)
 800706a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706e:	bf00      	nop
 8007070:	08007095 	.word	0x08007095
 8007074:	0800709d 	.word	0x0800709d
 8007078:	080070a5 	.word	0x080070a5
 800707c:	080070bb 	.word	0x080070bb
 8007080:	080070ab 	.word	0x080070ab
 8007084:	080070bb 	.word	0x080070bb
 8007088:	080070bb 	.word	0x080070bb
 800708c:	080070bb 	.word	0x080070bb
 8007090:	080070b3 	.word	0x080070b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007094:	f7fd fff2 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 8007098:	61b8      	str	r0, [r7, #24]
        break;
 800709a:	e013      	b.n	80070c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800709c:	f7fe f802 	bl	80050a4 <HAL_RCC_GetPCLK2Freq>
 80070a0:	61b8      	str	r0, [r7, #24]
        break;
 80070a2:	e00f      	b.n	80070c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070a4:	4b4b      	ldr	r3, [pc, #300]	; (80071d4 <UART_SetConfig+0x4c4>)
 80070a6:	61bb      	str	r3, [r7, #24]
        break;
 80070a8:	e00c      	b.n	80070c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070aa:	f7fd fed5 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 80070ae:	61b8      	str	r0, [r7, #24]
        break;
 80070b0:	e008      	b.n	80070c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070b6:	61bb      	str	r3, [r7, #24]
        break;
 80070b8:	e004      	b.n	80070c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	77bb      	strb	r3, [r7, #30]
        break;
 80070c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d074      	beq.n	80071b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	005a      	lsls	r2, r3, #1
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	085b      	lsrs	r3, r3, #1
 80070d4:	441a      	add	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	fbb2 f3f3 	udiv	r3, r2, r3
 80070de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	2b0f      	cmp	r3, #15
 80070e4:	d916      	bls.n	8007114 <UART_SetConfig+0x404>
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ec:	d212      	bcs.n	8007114 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f023 030f 	bic.w	r3, r3, #15
 80070f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	085b      	lsrs	r3, r3, #1
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	b29a      	uxth	r2, r3
 8007104:	89fb      	ldrh	r3, [r7, #14]
 8007106:	4313      	orrs	r3, r2
 8007108:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	89fa      	ldrh	r2, [r7, #14]
 8007110:	60da      	str	r2, [r3, #12]
 8007112:	e04f      	b.n	80071b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	77bb      	strb	r3, [r7, #30]
 8007118:	e04c      	b.n	80071b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800711a:	7ffb      	ldrb	r3, [r7, #31]
 800711c:	2b08      	cmp	r3, #8
 800711e:	d828      	bhi.n	8007172 <UART_SetConfig+0x462>
 8007120:	a201      	add	r2, pc, #4	; (adr r2, 8007128 <UART_SetConfig+0x418>)
 8007122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007126:	bf00      	nop
 8007128:	0800714d 	.word	0x0800714d
 800712c:	08007155 	.word	0x08007155
 8007130:	0800715d 	.word	0x0800715d
 8007134:	08007173 	.word	0x08007173
 8007138:	08007163 	.word	0x08007163
 800713c:	08007173 	.word	0x08007173
 8007140:	08007173 	.word	0x08007173
 8007144:	08007173 	.word	0x08007173
 8007148:	0800716b 	.word	0x0800716b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800714c:	f7fd ff96 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 8007150:	61b8      	str	r0, [r7, #24]
        break;
 8007152:	e013      	b.n	800717c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007154:	f7fd ffa6 	bl	80050a4 <HAL_RCC_GetPCLK2Freq>
 8007158:	61b8      	str	r0, [r7, #24]
        break;
 800715a:	e00f      	b.n	800717c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800715c:	4b1d      	ldr	r3, [pc, #116]	; (80071d4 <UART_SetConfig+0x4c4>)
 800715e:	61bb      	str	r3, [r7, #24]
        break;
 8007160:	e00c      	b.n	800717c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007162:	f7fd fe79 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 8007166:	61b8      	str	r0, [r7, #24]
        break;
 8007168:	e008      	b.n	800717c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800716a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800716e:	61bb      	str	r3, [r7, #24]
        break;
 8007170:	e004      	b.n	800717c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	77bb      	strb	r3, [r7, #30]
        break;
 800717a:	bf00      	nop
    }

    if (pclk != 0U)
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d018      	beq.n	80071b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	085a      	lsrs	r2, r3, #1
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	441a      	add	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	fbb2 f3f3 	udiv	r3, r2, r3
 8007194:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	2b0f      	cmp	r3, #15
 800719a:	d909      	bls.n	80071b0 <UART_SetConfig+0x4a0>
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071a2:	d205      	bcs.n	80071b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60da      	str	r2, [r3, #12]
 80071ae:	e001      	b.n	80071b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80071c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3720      	adds	r7, #32
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	40007c00 	.word	0x40007c00
 80071d0:	40023800 	.word	0x40023800
 80071d4:	00f42400 	.word	0x00f42400

080071d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	f003 0304 	and.w	r3, r3, #4
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	f003 0310 	and.w	r3, r3, #16
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00a      	beq.n	800728a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	f003 0320 	and.w	r3, r3, #32
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d01a      	beq.n	80072ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072d6:	d10a      	bne.n	80072ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	430a      	orrs	r2, r1
 800730e:	605a      	str	r2, [r3, #4]
  }
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af02      	add	r7, sp, #8
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800732c:	f7fa fa54 	bl	80017d8 <HAL_GetTick>
 8007330:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0308 	and.w	r3, r3, #8
 800733c:	2b08      	cmp	r3, #8
 800733e:	d10e      	bne.n	800735e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f831 	bl	80073b6 <UART_WaitOnFlagUntilTimeout>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e027      	b.n	80073ae <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b04      	cmp	r3, #4
 800736a:	d10e      	bne.n	800738a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800736c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f81b 	bl	80073b6 <UART_WaitOnFlagUntilTimeout>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e011      	b.n	80073ae <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2220      	movs	r2, #32
 800738e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2220      	movs	r2, #32
 8007394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b09c      	sub	sp, #112	; 0x70
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	603b      	str	r3, [r7, #0]
 80073c2:	4613      	mov	r3, r2
 80073c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073c6:	e0a7      	b.n	8007518 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073ce:	f000 80a3 	beq.w	8007518 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073d2:	f7fa fa01 	bl	80017d8 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073de:	429a      	cmp	r2, r3
 80073e0:	d302      	bcc.n	80073e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80073e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d13f      	bne.n	8007468 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073fc:	667b      	str	r3, [r7, #100]	; 0x64
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007406:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007408:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800740c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e6      	bne.n	80073e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3308      	adds	r3, #8
 8007420:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	f023 0301 	bic.w	r3, r3, #1
 8007430:	663b      	str	r3, [r7, #96]	; 0x60
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3308      	adds	r3, #8
 8007438:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800743a:	64ba      	str	r2, [r7, #72]	; 0x48
 800743c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e5      	bne.n	800741a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2220      	movs	r2, #32
 8007452:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2220      	movs	r2, #32
 8007458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e068      	b.n	800753a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0304 	and.w	r3, r3, #4
 8007472:	2b00      	cmp	r3, #0
 8007474:	d050      	beq.n	8007518 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007484:	d148      	bne.n	8007518 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800748e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ae:	637b      	str	r3, [r7, #52]	; 0x34
 80074b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e6      	bne.n	8007490 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3308      	adds	r3, #8
 80074c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	613b      	str	r3, [r7, #16]
   return(result);
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f023 0301 	bic.w	r3, r3, #1
 80074d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3308      	adds	r3, #8
 80074e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074e2:	623a      	str	r2, [r7, #32]
 80074e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	69f9      	ldr	r1, [r7, #28]
 80074e8:	6a3a      	ldr	r2, [r7, #32]
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e5      	bne.n	80074c2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2220      	movs	r2, #32
 80074fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2220      	movs	r2, #32
 8007500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2220      	movs	r2, #32
 8007508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e010      	b.n	800753a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	69da      	ldr	r2, [r3, #28]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	4013      	ands	r3, r2
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	429a      	cmp	r2, r3
 8007526:	bf0c      	ite	eq
 8007528:	2301      	moveq	r3, #1
 800752a:	2300      	movne	r3, #0
 800752c:	b2db      	uxtb	r3, r3
 800752e:	461a      	mov	r2, r3
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	429a      	cmp	r2, r3
 8007534:	f43f af48 	beq.w	80073c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3770      	adds	r7, #112	; 0x70
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007544:	b084      	sub	sp, #16
 8007546:	b480      	push	{r7}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	f107 001c 	add.w	r0, r7, #28
 8007552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800755a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800755c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800755e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007562:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007566:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800756a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800756e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4313      	orrs	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	4b07      	ldr	r3, [pc, #28]	; (8007598 <SDMMC_Init+0x54>)
 800757c:	4013      	ands	r3, r2
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	431a      	orrs	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	b004      	add	sp, #16
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	ffff8100 	.word	0xffff8100

0800759c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2203      	movs	r2, #3
 80075e4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0303 	and.w	r3, r3, #3
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800762e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007634:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800763a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	4b06      	ldr	r3, [pc, #24]	; (8007660 <SDMMC_SendCommand+0x50>)
 8007648:	4013      	ands	r3, r2
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	fffff000 	.word	0xfffff000

08007664 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	b2db      	uxtb	r3, r3
}
 8007672:	4618      	mov	r0, r3
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800767e:	b480      	push	{r7}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3314      	adds	r3, #20
 800768c:	461a      	mov	r2, r3
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	4413      	add	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
}  
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076ca:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80076d0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80076d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	431a      	orrs	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0

}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b088      	sub	sp, #32
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800770a:	2310      	movs	r3, #16
 800770c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800770e:	2340      	movs	r3, #64	; 0x40
 8007710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800771a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800771c:	f107 0308 	add.w	r3, r7, #8
 8007720:	4619      	mov	r1, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7ff ff74 	bl	8007610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007728:	f241 3288 	movw	r2, #5000	; 0x1388
 800772c:	2110      	movs	r1, #16
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f9d6 	bl	8007ae0 <SDMMC_GetCmdResp1>
 8007734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007736:	69fb      	ldr	r3, [r7, #28]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3720      	adds	r7, #32
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b088      	sub	sp, #32
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800774e:	2311      	movs	r3, #17
 8007750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007752:	2340      	movs	r3, #64	; 0x40
 8007754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007756:	2300      	movs	r3, #0
 8007758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800775a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800775e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007760:	f107 0308 	add.w	r3, r7, #8
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff ff52 	bl	8007610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800776c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007770:	2111      	movs	r1, #17
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f9b4 	bl	8007ae0 <SDMMC_GetCmdResp1>
 8007778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800777a:	69fb      	ldr	r3, [r7, #28]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3720      	adds	r7, #32
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007792:	2312      	movs	r3, #18
 8007794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007796:	2340      	movs	r3, #64	; 0x40
 8007798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800779a:	2300      	movs	r3, #0
 800779c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800779e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077a4:	f107 0308 	add.w	r3, r7, #8
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7ff ff30 	bl	8007610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80077b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b4:	2112      	movs	r1, #18
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f992 	bl	8007ae0 <SDMMC_GetCmdResp1>
 80077bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077be:	69fb      	ldr	r3, [r7, #28]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3720      	adds	r7, #32
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b088      	sub	sp, #32
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80077d6:	2318      	movs	r3, #24
 80077d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077da:	2340      	movs	r3, #64	; 0x40
 80077dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077de:	2300      	movs	r3, #0
 80077e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077e8:	f107 0308 	add.w	r3, r7, #8
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff ff0e 	bl	8007610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80077f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f8:	2118      	movs	r1, #24
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f970 	bl	8007ae0 <SDMMC_GetCmdResp1>
 8007800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007802:	69fb      	ldr	r3, [r7, #28]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3720      	adds	r7, #32
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b088      	sub	sp, #32
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800781a:	2319      	movs	r3, #25
 800781c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800781e:	2340      	movs	r3, #64	; 0x40
 8007820:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007822:	2300      	movs	r3, #0
 8007824:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800782a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800782c:	f107 0308 	add.w	r3, r7, #8
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff feec 	bl	8007610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007838:	f241 3288 	movw	r2, #5000	; 0x1388
 800783c:	2119      	movs	r1, #25
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f94e 	bl	8007ae0 <SDMMC_GetCmdResp1>
 8007844:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007846:	69fb      	ldr	r3, [r7, #28]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3720      	adds	r7, #32
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800785c:	230c      	movs	r3, #12
 800785e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007860:	2340      	movs	r3, #64	; 0x40
 8007862:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007864:	2300      	movs	r3, #0
 8007866:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800786c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800786e:	f107 0308 	add.w	r3, r7, #8
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff fecb 	bl	8007610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800787a:	4a05      	ldr	r2, [pc, #20]	; (8007890 <SDMMC_CmdStopTransfer+0x40>)
 800787c:	210c      	movs	r1, #12
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f92e 	bl	8007ae0 <SDMMC_GetCmdResp1>
 8007884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007886:	69fb      	ldr	r3, [r7, #28]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3720      	adds	r7, #32
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	05f5e100 	.word	0x05f5e100

08007894 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08a      	sub	sp, #40	; 0x28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80078a4:	2307      	movs	r3, #7
 80078a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078a8:	2340      	movs	r3, #64	; 0x40
 80078aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078ac:	2300      	movs	r3, #0
 80078ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078b4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078b6:	f107 0310 	add.w	r3, r7, #16
 80078ba:	4619      	mov	r1, r3
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f7ff fea7 	bl	8007610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80078c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c6:	2107      	movs	r1, #7
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f909 	bl	8007ae0 <SDMMC_GetCmdResp1>
 80078ce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3728      	adds	r7, #40	; 0x28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b088      	sub	sp, #32
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80078e6:	2300      	movs	r3, #0
 80078e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80078ea:	2300      	movs	r3, #0
 80078ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078ee:	2300      	movs	r3, #0
 80078f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078f8:	f107 0308 	add.w	r3, r7, #8
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff fe86 	bl	8007610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fb23 	bl	8007f50 <SDMMC_GetCmdError>
 800790a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800790c:	69fb      	ldr	r3, [r7, #28]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3720      	adds	r7, #32
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b088      	sub	sp, #32
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800791e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007924:	2308      	movs	r3, #8
 8007926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007928:	2340      	movs	r3, #64	; 0x40
 800792a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800792c:	2300      	movs	r3, #0
 800792e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007934:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007936:	f107 0308 	add.w	r3, r7, #8
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7ff fe67 	bl	8007610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fab6 	bl	8007eb4 <SDMMC_GetCmdResp7>
 8007948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800794a:	69fb      	ldr	r3, [r7, #28]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3720      	adds	r7, #32
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b088      	sub	sp, #32
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007962:	2337      	movs	r3, #55	; 0x37
 8007964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007966:	2340      	movs	r3, #64	; 0x40
 8007968:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800796a:	2300      	movs	r3, #0
 800796c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800796e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007972:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007974:	f107 0308 	add.w	r3, r7, #8
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff fe48 	bl	8007610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007980:	f241 3288 	movw	r2, #5000	; 0x1388
 8007984:	2137      	movs	r1, #55	; 0x37
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f8aa 	bl	8007ae0 <SDMMC_GetCmdResp1>
 800798c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800798e:	69fb      	ldr	r3, [r7, #28]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3720      	adds	r7, #32
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	4b0d      	ldr	r3, [pc, #52]	; (80079dc <SDMMC_CmdAppOperCommand+0x44>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80079aa:	2329      	movs	r3, #41	; 0x29
 80079ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079ae:	2340      	movs	r3, #64	; 0x40
 80079b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079bc:	f107 0308 	add.w	r3, r7, #8
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff fe24 	bl	8007610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f9bf 	bl	8007d4c <SDMMC_GetCmdResp3>
 80079ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079d0:	69fb      	ldr	r3, [r7, #28]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	80100000 	.word	0x80100000

080079e0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80079ec:	2302      	movs	r3, #2
 80079ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80079f0:	23c0      	movs	r3, #192	; 0xc0
 80079f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079fe:	f107 0308 	add.w	r3, r7, #8
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff fe03 	bl	8007610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f956 	bl	8007cbc <SDMMC_GetCmdResp2>
 8007a10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a12:	69fb      	ldr	r3, [r7, #28]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3720      	adds	r7, #32
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007a2a:	2309      	movs	r3, #9
 8007a2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007a2e:	23c0      	movs	r3, #192	; 0xc0
 8007a30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a32:	2300      	movs	r3, #0
 8007a34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a3c:	f107 0308 	add.w	r3, r7, #8
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff fde4 	bl	8007610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f937 	bl	8007cbc <SDMMC_GetCmdResp2>
 8007a4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a50:	69fb      	ldr	r3, [r7, #28]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3720      	adds	r7, #32
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b088      	sub	sp, #32
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a6c:	2340      	movs	r3, #64	; 0x40
 8007a6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a70:	2300      	movs	r3, #0
 8007a72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a7a:	f107 0308 	add.w	r3, r7, #8
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff fdc5 	bl	8007610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	2103      	movs	r1, #3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f99c 	bl	8007dc8 <SDMMC_GetCmdResp6>
 8007a90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a92:	69fb      	ldr	r3, [r7, #28]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3720      	adds	r7, #32
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007aaa:	230d      	movs	r3, #13
 8007aac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007aae:	2340      	movs	r3, #64	; 0x40
 8007ab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007abc:	f107 0308 	add.w	r3, r7, #8
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7ff fda4 	bl	8007610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007acc:	210d      	movs	r1, #13
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f806 	bl	8007ae0 <SDMMC_GetCmdResp1>
 8007ad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ad6:	69fb      	ldr	r3, [r7, #28]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3720      	adds	r7, #32
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007aee:	4b70      	ldr	r3, [pc, #448]	; (8007cb0 <SDMMC_GetCmdResp1+0x1d0>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a70      	ldr	r2, [pc, #448]	; (8007cb4 <SDMMC_GetCmdResp1+0x1d4>)
 8007af4:	fba2 2303 	umull	r2, r3, r2, r3
 8007af8:	0a5a      	lsrs	r2, r3, #9
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	fb02 f303 	mul.w	r3, r2, r3
 8007b00:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	1e5a      	subs	r2, r3, #1
 8007b06:	61fa      	str	r2, [r7, #28]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d102      	bne.n	8007b12 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b10:	e0c9      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b16:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0ef      	beq.n	8007b02 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1ea      	bne.n	8007b02 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2204      	movs	r2, #4
 8007b3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b3e:	2304      	movs	r3, #4
 8007b40:	e0b1      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d004      	beq.n	8007b58 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2201      	movs	r2, #1
 8007b52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e0a6      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	22c5      	movs	r2, #197	; 0xc5
 8007b5c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f7ff fd80 	bl	8007664 <SDMMC_GetCommandResponse>
 8007b64:	4603      	mov	r3, r0
 8007b66:	461a      	mov	r2, r3
 8007b68:	7afb      	ldrb	r3, [r7, #11]
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d001      	beq.n	8007b72 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e099      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007b72:	2100      	movs	r1, #0
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f7ff fd82 	bl	800767e <SDMMC_GetResponse>
 8007b7a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	4b4e      	ldr	r3, [pc, #312]	; (8007cb8 <SDMMC_GetCmdResp1+0x1d8>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007b86:	2300      	movs	r3, #0
 8007b88:	e08d      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	da02      	bge.n	8007b96 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007b90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b94:	e087      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007ba0:	2340      	movs	r3, #64	; 0x40
 8007ba2:	e080      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007bae:	2380      	movs	r3, #128	; 0x80
 8007bb0:	e079      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bc0:	e071      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bd0:	e069      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007be0:	e061      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007bec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007bf0:	e059      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c00:	e051      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c10:	e049      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007c1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c20:	e041      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007c2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c30:	e039      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007c3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c40:	e031      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007c4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c50:	e029      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007c5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c60:	e021      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007c6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007c70:	e019      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007c7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c80:	e011      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007c8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007c90:	e009      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f003 0308 	and.w	r3, r3, #8
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007c9c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007ca0:	e001      	b.n	8007ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007ca2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3720      	adds	r7, #32
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	20000000 	.word	0x20000000
 8007cb4:	10624dd3 	.word	0x10624dd3
 8007cb8:	fdffe008 	.word	0xfdffe008

08007cbc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007cc4:	4b1f      	ldr	r3, [pc, #124]	; (8007d44 <SDMMC_GetCmdResp2+0x88>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a1f      	ldr	r2, [pc, #124]	; (8007d48 <SDMMC_GetCmdResp2+0x8c>)
 8007cca:	fba2 2303 	umull	r2, r3, r2, r3
 8007cce:	0a5b      	lsrs	r3, r3, #9
 8007cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cd4:	fb02 f303 	mul.w	r3, r2, r3
 8007cd8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	1e5a      	subs	r2, r3, #1
 8007cde:	60fa      	str	r2, [r7, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ce4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ce8:	e026      	b.n	8007d38 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0ef      	beq.n	8007cda <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1ea      	bne.n	8007cda <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d004      	beq.n	8007d1a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2204      	movs	r2, #4
 8007d14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d16:	2304      	movs	r3, #4
 8007d18:	e00e      	b.n	8007d38 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d004      	beq.n	8007d30 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e003      	b.n	8007d38 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	22c5      	movs	r2, #197	; 0xc5
 8007d34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	20000000 	.word	0x20000000
 8007d48:	10624dd3 	.word	0x10624dd3

08007d4c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d54:	4b1a      	ldr	r3, [pc, #104]	; (8007dc0 <SDMMC_GetCmdResp3+0x74>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a1a      	ldr	r2, [pc, #104]	; (8007dc4 <SDMMC_GetCmdResp3+0x78>)
 8007d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5e:	0a5b      	lsrs	r3, r3, #9
 8007d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d64:	fb02 f303 	mul.w	r3, r2, r3
 8007d68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	1e5a      	subs	r2, r3, #1
 8007d6e:	60fa      	str	r2, [r7, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d102      	bne.n	8007d7a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d78:	e01b      	b.n	8007db2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0ef      	beq.n	8007d6a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1ea      	bne.n	8007d6a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d004      	beq.n	8007daa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2204      	movs	r2, #4
 8007da4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007da6:	2304      	movs	r3, #4
 8007da8:	e003      	b.n	8007db2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	22c5      	movs	r2, #197	; 0xc5
 8007dae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	20000000 	.word	0x20000000
 8007dc4:	10624dd3 	.word	0x10624dd3

08007dc8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b088      	sub	sp, #32
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007dd6:	4b35      	ldr	r3, [pc, #212]	; (8007eac <SDMMC_GetCmdResp6+0xe4>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a35      	ldr	r2, [pc, #212]	; (8007eb0 <SDMMC_GetCmdResp6+0xe8>)
 8007ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8007de0:	0a5b      	lsrs	r3, r3, #9
 8007de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de6:	fb02 f303 	mul.w	r3, r2, r3
 8007dea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	1e5a      	subs	r2, r3, #1
 8007df0:	61fa      	str	r2, [r7, #28]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d102      	bne.n	8007dfc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007df6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007dfa:	e052      	b.n	8007ea2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e00:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0ef      	beq.n	8007dec <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1ea      	bne.n	8007dec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1a:	f003 0304 	and.w	r3, r3, #4
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d004      	beq.n	8007e2c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2204      	movs	r2, #4
 8007e26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e28:	2304      	movs	r3, #4
 8007e2a:	e03a      	b.n	8007ea2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d004      	beq.n	8007e42 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e02f      	b.n	8007ea2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f7ff fc0e 	bl	8007664 <SDMMC_GetCommandResponse>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	7afb      	ldrb	r3, [r7, #11]
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d001      	beq.n	8007e56 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e025      	b.n	8007ea2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	22c5      	movs	r2, #197	; 0xc5
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f7ff fc0d 	bl	800767e <SDMMC_GetResponse>
 8007e64:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d106      	bne.n	8007e7e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	0c1b      	lsrs	r3, r3, #16
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e011      	b.n	8007ea2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e8c:	e009      	b.n	8007ea2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e9c:	e001      	b.n	8007ea2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3720      	adds	r7, #32
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000000 	.word	0x20000000
 8007eb0:	10624dd3 	.word	0x10624dd3

08007eb4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ebc:	4b22      	ldr	r3, [pc, #136]	; (8007f48 <SDMMC_GetCmdResp7+0x94>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a22      	ldr	r2, [pc, #136]	; (8007f4c <SDMMC_GetCmdResp7+0x98>)
 8007ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec6:	0a5b      	lsrs	r3, r3, #9
 8007ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ecc:	fb02 f303 	mul.w	r3, r2, r3
 8007ed0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	1e5a      	subs	r2, r3, #1
 8007ed6:	60fa      	str	r2, [r7, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d102      	bne.n	8007ee2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007edc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ee0:	e02c      	b.n	8007f3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0ef      	beq.n	8007ed2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1ea      	bne.n	8007ed2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f00:	f003 0304 	and.w	r3, r3, #4
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d004      	beq.n	8007f12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2204      	movs	r2, #4
 8007f0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f0e:	2304      	movs	r3, #4
 8007f10:	e014      	b.n	8007f3c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d004      	beq.n	8007f28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e009      	b.n	8007f3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2240      	movs	r2, #64	; 0x40
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007f3a:	2300      	movs	r3, #0
  
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	20000000 	.word	0x20000000
 8007f4c:	10624dd3 	.word	0x10624dd3

08007f50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f58:	4b11      	ldr	r3, [pc, #68]	; (8007fa0 <SDMMC_GetCmdError+0x50>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a11      	ldr	r2, [pc, #68]	; (8007fa4 <SDMMC_GetCmdError+0x54>)
 8007f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f62:	0a5b      	lsrs	r3, r3, #9
 8007f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f68:	fb02 f303 	mul.w	r3, r2, r3
 8007f6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	1e5a      	subs	r2, r3, #1
 8007f72:	60fa      	str	r2, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d102      	bne.n	8007f7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f7c:	e009      	b.n	8007f92 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d0f1      	beq.n	8007f6e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	22c5      	movs	r2, #197	; 0xc5
 8007f8e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	20000000 	.word	0x20000000
 8007fa4:	10624dd3 	.word	0x10624dd3

08007fa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fa8:	b084      	sub	sp, #16
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	f107 001c 	add.w	r0, r7, #28
 8007fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d120      	bne.n	8008002 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68da      	ldr	r2, [r3, #12]
 8007fd0:	4b20      	ldr	r3, [pc, #128]	; (8008054 <USB_CoreInit+0xac>)
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d105      	bne.n	8007ff6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 fbee 	bl	80097d8 <USB_CoreReset>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
 8008000:	e010      	b.n	8008024 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f001 fbe2 	bl	80097d8 <USB_CoreReset>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008026:	2b01      	cmp	r3, #1
 8008028:	d10b      	bne.n	8008042 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f043 0206 	orr.w	r2, r3, #6
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f043 0220 	orr.w	r2, r3, #32
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008042:	7bfb      	ldrb	r3, [r7, #15]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800804e:	b004      	add	sp, #16
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	ffbdffbf 	.word	0xffbdffbf

08008058 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	4613      	mov	r3, r2
 8008064:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008066:	79fb      	ldrb	r3, [r7, #7]
 8008068:	2b02      	cmp	r3, #2
 800806a:	d165      	bne.n	8008138 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4a41      	ldr	r2, [pc, #260]	; (8008174 <USB_SetTurnaroundTime+0x11c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d906      	bls.n	8008082 <USB_SetTurnaroundTime+0x2a>
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	4a40      	ldr	r2, [pc, #256]	; (8008178 <USB_SetTurnaroundTime+0x120>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d202      	bcs.n	8008082 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800807c:	230f      	movs	r3, #15
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	e062      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	4a3c      	ldr	r2, [pc, #240]	; (8008178 <USB_SetTurnaroundTime+0x120>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d306      	bcc.n	8008098 <USB_SetTurnaroundTime+0x40>
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	4a3b      	ldr	r2, [pc, #236]	; (800817c <USB_SetTurnaroundTime+0x124>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d202      	bcs.n	8008098 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008092:	230e      	movs	r3, #14
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	e057      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	4a38      	ldr	r2, [pc, #224]	; (800817c <USB_SetTurnaroundTime+0x124>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d306      	bcc.n	80080ae <USB_SetTurnaroundTime+0x56>
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4a37      	ldr	r2, [pc, #220]	; (8008180 <USB_SetTurnaroundTime+0x128>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d202      	bcs.n	80080ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80080a8:	230d      	movs	r3, #13
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	e04c      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	4a33      	ldr	r2, [pc, #204]	; (8008180 <USB_SetTurnaroundTime+0x128>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d306      	bcc.n	80080c4 <USB_SetTurnaroundTime+0x6c>
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	4a32      	ldr	r2, [pc, #200]	; (8008184 <USB_SetTurnaroundTime+0x12c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d802      	bhi.n	80080c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80080be:	230c      	movs	r3, #12
 80080c0:	617b      	str	r3, [r7, #20]
 80080c2:	e041      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4a2f      	ldr	r2, [pc, #188]	; (8008184 <USB_SetTurnaroundTime+0x12c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d906      	bls.n	80080da <USB_SetTurnaroundTime+0x82>
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4a2e      	ldr	r2, [pc, #184]	; (8008188 <USB_SetTurnaroundTime+0x130>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d802      	bhi.n	80080da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80080d4:	230b      	movs	r3, #11
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	e036      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	4a2a      	ldr	r2, [pc, #168]	; (8008188 <USB_SetTurnaroundTime+0x130>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d906      	bls.n	80080f0 <USB_SetTurnaroundTime+0x98>
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	4a29      	ldr	r2, [pc, #164]	; (800818c <USB_SetTurnaroundTime+0x134>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d802      	bhi.n	80080f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80080ea:	230a      	movs	r3, #10
 80080ec:	617b      	str	r3, [r7, #20]
 80080ee:	e02b      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	4a26      	ldr	r2, [pc, #152]	; (800818c <USB_SetTurnaroundTime+0x134>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d906      	bls.n	8008106 <USB_SetTurnaroundTime+0xae>
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	4a25      	ldr	r2, [pc, #148]	; (8008190 <USB_SetTurnaroundTime+0x138>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d202      	bcs.n	8008106 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008100:	2309      	movs	r3, #9
 8008102:	617b      	str	r3, [r7, #20]
 8008104:	e020      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	4a21      	ldr	r2, [pc, #132]	; (8008190 <USB_SetTurnaroundTime+0x138>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d306      	bcc.n	800811c <USB_SetTurnaroundTime+0xc4>
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	4a20      	ldr	r2, [pc, #128]	; (8008194 <USB_SetTurnaroundTime+0x13c>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d802      	bhi.n	800811c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008116:	2308      	movs	r3, #8
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	e015      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	4a1d      	ldr	r2, [pc, #116]	; (8008194 <USB_SetTurnaroundTime+0x13c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d906      	bls.n	8008132 <USB_SetTurnaroundTime+0xda>
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4a1c      	ldr	r2, [pc, #112]	; (8008198 <USB_SetTurnaroundTime+0x140>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d202      	bcs.n	8008132 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800812c:	2307      	movs	r3, #7
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	e00a      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008132:	2306      	movs	r3, #6
 8008134:	617b      	str	r3, [r7, #20]
 8008136:	e007      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008138:	79fb      	ldrb	r3, [r7, #7]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800813e:	2309      	movs	r3, #9
 8008140:	617b      	str	r3, [r7, #20]
 8008142:	e001      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008144:	2309      	movs	r3, #9
 8008146:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	68da      	ldr	r2, [r3, #12]
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	029b      	lsls	r3, r3, #10
 800815c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008160:	431a      	orrs	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	00d8acbf 	.word	0x00d8acbf
 8008178:	00e4e1c0 	.word	0x00e4e1c0
 800817c:	00f42400 	.word	0x00f42400
 8008180:	01067380 	.word	0x01067380
 8008184:	011a499f 	.word	0x011a499f
 8008188:	01312cff 	.word	0x01312cff
 800818c:	014ca43f 	.word	0x014ca43f
 8008190:	016e3600 	.word	0x016e3600
 8008194:	01a6ab1f 	.word	0x01a6ab1f
 8008198:	01e84800 	.word	0x01e84800

0800819c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f043 0201 	orr.w	r2, r3, #1
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f023 0201 	bic.w	r2, r3, #1
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d115      	bne.n	800822e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800820e:	2001      	movs	r0, #1
 8008210:	f7f9 faee 	bl	80017f0 <HAL_Delay>
      ms++;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3301      	adds	r3, #1
 8008218:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 fa4b 	bl	80096b6 <USB_GetMode>
 8008220:	4603      	mov	r3, r0
 8008222:	2b01      	cmp	r3, #1
 8008224:	d01e      	beq.n	8008264 <USB_SetCurrentMode+0x84>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2b31      	cmp	r3, #49	; 0x31
 800822a:	d9f0      	bls.n	800820e <USB_SetCurrentMode+0x2e>
 800822c:	e01a      	b.n	8008264 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d115      	bne.n	8008260 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008240:	2001      	movs	r0, #1
 8008242:	f7f9 fad5 	bl	80017f0 <HAL_Delay>
      ms++;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3301      	adds	r3, #1
 800824a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 fa32 	bl	80096b6 <USB_GetMode>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d005      	beq.n	8008264 <USB_SetCurrentMode+0x84>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b31      	cmp	r3, #49	; 0x31
 800825c:	d9f0      	bls.n	8008240 <USB_SetCurrentMode+0x60>
 800825e:	e001      	b.n	8008264 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e005      	b.n	8008270 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b32      	cmp	r3, #50	; 0x32
 8008268:	d101      	bne.n	800826e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e000      	b.n	8008270 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008278:	b084      	sub	sp, #16
 800827a:	b580      	push	{r7, lr}
 800827c:	b086      	sub	sp, #24
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008292:	2300      	movs	r3, #0
 8008294:	613b      	str	r3, [r7, #16]
 8008296:	e009      	b.n	80082ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	3340      	adds	r3, #64	; 0x40
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	2200      	movs	r2, #0
 80082a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	3301      	adds	r3, #1
 80082aa:	613b      	str	r3, [r7, #16]
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	2b0e      	cmp	r3, #14
 80082b0:	d9f2      	bls.n	8008298 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80082b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d11c      	bne.n	80082f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082c6:	f043 0302 	orr.w	r3, r3, #2
 80082ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	e005      	b.n	80082fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008304:	461a      	mov	r2, r3
 8008306:	2300      	movs	r3, #0
 8008308:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008310:	4619      	mov	r1, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008318:	461a      	mov	r2, r3
 800831a:	680b      	ldr	r3, [r1, #0]
 800831c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800831e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008320:	2b01      	cmp	r3, #1
 8008322:	d10c      	bne.n	800833e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	2b00      	cmp	r3, #0
 8008328:	d104      	bne.n	8008334 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800832a:	2100      	movs	r1, #0
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f965 	bl	80085fc <USB_SetDevSpeed>
 8008332:	e008      	b.n	8008346 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008334:	2101      	movs	r1, #1
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f960 	bl	80085fc <USB_SetDevSpeed>
 800833c:	e003      	b.n	8008346 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800833e:	2103      	movs	r1, #3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f95b 	bl	80085fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008346:	2110      	movs	r1, #16
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f8f3 	bl	8008534 <USB_FlushTxFifo>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f91f 	bl	800859c <USB_FlushRxFifo>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800836e:	461a      	mov	r2, r3
 8008370:	2300      	movs	r3, #0
 8008372:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837a:	461a      	mov	r2, r3
 800837c:	2300      	movs	r3, #0
 800837e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008386:	461a      	mov	r2, r3
 8008388:	2300      	movs	r3, #0
 800838a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800838c:	2300      	movs	r3, #0
 800838e:	613b      	str	r3, [r7, #16]
 8008390:	e043      	b.n	800841a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	015a      	lsls	r2, r3, #5
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	4413      	add	r3, r2
 800839a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083a8:	d118      	bne.n	80083dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10a      	bne.n	80083c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083bc:	461a      	mov	r2, r3
 80083be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083c2:	6013      	str	r3, [r2, #0]
 80083c4:	e013      	b.n	80083ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d2:	461a      	mov	r2, r3
 80083d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	e008      	b.n	80083ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	015a      	lsls	r2, r3, #5
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	4413      	add	r3, r2
 80083e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e8:	461a      	mov	r2, r3
 80083ea:	2300      	movs	r3, #0
 80083ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083fa:	461a      	mov	r2, r3
 80083fc:	2300      	movs	r3, #0
 80083fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800840c:	461a      	mov	r2, r3
 800840e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008412:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	3301      	adds	r3, #1
 8008418:	613b      	str	r3, [r7, #16]
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	429a      	cmp	r2, r3
 8008420:	d3b7      	bcc.n	8008392 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008422:	2300      	movs	r3, #0
 8008424:	613b      	str	r3, [r7, #16]
 8008426:	e043      	b.n	80084b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800843a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800843e:	d118      	bne.n	8008472 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10a      	bne.n	800845c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	4413      	add	r3, r2
 800844e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008452:	461a      	mov	r2, r3
 8008454:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	e013      	b.n	8008484 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008468:	461a      	mov	r2, r3
 800846a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	e008      	b.n	8008484 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	4413      	add	r3, r2
 800847a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847e:	461a      	mov	r2, r3
 8008480:	2300      	movs	r3, #0
 8008482:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008490:	461a      	mov	r2, r3
 8008492:	2300      	movs	r3, #0
 8008494:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	015a      	lsls	r2, r3, #5
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	4413      	add	r3, r2
 800849e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a2:	461a      	mov	r2, r3
 80084a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	3301      	adds	r3, #1
 80084ae:	613b      	str	r3, [r7, #16]
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d3b7      	bcc.n	8008428 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80084d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80084da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d105      	bne.n	80084ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	f043 0210 	orr.w	r2, r3, #16
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	699a      	ldr	r2, [r3, #24]
 80084f0:	4b0e      	ldr	r3, [pc, #56]	; (800852c <USB_DevInit+0x2b4>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80084f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	f043 0208 	orr.w	r2, r3, #8
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800850a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800850c:	2b01      	cmp	r3, #1
 800850e:	d105      	bne.n	800851c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	699a      	ldr	r2, [r3, #24]
 8008514:	4b06      	ldr	r3, [pc, #24]	; (8008530 <USB_DevInit+0x2b8>)
 8008516:	4313      	orrs	r3, r2
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800851c:	7dfb      	ldrb	r3, [r7, #23]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008528:	b004      	add	sp, #16
 800852a:	4770      	bx	lr
 800852c:	803c3800 	.word	0x803c3800
 8008530:	40000004 	.word	0x40000004

08008534 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3301      	adds	r3, #1
 8008546:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4a13      	ldr	r2, [pc, #76]	; (8008598 <USB_FlushTxFifo+0x64>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d901      	bls.n	8008554 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e01b      	b.n	800858c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	daf2      	bge.n	8008542 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800855c:	2300      	movs	r3, #0
 800855e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	019b      	lsls	r3, r3, #6
 8008564:	f043 0220 	orr.w	r2, r3, #32
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3301      	adds	r3, #1
 8008570:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4a08      	ldr	r2, [pc, #32]	; (8008598 <USB_FlushTxFifo+0x64>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d901      	bls.n	800857e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e006      	b.n	800858c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	f003 0320 	and.w	r3, r3, #32
 8008586:	2b20      	cmp	r3, #32
 8008588:	d0f0      	beq.n	800856c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	00030d40 	.word	0x00030d40

0800859c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	3301      	adds	r3, #1
 80085ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	4a11      	ldr	r2, [pc, #68]	; (80085f8 <USB_FlushRxFifo+0x5c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d901      	bls.n	80085ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e018      	b.n	80085ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	daf2      	bge.n	80085a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2210      	movs	r2, #16
 80085ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3301      	adds	r3, #1
 80085d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	4a08      	ldr	r2, [pc, #32]	; (80085f8 <USB_FlushRxFifo+0x5c>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d901      	bls.n	80085de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e006      	b.n	80085ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	f003 0310 	and.w	r3, r3, #16
 80085e6:	2b10      	cmp	r3, #16
 80085e8:	d0f0      	beq.n	80085cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	00030d40 	.word	0x00030d40

080085fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	68f9      	ldr	r1, [r7, #12]
 8008618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800861c:	4313      	orrs	r3, r2
 800861e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800862e:	b480      	push	{r7}
 8008630:	b087      	sub	sp, #28
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f003 0306 	and.w	r3, r3, #6
 8008646:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d102      	bne.n	8008654 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800864e:	2300      	movs	r3, #0
 8008650:	75fb      	strb	r3, [r7, #23]
 8008652:	e00a      	b.n	800866a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2b02      	cmp	r3, #2
 8008658:	d002      	beq.n	8008660 <USB_GetDevSpeed+0x32>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b06      	cmp	r3, #6
 800865e:	d102      	bne.n	8008666 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008660:	2302      	movs	r3, #2
 8008662:	75fb      	strb	r3, [r7, #23]
 8008664:	e001      	b.n	800866a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008666:	230f      	movs	r3, #15
 8008668:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800866a:	7dfb      	ldrb	r3, [r7, #23]
}
 800866c:	4618      	mov	r0, r3
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	785b      	ldrb	r3, [r3, #1]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d139      	bne.n	8008708 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800869a:	69da      	ldr	r2, [r3, #28]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	f003 030f 	and.w	r3, r3, #15
 80086a4:	2101      	movs	r1, #1
 80086a6:	fa01 f303 	lsl.w	r3, r1, r3
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	68f9      	ldr	r1, [r7, #12]
 80086ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086b2:	4313      	orrs	r3, r2
 80086b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d153      	bne.n	8008774 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	015a      	lsls	r2, r3, #5
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	791b      	ldrb	r3, [r3, #4]
 80086e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	059b      	lsls	r3, r3, #22
 80086ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086f0:	431a      	orrs	r2, r3
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	0159      	lsls	r1, r3, #5
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	440b      	add	r3, r1
 80086fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fe:	4619      	mov	r1, r3
 8008700:	4b20      	ldr	r3, [pc, #128]	; (8008784 <USB_ActivateEndpoint+0x10c>)
 8008702:	4313      	orrs	r3, r2
 8008704:	600b      	str	r3, [r1, #0]
 8008706:	e035      	b.n	8008774 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800870e:	69da      	ldr	r2, [r3, #28]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	f003 030f 	and.w	r3, r3, #15
 8008718:	2101      	movs	r1, #1
 800871a:	fa01 f303 	lsl.w	r3, r1, r3
 800871e:	041b      	lsls	r3, r3, #16
 8008720:	68f9      	ldr	r1, [r7, #12]
 8008722:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008726:	4313      	orrs	r3, r2
 8008728:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	4413      	add	r3, r2
 8008732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d119      	bne.n	8008774 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	4413      	add	r3, r2
 8008748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	791b      	ldrb	r3, [r3, #4]
 800875a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800875c:	430b      	orrs	r3, r1
 800875e:	431a      	orrs	r2, r3
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	0159      	lsls	r1, r3, #5
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	440b      	add	r3, r1
 8008768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876c:	4619      	mov	r1, r3
 800876e:	4b05      	ldr	r3, [pc, #20]	; (8008784 <USB_ActivateEndpoint+0x10c>)
 8008770:	4313      	orrs	r3, r2
 8008772:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	10008000 	.word	0x10008000

08008788 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	785b      	ldrb	r3, [r3, #1]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d161      	bne.n	8008868 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	015a      	lsls	r2, r3, #5
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4413      	add	r3, r2
 80087ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087ba:	d11f      	bne.n	80087fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	0151      	lsls	r1, r2, #5
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	440a      	add	r2, r1
 80087d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	0151      	lsls	r1, r2, #5
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	440a      	add	r2, r1
 80087f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	f003 030f 	and.w	r3, r3, #15
 800880c:	2101      	movs	r1, #1
 800880e:	fa01 f303 	lsl.w	r3, r1, r3
 8008812:	b29b      	uxth	r3, r3
 8008814:	43db      	mvns	r3, r3
 8008816:	68f9      	ldr	r1, [r7, #12]
 8008818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800881c:	4013      	ands	r3, r2
 800881e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008826:	69da      	ldr	r2, [r3, #28]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	f003 030f 	and.w	r3, r3, #15
 8008830:	2101      	movs	r1, #1
 8008832:	fa01 f303 	lsl.w	r3, r1, r3
 8008836:	b29b      	uxth	r3, r3
 8008838:	43db      	mvns	r3, r3
 800883a:	68f9      	ldr	r1, [r7, #12]
 800883c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008840:	4013      	ands	r3, r2
 8008842:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4413      	add	r3, r2
 800884c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	0159      	lsls	r1, r3, #5
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	440b      	add	r3, r1
 800885a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800885e:	4619      	mov	r1, r3
 8008860:	4b35      	ldr	r3, [pc, #212]	; (8008938 <USB_DeactivateEndpoint+0x1b0>)
 8008862:	4013      	ands	r3, r2
 8008864:	600b      	str	r3, [r1, #0]
 8008866:	e060      	b.n	800892a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800887a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800887e:	d11f      	bne.n	80088c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	0151      	lsls	r1, r2, #5
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	440a      	add	r2, r1
 8008896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800889a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800889e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	015a      	lsls	r2, r3, #5
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4413      	add	r3, r2
 80088a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	0151      	lsls	r1, r2, #5
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	440a      	add	r2, r1
 80088b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	f003 030f 	and.w	r3, r3, #15
 80088d0:	2101      	movs	r1, #1
 80088d2:	fa01 f303 	lsl.w	r3, r1, r3
 80088d6:	041b      	lsls	r3, r3, #16
 80088d8:	43db      	mvns	r3, r3
 80088da:	68f9      	ldr	r1, [r7, #12]
 80088dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088e0:	4013      	ands	r3, r2
 80088e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ea:	69da      	ldr	r2, [r3, #28]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	f003 030f 	and.w	r3, r3, #15
 80088f4:	2101      	movs	r1, #1
 80088f6:	fa01 f303 	lsl.w	r3, r1, r3
 80088fa:	041b      	lsls	r3, r3, #16
 80088fc:	43db      	mvns	r3, r3
 80088fe:	68f9      	ldr	r1, [r7, #12]
 8008900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008904:	4013      	ands	r3, r2
 8008906:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	0159      	lsls	r1, r3, #5
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	440b      	add	r3, r1
 800891e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008922:	4619      	mov	r1, r3
 8008924:	4b05      	ldr	r3, [pc, #20]	; (800893c <USB_DeactivateEndpoint+0x1b4>)
 8008926:	4013      	ands	r3, r2
 8008928:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	ec337800 	.word	0xec337800
 800893c:	eff37800 	.word	0xeff37800

08008940 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b08a      	sub	sp, #40	; 0x28
 8008944:	af02      	add	r7, sp, #8
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	4613      	mov	r3, r2
 800894c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	785b      	ldrb	r3, [r3, #1]
 800895c:	2b01      	cmp	r3, #1
 800895e:	f040 8163 	bne.w	8008c28 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d132      	bne.n	80089d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	4413      	add	r3, r2
 8008972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008976:	691a      	ldr	r2, [r3, #16]
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	0159      	lsls	r1, r3, #5
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	440b      	add	r3, r1
 8008980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008984:	4619      	mov	r1, r3
 8008986:	4ba5      	ldr	r3, [pc, #660]	; (8008c1c <USB_EPStartXfer+0x2dc>)
 8008988:	4013      	ands	r3, r2
 800898a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	0151      	lsls	r1, r2, #5
 800899e:	69fa      	ldr	r2, [r7, #28]
 80089a0:	440a      	add	r2, r1
 80089a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b8:	691a      	ldr	r2, [r3, #16]
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	0159      	lsls	r1, r3, #5
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	440b      	add	r3, r1
 80089c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c6:	4619      	mov	r1, r3
 80089c8:	4b95      	ldr	r3, [pc, #596]	; (8008c20 <USB_EPStartXfer+0x2e0>)
 80089ca:	4013      	ands	r3, r2
 80089cc:	610b      	str	r3, [r1, #16]
 80089ce:	e074      	b.n	8008aba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089dc:	691a      	ldr	r2, [r3, #16]
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	0159      	lsls	r1, r3, #5
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	440b      	add	r3, r1
 80089e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ea:	4619      	mov	r1, r3
 80089ec:	4b8c      	ldr	r3, [pc, #560]	; (8008c20 <USB_EPStartXfer+0x2e0>)
 80089ee:	4013      	ands	r3, r2
 80089f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089fe:	691a      	ldr	r2, [r3, #16]
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	0159      	lsls	r1, r3, #5
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	440b      	add	r3, r1
 8008a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4b83      	ldr	r3, [pc, #524]	; (8008c1c <USB_EPStartXfer+0x2dc>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a20:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	6999      	ldr	r1, [r3, #24]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	440b      	add	r3, r1
 8008a2c:	1e59      	subs	r1, r3, #1
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a36:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a38:	4b7a      	ldr	r3, [pc, #488]	; (8008c24 <USB_EPStartXfer+0x2e4>)
 8008a3a:	400b      	ands	r3, r1
 8008a3c:	69b9      	ldr	r1, [r7, #24]
 8008a3e:	0148      	lsls	r0, r1, #5
 8008a40:	69f9      	ldr	r1, [r7, #28]
 8008a42:	4401      	add	r1, r0
 8008a44:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a58:	691a      	ldr	r2, [r3, #16]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a62:	69b9      	ldr	r1, [r7, #24]
 8008a64:	0148      	lsls	r0, r1, #5
 8008a66:	69f9      	ldr	r1, [r7, #28]
 8008a68:	4401      	add	r1, r0
 8008a6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	791b      	ldrb	r3, [r3, #4]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d11f      	bne.n	8008aba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	69ba      	ldr	r2, [r7, #24]
 8008a8a:	0151      	lsls	r1, r2, #5
 8008a8c:	69fa      	ldr	r2, [r7, #28]
 8008a8e:	440a      	add	r2, r1
 8008a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a94:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008a98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	015a      	lsls	r2, r3, #5
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	0151      	lsls	r1, r2, #5
 8008aac:	69fa      	ldr	r2, [r7, #28]
 8008aae:	440a      	add	r2, r1
 8008ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ab8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008aba:	79fb      	ldrb	r3, [r7, #7]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d14b      	bne.n	8008b58 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d009      	beq.n	8008adc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	791b      	ldrb	r3, [r3, #4]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d128      	bne.n	8008b36 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d110      	bne.n	8008b16 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	0151      	lsls	r1, r2, #5
 8008b06:	69fa      	ldr	r2, [r7, #28]
 8008b08:	440a      	add	r2, r1
 8008b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	e00f      	b.n	8008b36 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	015a      	lsls	r2, r3, #5
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	0151      	lsls	r1, r2, #5
 8008b28:	69fa      	ldr	r2, [r7, #28]
 8008b2a:	440a      	add	r2, r1
 8008b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b34:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	015a      	lsls	r2, r3, #5
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	0151      	lsls	r1, r2, #5
 8008b48:	69fa      	ldr	r2, [r7, #28]
 8008b4a:	440a      	add	r2, r1
 8008b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b54:	6013      	str	r3, [r2, #0]
 8008b56:	e137      	b.n	8008dc8 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	69ba      	ldr	r2, [r7, #24]
 8008b68:	0151      	lsls	r1, r2, #5
 8008b6a:	69fa      	ldr	r2, [r7, #28]
 8008b6c:	440a      	add	r2, r1
 8008b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b76:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	791b      	ldrb	r3, [r3, #4]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d015      	beq.n	8008bac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 811f 	beq.w	8008dc8 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	f003 030f 	and.w	r3, r3, #15
 8008b9a:	2101      	movs	r1, #1
 8008b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba0:	69f9      	ldr	r1, [r7, #28]
 8008ba2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	634b      	str	r3, [r1, #52]	; 0x34
 8008baa:	e10d      	b.n	8008dc8 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d110      	bne.n	8008bde <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	015a      	lsls	r2, r3, #5
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	0151      	lsls	r1, r2, #5
 8008bce:	69fa      	ldr	r2, [r7, #28]
 8008bd0:	440a      	add	r2, r1
 8008bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bda:	6013      	str	r3, [r2, #0]
 8008bdc:	e00f      	b.n	8008bfe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	0151      	lsls	r1, r2, #5
 8008bf0:	69fa      	ldr	r2, [r7, #28]
 8008bf2:	440a      	add	r2, r1
 8008bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bfc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	6919      	ldr	r1, [r3, #16]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	781a      	ldrb	r2, [r3, #0]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	b298      	uxth	r0, r3
 8008c0c:	79fb      	ldrb	r3, [r7, #7]
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	4603      	mov	r3, r0
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 faea 	bl	80091ec <USB_WritePacket>
 8008c18:	e0d6      	b.n	8008dc8 <USB_EPStartXfer+0x488>
 8008c1a:	bf00      	nop
 8008c1c:	e007ffff 	.word	0xe007ffff
 8008c20:	fff80000 	.word	0xfff80000
 8008c24:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c34:	691a      	ldr	r2, [r3, #16]
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	0159      	lsls	r1, r3, #5
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	440b      	add	r3, r1
 8008c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c42:	4619      	mov	r1, r3
 8008c44:	4b63      	ldr	r3, [pc, #396]	; (8008dd4 <USB_EPStartXfer+0x494>)
 8008c46:	4013      	ands	r3, r2
 8008c48:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c56:	691a      	ldr	r2, [r3, #16]
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	0159      	lsls	r1, r3, #5
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	440b      	add	r3, r1
 8008c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c64:	4619      	mov	r1, r3
 8008c66:	4b5c      	ldr	r3, [pc, #368]	; (8008dd8 <USB_EPStartXfer+0x498>)
 8008c68:	4013      	ands	r3, r2
 8008c6a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d123      	bne.n	8008cbc <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	015a      	lsls	r2, r3, #5
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c80:	691a      	ldr	r2, [r3, #16]
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c8a:	69b9      	ldr	r1, [r7, #24]
 8008c8c:	0148      	lsls	r0, r1, #5
 8008c8e:	69f9      	ldr	r1, [r7, #28]
 8008c90:	4401      	add	r1, r0
 8008c92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c96:	4313      	orrs	r3, r2
 8008c98:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	0151      	lsls	r1, r2, #5
 8008cac:	69fa      	ldr	r2, [r7, #28]
 8008cae:	440a      	add	r2, r1
 8008cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cb8:	6113      	str	r3, [r2, #16]
 8008cba:	e037      	b.n	8008d2c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	699a      	ldr	r2, [r3, #24]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	1e5a      	subs	r2, r3, #1
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	8afa      	ldrh	r2, [r7, #22]
 8008cd8:	fb03 f202 	mul.w	r2, r3, r2
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cec:	691a      	ldr	r2, [r3, #16]
 8008cee:	8afb      	ldrh	r3, [r7, #22]
 8008cf0:	04d9      	lsls	r1, r3, #19
 8008cf2:	4b3a      	ldr	r3, [pc, #232]	; (8008ddc <USB_EPStartXfer+0x49c>)
 8008cf4:	400b      	ands	r3, r1
 8008cf6:	69b9      	ldr	r1, [r7, #24]
 8008cf8:	0148      	lsls	r0, r1, #5
 8008cfa:	69f9      	ldr	r1, [r7, #28]
 8008cfc:	4401      	add	r1, r0
 8008cfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d02:	4313      	orrs	r3, r2
 8008d04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	015a      	lsls	r2, r3, #5
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d12:	691a      	ldr	r2, [r3, #16]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d1c:	69b9      	ldr	r1, [r7, #24]
 8008d1e:	0148      	lsls	r0, r1, #5
 8008d20:	69f9      	ldr	r1, [r7, #28]
 8008d22:	4401      	add	r1, r0
 8008d24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d10d      	bne.n	8008d4e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d009      	beq.n	8008d4e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	6919      	ldr	r1, [r3, #16]
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	015a      	lsls	r2, r3, #5
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	4413      	add	r3, r2
 8008d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d4a:	460a      	mov	r2, r1
 8008d4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	791b      	ldrb	r3, [r3, #4]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d128      	bne.n	8008da8 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d110      	bne.n	8008d88 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	0151      	lsls	r1, r2, #5
 8008d78:	69fa      	ldr	r2, [r7, #28]
 8008d7a:	440a      	add	r2, r1
 8008d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	e00f      	b.n	8008da8 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	015a      	lsls	r2, r3, #5
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	4413      	add	r3, r2
 8008d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	69ba      	ldr	r2, [r7, #24]
 8008d98:	0151      	lsls	r1, r2, #5
 8008d9a:	69fa      	ldr	r2, [r7, #28]
 8008d9c:	440a      	add	r2, r1
 8008d9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008da6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	69ba      	ldr	r2, [r7, #24]
 8008db8:	0151      	lsls	r1, r2, #5
 8008dba:	69fa      	ldr	r2, [r7, #28]
 8008dbc:	440a      	add	r2, r1
 8008dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008dc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3720      	adds	r7, #32
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	fff80000 	.word	0xfff80000
 8008dd8:	e007ffff 	.word	0xe007ffff
 8008ddc:	1ff80000 	.word	0x1ff80000

08008de0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	4613      	mov	r3, r2
 8008dec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	785b      	ldrb	r3, [r3, #1]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	f040 80ce 	bne.w	8008f9e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d132      	bne.n	8008e70 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e16:	691a      	ldr	r2, [r3, #16]
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	0159      	lsls	r1, r3, #5
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	440b      	add	r3, r1
 8008e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e24:	4619      	mov	r1, r3
 8008e26:	4b9a      	ldr	r3, [pc, #616]	; (8009090 <USB_EP0StartXfer+0x2b0>)
 8008e28:	4013      	ands	r3, r2
 8008e2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	0151      	lsls	r1, r2, #5
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	440a      	add	r2, r1
 8008e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e58:	691a      	ldr	r2, [r3, #16]
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	0159      	lsls	r1, r3, #5
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	440b      	add	r3, r1
 8008e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e66:	4619      	mov	r1, r3
 8008e68:	4b8a      	ldr	r3, [pc, #552]	; (8009094 <USB_EP0StartXfer+0x2b4>)
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	610b      	str	r3, [r1, #16]
 8008e6e:	e04e      	b.n	8008f0e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7c:	691a      	ldr	r2, [r3, #16]
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	0159      	lsls	r1, r3, #5
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	440b      	add	r3, r1
 8008e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	4b81      	ldr	r3, [pc, #516]	; (8009094 <USB_EP0StartXfer+0x2b4>)
 8008e8e:	4013      	ands	r3, r2
 8008e90:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9e:	691a      	ldr	r2, [r3, #16]
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	0159      	lsls	r1, r3, #5
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	440b      	add	r3, r1
 8008ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eac:	4619      	mov	r1, r3
 8008eae:	4b78      	ldr	r3, [pc, #480]	; (8009090 <USB_EP0StartXfer+0x2b0>)
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	699a      	ldr	r2, [r3, #24]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d903      	bls.n	8008ec8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	68da      	ldr	r2, [r3, #12]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	0151      	lsls	r1, r2, #5
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	440a      	add	r2, r1
 8008ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ee2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ee6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef4:	691a      	ldr	r2, [r3, #16]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008efe:	6939      	ldr	r1, [r7, #16]
 8008f00:	0148      	lsls	r0, r1, #5
 8008f02:	6979      	ldr	r1, [r7, #20]
 8008f04:	4401      	add	r1, r0
 8008f06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f0e:	79fb      	ldrb	r3, [r7, #7]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d11e      	bne.n	8008f52 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d009      	beq.n	8008f30 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f28:	461a      	mov	r2, r3
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	0151      	lsls	r1, r2, #5
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	440a      	add	r2, r1
 8008f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f4e:	6013      	str	r3, [r2, #0]
 8008f50:	e097      	b.n	8009082 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	0151      	lsls	r1, r2, #5
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	440a      	add	r2, r1
 8008f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f70:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f000 8083 	beq.w	8009082 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	f003 030f 	and.w	r3, r3, #15
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f92:	6979      	ldr	r1, [r7, #20]
 8008f94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	634b      	str	r3, [r1, #52]	; 0x34
 8008f9c:	e071      	b.n	8009082 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008faa:	691a      	ldr	r2, [r3, #16]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	0159      	lsls	r1, r3, #5
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	440b      	add	r3, r1
 8008fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4b36      	ldr	r3, [pc, #216]	; (8009094 <USB_EP0StartXfer+0x2b4>)
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	015a      	lsls	r2, r3, #5
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fcc:	691a      	ldr	r2, [r3, #16]
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	0159      	lsls	r1, r3, #5
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	440b      	add	r3, r1
 8008fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fda:	4619      	mov	r1, r3
 8008fdc:	4b2c      	ldr	r3, [pc, #176]	; (8009090 <USB_EP0StartXfer+0x2b0>)
 8008fde:	4013      	ands	r3, r2
 8008fe0:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d003      	beq.n	8008ff2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	68da      	ldr	r2, [r3, #12]
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	68da      	ldr	r2, [r3, #12]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	015a      	lsls	r2, r3, #5
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	4413      	add	r3, r2
 8009002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	693a      	ldr	r2, [r7, #16]
 800900a:	0151      	lsls	r1, r2, #5
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	440a      	add	r2, r1
 8009010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009014:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009018:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	015a      	lsls	r2, r3, #5
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	4413      	add	r3, r2
 8009022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009026:	691a      	ldr	r2, [r3, #16]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	69db      	ldr	r3, [r3, #28]
 800902c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009030:	6939      	ldr	r1, [r7, #16]
 8009032:	0148      	lsls	r0, r1, #5
 8009034:	6979      	ldr	r1, [r7, #20]
 8009036:	4401      	add	r1, r0
 8009038:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800903c:	4313      	orrs	r3, r2
 800903e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009040:	79fb      	ldrb	r3, [r7, #7]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d10d      	bne.n	8009062 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d009      	beq.n	8009062 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	6919      	ldr	r1, [r3, #16]
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	015a      	lsls	r2, r3, #5
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	4413      	add	r3, r2
 800905a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905e:	460a      	mov	r2, r1
 8009060:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	4413      	add	r3, r2
 800906a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	0151      	lsls	r1, r2, #5
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	440a      	add	r2, r1
 8009078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800907c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009080:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	371c      	adds	r7, #28
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	e007ffff 	.word	0xe007ffff
 8009094:	fff80000 	.word	0xfff80000

08009098 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009098:	b480      	push	{r7}
 800909a:	b087      	sub	sp, #28
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	785b      	ldrb	r3, [r3, #1]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d14a      	bne.n	800914c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090ce:	f040 8086 	bne.w	80091de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	7812      	ldrb	r2, [r2, #0]
 80090e6:	0151      	lsls	r1, r2, #5
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	440a      	add	r2, r1
 80090ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	015a      	lsls	r2, r3, #5
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	4413      	add	r3, r2
 8009100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	7812      	ldrb	r2, [r2, #0]
 800910a:	0151      	lsls	r1, r2, #5
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	440a      	add	r2, r1
 8009110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009114:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009118:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3301      	adds	r3, #1
 800911e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f242 7210 	movw	r2, #10000	; 0x2710
 8009126:	4293      	cmp	r3, r2
 8009128:	d902      	bls.n	8009130 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	75fb      	strb	r3, [r7, #23]
          break;
 800912e:	e056      	b.n	80091de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	4413      	add	r3, r2
 800913a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009148:	d0e7      	beq.n	800911a <USB_EPStopXfer+0x82>
 800914a:	e048      	b.n	80091de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	4413      	add	r3, r2
 8009156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009164:	d13b      	bne.n	80091de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	4413      	add	r3, r2
 8009170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	7812      	ldrb	r2, [r2, #0]
 800917a:	0151      	lsls	r1, r2, #5
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	440a      	add	r2, r1
 8009180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009184:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009188:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	7812      	ldrb	r2, [r2, #0]
 800919e:	0151      	lsls	r1, r2, #5
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	440a      	add	r2, r1
 80091a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3301      	adds	r3, #1
 80091b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d902      	bls.n	80091c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	75fb      	strb	r3, [r7, #23]
          break;
 80091c2:	e00c      	b.n	80091de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	015a      	lsls	r2, r3, #5
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	4413      	add	r3, r2
 80091ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091dc:	d0e7      	beq.n	80091ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80091de:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	371c      	adds	r7, #28
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b089      	sub	sp, #36	; 0x24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	4611      	mov	r1, r2
 80091f8:	461a      	mov	r2, r3
 80091fa:	460b      	mov	r3, r1
 80091fc:	71fb      	strb	r3, [r7, #7]
 80091fe:	4613      	mov	r3, r2
 8009200:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800920a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800920e:	2b00      	cmp	r3, #0
 8009210:	d123      	bne.n	800925a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009212:	88bb      	ldrh	r3, [r7, #4]
 8009214:	3303      	adds	r3, #3
 8009216:	089b      	lsrs	r3, r3, #2
 8009218:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800921a:	2300      	movs	r3, #0
 800921c:	61bb      	str	r3, [r7, #24]
 800921e:	e018      	b.n	8009252 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009220:	79fb      	ldrb	r3, [r7, #7]
 8009222:	031a      	lsls	r2, r3, #12
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	4413      	add	r3, r2
 8009228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922c:	461a      	mov	r2, r3
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	3301      	adds	r3, #1
 8009238:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	3301      	adds	r3, #1
 800923e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	3301      	adds	r3, #1
 8009244:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	3301      	adds	r3, #1
 800924a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	3301      	adds	r3, #1
 8009250:	61bb      	str	r3, [r7, #24]
 8009252:	69ba      	ldr	r2, [r7, #24]
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	429a      	cmp	r2, r3
 8009258:	d3e2      	bcc.n	8009220 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3724      	adds	r7, #36	; 0x24
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009268:	b480      	push	{r7}
 800926a:	b08b      	sub	sp, #44	; 0x2c
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	4613      	mov	r3, r2
 8009274:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800927e:	88fb      	ldrh	r3, [r7, #6]
 8009280:	089b      	lsrs	r3, r3, #2
 8009282:	b29b      	uxth	r3, r3
 8009284:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009286:	88fb      	ldrh	r3, [r7, #6]
 8009288:	f003 0303 	and.w	r3, r3, #3
 800928c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800928e:	2300      	movs	r3, #0
 8009290:	623b      	str	r3, [r7, #32]
 8009292:	e014      	b.n	80092be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	601a      	str	r2, [r3, #0]
    pDest++;
 80092a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a2:	3301      	adds	r3, #1
 80092a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a8:	3301      	adds	r3, #1
 80092aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	3301      	adds	r3, #1
 80092b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b4:	3301      	adds	r3, #1
 80092b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	3301      	adds	r3, #1
 80092bc:	623b      	str	r3, [r7, #32]
 80092be:	6a3a      	ldr	r2, [r7, #32]
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d3e6      	bcc.n	8009294 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80092c6:	8bfb      	ldrh	r3, [r7, #30]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d01e      	beq.n	800930a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80092cc:	2300      	movs	r3, #0
 80092ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092d6:	461a      	mov	r2, r3
 80092d8:	f107 0310 	add.w	r3, r7, #16
 80092dc:	6812      	ldr	r2, [r2, #0]
 80092de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	fa22 f303 	lsr.w	r3, r2, r3
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f0:	701a      	strb	r2, [r3, #0]
      i++;
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	3301      	adds	r3, #1
 80092f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	3301      	adds	r3, #1
 80092fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80092fe:	8bfb      	ldrh	r3, [r7, #30]
 8009300:	3b01      	subs	r3, #1
 8009302:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009304:	8bfb      	ldrh	r3, [r7, #30]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1ea      	bne.n	80092e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800930c:	4618      	mov	r0, r3
 800930e:	372c      	adds	r7, #44	; 0x2c
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	785b      	ldrb	r3, [r3, #1]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d12c      	bne.n	800938e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	db12      	blt.n	800936c <USB_EPSetStall+0x54>
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00f      	beq.n	800936c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4413      	add	r3, r2
 8009354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	0151      	lsls	r1, r2, #5
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	440a      	add	r2, r1
 8009362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009366:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800936a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4413      	add	r3, r2
 8009374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	0151      	lsls	r1, r2, #5
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	440a      	add	r2, r1
 8009382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009386:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800938a:	6013      	str	r3, [r2, #0]
 800938c:	e02b      	b.n	80093e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	4413      	add	r3, r2
 8009396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	db12      	blt.n	80093c6 <USB_EPSetStall+0xae>
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00f      	beq.n	80093c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	015a      	lsls	r2, r3, #5
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	4413      	add	r3, r2
 80093ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	0151      	lsls	r1, r2, #5
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	440a      	add	r2, r1
 80093bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80093c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	015a      	lsls	r2, r3, #5
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	4413      	add	r3, r2
 80093ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	0151      	lsls	r1, r2, #5
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	440a      	add	r2, r1
 80093dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	785b      	ldrb	r3, [r3, #1]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d128      	bne.n	8009462 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4413      	add	r3, r2
 8009418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	0151      	lsls	r1, r2, #5
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	440a      	add	r2, r1
 8009426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800942a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800942e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	791b      	ldrb	r3, [r3, #4]
 8009434:	2b03      	cmp	r3, #3
 8009436:	d003      	beq.n	8009440 <USB_EPClearStall+0x4c>
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	791b      	ldrb	r3, [r3, #4]
 800943c:	2b02      	cmp	r3, #2
 800943e:	d138      	bne.n	80094b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	015a      	lsls	r2, r3, #5
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4413      	add	r3, r2
 8009448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	0151      	lsls	r1, r2, #5
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	440a      	add	r2, r1
 8009456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800945a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	e027      	b.n	80094b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	015a      	lsls	r2, r3, #5
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	4413      	add	r3, r2
 800946a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	0151      	lsls	r1, r2, #5
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	440a      	add	r2, r1
 8009478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800947c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009480:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	791b      	ldrb	r3, [r3, #4]
 8009486:	2b03      	cmp	r3, #3
 8009488:	d003      	beq.n	8009492 <USB_EPClearStall+0x9e>
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	791b      	ldrb	r3, [r3, #4]
 800948e:	2b02      	cmp	r3, #2
 8009490:	d10f      	bne.n	80094b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	015a      	lsls	r2, r3, #5
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	4413      	add	r3, r2
 800949a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	0151      	lsls	r1, r2, #5
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	440a      	add	r2, r1
 80094a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80094e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	78fb      	ldrb	r3, [r7, #3]
 80094ee:	011b      	lsls	r3, r3, #4
 80094f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80094f4:	68f9      	ldr	r1, [r7, #12]
 80094f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094fa:	4313      	orrs	r3, r2
 80094fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009526:	f023 0303 	bic.w	r3, r3, #3
 800952a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800953a:	f023 0302 	bic.w	r3, r3, #2
 800953e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800954e:	b480      	push	{r7}
 8009550:	b085      	sub	sp, #20
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009568:	f023 0303 	bic.w	r3, r3, #3
 800956c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800957c:	f043 0302 	orr.w	r3, r3, #2
 8009580:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	4013      	ands	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80095a8:	68fb      	ldr	r3, [r7, #12]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b085      	sub	sp, #20
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d2:	69db      	ldr	r3, [r3, #28]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	4013      	ands	r3, r2
 80095d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	0c1b      	lsrs	r3, r3, #16
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b085      	sub	sp, #20
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009606:	69db      	ldr	r3, [r3, #28]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	4013      	ands	r3, r2
 800960c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	b29b      	uxth	r3, r3
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800961e:	b480      	push	{r7}
 8009620:	b085      	sub	sp, #20
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	460b      	mov	r3, r1
 8009628:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800962e:	78fb      	ldrb	r3, [r7, #3]
 8009630:	015a      	lsls	r2, r3, #5
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	4413      	add	r3, r2
 8009636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	4013      	ands	r3, r2
 800964a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800964c:	68bb      	ldr	r3, [r7, #8]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800965a:	b480      	push	{r7}
 800965c:	b087      	sub	sp, #28
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	460b      	mov	r3, r1
 8009664:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800967a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800967e:	78fb      	ldrb	r3, [r7, #3]
 8009680:	f003 030f 	and.w	r3, r3, #15
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	fa22 f303 	lsr.w	r3, r2, r3
 800968a:	01db      	lsls	r3, r3, #7
 800968c:	b2db      	uxtb	r3, r3
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	4313      	orrs	r3, r2
 8009692:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	015a      	lsls	r2, r3, #5
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	4413      	add	r3, r2
 800969c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	4013      	ands	r3, r2
 80096a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80096a8:	68bb      	ldr	r3, [r7, #8]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	371c      	adds	r7, #28
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	f003 0301 	and.w	r3, r3, #1
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
	...

080096d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ee:	4619      	mov	r1, r3
 80096f0:	4b09      	ldr	r3, [pc, #36]	; (8009718 <USB_ActivateSetup+0x44>)
 80096f2:	4013      	ands	r3, r2
 80096f4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009708:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	fffff800 	.word	0xfffff800

0800971c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	460b      	mov	r3, r1
 8009726:	607a      	str	r2, [r7, #4]
 8009728:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	333c      	adds	r3, #60	; 0x3c
 8009732:	3304      	adds	r3, #4
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	4a26      	ldr	r2, [pc, #152]	; (80097d4 <USB_EP0_OutStart+0xb8>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d90a      	bls.n	8009756 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800974c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009750:	d101      	bne.n	8009756 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	e037      	b.n	80097c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975c:	461a      	mov	r2, r3
 800975e:	2300      	movs	r3, #0
 8009760:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	697a      	ldr	r2, [r7, #20]
 8009780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009784:	f043 0318 	orr.w	r3, r3, #24
 8009788:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009798:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800979c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800979e:	7afb      	ldrb	r3, [r7, #11]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d10f      	bne.n	80097c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097aa:	461a      	mov	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80097c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	4f54300a 	.word	0x4f54300a

080097d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	3301      	adds	r3, #1
 80097e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4a13      	ldr	r2, [pc, #76]	; (800983c <USB_CoreReset+0x64>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d901      	bls.n	80097f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e01b      	b.n	800982e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	daf2      	bge.n	80097e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80097fe:	2300      	movs	r3, #0
 8009800:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	f043 0201 	orr.w	r2, r3, #1
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	3301      	adds	r3, #1
 8009812:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4a09      	ldr	r2, [pc, #36]	; (800983c <USB_CoreReset+0x64>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d901      	bls.n	8009820 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800981c:	2303      	movs	r3, #3
 800981e:	e006      	b.n	800982e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	f003 0301 	and.w	r3, r3, #1
 8009828:	2b01      	cmp	r3, #1
 800982a:	d0f0      	beq.n	800980e <USB_CoreReset+0x36>

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3714      	adds	r7, #20
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	00030d40 	.word	0x00030d40

08009840 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009844:	4904      	ldr	r1, [pc, #16]	; (8009858 <MX_FATFS_Init+0x18>)
 8009846:	4805      	ldr	r0, [pc, #20]	; (800985c <MX_FATFS_Init+0x1c>)
 8009848:	f005 fa82 	bl	800ed50 <FATFS_LinkDriver>
 800984c:	4603      	mov	r3, r0
 800984e:	461a      	mov	r2, r3
 8009850:	4b03      	ldr	r3, [pc, #12]	; (8009860 <MX_FATFS_Init+0x20>)
 8009852:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009854:	bf00      	nop
 8009856:	bd80      	pop	{r7, pc}
 8009858:	20002de4 	.word	0x20002de4
 800985c:	08011260 	.word	0x08011260
 8009860:	20002de0 	.word	0x20002de0

08009864 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009864:	b480      	push	{r7}
 8009866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009868:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800986a:	4618      	mov	r0, r3
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800987e:	f000 f888 	bl	8009992 <BSP_SD_IsDetected>
 8009882:	4603      	mov	r3, r0
 8009884:	2b01      	cmp	r3, #1
 8009886:	d001      	beq.n	800988c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009888:	2302      	movs	r3, #2
 800988a:	e005      	b.n	8009898 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800988c:	4804      	ldr	r0, [pc, #16]	; (80098a0 <BSP_SD_Init+0x2c>)
 800988e:	f7fc f845 	bl	800591c <HAL_SD_Init>
 8009892:	4603      	mov	r3, r0
 8009894:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009896:	79fb      	ldrb	r3, [r7, #7]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	200001ac 	.word	0x200001ac

080098a4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	68f9      	ldr	r1, [r7, #12]
 80098ba:	4806      	ldr	r0, [pc, #24]	; (80098d4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80098bc:	f7fc f8e6 	bl	8005a8c <HAL_SD_ReadBlocks_DMA>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80098ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	200001ac 	.word	0x200001ac

080098d8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	68f9      	ldr	r1, [r7, #12]
 80098ee:	4806      	ldr	r0, [pc, #24]	; (8009908 <BSP_SD_WriteBlocks_DMA+0x30>)
 80098f0:	f7fc f9ae 	bl	8005c50 <HAL_SD_WriteBlocks_DMA>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3718      	adds	r7, #24
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	200001ac 	.word	0x200001ac

0800990c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009910:	4805      	ldr	r0, [pc, #20]	; (8009928 <BSP_SD_GetCardState+0x1c>)
 8009912:	f7fc fdd3 	bl	80064bc <HAL_SD_GetCardState>
 8009916:	4603      	mov	r3, r0
 8009918:	2b04      	cmp	r3, #4
 800991a:	bf14      	ite	ne
 800991c:	2301      	movne	r3, #1
 800991e:	2300      	moveq	r3, #0
 8009920:	b2db      	uxtb	r3, r3
}
 8009922:	4618      	mov	r0, r3
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	200001ac 	.word	0x200001ac

0800992c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009934:	6879      	ldr	r1, [r7, #4]
 8009936:	4803      	ldr	r0, [pc, #12]	; (8009944 <BSP_SD_GetCardInfo+0x18>)
 8009938:	f7fc fd94 	bl	8006464 <HAL_SD_GetCardInfo>
}
 800993c:	bf00      	nop
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	200001ac 	.word	0x200001ac

08009948 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009950:	f000 f818 	bl	8009984 <BSP_SD_AbortCallback>
}
 8009954:	bf00      	nop
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009964:	f000 f9a8 	bl	8009cb8 <BSP_SD_WriteCpltCallback>
}
 8009968:	bf00      	nop
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009978:	f000 f9aa 	bl	8009cd0 <BSP_SD_ReadCpltCallback>
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009984:	b480      	push	{r7}
 8009986:	af00      	add	r7, sp, #0

}
 8009988:	bf00      	nop
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b082      	sub	sp, #8
 8009996:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009998:	2301      	movs	r3, #1
 800999a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800999c:	f000 f80c 	bl	80099b8 <BSP_PlatformIsDetected>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d101      	bne.n	80099aa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80099a6:	2300      	movs	r3, #0
 80099a8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80099aa:	79fb      	ldrb	r3, [r7, #7]
 80099ac:	b2db      	uxtb	r3, r3
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80099be:	2301      	movs	r3, #1
 80099c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 80099c2:	2104      	movs	r1, #4
 80099c4:	4806      	ldr	r0, [pc, #24]	; (80099e0 <BSP_PlatformIsDetected+0x28>)
 80099c6:	f7f9 fb9f 	bl	8003108 <HAL_GPIO_ReadPin>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d001      	beq.n	80099d4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80099d0:	2300      	movs	r3, #0
 80099d2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80099d4:	79fb      	ldrb	r3, [r7, #7]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	40021800 	.word	0x40021800

080099e4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80099ec:	f7f7 fef4 	bl	80017d8 <HAL_GetTick>
 80099f0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80099f2:	e006      	b.n	8009a02 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80099f4:	f7ff ff8a 	bl	800990c <BSP_SD_GetCardState>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d101      	bne.n	8009a02 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	e009      	b.n	8009a16 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009a02:	f7f7 fee9 	bl	80017d8 <HAL_GetTick>
 8009a06:	4602      	mov	r2, r0
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	1ad3      	subs	r3, r2, r3
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d8f0      	bhi.n	80099f4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009a2a:	4b0b      	ldr	r3, [pc, #44]	; (8009a58 <SD_CheckStatus+0x38>)
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009a30:	f7ff ff6c 	bl	800990c <BSP_SD_GetCardState>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d107      	bne.n	8009a4a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009a3a:	4b07      	ldr	r3, [pc, #28]	; (8009a58 <SD_CheckStatus+0x38>)
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	f023 0301 	bic.w	r3, r3, #1
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	4b04      	ldr	r3, [pc, #16]	; (8009a58 <SD_CheckStatus+0x38>)
 8009a48:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009a4a:	4b03      	ldr	r3, [pc, #12]	; (8009a58 <SD_CheckStatus+0x38>)
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	b2db      	uxtb	r3, r3
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20000009 	.word	0x20000009

08009a5c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4603      	mov	r3, r0
 8009a64:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009a66:	f7ff ff05 	bl	8009874 <BSP_SD_Init>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d107      	bne.n	8009a80 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009a70:	79fb      	ldrb	r3, [r7, #7]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7ff ffd4 	bl	8009a20 <SD_CheckStatus>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	4b04      	ldr	r3, [pc, #16]	; (8009a90 <SD_initialize+0x34>)
 8009a7e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009a80:	4b03      	ldr	r3, [pc, #12]	; (8009a90 <SD_initialize+0x34>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	b2db      	uxtb	r3, r3
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000009 	.word	0x20000009

08009a94 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009a9e:	79fb      	ldrb	r3, [r7, #7]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7ff ffbd 	bl	8009a20 <SD_CheckStatus>
 8009aa6:	4603      	mov	r3, r0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60b9      	str	r1, [r7, #8]
 8009ab8:	607a      	str	r2, [r7, #4]
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	4603      	mov	r3, r0
 8009abe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009ac4:	f247 5030 	movw	r0, #30000	; 0x7530
 8009ac8:	f7ff ff8c 	bl	80099e4 <SD_CheckStatusWithTimeout>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	da01      	bge.n	8009ad6 <SD_read+0x26>
  {
    return res;
 8009ad2:	7dfb      	ldrb	r3, [r7, #23]
 8009ad4:	e03b      	b.n	8009b4e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	6879      	ldr	r1, [r7, #4]
 8009ada:	68b8      	ldr	r0, [r7, #8]
 8009adc:	f7ff fee2 	bl	80098a4 <BSP_SD_ReadBlocks_DMA>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d132      	bne.n	8009b4c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009ae6:	4b1c      	ldr	r3, [pc, #112]	; (8009b58 <SD_read+0xa8>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009aec:	f7f7 fe74 	bl	80017d8 <HAL_GetTick>
 8009af0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009af2:	bf00      	nop
 8009af4:	4b18      	ldr	r3, [pc, #96]	; (8009b58 <SD_read+0xa8>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d108      	bne.n	8009b0e <SD_read+0x5e>
 8009afc:	f7f7 fe6c 	bl	80017d8 <HAL_GetTick>
 8009b00:	4602      	mov	r2, r0
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	f247 522f 	movw	r2, #29999	; 0x752f
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d9f2      	bls.n	8009af4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009b0e:	4b12      	ldr	r3, [pc, #72]	; (8009b58 <SD_read+0xa8>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d102      	bne.n	8009b1c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	75fb      	strb	r3, [r7, #23]
 8009b1a:	e017      	b.n	8009b4c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009b1c:	4b0e      	ldr	r3, [pc, #56]	; (8009b58 <SD_read+0xa8>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009b22:	f7f7 fe59 	bl	80017d8 <HAL_GetTick>
 8009b26:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009b28:	e007      	b.n	8009b3a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b2a:	f7ff feef 	bl	800990c <BSP_SD_GetCardState>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d102      	bne.n	8009b3a <SD_read+0x8a>
          {
            res = RES_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009b38:	e008      	b.n	8009b4c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009b3a:	f7f7 fe4d 	bl	80017d8 <HAL_GetTick>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	f247 522f 	movw	r2, #29999	; 0x752f
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d9ee      	bls.n	8009b2a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20003250 	.word	0x20003250

08009b5c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	607a      	str	r2, [r7, #4]
 8009b66:	603b      	str	r3, [r7, #0]
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009b70:	4b24      	ldr	r3, [pc, #144]	; (8009c04 <SD_write+0xa8>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009b76:	f247 5030 	movw	r0, #30000	; 0x7530
 8009b7a:	f7ff ff33 	bl	80099e4 <SD_CheckStatusWithTimeout>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	da01      	bge.n	8009b88 <SD_write+0x2c>
  {
    return res;
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
 8009b86:	e038      	b.n	8009bfa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	6879      	ldr	r1, [r7, #4]
 8009b8c:	68b8      	ldr	r0, [r7, #8]
 8009b8e:	f7ff fea3 	bl	80098d8 <BSP_SD_WriteBlocks_DMA>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d12f      	bne.n	8009bf8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009b98:	f7f7 fe1e 	bl	80017d8 <HAL_GetTick>
 8009b9c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009b9e:	bf00      	nop
 8009ba0:	4b18      	ldr	r3, [pc, #96]	; (8009c04 <SD_write+0xa8>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d108      	bne.n	8009bba <SD_write+0x5e>
 8009ba8:	f7f7 fe16 	bl	80017d8 <HAL_GetTick>
 8009bac:	4602      	mov	r2, r0
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	f247 522f 	movw	r2, #29999	; 0x752f
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d9f2      	bls.n	8009ba0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009bba:	4b12      	ldr	r3, [pc, #72]	; (8009c04 <SD_write+0xa8>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d102      	bne.n	8009bc8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	75fb      	strb	r3, [r7, #23]
 8009bc6:	e017      	b.n	8009bf8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009bc8:	4b0e      	ldr	r3, [pc, #56]	; (8009c04 <SD_write+0xa8>)
 8009bca:	2200      	movs	r2, #0
 8009bcc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009bce:	f7f7 fe03 	bl	80017d8 <HAL_GetTick>
 8009bd2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009bd4:	e007      	b.n	8009be6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009bd6:	f7ff fe99 	bl	800990c <BSP_SD_GetCardState>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d102      	bne.n	8009be6 <SD_write+0x8a>
          {
            res = RES_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	75fb      	strb	r3, [r7, #23]
            break;
 8009be4:	e008      	b.n	8009bf8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009be6:	f7f7 fdf7 	bl	80017d8 <HAL_GetTick>
 8009bea:	4602      	mov	r2, r0
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	f247 522f 	movw	r2, #29999	; 0x752f
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d9ee      	bls.n	8009bd6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3718      	adds	r7, #24
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	2000324c 	.word	0x2000324c

08009c08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b08c      	sub	sp, #48	; 0x30
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	603a      	str	r2, [r7, #0]
 8009c12:	71fb      	strb	r3, [r7, #7]
 8009c14:	460b      	mov	r3, r1
 8009c16:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009c1e:	4b25      	ldr	r3, [pc, #148]	; (8009cb4 <SD_ioctl+0xac>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	f003 0301 	and.w	r3, r3, #1
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <SD_ioctl+0x28>
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	e03c      	b.n	8009caa <SD_ioctl+0xa2>

  switch (cmd)
 8009c30:	79bb      	ldrb	r3, [r7, #6]
 8009c32:	2b03      	cmp	r3, #3
 8009c34:	d834      	bhi.n	8009ca0 <SD_ioctl+0x98>
 8009c36:	a201      	add	r2, pc, #4	; (adr r2, 8009c3c <SD_ioctl+0x34>)
 8009c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3c:	08009c4d 	.word	0x08009c4d
 8009c40:	08009c55 	.word	0x08009c55
 8009c44:	08009c6d 	.word	0x08009c6d
 8009c48:	08009c87 	.word	0x08009c87
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c52:	e028      	b.n	8009ca6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009c54:	f107 030c 	add.w	r3, r7, #12
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff fe67 	bl	800992c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c6a:	e01c      	b.n	8009ca6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009c6c:	f107 030c 	add.w	r3, r7, #12
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff fe5b 	bl	800992c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c84:	e00f      	b.n	8009ca6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009c86:	f107 030c 	add.w	r3, r7, #12
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7ff fe4e 	bl	800992c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	0a5a      	lsrs	r2, r3, #9
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c9e:	e002      	b.n	8009ca6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3730      	adds	r7, #48	; 0x30
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20000009 	.word	0x20000009

08009cb8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009cbc:	4b03      	ldr	r3, [pc, #12]	; (8009ccc <BSP_SD_WriteCpltCallback+0x14>)
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	601a      	str	r2, [r3, #0]
}
 8009cc2:	bf00      	nop
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	2000324c 	.word	0x2000324c

08009cd0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009cd4:	4b03      	ldr	r3, [pc, #12]	; (8009ce4 <BSP_SD_ReadCpltCallback+0x14>)
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	601a      	str	r2, [r3, #0]
}
 8009cda:	bf00      	nop
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	20003250 	.word	0x20003250

08009ce8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009cf4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009cf8:	f005 fe86 	bl	800fa08 <malloc>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d109      	bne.n	8009d1a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	32b0      	adds	r2, #176	; 0xb0
 8009d10:	2100      	movs	r1, #0
 8009d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009d16:	2302      	movs	r3, #2
 8009d18:	e0d4      	b.n	8009ec4 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009d1a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009d1e:	2100      	movs	r1, #0
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f006 f92c 	bl	800ff7e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	32b0      	adds	r2, #176	; 0xb0
 8009d30:	68f9      	ldr	r1, [r7, #12]
 8009d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	32b0      	adds	r2, #176	; 0xb0
 8009d40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	7c1b      	ldrb	r3, [r3, #16]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d138      	bne.n	8009dc4 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009d52:	4b5e      	ldr	r3, [pc, #376]	; (8009ecc <USBD_CDC_Init+0x1e4>)
 8009d54:	7819      	ldrb	r1, [r3, #0]
 8009d56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f005 fcb0 	bl	800f6c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009d62:	4b5a      	ldr	r3, [pc, #360]	; (8009ecc <USBD_CDC_Init+0x1e4>)
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	f003 020f 	and.w	r2, r3, #15
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	440b      	add	r3, r1
 8009d76:	3324      	adds	r3, #36	; 0x24
 8009d78:	2201      	movs	r2, #1
 8009d7a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009d7c:	4b54      	ldr	r3, [pc, #336]	; (8009ed0 <USBD_CDC_Init+0x1e8>)
 8009d7e:	7819      	ldrb	r1, [r3, #0]
 8009d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d84:	2202      	movs	r2, #2
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f005 fc9b 	bl	800f6c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009d8c:	4b50      	ldr	r3, [pc, #320]	; (8009ed0 <USBD_CDC_Init+0x1e8>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	f003 020f 	and.w	r2, r3, #15
 8009d94:	6879      	ldr	r1, [r7, #4]
 8009d96:	4613      	mov	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	440b      	add	r3, r1
 8009da0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009da4:	2201      	movs	r2, #1
 8009da6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009da8:	4b4a      	ldr	r3, [pc, #296]	; (8009ed4 <USBD_CDC_Init+0x1ec>)
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	f003 020f 	and.w	r2, r3, #15
 8009db0:	6879      	ldr	r1, [r7, #4]
 8009db2:	4613      	mov	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	440b      	add	r3, r1
 8009dbc:	3326      	adds	r3, #38	; 0x26
 8009dbe:	2210      	movs	r2, #16
 8009dc0:	801a      	strh	r2, [r3, #0]
 8009dc2:	e035      	b.n	8009e30 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009dc4:	4b41      	ldr	r3, [pc, #260]	; (8009ecc <USBD_CDC_Init+0x1e4>)
 8009dc6:	7819      	ldrb	r1, [r3, #0]
 8009dc8:	2340      	movs	r3, #64	; 0x40
 8009dca:	2202      	movs	r2, #2
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f005 fc78 	bl	800f6c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009dd2:	4b3e      	ldr	r3, [pc, #248]	; (8009ecc <USBD_CDC_Init+0x1e4>)
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	f003 020f 	and.w	r2, r3, #15
 8009dda:	6879      	ldr	r1, [r7, #4]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	440b      	add	r3, r1
 8009de6:	3324      	adds	r3, #36	; 0x24
 8009de8:	2201      	movs	r2, #1
 8009dea:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009dec:	4b38      	ldr	r3, [pc, #224]	; (8009ed0 <USBD_CDC_Init+0x1e8>)
 8009dee:	7819      	ldrb	r1, [r3, #0]
 8009df0:	2340      	movs	r3, #64	; 0x40
 8009df2:	2202      	movs	r2, #2
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f005 fc64 	bl	800f6c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009dfa:	4b35      	ldr	r3, [pc, #212]	; (8009ed0 <USBD_CDC_Init+0x1e8>)
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	f003 020f 	and.w	r2, r3, #15
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	440b      	add	r3, r1
 8009e0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e12:	2201      	movs	r2, #1
 8009e14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009e16:	4b2f      	ldr	r3, [pc, #188]	; (8009ed4 <USBD_CDC_Init+0x1ec>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	f003 020f 	and.w	r2, r3, #15
 8009e1e:	6879      	ldr	r1, [r7, #4]
 8009e20:	4613      	mov	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	440b      	add	r3, r1
 8009e2a:	3326      	adds	r3, #38	; 0x26
 8009e2c:	2210      	movs	r2, #16
 8009e2e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009e30:	4b28      	ldr	r3, [pc, #160]	; (8009ed4 <USBD_CDC_Init+0x1ec>)
 8009e32:	7819      	ldrb	r1, [r3, #0]
 8009e34:	2308      	movs	r3, #8
 8009e36:	2203      	movs	r2, #3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f005 fc42 	bl	800f6c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009e3e:	4b25      	ldr	r3, [pc, #148]	; (8009ed4 <USBD_CDC_Init+0x1ec>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	f003 020f 	and.w	r2, r3, #15
 8009e46:	6879      	ldr	r1, [r7, #4]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	440b      	add	r3, r1
 8009e52:	3324      	adds	r3, #36	; 0x24
 8009e54:	2201      	movs	r2, #1
 8009e56:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	33b0      	adds	r3, #176	; 0xb0
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d101      	bne.n	8009e92 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8009e8e:	2302      	movs	r3, #2
 8009e90:	e018      	b.n	8009ec4 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	7c1b      	ldrb	r3, [r3, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10a      	bne.n	8009eb0 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e9a:	4b0d      	ldr	r3, [pc, #52]	; (8009ed0 <USBD_CDC_Init+0x1e8>)
 8009e9c:	7819      	ldrb	r1, [r3, #0]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f005 fcf9 	bl	800f8a0 <USBD_LL_PrepareReceive>
 8009eae:	e008      	b.n	8009ec2 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009eb0:	4b07      	ldr	r3, [pc, #28]	; (8009ed0 <USBD_CDC_Init+0x1e8>)
 8009eb2:	7819      	ldrb	r1, [r3, #0]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009eba:	2340      	movs	r3, #64	; 0x40
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f005 fcef 	bl	800f8a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	20000093 	.word	0x20000093
 8009ed0:	20000094 	.word	0x20000094
 8009ed4:	20000095 	.word	0x20000095

08009ed8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009ee4:	4b3a      	ldr	r3, [pc, #232]	; (8009fd0 <USBD_CDC_DeInit+0xf8>)
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	4619      	mov	r1, r3
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f005 fc0f 	bl	800f70e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009ef0:	4b37      	ldr	r3, [pc, #220]	; (8009fd0 <USBD_CDC_DeInit+0xf8>)
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	f003 020f 	and.w	r2, r3, #15
 8009ef8:	6879      	ldr	r1, [r7, #4]
 8009efa:	4613      	mov	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4413      	add	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	440b      	add	r3, r1
 8009f04:	3324      	adds	r3, #36	; 0x24
 8009f06:	2200      	movs	r2, #0
 8009f08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009f0a:	4b32      	ldr	r3, [pc, #200]	; (8009fd4 <USBD_CDC_DeInit+0xfc>)
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f005 fbfc 	bl	800f70e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009f16:	4b2f      	ldr	r3, [pc, #188]	; (8009fd4 <USBD_CDC_DeInit+0xfc>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	f003 020f 	and.w	r2, r3, #15
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	4613      	mov	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	440b      	add	r3, r1
 8009f2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f2e:	2200      	movs	r2, #0
 8009f30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009f32:	4b29      	ldr	r3, [pc, #164]	; (8009fd8 <USBD_CDC_DeInit+0x100>)
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	4619      	mov	r1, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f005 fbe8 	bl	800f70e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009f3e:	4b26      	ldr	r3, [pc, #152]	; (8009fd8 <USBD_CDC_DeInit+0x100>)
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	f003 020f 	and.w	r2, r3, #15
 8009f46:	6879      	ldr	r1, [r7, #4]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4413      	add	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	440b      	add	r3, r1
 8009f52:	3324      	adds	r3, #36	; 0x24
 8009f54:	2200      	movs	r2, #0
 8009f56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009f58:	4b1f      	ldr	r3, [pc, #124]	; (8009fd8 <USBD_CDC_DeInit+0x100>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	f003 020f 	and.w	r2, r3, #15
 8009f60:	6879      	ldr	r1, [r7, #4]
 8009f62:	4613      	mov	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	440b      	add	r3, r1
 8009f6c:	3326      	adds	r3, #38	; 0x26
 8009f6e:	2200      	movs	r2, #0
 8009f70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	32b0      	adds	r2, #176	; 0xb0
 8009f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d01f      	beq.n	8009fc4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	33b0      	adds	r3, #176	; 0xb0
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	32b0      	adds	r2, #176	; 0xb0
 8009fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f005 fd36 	bl	800fa18 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	32b0      	adds	r2, #176	; 0xb0
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	20000093 	.word	0x20000093
 8009fd4:	20000094 	.word	0x20000094
 8009fd8:	20000095 	.word	0x20000095

08009fdc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	32b0      	adds	r2, #176	; 0xb0
 8009ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ff4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a008:	2303      	movs	r3, #3
 800a00a:	e0bf      	b.n	800a18c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a014:	2b00      	cmp	r3, #0
 800a016:	d050      	beq.n	800a0ba <USBD_CDC_Setup+0xde>
 800a018:	2b20      	cmp	r3, #32
 800a01a:	f040 80af 	bne.w	800a17c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	88db      	ldrh	r3, [r3, #6]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d03a      	beq.n	800a09c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	b25b      	sxtb	r3, r3
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	da1b      	bge.n	800a068 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	33b0      	adds	r3, #176	; 0xb0
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a046:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	88d2      	ldrh	r2, [r2, #6]
 800a04c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	88db      	ldrh	r3, [r3, #6]
 800a052:	2b07      	cmp	r3, #7
 800a054:	bf28      	it	cs
 800a056:	2307      	movcs	r3, #7
 800a058:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	89fa      	ldrh	r2, [r7, #14]
 800a05e:	4619      	mov	r1, r3
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 fdad 	bl	800bbc0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a066:	e090      	b.n	800a18a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	785a      	ldrb	r2, [r3, #1]
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	88db      	ldrh	r3, [r3, #6]
 800a076:	2b3f      	cmp	r3, #63	; 0x3f
 800a078:	d803      	bhi.n	800a082 <USBD_CDC_Setup+0xa6>
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	88db      	ldrh	r3, [r3, #6]
 800a07e:	b2da      	uxtb	r2, r3
 800a080:	e000      	b.n	800a084 <USBD_CDC_Setup+0xa8>
 800a082:	2240      	movs	r2, #64	; 0x40
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a08a:	6939      	ldr	r1, [r7, #16]
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a092:	461a      	mov	r2, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f001 fdbf 	bl	800bc18 <USBD_CtlPrepareRx>
      break;
 800a09a:	e076      	b.n	800a18a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	33b0      	adds	r3, #176	; 0xb0
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4413      	add	r3, r2
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	7850      	ldrb	r0, [r2, #1]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	4798      	blx	r3
      break;
 800a0b8:	e067      	b.n	800a18a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	785b      	ldrb	r3, [r3, #1]
 800a0be:	2b0b      	cmp	r3, #11
 800a0c0:	d851      	bhi.n	800a166 <USBD_CDC_Setup+0x18a>
 800a0c2:	a201      	add	r2, pc, #4	; (adr r2, 800a0c8 <USBD_CDC_Setup+0xec>)
 800a0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c8:	0800a0f9 	.word	0x0800a0f9
 800a0cc:	0800a175 	.word	0x0800a175
 800a0d0:	0800a167 	.word	0x0800a167
 800a0d4:	0800a167 	.word	0x0800a167
 800a0d8:	0800a167 	.word	0x0800a167
 800a0dc:	0800a167 	.word	0x0800a167
 800a0e0:	0800a167 	.word	0x0800a167
 800a0e4:	0800a167 	.word	0x0800a167
 800a0e8:	0800a167 	.word	0x0800a167
 800a0ec:	0800a167 	.word	0x0800a167
 800a0f0:	0800a123 	.word	0x0800a123
 800a0f4:	0800a14d 	.word	0x0800a14d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	2b03      	cmp	r3, #3
 800a102:	d107      	bne.n	800a114 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a104:	f107 030a 	add.w	r3, r7, #10
 800a108:	2202      	movs	r2, #2
 800a10a:	4619      	mov	r1, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 fd57 	bl	800bbc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a112:	e032      	b.n	800a17a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a114:	6839      	ldr	r1, [r7, #0]
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f001 fce1 	bl	800bade <USBD_CtlError>
            ret = USBD_FAIL;
 800a11c:	2303      	movs	r3, #3
 800a11e:	75fb      	strb	r3, [r7, #23]
          break;
 800a120:	e02b      	b.n	800a17a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b03      	cmp	r3, #3
 800a12c:	d107      	bne.n	800a13e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a12e:	f107 030d 	add.w	r3, r7, #13
 800a132:	2201      	movs	r2, #1
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f001 fd42 	bl	800bbc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a13c:	e01d      	b.n	800a17a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a13e:	6839      	ldr	r1, [r7, #0]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f001 fccc 	bl	800bade <USBD_CtlError>
            ret = USBD_FAIL;
 800a146:	2303      	movs	r3, #3
 800a148:	75fb      	strb	r3, [r7, #23]
          break;
 800a14a:	e016      	b.n	800a17a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b03      	cmp	r3, #3
 800a156:	d00f      	beq.n	800a178 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a158:	6839      	ldr	r1, [r7, #0]
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f001 fcbf 	bl	800bade <USBD_CtlError>
            ret = USBD_FAIL;
 800a160:	2303      	movs	r3, #3
 800a162:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a164:	e008      	b.n	800a178 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f001 fcb8 	bl	800bade <USBD_CtlError>
          ret = USBD_FAIL;
 800a16e:	2303      	movs	r3, #3
 800a170:	75fb      	strb	r3, [r7, #23]
          break;
 800a172:	e002      	b.n	800a17a <USBD_CDC_Setup+0x19e>
          break;
 800a174:	bf00      	nop
 800a176:	e008      	b.n	800a18a <USBD_CDC_Setup+0x1ae>
          break;
 800a178:	bf00      	nop
      }
      break;
 800a17a:	e006      	b.n	800a18a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f001 fcad 	bl	800bade <USBD_CtlError>
      ret = USBD_FAIL;
 800a184:	2303      	movs	r3, #3
 800a186:	75fb      	strb	r3, [r7, #23]
      break;
 800a188:	bf00      	nop
  }

  return (uint8_t)ret;
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	460b      	mov	r3, r1
 800a19e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	32b0      	adds	r2, #176	; 0xb0
 800a1b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	e065      	b.n	800a28a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	32b0      	adds	r2, #176	; 0xb0
 800a1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a1ce:	78fb      	ldrb	r3, [r7, #3]
 800a1d0:	f003 020f 	and.w	r2, r3, #15
 800a1d4:	6879      	ldr	r1, [r7, #4]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	440b      	add	r3, r1
 800a1e0:	3318      	adds	r3, #24
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d02f      	beq.n	800a248 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a1e8:	78fb      	ldrb	r3, [r7, #3]
 800a1ea:	f003 020f 	and.w	r2, r3, #15
 800a1ee:	6879      	ldr	r1, [r7, #4]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	440b      	add	r3, r1
 800a1fa:	3318      	adds	r3, #24
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	78fb      	ldrb	r3, [r7, #3]
 800a200:	f003 010f 	and.w	r1, r3, #15
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	460b      	mov	r3, r1
 800a208:	00db      	lsls	r3, r3, #3
 800a20a:	440b      	add	r3, r1
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4403      	add	r3, r0
 800a210:	3348      	adds	r3, #72	; 0x48
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	fbb2 f1f3 	udiv	r1, r2, r3
 800a218:	fb01 f303 	mul.w	r3, r1, r3
 800a21c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d112      	bne.n	800a248 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a222:	78fb      	ldrb	r3, [r7, #3]
 800a224:	f003 020f 	and.w	r2, r3, #15
 800a228:	6879      	ldr	r1, [r7, #4]
 800a22a:	4613      	mov	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	440b      	add	r3, r1
 800a234:	3318      	adds	r3, #24
 800a236:	2200      	movs	r2, #0
 800a238:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a23a:	78f9      	ldrb	r1, [r7, #3]
 800a23c:	2300      	movs	r3, #0
 800a23e:	2200      	movs	r2, #0
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f005 fb0c 	bl	800f85e <USBD_LL_Transmit>
 800a246:	e01f      	b.n	800a288 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	33b0      	adds	r3, #176	; 0xb0
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d010      	beq.n	800a288 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	33b0      	adds	r3, #176	; 0xb0
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4413      	add	r3, r2
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a284:	78fa      	ldrb	r2, [r7, #3]
 800a286:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	460b      	mov	r3, r1
 800a29c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	32b0      	adds	r2, #176	; 0xb0
 800a2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	32b0      	adds	r2, #176	; 0xb0
 800a2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d101      	bne.n	800a2c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e01a      	b.n	800a2fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a2c4:	78fb      	ldrb	r3, [r7, #3]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f005 fb0a 	bl	800f8e2 <USBD_LL_GetRxDataSize>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	33b0      	adds	r3, #176	; 0xb0
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4413      	add	r3, r2
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b084      	sub	sp, #16
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	32b0      	adds	r2, #176	; 0xb0
 800a314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a318:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a320:	2303      	movs	r3, #3
 800a322:	e025      	b.n	800a370 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	33b0      	adds	r3, #176	; 0xb0
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d01a      	beq.n	800a36e <USBD_CDC_EP0_RxReady+0x6c>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a33e:	2bff      	cmp	r3, #255	; 0xff
 800a340:	d015      	beq.n	800a36e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	33b0      	adds	r3, #176	; 0xb0
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4413      	add	r3, r2
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a35a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a362:	b292      	uxth	r2, r2
 800a364:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	22ff      	movs	r2, #255	; 0xff
 800a36a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a380:	2182      	movs	r1, #130	; 0x82
 800a382:	4818      	ldr	r0, [pc, #96]	; (800a3e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a384:	f000 fd49 	bl	800ae1a <USBD_GetEpDesc>
 800a388:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a38a:	2101      	movs	r1, #1
 800a38c:	4815      	ldr	r0, [pc, #84]	; (800a3e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a38e:	f000 fd44 	bl	800ae1a <USBD_GetEpDesc>
 800a392:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a394:	2181      	movs	r1, #129	; 0x81
 800a396:	4813      	ldr	r0, [pc, #76]	; (800a3e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a398:	f000 fd3f 	bl	800ae1a <USBD_GetEpDesc>
 800a39c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	2210      	movs	r2, #16
 800a3a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d006      	beq.n	800a3be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3b8:	711a      	strb	r2, [r3, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d006      	beq.n	800a3d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3cc:	711a      	strb	r2, [r3, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2243      	movs	r2, #67	; 0x43
 800a3d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3d8:	4b02      	ldr	r3, [pc, #8]	; (800a3e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20000050 	.word	0x20000050

0800a3e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b086      	sub	sp, #24
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a3f0:	2182      	movs	r1, #130	; 0x82
 800a3f2:	4818      	ldr	r0, [pc, #96]	; (800a454 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a3f4:	f000 fd11 	bl	800ae1a <USBD_GetEpDesc>
 800a3f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a3fa:	2101      	movs	r1, #1
 800a3fc:	4815      	ldr	r0, [pc, #84]	; (800a454 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a3fe:	f000 fd0c 	bl	800ae1a <USBD_GetEpDesc>
 800a402:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a404:	2181      	movs	r1, #129	; 0x81
 800a406:	4813      	ldr	r0, [pc, #76]	; (800a454 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a408:	f000 fd07 	bl	800ae1a <USBD_GetEpDesc>
 800a40c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	2210      	movs	r2, #16
 800a418:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d006      	beq.n	800a42e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	2200      	movs	r2, #0
 800a424:	711a      	strb	r2, [r3, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	f042 0202 	orr.w	r2, r2, #2
 800a42c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d006      	beq.n	800a442 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	711a      	strb	r2, [r3, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f042 0202 	orr.w	r2, r2, #2
 800a440:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2243      	movs	r2, #67	; 0x43
 800a446:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a448:	4b02      	ldr	r3, [pc, #8]	; (800a454 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3718      	adds	r7, #24
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	20000050 	.word	0x20000050

0800a458 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a460:	2182      	movs	r1, #130	; 0x82
 800a462:	4818      	ldr	r0, [pc, #96]	; (800a4c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a464:	f000 fcd9 	bl	800ae1a <USBD_GetEpDesc>
 800a468:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a46a:	2101      	movs	r1, #1
 800a46c:	4815      	ldr	r0, [pc, #84]	; (800a4c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a46e:	f000 fcd4 	bl	800ae1a <USBD_GetEpDesc>
 800a472:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a474:	2181      	movs	r1, #129	; 0x81
 800a476:	4813      	ldr	r0, [pc, #76]	; (800a4c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a478:	f000 fccf 	bl	800ae1a <USBD_GetEpDesc>
 800a47c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d002      	beq.n	800a48a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	2210      	movs	r2, #16
 800a488:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d006      	beq.n	800a49e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	2200      	movs	r2, #0
 800a494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a498:	711a      	strb	r2, [r3, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d006      	beq.n	800a4b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4ac:	711a      	strb	r2, [r3, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2243      	movs	r2, #67	; 0x43
 800a4b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a4b8:	4b02      	ldr	r3, [pc, #8]	; (800a4c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3718      	adds	r7, #24
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	20000050 	.word	0x20000050

0800a4c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	220a      	movs	r2, #10
 800a4d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a4d6:	4b03      	ldr	r3, [pc, #12]	; (800a4e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr
 800a4e4:	2000000c 	.word	0x2000000c

0800a4e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	e009      	b.n	800a510 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	33b0      	adds	r3, #176	; 0xb0
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4413      	add	r3, r2
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	32b0      	adds	r2, #176	; 0xb0
 800a532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a536:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d101      	bne.n	800a542 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a53e:	2303      	movs	r3, #3
 800a540:	e008      	b.n	800a554 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	68ba      	ldr	r2, [r7, #8]
 800a546:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	371c      	adds	r7, #28
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	32b0      	adds	r2, #176	; 0xb0
 800a574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a578:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d101      	bne.n	800a584 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a580:	2303      	movs	r3, #3
 800a582:	e004      	b.n	800a58e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
	...

0800a59c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	32b0      	adds	r2, #176	; 0xb0
 800a5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d101      	bne.n	800a5c2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	e025      	b.n	800a60e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d11f      	bne.n	800a60c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a5d4:	4b10      	ldr	r3, [pc, #64]	; (800a618 <USBD_CDC_TransmitPacket+0x7c>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	f003 020f 	and.w	r2, r3, #15
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4403      	add	r3, r0
 800a5ee:	3318      	adds	r3, #24
 800a5f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a5f2:	4b09      	ldr	r3, [pc, #36]	; (800a618 <USBD_CDC_TransmitPacket+0x7c>)
 800a5f4:	7819      	ldrb	r1, [r3, #0]
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f005 f92b 	bl	800f85e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	20000093 	.word	0x20000093

0800a61c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	32b0      	adds	r2, #176	; 0xb0
 800a62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a632:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	32b0      	adds	r2, #176	; 0xb0
 800a63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d101      	bne.n	800a64a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a646:	2303      	movs	r3, #3
 800a648:	e018      	b.n	800a67c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	7c1b      	ldrb	r3, [r3, #16]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d10a      	bne.n	800a668 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a652:	4b0c      	ldr	r3, [pc, #48]	; (800a684 <USBD_CDC_ReceivePacket+0x68>)
 800a654:	7819      	ldrb	r1, [r3, #0]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a65c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f005 f91d 	bl	800f8a0 <USBD_LL_PrepareReceive>
 800a666:	e008      	b.n	800a67a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a668:	4b06      	ldr	r3, [pc, #24]	; (800a684 <USBD_CDC_ReceivePacket+0x68>)
 800a66a:	7819      	ldrb	r1, [r3, #0]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a672:	2340      	movs	r3, #64	; 0x40
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f005 f913 	bl	800f8a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	20000094 	.word	0x20000094

0800a688 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	4613      	mov	r3, r2
 800a694:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e01f      	b.n	800a6e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d003      	beq.n	800a6c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	79fa      	ldrb	r2, [r7, #7]
 800a6d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f004 ff8d 	bl	800f5f4 <USBD_LL_Init>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a6de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e025      	b.n	800a74c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	32ae      	adds	r2, #174	; 0xae
 800a712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00f      	beq.n	800a73c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	32ae      	adds	r2, #174	; 0xae
 800a726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72c:	f107 020e 	add.w	r2, r7, #14
 800a730:	4610      	mov	r0, r2
 800a732:	4798      	blx	r3
 800a734:	4602      	mov	r2, r0
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a742:	1c5a      	adds	r2, r3, #1
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f004 ff95 	bl	800f68c <USBD_LL_Start>
 800a762:	4603      	mov	r3, r0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a774:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a776:	4618      	mov	r0, r3
 800a778:	370c      	adds	r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr

0800a782 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b084      	sub	sp, #16
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	460b      	mov	r3, r1
 800a78c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d009      	beq.n	800a7b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	78fa      	ldrb	r2, [r7, #3]
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	4798      	blx	r3
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b084      	sub	sp, #16
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	78fa      	ldrb	r2, [r7, #3]
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	4798      	blx	r3
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	4618      	mov	r0, r3
 800a802:	f001 f932 	bl	800ba6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2201      	movs	r2, #1
 800a80a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a814:	461a      	mov	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a822:	f003 031f 	and.w	r3, r3, #31
 800a826:	2b02      	cmp	r3, #2
 800a828:	d01a      	beq.n	800a860 <USBD_LL_SetupStage+0x72>
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d822      	bhi.n	800a874 <USBD_LL_SetupStage+0x86>
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d002      	beq.n	800a838 <USBD_LL_SetupStage+0x4a>
 800a832:	2b01      	cmp	r3, #1
 800a834:	d00a      	beq.n	800a84c <USBD_LL_SetupStage+0x5e>
 800a836:	e01d      	b.n	800a874 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a83e:	4619      	mov	r1, r3
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 fb5f 	bl	800af04 <USBD_StdDevReq>
 800a846:	4603      	mov	r3, r0
 800a848:	73fb      	strb	r3, [r7, #15]
      break;
 800a84a:	e020      	b.n	800a88e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fbc7 	bl	800afe8 <USBD_StdItfReq>
 800a85a:	4603      	mov	r3, r0
 800a85c:	73fb      	strb	r3, [r7, #15]
      break;
 800a85e:	e016      	b.n	800a88e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fc29 	bl	800b0c0 <USBD_StdEPReq>
 800a86e:	4603      	mov	r3, r0
 800a870:	73fb      	strb	r3, [r7, #15]
      break;
 800a872:	e00c      	b.n	800a88e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a87a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	4619      	mov	r1, r3
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f004 ff62 	bl	800f74c <USBD_LL_StallEP>
 800a888:	4603      	mov	r3, r0
 800a88a:	73fb      	strb	r3, [r7, #15]
      break;
 800a88c:	bf00      	nop
  }

  return ret;
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b086      	sub	sp, #24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	607a      	str	r2, [r7, #4]
 800a8a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a8aa:	7afb      	ldrb	r3, [r7, #11]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d16e      	bne.n	800a98e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a8b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8be:	2b03      	cmp	r3, #3
 800a8c0:	f040 8098 	bne.w	800a9f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	689a      	ldr	r2, [r3, #8]
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d913      	bls.n	800a8f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	689a      	ldr	r2, [r3, #8]
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	1ad2      	subs	r2, r2, r3
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	68da      	ldr	r2, [r3, #12]
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	bf28      	it	cs
 800a8ea:	4613      	movcs	r3, r2
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	6879      	ldr	r1, [r7, #4]
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f001 f9ae 	bl	800bc52 <USBD_CtlContinueRx>
 800a8f6:	e07d      	b.n	800a9f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a8fe:	f003 031f 	and.w	r3, r3, #31
 800a902:	2b02      	cmp	r3, #2
 800a904:	d014      	beq.n	800a930 <USBD_LL_DataOutStage+0x98>
 800a906:	2b02      	cmp	r3, #2
 800a908:	d81d      	bhi.n	800a946 <USBD_LL_DataOutStage+0xae>
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d002      	beq.n	800a914 <USBD_LL_DataOutStage+0x7c>
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d003      	beq.n	800a91a <USBD_LL_DataOutStage+0x82>
 800a912:	e018      	b.n	800a946 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a914:	2300      	movs	r3, #0
 800a916:	75bb      	strb	r3, [r7, #22]
            break;
 800a918:	e018      	b.n	800a94c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a920:	b2db      	uxtb	r3, r3
 800a922:	4619      	mov	r1, r3
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f000 fa5e 	bl	800ade6 <USBD_CoreFindIF>
 800a92a:	4603      	mov	r3, r0
 800a92c:	75bb      	strb	r3, [r7, #22]
            break;
 800a92e:	e00d      	b.n	800a94c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a936:	b2db      	uxtb	r3, r3
 800a938:	4619      	mov	r1, r3
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f000 fa60 	bl	800ae00 <USBD_CoreFindEP>
 800a940:	4603      	mov	r3, r0
 800a942:	75bb      	strb	r3, [r7, #22]
            break;
 800a944:	e002      	b.n	800a94c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a946:	2300      	movs	r3, #0
 800a948:	75bb      	strb	r3, [r7, #22]
            break;
 800a94a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a94c:	7dbb      	ldrb	r3, [r7, #22]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d119      	bne.n	800a986 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d113      	bne.n	800a986 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a95e:	7dba      	ldrb	r2, [r7, #22]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	32ae      	adds	r2, #174	; 0xae
 800a964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00b      	beq.n	800a986 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a96e:	7dba      	ldrb	r2, [r7, #22]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a976:	7dba      	ldrb	r2, [r7, #22]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	32ae      	adds	r2, #174	; 0xae
 800a97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f001 f974 	bl	800bc74 <USBD_CtlSendStatus>
 800a98c:	e032      	b.n	800a9f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a98e:	7afb      	ldrb	r3, [r7, #11]
 800a990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a994:	b2db      	uxtb	r3, r3
 800a996:	4619      	mov	r1, r3
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f000 fa31 	bl	800ae00 <USBD_CoreFindEP>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9a2:	7dbb      	ldrb	r3, [r7, #22]
 800a9a4:	2bff      	cmp	r3, #255	; 0xff
 800a9a6:	d025      	beq.n	800a9f4 <USBD_LL_DataOutStage+0x15c>
 800a9a8:	7dbb      	ldrb	r3, [r7, #22]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d122      	bne.n	800a9f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b03      	cmp	r3, #3
 800a9b8:	d117      	bne.n	800a9ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a9ba:	7dba      	ldrb	r2, [r7, #22]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	32ae      	adds	r2, #174	; 0xae
 800a9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00f      	beq.n	800a9ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a9ca:	7dba      	ldrb	r2, [r7, #22]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a9d2:	7dba      	ldrb	r2, [r7, #22]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	32ae      	adds	r2, #174	; 0xae
 800a9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	7afa      	ldrb	r2, [r7, #11]
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	4798      	blx	r3
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a9ea:	7dfb      	ldrb	r3, [r7, #23]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a9f0:	7dfb      	ldrb	r3, [r7, #23]
 800a9f2:	e000      	b.n	800a9f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3718      	adds	r7, #24
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b086      	sub	sp, #24
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	60f8      	str	r0, [r7, #12]
 800aa06:	460b      	mov	r3, r1
 800aa08:	607a      	str	r2, [r7, #4]
 800aa0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800aa0c:	7afb      	ldrb	r3, [r7, #11]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d16f      	bne.n	800aaf2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	3314      	adds	r3, #20
 800aa16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d15a      	bne.n	800aad8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	689a      	ldr	r2, [r3, #8]
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d914      	bls.n	800aa58 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	689a      	ldr	r2, [r3, #8]
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	1ad2      	subs	r2, r2, r3
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	461a      	mov	r2, r3
 800aa42:	6879      	ldr	r1, [r7, #4]
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f001 f8d6 	bl	800bbf6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	2100      	movs	r1, #0
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f004 ff25 	bl	800f8a0 <USBD_LL_PrepareReceive>
 800aa56:	e03f      	b.n	800aad8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	68da      	ldr	r2, [r3, #12]
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d11c      	bne.n	800aa9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	685a      	ldr	r2, [r3, #4]
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d316      	bcc.n	800aa9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	685a      	ldr	r2, [r3, #4]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d20f      	bcs.n	800aa9e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2100      	movs	r1, #0
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f001 f8b7 	bl	800bbf6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa90:	2300      	movs	r3, #0
 800aa92:	2200      	movs	r2, #0
 800aa94:	2100      	movs	r1, #0
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f004 ff02 	bl	800f8a0 <USBD_LL_PrepareReceive>
 800aa9c:	e01c      	b.n	800aad8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	2b03      	cmp	r3, #3
 800aaa8:	d10f      	bne.n	800aaca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d009      	beq.n	800aaca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaca:	2180      	movs	r1, #128	; 0x80
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f004 fe3d 	bl	800f74c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f001 f8e1 	bl	800bc9a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d03a      	beq.n	800ab58 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f7ff fe42 	bl	800a76c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aaf0:	e032      	b.n	800ab58 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800aaf2:	7afb      	ldrb	r3, [r7, #11]
 800aaf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	4619      	mov	r1, r3
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f000 f97f 	bl	800ae00 <USBD_CoreFindEP>
 800ab02:	4603      	mov	r3, r0
 800ab04:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
 800ab08:	2bff      	cmp	r3, #255	; 0xff
 800ab0a:	d025      	beq.n	800ab58 <USBD_LL_DataInStage+0x15a>
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d122      	bne.n	800ab58 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d11c      	bne.n	800ab58 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ab1e:	7dfa      	ldrb	r2, [r7, #23]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	32ae      	adds	r2, #174	; 0xae
 800ab24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab28:	695b      	ldr	r3, [r3, #20]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d014      	beq.n	800ab58 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ab2e:	7dfa      	ldrb	r2, [r7, #23]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ab36:	7dfa      	ldrb	r2, [r7, #23]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	32ae      	adds	r2, #174	; 0xae
 800ab3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	7afa      	ldrb	r2, [r7, #11]
 800ab44:	4611      	mov	r1, r2
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	4798      	blx	r3
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ab4e:	7dbb      	ldrb	r3, [r7, #22]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d001      	beq.n	800ab58 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ab54:	7dbb      	ldrb	r3, [r7, #22]
 800ab56:	e000      	b.n	800ab5a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3718      	adds	r7, #24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b084      	sub	sp, #16
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d014      	beq.n	800abc8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00e      	beq.n	800abc8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	6852      	ldr	r2, [r2, #4]
 800abb6:	b2d2      	uxtb	r2, r2
 800abb8:	4611      	mov	r1, r2
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	4798      	blx	r3
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d001      	beq.n	800abc8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800abc4:	2303      	movs	r3, #3
 800abc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abc8:	2340      	movs	r3, #64	; 0x40
 800abca:	2200      	movs	r2, #0
 800abcc:	2100      	movs	r1, #0
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f004 fd77 	bl	800f6c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2240      	movs	r2, #64	; 0x40
 800abe0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abe4:	2340      	movs	r3, #64	; 0x40
 800abe6:	2200      	movs	r2, #0
 800abe8:	2180      	movs	r1, #128	; 0x80
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f004 fd69 	bl	800f6c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2240      	movs	r2, #64	; 0x40
 800abfa:	621a      	str	r2, [r3, #32]

  return ret;
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac06:	b480      	push	{r7}
 800ac08:	b083      	sub	sp, #12
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	460b      	mov	r3, r1
 800ac10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	78fa      	ldrb	r2, [r7, #3]
 800ac16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b083      	sub	sp, #12
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2204      	movs	r2, #4
 800ac40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	370c      	adds	r7, #12
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac52:	b480      	push	{r7}
 800ac54:	b083      	sub	sp, #12
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b04      	cmp	r3, #4
 800ac64:	d106      	bne.n	800ac74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ac6c:	b2da      	uxtb	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b082      	sub	sp, #8
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	2b03      	cmp	r3, #3
 800ac94:	d110      	bne.n	800acb8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00b      	beq.n	800acb8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aca6:	69db      	ldr	r3, [r3, #28]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d005      	beq.n	800acb8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acb2:	69db      	ldr	r3, [r3, #28]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b082      	sub	sp, #8
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
 800acca:	460b      	mov	r3, r1
 800accc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	32ae      	adds	r2, #174	; 0xae
 800acd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d101      	bne.n	800ace4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ace0:	2303      	movs	r3, #3
 800ace2:	e01c      	b.n	800ad1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acea:	b2db      	uxtb	r3, r3
 800acec:	2b03      	cmp	r3, #3
 800acee:	d115      	bne.n	800ad1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	32ae      	adds	r2, #174	; 0xae
 800acfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acfe:	6a1b      	ldr	r3, [r3, #32]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00b      	beq.n	800ad1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	32ae      	adds	r2, #174	; 0xae
 800ad0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad12:	6a1b      	ldr	r3, [r3, #32]
 800ad14:	78fa      	ldrb	r2, [r7, #3]
 800ad16:	4611      	mov	r1, r2
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	32ae      	adds	r2, #174	; 0xae
 800ad3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d101      	bne.n	800ad48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad44:	2303      	movs	r3, #3
 800ad46:	e01c      	b.n	800ad82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	2b03      	cmp	r3, #3
 800ad52:	d115      	bne.n	800ad80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	32ae      	adds	r2, #174	; 0xae
 800ad5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00b      	beq.n	800ad80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	32ae      	adds	r2, #174	; 0xae
 800ad72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad78:	78fa      	ldrb	r2, [r7, #3]
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b083      	sub	sp, #12
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ada8:	2300      	movs	r3, #0
 800adaa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00e      	beq.n	800addc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	6852      	ldr	r2, [r2, #4]
 800adca:	b2d2      	uxtb	r2, r2
 800adcc:	4611      	mov	r1, r2
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	4798      	blx	r3
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d001      	beq.n	800addc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800add8:	2303      	movs	r3, #3
 800adda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800addc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b083      	sub	sp, #12
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	460b      	mov	r3, r1
 800adf0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800adf2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b086      	sub	sp, #24
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	460b      	mov	r3, r1
 800ae24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	885b      	ldrh	r3, [r3, #2]
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d920      	bls.n	800ae84 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ae4a:	e013      	b.n	800ae74 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ae4c:	f107 030a 	add.w	r3, r7, #10
 800ae50:	4619      	mov	r1, r3
 800ae52:	6978      	ldr	r0, [r7, #20]
 800ae54:	f000 f81b 	bl	800ae8e <USBD_GetNextDesc>
 800ae58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	785b      	ldrb	r3, [r3, #1]
 800ae5e:	2b05      	cmp	r3, #5
 800ae60:	d108      	bne.n	800ae74 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	789b      	ldrb	r3, [r3, #2]
 800ae6a:	78fa      	ldrb	r2, [r7, #3]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d008      	beq.n	800ae82 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ae70:	2300      	movs	r3, #0
 800ae72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	885b      	ldrh	r3, [r3, #2]
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	897b      	ldrh	r3, [r7, #10]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d8e5      	bhi.n	800ae4c <USBD_GetEpDesc+0x32>
 800ae80:	e000      	b.n	800ae84 <USBD_GetEpDesc+0x6a>
          break;
 800ae82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ae84:	693b      	ldr	r3, [r7, #16]
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	b085      	sub	sp, #20
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
 800ae96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	881a      	ldrh	r2, [r3, #0]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	4413      	add	r3, r2
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aeba:	68fb      	ldr	r3, [r7, #12]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3714      	adds	r7, #20
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b087      	sub	sp, #28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	3301      	adds	r3, #1
 800aede:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aee6:	8a3b      	ldrh	r3, [r7, #16]
 800aee8:	021b      	lsls	r3, r3, #8
 800aeea:	b21a      	sxth	r2, r3
 800aeec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	b21b      	sxth	r3, r3
 800aef4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aef6:	89fb      	ldrh	r3, [r7, #14]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	371c      	adds	r7, #28
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af1a:	2b40      	cmp	r3, #64	; 0x40
 800af1c:	d005      	beq.n	800af2a <USBD_StdDevReq+0x26>
 800af1e:	2b40      	cmp	r3, #64	; 0x40
 800af20:	d857      	bhi.n	800afd2 <USBD_StdDevReq+0xce>
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00f      	beq.n	800af46 <USBD_StdDevReq+0x42>
 800af26:	2b20      	cmp	r3, #32
 800af28:	d153      	bne.n	800afd2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	32ae      	adds	r2, #174	; 0xae
 800af34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	4798      	blx	r3
 800af40:	4603      	mov	r3, r0
 800af42:	73fb      	strb	r3, [r7, #15]
      break;
 800af44:	e04a      	b.n	800afdc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	785b      	ldrb	r3, [r3, #1]
 800af4a:	2b09      	cmp	r3, #9
 800af4c:	d83b      	bhi.n	800afc6 <USBD_StdDevReq+0xc2>
 800af4e:	a201      	add	r2, pc, #4	; (adr r2, 800af54 <USBD_StdDevReq+0x50>)
 800af50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af54:	0800afa9 	.word	0x0800afa9
 800af58:	0800afbd 	.word	0x0800afbd
 800af5c:	0800afc7 	.word	0x0800afc7
 800af60:	0800afb3 	.word	0x0800afb3
 800af64:	0800afc7 	.word	0x0800afc7
 800af68:	0800af87 	.word	0x0800af87
 800af6c:	0800af7d 	.word	0x0800af7d
 800af70:	0800afc7 	.word	0x0800afc7
 800af74:	0800af9f 	.word	0x0800af9f
 800af78:	0800af91 	.word	0x0800af91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fa3c 	bl	800b3fc <USBD_GetDescriptor>
          break;
 800af84:	e024      	b.n	800afd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800af86:	6839      	ldr	r1, [r7, #0]
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 fbcb 	bl	800b724 <USBD_SetAddress>
          break;
 800af8e:	e01f      	b.n	800afd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800af90:	6839      	ldr	r1, [r7, #0]
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fc0a 	bl	800b7ac <USBD_SetConfig>
 800af98:	4603      	mov	r3, r0
 800af9a:	73fb      	strb	r3, [r7, #15]
          break;
 800af9c:	e018      	b.n	800afd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800af9e:	6839      	ldr	r1, [r7, #0]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fcad 	bl	800b900 <USBD_GetConfig>
          break;
 800afa6:	e013      	b.n	800afd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fcde 	bl	800b96c <USBD_GetStatus>
          break;
 800afb0:	e00e      	b.n	800afd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fd0d 	bl	800b9d4 <USBD_SetFeature>
          break;
 800afba:	e009      	b.n	800afd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800afbc:	6839      	ldr	r1, [r7, #0]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fd31 	bl	800ba26 <USBD_ClrFeature>
          break;
 800afc4:	e004      	b.n	800afd0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 fd88 	bl	800bade <USBD_CtlError>
          break;
 800afce:	bf00      	nop
      }
      break;
 800afd0:	e004      	b.n	800afdc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800afd2:	6839      	ldr	r1, [r7, #0]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 fd82 	bl	800bade <USBD_CtlError>
      break;
 800afda:	bf00      	nop
  }

  return ret;
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop

0800afe8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aff2:	2300      	movs	r3, #0
 800aff4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800affe:	2b40      	cmp	r3, #64	; 0x40
 800b000:	d005      	beq.n	800b00e <USBD_StdItfReq+0x26>
 800b002:	2b40      	cmp	r3, #64	; 0x40
 800b004:	d852      	bhi.n	800b0ac <USBD_StdItfReq+0xc4>
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <USBD_StdItfReq+0x26>
 800b00a:	2b20      	cmp	r3, #32
 800b00c:	d14e      	bne.n	800b0ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b014:	b2db      	uxtb	r3, r3
 800b016:	3b01      	subs	r3, #1
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d840      	bhi.n	800b09e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	889b      	ldrh	r3, [r3, #4]
 800b020:	b2db      	uxtb	r3, r3
 800b022:	2b01      	cmp	r3, #1
 800b024:	d836      	bhi.n	800b094 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	889b      	ldrh	r3, [r3, #4]
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	4619      	mov	r1, r3
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f7ff fed9 	bl	800ade6 <USBD_CoreFindIF>
 800b034:	4603      	mov	r3, r0
 800b036:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b038:	7bbb      	ldrb	r3, [r7, #14]
 800b03a:	2bff      	cmp	r3, #255	; 0xff
 800b03c:	d01d      	beq.n	800b07a <USBD_StdItfReq+0x92>
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d11a      	bne.n	800b07a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b044:	7bba      	ldrb	r2, [r7, #14]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	32ae      	adds	r2, #174	; 0xae
 800b04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00f      	beq.n	800b074 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b054:	7bba      	ldrb	r2, [r7, #14]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b05c:	7bba      	ldrb	r2, [r7, #14]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	32ae      	adds	r2, #174	; 0xae
 800b062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	4798      	blx	r3
 800b06e:	4603      	mov	r3, r0
 800b070:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b072:	e004      	b.n	800b07e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b074:	2303      	movs	r3, #3
 800b076:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b078:	e001      	b.n	800b07e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b07a:	2303      	movs	r3, #3
 800b07c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	88db      	ldrh	r3, [r3, #6]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d110      	bne.n	800b0a8 <USBD_StdItfReq+0xc0>
 800b086:	7bfb      	ldrb	r3, [r7, #15]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10d      	bne.n	800b0a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fdf1 	bl	800bc74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b092:	e009      	b.n	800b0a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b094:	6839      	ldr	r1, [r7, #0]
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 fd21 	bl	800bade <USBD_CtlError>
          break;
 800b09c:	e004      	b.n	800b0a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fd1c 	bl	800bade <USBD_CtlError>
          break;
 800b0a6:	e000      	b.n	800b0aa <USBD_StdItfReq+0xc2>
          break;
 800b0a8:	bf00      	nop
      }
      break;
 800b0aa:	e004      	b.n	800b0b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b0ac:	6839      	ldr	r1, [r7, #0]
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 fd15 	bl	800bade <USBD_CtlError>
      break;
 800b0b4:	bf00      	nop
  }

  return ret;
 800b0b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3710      	adds	r7, #16
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	889b      	ldrh	r3, [r3, #4]
 800b0d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0dc:	2b40      	cmp	r3, #64	; 0x40
 800b0de:	d007      	beq.n	800b0f0 <USBD_StdEPReq+0x30>
 800b0e0:	2b40      	cmp	r3, #64	; 0x40
 800b0e2:	f200 817f 	bhi.w	800b3e4 <USBD_StdEPReq+0x324>
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d02a      	beq.n	800b140 <USBD_StdEPReq+0x80>
 800b0ea:	2b20      	cmp	r3, #32
 800b0ec:	f040 817a 	bne.w	800b3e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0f0:	7bbb      	ldrb	r3, [r7, #14]
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7ff fe83 	bl	800ae00 <USBD_CoreFindEP>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0fe:	7b7b      	ldrb	r3, [r7, #13]
 800b100:	2bff      	cmp	r3, #255	; 0xff
 800b102:	f000 8174 	beq.w	800b3ee <USBD_StdEPReq+0x32e>
 800b106:	7b7b      	ldrb	r3, [r7, #13]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f040 8170 	bne.w	800b3ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b10e:	7b7a      	ldrb	r2, [r7, #13]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b116:	7b7a      	ldrb	r2, [r7, #13]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	32ae      	adds	r2, #174	; 0xae
 800b11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	2b00      	cmp	r3, #0
 800b124:	f000 8163 	beq.w	800b3ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b128:	7b7a      	ldrb	r2, [r7, #13]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	32ae      	adds	r2, #174	; 0xae
 800b12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	4798      	blx	r3
 800b13a:	4603      	mov	r3, r0
 800b13c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b13e:	e156      	b.n	800b3ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	785b      	ldrb	r3, [r3, #1]
 800b144:	2b03      	cmp	r3, #3
 800b146:	d008      	beq.n	800b15a <USBD_StdEPReq+0x9a>
 800b148:	2b03      	cmp	r3, #3
 800b14a:	f300 8145 	bgt.w	800b3d8 <USBD_StdEPReq+0x318>
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 809b 	beq.w	800b28a <USBD_StdEPReq+0x1ca>
 800b154:	2b01      	cmp	r3, #1
 800b156:	d03c      	beq.n	800b1d2 <USBD_StdEPReq+0x112>
 800b158:	e13e      	b.n	800b3d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b160:	b2db      	uxtb	r3, r3
 800b162:	2b02      	cmp	r3, #2
 800b164:	d002      	beq.n	800b16c <USBD_StdEPReq+0xac>
 800b166:	2b03      	cmp	r3, #3
 800b168:	d016      	beq.n	800b198 <USBD_StdEPReq+0xd8>
 800b16a:	e02c      	b.n	800b1c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b16c:	7bbb      	ldrb	r3, [r7, #14]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00d      	beq.n	800b18e <USBD_StdEPReq+0xce>
 800b172:	7bbb      	ldrb	r3, [r7, #14]
 800b174:	2b80      	cmp	r3, #128	; 0x80
 800b176:	d00a      	beq.n	800b18e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b178:	7bbb      	ldrb	r3, [r7, #14]
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f004 fae5 	bl	800f74c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b182:	2180      	movs	r1, #128	; 0x80
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f004 fae1 	bl	800f74c <USBD_LL_StallEP>
 800b18a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b18c:	e020      	b.n	800b1d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b18e:	6839      	ldr	r1, [r7, #0]
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 fca4 	bl	800bade <USBD_CtlError>
              break;
 800b196:	e01b      	b.n	800b1d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	885b      	ldrh	r3, [r3, #2]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10e      	bne.n	800b1be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00b      	beq.n	800b1be <USBD_StdEPReq+0xfe>
 800b1a6:	7bbb      	ldrb	r3, [r7, #14]
 800b1a8:	2b80      	cmp	r3, #128	; 0x80
 800b1aa:	d008      	beq.n	800b1be <USBD_StdEPReq+0xfe>
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	88db      	ldrh	r3, [r3, #6]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d104      	bne.n	800b1be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1b4:	7bbb      	ldrb	r3, [r7, #14]
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f004 fac7 	bl	800f74c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fd58 	bl	800bc74 <USBD_CtlSendStatus>

              break;
 800b1c4:	e004      	b.n	800b1d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fc88 	bl	800bade <USBD_CtlError>
              break;
 800b1ce:	bf00      	nop
          }
          break;
 800b1d0:	e107      	b.n	800b3e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d002      	beq.n	800b1e4 <USBD_StdEPReq+0x124>
 800b1de:	2b03      	cmp	r3, #3
 800b1e0:	d016      	beq.n	800b210 <USBD_StdEPReq+0x150>
 800b1e2:	e04b      	b.n	800b27c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1e4:	7bbb      	ldrb	r3, [r7, #14]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00d      	beq.n	800b206 <USBD_StdEPReq+0x146>
 800b1ea:	7bbb      	ldrb	r3, [r7, #14]
 800b1ec:	2b80      	cmp	r3, #128	; 0x80
 800b1ee:	d00a      	beq.n	800b206 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1f0:	7bbb      	ldrb	r3, [r7, #14]
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f004 faa9 	bl	800f74c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1fa:	2180      	movs	r1, #128	; 0x80
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f004 faa5 	bl	800f74c <USBD_LL_StallEP>
 800b202:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b204:	e040      	b.n	800b288 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b206:	6839      	ldr	r1, [r7, #0]
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 fc68 	bl	800bade <USBD_CtlError>
              break;
 800b20e:	e03b      	b.n	800b288 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	885b      	ldrh	r3, [r3, #2]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d136      	bne.n	800b286 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b218:	7bbb      	ldrb	r3, [r7, #14]
 800b21a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b222:	7bbb      	ldrb	r3, [r7, #14]
 800b224:	4619      	mov	r1, r3
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f004 faaf 	bl	800f78a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fd21 	bl	800bc74 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b232:	7bbb      	ldrb	r3, [r7, #14]
 800b234:	4619      	mov	r1, r3
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7ff fde2 	bl	800ae00 <USBD_CoreFindEP>
 800b23c:	4603      	mov	r3, r0
 800b23e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b240:	7b7b      	ldrb	r3, [r7, #13]
 800b242:	2bff      	cmp	r3, #255	; 0xff
 800b244:	d01f      	beq.n	800b286 <USBD_StdEPReq+0x1c6>
 800b246:	7b7b      	ldrb	r3, [r7, #13]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d11c      	bne.n	800b286 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b24c:	7b7a      	ldrb	r2, [r7, #13]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b254:	7b7a      	ldrb	r2, [r7, #13]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	32ae      	adds	r2, #174	; 0xae
 800b25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d010      	beq.n	800b286 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b264:	7b7a      	ldrb	r2, [r7, #13]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	32ae      	adds	r2, #174	; 0xae
 800b26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	4798      	blx	r3
 800b276:	4603      	mov	r3, r0
 800b278:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b27a:	e004      	b.n	800b286 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fc2d 	bl	800bade <USBD_CtlError>
              break;
 800b284:	e000      	b.n	800b288 <USBD_StdEPReq+0x1c8>
              break;
 800b286:	bf00      	nop
          }
          break;
 800b288:	e0ab      	b.n	800b3e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b290:	b2db      	uxtb	r3, r3
 800b292:	2b02      	cmp	r3, #2
 800b294:	d002      	beq.n	800b29c <USBD_StdEPReq+0x1dc>
 800b296:	2b03      	cmp	r3, #3
 800b298:	d032      	beq.n	800b300 <USBD_StdEPReq+0x240>
 800b29a:	e097      	b.n	800b3cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b29c:	7bbb      	ldrb	r3, [r7, #14]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d007      	beq.n	800b2b2 <USBD_StdEPReq+0x1f2>
 800b2a2:	7bbb      	ldrb	r3, [r7, #14]
 800b2a4:	2b80      	cmp	r3, #128	; 0x80
 800b2a6:	d004      	beq.n	800b2b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fc17 	bl	800bade <USBD_CtlError>
                break;
 800b2b0:	e091      	b.n	800b3d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	da0b      	bge.n	800b2d2 <USBD_StdEPReq+0x212>
 800b2ba:	7bbb      	ldrb	r3, [r7, #14]
 800b2bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	4413      	add	r3, r2
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	3310      	adds	r3, #16
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	e00b      	b.n	800b2ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2d2:	7bbb      	ldrb	r3, [r7, #14]
 800b2d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2d8:	4613      	mov	r3, r2
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	2202      	movs	r2, #2
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 fc61 	bl	800bbc0 <USBD_CtlSendData>
              break;
 800b2fe:	e06a      	b.n	800b3d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b304:	2b00      	cmp	r3, #0
 800b306:	da11      	bge.n	800b32c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b308:	7bbb      	ldrb	r3, [r7, #14]
 800b30a:	f003 020f 	and.w	r2, r3, #15
 800b30e:	6879      	ldr	r1, [r7, #4]
 800b310:	4613      	mov	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4413      	add	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	440b      	add	r3, r1
 800b31a:	3324      	adds	r3, #36	; 0x24
 800b31c:	881b      	ldrh	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d117      	bne.n	800b352 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b322:	6839      	ldr	r1, [r7, #0]
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 fbda 	bl	800bade <USBD_CtlError>
                  break;
 800b32a:	e054      	b.n	800b3d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b32c:	7bbb      	ldrb	r3, [r7, #14]
 800b32e:	f003 020f 	and.w	r2, r3, #15
 800b332:	6879      	ldr	r1, [r7, #4]
 800b334:	4613      	mov	r3, r2
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	4413      	add	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	440b      	add	r3, r1
 800b33e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b342:	881b      	ldrh	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d104      	bne.n	800b352 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b348:	6839      	ldr	r1, [r7, #0]
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 fbc7 	bl	800bade <USBD_CtlError>
                  break;
 800b350:	e041      	b.n	800b3d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b352:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b356:	2b00      	cmp	r3, #0
 800b358:	da0b      	bge.n	800b372 <USBD_StdEPReq+0x2b2>
 800b35a:	7bbb      	ldrb	r3, [r7, #14]
 800b35c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b360:	4613      	mov	r3, r2
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	4413      	add	r3, r2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	3310      	adds	r3, #16
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	4413      	add	r3, r2
 800b36e:	3304      	adds	r3, #4
 800b370:	e00b      	b.n	800b38a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b372:	7bbb      	ldrb	r3, [r7, #14]
 800b374:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b378:	4613      	mov	r3, r2
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	4413      	add	r3, r2
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	4413      	add	r3, r2
 800b388:	3304      	adds	r3, #4
 800b38a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b38c:	7bbb      	ldrb	r3, [r7, #14]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d002      	beq.n	800b398 <USBD_StdEPReq+0x2d8>
 800b392:	7bbb      	ldrb	r3, [r7, #14]
 800b394:	2b80      	cmp	r3, #128	; 0x80
 800b396:	d103      	bne.n	800b3a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	2200      	movs	r2, #0
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	e00e      	b.n	800b3be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b3a0:	7bbb      	ldrb	r3, [r7, #14]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f004 fa0f 	bl	800f7c8 <USBD_LL_IsStallEP>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d003      	beq.n	800b3b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	601a      	str	r2, [r3, #0]
 800b3b6:	e002      	b.n	800b3be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	2202      	movs	r2, #2
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fbfb 	bl	800bbc0 <USBD_CtlSendData>
              break;
 800b3ca:	e004      	b.n	800b3d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b3cc:	6839      	ldr	r1, [r7, #0]
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fb85 	bl	800bade <USBD_CtlError>
              break;
 800b3d4:	bf00      	nop
          }
          break;
 800b3d6:	e004      	b.n	800b3e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fb7f 	bl	800bade <USBD_CtlError>
          break;
 800b3e0:	bf00      	nop
      }
      break;
 800b3e2:	e005      	b.n	800b3f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 fb79 	bl	800bade <USBD_CtlError>
      break;
 800b3ec:	e000      	b.n	800b3f0 <USBD_StdEPReq+0x330>
      break;
 800b3ee:	bf00      	nop
  }

  return ret;
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
	...

0800b3fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b406:	2300      	movs	r3, #0
 800b408:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b40a:	2300      	movs	r3, #0
 800b40c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b40e:	2300      	movs	r3, #0
 800b410:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	885b      	ldrh	r3, [r3, #2]
 800b416:	0a1b      	lsrs	r3, r3, #8
 800b418:	b29b      	uxth	r3, r3
 800b41a:	3b01      	subs	r3, #1
 800b41c:	2b0e      	cmp	r3, #14
 800b41e:	f200 8152 	bhi.w	800b6c6 <USBD_GetDescriptor+0x2ca>
 800b422:	a201      	add	r2, pc, #4	; (adr r2, 800b428 <USBD_GetDescriptor+0x2c>)
 800b424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b428:	0800b499 	.word	0x0800b499
 800b42c:	0800b4b1 	.word	0x0800b4b1
 800b430:	0800b4f1 	.word	0x0800b4f1
 800b434:	0800b6c7 	.word	0x0800b6c7
 800b438:	0800b6c7 	.word	0x0800b6c7
 800b43c:	0800b667 	.word	0x0800b667
 800b440:	0800b693 	.word	0x0800b693
 800b444:	0800b6c7 	.word	0x0800b6c7
 800b448:	0800b6c7 	.word	0x0800b6c7
 800b44c:	0800b6c7 	.word	0x0800b6c7
 800b450:	0800b6c7 	.word	0x0800b6c7
 800b454:	0800b6c7 	.word	0x0800b6c7
 800b458:	0800b6c7 	.word	0x0800b6c7
 800b45c:	0800b6c7 	.word	0x0800b6c7
 800b460:	0800b465 	.word	0x0800b465
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b46a:	69db      	ldr	r3, [r3, #28]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00b      	beq.n	800b488 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b476:	69db      	ldr	r3, [r3, #28]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	7c12      	ldrb	r2, [r2, #16]
 800b47c:	f107 0108 	add.w	r1, r7, #8
 800b480:	4610      	mov	r0, r2
 800b482:	4798      	blx	r3
 800b484:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b486:	e126      	b.n	800b6d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fb27 	bl	800bade <USBD_CtlError>
        err++;
 800b490:	7afb      	ldrb	r3, [r7, #11]
 800b492:	3301      	adds	r3, #1
 800b494:	72fb      	strb	r3, [r7, #11]
      break;
 800b496:	e11e      	b.n	800b6d6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	7c12      	ldrb	r2, [r2, #16]
 800b4a4:	f107 0108 	add.w	r1, r7, #8
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	4798      	blx	r3
 800b4ac:	60f8      	str	r0, [r7, #12]
      break;
 800b4ae:	e112      	b.n	800b6d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	7c1b      	ldrb	r3, [r3, #16]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10d      	bne.n	800b4d4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c0:	f107 0208 	add.w	r2, r7, #8
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	4798      	blx	r3
 800b4c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	2202      	movs	r2, #2
 800b4d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b4d2:	e100      	b.n	800b6d6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4dc:	f107 0208 	add.w	r2, r7, #8
 800b4e0:	4610      	mov	r0, r2
 800b4e2:	4798      	blx	r3
 800b4e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	2202      	movs	r2, #2
 800b4ec:	701a      	strb	r2, [r3, #0]
      break;
 800b4ee:	e0f2      	b.n	800b6d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	885b      	ldrh	r3, [r3, #2]
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	2b05      	cmp	r3, #5
 800b4f8:	f200 80ac 	bhi.w	800b654 <USBD_GetDescriptor+0x258>
 800b4fc:	a201      	add	r2, pc, #4	; (adr r2, 800b504 <USBD_GetDescriptor+0x108>)
 800b4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b502:	bf00      	nop
 800b504:	0800b51d 	.word	0x0800b51d
 800b508:	0800b551 	.word	0x0800b551
 800b50c:	0800b585 	.word	0x0800b585
 800b510:	0800b5b9 	.word	0x0800b5b9
 800b514:	0800b5ed 	.word	0x0800b5ed
 800b518:	0800b621 	.word	0x0800b621
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00b      	beq.n	800b540 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	7c12      	ldrb	r2, [r2, #16]
 800b534:	f107 0108 	add.w	r1, r7, #8
 800b538:	4610      	mov	r0, r2
 800b53a:	4798      	blx	r3
 800b53c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b53e:	e091      	b.n	800b664 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b540:	6839      	ldr	r1, [r7, #0]
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 facb 	bl	800bade <USBD_CtlError>
            err++;
 800b548:	7afb      	ldrb	r3, [r7, #11]
 800b54a:	3301      	adds	r3, #1
 800b54c:	72fb      	strb	r3, [r7, #11]
          break;
 800b54e:	e089      	b.n	800b664 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00b      	beq.n	800b574 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	7c12      	ldrb	r2, [r2, #16]
 800b568:	f107 0108 	add.w	r1, r7, #8
 800b56c:	4610      	mov	r0, r2
 800b56e:	4798      	blx	r3
 800b570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b572:	e077      	b.n	800b664 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b574:	6839      	ldr	r1, [r7, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 fab1 	bl	800bade <USBD_CtlError>
            err++;
 800b57c:	7afb      	ldrb	r3, [r7, #11]
 800b57e:	3301      	adds	r3, #1
 800b580:	72fb      	strb	r3, [r7, #11]
          break;
 800b582:	e06f      	b.n	800b664 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00b      	beq.n	800b5a8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	7c12      	ldrb	r2, [r2, #16]
 800b59c:	f107 0108 	add.w	r1, r7, #8
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	4798      	blx	r3
 800b5a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5a6:	e05d      	b.n	800b664 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 fa97 	bl	800bade <USBD_CtlError>
            err++;
 800b5b0:	7afb      	ldrb	r3, [r7, #11]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b5b6:	e055      	b.n	800b664 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00b      	beq.n	800b5dc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	7c12      	ldrb	r2, [r2, #16]
 800b5d0:	f107 0108 	add.w	r1, r7, #8
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	4798      	blx	r3
 800b5d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5da:	e043      	b.n	800b664 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5dc:	6839      	ldr	r1, [r7, #0]
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 fa7d 	bl	800bade <USBD_CtlError>
            err++;
 800b5e4:	7afb      	ldrb	r3, [r7, #11]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ea:	e03b      	b.n	800b664 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00b      	beq.n	800b610 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5fe:	695b      	ldr	r3, [r3, #20]
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	7c12      	ldrb	r2, [r2, #16]
 800b604:	f107 0108 	add.w	r1, r7, #8
 800b608:	4610      	mov	r0, r2
 800b60a:	4798      	blx	r3
 800b60c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b60e:	e029      	b.n	800b664 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b610:	6839      	ldr	r1, [r7, #0]
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 fa63 	bl	800bade <USBD_CtlError>
            err++;
 800b618:	7afb      	ldrb	r3, [r7, #11]
 800b61a:	3301      	adds	r3, #1
 800b61c:	72fb      	strb	r3, [r7, #11]
          break;
 800b61e:	e021      	b.n	800b664 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b626:	699b      	ldr	r3, [r3, #24]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00b      	beq.n	800b644 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b632:	699b      	ldr	r3, [r3, #24]
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	7c12      	ldrb	r2, [r2, #16]
 800b638:	f107 0108 	add.w	r1, r7, #8
 800b63c:	4610      	mov	r0, r2
 800b63e:	4798      	blx	r3
 800b640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b642:	e00f      	b.n	800b664 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b644:	6839      	ldr	r1, [r7, #0]
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 fa49 	bl	800bade <USBD_CtlError>
            err++;
 800b64c:	7afb      	ldrb	r3, [r7, #11]
 800b64e:	3301      	adds	r3, #1
 800b650:	72fb      	strb	r3, [r7, #11]
          break;
 800b652:	e007      	b.n	800b664 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b654:	6839      	ldr	r1, [r7, #0]
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 fa41 	bl	800bade <USBD_CtlError>
          err++;
 800b65c:	7afb      	ldrb	r3, [r7, #11]
 800b65e:	3301      	adds	r3, #1
 800b660:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b662:	bf00      	nop
      }
      break;
 800b664:	e037      	b.n	800b6d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	7c1b      	ldrb	r3, [r3, #16]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d109      	bne.n	800b682 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b676:	f107 0208 	add.w	r2, r7, #8
 800b67a:	4610      	mov	r0, r2
 800b67c:	4798      	blx	r3
 800b67e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b680:	e029      	b.n	800b6d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 fa2a 	bl	800bade <USBD_CtlError>
        err++;
 800b68a:	7afb      	ldrb	r3, [r7, #11]
 800b68c:	3301      	adds	r3, #1
 800b68e:	72fb      	strb	r3, [r7, #11]
      break;
 800b690:	e021      	b.n	800b6d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	7c1b      	ldrb	r3, [r3, #16]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d10d      	bne.n	800b6b6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a2:	f107 0208 	add.w	r2, r7, #8
 800b6a6:	4610      	mov	r0, r2
 800b6a8:	4798      	blx	r3
 800b6aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	2207      	movs	r2, #7
 800b6b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6b4:	e00f      	b.n	800b6d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fa10 	bl	800bade <USBD_CtlError>
        err++;
 800b6be:	7afb      	ldrb	r3, [r7, #11]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	72fb      	strb	r3, [r7, #11]
      break;
 800b6c4:	e007      	b.n	800b6d6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fa08 	bl	800bade <USBD_CtlError>
      err++;
 800b6ce:	7afb      	ldrb	r3, [r7, #11]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	72fb      	strb	r3, [r7, #11]
      break;
 800b6d4:	bf00      	nop
  }

  if (err != 0U)
 800b6d6:	7afb      	ldrb	r3, [r7, #11]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d11e      	bne.n	800b71a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	88db      	ldrh	r3, [r3, #6]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d016      	beq.n	800b712 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b6e4:	893b      	ldrh	r3, [r7, #8]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00e      	beq.n	800b708 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	88da      	ldrh	r2, [r3, #6]
 800b6ee:	893b      	ldrh	r3, [r7, #8]
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	bf28      	it	cs
 800b6f4:	4613      	movcs	r3, r2
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b6fa:	893b      	ldrh	r3, [r7, #8]
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	68f9      	ldr	r1, [r7, #12]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fa5d 	bl	800bbc0 <USBD_CtlSendData>
 800b706:	e009      	b.n	800b71c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b708:	6839      	ldr	r1, [r7, #0]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f9e7 	bl	800bade <USBD_CtlError>
 800b710:	e004      	b.n	800b71c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 faae 	bl	800bc74 <USBD_CtlSendStatus>
 800b718:	e000      	b.n	800b71c <USBD_GetDescriptor+0x320>
    return;
 800b71a:	bf00      	nop
  }
}
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop

0800b724 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	889b      	ldrh	r3, [r3, #4]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d131      	bne.n	800b79a <USBD_SetAddress+0x76>
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	88db      	ldrh	r3, [r3, #6]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d12d      	bne.n	800b79a <USBD_SetAddress+0x76>
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	885b      	ldrh	r3, [r3, #2]
 800b742:	2b7f      	cmp	r3, #127	; 0x7f
 800b744:	d829      	bhi.n	800b79a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	885b      	ldrh	r3, [r3, #2]
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b750:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	2b03      	cmp	r3, #3
 800b75c:	d104      	bne.n	800b768 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b75e:	6839      	ldr	r1, [r7, #0]
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 f9bc 	bl	800bade <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b766:	e01d      	b.n	800b7a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	7bfa      	ldrb	r2, [r7, #15]
 800b76c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b770:	7bfb      	ldrb	r3, [r7, #15]
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f004 f853 	bl	800f820 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fa7a 	bl	800bc74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b780:	7bfb      	ldrb	r3, [r7, #15]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d004      	beq.n	800b790 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2202      	movs	r2, #2
 800b78a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b78e:	e009      	b.n	800b7a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b798:	e004      	b.n	800b7a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b79a:	6839      	ldr	r1, [r7, #0]
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 f99e 	bl	800bade <USBD_CtlError>
  }
}
 800b7a2:	bf00      	nop
 800b7a4:	bf00      	nop
 800b7a6:	3710      	adds	r7, #16
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	885b      	ldrh	r3, [r3, #2]
 800b7be:	b2da      	uxtb	r2, r3
 800b7c0:	4b4e      	ldr	r3, [pc, #312]	; (800b8fc <USBD_SetConfig+0x150>)
 800b7c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b7c4:	4b4d      	ldr	r3, [pc, #308]	; (800b8fc <USBD_SetConfig+0x150>)
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d905      	bls.n	800b7d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b7cc:	6839      	ldr	r1, [r7, #0]
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 f985 	bl	800bade <USBD_CtlError>
    return USBD_FAIL;
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e08c      	b.n	800b8f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d002      	beq.n	800b7ea <USBD_SetConfig+0x3e>
 800b7e4:	2b03      	cmp	r3, #3
 800b7e6:	d029      	beq.n	800b83c <USBD_SetConfig+0x90>
 800b7e8:	e075      	b.n	800b8d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b7ea:	4b44      	ldr	r3, [pc, #272]	; (800b8fc <USBD_SetConfig+0x150>)
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d020      	beq.n	800b834 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b7f2:	4b42      	ldr	r3, [pc, #264]	; (800b8fc <USBD_SetConfig+0x150>)
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7fc:	4b3f      	ldr	r3, [pc, #252]	; (800b8fc <USBD_SetConfig+0x150>)
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	4619      	mov	r1, r3
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f7fe ffbd 	bl	800a782 <USBD_SetClassConfig>
 800b808:	4603      	mov	r3, r0
 800b80a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d008      	beq.n	800b824 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b812:	6839      	ldr	r1, [r7, #0]
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 f962 	bl	800bade <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2202      	movs	r2, #2
 800b81e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b822:	e065      	b.n	800b8f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fa25 	bl	800bc74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2203      	movs	r2, #3
 800b82e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b832:	e05d      	b.n	800b8f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fa1d 	bl	800bc74 <USBD_CtlSendStatus>
      break;
 800b83a:	e059      	b.n	800b8f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b83c:	4b2f      	ldr	r3, [pc, #188]	; (800b8fc <USBD_SetConfig+0x150>)
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d112      	bne.n	800b86a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2202      	movs	r2, #2
 800b848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b84c:	4b2b      	ldr	r3, [pc, #172]	; (800b8fc <USBD_SetConfig+0x150>)
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	461a      	mov	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b856:	4b29      	ldr	r3, [pc, #164]	; (800b8fc <USBD_SetConfig+0x150>)
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7fe ffac 	bl	800a7ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 fa06 	bl	800bc74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b868:	e042      	b.n	800b8f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b86a:	4b24      	ldr	r3, [pc, #144]	; (800b8fc <USBD_SetConfig+0x150>)
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	461a      	mov	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	429a      	cmp	r2, r3
 800b876:	d02a      	beq.n	800b8ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	4619      	mov	r1, r3
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7fe ff9a 	bl	800a7ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b886:	4b1d      	ldr	r3, [pc, #116]	; (800b8fc <USBD_SetConfig+0x150>)
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	461a      	mov	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b890:	4b1a      	ldr	r3, [pc, #104]	; (800b8fc <USBD_SetConfig+0x150>)
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7fe ff73 	bl	800a782 <USBD_SetClassConfig>
 800b89c:	4603      	mov	r3, r0
 800b89e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b8a0:	7bfb      	ldrb	r3, [r7, #15]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00f      	beq.n	800b8c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b8a6:	6839      	ldr	r1, [r7, #0]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 f918 	bl	800bade <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7fe ff7f 	bl	800a7ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2202      	movs	r2, #2
 800b8c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b8c4:	e014      	b.n	800b8f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f9d4 	bl	800bc74 <USBD_CtlSendStatus>
      break;
 800b8cc:	e010      	b.n	800b8f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 f9d0 	bl	800bc74 <USBD_CtlSendStatus>
      break;
 800b8d4:	e00c      	b.n	800b8f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b8d6:	6839      	ldr	r1, [r7, #0]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 f900 	bl	800bade <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8de:	4b07      	ldr	r3, [pc, #28]	; (800b8fc <USBD_SetConfig+0x150>)
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f7fe ff68 	bl	800a7ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b8ee:	bf00      	nop
  }

  return ret;
 800b8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	20003254 	.word	0x20003254

0800b900 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	88db      	ldrh	r3, [r3, #6]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d004      	beq.n	800b91c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 f8e2 	bl	800bade <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b91a:	e023      	b.n	800b964 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b922:	b2db      	uxtb	r3, r3
 800b924:	2b02      	cmp	r3, #2
 800b926:	dc02      	bgt.n	800b92e <USBD_GetConfig+0x2e>
 800b928:	2b00      	cmp	r3, #0
 800b92a:	dc03      	bgt.n	800b934 <USBD_GetConfig+0x34>
 800b92c:	e015      	b.n	800b95a <USBD_GetConfig+0x5a>
 800b92e:	2b03      	cmp	r3, #3
 800b930:	d00b      	beq.n	800b94a <USBD_GetConfig+0x4a>
 800b932:	e012      	b.n	800b95a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	3308      	adds	r3, #8
 800b93e:	2201      	movs	r2, #1
 800b940:	4619      	mov	r1, r3
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 f93c 	bl	800bbc0 <USBD_CtlSendData>
        break;
 800b948:	e00c      	b.n	800b964 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	3304      	adds	r3, #4
 800b94e:	2201      	movs	r2, #1
 800b950:	4619      	mov	r1, r3
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f934 	bl	800bbc0 <USBD_CtlSendData>
        break;
 800b958:	e004      	b.n	800b964 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b95a:	6839      	ldr	r1, [r7, #0]
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f8be 	bl	800bade <USBD_CtlError>
        break;
 800b962:	bf00      	nop
}
 800b964:	bf00      	nop
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	3b01      	subs	r3, #1
 800b980:	2b02      	cmp	r3, #2
 800b982:	d81e      	bhi.n	800b9c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	88db      	ldrh	r3, [r3, #6]
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d004      	beq.n	800b996 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b98c:	6839      	ldr	r1, [r7, #0]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 f8a5 	bl	800bade <USBD_CtlError>
        break;
 800b994:	e01a      	b.n	800b9cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d005      	beq.n	800b9b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	f043 0202 	orr.w	r2, r3, #2
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	330c      	adds	r3, #12
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 f900 	bl	800bbc0 <USBD_CtlSendData>
      break;
 800b9c0:	e004      	b.n	800b9cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b9c2:	6839      	ldr	r1, [r7, #0]
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f88a 	bl	800bade <USBD_CtlError>
      break;
 800b9ca:	bf00      	nop
  }
}
 800b9cc:	bf00      	nop
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	885b      	ldrh	r3, [r3, #2]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d107      	bne.n	800b9f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f940 	bl	800bc74 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b9f4:	e013      	b.n	800ba1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	885b      	ldrh	r3, [r3, #2]
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d10b      	bne.n	800ba16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	889b      	ldrh	r3, [r3, #4]
 800ba02:	0a1b      	lsrs	r3, r3, #8
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	b2da      	uxtb	r2, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f930 	bl	800bc74 <USBD_CtlSendStatus>
}
 800ba14:	e003      	b.n	800ba1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ba16:	6839      	ldr	r1, [r7, #0]
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 f860 	bl	800bade <USBD_CtlError>
}
 800ba1e:	bf00      	nop
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b082      	sub	sp, #8
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
 800ba2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	2b02      	cmp	r3, #2
 800ba3c:	d80b      	bhi.n	800ba56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	885b      	ldrh	r3, [r3, #2]
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d10c      	bne.n	800ba60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f910 	bl	800bc74 <USBD_CtlSendStatus>
      }
      break;
 800ba54:	e004      	b.n	800ba60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba56:	6839      	ldr	r1, [r7, #0]
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 f840 	bl	800bade <USBD_CtlError>
      break;
 800ba5e:	e000      	b.n	800ba62 <USBD_ClrFeature+0x3c>
      break;
 800ba60:	bf00      	nop
  }
}
 800ba62:	bf00      	nop
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b084      	sub	sp, #16
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	781a      	ldrb	r2, [r3, #0]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	3301      	adds	r3, #1
 800ba84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	781a      	ldrb	r2, [r3, #0]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3301      	adds	r3, #1
 800ba92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f7ff fa17 	bl	800aec8 <SWAPBYTE>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	3301      	adds	r3, #1
 800baa6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	3301      	adds	r3, #1
 800baac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f7ff fa0a 	bl	800aec8 <SWAPBYTE>
 800bab4:	4603      	mov	r3, r0
 800bab6:	461a      	mov	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	3301      	adds	r3, #1
 800bac0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3301      	adds	r3, #1
 800bac6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f7ff f9fd 	bl	800aec8 <SWAPBYTE>
 800bace:	4603      	mov	r3, r0
 800bad0:	461a      	mov	r2, r3
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	80da      	strh	r2, [r3, #6]
}
 800bad6:	bf00      	nop
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b082      	sub	sp, #8
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bae8:	2180      	movs	r1, #128	; 0x80
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f003 fe2e 	bl	800f74c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800baf0:	2100      	movs	r1, #0
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f003 fe2a 	bl	800f74c <USBD_LL_StallEP>
}
 800baf8:	bf00      	nop
 800bafa:	3708      	adds	r7, #8
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b086      	sub	sp, #24
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d036      	beq.n	800bb84 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bb1a:	6938      	ldr	r0, [r7, #16]
 800bb1c:	f000 f836 	bl	800bb8c <USBD_GetLen>
 800bb20:	4603      	mov	r3, r0
 800bb22:	3301      	adds	r3, #1
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	005b      	lsls	r3, r3, #1
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bb2e:	7dfb      	ldrb	r3, [r7, #23]
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	4413      	add	r3, r2
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	7812      	ldrb	r2, [r2, #0]
 800bb38:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb3a:	7dfb      	ldrb	r3, [r7, #23]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
 800bb42:	68ba      	ldr	r2, [r7, #8]
 800bb44:	4413      	add	r3, r2
 800bb46:	2203      	movs	r2, #3
 800bb48:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb4a:	7dfb      	ldrb	r3, [r7, #23]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bb50:	e013      	b.n	800bb7a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bb52:	7dfb      	ldrb	r3, [r7, #23]
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	4413      	add	r3, r2
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	7812      	ldrb	r2, [r2, #0]
 800bb5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	3301      	adds	r3, #1
 800bb62:	613b      	str	r3, [r7, #16]
    idx++;
 800bb64:	7dfb      	ldrb	r3, [r7, #23]
 800bb66:	3301      	adds	r3, #1
 800bb68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb6a:	7dfb      	ldrb	r3, [r7, #23]
 800bb6c:	68ba      	ldr	r2, [r7, #8]
 800bb6e:	4413      	add	r3, r2
 800bb70:	2200      	movs	r2, #0
 800bb72:	701a      	strb	r2, [r3, #0]
    idx++;
 800bb74:	7dfb      	ldrb	r3, [r7, #23]
 800bb76:	3301      	adds	r3, #1
 800bb78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d1e7      	bne.n	800bb52 <USBD_GetString+0x52>
 800bb82:	e000      	b.n	800bb86 <USBD_GetString+0x86>
    return;
 800bb84:	bf00      	nop
  }
}
 800bb86:	3718      	adds	r7, #24
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb94:	2300      	movs	r3, #0
 800bb96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bb9c:	e005      	b.n	800bbaa <USBD_GetLen+0x1e>
  {
    len++;
 800bb9e:	7bfb      	ldrb	r3, [r7, #15]
 800bba0:	3301      	adds	r3, #1
 800bba2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	3301      	adds	r3, #1
 800bba8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1f5      	bne.n	800bb9e <USBD_GetLen+0x12>
  }

  return len;
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3714      	adds	r7, #20
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2202      	movs	r2, #2
 800bbd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f003 fe39 	bl	800f85e <USBD_LL_Transmit>

  return USBD_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b084      	sub	sp, #16
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	60f8      	str	r0, [r7, #12]
 800bbfe:	60b9      	str	r1, [r7, #8]
 800bc00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	68ba      	ldr	r2, [r7, #8]
 800bc06:	2100      	movs	r1, #0
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f003 fe28 	bl	800f85e <USBD_LL_Transmit>

  return USBD_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2203      	movs	r2, #3
 800bc28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	2100      	movs	r1, #0
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f003 fe2c 	bl	800f8a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b084      	sub	sp, #16
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	60f8      	str	r0, [r7, #12]
 800bc5a:	60b9      	str	r1, [r7, #8]
 800bc5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	2100      	movs	r1, #0
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f003 fe1b 	bl	800f8a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2204      	movs	r2, #4
 800bc80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc84:	2300      	movs	r3, #0
 800bc86:	2200      	movs	r2, #0
 800bc88:	2100      	movs	r1, #0
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f003 fde7 	bl	800f85e <USBD_LL_Transmit>

  return USBD_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3708      	adds	r7, #8
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b082      	sub	sp, #8
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2205      	movs	r2, #5
 800bca6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcaa:	2300      	movs	r3, #0
 800bcac:	2200      	movs	r2, #0
 800bcae:	2100      	movs	r1, #0
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f003 fdf5 	bl	800f8a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bcca:	79fb      	ldrb	r3, [r7, #7]
 800bccc:	4a08      	ldr	r2, [pc, #32]	; (800bcf0 <disk_status+0x30>)
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	4413      	add	r3, r2
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	79fa      	ldrb	r2, [r7, #7]
 800bcd8:	4905      	ldr	r1, [pc, #20]	; (800bcf0 <disk_status+0x30>)
 800bcda:	440a      	add	r2, r1
 800bcdc:	7a12      	ldrb	r2, [r2, #8]
 800bcde:	4610      	mov	r0, r2
 800bce0:	4798      	blx	r3
 800bce2:	4603      	mov	r3, r0
 800bce4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	20003480 	.word	0x20003480

0800bcf4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bd02:	79fb      	ldrb	r3, [r7, #7]
 800bd04:	4a0d      	ldr	r2, [pc, #52]	; (800bd3c <disk_initialize+0x48>)
 800bd06:	5cd3      	ldrb	r3, [r2, r3]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d111      	bne.n	800bd30 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bd0c:	79fb      	ldrb	r3, [r7, #7]
 800bd0e:	4a0b      	ldr	r2, [pc, #44]	; (800bd3c <disk_initialize+0x48>)
 800bd10:	2101      	movs	r1, #1
 800bd12:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bd14:	79fb      	ldrb	r3, [r7, #7]
 800bd16:	4a09      	ldr	r2, [pc, #36]	; (800bd3c <disk_initialize+0x48>)
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	79fa      	ldrb	r2, [r7, #7]
 800bd22:	4906      	ldr	r1, [pc, #24]	; (800bd3c <disk_initialize+0x48>)
 800bd24:	440a      	add	r2, r1
 800bd26:	7a12      	ldrb	r2, [r2, #8]
 800bd28:	4610      	mov	r0, r2
 800bd2a:	4798      	blx	r3
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20003480 	.word	0x20003480

0800bd40 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bd40:	b590      	push	{r4, r7, lr}
 800bd42:	b087      	sub	sp, #28
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60b9      	str	r1, [r7, #8]
 800bd48:	607a      	str	r2, [r7, #4]
 800bd4a:	603b      	str	r3, [r7, #0]
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bd50:	7bfb      	ldrb	r3, [r7, #15]
 800bd52:	4a0a      	ldr	r2, [pc, #40]	; (800bd7c <disk_read+0x3c>)
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	689c      	ldr	r4, [r3, #8]
 800bd5c:	7bfb      	ldrb	r3, [r7, #15]
 800bd5e:	4a07      	ldr	r2, [pc, #28]	; (800bd7c <disk_read+0x3c>)
 800bd60:	4413      	add	r3, r2
 800bd62:	7a18      	ldrb	r0, [r3, #8]
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	68b9      	ldr	r1, [r7, #8]
 800bd6a:	47a0      	blx	r4
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	75fb      	strb	r3, [r7, #23]
  return res;
 800bd70:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	371c      	adds	r7, #28
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd90      	pop	{r4, r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	20003480 	.word	0x20003480

0800bd80 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bd80:	b590      	push	{r4, r7, lr}
 800bd82:	b087      	sub	sp, #28
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60b9      	str	r1, [r7, #8]
 800bd88:	607a      	str	r2, [r7, #4]
 800bd8a:	603b      	str	r3, [r7, #0]
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
 800bd92:	4a0a      	ldr	r2, [pc, #40]	; (800bdbc <disk_write+0x3c>)
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	68dc      	ldr	r4, [r3, #12]
 800bd9c:	7bfb      	ldrb	r3, [r7, #15]
 800bd9e:	4a07      	ldr	r2, [pc, #28]	; (800bdbc <disk_write+0x3c>)
 800bda0:	4413      	add	r3, r2
 800bda2:	7a18      	ldrb	r0, [r3, #8]
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	68b9      	ldr	r1, [r7, #8]
 800bdaa:	47a0      	blx	r4
 800bdac:	4603      	mov	r3, r0
 800bdae:	75fb      	strb	r3, [r7, #23]
  return res;
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	371c      	adds	r7, #28
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd90      	pop	{r4, r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	20003480 	.word	0x20003480

0800bdc0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	603a      	str	r2, [r7, #0]
 800bdca:	71fb      	strb	r3, [r7, #7]
 800bdcc:	460b      	mov	r3, r1
 800bdce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bdd0:	79fb      	ldrb	r3, [r7, #7]
 800bdd2:	4a09      	ldr	r2, [pc, #36]	; (800bdf8 <disk_ioctl+0x38>)
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	4413      	add	r3, r2
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	691b      	ldr	r3, [r3, #16]
 800bddc:	79fa      	ldrb	r2, [r7, #7]
 800bdde:	4906      	ldr	r1, [pc, #24]	; (800bdf8 <disk_ioctl+0x38>)
 800bde0:	440a      	add	r2, r1
 800bde2:	7a10      	ldrb	r0, [r2, #8]
 800bde4:	79b9      	ldrb	r1, [r7, #6]
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	4798      	blx	r3
 800bdea:	4603      	mov	r3, r0
 800bdec:	73fb      	strb	r3, [r7, #15]
  return res;
 800bdee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	20003480 	.word	0x20003480

0800bdfc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	3301      	adds	r3, #1
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800be0c:	89fb      	ldrh	r3, [r7, #14]
 800be0e:	021b      	lsls	r3, r3, #8
 800be10:	b21a      	sxth	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	b21b      	sxth	r3, r3
 800be18:	4313      	orrs	r3, r2
 800be1a:	b21b      	sxth	r3, r3
 800be1c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800be1e:	89fb      	ldrh	r3, [r7, #14]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3714      	adds	r7, #20
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	3303      	adds	r3, #3
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	021b      	lsls	r3, r3, #8
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	3202      	adds	r2, #2
 800be44:	7812      	ldrb	r2, [r2, #0]
 800be46:	4313      	orrs	r3, r2
 800be48:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	021b      	lsls	r3, r3, #8
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	3201      	adds	r2, #1
 800be52:	7812      	ldrb	r2, [r2, #0]
 800be54:	4313      	orrs	r3, r2
 800be56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	021b      	lsls	r3, r3, #8
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	7812      	ldrb	r2, [r2, #0]
 800be60:	4313      	orrs	r3, r2
 800be62:	60fb      	str	r3, [r7, #12]
	return rv;
 800be64:	68fb      	ldr	r3, [r7, #12]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3714      	adds	r7, #20
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr

0800be72 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800be72:	b480      	push	{r7}
 800be74:	b083      	sub	sp, #12
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
 800be7a:	460b      	mov	r3, r1
 800be7c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	1c5a      	adds	r2, r3, #1
 800be82:	607a      	str	r2, [r7, #4]
 800be84:	887a      	ldrh	r2, [r7, #2]
 800be86:	b2d2      	uxtb	r2, r2
 800be88:	701a      	strb	r2, [r3, #0]
 800be8a:	887b      	ldrh	r3, [r7, #2]
 800be8c:	0a1b      	lsrs	r3, r3, #8
 800be8e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	1c5a      	adds	r2, r3, #1
 800be94:	607a      	str	r2, [r7, #4]
 800be96:	887a      	ldrh	r2, [r7, #2]
 800be98:	b2d2      	uxtb	r2, r2
 800be9a:	701a      	strb	r2, [r3, #0]
}
 800be9c:	bf00      	nop
 800be9e:	370c      	adds	r7, #12
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr

0800bea8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	1c5a      	adds	r2, r3, #1
 800beb6:	607a      	str	r2, [r7, #4]
 800beb8:	683a      	ldr	r2, [r7, #0]
 800beba:	b2d2      	uxtb	r2, r2
 800bebc:	701a      	strb	r2, [r3, #0]
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	0a1b      	lsrs	r3, r3, #8
 800bec2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	1c5a      	adds	r2, r3, #1
 800bec8:	607a      	str	r2, [r7, #4]
 800beca:	683a      	ldr	r2, [r7, #0]
 800becc:	b2d2      	uxtb	r2, r2
 800bece:	701a      	strb	r2, [r3, #0]
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	0a1b      	lsrs	r3, r3, #8
 800bed4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	1c5a      	adds	r2, r3, #1
 800beda:	607a      	str	r2, [r7, #4]
 800bedc:	683a      	ldr	r2, [r7, #0]
 800bede:	b2d2      	uxtb	r2, r2
 800bee0:	701a      	strb	r2, [r3, #0]
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	0a1b      	lsrs	r3, r3, #8
 800bee6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	1c5a      	adds	r2, r3, #1
 800beec:	607a      	str	r2, [r7, #4]
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	b2d2      	uxtb	r2, r2
 800bef2:	701a      	strb	r2, [r3, #0]
}
 800bef4:	bf00      	nop
 800bef6:	370c      	adds	r7, #12
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bf00:	b480      	push	{r7}
 800bf02:	b087      	sub	sp, #28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00d      	beq.n	800bf36 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bf1a:	693a      	ldr	r2, [r7, #16]
 800bf1c:	1c53      	adds	r3, r2, #1
 800bf1e:	613b      	str	r3, [r7, #16]
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	1c59      	adds	r1, r3, #1
 800bf24:	6179      	str	r1, [r7, #20]
 800bf26:	7812      	ldrb	r2, [r2, #0]
 800bf28:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	607b      	str	r3, [r7, #4]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1f1      	bne.n	800bf1a <mem_cpy+0x1a>
	}
}
 800bf36:	bf00      	nop
 800bf38:	371c      	adds	r7, #28
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bf42:	b480      	push	{r7}
 800bf44:	b087      	sub	sp, #28
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	60f8      	str	r0, [r7, #12]
 800bf4a:	60b9      	str	r1, [r7, #8]
 800bf4c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	1c5a      	adds	r2, r3, #1
 800bf56:	617a      	str	r2, [r7, #20]
 800bf58:	68ba      	ldr	r2, [r7, #8]
 800bf5a:	b2d2      	uxtb	r2, r2
 800bf5c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	3b01      	subs	r3, #1
 800bf62:	607b      	str	r3, [r7, #4]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1f3      	bne.n	800bf52 <mem_set+0x10>
}
 800bf6a:	bf00      	nop
 800bf6c:	bf00      	nop
 800bf6e:	371c      	adds	r7, #28
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bf78:	b480      	push	{r7}
 800bf7a:	b089      	sub	sp, #36	; 0x24
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	61fb      	str	r3, [r7, #28]
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	1c5a      	adds	r2, r3, #1
 800bf94:	61fa      	str	r2, [r7, #28]
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	1c5a      	adds	r2, r3, #1
 800bf9e:	61ba      	str	r2, [r7, #24]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	1acb      	subs	r3, r1, r3
 800bfa4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	607b      	str	r3, [r7, #4]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d002      	beq.n	800bfb8 <mem_cmp+0x40>
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d0eb      	beq.n	800bf90 <mem_cmp+0x18>

	return r;
 800bfb8:	697b      	ldr	r3, [r7, #20]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3724      	adds	r7, #36	; 0x24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr

0800bfc6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bfc6:	b480      	push	{r7}
 800bfc8:	b083      	sub	sp, #12
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bfd0:	e002      	b.n	800bfd8 <chk_chr+0x12>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	607b      	str	r3, [r7, #4]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d005      	beq.n	800bfec <chk_chr+0x26>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d1f2      	bne.n	800bfd2 <chk_chr+0xc>
	return *str;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	781b      	ldrb	r3, [r3, #0]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c006:	2300      	movs	r3, #0
 800c008:	60bb      	str	r3, [r7, #8]
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	60fb      	str	r3, [r7, #12]
 800c00e:	e029      	b.n	800c064 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c010:	4a27      	ldr	r2, [pc, #156]	; (800c0b0 <chk_lock+0xb4>)
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	011b      	lsls	r3, r3, #4
 800c016:	4413      	add	r3, r2
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d01d      	beq.n	800c05a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c01e:	4a24      	ldr	r2, [pc, #144]	; (800c0b0 <chk_lock+0xb4>)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	011b      	lsls	r3, r3, #4
 800c024:	4413      	add	r3, r2
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d116      	bne.n	800c05e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c030:	4a1f      	ldr	r2, [pc, #124]	; (800c0b0 <chk_lock+0xb4>)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	011b      	lsls	r3, r3, #4
 800c036:	4413      	add	r3, r2
 800c038:	3304      	adds	r3, #4
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c040:	429a      	cmp	r2, r3
 800c042:	d10c      	bne.n	800c05e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c044:	4a1a      	ldr	r2, [pc, #104]	; (800c0b0 <chk_lock+0xb4>)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	011b      	lsls	r3, r3, #4
 800c04a:	4413      	add	r3, r2
 800c04c:	3308      	adds	r3, #8
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c054:	429a      	cmp	r2, r3
 800c056:	d102      	bne.n	800c05e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c058:	e007      	b.n	800c06a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c05a:	2301      	movs	r3, #1
 800c05c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	3301      	adds	r3, #1
 800c062:	60fb      	str	r3, [r7, #12]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d9d2      	bls.n	800c010 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2b02      	cmp	r3, #2
 800c06e:	d109      	bne.n	800c084 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d102      	bne.n	800c07c <chk_lock+0x80>
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d101      	bne.n	800c080 <chk_lock+0x84>
 800c07c:	2300      	movs	r3, #0
 800c07e:	e010      	b.n	800c0a2 <chk_lock+0xa6>
 800c080:	2312      	movs	r3, #18
 800c082:	e00e      	b.n	800c0a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d108      	bne.n	800c09c <chk_lock+0xa0>
 800c08a:	4a09      	ldr	r2, [pc, #36]	; (800c0b0 <chk_lock+0xb4>)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	011b      	lsls	r3, r3, #4
 800c090:	4413      	add	r3, r2
 800c092:	330c      	adds	r3, #12
 800c094:	881b      	ldrh	r3, [r3, #0]
 800c096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c09a:	d101      	bne.n	800c0a0 <chk_lock+0xa4>
 800c09c:	2310      	movs	r3, #16
 800c09e:	e000      	b.n	800c0a2 <chk_lock+0xa6>
 800c0a0:	2300      	movs	r3, #0
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	20003260 	.word	0x20003260

0800c0b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	607b      	str	r3, [r7, #4]
 800c0be:	e002      	b.n	800c0c6 <enq_lock+0x12>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	607b      	str	r3, [r7, #4]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d806      	bhi.n	800c0da <enq_lock+0x26>
 800c0cc:	4a09      	ldr	r2, [pc, #36]	; (800c0f4 <enq_lock+0x40>)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	011b      	lsls	r3, r3, #4
 800c0d2:	4413      	add	r3, r2
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1f2      	bne.n	800c0c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	bf14      	ite	ne
 800c0e0:	2301      	movne	r3, #1
 800c0e2:	2300      	moveq	r3, #0
 800c0e4:	b2db      	uxtb	r3, r3
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	370c      	adds	r7, #12
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop
 800c0f4:	20003260 	.word	0x20003260

0800c0f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c102:	2300      	movs	r3, #0
 800c104:	60fb      	str	r3, [r7, #12]
 800c106:	e01f      	b.n	800c148 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c108:	4a41      	ldr	r2, [pc, #260]	; (800c210 <inc_lock+0x118>)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	011b      	lsls	r3, r3, #4
 800c10e:	4413      	add	r3, r2
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	429a      	cmp	r2, r3
 800c118:	d113      	bne.n	800c142 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c11a:	4a3d      	ldr	r2, [pc, #244]	; (800c210 <inc_lock+0x118>)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	011b      	lsls	r3, r3, #4
 800c120:	4413      	add	r3, r2
 800c122:	3304      	adds	r3, #4
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d109      	bne.n	800c142 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c12e:	4a38      	ldr	r2, [pc, #224]	; (800c210 <inc_lock+0x118>)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	011b      	lsls	r3, r3, #4
 800c134:	4413      	add	r3, r2
 800c136:	3308      	adds	r3, #8
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c13e:	429a      	cmp	r2, r3
 800c140:	d006      	beq.n	800c150 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	3301      	adds	r3, #1
 800c146:	60fb      	str	r3, [r7, #12]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d9dc      	bls.n	800c108 <inc_lock+0x10>
 800c14e:	e000      	b.n	800c152 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c150:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2b02      	cmp	r3, #2
 800c156:	d132      	bne.n	800c1be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c158:	2300      	movs	r3, #0
 800c15a:	60fb      	str	r3, [r7, #12]
 800c15c:	e002      	b.n	800c164 <inc_lock+0x6c>
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	3301      	adds	r3, #1
 800c162:	60fb      	str	r3, [r7, #12]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2b01      	cmp	r3, #1
 800c168:	d806      	bhi.n	800c178 <inc_lock+0x80>
 800c16a:	4a29      	ldr	r2, [pc, #164]	; (800c210 <inc_lock+0x118>)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	011b      	lsls	r3, r3, #4
 800c170:	4413      	add	r3, r2
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1f2      	bne.n	800c15e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2b02      	cmp	r3, #2
 800c17c:	d101      	bne.n	800c182 <inc_lock+0x8a>
 800c17e:	2300      	movs	r3, #0
 800c180:	e040      	b.n	800c204 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	4922      	ldr	r1, [pc, #136]	; (800c210 <inc_lock+0x118>)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	011b      	lsls	r3, r3, #4
 800c18c:	440b      	add	r3, r1
 800c18e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	689a      	ldr	r2, [r3, #8]
 800c194:	491e      	ldr	r1, [pc, #120]	; (800c210 <inc_lock+0x118>)
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	011b      	lsls	r3, r3, #4
 800c19a:	440b      	add	r3, r1
 800c19c:	3304      	adds	r3, #4
 800c19e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	695a      	ldr	r2, [r3, #20]
 800c1a4:	491a      	ldr	r1, [pc, #104]	; (800c210 <inc_lock+0x118>)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	011b      	lsls	r3, r3, #4
 800c1aa:	440b      	add	r3, r1
 800c1ac:	3308      	adds	r3, #8
 800c1ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c1b0:	4a17      	ldr	r2, [pc, #92]	; (800c210 <inc_lock+0x118>)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	011b      	lsls	r3, r3, #4
 800c1b6:	4413      	add	r3, r2
 800c1b8:	330c      	adds	r3, #12
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d009      	beq.n	800c1d8 <inc_lock+0xe0>
 800c1c4:	4a12      	ldr	r2, [pc, #72]	; (800c210 <inc_lock+0x118>)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	011b      	lsls	r3, r3, #4
 800c1ca:	4413      	add	r3, r2
 800c1cc:	330c      	adds	r3, #12
 800c1ce:	881b      	ldrh	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d001      	beq.n	800c1d8 <inc_lock+0xe0>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	e015      	b.n	800c204 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d108      	bne.n	800c1f0 <inc_lock+0xf8>
 800c1de:	4a0c      	ldr	r2, [pc, #48]	; (800c210 <inc_lock+0x118>)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	011b      	lsls	r3, r3, #4
 800c1e4:	4413      	add	r3, r2
 800c1e6:	330c      	adds	r3, #12
 800c1e8:	881b      	ldrh	r3, [r3, #0]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	b29a      	uxth	r2, r3
 800c1ee:	e001      	b.n	800c1f4 <inc_lock+0xfc>
 800c1f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1f4:	4906      	ldr	r1, [pc, #24]	; (800c210 <inc_lock+0x118>)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	011b      	lsls	r3, r3, #4
 800c1fa:	440b      	add	r3, r1
 800c1fc:	330c      	adds	r3, #12
 800c1fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	3301      	adds	r3, #1
}
 800c204:	4618      	mov	r0, r3
 800c206:	3714      	adds	r7, #20
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr
 800c210:	20003260 	.word	0x20003260

0800c214 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c214:	b480      	push	{r7}
 800c216:	b085      	sub	sp, #20
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	3b01      	subs	r3, #1
 800c220:	607b      	str	r3, [r7, #4]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2b01      	cmp	r3, #1
 800c226:	d825      	bhi.n	800c274 <dec_lock+0x60>
		n = Files[i].ctr;
 800c228:	4a17      	ldr	r2, [pc, #92]	; (800c288 <dec_lock+0x74>)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	011b      	lsls	r3, r3, #4
 800c22e:	4413      	add	r3, r2
 800c230:	330c      	adds	r3, #12
 800c232:	881b      	ldrh	r3, [r3, #0]
 800c234:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c236:	89fb      	ldrh	r3, [r7, #14]
 800c238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c23c:	d101      	bne.n	800c242 <dec_lock+0x2e>
 800c23e:	2300      	movs	r3, #0
 800c240:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c242:	89fb      	ldrh	r3, [r7, #14]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d002      	beq.n	800c24e <dec_lock+0x3a>
 800c248:	89fb      	ldrh	r3, [r7, #14]
 800c24a:	3b01      	subs	r3, #1
 800c24c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c24e:	4a0e      	ldr	r2, [pc, #56]	; (800c288 <dec_lock+0x74>)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	011b      	lsls	r3, r3, #4
 800c254:	4413      	add	r3, r2
 800c256:	330c      	adds	r3, #12
 800c258:	89fa      	ldrh	r2, [r7, #14]
 800c25a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c25c:	89fb      	ldrh	r3, [r7, #14]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d105      	bne.n	800c26e <dec_lock+0x5a>
 800c262:	4a09      	ldr	r2, [pc, #36]	; (800c288 <dec_lock+0x74>)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	011b      	lsls	r3, r3, #4
 800c268:	4413      	add	r3, r2
 800c26a:	2200      	movs	r2, #0
 800c26c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c26e:	2300      	movs	r3, #0
 800c270:	737b      	strb	r3, [r7, #13]
 800c272:	e001      	b.n	800c278 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c274:	2302      	movs	r3, #2
 800c276:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c278:	7b7b      	ldrb	r3, [r7, #13]
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3714      	adds	r7, #20
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	20003260 	.word	0x20003260

0800c28c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c294:	2300      	movs	r3, #0
 800c296:	60fb      	str	r3, [r7, #12]
 800c298:	e010      	b.n	800c2bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c29a:	4a0d      	ldr	r2, [pc, #52]	; (800c2d0 <clear_lock+0x44>)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	011b      	lsls	r3, r3, #4
 800c2a0:	4413      	add	r3, r2
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d105      	bne.n	800c2b6 <clear_lock+0x2a>
 800c2aa:	4a09      	ldr	r2, [pc, #36]	; (800c2d0 <clear_lock+0x44>)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	011b      	lsls	r3, r3, #4
 800c2b0:	4413      	add	r3, r2
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	60fb      	str	r3, [r7, #12]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d9eb      	bls.n	800c29a <clear_lock+0xe>
	}
}
 800c2c2:	bf00      	nop
 800c2c4:	bf00      	nop
 800c2c6:	3714      	adds	r7, #20
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr
 800c2d0:	20003260 	.word	0x20003260

0800c2d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	78db      	ldrb	r3, [r3, #3]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d034      	beq.n	800c352 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	7858      	ldrb	r0, [r3, #1]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	697a      	ldr	r2, [r7, #20]
 800c2fc:	f7ff fd40 	bl	800bd80 <disk_write>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	d002      	beq.n	800c30c <sync_window+0x38>
			res = FR_DISK_ERR;
 800c306:	2301      	movs	r3, #1
 800c308:	73fb      	strb	r3, [r7, #15]
 800c30a:	e022      	b.n	800c352 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	1ad2      	subs	r2, r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	69db      	ldr	r3, [r3, #28]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d217      	bcs.n	800c352 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	789b      	ldrb	r3, [r3, #2]
 800c326:	613b      	str	r3, [r7, #16]
 800c328:	e010      	b.n	800c34c <sync_window+0x78>
					wsect += fs->fsize;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	69db      	ldr	r3, [r3, #28]
 800c32e:	697a      	ldr	r2, [r7, #20]
 800c330:	4413      	add	r3, r2
 800c332:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	7858      	ldrb	r0, [r3, #1]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c33e:	2301      	movs	r3, #1
 800c340:	697a      	ldr	r2, [r7, #20]
 800c342:	f7ff fd1d 	bl	800bd80 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	3b01      	subs	r3, #1
 800c34a:	613b      	str	r3, [r7, #16]
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d8eb      	bhi.n	800c32a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c352:	7bfb      	ldrb	r3, [r7, #15]
}
 800c354:	4618      	mov	r0, r3
 800c356:	3718      	adds	r7, #24
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c366:	2300      	movs	r3, #0
 800c368:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c36e:	683a      	ldr	r2, [r7, #0]
 800c370:	429a      	cmp	r2, r3
 800c372:	d01b      	beq.n	800c3ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f7ff ffad 	bl	800c2d4 <sync_window>
 800c37a:	4603      	mov	r3, r0
 800c37c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c37e:	7bfb      	ldrb	r3, [r7, #15]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d113      	bne.n	800c3ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	7858      	ldrb	r0, [r3, #1]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c38e:	2301      	movs	r3, #1
 800c390:	683a      	ldr	r2, [r7, #0]
 800c392:	f7ff fcd5 	bl	800bd40 <disk_read>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d004      	beq.n	800c3a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c39c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	683a      	ldr	r2, [r7, #0]
 800c3aa:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
	...

0800c3b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f7ff ff87 	bl	800c2d4 <sync_window>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c3ca:	7bfb      	ldrb	r3, [r7, #15]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d158      	bne.n	800c482 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	2b03      	cmp	r3, #3
 800c3d6:	d148      	bne.n	800c46a <sync_fs+0xb2>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	791b      	ldrb	r3, [r3, #4]
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d144      	bne.n	800c46a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	3334      	adds	r3, #52	; 0x34
 800c3e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7ff fda9 	bl	800bf42 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	3334      	adds	r3, #52	; 0x34
 800c3f4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c3f8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7ff fd38 	bl	800be72 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	3334      	adds	r3, #52	; 0x34
 800c406:	4921      	ldr	r1, [pc, #132]	; (800c48c <sync_fs+0xd4>)
 800c408:	4618      	mov	r0, r3
 800c40a:	f7ff fd4d 	bl	800bea8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	3334      	adds	r3, #52	; 0x34
 800c412:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c416:	491e      	ldr	r1, [pc, #120]	; (800c490 <sync_fs+0xd8>)
 800c418:	4618      	mov	r0, r3
 800c41a:	f7ff fd45 	bl	800bea8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	3334      	adds	r3, #52	; 0x34
 800c422:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	695b      	ldr	r3, [r3, #20]
 800c42a:	4619      	mov	r1, r3
 800c42c:	4610      	mov	r0, r2
 800c42e:	f7ff fd3b 	bl	800bea8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	3334      	adds	r3, #52	; 0x34
 800c436:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	4619      	mov	r1, r3
 800c440:	4610      	mov	r0, r2
 800c442:	f7ff fd31 	bl	800bea8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6a1b      	ldr	r3, [r3, #32]
 800c44a:	1c5a      	adds	r2, r3, #1
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	7858      	ldrb	r0, [r3, #1]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c45e:	2301      	movs	r3, #1
 800c460:	f7ff fc8e 	bl	800bd80 <disk_write>
			fs->fsi_flag = 0;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	785b      	ldrb	r3, [r3, #1]
 800c46e:	2200      	movs	r2, #0
 800c470:	2100      	movs	r1, #0
 800c472:	4618      	mov	r0, r3
 800c474:	f7ff fca4 	bl	800bdc0 <disk_ioctl>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d001      	beq.n	800c482 <sync_fs+0xca>
 800c47e:	2301      	movs	r3, #1
 800c480:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c482:	7bfb      	ldrb	r3, [r7, #15]
}
 800c484:	4618      	mov	r0, r3
 800c486:	3710      	adds	r7, #16
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	41615252 	.word	0x41615252
 800c490:	61417272 	.word	0x61417272

0800c494 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	3b02      	subs	r3, #2
 800c4a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	699b      	ldr	r3, [r3, #24]
 800c4a8:	3b02      	subs	r3, #2
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d301      	bcc.n	800c4b4 <clust2sect+0x20>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	e008      	b.n	800c4c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	895b      	ldrh	r3, [r3, #10]
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	fb03 f202 	mul.w	r2, r3, r2
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c4:	4413      	add	r3, r2
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b086      	sub	sp, #24
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d904      	bls.n	800c4f2 <get_fat+0x20>
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	683a      	ldr	r2, [r7, #0]
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d302      	bcc.n	800c4f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	617b      	str	r3, [r7, #20]
 800c4f6:	e08f      	b.n	800c618 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c4f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	2b03      	cmp	r3, #3
 800c504:	d062      	beq.n	800c5cc <get_fat+0xfa>
 800c506:	2b03      	cmp	r3, #3
 800c508:	dc7c      	bgt.n	800c604 <get_fat+0x132>
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d002      	beq.n	800c514 <get_fat+0x42>
 800c50e:	2b02      	cmp	r3, #2
 800c510:	d042      	beq.n	800c598 <get_fat+0xc6>
 800c512:	e077      	b.n	800c604 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	60fb      	str	r3, [r7, #12]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	085b      	lsrs	r3, r3, #1
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	4413      	add	r3, r2
 800c520:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	0a5b      	lsrs	r3, r3, #9
 800c52a:	4413      	add	r3, r2
 800c52c:	4619      	mov	r1, r3
 800c52e:	6938      	ldr	r0, [r7, #16]
 800c530:	f7ff ff14 	bl	800c35c <move_window>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d167      	bne.n	800c60a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	60fa      	str	r2, [r7, #12]
 800c540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c544:	693a      	ldr	r2, [r7, #16]
 800c546:	4413      	add	r3, r2
 800c548:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c54c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	0a5b      	lsrs	r3, r3, #9
 800c556:	4413      	add	r3, r2
 800c558:	4619      	mov	r1, r3
 800c55a:	6938      	ldr	r0, [r7, #16]
 800c55c:	f7ff fefe 	bl	800c35c <move_window>
 800c560:	4603      	mov	r3, r0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d153      	bne.n	800c60e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c56c:	693a      	ldr	r2, [r7, #16]
 800c56e:	4413      	add	r3, r2
 800c570:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c574:	021b      	lsls	r3, r3, #8
 800c576:	461a      	mov	r2, r3
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	f003 0301 	and.w	r3, r3, #1
 800c584:	2b00      	cmp	r3, #0
 800c586:	d002      	beq.n	800c58e <get_fat+0xbc>
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	091b      	lsrs	r3, r3, #4
 800c58c:	e002      	b.n	800c594 <get_fat+0xc2>
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c594:	617b      	str	r3, [r7, #20]
			break;
 800c596:	e03f      	b.n	800c618 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	0a1b      	lsrs	r3, r3, #8
 800c5a0:	4413      	add	r3, r2
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	6938      	ldr	r0, [r7, #16]
 800c5a6:	f7ff fed9 	bl	800c35c <move_window>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d130      	bne.n	800c612 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c5be:	4413      	add	r3, r2
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7ff fc1b 	bl	800bdfc <ld_word>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	617b      	str	r3, [r7, #20]
			break;
 800c5ca:	e025      	b.n	800c618 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	09db      	lsrs	r3, r3, #7
 800c5d4:	4413      	add	r3, r2
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	6938      	ldr	r0, [r7, #16]
 800c5da:	f7ff febf 	bl	800c35c <move_window>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d118      	bne.n	800c616 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c5f2:	4413      	add	r3, r2
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7ff fc19 	bl	800be2c <ld_dword>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c600:	617b      	str	r3, [r7, #20]
			break;
 800c602:	e009      	b.n	800c618 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c604:	2301      	movs	r3, #1
 800c606:	617b      	str	r3, [r7, #20]
 800c608:	e006      	b.n	800c618 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c60a:	bf00      	nop
 800c60c:	e004      	b.n	800c618 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c60e:	bf00      	nop
 800c610:	e002      	b.n	800c618 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c612:	bf00      	nop
 800c614:	e000      	b.n	800c618 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c616:	bf00      	nop
		}
	}

	return val;
 800c618:	697b      	ldr	r3, [r7, #20]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3718      	adds	r7, #24
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c622:	b590      	push	{r4, r7, lr}
 800c624:	b089      	sub	sp, #36	; 0x24
 800c626:	af00      	add	r7, sp, #0
 800c628:	60f8      	str	r0, [r7, #12]
 800c62a:	60b9      	str	r1, [r7, #8]
 800c62c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c62e:	2302      	movs	r3, #2
 800c630:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	2b01      	cmp	r3, #1
 800c636:	f240 80d9 	bls.w	800c7ec <put_fat+0x1ca>
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	699b      	ldr	r3, [r3, #24]
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	429a      	cmp	r2, r3
 800c642:	f080 80d3 	bcs.w	800c7ec <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	2b03      	cmp	r3, #3
 800c64c:	f000 8096 	beq.w	800c77c <put_fat+0x15a>
 800c650:	2b03      	cmp	r3, #3
 800c652:	f300 80cb 	bgt.w	800c7ec <put_fat+0x1ca>
 800c656:	2b01      	cmp	r3, #1
 800c658:	d002      	beq.n	800c660 <put_fat+0x3e>
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d06e      	beq.n	800c73c <put_fat+0x11a>
 800c65e:	e0c5      	b.n	800c7ec <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	61bb      	str	r3, [r7, #24]
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	085b      	lsrs	r3, r3, #1
 800c668:	69ba      	ldr	r2, [r7, #24]
 800c66a:	4413      	add	r3, r2
 800c66c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	0a5b      	lsrs	r3, r3, #9
 800c676:	4413      	add	r3, r2
 800c678:	4619      	mov	r1, r3
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f7ff fe6e 	bl	800c35c <move_window>
 800c680:	4603      	mov	r3, r0
 800c682:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c684:	7ffb      	ldrb	r3, [r7, #31]
 800c686:	2b00      	cmp	r3, #0
 800c688:	f040 80a9 	bne.w	800c7de <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	1c59      	adds	r1, r3, #1
 800c696:	61b9      	str	r1, [r7, #24]
 800c698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c69c:	4413      	add	r3, r2
 800c69e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	f003 0301 	and.w	r3, r3, #1
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00d      	beq.n	800c6c6 <put_fat+0xa4>
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	b25b      	sxtb	r3, r3
 800c6b0:	f003 030f 	and.w	r3, r3, #15
 800c6b4:	b25a      	sxtb	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	011b      	lsls	r3, r3, #4
 800c6bc:	b25b      	sxtb	r3, r3
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	b25b      	sxtb	r3, r3
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	e001      	b.n	800c6ca <put_fat+0xa8>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	697a      	ldr	r2, [r7, #20]
 800c6cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	0a5b      	lsrs	r3, r3, #9
 800c6dc:	4413      	add	r3, r2
 800c6de:	4619      	mov	r1, r3
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f7ff fe3b 	bl	800c35c <move_window>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c6ea:	7ffb      	ldrb	r3, [r7, #31]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d178      	bne.n	800c7e2 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6fc:	4413      	add	r3, r2
 800c6fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	f003 0301 	and.w	r3, r3, #1
 800c706:	2b00      	cmp	r3, #0
 800c708:	d003      	beq.n	800c712 <put_fat+0xf0>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	091b      	lsrs	r3, r3, #4
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	e00e      	b.n	800c730 <put_fat+0x10e>
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	b25b      	sxtb	r3, r3
 800c718:	f023 030f 	bic.w	r3, r3, #15
 800c71c:	b25a      	sxtb	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	0a1b      	lsrs	r3, r3, #8
 800c722:	b25b      	sxtb	r3, r3
 800c724:	f003 030f 	and.w	r3, r3, #15
 800c728:	b25b      	sxtb	r3, r3
 800c72a:	4313      	orrs	r3, r2
 800c72c:	b25b      	sxtb	r3, r3
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	697a      	ldr	r2, [r7, #20]
 800c732:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2201      	movs	r2, #1
 800c738:	70da      	strb	r2, [r3, #3]
			break;
 800c73a:	e057      	b.n	800c7ec <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	0a1b      	lsrs	r3, r3, #8
 800c744:	4413      	add	r3, r2
 800c746:	4619      	mov	r1, r3
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f7ff fe07 	bl	800c35c <move_window>
 800c74e:	4603      	mov	r3, r0
 800c750:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c752:	7ffb      	ldrb	r3, [r7, #31]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d146      	bne.n	800c7e6 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	005b      	lsls	r3, r3, #1
 800c762:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c766:	4413      	add	r3, r2
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	b292      	uxth	r2, r2
 800c76c:	4611      	mov	r1, r2
 800c76e:	4618      	mov	r0, r3
 800c770:	f7ff fb7f 	bl	800be72 <st_word>
			fs->wflag = 1;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2201      	movs	r2, #1
 800c778:	70da      	strb	r2, [r3, #3]
			break;
 800c77a:	e037      	b.n	800c7ec <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	09db      	lsrs	r3, r3, #7
 800c784:	4413      	add	r3, r2
 800c786:	4619      	mov	r1, r3
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f7ff fde7 	bl	800c35c <move_window>
 800c78e:	4603      	mov	r3, r0
 800c790:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c792:	7ffb      	ldrb	r3, [r7, #31]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d128      	bne.n	800c7ea <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c7ac:	4413      	add	r3, r2
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7ff fb3c 	bl	800be2c <ld_dword>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c7ba:	4323      	orrs	r3, r4
 800c7bc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c7cc:	4413      	add	r3, r2
 800c7ce:	6879      	ldr	r1, [r7, #4]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7ff fb69 	bl	800bea8 <st_dword>
			fs->wflag = 1;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	70da      	strb	r2, [r3, #3]
			break;
 800c7dc:	e006      	b.n	800c7ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c7de:	bf00      	nop
 800c7e0:	e004      	b.n	800c7ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c7e2:	bf00      	nop
 800c7e4:	e002      	b.n	800c7ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c7e6:	bf00      	nop
 800c7e8:	e000      	b.n	800c7ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c7ea:	bf00      	nop
		}
	}
	return res;
 800c7ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3724      	adds	r7, #36	; 0x24
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd90      	pop	{r4, r7, pc}

0800c7f6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b088      	sub	sp, #32
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	60f8      	str	r0, [r7, #12]
 800c7fe:	60b9      	str	r1, [r7, #8]
 800c800:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d904      	bls.n	800c81c <remove_chain+0x26>
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	699b      	ldr	r3, [r3, #24]
 800c816:	68ba      	ldr	r2, [r7, #8]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d301      	bcc.n	800c820 <remove_chain+0x2a>
 800c81c:	2302      	movs	r3, #2
 800c81e:	e04b      	b.n	800c8b8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00c      	beq.n	800c840 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c82a:	6879      	ldr	r1, [r7, #4]
 800c82c:	69b8      	ldr	r0, [r7, #24]
 800c82e:	f7ff fef8 	bl	800c622 <put_fat>
 800c832:	4603      	mov	r3, r0
 800c834:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c836:	7ffb      	ldrb	r3, [r7, #31]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d001      	beq.n	800c840 <remove_chain+0x4a>
 800c83c:	7ffb      	ldrb	r3, [r7, #31]
 800c83e:	e03b      	b.n	800c8b8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c840:	68b9      	ldr	r1, [r7, #8]
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f7ff fe45 	bl	800c4d2 <get_fat>
 800c848:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d031      	beq.n	800c8b4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	2b01      	cmp	r3, #1
 800c854:	d101      	bne.n	800c85a <remove_chain+0x64>
 800c856:	2302      	movs	r3, #2
 800c858:	e02e      	b.n	800c8b8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c860:	d101      	bne.n	800c866 <remove_chain+0x70>
 800c862:	2301      	movs	r3, #1
 800c864:	e028      	b.n	800c8b8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c866:	2200      	movs	r2, #0
 800c868:	68b9      	ldr	r1, [r7, #8]
 800c86a:	69b8      	ldr	r0, [r7, #24]
 800c86c:	f7ff fed9 	bl	800c622 <put_fat>
 800c870:	4603      	mov	r3, r0
 800c872:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c874:	7ffb      	ldrb	r3, [r7, #31]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d001      	beq.n	800c87e <remove_chain+0x88>
 800c87a:	7ffb      	ldrb	r3, [r7, #31]
 800c87c:	e01c      	b.n	800c8b8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	695a      	ldr	r2, [r3, #20]
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	699b      	ldr	r3, [r3, #24]
 800c886:	3b02      	subs	r3, #2
 800c888:	429a      	cmp	r2, r3
 800c88a:	d20b      	bcs.n	800c8a4 <remove_chain+0xae>
			fs->free_clst++;
 800c88c:	69bb      	ldr	r3, [r7, #24]
 800c88e:	695b      	ldr	r3, [r3, #20]
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	791b      	ldrb	r3, [r3, #4]
 800c89a:	f043 0301 	orr.w	r3, r3, #1
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	699b      	ldr	r3, [r3, #24]
 800c8ac:	68ba      	ldr	r2, [r7, #8]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d3c6      	bcc.n	800c840 <remove_chain+0x4a>
 800c8b2:	e000      	b.n	800c8b6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c8b4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c8b6:	2300      	movs	r3, #0
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3720      	adds	r7, #32
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b088      	sub	sp, #32
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d10d      	bne.n	800c8f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d004      	beq.n	800c8ec <create_chain+0x2c>
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	699b      	ldr	r3, [r3, #24]
 800c8e6:	69ba      	ldr	r2, [r7, #24]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d31b      	bcc.n	800c924 <create_chain+0x64>
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	61bb      	str	r3, [r7, #24]
 800c8f0:	e018      	b.n	800c924 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c8f2:	6839      	ldr	r1, [r7, #0]
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f7ff fdec 	bl	800c4d2 <get_fat>
 800c8fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d801      	bhi.n	800c906 <create_chain+0x46>
 800c902:	2301      	movs	r3, #1
 800c904:	e070      	b.n	800c9e8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c90c:	d101      	bne.n	800c912 <create_chain+0x52>
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	e06a      	b.n	800c9e8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	699b      	ldr	r3, [r3, #24]
 800c916:	68fa      	ldr	r2, [r7, #12]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d201      	bcs.n	800c920 <create_chain+0x60>
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	e063      	b.n	800c9e8 <create_chain+0x128>
		scl = clst;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	3301      	adds	r3, #1
 800c92c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	699b      	ldr	r3, [r3, #24]
 800c932:	69fa      	ldr	r2, [r7, #28]
 800c934:	429a      	cmp	r2, r3
 800c936:	d307      	bcc.n	800c948 <create_chain+0x88>
				ncl = 2;
 800c938:	2302      	movs	r3, #2
 800c93a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c93c:	69fa      	ldr	r2, [r7, #28]
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	429a      	cmp	r2, r3
 800c942:	d901      	bls.n	800c948 <create_chain+0x88>
 800c944:	2300      	movs	r3, #0
 800c946:	e04f      	b.n	800c9e8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c948:	69f9      	ldr	r1, [r7, #28]
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f7ff fdc1 	bl	800c4d2 <get_fat>
 800c950:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00e      	beq.n	800c976 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d003      	beq.n	800c966 <create_chain+0xa6>
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c964:	d101      	bne.n	800c96a <create_chain+0xaa>
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	e03e      	b.n	800c9e8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c96a:	69fa      	ldr	r2, [r7, #28]
 800c96c:	69bb      	ldr	r3, [r7, #24]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d1da      	bne.n	800c928 <create_chain+0x68>
 800c972:	2300      	movs	r3, #0
 800c974:	e038      	b.n	800c9e8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c976:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c97c:	69f9      	ldr	r1, [r7, #28]
 800c97e:	6938      	ldr	r0, [r7, #16]
 800c980:	f7ff fe4f 	bl	800c622 <put_fat>
 800c984:	4603      	mov	r3, r0
 800c986:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c988:	7dfb      	ldrb	r3, [r7, #23]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d109      	bne.n	800c9a2 <create_chain+0xe2>
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d006      	beq.n	800c9a2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c994:	69fa      	ldr	r2, [r7, #28]
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	6938      	ldr	r0, [r7, #16]
 800c99a:	f7ff fe42 	bl	800c622 <put_fat>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c9a2:	7dfb      	ldrb	r3, [r7, #23]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d116      	bne.n	800c9d6 <create_chain+0x116>
		fs->last_clst = ncl;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	69fa      	ldr	r2, [r7, #28]
 800c9ac:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	695a      	ldr	r2, [r3, #20]
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	699b      	ldr	r3, [r3, #24]
 800c9b6:	3b02      	subs	r3, #2
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d804      	bhi.n	800c9c6 <create_chain+0x106>
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	695b      	ldr	r3, [r3, #20]
 800c9c0:	1e5a      	subs	r2, r3, #1
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	791b      	ldrb	r3, [r3, #4]
 800c9ca:	f043 0301 	orr.w	r3, r3, #1
 800c9ce:	b2da      	uxtb	r2, r3
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	711a      	strb	r2, [r3, #4]
 800c9d4:	e007      	b.n	800c9e6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c9d6:	7dfb      	ldrb	r3, [r7, #23]
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d102      	bne.n	800c9e2 <create_chain+0x122>
 800c9dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9e0:	e000      	b.n	800c9e4 <create_chain+0x124>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c9e6:	69fb      	ldr	r3, [r7, #28]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3720      	adds	r7, #32
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b087      	sub	sp, #28
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca04:	3304      	adds	r3, #4
 800ca06:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	0a5b      	lsrs	r3, r3, #9
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	8952      	ldrh	r2, [r2, #10]
 800ca10:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca14:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	1d1a      	adds	r2, r3, #4
 800ca1a:	613a      	str	r2, [r7, #16]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d101      	bne.n	800ca2a <clmt_clust+0x3a>
 800ca26:	2300      	movs	r3, #0
 800ca28:	e010      	b.n	800ca4c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ca2a:	697a      	ldr	r2, [r7, #20]
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d307      	bcc.n	800ca42 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ca32:	697a      	ldr	r2, [r7, #20]
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	1ad3      	subs	r3, r2, r3
 800ca38:	617b      	str	r3, [r7, #20]
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ca40:	e7e9      	b.n	800ca16 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ca42:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	4413      	add	r3, r2
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	371c      	adds	r7, #28
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca6e:	d204      	bcs.n	800ca7a <dir_sdi+0x22>
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	f003 031f 	and.w	r3, r3, #31
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d001      	beq.n	800ca7e <dir_sdi+0x26>
		return FR_INT_ERR;
 800ca7a:	2302      	movs	r3, #2
 800ca7c:	e063      	b.n	800cb46 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	683a      	ldr	r2, [r7, #0]
 800ca82:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d106      	bne.n	800ca9e <dir_sdi+0x46>
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	2b02      	cmp	r3, #2
 800ca96:	d902      	bls.n	800ca9e <dir_sdi+0x46>
		clst = fs->dirbase;
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d10c      	bne.n	800cabe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	095b      	lsrs	r3, r3, #5
 800caa8:	693a      	ldr	r2, [r7, #16]
 800caaa:	8912      	ldrh	r2, [r2, #8]
 800caac:	4293      	cmp	r3, r2
 800caae:	d301      	bcc.n	800cab4 <dir_sdi+0x5c>
 800cab0:	2302      	movs	r3, #2
 800cab2:	e048      	b.n	800cb46 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	61da      	str	r2, [r3, #28]
 800cabc:	e029      	b.n	800cb12 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	895b      	ldrh	r3, [r3, #10]
 800cac2:	025b      	lsls	r3, r3, #9
 800cac4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cac6:	e019      	b.n	800cafc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6979      	ldr	r1, [r7, #20]
 800cacc:	4618      	mov	r0, r3
 800cace:	f7ff fd00 	bl	800c4d2 <get_fat>
 800cad2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cada:	d101      	bne.n	800cae0 <dir_sdi+0x88>
 800cadc:	2301      	movs	r3, #1
 800cade:	e032      	b.n	800cb46 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d904      	bls.n	800caf0 <dir_sdi+0x98>
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	699b      	ldr	r3, [r3, #24]
 800caea:	697a      	ldr	r2, [r7, #20]
 800caec:	429a      	cmp	r2, r3
 800caee:	d301      	bcc.n	800caf4 <dir_sdi+0x9c>
 800caf0:	2302      	movs	r3, #2
 800caf2:	e028      	b.n	800cb46 <dir_sdi+0xee>
			ofs -= csz;
 800caf4:	683a      	ldr	r2, [r7, #0]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	1ad3      	subs	r3, r2, r3
 800cafa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cafc:	683a      	ldr	r2, [r7, #0]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d2e1      	bcs.n	800cac8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cb04:	6979      	ldr	r1, [r7, #20]
 800cb06:	6938      	ldr	r0, [r7, #16]
 800cb08:	f7ff fcc4 	bl	800c494 <clust2sect>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	697a      	ldr	r2, [r7, #20]
 800cb16:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	69db      	ldr	r3, [r3, #28]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d101      	bne.n	800cb24 <dir_sdi+0xcc>
 800cb20:	2302      	movs	r3, #2
 800cb22:	e010      	b.n	800cb46 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	69da      	ldr	r2, [r3, #28]
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	0a5b      	lsrs	r3, r3, #9
 800cb2c:	441a      	add	r2, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb3e:	441a      	add	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cb44:	2300      	movs	r3, #0
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3718      	adds	r7, #24
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b086      	sub	sp, #24
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
 800cb56:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	695b      	ldr	r3, [r3, #20]
 800cb62:	3320      	adds	r3, #32
 800cb64:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d003      	beq.n	800cb76 <dir_next+0x28>
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb74:	d301      	bcc.n	800cb7a <dir_next+0x2c>
 800cb76:	2304      	movs	r3, #4
 800cb78:	e0aa      	b.n	800ccd0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f040 8098 	bne.w	800ccb6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	69db      	ldr	r3, [r3, #28]
 800cb8a:	1c5a      	adds	r2, r3, #1
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	699b      	ldr	r3, [r3, #24]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10b      	bne.n	800cbb0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	095b      	lsrs	r3, r3, #5
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	8912      	ldrh	r2, [r2, #8]
 800cba0:	4293      	cmp	r3, r2
 800cba2:	f0c0 8088 	bcc.w	800ccb6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	61da      	str	r2, [r3, #28]
 800cbac:	2304      	movs	r3, #4
 800cbae:	e08f      	b.n	800ccd0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	0a5b      	lsrs	r3, r3, #9
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	8952      	ldrh	r2, [r2, #10]
 800cbb8:	3a01      	subs	r2, #1
 800cbba:	4013      	ands	r3, r2
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d17a      	bne.n	800ccb6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	699b      	ldr	r3, [r3, #24]
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	4610      	mov	r0, r2
 800cbca:	f7ff fc82 	bl	800c4d2 <get_fat>
 800cbce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d801      	bhi.n	800cbda <dir_next+0x8c>
 800cbd6:	2302      	movs	r3, #2
 800cbd8:	e07a      	b.n	800ccd0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbe0:	d101      	bne.n	800cbe6 <dir_next+0x98>
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	e074      	b.n	800ccd0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	699b      	ldr	r3, [r3, #24]
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d358      	bcc.n	800cca2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d104      	bne.n	800cc00 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	61da      	str	r2, [r3, #28]
 800cbfc:	2304      	movs	r3, #4
 800cbfe:	e067      	b.n	800ccd0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	699b      	ldr	r3, [r3, #24]
 800cc06:	4619      	mov	r1, r3
 800cc08:	4610      	mov	r0, r2
 800cc0a:	f7ff fe59 	bl	800c8c0 <create_chain>
 800cc0e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d101      	bne.n	800cc1a <dir_next+0xcc>
 800cc16:	2307      	movs	r3, #7
 800cc18:	e05a      	b.n	800ccd0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d101      	bne.n	800cc24 <dir_next+0xd6>
 800cc20:	2302      	movs	r3, #2
 800cc22:	e055      	b.n	800ccd0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc2a:	d101      	bne.n	800cc30 <dir_next+0xe2>
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	e04f      	b.n	800ccd0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	f7ff fb4f 	bl	800c2d4 <sync_window>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d001      	beq.n	800cc40 <dir_next+0xf2>
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e047      	b.n	800ccd0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	3334      	adds	r3, #52	; 0x34
 800cc44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc48:	2100      	movs	r1, #0
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7ff f979 	bl	800bf42 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cc50:	2300      	movs	r3, #0
 800cc52:	613b      	str	r3, [r7, #16]
 800cc54:	6979      	ldr	r1, [r7, #20]
 800cc56:	68f8      	ldr	r0, [r7, #12]
 800cc58:	f7ff fc1c 	bl	800c494 <clust2sect>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	631a      	str	r2, [r3, #48]	; 0x30
 800cc62:	e012      	b.n	800cc8a <dir_next+0x13c>
						fs->wflag = 1;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2201      	movs	r2, #1
 800cc68:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	f7ff fb32 	bl	800c2d4 <sync_window>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d001      	beq.n	800cc7a <dir_next+0x12c>
 800cc76:	2301      	movs	r3, #1
 800cc78:	e02a      	b.n	800ccd0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	613b      	str	r3, [r7, #16]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc84:	1c5a      	adds	r2, r3, #1
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	631a      	str	r2, [r3, #48]	; 0x30
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	895b      	ldrh	r3, [r3, #10]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d3e6      	bcc.n	800cc64 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	1ad2      	subs	r2, r2, r3
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	697a      	ldr	r2, [r7, #20]
 800cca6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cca8:	6979      	ldr	r1, [r7, #20]
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f7ff fbf2 	bl	800c494 <clust2sect>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccc8:	441a      	add	r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ccce:	2300      	movs	r3, #0
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3718      	adds	r7, #24
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cce8:	2100      	movs	r1, #0
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7ff feb4 	bl	800ca58 <dir_sdi>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ccf4:	7dfb      	ldrb	r3, [r7, #23]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d12b      	bne.n	800cd52 <dir_alloc+0x7a>
		n = 0;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	69db      	ldr	r3, [r3, #28]
 800cd02:	4619      	mov	r1, r3
 800cd04:	68f8      	ldr	r0, [r7, #12]
 800cd06:	f7ff fb29 	bl	800c35c <move_window>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cd0e:	7dfb      	ldrb	r3, [r7, #23]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d11d      	bne.n	800cd50 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6a1b      	ldr	r3, [r3, #32]
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	2be5      	cmp	r3, #229	; 0xe5
 800cd1c:	d004      	beq.n	800cd28 <dir_alloc+0x50>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6a1b      	ldr	r3, [r3, #32]
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d107      	bne.n	800cd38 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	613b      	str	r3, [r7, #16]
 800cd2e:	693a      	ldr	r2, [r7, #16]
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d102      	bne.n	800cd3c <dir_alloc+0x64>
 800cd36:	e00c      	b.n	800cd52 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cd38:	2300      	movs	r3, #0
 800cd3a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cd3c:	2101      	movs	r1, #1
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f7ff ff05 	bl	800cb4e <dir_next>
 800cd44:	4603      	mov	r3, r0
 800cd46:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cd48:	7dfb      	ldrb	r3, [r7, #23]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d0d7      	beq.n	800ccfe <dir_alloc+0x26>
 800cd4e:	e000      	b.n	800cd52 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cd50:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cd52:	7dfb      	ldrb	r3, [r7, #23]
 800cd54:	2b04      	cmp	r3, #4
 800cd56:	d101      	bne.n	800cd5c <dir_alloc+0x84>
 800cd58:	2307      	movs	r3, #7
 800cd5a:	75fb      	strb	r3, [r7, #23]
	return res;
 800cd5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3718      	adds	r7, #24
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b084      	sub	sp, #16
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
 800cd6e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	331a      	adds	r3, #26
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7ff f841 	bl	800bdfc <ld_word>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	2b03      	cmp	r3, #3
 800cd84:	d109      	bne.n	800cd9a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	3314      	adds	r3, #20
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7ff f836 	bl	800bdfc <ld_word>
 800cd90:	4603      	mov	r3, r0
 800cd92:	041b      	lsls	r3, r3, #16
 800cd94:	68fa      	ldr	r2, [r7, #12]
 800cd96:	4313      	orrs	r3, r2
 800cd98:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	331a      	adds	r3, #26
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	b292      	uxth	r2, r2
 800cdb8:	4611      	mov	r1, r2
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7ff f859 	bl	800be72 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b03      	cmp	r3, #3
 800cdc6:	d109      	bne.n	800cddc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	f103 0214 	add.w	r2, r3, #20
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	0c1b      	lsrs	r3, r3, #16
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	4610      	mov	r0, r2
 800cdd8:	f7ff f84b 	bl	800be72 <st_word>
	}
}
 800cddc:	bf00      	nop
 800cdde:	3710      	adds	r7, #16
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800cde4:	b590      	push	{r4, r7, lr}
 800cde6:	b087      	sub	sp, #28
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	331a      	adds	r3, #26
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7ff f802 	bl	800bdfc <ld_word>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d001      	beq.n	800ce02 <cmp_lfn+0x1e>
 800cdfe:	2300      	movs	r3, #0
 800ce00:	e059      	b.n	800ceb6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce0a:	1e5a      	subs	r2, r3, #1
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	005b      	lsls	r3, r3, #1
 800ce10:	4413      	add	r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	4413      	add	r3, r2
 800ce16:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ce18:	2301      	movs	r3, #1
 800ce1a:	81fb      	strh	r3, [r7, #14]
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	613b      	str	r3, [r7, #16]
 800ce20:	e033      	b.n	800ce8a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ce22:	4a27      	ldr	r2, [pc, #156]	; (800cec0 <cmp_lfn+0xdc>)
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	4413      	add	r3, r2
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	4413      	add	r3, r2
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7fe ffe3 	bl	800bdfc <ld_word>
 800ce36:	4603      	mov	r3, r0
 800ce38:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ce3a:	89fb      	ldrh	r3, [r7, #14]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d01a      	beq.n	800ce76 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	2bfe      	cmp	r3, #254	; 0xfe
 800ce44:	d812      	bhi.n	800ce6c <cmp_lfn+0x88>
 800ce46:	89bb      	ldrh	r3, [r7, #12]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f001 ffcd 	bl	800ede8 <ff_wtoupper>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	461c      	mov	r4, r3
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	1c5a      	adds	r2, r3, #1
 800ce56:	617a      	str	r2, [r7, #20]
 800ce58:	005b      	lsls	r3, r3, #1
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	881b      	ldrh	r3, [r3, #0]
 800ce60:	4618      	mov	r0, r3
 800ce62:	f001 ffc1 	bl	800ede8 <ff_wtoupper>
 800ce66:	4603      	mov	r3, r0
 800ce68:	429c      	cmp	r4, r3
 800ce6a:	d001      	beq.n	800ce70 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	e022      	b.n	800ceb6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ce70:	89bb      	ldrh	r3, [r7, #12]
 800ce72:	81fb      	strh	r3, [r7, #14]
 800ce74:	e006      	b.n	800ce84 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ce76:	89bb      	ldrh	r3, [r7, #12]
 800ce78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d001      	beq.n	800ce84 <cmp_lfn+0xa0>
 800ce80:	2300      	movs	r3, #0
 800ce82:	e018      	b.n	800ceb6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	3301      	adds	r3, #1
 800ce88:	613b      	str	r3, [r7, #16]
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	2b0c      	cmp	r3, #12
 800ce8e:	d9c8      	bls.n	800ce22 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d00b      	beq.n	800ceb4 <cmp_lfn+0xd0>
 800ce9c:	89fb      	ldrh	r3, [r7, #14]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d008      	beq.n	800ceb4 <cmp_lfn+0xd0>
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	4413      	add	r3, r2
 800ceaa:	881b      	ldrh	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d001      	beq.n	800ceb4 <cmp_lfn+0xd0>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	e000      	b.n	800ceb6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ceb4:	2301      	movs	r3, #1
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	371c      	adds	r7, #28
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd90      	pop	{r4, r7, pc}
 800cebe:	bf00      	nop
 800cec0:	080112f4 	.word	0x080112f4

0800cec4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b086      	sub	sp, #24
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	331a      	adds	r3, #26
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fe ff92 	bl	800bdfc <ld_word>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d001      	beq.n	800cee2 <pick_lfn+0x1e>
 800cede:	2300      	movs	r3, #0
 800cee0:	e04d      	b.n	800cf7e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ceea:	1e5a      	subs	r2, r3, #1
 800ceec:	4613      	mov	r3, r2
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	4413      	add	r3, r2
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	4413      	add	r3, r2
 800cef6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cef8:	2301      	movs	r3, #1
 800cefa:	81fb      	strh	r3, [r7, #14]
 800cefc:	2300      	movs	r3, #0
 800cefe:	613b      	str	r3, [r7, #16]
 800cf00:	e028      	b.n	800cf54 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cf02:	4a21      	ldr	r2, [pc, #132]	; (800cf88 <pick_lfn+0xc4>)
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	4413      	add	r3, r2
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	4413      	add	r3, r2
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fe ff73 	bl	800bdfc <ld_word>
 800cf16:	4603      	mov	r3, r0
 800cf18:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cf1a:	89fb      	ldrh	r3, [r7, #14]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00f      	beq.n	800cf40 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	2bfe      	cmp	r3, #254	; 0xfe
 800cf24:	d901      	bls.n	800cf2a <pick_lfn+0x66>
 800cf26:	2300      	movs	r3, #0
 800cf28:	e029      	b.n	800cf7e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800cf2a:	89bb      	ldrh	r3, [r7, #12]
 800cf2c:	81fb      	strh	r3, [r7, #14]
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	1c5a      	adds	r2, r3, #1
 800cf32:	617a      	str	r2, [r7, #20]
 800cf34:	005b      	lsls	r3, r3, #1
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	4413      	add	r3, r2
 800cf3a:	89fa      	ldrh	r2, [r7, #14]
 800cf3c:	801a      	strh	r2, [r3, #0]
 800cf3e:	e006      	b.n	800cf4e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cf40:	89bb      	ldrh	r3, [r7, #12]
 800cf42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d001      	beq.n	800cf4e <pick_lfn+0x8a>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	e017      	b.n	800cf7e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	3301      	adds	r3, #1
 800cf52:	613b      	str	r3, [r7, #16]
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	2b0c      	cmp	r3, #12
 800cf58:	d9d3      	bls.n	800cf02 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00a      	beq.n	800cf7c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	2bfe      	cmp	r3, #254	; 0xfe
 800cf6a:	d901      	bls.n	800cf70 <pick_lfn+0xac>
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	e006      	b.n	800cf7e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	005b      	lsls	r3, r3, #1
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	4413      	add	r3, r2
 800cf78:	2200      	movs	r2, #0
 800cf7a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800cf7c:	2301      	movs	r3, #1
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3718      	adds	r7, #24
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	080112f4 	.word	0x080112f4

0800cf8c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b088      	sub	sp, #32
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	4611      	mov	r1, r2
 800cf98:	461a      	mov	r2, r3
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	71fb      	strb	r3, [r7, #7]
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	330d      	adds	r3, #13
 800cfa6:	79ba      	ldrb	r2, [r7, #6]
 800cfa8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	330b      	adds	r3, #11
 800cfae:	220f      	movs	r2, #15
 800cfb0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	330c      	adds	r3, #12
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	331a      	adds	r3, #26
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fe ff56 	bl	800be72 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800cfc6:	79fb      	ldrb	r3, [r7, #7]
 800cfc8:	1e5a      	subs	r2, r3, #1
 800cfca:	4613      	mov	r3, r2
 800cfcc:	005b      	lsls	r3, r3, #1
 800cfce:	4413      	add	r3, r2
 800cfd0:	009b      	lsls	r3, r3, #2
 800cfd2:	4413      	add	r3, r2
 800cfd4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	82fb      	strh	r3, [r7, #22]
 800cfda:	2300      	movs	r3, #0
 800cfdc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cfde:	8afb      	ldrh	r3, [r7, #22]
 800cfe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d007      	beq.n	800cff8 <put_lfn+0x6c>
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	1c5a      	adds	r2, r3, #1
 800cfec:	61fa      	str	r2, [r7, #28]
 800cfee:	005b      	lsls	r3, r3, #1
 800cff0:	68fa      	ldr	r2, [r7, #12]
 800cff2:	4413      	add	r3, r2
 800cff4:	881b      	ldrh	r3, [r3, #0]
 800cff6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800cff8:	4a17      	ldr	r2, [pc, #92]	; (800d058 <put_lfn+0xcc>)
 800cffa:	69bb      	ldr	r3, [r7, #24]
 800cffc:	4413      	add	r3, r2
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	461a      	mov	r2, r3
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	4413      	add	r3, r2
 800d006:	8afa      	ldrh	r2, [r7, #22]
 800d008:	4611      	mov	r1, r2
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7fe ff31 	bl	800be72 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d010:	8afb      	ldrh	r3, [r7, #22]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d102      	bne.n	800d01c <put_lfn+0x90>
 800d016:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d01a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	3301      	adds	r3, #1
 800d020:	61bb      	str	r3, [r7, #24]
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	2b0c      	cmp	r3, #12
 800d026:	d9da      	bls.n	800cfde <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d028:	8afb      	ldrh	r3, [r7, #22]
 800d02a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d02e:	4293      	cmp	r3, r2
 800d030:	d006      	beq.n	800d040 <put_lfn+0xb4>
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	005b      	lsls	r3, r3, #1
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	4413      	add	r3, r2
 800d03a:	881b      	ldrh	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d103      	bne.n	800d048 <put_lfn+0xbc>
 800d040:	79fb      	ldrb	r3, [r7, #7]
 800d042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d046:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	79fa      	ldrb	r2, [r7, #7]
 800d04c:	701a      	strb	r2, [r3, #0]
}
 800d04e:	bf00      	nop
 800d050:	3720      	adds	r7, #32
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	080112f4 	.word	0x080112f4

0800d05c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b08c      	sub	sp, #48	; 0x30
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	607a      	str	r2, [r7, #4]
 800d068:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d06a:	220b      	movs	r2, #11
 800d06c:	68b9      	ldr	r1, [r7, #8]
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	f7fe ff46 	bl	800bf00 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	2b05      	cmp	r3, #5
 800d078:	d929      	bls.n	800d0ce <gen_numname+0x72>
		sr = seq;
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d07e:	e020      	b.n	800d0c2 <gen_numname+0x66>
			wc = *lfn++;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	1c9a      	adds	r2, r3, #2
 800d084:	607a      	str	r2, [r7, #4]
 800d086:	881b      	ldrh	r3, [r3, #0]
 800d088:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d08a:	2300      	movs	r3, #0
 800d08c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d08e:	e015      	b.n	800d0bc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	005a      	lsls	r2, r3, #1
 800d094:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d096:	f003 0301 	and.w	r3, r3, #1
 800d09a:	4413      	add	r3, r2
 800d09c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d09e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0a0:	085b      	lsrs	r3, r3, #1
 800d0a2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d003      	beq.n	800d0b6 <gen_numname+0x5a>
 800d0ae:	69fa      	ldr	r2, [r7, #28]
 800d0b0:	4b30      	ldr	r3, [pc, #192]	; (800d174 <gen_numname+0x118>)
 800d0b2:	4053      	eors	r3, r2
 800d0b4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0be:	2b0f      	cmp	r3, #15
 800d0c0:	d9e6      	bls.n	800d090 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	881b      	ldrh	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d1da      	bne.n	800d080 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d0ce:	2307      	movs	r3, #7
 800d0d0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	f003 030f 	and.w	r3, r3, #15
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	3330      	adds	r3, #48	; 0x30
 800d0de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d0e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0e6:	2b39      	cmp	r3, #57	; 0x39
 800d0e8:	d904      	bls.n	800d0f4 <gen_numname+0x98>
 800d0ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0ee:	3307      	adds	r3, #7
 800d0f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f6:	1e5a      	subs	r2, r3, #1
 800d0f8:	62ba      	str	r2, [r7, #40]	; 0x28
 800d0fa:	3330      	adds	r3, #48	; 0x30
 800d0fc:	443b      	add	r3, r7
 800d0fe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d102:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	091b      	lsrs	r3, r3, #4
 800d10a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d1df      	bne.n	800d0d2 <gen_numname+0x76>
	ns[i] = '~';
 800d112:	f107 0214 	add.w	r2, r7, #20
 800d116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d118:	4413      	add	r3, r2
 800d11a:	227e      	movs	r2, #126	; 0x7e
 800d11c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d11e:	2300      	movs	r3, #0
 800d120:	627b      	str	r3, [r7, #36]	; 0x24
 800d122:	e002      	b.n	800d12a <gen_numname+0xce>
 800d124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d126:	3301      	adds	r3, #1
 800d128:	627b      	str	r3, [r7, #36]	; 0x24
 800d12a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12e:	429a      	cmp	r2, r3
 800d130:	d205      	bcs.n	800d13e <gen_numname+0xe2>
 800d132:	68fa      	ldr	r2, [r7, #12]
 800d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d136:	4413      	add	r3, r2
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	2b20      	cmp	r3, #32
 800d13c:	d1f2      	bne.n	800d124 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d140:	2b07      	cmp	r3, #7
 800d142:	d807      	bhi.n	800d154 <gen_numname+0xf8>
 800d144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d146:	1c5a      	adds	r2, r3, #1
 800d148:	62ba      	str	r2, [r7, #40]	; 0x28
 800d14a:	3330      	adds	r3, #48	; 0x30
 800d14c:	443b      	add	r3, r7
 800d14e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d152:	e000      	b.n	800d156 <gen_numname+0xfa>
 800d154:	2120      	movs	r1, #32
 800d156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d158:	1c5a      	adds	r2, r3, #1
 800d15a:	627a      	str	r2, [r7, #36]	; 0x24
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	4413      	add	r3, r2
 800d160:	460a      	mov	r2, r1
 800d162:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d166:	2b07      	cmp	r3, #7
 800d168:	d9e9      	bls.n	800d13e <gen_numname+0xe2>
}
 800d16a:	bf00      	nop
 800d16c:	bf00      	nop
 800d16e:	3730      	adds	r7, #48	; 0x30
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	00011021 	.word	0x00011021

0800d178 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d180:	2300      	movs	r3, #0
 800d182:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d184:	230b      	movs	r3, #11
 800d186:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d188:	7bfb      	ldrb	r3, [r7, #15]
 800d18a:	b2da      	uxtb	r2, r3
 800d18c:	0852      	lsrs	r2, r2, #1
 800d18e:	01db      	lsls	r3, r3, #7
 800d190:	4313      	orrs	r3, r2
 800d192:	b2da      	uxtb	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	1c59      	adds	r1, r3, #1
 800d198:	6079      	str	r1, [r7, #4]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	4413      	add	r3, r2
 800d19e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	3b01      	subs	r3, #1
 800d1a4:	60bb      	str	r3, [r7, #8]
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1ed      	bne.n	800d188 <sum_sfn+0x10>
	return sum;
 800d1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3714      	adds	r7, #20
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr

0800d1ba <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b086      	sub	sp, #24
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
 800d1c2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d1c4:	2304      	movs	r3, #4
 800d1c6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d1ce:	23ff      	movs	r3, #255	; 0xff
 800d1d0:	757b      	strb	r3, [r7, #21]
 800d1d2:	23ff      	movs	r3, #255	; 0xff
 800d1d4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d1d6:	e081      	b.n	800d2dc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	69db      	ldr	r3, [r3, #28]
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6938      	ldr	r0, [r7, #16]
 800d1e0:	f7ff f8bc 	bl	800c35c <move_window>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d1e8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d17c      	bne.n	800d2e8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6a1b      	ldr	r3, [r3, #32]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d1f6:	7dbb      	ldrb	r3, [r7, #22]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d102      	bne.n	800d202 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d1fc:	2304      	movs	r3, #4
 800d1fe:	75fb      	strb	r3, [r7, #23]
 800d200:	e077      	b.n	800d2f2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6a1b      	ldr	r3, [r3, #32]
 800d206:	330b      	adds	r3, #11
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d20e:	73fb      	strb	r3, [r7, #15]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	7bfa      	ldrb	r2, [r7, #15]
 800d214:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d216:	7dbb      	ldrb	r3, [r7, #22]
 800d218:	2be5      	cmp	r3, #229	; 0xe5
 800d21a:	d00e      	beq.n	800d23a <dir_read+0x80>
 800d21c:	7dbb      	ldrb	r3, [r7, #22]
 800d21e:	2b2e      	cmp	r3, #46	; 0x2e
 800d220:	d00b      	beq.n	800d23a <dir_read+0x80>
 800d222:	7bfb      	ldrb	r3, [r7, #15]
 800d224:	f023 0320 	bic.w	r3, r3, #32
 800d228:	2b08      	cmp	r3, #8
 800d22a:	bf0c      	ite	eq
 800d22c:	2301      	moveq	r3, #1
 800d22e:	2300      	movne	r3, #0
 800d230:	b2db      	uxtb	r3, r3
 800d232:	461a      	mov	r2, r3
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	4293      	cmp	r3, r2
 800d238:	d002      	beq.n	800d240 <dir_read+0x86>
				ord = 0xFF;
 800d23a:	23ff      	movs	r3, #255	; 0xff
 800d23c:	757b      	strb	r3, [r7, #21]
 800d23e:	e044      	b.n	800d2ca <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d240:	7bfb      	ldrb	r3, [r7, #15]
 800d242:	2b0f      	cmp	r3, #15
 800d244:	d12f      	bne.n	800d2a6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d246:	7dbb      	ldrb	r3, [r7, #22]
 800d248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00d      	beq.n	800d26c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6a1b      	ldr	r3, [r3, #32]
 800d254:	7b5b      	ldrb	r3, [r3, #13]
 800d256:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d258:	7dbb      	ldrb	r3, [r7, #22]
 800d25a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d25e:	75bb      	strb	r3, [r7, #22]
 800d260:	7dbb      	ldrb	r3, [r7, #22]
 800d262:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	695a      	ldr	r2, [r3, #20]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d26c:	7dba      	ldrb	r2, [r7, #22]
 800d26e:	7d7b      	ldrb	r3, [r7, #21]
 800d270:	429a      	cmp	r2, r3
 800d272:	d115      	bne.n	800d2a0 <dir_read+0xe6>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6a1b      	ldr	r3, [r3, #32]
 800d278:	330d      	adds	r3, #13
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	7d3a      	ldrb	r2, [r7, #20]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d10e      	bne.n	800d2a0 <dir_read+0xe6>
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	68da      	ldr	r2, [r3, #12]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6a1b      	ldr	r3, [r3, #32]
 800d28a:	4619      	mov	r1, r3
 800d28c:	4610      	mov	r0, r2
 800d28e:	f7ff fe19 	bl	800cec4 <pick_lfn>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d003      	beq.n	800d2a0 <dir_read+0xe6>
 800d298:	7d7b      	ldrb	r3, [r7, #21]
 800d29a:	3b01      	subs	r3, #1
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	e000      	b.n	800d2a2 <dir_read+0xe8>
 800d2a0:	23ff      	movs	r3, #255	; 0xff
 800d2a2:	757b      	strb	r3, [r7, #21]
 800d2a4:	e011      	b.n	800d2ca <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d2a6:	7d7b      	ldrb	r3, [r7, #21]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d109      	bne.n	800d2c0 <dir_read+0x106>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6a1b      	ldr	r3, [r3, #32]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7ff ff61 	bl	800d178 <sum_sfn>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	7d3b      	ldrb	r3, [r7, #20]
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d015      	beq.n	800d2ec <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2c6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d2c8:	e010      	b.n	800d2ec <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d2ca:	2100      	movs	r1, #0
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f7ff fc3e 	bl	800cb4e <dir_next>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d2d6:	7dfb      	ldrb	r3, [r7, #23]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d109      	bne.n	800d2f0 <dir_read+0x136>
	while (dp->sect) {
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	69db      	ldr	r3, [r3, #28]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f47f af79 	bne.w	800d1d8 <dir_read+0x1e>
 800d2e6:	e004      	b.n	800d2f2 <dir_read+0x138>
		if (res != FR_OK) break;
 800d2e8:	bf00      	nop
 800d2ea:	e002      	b.n	800d2f2 <dir_read+0x138>
					break;
 800d2ec:	bf00      	nop
 800d2ee:	e000      	b.n	800d2f2 <dir_read+0x138>
		if (res != FR_OK) break;
 800d2f0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d2f2:	7dfb      	ldrb	r3, [r7, #23]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d002      	beq.n	800d2fe <dir_read+0x144>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	61da      	str	r2, [r3, #28]
	return res;
 800d2fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d300:	4618      	mov	r0, r3
 800d302:	3718      	adds	r7, #24
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b086      	sub	sp, #24
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d316:	2100      	movs	r1, #0
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f7ff fb9d 	bl	800ca58 <dir_sdi>
 800d31e:	4603      	mov	r3, r0
 800d320:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d322:	7dfb      	ldrb	r3, [r7, #23]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d001      	beq.n	800d32c <dir_find+0x24>
 800d328:	7dfb      	ldrb	r3, [r7, #23]
 800d32a:	e0a9      	b.n	800d480 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d32c:	23ff      	movs	r3, #255	; 0xff
 800d32e:	753b      	strb	r3, [r7, #20]
 800d330:	7d3b      	ldrb	r3, [r7, #20]
 800d332:	757b      	strb	r3, [r7, #21]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d33a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	69db      	ldr	r3, [r3, #28]
 800d340:	4619      	mov	r1, r3
 800d342:	6938      	ldr	r0, [r7, #16]
 800d344:	f7ff f80a 	bl	800c35c <move_window>
 800d348:	4603      	mov	r3, r0
 800d34a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f040 8090 	bne.w	800d474 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a1b      	ldr	r3, [r3, #32]
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d35c:	7dbb      	ldrb	r3, [r7, #22]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d102      	bne.n	800d368 <dir_find+0x60>
 800d362:	2304      	movs	r3, #4
 800d364:	75fb      	strb	r3, [r7, #23]
 800d366:	e08a      	b.n	800d47e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6a1b      	ldr	r3, [r3, #32]
 800d36c:	330b      	adds	r3, #11
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d374:	73fb      	strb	r3, [r7, #15]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	7bfa      	ldrb	r2, [r7, #15]
 800d37a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d37c:	7dbb      	ldrb	r3, [r7, #22]
 800d37e:	2be5      	cmp	r3, #229	; 0xe5
 800d380:	d007      	beq.n	800d392 <dir_find+0x8a>
 800d382:	7bfb      	ldrb	r3, [r7, #15]
 800d384:	f003 0308 	and.w	r3, r3, #8
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d009      	beq.n	800d3a0 <dir_find+0x98>
 800d38c:	7bfb      	ldrb	r3, [r7, #15]
 800d38e:	2b0f      	cmp	r3, #15
 800d390:	d006      	beq.n	800d3a0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d392:	23ff      	movs	r3, #255	; 0xff
 800d394:	757b      	strb	r3, [r7, #21]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d39c:	631a      	str	r2, [r3, #48]	; 0x30
 800d39e:	e05e      	b.n	800d45e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d3a0:	7bfb      	ldrb	r3, [r7, #15]
 800d3a2:	2b0f      	cmp	r3, #15
 800d3a4:	d136      	bne.n	800d414 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d154      	bne.n	800d45e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d3b4:	7dbb      	ldrb	r3, [r7, #22]
 800d3b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00d      	beq.n	800d3da <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6a1b      	ldr	r3, [r3, #32]
 800d3c2:	7b5b      	ldrb	r3, [r3, #13]
 800d3c4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d3c6:	7dbb      	ldrb	r3, [r7, #22]
 800d3c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3cc:	75bb      	strb	r3, [r7, #22]
 800d3ce:	7dbb      	ldrb	r3, [r7, #22]
 800d3d0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	695a      	ldr	r2, [r3, #20]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d3da:	7dba      	ldrb	r2, [r7, #22]
 800d3dc:	7d7b      	ldrb	r3, [r7, #21]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d115      	bne.n	800d40e <dir_find+0x106>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a1b      	ldr	r3, [r3, #32]
 800d3e6:	330d      	adds	r3, #13
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	7d3a      	ldrb	r2, [r7, #20]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d10e      	bne.n	800d40e <dir_find+0x106>
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	68da      	ldr	r2, [r3, #12]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6a1b      	ldr	r3, [r3, #32]
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	4610      	mov	r0, r2
 800d3fc:	f7ff fcf2 	bl	800cde4 <cmp_lfn>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d003      	beq.n	800d40e <dir_find+0x106>
 800d406:	7d7b      	ldrb	r3, [r7, #21]
 800d408:	3b01      	subs	r3, #1
 800d40a:	b2db      	uxtb	r3, r3
 800d40c:	e000      	b.n	800d410 <dir_find+0x108>
 800d40e:	23ff      	movs	r3, #255	; 0xff
 800d410:	757b      	strb	r3, [r7, #21]
 800d412:	e024      	b.n	800d45e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d414:	7d7b      	ldrb	r3, [r7, #21]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d109      	bne.n	800d42e <dir_find+0x126>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a1b      	ldr	r3, [r3, #32]
 800d41e:	4618      	mov	r0, r3
 800d420:	f7ff feaa 	bl	800d178 <sum_sfn>
 800d424:	4603      	mov	r3, r0
 800d426:	461a      	mov	r2, r3
 800d428:	7d3b      	ldrb	r3, [r7, #20]
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d024      	beq.n	800d478 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d434:	f003 0301 	and.w	r3, r3, #1
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d10a      	bne.n	800d452 <dir_find+0x14a>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6a18      	ldr	r0, [r3, #32]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	3324      	adds	r3, #36	; 0x24
 800d444:	220b      	movs	r2, #11
 800d446:	4619      	mov	r1, r3
 800d448:	f7fe fd96 	bl	800bf78 <mem_cmp>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d014      	beq.n	800d47c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d452:	23ff      	movs	r3, #255	; 0xff
 800d454:	757b      	strb	r3, [r7, #21]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d45c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d45e:	2100      	movs	r1, #0
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f7ff fb74 	bl	800cb4e <dir_next>
 800d466:	4603      	mov	r3, r0
 800d468:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d46a:	7dfb      	ldrb	r3, [r7, #23]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f43f af65 	beq.w	800d33c <dir_find+0x34>
 800d472:	e004      	b.n	800d47e <dir_find+0x176>
		if (res != FR_OK) break;
 800d474:	bf00      	nop
 800d476:	e002      	b.n	800d47e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d478:	bf00      	nop
 800d47a:	e000      	b.n	800d47e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d47c:	bf00      	nop

	return res;
 800d47e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3718      	adds	r7, #24
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b08c      	sub	sp, #48	; 0x30
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d49c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d001      	beq.n	800d4a8 <dir_register+0x20>
 800d4a4:	2306      	movs	r3, #6
 800d4a6:	e0e0      	b.n	800d66a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d4ac:	e002      	b.n	800d4b4 <dir_register+0x2c>
 800d4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	627b      	str	r3, [r7, #36]	; 0x24
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	68da      	ldr	r2, [r3, #12]
 800d4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ba:	005b      	lsls	r3, r3, #1
 800d4bc:	4413      	add	r3, r2
 800d4be:	881b      	ldrh	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d1f4      	bne.n	800d4ae <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d4ca:	f107 030c 	add.w	r3, r7, #12
 800d4ce:	220c      	movs	r2, #12
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7fe fd15 	bl	800bf00 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d4d6:	7dfb      	ldrb	r3, [r7, #23]
 800d4d8:	f003 0301 	and.w	r3, r3, #1
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d032      	beq.n	800d546 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2240      	movs	r2, #64	; 0x40
 800d4e4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4ec:	e016      	b.n	800d51c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	68da      	ldr	r2, [r3, #12]
 800d4f8:	f107 010c 	add.w	r1, r7, #12
 800d4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fe:	f7ff fdad 	bl	800d05c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f7ff ff00 	bl	800d308 <dir_find>
 800d508:	4603      	mov	r3, r0
 800d50a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d50e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d512:	2b00      	cmp	r3, #0
 800d514:	d106      	bne.n	800d524 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d518:	3301      	adds	r3, #1
 800d51a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51e:	2b63      	cmp	r3, #99	; 0x63
 800d520:	d9e5      	bls.n	800d4ee <dir_register+0x66>
 800d522:	e000      	b.n	800d526 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d524:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d528:	2b64      	cmp	r3, #100	; 0x64
 800d52a:	d101      	bne.n	800d530 <dir_register+0xa8>
 800d52c:	2307      	movs	r3, #7
 800d52e:	e09c      	b.n	800d66a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d530:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d534:	2b04      	cmp	r3, #4
 800d536:	d002      	beq.n	800d53e <dir_register+0xb6>
 800d538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d53c:	e095      	b.n	800d66a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d53e:	7dfa      	ldrb	r2, [r7, #23]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d546:	7dfb      	ldrb	r3, [r7, #23]
 800d548:	f003 0302 	and.w	r3, r3, #2
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d007      	beq.n	800d560 <dir_register+0xd8>
 800d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d552:	330c      	adds	r3, #12
 800d554:	4a47      	ldr	r2, [pc, #284]	; (800d674 <dir_register+0x1ec>)
 800d556:	fba2 2303 	umull	r2, r3, r2, r3
 800d55a:	089b      	lsrs	r3, r3, #2
 800d55c:	3301      	adds	r3, #1
 800d55e:	e000      	b.n	800d562 <dir_register+0xda>
 800d560:	2301      	movs	r3, #1
 800d562:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d564:	6a39      	ldr	r1, [r7, #32]
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7ff fbb6 	bl	800ccd8 <dir_alloc>
 800d56c:	4603      	mov	r3, r0
 800d56e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d572:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d576:	2b00      	cmp	r3, #0
 800d578:	d148      	bne.n	800d60c <dir_register+0x184>
 800d57a:	6a3b      	ldr	r3, [r7, #32]
 800d57c:	3b01      	subs	r3, #1
 800d57e:	623b      	str	r3, [r7, #32]
 800d580:	6a3b      	ldr	r3, [r7, #32]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d042      	beq.n	800d60c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	695a      	ldr	r2, [r3, #20]
 800d58a:	6a3b      	ldr	r3, [r7, #32]
 800d58c:	015b      	lsls	r3, r3, #5
 800d58e:	1ad3      	subs	r3, r2, r3
 800d590:	4619      	mov	r1, r3
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f7ff fa60 	bl	800ca58 <dir_sdi>
 800d598:	4603      	mov	r3, r0
 800d59a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d59e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d132      	bne.n	800d60c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	3324      	adds	r3, #36	; 0x24
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7ff fde4 	bl	800d178 <sum_sfn>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	69db      	ldr	r3, [r3, #28]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	69f8      	ldr	r0, [r7, #28]
 800d5bc:	f7fe fece 	bl	800c35c <move_window>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d5c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d11d      	bne.n	800d60a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	68d8      	ldr	r0, [r3, #12]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a19      	ldr	r1, [r3, #32]
 800d5d6:	6a3b      	ldr	r3, [r7, #32]
 800d5d8:	b2da      	uxtb	r2, r3
 800d5da:	7efb      	ldrb	r3, [r7, #27]
 800d5dc:	f7ff fcd6 	bl	800cf8c <put_lfn>
				fs->wflag = 1;
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d5e6:	2100      	movs	r1, #0
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7ff fab0 	bl	800cb4e <dir_next>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d5f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d107      	bne.n	800d60c <dir_register+0x184>
 800d5fc:	6a3b      	ldr	r3, [r7, #32]
 800d5fe:	3b01      	subs	r3, #1
 800d600:	623b      	str	r3, [r7, #32]
 800d602:	6a3b      	ldr	r3, [r7, #32]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d1d5      	bne.n	800d5b4 <dir_register+0x12c>
 800d608:	e000      	b.n	800d60c <dir_register+0x184>
				if (res != FR_OK) break;
 800d60a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d60c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d610:	2b00      	cmp	r3, #0
 800d612:	d128      	bne.n	800d666 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	69db      	ldr	r3, [r3, #28]
 800d618:	4619      	mov	r1, r3
 800d61a:	69f8      	ldr	r0, [r7, #28]
 800d61c:	f7fe fe9e 	bl	800c35c <move_window>
 800d620:	4603      	mov	r3, r0
 800d622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d11b      	bne.n	800d666 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6a1b      	ldr	r3, [r3, #32]
 800d632:	2220      	movs	r2, #32
 800d634:	2100      	movs	r1, #0
 800d636:	4618      	mov	r0, r3
 800d638:	f7fe fc83 	bl	800bf42 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6a18      	ldr	r0, [r3, #32]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	3324      	adds	r3, #36	; 0x24
 800d644:	220b      	movs	r2, #11
 800d646:	4619      	mov	r1, r3
 800d648:	f7fe fc5a 	bl	800bf00 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6a1b      	ldr	r3, [r3, #32]
 800d656:	330c      	adds	r3, #12
 800d658:	f002 0218 	and.w	r2, r2, #24
 800d65c:	b2d2      	uxtb	r2, r2
 800d65e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d660:	69fb      	ldr	r3, [r7, #28]
 800d662:	2201      	movs	r2, #1
 800d664:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d666:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3730      	adds	r7, #48	; 0x30
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	4ec4ec4f 	.word	0x4ec4ec4f

0800d678 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b088      	sub	sp, #32
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	2200      	movs	r2, #0
 800d68c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	69db      	ldr	r3, [r3, #28]
 800d692:	2b00      	cmp	r3, #0
 800d694:	f000 80c9 	beq.w	800d82a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d69c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6a0:	d032      	beq.n	800d708 <get_fileinfo+0x90>
			i = j = 0;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	61bb      	str	r3, [r7, #24]
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d6aa:	e01b      	b.n	800d6e4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d6ac:	89fb      	ldrh	r3, [r7, #14]
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f001 fb5d 	bl	800ed70 <ff_convert>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d6ba:	89fb      	ldrh	r3, [r7, #14]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d102      	bne.n	800d6c6 <get_fileinfo+0x4e>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	61fb      	str	r3, [r7, #28]
 800d6c4:	e01a      	b.n	800d6fc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	2bfe      	cmp	r3, #254	; 0xfe
 800d6ca:	d902      	bls.n	800d6d2 <get_fileinfo+0x5a>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	61fb      	str	r3, [r7, #28]
 800d6d0:	e014      	b.n	800d6fc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	1c5a      	adds	r2, r3, #1
 800d6d6:	61fa      	str	r2, [r7, #28]
 800d6d8:	89fa      	ldrh	r2, [r7, #14]
 800d6da:	b2d1      	uxtb	r1, r2
 800d6dc:	683a      	ldr	r2, [r7, #0]
 800d6de:	4413      	add	r3, r2
 800d6e0:	460a      	mov	r2, r1
 800d6e2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	68da      	ldr	r2, [r3, #12]
 800d6e8:	69bb      	ldr	r3, [r7, #24]
 800d6ea:	1c59      	adds	r1, r3, #1
 800d6ec:	61b9      	str	r1, [r7, #24]
 800d6ee:	005b      	lsls	r3, r3, #1
 800d6f0:	4413      	add	r3, r2
 800d6f2:	881b      	ldrh	r3, [r3, #0]
 800d6f4:	81fb      	strh	r3, [r7, #14]
 800d6f6:	89fb      	ldrh	r3, [r7, #14]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d1d7      	bne.n	800d6ac <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d6fc:	683a      	ldr	r2, [r7, #0]
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	4413      	add	r3, r2
 800d702:	3316      	adds	r3, #22
 800d704:	2200      	movs	r2, #0
 800d706:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d708:	2300      	movs	r3, #0
 800d70a:	61bb      	str	r3, [r7, #24]
 800d70c:	69bb      	ldr	r3, [r7, #24]
 800d70e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d710:	683a      	ldr	r2, [r7, #0]
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	4413      	add	r3, r2
 800d716:	3316      	adds	r3, #22
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d71c:	e04c      	b.n	800d7b8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6a1a      	ldr	r2, [r3, #32]
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	1c59      	adds	r1, r3, #1
 800d726:	61f9      	str	r1, [r7, #28]
 800d728:	4413      	add	r3, r2
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d72e:	7dfb      	ldrb	r3, [r7, #23]
 800d730:	2b20      	cmp	r3, #32
 800d732:	d100      	bne.n	800d736 <get_fileinfo+0xbe>
 800d734:	e040      	b.n	800d7b8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d736:	7dfb      	ldrb	r3, [r7, #23]
 800d738:	2b05      	cmp	r3, #5
 800d73a:	d101      	bne.n	800d740 <get_fileinfo+0xc8>
 800d73c:	23e5      	movs	r3, #229	; 0xe5
 800d73e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	2b09      	cmp	r3, #9
 800d744:	d10f      	bne.n	800d766 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d746:	89bb      	ldrh	r3, [r7, #12]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d105      	bne.n	800d758 <get_fileinfo+0xe0>
 800d74c:	683a      	ldr	r2, [r7, #0]
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	4413      	add	r3, r2
 800d752:	3316      	adds	r3, #22
 800d754:	222e      	movs	r2, #46	; 0x2e
 800d756:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	1c5a      	adds	r2, r3, #1
 800d75c:	61ba      	str	r2, [r7, #24]
 800d75e:	683a      	ldr	r2, [r7, #0]
 800d760:	4413      	add	r3, r2
 800d762:	222e      	movs	r2, #46	; 0x2e
 800d764:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d766:	683a      	ldr	r2, [r7, #0]
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	4413      	add	r3, r2
 800d76c:	3309      	adds	r3, #9
 800d76e:	7dfa      	ldrb	r2, [r7, #23]
 800d770:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d772:	89bb      	ldrh	r3, [r7, #12]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d11c      	bne.n	800d7b2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d778:	7dfb      	ldrb	r3, [r7, #23]
 800d77a:	2b40      	cmp	r3, #64	; 0x40
 800d77c:	d913      	bls.n	800d7a6 <get_fileinfo+0x12e>
 800d77e:	7dfb      	ldrb	r3, [r7, #23]
 800d780:	2b5a      	cmp	r3, #90	; 0x5a
 800d782:	d810      	bhi.n	800d7a6 <get_fileinfo+0x12e>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6a1b      	ldr	r3, [r3, #32]
 800d788:	330c      	adds	r3, #12
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	461a      	mov	r2, r3
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	2b08      	cmp	r3, #8
 800d792:	d901      	bls.n	800d798 <get_fileinfo+0x120>
 800d794:	2310      	movs	r3, #16
 800d796:	e000      	b.n	800d79a <get_fileinfo+0x122>
 800d798:	2308      	movs	r3, #8
 800d79a:	4013      	ands	r3, r2
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d002      	beq.n	800d7a6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d7a0:	7dfb      	ldrb	r3, [r7, #23]
 800d7a2:	3320      	adds	r3, #32
 800d7a4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d7a6:	683a      	ldr	r2, [r7, #0]
 800d7a8:	69bb      	ldr	r3, [r7, #24]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	3316      	adds	r3, #22
 800d7ae:	7dfa      	ldrb	r2, [r7, #23]
 800d7b0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	2b0a      	cmp	r3, #10
 800d7bc:	d9af      	bls.n	800d71e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d7be:	89bb      	ldrh	r3, [r7, #12]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d10d      	bne.n	800d7e0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d7c4:	683a      	ldr	r2, [r7, #0]
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	3316      	adds	r3, #22
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6a1b      	ldr	r3, [r3, #32]
 800d7d4:	330c      	adds	r3, #12
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d101      	bne.n	800d7e0 <get_fileinfo+0x168>
 800d7dc:	2300      	movs	r3, #0
 800d7de:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d7e0:	683a      	ldr	r2, [r7, #0]
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	3309      	adds	r3, #9
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a1b      	ldr	r3, [r3, #32]
 800d7f0:	7ada      	ldrb	r2, [r3, #11]
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a1b      	ldr	r3, [r3, #32]
 800d7fa:	331c      	adds	r3, #28
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7fe fb15 	bl	800be2c <ld_dword>
 800d802:	4602      	mov	r2, r0
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6a1b      	ldr	r3, [r3, #32]
 800d80c:	3316      	adds	r3, #22
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fe fb0c 	bl	800be2c <ld_dword>
 800d814:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	b29a      	uxth	r2, r3
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	80da      	strh	r2, [r3, #6]
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	0c1b      	lsrs	r3, r3, #16
 800d822:	b29a      	uxth	r2, r3
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	809a      	strh	r2, [r3, #4]
 800d828:	e000      	b.n	800d82c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d82a:	bf00      	nop
}
 800d82c:	3720      	adds	r7, #32
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
	...

0800d834 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b08a      	sub	sp, #40	; 0x28
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	613b      	str	r3, [r7, #16]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	60fb      	str	r3, [r7, #12]
 800d84c:	2300      	movs	r3, #0
 800d84e:	617b      	str	r3, [r7, #20]
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d854:	69bb      	ldr	r3, [r7, #24]
 800d856:	1c5a      	adds	r2, r3, #1
 800d858:	61ba      	str	r2, [r7, #24]
 800d85a:	693a      	ldr	r2, [r7, #16]
 800d85c:	4413      	add	r3, r2
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d864:	2b1f      	cmp	r3, #31
 800d866:	d940      	bls.n	800d8ea <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d868:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d86a:	2b2f      	cmp	r3, #47	; 0x2f
 800d86c:	d006      	beq.n	800d87c <create_name+0x48>
 800d86e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d870:	2b5c      	cmp	r3, #92	; 0x5c
 800d872:	d110      	bne.n	800d896 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d874:	e002      	b.n	800d87c <create_name+0x48>
 800d876:	69bb      	ldr	r3, [r7, #24]
 800d878:	3301      	adds	r3, #1
 800d87a:	61bb      	str	r3, [r7, #24]
 800d87c:	693a      	ldr	r2, [r7, #16]
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	4413      	add	r3, r2
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	2b2f      	cmp	r3, #47	; 0x2f
 800d886:	d0f6      	beq.n	800d876 <create_name+0x42>
 800d888:	693a      	ldr	r2, [r7, #16]
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	4413      	add	r3, r2
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	2b5c      	cmp	r3, #92	; 0x5c
 800d892:	d0f0      	beq.n	800d876 <create_name+0x42>
			break;
 800d894:	e02a      	b.n	800d8ec <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	2bfe      	cmp	r3, #254	; 0xfe
 800d89a:	d901      	bls.n	800d8a0 <create_name+0x6c>
 800d89c:	2306      	movs	r3, #6
 800d89e:	e17d      	b.n	800db9c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d8a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d8a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8a8:	2101      	movs	r1, #1
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f001 fa60 	bl	800ed70 <ff_convert>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d8b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d101      	bne.n	800d8be <create_name+0x8a>
 800d8ba:	2306      	movs	r3, #6
 800d8bc:	e16e      	b.n	800db9c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d8be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8c0:	2b7f      	cmp	r3, #127	; 0x7f
 800d8c2:	d809      	bhi.n	800d8d8 <create_name+0xa4>
 800d8c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	488d      	ldr	r0, [pc, #564]	; (800db00 <create_name+0x2cc>)
 800d8ca:	f7fe fb7c 	bl	800bfc6 <chk_chr>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d001      	beq.n	800d8d8 <create_name+0xa4>
 800d8d4:	2306      	movs	r3, #6
 800d8d6:	e161      	b.n	800db9c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	1c5a      	adds	r2, r3, #1
 800d8dc:	617a      	str	r2, [r7, #20]
 800d8de:	005b      	lsls	r3, r3, #1
 800d8e0:	68fa      	ldr	r2, [r7, #12]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d8e6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d8e8:	e7b4      	b.n	800d854 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d8ea:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d8ec:	693a      	ldr	r2, [r7, #16]
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	441a      	add	r2, r3
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d8f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8f8:	2b1f      	cmp	r3, #31
 800d8fa:	d801      	bhi.n	800d900 <create_name+0xcc>
 800d8fc:	2304      	movs	r3, #4
 800d8fe:	e000      	b.n	800d902 <create_name+0xce>
 800d900:	2300      	movs	r3, #0
 800d902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d906:	e011      	b.n	800d92c <create_name+0xf8>
		w = lfn[di - 1];
 800d908:	697a      	ldr	r2, [r7, #20]
 800d90a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d90e:	4413      	add	r3, r2
 800d910:	005b      	lsls	r3, r3, #1
 800d912:	68fa      	ldr	r2, [r7, #12]
 800d914:	4413      	add	r3, r2
 800d916:	881b      	ldrh	r3, [r3, #0]
 800d918:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d91a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d91c:	2b20      	cmp	r3, #32
 800d91e:	d002      	beq.n	800d926 <create_name+0xf2>
 800d920:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d922:	2b2e      	cmp	r3, #46	; 0x2e
 800d924:	d106      	bne.n	800d934 <create_name+0x100>
		di--;
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	3b01      	subs	r3, #1
 800d92a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d1ea      	bne.n	800d908 <create_name+0xd4>
 800d932:	e000      	b.n	800d936 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d934:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	005b      	lsls	r3, r3, #1
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	4413      	add	r3, r2
 800d93e:	2200      	movs	r2, #0
 800d940:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d101      	bne.n	800d94c <create_name+0x118>
 800d948:	2306      	movs	r3, #6
 800d94a:	e127      	b.n	800db9c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	3324      	adds	r3, #36	; 0x24
 800d950:	220b      	movs	r2, #11
 800d952:	2120      	movs	r1, #32
 800d954:	4618      	mov	r0, r3
 800d956:	f7fe faf4 	bl	800bf42 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d95a:	2300      	movs	r3, #0
 800d95c:	61bb      	str	r3, [r7, #24]
 800d95e:	e002      	b.n	800d966 <create_name+0x132>
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	3301      	adds	r3, #1
 800d964:	61bb      	str	r3, [r7, #24]
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	005b      	lsls	r3, r3, #1
 800d96a:	68fa      	ldr	r2, [r7, #12]
 800d96c:	4413      	add	r3, r2
 800d96e:	881b      	ldrh	r3, [r3, #0]
 800d970:	2b20      	cmp	r3, #32
 800d972:	d0f5      	beq.n	800d960 <create_name+0x12c>
 800d974:	69bb      	ldr	r3, [r7, #24]
 800d976:	005b      	lsls	r3, r3, #1
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	4413      	add	r3, r2
 800d97c:	881b      	ldrh	r3, [r3, #0]
 800d97e:	2b2e      	cmp	r3, #46	; 0x2e
 800d980:	d0ee      	beq.n	800d960 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d009      	beq.n	800d99c <create_name+0x168>
 800d988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d98c:	f043 0303 	orr.w	r3, r3, #3
 800d990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d994:	e002      	b.n	800d99c <create_name+0x168>
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	3b01      	subs	r3, #1
 800d99a:	617b      	str	r3, [r7, #20]
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d009      	beq.n	800d9b6 <create_name+0x182>
 800d9a2:	697a      	ldr	r2, [r7, #20]
 800d9a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d9a8:	4413      	add	r3, r2
 800d9aa:	005b      	lsls	r3, r3, #1
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	4413      	add	r3, r2
 800d9b0:	881b      	ldrh	r3, [r3, #0]
 800d9b2:	2b2e      	cmp	r3, #46	; 0x2e
 800d9b4:	d1ef      	bne.n	800d996 <create_name+0x162>

	i = b = 0; ni = 8;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d9bc:	2300      	movs	r3, #0
 800d9be:	623b      	str	r3, [r7, #32]
 800d9c0:	2308      	movs	r3, #8
 800d9c2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d9c4:	69bb      	ldr	r3, [r7, #24]
 800d9c6:	1c5a      	adds	r2, r3, #1
 800d9c8:	61ba      	str	r2, [r7, #24]
 800d9ca:	005b      	lsls	r3, r3, #1
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	4413      	add	r3, r2
 800d9d0:	881b      	ldrh	r3, [r3, #0]
 800d9d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d9d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	f000 8090 	beq.w	800dafc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d9dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9de:	2b20      	cmp	r3, #32
 800d9e0:	d006      	beq.n	800d9f0 <create_name+0x1bc>
 800d9e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9e4:	2b2e      	cmp	r3, #46	; 0x2e
 800d9e6:	d10a      	bne.n	800d9fe <create_name+0x1ca>
 800d9e8:	69ba      	ldr	r2, [r7, #24]
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d006      	beq.n	800d9fe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9f4:	f043 0303 	orr.w	r3, r3, #3
 800d9f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d9fc:	e07d      	b.n	800dafa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d9fe:	6a3a      	ldr	r2, [r7, #32]
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	429a      	cmp	r2, r3
 800da04:	d203      	bcs.n	800da0e <create_name+0x1da>
 800da06:	69ba      	ldr	r2, [r7, #24]
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d123      	bne.n	800da56 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	2b0b      	cmp	r3, #11
 800da12:	d106      	bne.n	800da22 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800da14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da18:	f043 0303 	orr.w	r3, r3, #3
 800da1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da20:	e075      	b.n	800db0e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800da22:	69ba      	ldr	r2, [r7, #24]
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	429a      	cmp	r2, r3
 800da28:	d005      	beq.n	800da36 <create_name+0x202>
 800da2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da2e:	f043 0303 	orr.w	r3, r3, #3
 800da32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800da36:	69ba      	ldr	r2, [r7, #24]
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d866      	bhi.n	800db0c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	61bb      	str	r3, [r7, #24]
 800da42:	2308      	movs	r3, #8
 800da44:	623b      	str	r3, [r7, #32]
 800da46:	230b      	movs	r3, #11
 800da48:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800da4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da4e:	009b      	lsls	r3, r3, #2
 800da50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da54:	e051      	b.n	800dafa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800da56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da58:	2b7f      	cmp	r3, #127	; 0x7f
 800da5a:	d914      	bls.n	800da86 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800da5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da5e:	2100      	movs	r1, #0
 800da60:	4618      	mov	r0, r3
 800da62:	f001 f985 	bl	800ed70 <ff_convert>
 800da66:	4603      	mov	r3, r0
 800da68:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800da6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d004      	beq.n	800da7a <create_name+0x246>
 800da70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da72:	3b80      	subs	r3, #128	; 0x80
 800da74:	4a23      	ldr	r2, [pc, #140]	; (800db04 <create_name+0x2d0>)
 800da76:	5cd3      	ldrb	r3, [r2, r3]
 800da78:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800da7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da7e:	f043 0302 	orr.w	r3, r3, #2
 800da82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800da86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d007      	beq.n	800da9c <create_name+0x268>
 800da8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da8e:	4619      	mov	r1, r3
 800da90:	481d      	ldr	r0, [pc, #116]	; (800db08 <create_name+0x2d4>)
 800da92:	f7fe fa98 	bl	800bfc6 <chk_chr>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d008      	beq.n	800daae <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800da9c:	235f      	movs	r3, #95	; 0x5f
 800da9e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800daa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daa4:	f043 0303 	orr.w	r3, r3, #3
 800daa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800daac:	e01b      	b.n	800dae6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800daae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dab0:	2b40      	cmp	r3, #64	; 0x40
 800dab2:	d909      	bls.n	800dac8 <create_name+0x294>
 800dab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dab6:	2b5a      	cmp	r3, #90	; 0x5a
 800dab8:	d806      	bhi.n	800dac8 <create_name+0x294>
					b |= 2;
 800daba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dabe:	f043 0302 	orr.w	r3, r3, #2
 800dac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dac6:	e00e      	b.n	800dae6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dac8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daca:	2b60      	cmp	r3, #96	; 0x60
 800dacc:	d90b      	bls.n	800dae6 <create_name+0x2b2>
 800dace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dad0:	2b7a      	cmp	r3, #122	; 0x7a
 800dad2:	d808      	bhi.n	800dae6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800dad4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dad8:	f043 0301 	orr.w	r3, r3, #1
 800dadc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dae2:	3b20      	subs	r3, #32
 800dae4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dae6:	6a3b      	ldr	r3, [r7, #32]
 800dae8:	1c5a      	adds	r2, r3, #1
 800daea:	623a      	str	r2, [r7, #32]
 800daec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800daee:	b2d1      	uxtb	r1, r2
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	4413      	add	r3, r2
 800daf4:	460a      	mov	r2, r1
 800daf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dafa:	e763      	b.n	800d9c4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dafc:	bf00      	nop
 800dafe:	e006      	b.n	800db0e <create_name+0x2da>
 800db00:	080111b0 	.word	0x080111b0
 800db04:	08011274 	.word	0x08011274
 800db08:	080111bc 	.word	0x080111bc
			if (si > di) break;			/* No extension */
 800db0c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800db14:	2be5      	cmp	r3, #229	; 0xe5
 800db16:	d103      	bne.n	800db20 <create_name+0x2ec>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2205      	movs	r2, #5
 800db1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800db20:	69fb      	ldr	r3, [r7, #28]
 800db22:	2b08      	cmp	r3, #8
 800db24:	d104      	bne.n	800db30 <create_name+0x2fc>
 800db26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800db30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db34:	f003 030c 	and.w	r3, r3, #12
 800db38:	2b0c      	cmp	r3, #12
 800db3a:	d005      	beq.n	800db48 <create_name+0x314>
 800db3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db40:	f003 0303 	and.w	r3, r3, #3
 800db44:	2b03      	cmp	r3, #3
 800db46:	d105      	bne.n	800db54 <create_name+0x320>
 800db48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db4c:	f043 0302 	orr.w	r3, r3, #2
 800db50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800db54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db58:	f003 0302 	and.w	r3, r3, #2
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d117      	bne.n	800db90 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800db60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db64:	f003 0303 	and.w	r3, r3, #3
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d105      	bne.n	800db78 <create_name+0x344>
 800db6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db70:	f043 0310 	orr.w	r3, r3, #16
 800db74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800db78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db7c:	f003 030c 	and.w	r3, r3, #12
 800db80:	2b04      	cmp	r3, #4
 800db82:	d105      	bne.n	800db90 <create_name+0x35c>
 800db84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db88:	f043 0308 	orr.w	r3, r3, #8
 800db8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800db96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800db9a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3728      	adds	r7, #40	; 0x28
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b086      	sub	sp, #24
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dbb8:	e002      	b.n	800dbc0 <follow_path+0x1c>
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	603b      	str	r3, [r7, #0]
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	2b2f      	cmp	r3, #47	; 0x2f
 800dbc6:	d0f8      	beq.n	800dbba <follow_path+0x16>
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	2b5c      	cmp	r3, #92	; 0x5c
 800dbce:	d0f4      	beq.n	800dbba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	2b1f      	cmp	r3, #31
 800dbdc:	d80a      	bhi.n	800dbf4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2280      	movs	r2, #128	; 0x80
 800dbe2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dbe6:	2100      	movs	r1, #0
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7fe ff35 	bl	800ca58 <dir_sdi>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	75fb      	strb	r3, [r7, #23]
 800dbf2:	e043      	b.n	800dc7c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dbf4:	463b      	mov	r3, r7
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f7ff fe1b 	bl	800d834 <create_name>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dc02:	7dfb      	ldrb	r3, [r7, #23]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d134      	bne.n	800dc72 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f7ff fb7d 	bl	800d308 <dir_find>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dc18:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dc1a:	7dfb      	ldrb	r3, [r7, #23]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00a      	beq.n	800dc36 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dc20:	7dfb      	ldrb	r3, [r7, #23]
 800dc22:	2b04      	cmp	r3, #4
 800dc24:	d127      	bne.n	800dc76 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dc26:	7afb      	ldrb	r3, [r7, #11]
 800dc28:	f003 0304 	and.w	r3, r3, #4
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d122      	bne.n	800dc76 <follow_path+0xd2>
 800dc30:	2305      	movs	r3, #5
 800dc32:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dc34:	e01f      	b.n	800dc76 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dc36:	7afb      	ldrb	r3, [r7, #11]
 800dc38:	f003 0304 	and.w	r3, r3, #4
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d11c      	bne.n	800dc7a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	799b      	ldrb	r3, [r3, #6]
 800dc44:	f003 0310 	and.w	r3, r3, #16
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d102      	bne.n	800dc52 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dc4c:	2305      	movs	r3, #5
 800dc4e:	75fb      	strb	r3, [r7, #23]
 800dc50:	e014      	b.n	800dc7c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	695b      	ldr	r3, [r3, #20]
 800dc5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc60:	4413      	add	r3, r2
 800dc62:	4619      	mov	r1, r3
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f7ff f87e 	bl	800cd66 <ld_clust>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dc70:	e7c0      	b.n	800dbf4 <follow_path+0x50>
			if (res != FR_OK) break;
 800dc72:	bf00      	nop
 800dc74:	e002      	b.n	800dc7c <follow_path+0xd8>
				break;
 800dc76:	bf00      	nop
 800dc78:	e000      	b.n	800dc7c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dc7a:	bf00      	nop
			}
		}
	}

	return res;
 800dc7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3718      	adds	r7, #24
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}

0800dc86 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dc86:	b480      	push	{r7}
 800dc88:	b087      	sub	sp, #28
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dc8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc92:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d031      	beq.n	800dd00 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	617b      	str	r3, [r7, #20]
 800dca2:	e002      	b.n	800dcaa <get_ldnumber+0x24>
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	3301      	adds	r3, #1
 800dca8:	617b      	str	r3, [r7, #20]
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	2b1f      	cmp	r3, #31
 800dcb0:	d903      	bls.n	800dcba <get_ldnumber+0x34>
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	2b3a      	cmp	r3, #58	; 0x3a
 800dcb8:	d1f4      	bne.n	800dca4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	2b3a      	cmp	r3, #58	; 0x3a
 800dcc0:	d11c      	bne.n	800dcfc <get_ldnumber+0x76>
			tp = *path;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	1c5a      	adds	r2, r3, #1
 800dccc:	60fa      	str	r2, [r7, #12]
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	3b30      	subs	r3, #48	; 0x30
 800dcd2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	2b09      	cmp	r3, #9
 800dcd8:	d80e      	bhi.n	800dcf8 <get_ldnumber+0x72>
 800dcda:	68fa      	ldr	r2, [r7, #12]
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d10a      	bne.n	800dcf8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d107      	bne.n	800dcf8 <get_ldnumber+0x72>
					vol = (int)i;
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	617b      	str	r3, [r7, #20]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	697a      	ldr	r2, [r7, #20]
 800dcf6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	e002      	b.n	800dd02 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dd00:	693b      	ldr	r3, [r7, #16]
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	371c      	adds	r7, #28
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr
	...

0800dd10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	70da      	strb	r2, [r3, #3]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd26:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dd28:	6839      	ldr	r1, [r7, #0]
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f7fe fb16 	bl	800c35c <move_window>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d001      	beq.n	800dd3a <check_fs+0x2a>
 800dd36:	2304      	movs	r3, #4
 800dd38:	e038      	b.n	800ddac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	3334      	adds	r3, #52	; 0x34
 800dd3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7fe f85a 	bl	800bdfc <ld_word>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d001      	beq.n	800dd58 <check_fs+0x48>
 800dd54:	2303      	movs	r3, #3
 800dd56:	e029      	b.n	800ddac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd5e:	2be9      	cmp	r3, #233	; 0xe9
 800dd60:	d009      	beq.n	800dd76 <check_fs+0x66>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd68:	2beb      	cmp	r3, #235	; 0xeb
 800dd6a:	d11e      	bne.n	800ddaa <check_fs+0x9a>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800dd72:	2b90      	cmp	r3, #144	; 0x90
 800dd74:	d119      	bne.n	800ddaa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	3334      	adds	r3, #52	; 0x34
 800dd7a:	3336      	adds	r3, #54	; 0x36
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7fe f855 	bl	800be2c <ld_dword>
 800dd82:	4603      	mov	r3, r0
 800dd84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dd88:	4a0a      	ldr	r2, [pc, #40]	; (800ddb4 <check_fs+0xa4>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d101      	bne.n	800dd92 <check_fs+0x82>
 800dd8e:	2300      	movs	r3, #0
 800dd90:	e00c      	b.n	800ddac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	3334      	adds	r3, #52	; 0x34
 800dd96:	3352      	adds	r3, #82	; 0x52
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fe f847 	bl	800be2c <ld_dword>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	4a05      	ldr	r2, [pc, #20]	; (800ddb8 <check_fs+0xa8>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d101      	bne.n	800ddaa <check_fs+0x9a>
 800dda6:	2300      	movs	r3, #0
 800dda8:	e000      	b.n	800ddac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ddaa:	2302      	movs	r3, #2
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3708      	adds	r7, #8
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	00544146 	.word	0x00544146
 800ddb8:	33544146 	.word	0x33544146

0800ddbc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b096      	sub	sp, #88	; 0x58
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	60b9      	str	r1, [r7, #8]
 800ddc6:	4613      	mov	r3, r2
 800ddc8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ddd0:	68f8      	ldr	r0, [r7, #12]
 800ddd2:	f7ff ff58 	bl	800dc86 <get_ldnumber>
 800ddd6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ddd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	da01      	bge.n	800dde2 <find_volume+0x26>
 800ddde:	230b      	movs	r3, #11
 800dde0:	e230      	b.n	800e244 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dde2:	4aa1      	ldr	r2, [pc, #644]	; (800e068 <find_volume+0x2ac>)
 800dde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dde6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ddec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d101      	bne.n	800ddf6 <find_volume+0x3a>
 800ddf2:	230c      	movs	r3, #12
 800ddf4:	e226      	b.n	800e244 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddfa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ddfc:	79fb      	ldrb	r3, [r7, #7]
 800ddfe:	f023 0301 	bic.w	r3, r3, #1
 800de02:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800de04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d01a      	beq.n	800de42 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800de0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0e:	785b      	ldrb	r3, [r3, #1]
 800de10:	4618      	mov	r0, r3
 800de12:	f7fd ff55 	bl	800bcc0 <disk_status>
 800de16:	4603      	mov	r3, r0
 800de18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800de1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de20:	f003 0301 	and.w	r3, r3, #1
 800de24:	2b00      	cmp	r3, #0
 800de26:	d10c      	bne.n	800de42 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800de28:	79fb      	ldrb	r3, [r7, #7]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d007      	beq.n	800de3e <find_volume+0x82>
 800de2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de32:	f003 0304 	and.w	r3, r3, #4
 800de36:	2b00      	cmp	r3, #0
 800de38:	d001      	beq.n	800de3e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800de3a:	230a      	movs	r3, #10
 800de3c:	e202      	b.n	800e244 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800de3e:	2300      	movs	r3, #0
 800de40:	e200      	b.n	800e244 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800de42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de44:	2200      	movs	r2, #0
 800de46:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800de48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de4a:	b2da      	uxtb	r2, r3
 800de4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800de50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de52:	785b      	ldrb	r3, [r3, #1]
 800de54:	4618      	mov	r0, r3
 800de56:	f7fd ff4d 	bl	800bcf4 <disk_initialize>
 800de5a:	4603      	mov	r3, r0
 800de5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800de60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de64:	f003 0301 	and.w	r3, r3, #1
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d001      	beq.n	800de70 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800de6c:	2303      	movs	r3, #3
 800de6e:	e1e9      	b.n	800e244 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800de70:	79fb      	ldrb	r3, [r7, #7]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d007      	beq.n	800de86 <find_volume+0xca>
 800de76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de7a:	f003 0304 	and.w	r3, r3, #4
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d001      	beq.n	800de86 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800de82:	230a      	movs	r3, #10
 800de84:	e1de      	b.n	800e244 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800de86:	2300      	movs	r3, #0
 800de88:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800de8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800de8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de8e:	f7ff ff3f 	bl	800dd10 <check_fs>
 800de92:	4603      	mov	r3, r0
 800de94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800de98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d149      	bne.n	800df34 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dea0:	2300      	movs	r3, #0
 800dea2:	643b      	str	r3, [r7, #64]	; 0x40
 800dea4:	e01e      	b.n	800dee4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800deac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deae:	011b      	lsls	r3, r3, #4
 800deb0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800deb4:	4413      	add	r3, r2
 800deb6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800deb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deba:	3304      	adds	r3, #4
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d006      	beq.n	800ded0 <find_volume+0x114>
 800dec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec4:	3308      	adds	r3, #8
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fd ffb0 	bl	800be2c <ld_dword>
 800decc:	4602      	mov	r2, r0
 800dece:	e000      	b.n	800ded2 <find_volume+0x116>
 800ded0:	2200      	movs	r2, #0
 800ded2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	3358      	adds	r3, #88	; 0x58
 800ded8:	443b      	add	r3, r7
 800deda:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dee0:	3301      	adds	r3, #1
 800dee2:	643b      	str	r3, [r7, #64]	; 0x40
 800dee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dee6:	2b03      	cmp	r3, #3
 800dee8:	d9dd      	bls.n	800dea6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800deea:	2300      	movs	r3, #0
 800deec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800deee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def0:	2b00      	cmp	r3, #0
 800def2:	d002      	beq.n	800defa <find_volume+0x13e>
 800def4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def6:	3b01      	subs	r3, #1
 800def8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800defa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	3358      	adds	r3, #88	; 0x58
 800df00:	443b      	add	r3, r7
 800df02:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800df06:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800df08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d005      	beq.n	800df1a <find_volume+0x15e>
 800df0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df12:	f7ff fefd 	bl	800dd10 <check_fs>
 800df16:	4603      	mov	r3, r0
 800df18:	e000      	b.n	800df1c <find_volume+0x160>
 800df1a:	2303      	movs	r3, #3
 800df1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800df20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df24:	2b01      	cmp	r3, #1
 800df26:	d905      	bls.n	800df34 <find_volume+0x178>
 800df28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df2a:	3301      	adds	r3, #1
 800df2c:	643b      	str	r3, [r7, #64]	; 0x40
 800df2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df30:	2b03      	cmp	r3, #3
 800df32:	d9e2      	bls.n	800defa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800df34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df38:	2b04      	cmp	r3, #4
 800df3a:	d101      	bne.n	800df40 <find_volume+0x184>
 800df3c:	2301      	movs	r3, #1
 800df3e:	e181      	b.n	800e244 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800df40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df44:	2b01      	cmp	r3, #1
 800df46:	d901      	bls.n	800df4c <find_volume+0x190>
 800df48:	230d      	movs	r3, #13
 800df4a:	e17b      	b.n	800e244 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800df4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4e:	3334      	adds	r3, #52	; 0x34
 800df50:	330b      	adds	r3, #11
 800df52:	4618      	mov	r0, r3
 800df54:	f7fd ff52 	bl	800bdfc <ld_word>
 800df58:	4603      	mov	r3, r0
 800df5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df5e:	d001      	beq.n	800df64 <find_volume+0x1a8>
 800df60:	230d      	movs	r3, #13
 800df62:	e16f      	b.n	800e244 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800df64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df66:	3334      	adds	r3, #52	; 0x34
 800df68:	3316      	adds	r3, #22
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fd ff46 	bl	800bdfc <ld_word>
 800df70:	4603      	mov	r3, r0
 800df72:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800df74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df76:	2b00      	cmp	r3, #0
 800df78:	d106      	bne.n	800df88 <find_volume+0x1cc>
 800df7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7c:	3334      	adds	r3, #52	; 0x34
 800df7e:	3324      	adds	r3, #36	; 0x24
 800df80:	4618      	mov	r0, r3
 800df82:	f7fd ff53 	bl	800be2c <ld_dword>
 800df86:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800df88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df8c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800df8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df90:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800df94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df96:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	789b      	ldrb	r3, [r3, #2]
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d005      	beq.n	800dfac <find_volume+0x1f0>
 800dfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa2:	789b      	ldrb	r3, [r3, #2]
 800dfa4:	2b02      	cmp	r3, #2
 800dfa6:	d001      	beq.n	800dfac <find_volume+0x1f0>
 800dfa8:	230d      	movs	r3, #13
 800dfaa:	e14b      	b.n	800e244 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfae:	789b      	ldrb	r3, [r3, #2]
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfb4:	fb02 f303 	mul.w	r3, r2, r3
 800dfb8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dfc0:	b29a      	uxth	r2, r3
 800dfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc8:	895b      	ldrh	r3, [r3, #10]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d008      	beq.n	800dfe0 <find_volume+0x224>
 800dfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd0:	895b      	ldrh	r3, [r3, #10]
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd6:	895b      	ldrh	r3, [r3, #10]
 800dfd8:	3b01      	subs	r3, #1
 800dfda:	4013      	ands	r3, r2
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d001      	beq.n	800dfe4 <find_volume+0x228>
 800dfe0:	230d      	movs	r3, #13
 800dfe2:	e12f      	b.n	800e244 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe6:	3334      	adds	r3, #52	; 0x34
 800dfe8:	3311      	adds	r3, #17
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7fd ff06 	bl	800bdfc <ld_word>
 800dff0:	4603      	mov	r3, r0
 800dff2:	461a      	mov	r2, r3
 800dff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffa:	891b      	ldrh	r3, [r3, #8]
 800dffc:	f003 030f 	and.w	r3, r3, #15
 800e000:	b29b      	uxth	r3, r3
 800e002:	2b00      	cmp	r3, #0
 800e004:	d001      	beq.n	800e00a <find_volume+0x24e>
 800e006:	230d      	movs	r3, #13
 800e008:	e11c      	b.n	800e244 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00c:	3334      	adds	r3, #52	; 0x34
 800e00e:	3313      	adds	r3, #19
 800e010:	4618      	mov	r0, r3
 800e012:	f7fd fef3 	bl	800bdfc <ld_word>
 800e016:	4603      	mov	r3, r0
 800e018:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e01a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d106      	bne.n	800e02e <find_volume+0x272>
 800e020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e022:	3334      	adds	r3, #52	; 0x34
 800e024:	3320      	adds	r3, #32
 800e026:	4618      	mov	r0, r3
 800e028:	f7fd ff00 	bl	800be2c <ld_dword>
 800e02c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e030:	3334      	adds	r3, #52	; 0x34
 800e032:	330e      	adds	r3, #14
 800e034:	4618      	mov	r0, r3
 800e036:	f7fd fee1 	bl	800bdfc <ld_word>
 800e03a:	4603      	mov	r3, r0
 800e03c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e03e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e040:	2b00      	cmp	r3, #0
 800e042:	d101      	bne.n	800e048 <find_volume+0x28c>
 800e044:	230d      	movs	r3, #13
 800e046:	e0fd      	b.n	800e244 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e048:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e04a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e04c:	4413      	add	r3, r2
 800e04e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e050:	8912      	ldrh	r2, [r2, #8]
 800e052:	0912      	lsrs	r2, r2, #4
 800e054:	b292      	uxth	r2, r2
 800e056:	4413      	add	r3, r2
 800e058:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e05a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05e:	429a      	cmp	r2, r3
 800e060:	d204      	bcs.n	800e06c <find_volume+0x2b0>
 800e062:	230d      	movs	r3, #13
 800e064:	e0ee      	b.n	800e244 <find_volume+0x488>
 800e066:	bf00      	nop
 800e068:	20003258 	.word	0x20003258
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e06c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e070:	1ad3      	subs	r3, r2, r3
 800e072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e074:	8952      	ldrh	r2, [r2, #10]
 800e076:	fbb3 f3f2 	udiv	r3, r3, r2
 800e07a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d101      	bne.n	800e086 <find_volume+0x2ca>
 800e082:	230d      	movs	r3, #13
 800e084:	e0de      	b.n	800e244 <find_volume+0x488>
		fmt = FS_FAT32;
 800e086:	2303      	movs	r3, #3
 800e088:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e092:	4293      	cmp	r3, r2
 800e094:	d802      	bhi.n	800e09c <find_volume+0x2e0>
 800e096:	2302      	movs	r3, #2
 800e098:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d802      	bhi.n	800e0ac <find_volume+0x2f0>
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ae:	1c9a      	adds	r2, r3, #2
 800e0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e0b8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e0ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e0bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0be:	441a      	add	r2, r3
 800e0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e0c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c8:	441a      	add	r2, r3
 800e0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0cc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e0ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0d2:	2b03      	cmp	r3, #3
 800e0d4:	d11e      	bne.n	800e114 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d8:	3334      	adds	r3, #52	; 0x34
 800e0da:	332a      	adds	r3, #42	; 0x2a
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7fd fe8d 	bl	800bdfc <ld_word>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d001      	beq.n	800e0ec <find_volume+0x330>
 800e0e8:	230d      	movs	r3, #13
 800e0ea:	e0ab      	b.n	800e244 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ee:	891b      	ldrh	r3, [r3, #8]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d001      	beq.n	800e0f8 <find_volume+0x33c>
 800e0f4:	230d      	movs	r3, #13
 800e0f6:	e0a5      	b.n	800e244 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fa:	3334      	adds	r3, #52	; 0x34
 800e0fc:	332c      	adds	r3, #44	; 0x2c
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7fd fe94 	bl	800be2c <ld_dword>
 800e104:	4602      	mov	r2, r0
 800e106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e108:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10c:	699b      	ldr	r3, [r3, #24]
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	647b      	str	r3, [r7, #68]	; 0x44
 800e112:	e01f      	b.n	800e154 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e116:	891b      	ldrh	r3, [r3, #8]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d101      	bne.n	800e120 <find_volume+0x364>
 800e11c:	230d      	movs	r3, #13
 800e11e:	e091      	b.n	800e244 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e126:	441a      	add	r2, r3
 800e128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e12c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e130:	2b02      	cmp	r3, #2
 800e132:	d103      	bne.n	800e13c <find_volume+0x380>
 800e134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e136:	699b      	ldr	r3, [r3, #24]
 800e138:	005b      	lsls	r3, r3, #1
 800e13a:	e00a      	b.n	800e152 <find_volume+0x396>
 800e13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13e:	699a      	ldr	r2, [r3, #24]
 800e140:	4613      	mov	r3, r2
 800e142:	005b      	lsls	r3, r3, #1
 800e144:	4413      	add	r3, r2
 800e146:	085a      	lsrs	r2, r3, #1
 800e148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14a:	699b      	ldr	r3, [r3, #24]
 800e14c:	f003 0301 	and.w	r3, r3, #1
 800e150:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e152:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e156:	69da      	ldr	r2, [r3, #28]
 800e158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e15a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e15e:	0a5b      	lsrs	r3, r3, #9
 800e160:	429a      	cmp	r2, r3
 800e162:	d201      	bcs.n	800e168 <find_volume+0x3ac>
 800e164:	230d      	movs	r3, #13
 800e166:	e06d      	b.n	800e244 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e16e:	615a      	str	r2, [r3, #20]
 800e170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e172:	695a      	ldr	r2, [r3, #20]
 800e174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e176:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17a:	2280      	movs	r2, #128	; 0x80
 800e17c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e17e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e182:	2b03      	cmp	r3, #3
 800e184:	d149      	bne.n	800e21a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e188:	3334      	adds	r3, #52	; 0x34
 800e18a:	3330      	adds	r3, #48	; 0x30
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7fd fe35 	bl	800bdfc <ld_word>
 800e192:	4603      	mov	r3, r0
 800e194:	2b01      	cmp	r3, #1
 800e196:	d140      	bne.n	800e21a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e19a:	3301      	adds	r3, #1
 800e19c:	4619      	mov	r1, r3
 800e19e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e1a0:	f7fe f8dc 	bl	800c35c <move_window>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d137      	bne.n	800e21a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b2:	3334      	adds	r3, #52	; 0x34
 800e1b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fd fe1f 	bl	800bdfc <ld_word>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	461a      	mov	r2, r3
 800e1c2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d127      	bne.n	800e21a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1cc:	3334      	adds	r3, #52	; 0x34
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fd fe2c 	bl	800be2c <ld_dword>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	4a1d      	ldr	r2, [pc, #116]	; (800e24c <find_volume+0x490>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d11e      	bne.n	800e21a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1de:	3334      	adds	r3, #52	; 0x34
 800e1e0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7fd fe21 	bl	800be2c <ld_dword>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	4a18      	ldr	r2, [pc, #96]	; (800e250 <find_volume+0x494>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d113      	bne.n	800e21a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f4:	3334      	adds	r3, #52	; 0x34
 800e1f6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7fd fe16 	bl	800be2c <ld_dword>
 800e200:	4602      	mov	r2, r0
 800e202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e204:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e208:	3334      	adds	r3, #52	; 0x34
 800e20a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e20e:	4618      	mov	r0, r3
 800e210:	f7fd fe0c 	bl	800be2c <ld_dword>
 800e214:	4602      	mov	r2, r0
 800e216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e218:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e220:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e222:	4b0c      	ldr	r3, [pc, #48]	; (800e254 <find_volume+0x498>)
 800e224:	881b      	ldrh	r3, [r3, #0]
 800e226:	3301      	adds	r3, #1
 800e228:	b29a      	uxth	r2, r3
 800e22a:	4b0a      	ldr	r3, [pc, #40]	; (800e254 <find_volume+0x498>)
 800e22c:	801a      	strh	r2, [r3, #0]
 800e22e:	4b09      	ldr	r3, [pc, #36]	; (800e254 <find_volume+0x498>)
 800e230:	881a      	ldrh	r2, [r3, #0]
 800e232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e234:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e238:	4a07      	ldr	r2, [pc, #28]	; (800e258 <find_volume+0x49c>)
 800e23a:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e23c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e23e:	f7fe f825 	bl	800c28c <clear_lock>
#endif
	return FR_OK;
 800e242:	2300      	movs	r3, #0
}
 800e244:	4618      	mov	r0, r3
 800e246:	3758      	adds	r7, #88	; 0x58
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}
 800e24c:	41615252 	.word	0x41615252
 800e250:	61417272 	.word	0x61417272
 800e254:	2000325c 	.word	0x2000325c
 800e258:	20003280 	.word	0x20003280

0800e25c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e266:	2309      	movs	r3, #9
 800e268:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d01c      	beq.n	800e2aa <validate+0x4e>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d018      	beq.n	800e2aa <validate+0x4e>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d013      	beq.n	800e2aa <validate+0x4e>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	889a      	ldrh	r2, [r3, #4]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	88db      	ldrh	r3, [r3, #6]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d10c      	bne.n	800e2aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	785b      	ldrb	r3, [r3, #1]
 800e296:	4618      	mov	r0, r3
 800e298:	f7fd fd12 	bl	800bcc0 <disk_status>
 800e29c:	4603      	mov	r3, r0
 800e29e:	f003 0301 	and.w	r3, r3, #1
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d101      	bne.n	800e2aa <validate+0x4e>
			res = FR_OK;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e2aa:	7bfb      	ldrb	r3, [r7, #15]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d102      	bne.n	800e2b6 <validate+0x5a>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	e000      	b.n	800e2b8 <validate+0x5c>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	683a      	ldr	r2, [r7, #0]
 800e2ba:	6013      	str	r3, [r2, #0]
	return res;
 800e2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3710      	adds	r7, #16
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
	...

0800e2c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b088      	sub	sp, #32
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	60f8      	str	r0, [r7, #12]
 800e2d0:	60b9      	str	r1, [r7, #8]
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e2da:	f107 0310 	add.w	r3, r7, #16
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7ff fcd1 	bl	800dc86 <get_ldnumber>
 800e2e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	da01      	bge.n	800e2f0 <f_mount+0x28>
 800e2ec:	230b      	movs	r3, #11
 800e2ee:	e02b      	b.n	800e348 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e2f0:	4a17      	ldr	r2, [pc, #92]	; (800e350 <f_mount+0x88>)
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e2fa:	69bb      	ldr	r3, [r7, #24]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d005      	beq.n	800e30c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e300:	69b8      	ldr	r0, [r7, #24]
 800e302:	f7fd ffc3 	bl	800c28c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	2200      	movs	r2, #0
 800e30a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d002      	beq.n	800e318 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2200      	movs	r2, #0
 800e316:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e318:	68fa      	ldr	r2, [r7, #12]
 800e31a:	490d      	ldr	r1, [pc, #52]	; (800e350 <f_mount+0x88>)
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d002      	beq.n	800e32e <f_mount+0x66>
 800e328:	79fb      	ldrb	r3, [r7, #7]
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d001      	beq.n	800e332 <f_mount+0x6a>
 800e32e:	2300      	movs	r3, #0
 800e330:	e00a      	b.n	800e348 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e332:	f107 010c 	add.w	r1, r7, #12
 800e336:	f107 0308 	add.w	r3, r7, #8
 800e33a:	2200      	movs	r2, #0
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7ff fd3d 	bl	800ddbc <find_volume>
 800e342:	4603      	mov	r3, r0
 800e344:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e346:	7dfb      	ldrb	r3, [r7, #23]
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3720      	adds	r7, #32
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	20003258 	.word	0x20003258

0800e354 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b09a      	sub	sp, #104	; 0x68
 800e358:	af00      	add	r7, sp, #0
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	60b9      	str	r1, [r7, #8]
 800e35e:	4613      	mov	r3, r2
 800e360:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d101      	bne.n	800e36c <f_open+0x18>
 800e368:	2309      	movs	r3, #9
 800e36a:	e1ad      	b.n	800e6c8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e36c:	79fb      	ldrb	r3, [r7, #7]
 800e36e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e372:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e374:	79fa      	ldrb	r2, [r7, #7]
 800e376:	f107 0114 	add.w	r1, r7, #20
 800e37a:	f107 0308 	add.w	r3, r7, #8
 800e37e:	4618      	mov	r0, r3
 800e380:	f7ff fd1c 	bl	800ddbc <find_volume>
 800e384:	4603      	mov	r3, r0
 800e386:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e38a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f040 8191 	bne.w	800e6b6 <f_open+0x362>
		dj.obj.fs = fs;
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e398:	68ba      	ldr	r2, [r7, #8]
 800e39a:	f107 0318 	add.w	r3, r7, #24
 800e39e:	4611      	mov	r1, r2
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7ff fbff 	bl	800dba4 <follow_path>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e3ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d11a      	bne.n	800e3ea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e3b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e3b8:	b25b      	sxtb	r3, r3
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	da03      	bge.n	800e3c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e3be:	2306      	movs	r3, #6
 800e3c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e3c4:	e011      	b.n	800e3ea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e3c6:	79fb      	ldrb	r3, [r7, #7]
 800e3c8:	f023 0301 	bic.w	r3, r3, #1
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	bf14      	ite	ne
 800e3d0:	2301      	movne	r3, #1
 800e3d2:	2300      	moveq	r3, #0
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	f107 0318 	add.w	r3, r7, #24
 800e3dc:	4611      	mov	r1, r2
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fd fe0c 	bl	800bffc <chk_lock>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e3ea:	79fb      	ldrb	r3, [r7, #7]
 800e3ec:	f003 031c 	and.w	r3, r3, #28
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d07f      	beq.n	800e4f4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e3f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d017      	beq.n	800e42c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e3fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e400:	2b04      	cmp	r3, #4
 800e402:	d10e      	bne.n	800e422 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e404:	f7fd fe56 	bl	800c0b4 <enq_lock>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d006      	beq.n	800e41c <f_open+0xc8>
 800e40e:	f107 0318 	add.w	r3, r7, #24
 800e412:	4618      	mov	r0, r3
 800e414:	f7ff f838 	bl	800d488 <dir_register>
 800e418:	4603      	mov	r3, r0
 800e41a:	e000      	b.n	800e41e <f_open+0xca>
 800e41c:	2312      	movs	r3, #18
 800e41e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e422:	79fb      	ldrb	r3, [r7, #7]
 800e424:	f043 0308 	orr.w	r3, r3, #8
 800e428:	71fb      	strb	r3, [r7, #7]
 800e42a:	e010      	b.n	800e44e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e42c:	7fbb      	ldrb	r3, [r7, #30]
 800e42e:	f003 0311 	and.w	r3, r3, #17
 800e432:	2b00      	cmp	r3, #0
 800e434:	d003      	beq.n	800e43e <f_open+0xea>
					res = FR_DENIED;
 800e436:	2307      	movs	r3, #7
 800e438:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e43c:	e007      	b.n	800e44e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e43e:	79fb      	ldrb	r3, [r7, #7]
 800e440:	f003 0304 	and.w	r3, r3, #4
 800e444:	2b00      	cmp	r3, #0
 800e446:	d002      	beq.n	800e44e <f_open+0xfa>
 800e448:	2308      	movs	r3, #8
 800e44a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e44e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e452:	2b00      	cmp	r3, #0
 800e454:	d168      	bne.n	800e528 <f_open+0x1d4>
 800e456:	79fb      	ldrb	r3, [r7, #7]
 800e458:	f003 0308 	and.w	r3, r3, #8
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d063      	beq.n	800e528 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e460:	f7fb fa00 	bl	8009864 <get_fattime>
 800e464:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e468:	330e      	adds	r3, #14
 800e46a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fd fd1b 	bl	800bea8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e474:	3316      	adds	r3, #22
 800e476:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fd fd15 	bl	800bea8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e480:	330b      	adds	r3, #11
 800e482:	2220      	movs	r2, #32
 800e484:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e48a:	4611      	mov	r1, r2
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7fe fc6a 	bl	800cd66 <ld_clust>
 800e492:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e498:	2200      	movs	r2, #0
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7fe fc82 	bl	800cda4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a2:	331c      	adds	r3, #28
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fd fcfe 	bl	800bea8 <st_dword>
					fs->wflag = 1;
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e4b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d037      	beq.n	800e528 <f_open+0x1d4>
						dw = fs->winsect;
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4bc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e4be:	f107 0318 	add.w	r3, r7, #24
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fe f995 	bl	800c7f6 <remove_chain>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e4d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d126      	bne.n	800e528 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fd ff3c 	bl	800c35c <move_window>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e4ee:	3a01      	subs	r2, #1
 800e4f0:	611a      	str	r2, [r3, #16]
 800e4f2:	e019      	b.n	800e528 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e4f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d115      	bne.n	800e528 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e4fc:	7fbb      	ldrb	r3, [r7, #30]
 800e4fe:	f003 0310 	and.w	r3, r3, #16
 800e502:	2b00      	cmp	r3, #0
 800e504:	d003      	beq.n	800e50e <f_open+0x1ba>
					res = FR_NO_FILE;
 800e506:	2304      	movs	r3, #4
 800e508:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e50c:	e00c      	b.n	800e528 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e50e:	79fb      	ldrb	r3, [r7, #7]
 800e510:	f003 0302 	and.w	r3, r3, #2
 800e514:	2b00      	cmp	r3, #0
 800e516:	d007      	beq.n	800e528 <f_open+0x1d4>
 800e518:	7fbb      	ldrb	r3, [r7, #30]
 800e51a:	f003 0301 	and.w	r3, r3, #1
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d002      	beq.n	800e528 <f_open+0x1d4>
						res = FR_DENIED;
 800e522:	2307      	movs	r3, #7
 800e524:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e528:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d128      	bne.n	800e582 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e530:	79fb      	ldrb	r3, [r7, #7]
 800e532:	f003 0308 	and.w	r3, r3, #8
 800e536:	2b00      	cmp	r3, #0
 800e538:	d003      	beq.n	800e542 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e53a:	79fb      	ldrb	r3, [r7, #7]
 800e53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e540:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e54a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e550:	79fb      	ldrb	r3, [r7, #7]
 800e552:	f023 0301 	bic.w	r3, r3, #1
 800e556:	2b00      	cmp	r3, #0
 800e558:	bf14      	ite	ne
 800e55a:	2301      	movne	r3, #1
 800e55c:	2300      	moveq	r3, #0
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	461a      	mov	r2, r3
 800e562:	f107 0318 	add.w	r3, r7, #24
 800e566:	4611      	mov	r1, r2
 800e568:	4618      	mov	r0, r3
 800e56a:	f7fd fdc5 	bl	800c0f8 <inc_lock>
 800e56e:	4602      	mov	r2, r0
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	691b      	ldr	r3, [r3, #16]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d102      	bne.n	800e582 <f_open+0x22e>
 800e57c:	2302      	movs	r3, #2
 800e57e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e582:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e586:	2b00      	cmp	r3, #0
 800e588:	f040 8095 	bne.w	800e6b6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e590:	4611      	mov	r1, r2
 800e592:	4618      	mov	r0, r3
 800e594:	f7fe fbe7 	bl	800cd66 <ld_clust>
 800e598:	4602      	mov	r2, r0
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a0:	331c      	adds	r3, #28
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7fd fc42 	bl	800be2c <ld_dword>
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e5b4:	697a      	ldr	r2, [r7, #20]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	88da      	ldrh	r2, [r3, #6]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	79fa      	ldrb	r2, [r7, #7]
 800e5c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	3330      	adds	r3, #48	; 0x30
 800e5de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e5e2:	2100      	movs	r1, #0
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7fd fcac 	bl	800bf42 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e5ea:	79fb      	ldrb	r3, [r7, #7]
 800e5ec:	f003 0320 	and.w	r3, r3, #32
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d060      	beq.n	800e6b6 <f_open+0x362>
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	68db      	ldr	r3, [r3, #12]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d05c      	beq.n	800e6b6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	68da      	ldr	r2, [r3, #12]
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	895b      	ldrh	r3, [r3, #10]
 800e608:	025b      	lsls	r3, r3, #9
 800e60a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	68db      	ldr	r3, [r3, #12]
 800e616:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e618:	e016      	b.n	800e648 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e61e:	4618      	mov	r0, r3
 800e620:	f7fd ff57 	bl	800c4d2 <get_fat>
 800e624:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d802      	bhi.n	800e632 <f_open+0x2de>
 800e62c:	2302      	movs	r3, #2
 800e62e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e638:	d102      	bne.n	800e640 <f_open+0x2ec>
 800e63a:	2301      	movs	r3, #1
 800e63c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e640:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e648:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d103      	bne.n	800e658 <f_open+0x304>
 800e650:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e654:	429a      	cmp	r2, r3
 800e656:	d8e0      	bhi.n	800e61a <f_open+0x2c6>
				}
				fp->clust = clst;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e65c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e65e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e662:	2b00      	cmp	r3, #0
 800e664:	d127      	bne.n	800e6b6 <f_open+0x362>
 800e666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d022      	beq.n	800e6b6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e674:	4618      	mov	r0, r3
 800e676:	f7fd ff0d 	bl	800c494 <clust2sect>
 800e67a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e67c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d103      	bne.n	800e68a <f_open+0x336>
						res = FR_INT_ERR;
 800e682:	2302      	movs	r3, #2
 800e684:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e688:	e015      	b.n	800e6b6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e68a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e68c:	0a5a      	lsrs	r2, r3, #9
 800e68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e690:	441a      	add	r2, r3
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	7858      	ldrb	r0, [r3, #1]
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	6a1a      	ldr	r2, [r3, #32]
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	f7fd fb4b 	bl	800bd40 <disk_read>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d002      	beq.n	800e6b6 <f_open+0x362>
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e6b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d002      	beq.n	800e6c4 <f_open+0x370>
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e6c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3768      	adds	r7, #104	; 0x68
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}

0800e6d0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b08c      	sub	sp, #48	; 0x30
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	607a      	str	r2, [r7, #4]
 800e6dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f107 0210 	add.w	r2, r7, #16
 800e6ee:	4611      	mov	r1, r2
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7ff fdb3 	bl	800e25c <validate>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e6fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e700:	2b00      	cmp	r3, #0
 800e702:	d107      	bne.n	800e714 <f_write+0x44>
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	7d5b      	ldrb	r3, [r3, #21]
 800e708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e70c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e710:	2b00      	cmp	r3, #0
 800e712:	d002      	beq.n	800e71a <f_write+0x4a>
 800e714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e718:	e14b      	b.n	800e9b2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	7d1b      	ldrb	r3, [r3, #20]
 800e71e:	f003 0302 	and.w	r3, r3, #2
 800e722:	2b00      	cmp	r3, #0
 800e724:	d101      	bne.n	800e72a <f_write+0x5a>
 800e726:	2307      	movs	r3, #7
 800e728:	e143      	b.n	800e9b2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	699a      	ldr	r2, [r3, #24]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	441a      	add	r2, r3
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	699b      	ldr	r3, [r3, #24]
 800e736:	429a      	cmp	r2, r3
 800e738:	f080 812d 	bcs.w	800e996 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	699b      	ldr	r3, [r3, #24]
 800e740:	43db      	mvns	r3, r3
 800e742:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e744:	e127      	b.n	800e996 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	699b      	ldr	r3, [r3, #24]
 800e74a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e74e:	2b00      	cmp	r3, #0
 800e750:	f040 80e3 	bne.w	800e91a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	699b      	ldr	r3, [r3, #24]
 800e758:	0a5b      	lsrs	r3, r3, #9
 800e75a:	693a      	ldr	r2, [r7, #16]
 800e75c:	8952      	ldrh	r2, [r2, #10]
 800e75e:	3a01      	subs	r2, #1
 800e760:	4013      	ands	r3, r2
 800e762:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d143      	bne.n	800e7f2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	699b      	ldr	r3, [r3, #24]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d10c      	bne.n	800e78c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	689b      	ldr	r3, [r3, #8]
 800e776:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d11a      	bne.n	800e7b4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2100      	movs	r1, #0
 800e782:	4618      	mov	r0, r3
 800e784:	f7fe f89c 	bl	800c8c0 <create_chain>
 800e788:	62b8      	str	r0, [r7, #40]	; 0x28
 800e78a:	e013      	b.n	800e7b4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e790:	2b00      	cmp	r3, #0
 800e792:	d007      	beq.n	800e7a4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	699b      	ldr	r3, [r3, #24]
 800e798:	4619      	mov	r1, r3
 800e79a:	68f8      	ldr	r0, [r7, #12]
 800e79c:	f7fe f928 	bl	800c9f0 <clmt_clust>
 800e7a0:	62b8      	str	r0, [r7, #40]	; 0x28
 800e7a2:	e007      	b.n	800e7b4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e7a4:	68fa      	ldr	r2, [r7, #12]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	69db      	ldr	r3, [r3, #28]
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	4610      	mov	r0, r2
 800e7ae:	f7fe f887 	bl	800c8c0 <create_chain>
 800e7b2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	f000 80f2 	beq.w	800e9a0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7be:	2b01      	cmp	r3, #1
 800e7c0:	d104      	bne.n	800e7cc <f_write+0xfc>
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2202      	movs	r2, #2
 800e7c6:	755a      	strb	r2, [r3, #21]
 800e7c8:	2302      	movs	r3, #2
 800e7ca:	e0f2      	b.n	800e9b2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7d2:	d104      	bne.n	800e7de <f_write+0x10e>
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	755a      	strb	r2, [r3, #21]
 800e7da:	2301      	movs	r3, #1
 800e7dc:	e0e9      	b.n	800e9b2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7e2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	689b      	ldr	r3, [r3, #8]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d102      	bne.n	800e7f2 <f_write+0x122>
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7f0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	7d1b      	ldrb	r3, [r3, #20]
 800e7f6:	b25b      	sxtb	r3, r3
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	da18      	bge.n	800e82e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	7858      	ldrb	r0, [r3, #1]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	6a1a      	ldr	r2, [r3, #32]
 800e80a:	2301      	movs	r3, #1
 800e80c:	f7fd fab8 	bl	800bd80 <disk_write>
 800e810:	4603      	mov	r3, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	d004      	beq.n	800e820 <f_write+0x150>
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2201      	movs	r2, #1
 800e81a:	755a      	strb	r2, [r3, #21]
 800e81c:	2301      	movs	r3, #1
 800e81e:	e0c8      	b.n	800e9b2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	7d1b      	ldrb	r3, [r3, #20]
 800e824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e828:	b2da      	uxtb	r2, r3
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e82e:	693a      	ldr	r2, [r7, #16]
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	69db      	ldr	r3, [r3, #28]
 800e834:	4619      	mov	r1, r3
 800e836:	4610      	mov	r0, r2
 800e838:	f7fd fe2c 	bl	800c494 <clust2sect>
 800e83c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d104      	bne.n	800e84e <f_write+0x17e>
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	2202      	movs	r2, #2
 800e848:	755a      	strb	r2, [r3, #21]
 800e84a:	2302      	movs	r3, #2
 800e84c:	e0b1      	b.n	800e9b2 <f_write+0x2e2>
			sect += csect;
 800e84e:	697a      	ldr	r2, [r7, #20]
 800e850:	69bb      	ldr	r3, [r7, #24]
 800e852:	4413      	add	r3, r2
 800e854:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	0a5b      	lsrs	r3, r3, #9
 800e85a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e85c:	6a3b      	ldr	r3, [r7, #32]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d03c      	beq.n	800e8dc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e862:	69ba      	ldr	r2, [r7, #24]
 800e864:	6a3b      	ldr	r3, [r7, #32]
 800e866:	4413      	add	r3, r2
 800e868:	693a      	ldr	r2, [r7, #16]
 800e86a:	8952      	ldrh	r2, [r2, #10]
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d905      	bls.n	800e87c <f_write+0x1ac>
					cc = fs->csize - csect;
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	895b      	ldrh	r3, [r3, #10]
 800e874:	461a      	mov	r2, r3
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	1ad3      	subs	r3, r2, r3
 800e87a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	7858      	ldrb	r0, [r3, #1]
 800e880:	6a3b      	ldr	r3, [r7, #32]
 800e882:	697a      	ldr	r2, [r7, #20]
 800e884:	69f9      	ldr	r1, [r7, #28]
 800e886:	f7fd fa7b 	bl	800bd80 <disk_write>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d004      	beq.n	800e89a <f_write+0x1ca>
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2201      	movs	r2, #1
 800e894:	755a      	strb	r2, [r3, #21]
 800e896:	2301      	movs	r3, #1
 800e898:	e08b      	b.n	800e9b2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6a1a      	ldr	r2, [r3, #32]
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	1ad3      	subs	r3, r2, r3
 800e8a2:	6a3a      	ldr	r2, [r7, #32]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d915      	bls.n	800e8d4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	6a1a      	ldr	r2, [r3, #32]
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	1ad3      	subs	r3, r2, r3
 800e8b6:	025b      	lsls	r3, r3, #9
 800e8b8:	69fa      	ldr	r2, [r7, #28]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	f7fd fb1d 	bl	800bf00 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	7d1b      	ldrb	r3, [r3, #20]
 800e8ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8ce:	b2da      	uxtb	r2, r3
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e8d4:	6a3b      	ldr	r3, [r7, #32]
 800e8d6:	025b      	lsls	r3, r3, #9
 800e8d8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e8da:	e03f      	b.n	800e95c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6a1b      	ldr	r3, [r3, #32]
 800e8e0:	697a      	ldr	r2, [r7, #20]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d016      	beq.n	800e914 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	699a      	ldr	r2, [r3, #24]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d210      	bcs.n	800e914 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	7858      	ldrb	r0, [r3, #1]
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	697a      	ldr	r2, [r7, #20]
 800e900:	f7fd fa1e 	bl	800bd40 <disk_read>
 800e904:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e906:	2b00      	cmp	r3, #0
 800e908:	d004      	beq.n	800e914 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2201      	movs	r2, #1
 800e90e:	755a      	strb	r2, [r3, #21]
 800e910:	2301      	movs	r3, #1
 800e912:	e04e      	b.n	800e9b2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	697a      	ldr	r2, [r7, #20]
 800e918:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	699b      	ldr	r3, [r3, #24]
 800e91e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e922:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e926:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d901      	bls.n	800e934 <f_write+0x264>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	699b      	ldr	r3, [r3, #24]
 800e93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e942:	4413      	add	r3, r2
 800e944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e946:	69f9      	ldr	r1, [r7, #28]
 800e948:	4618      	mov	r0, r3
 800e94a:	f7fd fad9 	bl	800bf00 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	7d1b      	ldrb	r3, [r3, #20]
 800e952:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e956:	b2da      	uxtb	r2, r3
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e95c:	69fa      	ldr	r2, [r7, #28]
 800e95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e960:	4413      	add	r3, r2
 800e962:	61fb      	str	r3, [r7, #28]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	699a      	ldr	r2, [r3, #24]
 800e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96a:	441a      	add	r2, r3
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	619a      	str	r2, [r3, #24]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	68da      	ldr	r2, [r3, #12]
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	699b      	ldr	r3, [r3, #24]
 800e978:	429a      	cmp	r2, r3
 800e97a:	bf38      	it	cc
 800e97c:	461a      	movcc	r2, r3
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	60da      	str	r2, [r3, #12]
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	681a      	ldr	r2, [r3, #0]
 800e986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e988:	441a      	add	r2, r3
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	601a      	str	r2, [r3, #0]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e992:	1ad3      	subs	r3, r2, r3
 800e994:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	f47f aed4 	bne.w	800e746 <f_write+0x76>
 800e99e:	e000      	b.n	800e9a2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e9a0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	7d1b      	ldrb	r3, [r3, #20]
 800e9a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9aa:	b2da      	uxtb	r2, r3
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e9b0:	2300      	movs	r3, #0
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3730      	adds	r7, #48	; 0x30
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}

0800e9ba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e9ba:	b580      	push	{r7, lr}
 800e9bc:	b086      	sub	sp, #24
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f107 0208 	add.w	r2, r7, #8
 800e9c8:	4611      	mov	r1, r2
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7ff fc46 	bl	800e25c <validate>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e9d4:	7dfb      	ldrb	r3, [r7, #23]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d168      	bne.n	800eaac <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	7d1b      	ldrb	r3, [r3, #20]
 800e9de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d062      	beq.n	800eaac <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	7d1b      	ldrb	r3, [r3, #20]
 800e9ea:	b25b      	sxtb	r3, r3
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	da15      	bge.n	800ea1c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	7858      	ldrb	r0, [r3, #1]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6a1a      	ldr	r2, [r3, #32]
 800e9fe:	2301      	movs	r3, #1
 800ea00:	f7fd f9be 	bl	800bd80 <disk_write>
 800ea04:	4603      	mov	r3, r0
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d001      	beq.n	800ea0e <f_sync+0x54>
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e04f      	b.n	800eaae <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	7d1b      	ldrb	r3, [r3, #20]
 800ea12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea16:	b2da      	uxtb	r2, r3
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ea1c:	f7fa ff22 	bl	8009864 <get_fattime>
 800ea20:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ea22:	68ba      	ldr	r2, [r7, #8]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea28:	4619      	mov	r1, r3
 800ea2a:	4610      	mov	r0, r2
 800ea2c:	f7fd fc96 	bl	800c35c <move_window>
 800ea30:	4603      	mov	r3, r0
 800ea32:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ea34:	7dfb      	ldrb	r3, [r7, #23]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d138      	bne.n	800eaac <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea3e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	330b      	adds	r3, #11
 800ea44:	781a      	ldrb	r2, [r3, #0]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	330b      	adds	r3, #11
 800ea4a:	f042 0220 	orr.w	r2, r2, #32
 800ea4e:	b2d2      	uxtb	r2, r2
 800ea50:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6818      	ldr	r0, [r3, #0]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	68f9      	ldr	r1, [r7, #12]
 800ea5e:	f7fe f9a1 	bl	800cda4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f103 021c 	add.w	r2, r3, #28
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	4610      	mov	r0, r2
 800ea70:	f7fd fa1a 	bl	800bea8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	3316      	adds	r3, #22
 800ea78:	6939      	ldr	r1, [r7, #16]
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7fd fa14 	bl	800bea8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	3312      	adds	r3, #18
 800ea84:	2100      	movs	r1, #0
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7fd f9f3 	bl	800be72 <st_word>
					fs->wflag = 1;
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7fd fc8f 	bl	800c3b8 <sync_fs>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	7d1b      	ldrb	r3, [r3, #20]
 800eaa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eaa6:	b2da      	uxtb	r2, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800eaac:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3718      	adds	r7, #24
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}

0800eab6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800eab6:	b580      	push	{r7, lr}
 800eab8:	b084      	sub	sp, #16
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f7ff ff7b 	bl	800e9ba <f_sync>
 800eac4:	4603      	mov	r3, r0
 800eac6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eac8:	7bfb      	ldrb	r3, [r7, #15]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d118      	bne.n	800eb00 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f107 0208 	add.w	r2, r7, #8
 800ead4:	4611      	mov	r1, r2
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7ff fbc0 	bl	800e25c <validate>
 800eadc:	4603      	mov	r3, r0
 800eade:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eae0:	7bfb      	ldrb	r3, [r7, #15]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d10c      	bne.n	800eb00 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	691b      	ldr	r3, [r3, #16]
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7fd fb92 	bl	800c214 <dec_lock>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800eaf4:	7bfb      	ldrb	r3, [r7, #15]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d102      	bne.n	800eb00 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2200      	movs	r2, #0
 800eafe:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800eb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3710      	adds	r7, #16
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}

0800eb0a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800eb0a:	b580      	push	{r7, lr}
 800eb0c:	b086      	sub	sp, #24
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
 800eb12:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d101      	bne.n	800eb1e <f_opendir+0x14>
 800eb1a:	2309      	movs	r3, #9
 800eb1c:	e064      	b.n	800ebe8 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800eb22:	f107 010c 	add.w	r1, r7, #12
 800eb26:	463b      	mov	r3, r7
 800eb28:	2200      	movs	r2, #0
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7ff f946 	bl	800ddbc <find_volume>
 800eb30:	4603      	mov	r3, r0
 800eb32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb34:	7dfb      	ldrb	r3, [r7, #23]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d14f      	bne.n	800ebda <f_opendir+0xd0>
		obj->fs = fs;
 800eb3a:	68fa      	ldr	r2, [r7, #12]
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	4619      	mov	r1, r3
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f7ff f82d 	bl	800dba4 <follow_path>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800eb4e:	7dfb      	ldrb	r3, [r7, #23]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d13d      	bne.n	800ebd0 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb5a:	b25b      	sxtb	r3, r3
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	db12      	blt.n	800eb86 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	799b      	ldrb	r3, [r3, #6]
 800eb64:	f003 0310 	and.w	r3, r3, #16
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00a      	beq.n	800eb82 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800eb6c:	68fa      	ldr	r2, [r7, #12]
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6a1b      	ldr	r3, [r3, #32]
 800eb72:	4619      	mov	r1, r3
 800eb74:	4610      	mov	r0, r2
 800eb76:	f7fe f8f6 	bl	800cd66 <ld_clust>
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	609a      	str	r2, [r3, #8]
 800eb80:	e001      	b.n	800eb86 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800eb82:	2305      	movs	r3, #5
 800eb84:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800eb86:	7dfb      	ldrb	r3, [r7, #23]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d121      	bne.n	800ebd0 <f_opendir+0xc6>
				obj->id = fs->id;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	88da      	ldrh	r2, [r3, #6]
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800eb94:	2100      	movs	r1, #0
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7fd ff5e 	bl	800ca58 <dir_sdi>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800eba0:	7dfb      	ldrb	r3, [r7, #23]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d114      	bne.n	800ebd0 <f_opendir+0xc6>
					if (obj->sclust) {
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	689b      	ldr	r3, [r3, #8]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d00d      	beq.n	800ebca <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ebae:	2100      	movs	r1, #0
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f7fd faa1 	bl	800c0f8 <inc_lock>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	691b      	ldr	r3, [r3, #16]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d105      	bne.n	800ebd0 <f_opendir+0xc6>
 800ebc4:	2312      	movs	r3, #18
 800ebc6:	75fb      	strb	r3, [r7, #23]
 800ebc8:	e002      	b.n	800ebd0 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ebd0:	7dfb      	ldrb	r3, [r7, #23]
 800ebd2:	2b04      	cmp	r3, #4
 800ebd4:	d101      	bne.n	800ebda <f_opendir+0xd0>
 800ebd6:	2305      	movs	r3, #5
 800ebd8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ebda:	7dfb      	ldrb	r3, [r7, #23]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d002      	beq.n	800ebe6 <f_opendir+0xdc>
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ebe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3718      	adds	r7, #24
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f107 0208 	add.w	r2, r7, #8
 800ebfe:	4611      	mov	r1, r2
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7ff fb2b 	bl	800e25c <validate>
 800ec06:	4603      	mov	r3, r0
 800ec08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ec0a:	7bfb      	ldrb	r3, [r7, #15]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d110      	bne.n	800ec32 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	691b      	ldr	r3, [r3, #16]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d006      	beq.n	800ec26 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	691b      	ldr	r3, [r3, #16]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f7fd faf9 	bl	800c214 <dec_lock>
 800ec22:	4603      	mov	r3, r0
 800ec24:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800ec26:	7bfb      	ldrb	r3, [r7, #15]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d102      	bne.n	800ec32 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800ec32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3710      	adds	r7, #16
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f107 0208 	add.w	r2, r7, #8
 800ec4c:	4611      	mov	r1, r2
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7ff fb04 	bl	800e25c <validate>
 800ec54:	4603      	mov	r3, r0
 800ec56:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ec58:	7bfb      	ldrb	r3, [r7, #15]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d126      	bne.n	800ecac <f_readdir+0x70>
		if (!fno) {
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d106      	bne.n	800ec72 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800ec64:	2100      	movs	r1, #0
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f7fd fef6 	bl	800ca58 <dir_sdi>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	73fb      	strb	r3, [r7, #15]
 800ec70:	e01c      	b.n	800ecac <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800ec72:	2100      	movs	r1, #0
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7fe faa0 	bl	800d1ba <dir_read>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ec7e:	7bfb      	ldrb	r3, [r7, #15]
 800ec80:	2b04      	cmp	r3, #4
 800ec82:	d101      	bne.n	800ec88 <f_readdir+0x4c>
 800ec84:	2300      	movs	r3, #0
 800ec86:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800ec88:	7bfb      	ldrb	r3, [r7, #15]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d10e      	bne.n	800ecac <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ec8e:	6839      	ldr	r1, [r7, #0]
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f7fe fcf1 	bl	800d678 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ec96:	2100      	movs	r1, #0
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f7fd ff58 	bl	800cb4e <dir_next>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800eca2:	7bfb      	ldrb	r3, [r7, #15]
 800eca4:	2b04      	cmp	r3, #4
 800eca6:	d101      	bne.n	800ecac <f_readdir+0x70>
 800eca8:	2300      	movs	r3, #0
 800ecaa:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ecac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
	...

0800ecb8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b087      	sub	sp, #28
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	4613      	mov	r3, r2
 800ecc4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ecca:	2300      	movs	r3, #0
 800eccc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ecce:	4b1f      	ldr	r3, [pc, #124]	; (800ed4c <FATFS_LinkDriverEx+0x94>)
 800ecd0:	7a5b      	ldrb	r3, [r3, #9]
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d131      	bne.n	800ed3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ecd8:	4b1c      	ldr	r3, [pc, #112]	; (800ed4c <FATFS_LinkDriverEx+0x94>)
 800ecda:	7a5b      	ldrb	r3, [r3, #9]
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	461a      	mov	r2, r3
 800ece0:	4b1a      	ldr	r3, [pc, #104]	; (800ed4c <FATFS_LinkDriverEx+0x94>)
 800ece2:	2100      	movs	r1, #0
 800ece4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ece6:	4b19      	ldr	r3, [pc, #100]	; (800ed4c <FATFS_LinkDriverEx+0x94>)
 800ece8:	7a5b      	ldrb	r3, [r3, #9]
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	4a17      	ldr	r2, [pc, #92]	; (800ed4c <FATFS_LinkDriverEx+0x94>)
 800ecee:	009b      	lsls	r3, r3, #2
 800ecf0:	4413      	add	r3, r2
 800ecf2:	68fa      	ldr	r2, [r7, #12]
 800ecf4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ecf6:	4b15      	ldr	r3, [pc, #84]	; (800ed4c <FATFS_LinkDriverEx+0x94>)
 800ecf8:	7a5b      	ldrb	r3, [r3, #9]
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	4b13      	ldr	r3, [pc, #76]	; (800ed4c <FATFS_LinkDriverEx+0x94>)
 800ed00:	4413      	add	r3, r2
 800ed02:	79fa      	ldrb	r2, [r7, #7]
 800ed04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ed06:	4b11      	ldr	r3, [pc, #68]	; (800ed4c <FATFS_LinkDriverEx+0x94>)
 800ed08:	7a5b      	ldrb	r3, [r3, #9]
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	1c5a      	adds	r2, r3, #1
 800ed0e:	b2d1      	uxtb	r1, r2
 800ed10:	4a0e      	ldr	r2, [pc, #56]	; (800ed4c <FATFS_LinkDriverEx+0x94>)
 800ed12:	7251      	strb	r1, [r2, #9]
 800ed14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ed16:	7dbb      	ldrb	r3, [r7, #22]
 800ed18:	3330      	adds	r3, #48	; 0x30
 800ed1a:	b2da      	uxtb	r2, r3
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	3301      	adds	r3, #1
 800ed24:	223a      	movs	r2, #58	; 0x3a
 800ed26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	3302      	adds	r3, #2
 800ed2c:	222f      	movs	r2, #47	; 0x2f
 800ed2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	3303      	adds	r3, #3
 800ed34:	2200      	movs	r2, #0
 800ed36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ed3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	371c      	adds	r7, #28
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	20003480 	.word	0x20003480

0800ed50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	6839      	ldr	r1, [r7, #0]
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f7ff ffaa 	bl	800ecb8 <FATFS_LinkDriverEx>
 800ed64:	4603      	mov	r3, r0
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3708      	adds	r7, #8
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
	...

0800ed70 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ed70:	b480      	push	{r7}
 800ed72:	b085      	sub	sp, #20
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	4603      	mov	r3, r0
 800ed78:	6039      	str	r1, [r7, #0]
 800ed7a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ed7c:	88fb      	ldrh	r3, [r7, #6]
 800ed7e:	2b7f      	cmp	r3, #127	; 0x7f
 800ed80:	d802      	bhi.n	800ed88 <ff_convert+0x18>
		c = chr;
 800ed82:	88fb      	ldrh	r3, [r7, #6]
 800ed84:	81fb      	strh	r3, [r7, #14]
 800ed86:	e025      	b.n	800edd4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d00b      	beq.n	800eda6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ed8e:	88fb      	ldrh	r3, [r7, #6]
 800ed90:	2bff      	cmp	r3, #255	; 0xff
 800ed92:	d805      	bhi.n	800eda0 <ff_convert+0x30>
 800ed94:	88fb      	ldrh	r3, [r7, #6]
 800ed96:	3b80      	subs	r3, #128	; 0x80
 800ed98:	4a12      	ldr	r2, [pc, #72]	; (800ede4 <ff_convert+0x74>)
 800ed9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed9e:	e000      	b.n	800eda2 <ff_convert+0x32>
 800eda0:	2300      	movs	r3, #0
 800eda2:	81fb      	strh	r3, [r7, #14]
 800eda4:	e016      	b.n	800edd4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800eda6:	2300      	movs	r3, #0
 800eda8:	81fb      	strh	r3, [r7, #14]
 800edaa:	e009      	b.n	800edc0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800edac:	89fb      	ldrh	r3, [r7, #14]
 800edae:	4a0d      	ldr	r2, [pc, #52]	; (800ede4 <ff_convert+0x74>)
 800edb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edb4:	88fa      	ldrh	r2, [r7, #6]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d006      	beq.n	800edc8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800edba:	89fb      	ldrh	r3, [r7, #14]
 800edbc:	3301      	adds	r3, #1
 800edbe:	81fb      	strh	r3, [r7, #14]
 800edc0:	89fb      	ldrh	r3, [r7, #14]
 800edc2:	2b7f      	cmp	r3, #127	; 0x7f
 800edc4:	d9f2      	bls.n	800edac <ff_convert+0x3c>
 800edc6:	e000      	b.n	800edca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800edc8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800edca:	89fb      	ldrh	r3, [r7, #14]
 800edcc:	3380      	adds	r3, #128	; 0x80
 800edce:	b29b      	uxth	r3, r3
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800edd4:	89fb      	ldrh	r3, [r7, #14]
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3714      	adds	r7, #20
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr
 800ede2:	bf00      	nop
 800ede4:	08011304 	.word	0x08011304

0800ede8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ede8:	b480      	push	{r7}
 800edea:	b087      	sub	sp, #28
 800edec:	af00      	add	r7, sp, #0
 800edee:	4603      	mov	r3, r0
 800edf0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800edf2:	88fb      	ldrh	r3, [r7, #6]
 800edf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800edf8:	d201      	bcs.n	800edfe <ff_wtoupper+0x16>
 800edfa:	4b3e      	ldr	r3, [pc, #248]	; (800eef4 <ff_wtoupper+0x10c>)
 800edfc:	e000      	b.n	800ee00 <ff_wtoupper+0x18>
 800edfe:	4b3e      	ldr	r3, [pc, #248]	; (800eef8 <ff_wtoupper+0x110>)
 800ee00:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	1c9a      	adds	r2, r3, #2
 800ee06:	617a      	str	r2, [r7, #20]
 800ee08:	881b      	ldrh	r3, [r3, #0]
 800ee0a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ee0c:	8a7b      	ldrh	r3, [r7, #18]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d068      	beq.n	800eee4 <ff_wtoupper+0xfc>
 800ee12:	88fa      	ldrh	r2, [r7, #6]
 800ee14:	8a7b      	ldrh	r3, [r7, #18]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d364      	bcc.n	800eee4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	1c9a      	adds	r2, r3, #2
 800ee1e:	617a      	str	r2, [r7, #20]
 800ee20:	881b      	ldrh	r3, [r3, #0]
 800ee22:	823b      	strh	r3, [r7, #16]
 800ee24:	8a3b      	ldrh	r3, [r7, #16]
 800ee26:	0a1b      	lsrs	r3, r3, #8
 800ee28:	81fb      	strh	r3, [r7, #14]
 800ee2a:	8a3b      	ldrh	r3, [r7, #16]
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ee30:	88fa      	ldrh	r2, [r7, #6]
 800ee32:	8a79      	ldrh	r1, [r7, #18]
 800ee34:	8a3b      	ldrh	r3, [r7, #16]
 800ee36:	440b      	add	r3, r1
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	da49      	bge.n	800eed0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ee3c:	89fb      	ldrh	r3, [r7, #14]
 800ee3e:	2b08      	cmp	r3, #8
 800ee40:	d84f      	bhi.n	800eee2 <ff_wtoupper+0xfa>
 800ee42:	a201      	add	r2, pc, #4	; (adr r2, 800ee48 <ff_wtoupper+0x60>)
 800ee44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee48:	0800ee6d 	.word	0x0800ee6d
 800ee4c:	0800ee7f 	.word	0x0800ee7f
 800ee50:	0800ee95 	.word	0x0800ee95
 800ee54:	0800ee9d 	.word	0x0800ee9d
 800ee58:	0800eea5 	.word	0x0800eea5
 800ee5c:	0800eead 	.word	0x0800eead
 800ee60:	0800eeb5 	.word	0x0800eeb5
 800ee64:	0800eebd 	.word	0x0800eebd
 800ee68:	0800eec5 	.word	0x0800eec5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ee6c:	88fa      	ldrh	r2, [r7, #6]
 800ee6e:	8a7b      	ldrh	r3, [r7, #18]
 800ee70:	1ad3      	subs	r3, r2, r3
 800ee72:	005b      	lsls	r3, r3, #1
 800ee74:	697a      	ldr	r2, [r7, #20]
 800ee76:	4413      	add	r3, r2
 800ee78:	881b      	ldrh	r3, [r3, #0]
 800ee7a:	80fb      	strh	r3, [r7, #6]
 800ee7c:	e027      	b.n	800eece <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ee7e:	88fa      	ldrh	r2, [r7, #6]
 800ee80:	8a7b      	ldrh	r3, [r7, #18]
 800ee82:	1ad3      	subs	r3, r2, r3
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	f003 0301 	and.w	r3, r3, #1
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	88fa      	ldrh	r2, [r7, #6]
 800ee8e:	1ad3      	subs	r3, r2, r3
 800ee90:	80fb      	strh	r3, [r7, #6]
 800ee92:	e01c      	b.n	800eece <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ee94:	88fb      	ldrh	r3, [r7, #6]
 800ee96:	3b10      	subs	r3, #16
 800ee98:	80fb      	strh	r3, [r7, #6]
 800ee9a:	e018      	b.n	800eece <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ee9c:	88fb      	ldrh	r3, [r7, #6]
 800ee9e:	3b20      	subs	r3, #32
 800eea0:	80fb      	strh	r3, [r7, #6]
 800eea2:	e014      	b.n	800eece <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800eea4:	88fb      	ldrh	r3, [r7, #6]
 800eea6:	3b30      	subs	r3, #48	; 0x30
 800eea8:	80fb      	strh	r3, [r7, #6]
 800eeaa:	e010      	b.n	800eece <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800eeac:	88fb      	ldrh	r3, [r7, #6]
 800eeae:	3b1a      	subs	r3, #26
 800eeb0:	80fb      	strh	r3, [r7, #6]
 800eeb2:	e00c      	b.n	800eece <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800eeb4:	88fb      	ldrh	r3, [r7, #6]
 800eeb6:	3308      	adds	r3, #8
 800eeb8:	80fb      	strh	r3, [r7, #6]
 800eeba:	e008      	b.n	800eece <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800eebc:	88fb      	ldrh	r3, [r7, #6]
 800eebe:	3b50      	subs	r3, #80	; 0x50
 800eec0:	80fb      	strh	r3, [r7, #6]
 800eec2:	e004      	b.n	800eece <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800eec4:	88fb      	ldrh	r3, [r7, #6]
 800eec6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800eeca:	80fb      	strh	r3, [r7, #6]
 800eecc:	bf00      	nop
			}
			break;
 800eece:	e008      	b.n	800eee2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800eed0:	89fb      	ldrh	r3, [r7, #14]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d195      	bne.n	800ee02 <ff_wtoupper+0x1a>
 800eed6:	8a3b      	ldrh	r3, [r7, #16]
 800eed8:	005b      	lsls	r3, r3, #1
 800eeda:	697a      	ldr	r2, [r7, #20]
 800eedc:	4413      	add	r3, r2
 800eede:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800eee0:	e78f      	b.n	800ee02 <ff_wtoupper+0x1a>
			break;
 800eee2:	bf00      	nop
	}

	return chr;
 800eee4:	88fb      	ldrh	r3, [r7, #6]
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	371c      	adds	r7, #28
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
 800eef4:	08011404 	.word	0x08011404
 800eef8:	080115f8 	.word	0x080115f8

0800eefc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ef00:	2200      	movs	r2, #0
 800ef02:	4912      	ldr	r1, [pc, #72]	; (800ef4c <MX_USB_DEVICE_Init+0x50>)
 800ef04:	4812      	ldr	r0, [pc, #72]	; (800ef50 <MX_USB_DEVICE_Init+0x54>)
 800ef06:	f7fb fbbf 	bl	800a688 <USBD_Init>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ef10:	f7f2 f8d2 	bl	80010b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ef14:	490f      	ldr	r1, [pc, #60]	; (800ef54 <MX_USB_DEVICE_Init+0x58>)
 800ef16:	480e      	ldr	r0, [pc, #56]	; (800ef50 <MX_USB_DEVICE_Init+0x54>)
 800ef18:	f7fb fbe6 	bl	800a6e8 <USBD_RegisterClass>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d001      	beq.n	800ef26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ef22:	f7f2 f8c9 	bl	80010b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ef26:	490c      	ldr	r1, [pc, #48]	; (800ef58 <MX_USB_DEVICE_Init+0x5c>)
 800ef28:	4809      	ldr	r0, [pc, #36]	; (800ef50 <MX_USB_DEVICE_Init+0x54>)
 800ef2a:	f7fb fadd 	bl	800a4e8 <USBD_CDC_RegisterInterface>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d001      	beq.n	800ef38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ef34:	f7f2 f8c0 	bl	80010b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ef38:	4805      	ldr	r0, [pc, #20]	; (800ef50 <MX_USB_DEVICE_Init+0x54>)
 800ef3a:	f7fb fc0b 	bl	800a754 <USBD_Start>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d001      	beq.n	800ef48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ef44:	f7f2 f8b8 	bl	80010b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ef48:	bf00      	nop
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	200000ac 	.word	0x200000ac
 800ef50:	2000348c 	.word	0x2000348c
 800ef54:	20000018 	.word	0x20000018
 800ef58:	20000098 	.word	0x20000098

0800ef5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ef60:	2200      	movs	r2, #0
 800ef62:	4905      	ldr	r1, [pc, #20]	; (800ef78 <CDC_Init_FS+0x1c>)
 800ef64:	4805      	ldr	r0, [pc, #20]	; (800ef7c <CDC_Init_FS+0x20>)
 800ef66:	f7fb fad9 	bl	800a51c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ef6a:	4905      	ldr	r1, [pc, #20]	; (800ef80 <CDC_Init_FS+0x24>)
 800ef6c:	4803      	ldr	r0, [pc, #12]	; (800ef7c <CDC_Init_FS+0x20>)
 800ef6e:	f7fb faf7 	bl	800a560 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ef72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	20003f68 	.word	0x20003f68
 800ef7c:	2000348c 	.word	0x2000348c
 800ef80:	20003768 	.word	0x20003768

0800ef84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ef84:	b480      	push	{r7}
 800ef86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ef88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr

0800ef94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	6039      	str	r1, [r7, #0]
 800ef9e:	71fb      	strb	r3, [r7, #7]
 800efa0:	4613      	mov	r3, r2
 800efa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800efa4:	79fb      	ldrb	r3, [r7, #7]
 800efa6:	2b23      	cmp	r3, #35	; 0x23
 800efa8:	d84a      	bhi.n	800f040 <CDC_Control_FS+0xac>
 800efaa:	a201      	add	r2, pc, #4	; (adr r2, 800efb0 <CDC_Control_FS+0x1c>)
 800efac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb0:	0800f041 	.word	0x0800f041
 800efb4:	0800f041 	.word	0x0800f041
 800efb8:	0800f041 	.word	0x0800f041
 800efbc:	0800f041 	.word	0x0800f041
 800efc0:	0800f041 	.word	0x0800f041
 800efc4:	0800f041 	.word	0x0800f041
 800efc8:	0800f041 	.word	0x0800f041
 800efcc:	0800f041 	.word	0x0800f041
 800efd0:	0800f041 	.word	0x0800f041
 800efd4:	0800f041 	.word	0x0800f041
 800efd8:	0800f041 	.word	0x0800f041
 800efdc:	0800f041 	.word	0x0800f041
 800efe0:	0800f041 	.word	0x0800f041
 800efe4:	0800f041 	.word	0x0800f041
 800efe8:	0800f041 	.word	0x0800f041
 800efec:	0800f041 	.word	0x0800f041
 800eff0:	0800f041 	.word	0x0800f041
 800eff4:	0800f041 	.word	0x0800f041
 800eff8:	0800f041 	.word	0x0800f041
 800effc:	0800f041 	.word	0x0800f041
 800f000:	0800f041 	.word	0x0800f041
 800f004:	0800f041 	.word	0x0800f041
 800f008:	0800f041 	.word	0x0800f041
 800f00c:	0800f041 	.word	0x0800f041
 800f010:	0800f041 	.word	0x0800f041
 800f014:	0800f041 	.word	0x0800f041
 800f018:	0800f041 	.word	0x0800f041
 800f01c:	0800f041 	.word	0x0800f041
 800f020:	0800f041 	.word	0x0800f041
 800f024:	0800f041 	.word	0x0800f041
 800f028:	0800f041 	.word	0x0800f041
 800f02c:	0800f041 	.word	0x0800f041
 800f030:	0800f041 	.word	0x0800f041
 800f034:	0800f041 	.word	0x0800f041
 800f038:	0800f041 	.word	0x0800f041
 800f03c:	0800f041 	.word	0x0800f041
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f040:	bf00      	nop
  }

  return (USBD_OK);
 800f042:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f044:	4618      	mov	r0, r3
 800f046:	370c      	adds	r7, #12
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr

0800f050 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f05a:	6879      	ldr	r1, [r7, #4]
 800f05c:	4805      	ldr	r0, [pc, #20]	; (800f074 <CDC_Receive_FS+0x24>)
 800f05e:	f7fb fa7f 	bl	800a560 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f062:	4804      	ldr	r0, [pc, #16]	; (800f074 <CDC_Receive_FS+0x24>)
 800f064:	f7fb fada 	bl	800a61c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f068:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3708      	adds	r7, #8
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	2000348c 	.word	0x2000348c

0800f078 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b084      	sub	sp, #16
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	460b      	mov	r3, r1
 800f082:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f084:	2300      	movs	r3, #0
 800f086:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f088:	4b0d      	ldr	r3, [pc, #52]	; (800f0c0 <CDC_Transmit_FS+0x48>)
 800f08a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f08e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f096:	2b00      	cmp	r3, #0
 800f098:	d001      	beq.n	800f09e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f09a:	2301      	movs	r3, #1
 800f09c:	e00b      	b.n	800f0b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f09e:	887b      	ldrh	r3, [r7, #2]
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	6879      	ldr	r1, [r7, #4]
 800f0a4:	4806      	ldr	r0, [pc, #24]	; (800f0c0 <CDC_Transmit_FS+0x48>)
 800f0a6:	f7fb fa39 	bl	800a51c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f0aa:	4805      	ldr	r0, [pc, #20]	; (800f0c0 <CDC_Transmit_FS+0x48>)
 800f0ac:	f7fb fa76 	bl	800a59c <USBD_CDC_TransmitPacket>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	2000348c 	.word	0x2000348c

0800f0c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b087      	sub	sp, #28
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	60f8      	str	r0, [r7, #12]
 800f0cc:	60b9      	str	r1, [r7, #8]
 800f0ce:	4613      	mov	r3, r2
 800f0d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f0d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	371c      	adds	r7, #28
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e4:	4770      	bx	lr
	...

0800f0e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	6039      	str	r1, [r7, #0]
 800f0f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	2212      	movs	r2, #18
 800f0f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f0fa:	4b03      	ldr	r3, [pc, #12]	; (800f108 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr
 800f108:	200000cc 	.word	0x200000cc

0800f10c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f10c:	b480      	push	{r7}
 800f10e:	b083      	sub	sp, #12
 800f110:	af00      	add	r7, sp, #0
 800f112:	4603      	mov	r3, r0
 800f114:	6039      	str	r1, [r7, #0]
 800f116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	2204      	movs	r2, #4
 800f11c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f11e:	4b03      	ldr	r3, [pc, #12]	; (800f12c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f120:	4618      	mov	r0, r3
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr
 800f12c:	200000ec 	.word	0x200000ec

0800f130 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	4603      	mov	r3, r0
 800f138:	6039      	str	r1, [r7, #0]
 800f13a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f13c:	79fb      	ldrb	r3, [r7, #7]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d105      	bne.n	800f14e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f142:	683a      	ldr	r2, [r7, #0]
 800f144:	4907      	ldr	r1, [pc, #28]	; (800f164 <USBD_FS_ProductStrDescriptor+0x34>)
 800f146:	4808      	ldr	r0, [pc, #32]	; (800f168 <USBD_FS_ProductStrDescriptor+0x38>)
 800f148:	f7fc fcda 	bl	800bb00 <USBD_GetString>
 800f14c:	e004      	b.n	800f158 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f14e:	683a      	ldr	r2, [r7, #0]
 800f150:	4904      	ldr	r1, [pc, #16]	; (800f164 <USBD_FS_ProductStrDescriptor+0x34>)
 800f152:	4805      	ldr	r0, [pc, #20]	; (800f168 <USBD_FS_ProductStrDescriptor+0x38>)
 800f154:	f7fc fcd4 	bl	800bb00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f158:	4b02      	ldr	r3, [pc, #8]	; (800f164 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3708      	adds	r7, #8
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	20004768 	.word	0x20004768
 800f168:	080111f8 	.word	0x080111f8

0800f16c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b082      	sub	sp, #8
 800f170:	af00      	add	r7, sp, #0
 800f172:	4603      	mov	r3, r0
 800f174:	6039      	str	r1, [r7, #0]
 800f176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f178:	683a      	ldr	r2, [r7, #0]
 800f17a:	4904      	ldr	r1, [pc, #16]	; (800f18c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f17c:	4804      	ldr	r0, [pc, #16]	; (800f190 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f17e:	f7fc fcbf 	bl	800bb00 <USBD_GetString>
  return USBD_StrDesc;
 800f182:	4b02      	ldr	r3, [pc, #8]	; (800f18c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f184:	4618      	mov	r0, r3
 800f186:	3708      	adds	r7, #8
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	20004768 	.word	0x20004768
 800f190:	08011210 	.word	0x08011210

0800f194 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	4603      	mov	r3, r0
 800f19c:	6039      	str	r1, [r7, #0]
 800f19e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	221a      	movs	r2, #26
 800f1a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f1a6:	f000 f855 	bl	800f254 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f1aa:	4b02      	ldr	r3, [pc, #8]	; (800f1b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3708      	adds	r7, #8
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	200000f0 	.word	0x200000f0

0800f1b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	4603      	mov	r3, r0
 800f1c0:	6039      	str	r1, [r7, #0]
 800f1c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f1c4:	79fb      	ldrb	r3, [r7, #7]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d105      	bne.n	800f1d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f1ca:	683a      	ldr	r2, [r7, #0]
 800f1cc:	4907      	ldr	r1, [pc, #28]	; (800f1ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800f1ce:	4808      	ldr	r0, [pc, #32]	; (800f1f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f1d0:	f7fc fc96 	bl	800bb00 <USBD_GetString>
 800f1d4:	e004      	b.n	800f1e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f1d6:	683a      	ldr	r2, [r7, #0]
 800f1d8:	4904      	ldr	r1, [pc, #16]	; (800f1ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800f1da:	4805      	ldr	r0, [pc, #20]	; (800f1f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f1dc:	f7fc fc90 	bl	800bb00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1e0:	4b02      	ldr	r3, [pc, #8]	; (800f1ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3708      	adds	r7, #8
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	20004768 	.word	0x20004768
 800f1f0:	08011224 	.word	0x08011224

0800f1f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	6039      	str	r1, [r7, #0]
 800f1fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f200:	79fb      	ldrb	r3, [r7, #7]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d105      	bne.n	800f212 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f206:	683a      	ldr	r2, [r7, #0]
 800f208:	4907      	ldr	r1, [pc, #28]	; (800f228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f20a:	4808      	ldr	r0, [pc, #32]	; (800f22c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f20c:	f7fc fc78 	bl	800bb00 <USBD_GetString>
 800f210:	e004      	b.n	800f21c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f212:	683a      	ldr	r2, [r7, #0]
 800f214:	4904      	ldr	r1, [pc, #16]	; (800f228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f216:	4805      	ldr	r0, [pc, #20]	; (800f22c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f218:	f7fc fc72 	bl	800bb00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f21c:	4b02      	ldr	r3, [pc, #8]	; (800f228 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3708      	adds	r7, #8
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}
 800f226:	bf00      	nop
 800f228:	20004768 	.word	0x20004768
 800f22c:	08011230 	.word	0x08011230

0800f230 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	4603      	mov	r3, r0
 800f238:	6039      	str	r1, [r7, #0]
 800f23a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	220c      	movs	r2, #12
 800f240:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f242:	4b03      	ldr	r3, [pc, #12]	; (800f250 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f244:	4618      	mov	r0, r3
 800f246:	370c      	adds	r7, #12
 800f248:	46bd      	mov	sp, r7
 800f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24e:	4770      	bx	lr
 800f250:	200000e0 	.word	0x200000e0

0800f254 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b084      	sub	sp, #16
 800f258:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f25a:	4b0f      	ldr	r3, [pc, #60]	; (800f298 <Get_SerialNum+0x44>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f260:	4b0e      	ldr	r3, [pc, #56]	; (800f29c <Get_SerialNum+0x48>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f266:	4b0e      	ldr	r3, [pc, #56]	; (800f2a0 <Get_SerialNum+0x4c>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f26c:	68fa      	ldr	r2, [r7, #12]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	4413      	add	r3, r2
 800f272:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d009      	beq.n	800f28e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f27a:	2208      	movs	r2, #8
 800f27c:	4909      	ldr	r1, [pc, #36]	; (800f2a4 <Get_SerialNum+0x50>)
 800f27e:	68f8      	ldr	r0, [r7, #12]
 800f280:	f000 f814 	bl	800f2ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f284:	2204      	movs	r2, #4
 800f286:	4908      	ldr	r1, [pc, #32]	; (800f2a8 <Get_SerialNum+0x54>)
 800f288:	68b8      	ldr	r0, [r7, #8]
 800f28a:	f000 f80f 	bl	800f2ac <IntToUnicode>
  }
}
 800f28e:	bf00      	nop
 800f290:	3710      	adds	r7, #16
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	1ff0f420 	.word	0x1ff0f420
 800f29c:	1ff0f424 	.word	0x1ff0f424
 800f2a0:	1ff0f428 	.word	0x1ff0f428
 800f2a4:	200000f2 	.word	0x200000f2
 800f2a8:	20000102 	.word	0x20000102

0800f2ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b087      	sub	sp, #28
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	4613      	mov	r3, r2
 800f2b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f2be:	2300      	movs	r3, #0
 800f2c0:	75fb      	strb	r3, [r7, #23]
 800f2c2:	e027      	b.n	800f314 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	0f1b      	lsrs	r3, r3, #28
 800f2c8:	2b09      	cmp	r3, #9
 800f2ca:	d80b      	bhi.n	800f2e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	0f1b      	lsrs	r3, r3, #28
 800f2d0:	b2da      	uxtb	r2, r3
 800f2d2:	7dfb      	ldrb	r3, [r7, #23]
 800f2d4:	005b      	lsls	r3, r3, #1
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	440b      	add	r3, r1
 800f2dc:	3230      	adds	r2, #48	; 0x30
 800f2de:	b2d2      	uxtb	r2, r2
 800f2e0:	701a      	strb	r2, [r3, #0]
 800f2e2:	e00a      	b.n	800f2fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	0f1b      	lsrs	r3, r3, #28
 800f2e8:	b2da      	uxtb	r2, r3
 800f2ea:	7dfb      	ldrb	r3, [r7, #23]
 800f2ec:	005b      	lsls	r3, r3, #1
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	440b      	add	r3, r1
 800f2f4:	3237      	adds	r2, #55	; 0x37
 800f2f6:	b2d2      	uxtb	r2, r2
 800f2f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	011b      	lsls	r3, r3, #4
 800f2fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f300:	7dfb      	ldrb	r3, [r7, #23]
 800f302:	005b      	lsls	r3, r3, #1
 800f304:	3301      	adds	r3, #1
 800f306:	68ba      	ldr	r2, [r7, #8]
 800f308:	4413      	add	r3, r2
 800f30a:	2200      	movs	r2, #0
 800f30c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f30e:	7dfb      	ldrb	r3, [r7, #23]
 800f310:	3301      	adds	r3, #1
 800f312:	75fb      	strb	r3, [r7, #23]
 800f314:	7dfa      	ldrb	r2, [r7, #23]
 800f316:	79fb      	ldrb	r3, [r7, #7]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d3d3      	bcc.n	800f2c4 <IntToUnicode+0x18>
  }
}
 800f31c:	bf00      	nop
 800f31e:	bf00      	nop
 800f320:	371c      	adds	r7, #28
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr
	...

0800f32c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b0ae      	sub	sp, #184	; 0xb8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f334:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f338:	2200      	movs	r2, #0
 800f33a:	601a      	str	r2, [r3, #0]
 800f33c:	605a      	str	r2, [r3, #4]
 800f33e:	609a      	str	r2, [r3, #8]
 800f340:	60da      	str	r2, [r3, #12]
 800f342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f344:	f107 0314 	add.w	r3, r7, #20
 800f348:	2290      	movs	r2, #144	; 0x90
 800f34a:	2100      	movs	r1, #0
 800f34c:	4618      	mov	r0, r3
 800f34e:	f000 fe16 	bl	800ff7e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f35a:	d151      	bne.n	800f400 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800f35c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f360:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800f362:	2300      	movs	r3, #0
 800f364:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f368:	f107 0314 	add.w	r3, r7, #20
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7f5 fead 	bl	80050cc <HAL_RCCEx_PeriphCLKConfig>
 800f372:	4603      	mov	r3, r0
 800f374:	2b00      	cmp	r3, #0
 800f376:	d001      	beq.n	800f37c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f378:	f7f1 fe9e 	bl	80010b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f37c:	4b22      	ldr	r3, [pc, #136]	; (800f408 <HAL_PCD_MspInit+0xdc>)
 800f37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f380:	4a21      	ldr	r2, [pc, #132]	; (800f408 <HAL_PCD_MspInit+0xdc>)
 800f382:	f043 0301 	orr.w	r3, r3, #1
 800f386:	6313      	str	r3, [r2, #48]	; 0x30
 800f388:	4b1f      	ldr	r3, [pc, #124]	; (800f408 <HAL_PCD_MspInit+0xdc>)
 800f38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f38c:	f003 0301 	and.w	r3, r3, #1
 800f390:	613b      	str	r3, [r7, #16]
 800f392:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f394:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f398:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f39c:	2302      	movs	r3, #2
 800f39e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f3a8:	2303      	movs	r3, #3
 800f3aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f3ae:	230a      	movs	r3, #10
 800f3b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f3b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	4814      	ldr	r0, [pc, #80]	; (800f40c <HAL_PCD_MspInit+0xe0>)
 800f3bc:	f7f3 fcf8 	bl	8002db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f3c0:	4b11      	ldr	r3, [pc, #68]	; (800f408 <HAL_PCD_MspInit+0xdc>)
 800f3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3c4:	4a10      	ldr	r2, [pc, #64]	; (800f408 <HAL_PCD_MspInit+0xdc>)
 800f3c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3ca:	6353      	str	r3, [r2, #52]	; 0x34
 800f3cc:	4b0e      	ldr	r3, [pc, #56]	; (800f408 <HAL_PCD_MspInit+0xdc>)
 800f3ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3d4:	60fb      	str	r3, [r7, #12]
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	4b0b      	ldr	r3, [pc, #44]	; (800f408 <HAL_PCD_MspInit+0xdc>)
 800f3da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3dc:	4a0a      	ldr	r2, [pc, #40]	; (800f408 <HAL_PCD_MspInit+0xdc>)
 800f3de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f3e2:	6453      	str	r3, [r2, #68]	; 0x44
 800f3e4:	4b08      	ldr	r3, [pc, #32]	; (800f408 <HAL_PCD_MspInit+0xdc>)
 800f3e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f3ec:	60bb      	str	r3, [r7, #8]
 800f3ee:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	2100      	movs	r1, #0
 800f3f4:	2043      	movs	r0, #67	; 0x43
 800f3f6:	f7f3 f8fe 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f3fa:	2043      	movs	r0, #67	; 0x43
 800f3fc:	f7f3 f917 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f400:	bf00      	nop
 800f402:	37b8      	adds	r7, #184	; 0xb8
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	40023800 	.word	0x40023800
 800f40c:	40020000 	.word	0x40020000

0800f410 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b082      	sub	sp, #8
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f424:	4619      	mov	r1, r3
 800f426:	4610      	mov	r0, r2
 800f428:	f7fb f9e1 	bl	800a7ee <USBD_LL_SetupStage>
}
 800f42c:	bf00      	nop
 800f42e:	3708      	adds	r7, #8
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	460b      	mov	r3, r1
 800f43e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800f446:	78fa      	ldrb	r2, [r7, #3]
 800f448:	6879      	ldr	r1, [r7, #4]
 800f44a:	4613      	mov	r3, r2
 800f44c:	00db      	lsls	r3, r3, #3
 800f44e:	4413      	add	r3, r2
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	440b      	add	r3, r1
 800f454:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	78fb      	ldrb	r3, [r7, #3]
 800f45c:	4619      	mov	r1, r3
 800f45e:	f7fb fa1b 	bl	800a898 <USBD_LL_DataOutStage>
}
 800f462:	bf00      	nop
 800f464:	3708      	adds	r7, #8
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}

0800f46a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f46a:	b580      	push	{r7, lr}
 800f46c:	b082      	sub	sp, #8
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
 800f472:	460b      	mov	r3, r1
 800f474:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800f47c:	78fa      	ldrb	r2, [r7, #3]
 800f47e:	6879      	ldr	r1, [r7, #4]
 800f480:	4613      	mov	r3, r2
 800f482:	00db      	lsls	r3, r3, #3
 800f484:	4413      	add	r3, r2
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	440b      	add	r3, r1
 800f48a:	334c      	adds	r3, #76	; 0x4c
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	78fb      	ldrb	r3, [r7, #3]
 800f490:	4619      	mov	r1, r3
 800f492:	f7fb fab4 	bl	800a9fe <USBD_LL_DataInStage>
}
 800f496:	bf00      	nop
 800f498:	3708      	adds	r7, #8
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}

0800f49e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f49e:	b580      	push	{r7, lr}
 800f4a0:	b082      	sub	sp, #8
 800f4a2:	af00      	add	r7, sp, #0
 800f4a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fb fbe8 	bl	800ac82 <USBD_LL_SOF>
}
 800f4b2:	bf00      	nop
 800f4b4:	3708      	adds	r7, #8
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}

0800f4ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4ba:	b580      	push	{r7, lr}
 800f4bc:	b084      	sub	sp, #16
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d102      	bne.n	800f4d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	73fb      	strb	r3, [r7, #15]
 800f4d2:	e008      	b.n	800f4e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	68db      	ldr	r3, [r3, #12]
 800f4d8:	2b02      	cmp	r3, #2
 800f4da:	d102      	bne.n	800f4e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f4dc:	2301      	movs	r3, #1
 800f4de:	73fb      	strb	r3, [r7, #15]
 800f4e0:	e001      	b.n	800f4e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f4e2:	f7f1 fde9 	bl	80010b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f4ec:	7bfa      	ldrb	r2, [r7, #15]
 800f4ee:	4611      	mov	r1, r2
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7fb fb88 	bl	800ac06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7fb fb30 	bl	800ab62 <USBD_LL_Reset>
}
 800f502:	bf00      	nop
 800f504:	3710      	adds	r7, #16
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
	...

0800f50c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b082      	sub	sp, #8
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7fb fb83 	bl	800ac26 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	6812      	ldr	r2, [r2, #0]
 800f52e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f532:	f043 0301 	orr.w	r3, r3, #1
 800f536:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6a1b      	ldr	r3, [r3, #32]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d005      	beq.n	800f54c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f540:	4b04      	ldr	r3, [pc, #16]	; (800f554 <HAL_PCD_SuspendCallback+0x48>)
 800f542:	691b      	ldr	r3, [r3, #16]
 800f544:	4a03      	ldr	r2, [pc, #12]	; (800f554 <HAL_PCD_SuspendCallback+0x48>)
 800f546:	f043 0306 	orr.w	r3, r3, #6
 800f54a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f54c:	bf00      	nop
 800f54e:	3708      	adds	r7, #8
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}
 800f554:	e000ed00 	.word	0xe000ed00

0800f558 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b082      	sub	sp, #8
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f566:	4618      	mov	r0, r3
 800f568:	f7fb fb73 	bl	800ac52 <USBD_LL_Resume>
}
 800f56c:	bf00      	nop
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}

0800f574 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b082      	sub	sp, #8
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	460b      	mov	r3, r1
 800f57e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f586:	78fa      	ldrb	r2, [r7, #3]
 800f588:	4611      	mov	r1, r2
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fb fbcb 	bl	800ad26 <USBD_LL_IsoOUTIncomplete>
}
 800f590:	bf00      	nop
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	460b      	mov	r3, r1
 800f5a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f5aa:	78fa      	ldrb	r2, [r7, #3]
 800f5ac:	4611      	mov	r1, r2
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fb fb87 	bl	800acc2 <USBD_LL_IsoINIncomplete>
}
 800f5b4:	bf00      	nop
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7fb fbdd 	bl	800ad8a <USBD_LL_DevConnected>
}
 800f5d0:	bf00      	nop
 800f5d2:	3708      	adds	r7, #8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7fb fbda 	bl	800ada0 <USBD_LL_DevDisconnected>
}
 800f5ec:	bf00      	nop
 800f5ee:	3708      	adds	r7, #8
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d13c      	bne.n	800f67e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f604:	4a20      	ldr	r2, [pc, #128]	; (800f688 <USBD_LL_Init+0x94>)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	4a1e      	ldr	r2, [pc, #120]	; (800f688 <USBD_LL_Init+0x94>)
 800f610:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f614:	4b1c      	ldr	r3, [pc, #112]	; (800f688 <USBD_LL_Init+0x94>)
 800f616:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f61a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f61c:	4b1a      	ldr	r3, [pc, #104]	; (800f688 <USBD_LL_Init+0x94>)
 800f61e:	2206      	movs	r2, #6
 800f620:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f622:	4b19      	ldr	r3, [pc, #100]	; (800f688 <USBD_LL_Init+0x94>)
 800f624:	2202      	movs	r2, #2
 800f626:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f628:	4b17      	ldr	r3, [pc, #92]	; (800f688 <USBD_LL_Init+0x94>)
 800f62a:	2200      	movs	r2, #0
 800f62c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f62e:	4b16      	ldr	r3, [pc, #88]	; (800f688 <USBD_LL_Init+0x94>)
 800f630:	2202      	movs	r2, #2
 800f632:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f634:	4b14      	ldr	r3, [pc, #80]	; (800f688 <USBD_LL_Init+0x94>)
 800f636:	2200      	movs	r2, #0
 800f638:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f63a:	4b13      	ldr	r3, [pc, #76]	; (800f688 <USBD_LL_Init+0x94>)
 800f63c:	2200      	movs	r2, #0
 800f63e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f640:	4b11      	ldr	r3, [pc, #68]	; (800f688 <USBD_LL_Init+0x94>)
 800f642:	2200      	movs	r2, #0
 800f644:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f646:	4b10      	ldr	r3, [pc, #64]	; (800f688 <USBD_LL_Init+0x94>)
 800f648:	2200      	movs	r2, #0
 800f64a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f64c:	4b0e      	ldr	r3, [pc, #56]	; (800f688 <USBD_LL_Init+0x94>)
 800f64e:	2200      	movs	r2, #0
 800f650:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f652:	480d      	ldr	r0, [pc, #52]	; (800f688 <USBD_LL_Init+0x94>)
 800f654:	f7f3 fdad 	bl	80031b2 <HAL_PCD_Init>
 800f658:	4603      	mov	r3, r0
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d001      	beq.n	800f662 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f65e:	f7f1 fd2b 	bl	80010b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f662:	2180      	movs	r1, #128	; 0x80
 800f664:	4808      	ldr	r0, [pc, #32]	; (800f688 <USBD_LL_Init+0x94>)
 800f666:	f7f5 f828 	bl	80046ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f66a:	2240      	movs	r2, #64	; 0x40
 800f66c:	2100      	movs	r1, #0
 800f66e:	4806      	ldr	r0, [pc, #24]	; (800f688 <USBD_LL_Init+0x94>)
 800f670:	f7f4 ffdc 	bl	800462c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f674:	2280      	movs	r2, #128	; 0x80
 800f676:	2101      	movs	r1, #1
 800f678:	4803      	ldr	r0, [pc, #12]	; (800f688 <USBD_LL_Init+0x94>)
 800f67a:	f7f4 ffd7 	bl	800462c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f67e:	2300      	movs	r3, #0
}
 800f680:	4618      	mov	r0, r3
 800f682:	3708      	adds	r7, #8
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}
 800f688:	20004968 	.word	0x20004968

0800f68c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b084      	sub	sp, #16
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f694:	2300      	movs	r3, #0
 800f696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f698:	2300      	movs	r3, #0
 800f69a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7f3 fea9 	bl	80033fa <HAL_PCD_Start>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6ac:	7bfb      	ldrb	r3, [r7, #15]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f000 f97e 	bl	800f9b0 <USBD_Get_USB_Status>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3710      	adds	r7, #16
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}

0800f6c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f6c2:	b580      	push	{r7, lr}
 800f6c4:	b084      	sub	sp, #16
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
 800f6ca:	4608      	mov	r0, r1
 800f6cc:	4611      	mov	r1, r2
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	70fb      	strb	r3, [r7, #3]
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	70bb      	strb	r3, [r7, #2]
 800f6d8:	4613      	mov	r3, r2
 800f6da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f6ea:	78bb      	ldrb	r3, [r7, #2]
 800f6ec:	883a      	ldrh	r2, [r7, #0]
 800f6ee:	78f9      	ldrb	r1, [r7, #3]
 800f6f0:	f7f4 fb96 	bl	8003e20 <HAL_PCD_EP_Open>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6f8:	7bfb      	ldrb	r3, [r7, #15]
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f000 f958 	bl	800f9b0 <USBD_Get_USB_Status>
 800f700:	4603      	mov	r3, r0
 800f702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f704:	7bbb      	ldrb	r3, [r7, #14]
}
 800f706:	4618      	mov	r0, r3
 800f708:	3710      	adds	r7, #16
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}

0800f70e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f70e:	b580      	push	{r7, lr}
 800f710:	b084      	sub	sp, #16
 800f712:	af00      	add	r7, sp, #0
 800f714:	6078      	str	r0, [r7, #4]
 800f716:	460b      	mov	r3, r1
 800f718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f71a:	2300      	movs	r3, #0
 800f71c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f71e:	2300      	movs	r3, #0
 800f720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f728:	78fa      	ldrb	r2, [r7, #3]
 800f72a:	4611      	mov	r1, r2
 800f72c:	4618      	mov	r0, r3
 800f72e:	f7f4 fbdf 	bl	8003ef0 <HAL_PCD_EP_Close>
 800f732:	4603      	mov	r3, r0
 800f734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f736:	7bfb      	ldrb	r3, [r7, #15]
 800f738:	4618      	mov	r0, r3
 800f73a:	f000 f939 	bl	800f9b0 <USBD_Get_USB_Status>
 800f73e:	4603      	mov	r3, r0
 800f740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f742:	7bbb      	ldrb	r3, [r7, #14]
}
 800f744:	4618      	mov	r0, r3
 800f746:	3710      	adds	r7, #16
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}

0800f74c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	460b      	mov	r3, r1
 800f756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f758:	2300      	movs	r3, #0
 800f75a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f75c:	2300      	movs	r3, #0
 800f75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f766:	78fa      	ldrb	r2, [r7, #3]
 800f768:	4611      	mov	r1, r2
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7f4 fcb7 	bl	80040de <HAL_PCD_EP_SetStall>
 800f770:	4603      	mov	r3, r0
 800f772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f774:	7bfb      	ldrb	r3, [r7, #15]
 800f776:	4618      	mov	r0, r3
 800f778:	f000 f91a 	bl	800f9b0 <USBD_Get_USB_Status>
 800f77c:	4603      	mov	r3, r0
 800f77e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f780:	7bbb      	ldrb	r3, [r7, #14]
}
 800f782:	4618      	mov	r0, r3
 800f784:	3710      	adds	r7, #16
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}

0800f78a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f78a:	b580      	push	{r7, lr}
 800f78c:	b084      	sub	sp, #16
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
 800f792:	460b      	mov	r3, r1
 800f794:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f796:	2300      	movs	r3, #0
 800f798:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f79a:	2300      	movs	r3, #0
 800f79c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f7a4:	78fa      	ldrb	r2, [r7, #3]
 800f7a6:	4611      	mov	r1, r2
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7f4 fcfc 	bl	80041a6 <HAL_PCD_EP_ClrStall>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7b2:	7bfb      	ldrb	r3, [r7, #15]
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f000 f8fb 	bl	800f9b0 <USBD_Get_USB_Status>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7be:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3710      	adds	r7, #16
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b085      	sub	sp, #20
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	460b      	mov	r3, r1
 800f7d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f7da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f7dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	da0b      	bge.n	800f7fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f7e4:	78fb      	ldrb	r3, [r7, #3]
 800f7e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f7ea:	68f9      	ldr	r1, [r7, #12]
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	00db      	lsls	r3, r3, #3
 800f7f0:	4413      	add	r3, r2
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	440b      	add	r3, r1
 800f7f6:	333e      	adds	r3, #62	; 0x3e
 800f7f8:	781b      	ldrb	r3, [r3, #0]
 800f7fa:	e00b      	b.n	800f814 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f7fc:	78fb      	ldrb	r3, [r7, #3]
 800f7fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f802:	68f9      	ldr	r1, [r7, #12]
 800f804:	4613      	mov	r3, r2
 800f806:	00db      	lsls	r3, r3, #3
 800f808:	4413      	add	r3, r2
 800f80a:	009b      	lsls	r3, r3, #2
 800f80c:	440b      	add	r3, r1
 800f80e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f812:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f814:	4618      	mov	r0, r3
 800f816:	3714      	adds	r7, #20
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr

0800f820 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b084      	sub	sp, #16
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	460b      	mov	r3, r1
 800f82a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f82c:	2300      	movs	r3, #0
 800f82e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f830:	2300      	movs	r3, #0
 800f832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f83a:	78fa      	ldrb	r2, [r7, #3]
 800f83c:	4611      	mov	r1, r2
 800f83e:	4618      	mov	r0, r3
 800f840:	f7f4 fac9 	bl	8003dd6 <HAL_PCD_SetAddress>
 800f844:	4603      	mov	r3, r0
 800f846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f848:	7bfb      	ldrb	r3, [r7, #15]
 800f84a:	4618      	mov	r0, r3
 800f84c:	f000 f8b0 	bl	800f9b0 <USBD_Get_USB_Status>
 800f850:	4603      	mov	r3, r0
 800f852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f854:	7bbb      	ldrb	r3, [r7, #14]
}
 800f856:	4618      	mov	r0, r3
 800f858:	3710      	adds	r7, #16
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}

0800f85e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f85e:	b580      	push	{r7, lr}
 800f860:	b086      	sub	sp, #24
 800f862:	af00      	add	r7, sp, #0
 800f864:	60f8      	str	r0, [r7, #12]
 800f866:	607a      	str	r2, [r7, #4]
 800f868:	603b      	str	r3, [r7, #0]
 800f86a:	460b      	mov	r3, r1
 800f86c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f86e:	2300      	movs	r3, #0
 800f870:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f872:	2300      	movs	r3, #0
 800f874:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f87c:	7af9      	ldrb	r1, [r7, #11]
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	687a      	ldr	r2, [r7, #4]
 800f882:	f7f4 fbe2 	bl	800404a <HAL_PCD_EP_Transmit>
 800f886:	4603      	mov	r3, r0
 800f888:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f88a:	7dfb      	ldrb	r3, [r7, #23]
 800f88c:	4618      	mov	r0, r3
 800f88e:	f000 f88f 	bl	800f9b0 <USBD_Get_USB_Status>
 800f892:	4603      	mov	r3, r0
 800f894:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f896:	7dbb      	ldrb	r3, [r7, #22]
}
 800f898:	4618      	mov	r0, r3
 800f89a:	3718      	adds	r7, #24
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b086      	sub	sp, #24
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	60f8      	str	r0, [r7, #12]
 800f8a8:	607a      	str	r2, [r7, #4]
 800f8aa:	603b      	str	r3, [r7, #0]
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f8be:	7af9      	ldrb	r1, [r7, #11]
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	f7f4 fb5e 	bl	8003f84 <HAL_PCD_EP_Receive>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8cc:	7dfb      	ldrb	r3, [r7, #23]
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f000 f86e 	bl	800f9b0 <USBD_Get_USB_Status>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f8d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3718      	adds	r7, #24
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}

0800f8e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8e2:	b580      	push	{r7, lr}
 800f8e4:	b082      	sub	sp, #8
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
 800f8ea:	460b      	mov	r3, r1
 800f8ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f8f4:	78fa      	ldrb	r2, [r7, #3]
 800f8f6:	4611      	mov	r1, r2
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7f4 fb8e 	bl	800401a <HAL_PCD_EP_GetRxCount>
 800f8fe:	4603      	mov	r3, r0
}
 800f900:	4618      	mov	r0, r3
 800f902:	3708      	adds	r7, #8
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	460b      	mov	r3, r1
 800f912:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f914:	78fb      	ldrb	r3, [r7, #3]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d002      	beq.n	800f920 <HAL_PCDEx_LPM_Callback+0x18>
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d01f      	beq.n	800f95e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f91e:	e03b      	b.n	800f998 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6a1b      	ldr	r3, [r3, #32]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d007      	beq.n	800f938 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f928:	f000 f83c 	bl	800f9a4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f92c:	4b1c      	ldr	r3, [pc, #112]	; (800f9a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800f92e:	691b      	ldr	r3, [r3, #16]
 800f930:	4a1b      	ldr	r2, [pc, #108]	; (800f9a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800f932:	f023 0306 	bic.w	r3, r3, #6
 800f936:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	687a      	ldr	r2, [r7, #4]
 800f944:	6812      	ldr	r2, [r2, #0]
 800f946:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f94a:	f023 0301 	bic.w	r3, r3, #1
 800f94e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f956:	4618      	mov	r0, r3
 800f958:	f7fb f97b 	bl	800ac52 <USBD_LL_Resume>
    break;
 800f95c:	e01c      	b.n	800f998 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	6812      	ldr	r2, [r2, #0]
 800f96c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f970:	f043 0301 	orr.w	r3, r3, #1
 800f974:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7fb f952 	bl	800ac26 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6a1b      	ldr	r3, [r3, #32]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d005      	beq.n	800f996 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f98a:	4b05      	ldr	r3, [pc, #20]	; (800f9a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800f98c:	691b      	ldr	r3, [r3, #16]
 800f98e:	4a04      	ldr	r2, [pc, #16]	; (800f9a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800f990:	f043 0306 	orr.w	r3, r3, #6
 800f994:	6113      	str	r3, [r2, #16]
    break;
 800f996:	bf00      	nop
}
 800f998:	bf00      	nop
 800f99a:	3708      	adds	r7, #8
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	e000ed00 	.word	0xe000ed00

0800f9a4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f9a8:	f7f1 f88c 	bl	8000ac4 <SystemClock_Config>
}
 800f9ac:	bf00      	nop
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b085      	sub	sp, #20
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f9be:	79fb      	ldrb	r3, [r7, #7]
 800f9c0:	2b03      	cmp	r3, #3
 800f9c2:	d817      	bhi.n	800f9f4 <USBD_Get_USB_Status+0x44>
 800f9c4:	a201      	add	r2, pc, #4	; (adr r2, 800f9cc <USBD_Get_USB_Status+0x1c>)
 800f9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9ca:	bf00      	nop
 800f9cc:	0800f9dd 	.word	0x0800f9dd
 800f9d0:	0800f9e3 	.word	0x0800f9e3
 800f9d4:	0800f9e9 	.word	0x0800f9e9
 800f9d8:	0800f9ef 	.word	0x0800f9ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	73fb      	strb	r3, [r7, #15]
    break;
 800f9e0:	e00b      	b.n	800f9fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f9e2:	2303      	movs	r3, #3
 800f9e4:	73fb      	strb	r3, [r7, #15]
    break;
 800f9e6:	e008      	b.n	800f9fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f9ec:	e005      	b.n	800f9fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f9ee:	2303      	movs	r3, #3
 800f9f0:	73fb      	strb	r3, [r7, #15]
    break;
 800f9f2:	e002      	b.n	800f9fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f9f4:	2303      	movs	r3, #3
 800f9f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f9f8:	bf00      	nop
  }
  return usb_status;
 800f9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3714      	adds	r7, #20
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr

0800fa08 <malloc>:
 800fa08:	4b02      	ldr	r3, [pc, #8]	; (800fa14 <malloc+0xc>)
 800fa0a:	4601      	mov	r1, r0
 800fa0c:	6818      	ldr	r0, [r3, #0]
 800fa0e:	f000 b82b 	b.w	800fa68 <_malloc_r>
 800fa12:	bf00      	nop
 800fa14:	20000164 	.word	0x20000164

0800fa18 <free>:
 800fa18:	4b02      	ldr	r3, [pc, #8]	; (800fa24 <free+0xc>)
 800fa1a:	4601      	mov	r1, r0
 800fa1c:	6818      	ldr	r0, [r3, #0]
 800fa1e:	f000 baf5 	b.w	801000c <_free_r>
 800fa22:	bf00      	nop
 800fa24:	20000164 	.word	0x20000164

0800fa28 <sbrk_aligned>:
 800fa28:	b570      	push	{r4, r5, r6, lr}
 800fa2a:	4e0e      	ldr	r6, [pc, #56]	; (800fa64 <sbrk_aligned+0x3c>)
 800fa2c:	460c      	mov	r4, r1
 800fa2e:	6831      	ldr	r1, [r6, #0]
 800fa30:	4605      	mov	r5, r0
 800fa32:	b911      	cbnz	r1, 800fa3a <sbrk_aligned+0x12>
 800fa34:	f000 faac 	bl	800ff90 <_sbrk_r>
 800fa38:	6030      	str	r0, [r6, #0]
 800fa3a:	4621      	mov	r1, r4
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	f000 faa7 	bl	800ff90 <_sbrk_r>
 800fa42:	1c43      	adds	r3, r0, #1
 800fa44:	d00a      	beq.n	800fa5c <sbrk_aligned+0x34>
 800fa46:	1cc4      	adds	r4, r0, #3
 800fa48:	f024 0403 	bic.w	r4, r4, #3
 800fa4c:	42a0      	cmp	r0, r4
 800fa4e:	d007      	beq.n	800fa60 <sbrk_aligned+0x38>
 800fa50:	1a21      	subs	r1, r4, r0
 800fa52:	4628      	mov	r0, r5
 800fa54:	f000 fa9c 	bl	800ff90 <_sbrk_r>
 800fa58:	3001      	adds	r0, #1
 800fa5a:	d101      	bne.n	800fa60 <sbrk_aligned+0x38>
 800fa5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fa60:	4620      	mov	r0, r4
 800fa62:	bd70      	pop	{r4, r5, r6, pc}
 800fa64:	20004e74 	.word	0x20004e74

0800fa68 <_malloc_r>:
 800fa68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa6c:	1ccd      	adds	r5, r1, #3
 800fa6e:	f025 0503 	bic.w	r5, r5, #3
 800fa72:	3508      	adds	r5, #8
 800fa74:	2d0c      	cmp	r5, #12
 800fa76:	bf38      	it	cc
 800fa78:	250c      	movcc	r5, #12
 800fa7a:	2d00      	cmp	r5, #0
 800fa7c:	4607      	mov	r7, r0
 800fa7e:	db01      	blt.n	800fa84 <_malloc_r+0x1c>
 800fa80:	42a9      	cmp	r1, r5
 800fa82:	d905      	bls.n	800fa90 <_malloc_r+0x28>
 800fa84:	230c      	movs	r3, #12
 800fa86:	603b      	str	r3, [r7, #0]
 800fa88:	2600      	movs	r6, #0
 800fa8a:	4630      	mov	r0, r6
 800fa8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fb64 <_malloc_r+0xfc>
 800fa94:	f000 f89c 	bl	800fbd0 <__malloc_lock>
 800fa98:	f8d8 3000 	ldr.w	r3, [r8]
 800fa9c:	461c      	mov	r4, r3
 800fa9e:	bb5c      	cbnz	r4, 800faf8 <_malloc_r+0x90>
 800faa0:	4629      	mov	r1, r5
 800faa2:	4638      	mov	r0, r7
 800faa4:	f7ff ffc0 	bl	800fa28 <sbrk_aligned>
 800faa8:	1c43      	adds	r3, r0, #1
 800faaa:	4604      	mov	r4, r0
 800faac:	d155      	bne.n	800fb5a <_malloc_r+0xf2>
 800faae:	f8d8 4000 	ldr.w	r4, [r8]
 800fab2:	4626      	mov	r6, r4
 800fab4:	2e00      	cmp	r6, #0
 800fab6:	d145      	bne.n	800fb44 <_malloc_r+0xdc>
 800fab8:	2c00      	cmp	r4, #0
 800faba:	d048      	beq.n	800fb4e <_malloc_r+0xe6>
 800fabc:	6823      	ldr	r3, [r4, #0]
 800fabe:	4631      	mov	r1, r6
 800fac0:	4638      	mov	r0, r7
 800fac2:	eb04 0903 	add.w	r9, r4, r3
 800fac6:	f000 fa63 	bl	800ff90 <_sbrk_r>
 800faca:	4581      	cmp	r9, r0
 800facc:	d13f      	bne.n	800fb4e <_malloc_r+0xe6>
 800face:	6821      	ldr	r1, [r4, #0]
 800fad0:	1a6d      	subs	r5, r5, r1
 800fad2:	4629      	mov	r1, r5
 800fad4:	4638      	mov	r0, r7
 800fad6:	f7ff ffa7 	bl	800fa28 <sbrk_aligned>
 800fada:	3001      	adds	r0, #1
 800fadc:	d037      	beq.n	800fb4e <_malloc_r+0xe6>
 800fade:	6823      	ldr	r3, [r4, #0]
 800fae0:	442b      	add	r3, r5
 800fae2:	6023      	str	r3, [r4, #0]
 800fae4:	f8d8 3000 	ldr.w	r3, [r8]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d038      	beq.n	800fb5e <_malloc_r+0xf6>
 800faec:	685a      	ldr	r2, [r3, #4]
 800faee:	42a2      	cmp	r2, r4
 800faf0:	d12b      	bne.n	800fb4a <_malloc_r+0xe2>
 800faf2:	2200      	movs	r2, #0
 800faf4:	605a      	str	r2, [r3, #4]
 800faf6:	e00f      	b.n	800fb18 <_malloc_r+0xb0>
 800faf8:	6822      	ldr	r2, [r4, #0]
 800fafa:	1b52      	subs	r2, r2, r5
 800fafc:	d41f      	bmi.n	800fb3e <_malloc_r+0xd6>
 800fafe:	2a0b      	cmp	r2, #11
 800fb00:	d917      	bls.n	800fb32 <_malloc_r+0xca>
 800fb02:	1961      	adds	r1, r4, r5
 800fb04:	42a3      	cmp	r3, r4
 800fb06:	6025      	str	r5, [r4, #0]
 800fb08:	bf18      	it	ne
 800fb0a:	6059      	strne	r1, [r3, #4]
 800fb0c:	6863      	ldr	r3, [r4, #4]
 800fb0e:	bf08      	it	eq
 800fb10:	f8c8 1000 	streq.w	r1, [r8]
 800fb14:	5162      	str	r2, [r4, r5]
 800fb16:	604b      	str	r3, [r1, #4]
 800fb18:	4638      	mov	r0, r7
 800fb1a:	f104 060b 	add.w	r6, r4, #11
 800fb1e:	f000 f85d 	bl	800fbdc <__malloc_unlock>
 800fb22:	f026 0607 	bic.w	r6, r6, #7
 800fb26:	1d23      	adds	r3, r4, #4
 800fb28:	1af2      	subs	r2, r6, r3
 800fb2a:	d0ae      	beq.n	800fa8a <_malloc_r+0x22>
 800fb2c:	1b9b      	subs	r3, r3, r6
 800fb2e:	50a3      	str	r3, [r4, r2]
 800fb30:	e7ab      	b.n	800fa8a <_malloc_r+0x22>
 800fb32:	42a3      	cmp	r3, r4
 800fb34:	6862      	ldr	r2, [r4, #4]
 800fb36:	d1dd      	bne.n	800faf4 <_malloc_r+0x8c>
 800fb38:	f8c8 2000 	str.w	r2, [r8]
 800fb3c:	e7ec      	b.n	800fb18 <_malloc_r+0xb0>
 800fb3e:	4623      	mov	r3, r4
 800fb40:	6864      	ldr	r4, [r4, #4]
 800fb42:	e7ac      	b.n	800fa9e <_malloc_r+0x36>
 800fb44:	4634      	mov	r4, r6
 800fb46:	6876      	ldr	r6, [r6, #4]
 800fb48:	e7b4      	b.n	800fab4 <_malloc_r+0x4c>
 800fb4a:	4613      	mov	r3, r2
 800fb4c:	e7cc      	b.n	800fae8 <_malloc_r+0x80>
 800fb4e:	230c      	movs	r3, #12
 800fb50:	603b      	str	r3, [r7, #0]
 800fb52:	4638      	mov	r0, r7
 800fb54:	f000 f842 	bl	800fbdc <__malloc_unlock>
 800fb58:	e797      	b.n	800fa8a <_malloc_r+0x22>
 800fb5a:	6025      	str	r5, [r4, #0]
 800fb5c:	e7dc      	b.n	800fb18 <_malloc_r+0xb0>
 800fb5e:	605b      	str	r3, [r3, #4]
 800fb60:	deff      	udf	#255	; 0xff
 800fb62:	bf00      	nop
 800fb64:	20004e70 	.word	0x20004e70

0800fb68 <sniprintf>:
 800fb68:	b40c      	push	{r2, r3}
 800fb6a:	b530      	push	{r4, r5, lr}
 800fb6c:	4b17      	ldr	r3, [pc, #92]	; (800fbcc <sniprintf+0x64>)
 800fb6e:	1e0c      	subs	r4, r1, #0
 800fb70:	681d      	ldr	r5, [r3, #0]
 800fb72:	b09d      	sub	sp, #116	; 0x74
 800fb74:	da08      	bge.n	800fb88 <sniprintf+0x20>
 800fb76:	238b      	movs	r3, #139	; 0x8b
 800fb78:	602b      	str	r3, [r5, #0]
 800fb7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb7e:	b01d      	add	sp, #116	; 0x74
 800fb80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb84:	b002      	add	sp, #8
 800fb86:	4770      	bx	lr
 800fb88:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fb8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fb90:	bf14      	ite	ne
 800fb92:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800fb96:	4623      	moveq	r3, r4
 800fb98:	9304      	str	r3, [sp, #16]
 800fb9a:	9307      	str	r3, [sp, #28]
 800fb9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fba0:	9002      	str	r0, [sp, #8]
 800fba2:	9006      	str	r0, [sp, #24]
 800fba4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fba8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fbaa:	ab21      	add	r3, sp, #132	; 0x84
 800fbac:	a902      	add	r1, sp, #8
 800fbae:	4628      	mov	r0, r5
 800fbb0:	9301      	str	r3, [sp, #4]
 800fbb2:	f000 fad1 	bl	8010158 <_svfiprintf_r>
 800fbb6:	1c43      	adds	r3, r0, #1
 800fbb8:	bfbc      	itt	lt
 800fbba:	238b      	movlt	r3, #139	; 0x8b
 800fbbc:	602b      	strlt	r3, [r5, #0]
 800fbbe:	2c00      	cmp	r4, #0
 800fbc0:	d0dd      	beq.n	800fb7e <sniprintf+0x16>
 800fbc2:	9b02      	ldr	r3, [sp, #8]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	701a      	strb	r2, [r3, #0]
 800fbc8:	e7d9      	b.n	800fb7e <sniprintf+0x16>
 800fbca:	bf00      	nop
 800fbcc:	20000164 	.word	0x20000164

0800fbd0 <__malloc_lock>:
 800fbd0:	4801      	ldr	r0, [pc, #4]	; (800fbd8 <__malloc_lock+0x8>)
 800fbd2:	f000 ba18 	b.w	8010006 <__retarget_lock_acquire_recursive>
 800fbd6:	bf00      	nop
 800fbd8:	20004fb4 	.word	0x20004fb4

0800fbdc <__malloc_unlock>:
 800fbdc:	4801      	ldr	r0, [pc, #4]	; (800fbe4 <__malloc_unlock+0x8>)
 800fbde:	f000 ba13 	b.w	8010008 <__retarget_lock_release_recursive>
 800fbe2:	bf00      	nop
 800fbe4:	20004fb4 	.word	0x20004fb4

0800fbe8 <std>:
 800fbe8:	2300      	movs	r3, #0
 800fbea:	b510      	push	{r4, lr}
 800fbec:	4604      	mov	r4, r0
 800fbee:	e9c0 3300 	strd	r3, r3, [r0]
 800fbf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fbf6:	6083      	str	r3, [r0, #8]
 800fbf8:	8181      	strh	r1, [r0, #12]
 800fbfa:	6643      	str	r3, [r0, #100]	; 0x64
 800fbfc:	81c2      	strh	r2, [r0, #14]
 800fbfe:	6183      	str	r3, [r0, #24]
 800fc00:	4619      	mov	r1, r3
 800fc02:	2208      	movs	r2, #8
 800fc04:	305c      	adds	r0, #92	; 0x5c
 800fc06:	f000 f9ba 	bl	800ff7e <memset>
 800fc0a:	4b0d      	ldr	r3, [pc, #52]	; (800fc40 <std+0x58>)
 800fc0c:	6263      	str	r3, [r4, #36]	; 0x24
 800fc0e:	4b0d      	ldr	r3, [pc, #52]	; (800fc44 <std+0x5c>)
 800fc10:	62a3      	str	r3, [r4, #40]	; 0x28
 800fc12:	4b0d      	ldr	r3, [pc, #52]	; (800fc48 <std+0x60>)
 800fc14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc16:	4b0d      	ldr	r3, [pc, #52]	; (800fc4c <std+0x64>)
 800fc18:	6323      	str	r3, [r4, #48]	; 0x30
 800fc1a:	4b0d      	ldr	r3, [pc, #52]	; (800fc50 <std+0x68>)
 800fc1c:	6224      	str	r4, [r4, #32]
 800fc1e:	429c      	cmp	r4, r3
 800fc20:	d006      	beq.n	800fc30 <std+0x48>
 800fc22:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800fc26:	4294      	cmp	r4, r2
 800fc28:	d002      	beq.n	800fc30 <std+0x48>
 800fc2a:	33d0      	adds	r3, #208	; 0xd0
 800fc2c:	429c      	cmp	r4, r3
 800fc2e:	d105      	bne.n	800fc3c <std+0x54>
 800fc30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fc34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc38:	f000 b9e4 	b.w	8010004 <__retarget_lock_init_recursive>
 800fc3c:	bd10      	pop	{r4, pc}
 800fc3e:	bf00      	nop
 800fc40:	08010a59 	.word	0x08010a59
 800fc44:	08010a7b 	.word	0x08010a7b
 800fc48:	08010ab3 	.word	0x08010ab3
 800fc4c:	08010ad7 	.word	0x08010ad7
 800fc50:	20004e78 	.word	0x20004e78

0800fc54 <stdio_exit_handler>:
 800fc54:	4a02      	ldr	r2, [pc, #8]	; (800fc60 <stdio_exit_handler+0xc>)
 800fc56:	4903      	ldr	r1, [pc, #12]	; (800fc64 <stdio_exit_handler+0x10>)
 800fc58:	4803      	ldr	r0, [pc, #12]	; (800fc68 <stdio_exit_handler+0x14>)
 800fc5a:	f000 b8f5 	b.w	800fe48 <_fwalk_sglue>
 800fc5e:	bf00      	nop
 800fc60:	2000010c 	.word	0x2000010c
 800fc64:	08010a09 	.word	0x08010a09
 800fc68:	20000118 	.word	0x20000118

0800fc6c <cleanup_stdio>:
 800fc6c:	6841      	ldr	r1, [r0, #4]
 800fc6e:	4b0c      	ldr	r3, [pc, #48]	; (800fca0 <cleanup_stdio+0x34>)
 800fc70:	4299      	cmp	r1, r3
 800fc72:	b510      	push	{r4, lr}
 800fc74:	4604      	mov	r4, r0
 800fc76:	d001      	beq.n	800fc7c <cleanup_stdio+0x10>
 800fc78:	f000 fec6 	bl	8010a08 <_fflush_r>
 800fc7c:	68a1      	ldr	r1, [r4, #8]
 800fc7e:	4b09      	ldr	r3, [pc, #36]	; (800fca4 <cleanup_stdio+0x38>)
 800fc80:	4299      	cmp	r1, r3
 800fc82:	d002      	beq.n	800fc8a <cleanup_stdio+0x1e>
 800fc84:	4620      	mov	r0, r4
 800fc86:	f000 febf 	bl	8010a08 <_fflush_r>
 800fc8a:	68e1      	ldr	r1, [r4, #12]
 800fc8c:	4b06      	ldr	r3, [pc, #24]	; (800fca8 <cleanup_stdio+0x3c>)
 800fc8e:	4299      	cmp	r1, r3
 800fc90:	d004      	beq.n	800fc9c <cleanup_stdio+0x30>
 800fc92:	4620      	mov	r0, r4
 800fc94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc98:	f000 beb6 	b.w	8010a08 <_fflush_r>
 800fc9c:	bd10      	pop	{r4, pc}
 800fc9e:	bf00      	nop
 800fca0:	20004e78 	.word	0x20004e78
 800fca4:	20004ee0 	.word	0x20004ee0
 800fca8:	20004f48 	.word	0x20004f48

0800fcac <global_stdio_init.part.0>:
 800fcac:	b510      	push	{r4, lr}
 800fcae:	4b0b      	ldr	r3, [pc, #44]	; (800fcdc <global_stdio_init.part.0+0x30>)
 800fcb0:	4c0b      	ldr	r4, [pc, #44]	; (800fce0 <global_stdio_init.part.0+0x34>)
 800fcb2:	4a0c      	ldr	r2, [pc, #48]	; (800fce4 <global_stdio_init.part.0+0x38>)
 800fcb4:	601a      	str	r2, [r3, #0]
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	2200      	movs	r2, #0
 800fcba:	2104      	movs	r1, #4
 800fcbc:	f7ff ff94 	bl	800fbe8 <std>
 800fcc0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	2109      	movs	r1, #9
 800fcc8:	f7ff ff8e 	bl	800fbe8 <std>
 800fccc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fcd0:	2202      	movs	r2, #2
 800fcd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcd6:	2112      	movs	r1, #18
 800fcd8:	f7ff bf86 	b.w	800fbe8 <std>
 800fcdc:	20004fb0 	.word	0x20004fb0
 800fce0:	20004e78 	.word	0x20004e78
 800fce4:	0800fc55 	.word	0x0800fc55

0800fce8 <__sfp_lock_acquire>:
 800fce8:	4801      	ldr	r0, [pc, #4]	; (800fcf0 <__sfp_lock_acquire+0x8>)
 800fcea:	f000 b98c 	b.w	8010006 <__retarget_lock_acquire_recursive>
 800fcee:	bf00      	nop
 800fcf0:	20004fb5 	.word	0x20004fb5

0800fcf4 <__sfp_lock_release>:
 800fcf4:	4801      	ldr	r0, [pc, #4]	; (800fcfc <__sfp_lock_release+0x8>)
 800fcf6:	f000 b987 	b.w	8010008 <__retarget_lock_release_recursive>
 800fcfa:	bf00      	nop
 800fcfc:	20004fb5 	.word	0x20004fb5

0800fd00 <__sinit>:
 800fd00:	b510      	push	{r4, lr}
 800fd02:	4604      	mov	r4, r0
 800fd04:	f7ff fff0 	bl	800fce8 <__sfp_lock_acquire>
 800fd08:	6a23      	ldr	r3, [r4, #32]
 800fd0a:	b11b      	cbz	r3, 800fd14 <__sinit+0x14>
 800fd0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd10:	f7ff bff0 	b.w	800fcf4 <__sfp_lock_release>
 800fd14:	4b04      	ldr	r3, [pc, #16]	; (800fd28 <__sinit+0x28>)
 800fd16:	6223      	str	r3, [r4, #32]
 800fd18:	4b04      	ldr	r3, [pc, #16]	; (800fd2c <__sinit+0x2c>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d1f5      	bne.n	800fd0c <__sinit+0xc>
 800fd20:	f7ff ffc4 	bl	800fcac <global_stdio_init.part.0>
 800fd24:	e7f2      	b.n	800fd0c <__sinit+0xc>
 800fd26:	bf00      	nop
 800fd28:	0800fc6d 	.word	0x0800fc6d
 800fd2c:	20004fb0 	.word	0x20004fb0

0800fd30 <_strtol_l.constprop.0>:
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd36:	d001      	beq.n	800fd3c <_strtol_l.constprop.0+0xc>
 800fd38:	2b24      	cmp	r3, #36	; 0x24
 800fd3a:	d906      	bls.n	800fd4a <_strtol_l.constprop.0+0x1a>
 800fd3c:	f000 f938 	bl	800ffb0 <__errno>
 800fd40:	2316      	movs	r3, #22
 800fd42:	6003      	str	r3, [r0, #0]
 800fd44:	2000      	movs	r0, #0
 800fd46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fe30 <_strtol_l.constprop.0+0x100>
 800fd4e:	460d      	mov	r5, r1
 800fd50:	462e      	mov	r6, r5
 800fd52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd56:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800fd5a:	f017 0708 	ands.w	r7, r7, #8
 800fd5e:	d1f7      	bne.n	800fd50 <_strtol_l.constprop.0+0x20>
 800fd60:	2c2d      	cmp	r4, #45	; 0x2d
 800fd62:	d132      	bne.n	800fdca <_strtol_l.constprop.0+0x9a>
 800fd64:	782c      	ldrb	r4, [r5, #0]
 800fd66:	2701      	movs	r7, #1
 800fd68:	1cb5      	adds	r5, r6, #2
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d05b      	beq.n	800fe26 <_strtol_l.constprop.0+0xf6>
 800fd6e:	2b10      	cmp	r3, #16
 800fd70:	d109      	bne.n	800fd86 <_strtol_l.constprop.0+0x56>
 800fd72:	2c30      	cmp	r4, #48	; 0x30
 800fd74:	d107      	bne.n	800fd86 <_strtol_l.constprop.0+0x56>
 800fd76:	782c      	ldrb	r4, [r5, #0]
 800fd78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fd7c:	2c58      	cmp	r4, #88	; 0x58
 800fd7e:	d14d      	bne.n	800fe1c <_strtol_l.constprop.0+0xec>
 800fd80:	786c      	ldrb	r4, [r5, #1]
 800fd82:	2310      	movs	r3, #16
 800fd84:	3502      	adds	r5, #2
 800fd86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fd8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800fd8e:	f04f 0e00 	mov.w	lr, #0
 800fd92:	fbb8 f9f3 	udiv	r9, r8, r3
 800fd96:	4676      	mov	r6, lr
 800fd98:	fb03 8a19 	mls	sl, r3, r9, r8
 800fd9c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fda0:	f1bc 0f09 	cmp.w	ip, #9
 800fda4:	d816      	bhi.n	800fdd4 <_strtol_l.constprop.0+0xa4>
 800fda6:	4664      	mov	r4, ip
 800fda8:	42a3      	cmp	r3, r4
 800fdaa:	dd24      	ble.n	800fdf6 <_strtol_l.constprop.0+0xc6>
 800fdac:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800fdb0:	d008      	beq.n	800fdc4 <_strtol_l.constprop.0+0x94>
 800fdb2:	45b1      	cmp	r9, r6
 800fdb4:	d31c      	bcc.n	800fdf0 <_strtol_l.constprop.0+0xc0>
 800fdb6:	d101      	bne.n	800fdbc <_strtol_l.constprop.0+0x8c>
 800fdb8:	45a2      	cmp	sl, r4
 800fdba:	db19      	blt.n	800fdf0 <_strtol_l.constprop.0+0xc0>
 800fdbc:	fb06 4603 	mla	r6, r6, r3, r4
 800fdc0:	f04f 0e01 	mov.w	lr, #1
 800fdc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdc8:	e7e8      	b.n	800fd9c <_strtol_l.constprop.0+0x6c>
 800fdca:	2c2b      	cmp	r4, #43	; 0x2b
 800fdcc:	bf04      	itt	eq
 800fdce:	782c      	ldrbeq	r4, [r5, #0]
 800fdd0:	1cb5      	addeq	r5, r6, #2
 800fdd2:	e7ca      	b.n	800fd6a <_strtol_l.constprop.0+0x3a>
 800fdd4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fdd8:	f1bc 0f19 	cmp.w	ip, #25
 800fddc:	d801      	bhi.n	800fde2 <_strtol_l.constprop.0+0xb2>
 800fdde:	3c37      	subs	r4, #55	; 0x37
 800fde0:	e7e2      	b.n	800fda8 <_strtol_l.constprop.0+0x78>
 800fde2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fde6:	f1bc 0f19 	cmp.w	ip, #25
 800fdea:	d804      	bhi.n	800fdf6 <_strtol_l.constprop.0+0xc6>
 800fdec:	3c57      	subs	r4, #87	; 0x57
 800fdee:	e7db      	b.n	800fda8 <_strtol_l.constprop.0+0x78>
 800fdf0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800fdf4:	e7e6      	b.n	800fdc4 <_strtol_l.constprop.0+0x94>
 800fdf6:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800fdfa:	d105      	bne.n	800fe08 <_strtol_l.constprop.0+0xd8>
 800fdfc:	2322      	movs	r3, #34	; 0x22
 800fdfe:	6003      	str	r3, [r0, #0]
 800fe00:	4646      	mov	r6, r8
 800fe02:	b942      	cbnz	r2, 800fe16 <_strtol_l.constprop.0+0xe6>
 800fe04:	4630      	mov	r0, r6
 800fe06:	e79e      	b.n	800fd46 <_strtol_l.constprop.0+0x16>
 800fe08:	b107      	cbz	r7, 800fe0c <_strtol_l.constprop.0+0xdc>
 800fe0a:	4276      	negs	r6, r6
 800fe0c:	2a00      	cmp	r2, #0
 800fe0e:	d0f9      	beq.n	800fe04 <_strtol_l.constprop.0+0xd4>
 800fe10:	f1be 0f00 	cmp.w	lr, #0
 800fe14:	d000      	beq.n	800fe18 <_strtol_l.constprop.0+0xe8>
 800fe16:	1e69      	subs	r1, r5, #1
 800fe18:	6011      	str	r1, [r2, #0]
 800fe1a:	e7f3      	b.n	800fe04 <_strtol_l.constprop.0+0xd4>
 800fe1c:	2430      	movs	r4, #48	; 0x30
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d1b1      	bne.n	800fd86 <_strtol_l.constprop.0+0x56>
 800fe22:	2308      	movs	r3, #8
 800fe24:	e7af      	b.n	800fd86 <_strtol_l.constprop.0+0x56>
 800fe26:	2c30      	cmp	r4, #48	; 0x30
 800fe28:	d0a5      	beq.n	800fd76 <_strtol_l.constprop.0+0x46>
 800fe2a:	230a      	movs	r3, #10
 800fe2c:	e7ab      	b.n	800fd86 <_strtol_l.constprop.0+0x56>
 800fe2e:	bf00      	nop
 800fe30:	080116b5 	.word	0x080116b5

0800fe34 <strtol>:
 800fe34:	4613      	mov	r3, r2
 800fe36:	460a      	mov	r2, r1
 800fe38:	4601      	mov	r1, r0
 800fe3a:	4802      	ldr	r0, [pc, #8]	; (800fe44 <strtol+0x10>)
 800fe3c:	6800      	ldr	r0, [r0, #0]
 800fe3e:	f7ff bf77 	b.w	800fd30 <_strtol_l.constprop.0>
 800fe42:	bf00      	nop
 800fe44:	20000164 	.word	0x20000164

0800fe48 <_fwalk_sglue>:
 800fe48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe4c:	4607      	mov	r7, r0
 800fe4e:	4688      	mov	r8, r1
 800fe50:	4614      	mov	r4, r2
 800fe52:	2600      	movs	r6, #0
 800fe54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe58:	f1b9 0901 	subs.w	r9, r9, #1
 800fe5c:	d505      	bpl.n	800fe6a <_fwalk_sglue+0x22>
 800fe5e:	6824      	ldr	r4, [r4, #0]
 800fe60:	2c00      	cmp	r4, #0
 800fe62:	d1f7      	bne.n	800fe54 <_fwalk_sglue+0xc>
 800fe64:	4630      	mov	r0, r6
 800fe66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe6a:	89ab      	ldrh	r3, [r5, #12]
 800fe6c:	2b01      	cmp	r3, #1
 800fe6e:	d907      	bls.n	800fe80 <_fwalk_sglue+0x38>
 800fe70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe74:	3301      	adds	r3, #1
 800fe76:	d003      	beq.n	800fe80 <_fwalk_sglue+0x38>
 800fe78:	4629      	mov	r1, r5
 800fe7a:	4638      	mov	r0, r7
 800fe7c:	47c0      	blx	r8
 800fe7e:	4306      	orrs	r6, r0
 800fe80:	3568      	adds	r5, #104	; 0x68
 800fe82:	e7e9      	b.n	800fe58 <_fwalk_sglue+0x10>

0800fe84 <iprintf>:
 800fe84:	b40f      	push	{r0, r1, r2, r3}
 800fe86:	b507      	push	{r0, r1, r2, lr}
 800fe88:	4906      	ldr	r1, [pc, #24]	; (800fea4 <iprintf+0x20>)
 800fe8a:	ab04      	add	r3, sp, #16
 800fe8c:	6808      	ldr	r0, [r1, #0]
 800fe8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe92:	6881      	ldr	r1, [r0, #8]
 800fe94:	9301      	str	r3, [sp, #4]
 800fe96:	f000 fa87 	bl	80103a8 <_vfiprintf_r>
 800fe9a:	b003      	add	sp, #12
 800fe9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fea0:	b004      	add	sp, #16
 800fea2:	4770      	bx	lr
 800fea4:	20000164 	.word	0x20000164

0800fea8 <_puts_r>:
 800fea8:	6a03      	ldr	r3, [r0, #32]
 800feaa:	b570      	push	{r4, r5, r6, lr}
 800feac:	6884      	ldr	r4, [r0, #8]
 800feae:	4605      	mov	r5, r0
 800feb0:	460e      	mov	r6, r1
 800feb2:	b90b      	cbnz	r3, 800feb8 <_puts_r+0x10>
 800feb4:	f7ff ff24 	bl	800fd00 <__sinit>
 800feb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800feba:	07db      	lsls	r3, r3, #31
 800febc:	d405      	bmi.n	800feca <_puts_r+0x22>
 800febe:	89a3      	ldrh	r3, [r4, #12]
 800fec0:	0598      	lsls	r0, r3, #22
 800fec2:	d402      	bmi.n	800feca <_puts_r+0x22>
 800fec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fec6:	f000 f89e 	bl	8010006 <__retarget_lock_acquire_recursive>
 800feca:	89a3      	ldrh	r3, [r4, #12]
 800fecc:	0719      	lsls	r1, r3, #28
 800fece:	d513      	bpl.n	800fef8 <_puts_r+0x50>
 800fed0:	6923      	ldr	r3, [r4, #16]
 800fed2:	b18b      	cbz	r3, 800fef8 <_puts_r+0x50>
 800fed4:	3e01      	subs	r6, #1
 800fed6:	68a3      	ldr	r3, [r4, #8]
 800fed8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fedc:	3b01      	subs	r3, #1
 800fede:	60a3      	str	r3, [r4, #8]
 800fee0:	b9e9      	cbnz	r1, 800ff1e <_puts_r+0x76>
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	da2e      	bge.n	800ff44 <_puts_r+0x9c>
 800fee6:	4622      	mov	r2, r4
 800fee8:	210a      	movs	r1, #10
 800feea:	4628      	mov	r0, r5
 800feec:	f000 fe26 	bl	8010b3c <__swbuf_r>
 800fef0:	3001      	adds	r0, #1
 800fef2:	d007      	beq.n	800ff04 <_puts_r+0x5c>
 800fef4:	250a      	movs	r5, #10
 800fef6:	e007      	b.n	800ff08 <_puts_r+0x60>
 800fef8:	4621      	mov	r1, r4
 800fefa:	4628      	mov	r0, r5
 800fefc:	f000 fe5c 	bl	8010bb8 <__swsetup_r>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	d0e7      	beq.n	800fed4 <_puts_r+0x2c>
 800ff04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ff08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff0a:	07da      	lsls	r2, r3, #31
 800ff0c:	d405      	bmi.n	800ff1a <_puts_r+0x72>
 800ff0e:	89a3      	ldrh	r3, [r4, #12]
 800ff10:	059b      	lsls	r3, r3, #22
 800ff12:	d402      	bmi.n	800ff1a <_puts_r+0x72>
 800ff14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff16:	f000 f877 	bl	8010008 <__retarget_lock_release_recursive>
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	bd70      	pop	{r4, r5, r6, pc}
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	da04      	bge.n	800ff2c <_puts_r+0x84>
 800ff22:	69a2      	ldr	r2, [r4, #24]
 800ff24:	429a      	cmp	r2, r3
 800ff26:	dc06      	bgt.n	800ff36 <_puts_r+0x8e>
 800ff28:	290a      	cmp	r1, #10
 800ff2a:	d004      	beq.n	800ff36 <_puts_r+0x8e>
 800ff2c:	6823      	ldr	r3, [r4, #0]
 800ff2e:	1c5a      	adds	r2, r3, #1
 800ff30:	6022      	str	r2, [r4, #0]
 800ff32:	7019      	strb	r1, [r3, #0]
 800ff34:	e7cf      	b.n	800fed6 <_puts_r+0x2e>
 800ff36:	4622      	mov	r2, r4
 800ff38:	4628      	mov	r0, r5
 800ff3a:	f000 fdff 	bl	8010b3c <__swbuf_r>
 800ff3e:	3001      	adds	r0, #1
 800ff40:	d1c9      	bne.n	800fed6 <_puts_r+0x2e>
 800ff42:	e7df      	b.n	800ff04 <_puts_r+0x5c>
 800ff44:	6823      	ldr	r3, [r4, #0]
 800ff46:	250a      	movs	r5, #10
 800ff48:	1c5a      	adds	r2, r3, #1
 800ff4a:	6022      	str	r2, [r4, #0]
 800ff4c:	701d      	strb	r5, [r3, #0]
 800ff4e:	e7db      	b.n	800ff08 <_puts_r+0x60>

0800ff50 <puts>:
 800ff50:	4b02      	ldr	r3, [pc, #8]	; (800ff5c <puts+0xc>)
 800ff52:	4601      	mov	r1, r0
 800ff54:	6818      	ldr	r0, [r3, #0]
 800ff56:	f7ff bfa7 	b.w	800fea8 <_puts_r>
 800ff5a:	bf00      	nop
 800ff5c:	20000164 	.word	0x20000164

0800ff60 <strcat>:
 800ff60:	b510      	push	{r4, lr}
 800ff62:	4602      	mov	r2, r0
 800ff64:	7814      	ldrb	r4, [r2, #0]
 800ff66:	4613      	mov	r3, r2
 800ff68:	3201      	adds	r2, #1
 800ff6a:	2c00      	cmp	r4, #0
 800ff6c:	d1fa      	bne.n	800ff64 <strcat+0x4>
 800ff6e:	3b01      	subs	r3, #1
 800ff70:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff74:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff78:	2a00      	cmp	r2, #0
 800ff7a:	d1f9      	bne.n	800ff70 <strcat+0x10>
 800ff7c:	bd10      	pop	{r4, pc}

0800ff7e <memset>:
 800ff7e:	4402      	add	r2, r0
 800ff80:	4603      	mov	r3, r0
 800ff82:	4293      	cmp	r3, r2
 800ff84:	d100      	bne.n	800ff88 <memset+0xa>
 800ff86:	4770      	bx	lr
 800ff88:	f803 1b01 	strb.w	r1, [r3], #1
 800ff8c:	e7f9      	b.n	800ff82 <memset+0x4>
	...

0800ff90 <_sbrk_r>:
 800ff90:	b538      	push	{r3, r4, r5, lr}
 800ff92:	4d06      	ldr	r5, [pc, #24]	; (800ffac <_sbrk_r+0x1c>)
 800ff94:	2300      	movs	r3, #0
 800ff96:	4604      	mov	r4, r0
 800ff98:	4608      	mov	r0, r1
 800ff9a:	602b      	str	r3, [r5, #0]
 800ff9c:	f7f1 fb5a 	bl	8001654 <_sbrk>
 800ffa0:	1c43      	adds	r3, r0, #1
 800ffa2:	d102      	bne.n	800ffaa <_sbrk_r+0x1a>
 800ffa4:	682b      	ldr	r3, [r5, #0]
 800ffa6:	b103      	cbz	r3, 800ffaa <_sbrk_r+0x1a>
 800ffa8:	6023      	str	r3, [r4, #0]
 800ffaa:	bd38      	pop	{r3, r4, r5, pc}
 800ffac:	20004fb8 	.word	0x20004fb8

0800ffb0 <__errno>:
 800ffb0:	4b01      	ldr	r3, [pc, #4]	; (800ffb8 <__errno+0x8>)
 800ffb2:	6818      	ldr	r0, [r3, #0]
 800ffb4:	4770      	bx	lr
 800ffb6:	bf00      	nop
 800ffb8:	20000164 	.word	0x20000164

0800ffbc <__libc_init_array>:
 800ffbc:	b570      	push	{r4, r5, r6, lr}
 800ffbe:	4d0d      	ldr	r5, [pc, #52]	; (800fff4 <__libc_init_array+0x38>)
 800ffc0:	4c0d      	ldr	r4, [pc, #52]	; (800fff8 <__libc_init_array+0x3c>)
 800ffc2:	1b64      	subs	r4, r4, r5
 800ffc4:	10a4      	asrs	r4, r4, #2
 800ffc6:	2600      	movs	r6, #0
 800ffc8:	42a6      	cmp	r6, r4
 800ffca:	d109      	bne.n	800ffe0 <__libc_init_array+0x24>
 800ffcc:	4d0b      	ldr	r5, [pc, #44]	; (800fffc <__libc_init_array+0x40>)
 800ffce:	4c0c      	ldr	r4, [pc, #48]	; (8010000 <__libc_init_array+0x44>)
 800ffd0:	f000 ff44 	bl	8010e5c <_init>
 800ffd4:	1b64      	subs	r4, r4, r5
 800ffd6:	10a4      	asrs	r4, r4, #2
 800ffd8:	2600      	movs	r6, #0
 800ffda:	42a6      	cmp	r6, r4
 800ffdc:	d105      	bne.n	800ffea <__libc_init_array+0x2e>
 800ffde:	bd70      	pop	{r4, r5, r6, pc}
 800ffe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffe4:	4798      	blx	r3
 800ffe6:	3601      	adds	r6, #1
 800ffe8:	e7ee      	b.n	800ffc8 <__libc_init_array+0xc>
 800ffea:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffee:	4798      	blx	r3
 800fff0:	3601      	adds	r6, #1
 800fff2:	e7f2      	b.n	800ffda <__libc_init_array+0x1e>
 800fff4:	080117f0 	.word	0x080117f0
 800fff8:	080117f0 	.word	0x080117f0
 800fffc:	080117f0 	.word	0x080117f0
 8010000:	080117f4 	.word	0x080117f4

08010004 <__retarget_lock_init_recursive>:
 8010004:	4770      	bx	lr

08010006 <__retarget_lock_acquire_recursive>:
 8010006:	4770      	bx	lr

08010008 <__retarget_lock_release_recursive>:
 8010008:	4770      	bx	lr
	...

0801000c <_free_r>:
 801000c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801000e:	2900      	cmp	r1, #0
 8010010:	d044      	beq.n	801009c <_free_r+0x90>
 8010012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010016:	9001      	str	r0, [sp, #4]
 8010018:	2b00      	cmp	r3, #0
 801001a:	f1a1 0404 	sub.w	r4, r1, #4
 801001e:	bfb8      	it	lt
 8010020:	18e4      	addlt	r4, r4, r3
 8010022:	f7ff fdd5 	bl	800fbd0 <__malloc_lock>
 8010026:	4a1e      	ldr	r2, [pc, #120]	; (80100a0 <_free_r+0x94>)
 8010028:	9801      	ldr	r0, [sp, #4]
 801002a:	6813      	ldr	r3, [r2, #0]
 801002c:	b933      	cbnz	r3, 801003c <_free_r+0x30>
 801002e:	6063      	str	r3, [r4, #4]
 8010030:	6014      	str	r4, [r2, #0]
 8010032:	b003      	add	sp, #12
 8010034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010038:	f7ff bdd0 	b.w	800fbdc <__malloc_unlock>
 801003c:	42a3      	cmp	r3, r4
 801003e:	d908      	bls.n	8010052 <_free_r+0x46>
 8010040:	6825      	ldr	r5, [r4, #0]
 8010042:	1961      	adds	r1, r4, r5
 8010044:	428b      	cmp	r3, r1
 8010046:	bf01      	itttt	eq
 8010048:	6819      	ldreq	r1, [r3, #0]
 801004a:	685b      	ldreq	r3, [r3, #4]
 801004c:	1949      	addeq	r1, r1, r5
 801004e:	6021      	streq	r1, [r4, #0]
 8010050:	e7ed      	b.n	801002e <_free_r+0x22>
 8010052:	461a      	mov	r2, r3
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	b10b      	cbz	r3, 801005c <_free_r+0x50>
 8010058:	42a3      	cmp	r3, r4
 801005a:	d9fa      	bls.n	8010052 <_free_r+0x46>
 801005c:	6811      	ldr	r1, [r2, #0]
 801005e:	1855      	adds	r5, r2, r1
 8010060:	42a5      	cmp	r5, r4
 8010062:	d10b      	bne.n	801007c <_free_r+0x70>
 8010064:	6824      	ldr	r4, [r4, #0]
 8010066:	4421      	add	r1, r4
 8010068:	1854      	adds	r4, r2, r1
 801006a:	42a3      	cmp	r3, r4
 801006c:	6011      	str	r1, [r2, #0]
 801006e:	d1e0      	bne.n	8010032 <_free_r+0x26>
 8010070:	681c      	ldr	r4, [r3, #0]
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	6053      	str	r3, [r2, #4]
 8010076:	440c      	add	r4, r1
 8010078:	6014      	str	r4, [r2, #0]
 801007a:	e7da      	b.n	8010032 <_free_r+0x26>
 801007c:	d902      	bls.n	8010084 <_free_r+0x78>
 801007e:	230c      	movs	r3, #12
 8010080:	6003      	str	r3, [r0, #0]
 8010082:	e7d6      	b.n	8010032 <_free_r+0x26>
 8010084:	6825      	ldr	r5, [r4, #0]
 8010086:	1961      	adds	r1, r4, r5
 8010088:	428b      	cmp	r3, r1
 801008a:	bf04      	itt	eq
 801008c:	6819      	ldreq	r1, [r3, #0]
 801008e:	685b      	ldreq	r3, [r3, #4]
 8010090:	6063      	str	r3, [r4, #4]
 8010092:	bf04      	itt	eq
 8010094:	1949      	addeq	r1, r1, r5
 8010096:	6021      	streq	r1, [r4, #0]
 8010098:	6054      	str	r4, [r2, #4]
 801009a:	e7ca      	b.n	8010032 <_free_r+0x26>
 801009c:	b003      	add	sp, #12
 801009e:	bd30      	pop	{r4, r5, pc}
 80100a0:	20004e70 	.word	0x20004e70

080100a4 <__ssputs_r>:
 80100a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100a8:	688e      	ldr	r6, [r1, #8]
 80100aa:	461f      	mov	r7, r3
 80100ac:	42be      	cmp	r6, r7
 80100ae:	680b      	ldr	r3, [r1, #0]
 80100b0:	4682      	mov	sl, r0
 80100b2:	460c      	mov	r4, r1
 80100b4:	4690      	mov	r8, r2
 80100b6:	d82c      	bhi.n	8010112 <__ssputs_r+0x6e>
 80100b8:	898a      	ldrh	r2, [r1, #12]
 80100ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80100be:	d026      	beq.n	801010e <__ssputs_r+0x6a>
 80100c0:	6965      	ldr	r5, [r4, #20]
 80100c2:	6909      	ldr	r1, [r1, #16]
 80100c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100c8:	eba3 0901 	sub.w	r9, r3, r1
 80100cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80100d0:	1c7b      	adds	r3, r7, #1
 80100d2:	444b      	add	r3, r9
 80100d4:	106d      	asrs	r5, r5, #1
 80100d6:	429d      	cmp	r5, r3
 80100d8:	bf38      	it	cc
 80100da:	461d      	movcc	r5, r3
 80100dc:	0553      	lsls	r3, r2, #21
 80100de:	d527      	bpl.n	8010130 <__ssputs_r+0x8c>
 80100e0:	4629      	mov	r1, r5
 80100e2:	f7ff fcc1 	bl	800fa68 <_malloc_r>
 80100e6:	4606      	mov	r6, r0
 80100e8:	b360      	cbz	r0, 8010144 <__ssputs_r+0xa0>
 80100ea:	6921      	ldr	r1, [r4, #16]
 80100ec:	464a      	mov	r2, r9
 80100ee:	f000 fe9f 	bl	8010e30 <memcpy>
 80100f2:	89a3      	ldrh	r3, [r4, #12]
 80100f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80100f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100fc:	81a3      	strh	r3, [r4, #12]
 80100fe:	6126      	str	r6, [r4, #16]
 8010100:	6165      	str	r5, [r4, #20]
 8010102:	444e      	add	r6, r9
 8010104:	eba5 0509 	sub.w	r5, r5, r9
 8010108:	6026      	str	r6, [r4, #0]
 801010a:	60a5      	str	r5, [r4, #8]
 801010c:	463e      	mov	r6, r7
 801010e:	42be      	cmp	r6, r7
 8010110:	d900      	bls.n	8010114 <__ssputs_r+0x70>
 8010112:	463e      	mov	r6, r7
 8010114:	6820      	ldr	r0, [r4, #0]
 8010116:	4632      	mov	r2, r6
 8010118:	4641      	mov	r1, r8
 801011a:	f000 fe07 	bl	8010d2c <memmove>
 801011e:	68a3      	ldr	r3, [r4, #8]
 8010120:	1b9b      	subs	r3, r3, r6
 8010122:	60a3      	str	r3, [r4, #8]
 8010124:	6823      	ldr	r3, [r4, #0]
 8010126:	4433      	add	r3, r6
 8010128:	6023      	str	r3, [r4, #0]
 801012a:	2000      	movs	r0, #0
 801012c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010130:	462a      	mov	r2, r5
 8010132:	f000 fcd4 	bl	8010ade <_realloc_r>
 8010136:	4606      	mov	r6, r0
 8010138:	2800      	cmp	r0, #0
 801013a:	d1e0      	bne.n	80100fe <__ssputs_r+0x5a>
 801013c:	6921      	ldr	r1, [r4, #16]
 801013e:	4650      	mov	r0, sl
 8010140:	f7ff ff64 	bl	801000c <_free_r>
 8010144:	230c      	movs	r3, #12
 8010146:	f8ca 3000 	str.w	r3, [sl]
 801014a:	89a3      	ldrh	r3, [r4, #12]
 801014c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010150:	81a3      	strh	r3, [r4, #12]
 8010152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010156:	e7e9      	b.n	801012c <__ssputs_r+0x88>

08010158 <_svfiprintf_r>:
 8010158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801015c:	4698      	mov	r8, r3
 801015e:	898b      	ldrh	r3, [r1, #12]
 8010160:	061b      	lsls	r3, r3, #24
 8010162:	b09d      	sub	sp, #116	; 0x74
 8010164:	4607      	mov	r7, r0
 8010166:	460d      	mov	r5, r1
 8010168:	4614      	mov	r4, r2
 801016a:	d50e      	bpl.n	801018a <_svfiprintf_r+0x32>
 801016c:	690b      	ldr	r3, [r1, #16]
 801016e:	b963      	cbnz	r3, 801018a <_svfiprintf_r+0x32>
 8010170:	2140      	movs	r1, #64	; 0x40
 8010172:	f7ff fc79 	bl	800fa68 <_malloc_r>
 8010176:	6028      	str	r0, [r5, #0]
 8010178:	6128      	str	r0, [r5, #16]
 801017a:	b920      	cbnz	r0, 8010186 <_svfiprintf_r+0x2e>
 801017c:	230c      	movs	r3, #12
 801017e:	603b      	str	r3, [r7, #0]
 8010180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010184:	e0d0      	b.n	8010328 <_svfiprintf_r+0x1d0>
 8010186:	2340      	movs	r3, #64	; 0x40
 8010188:	616b      	str	r3, [r5, #20]
 801018a:	2300      	movs	r3, #0
 801018c:	9309      	str	r3, [sp, #36]	; 0x24
 801018e:	2320      	movs	r3, #32
 8010190:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010194:	f8cd 800c 	str.w	r8, [sp, #12]
 8010198:	2330      	movs	r3, #48	; 0x30
 801019a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010340 <_svfiprintf_r+0x1e8>
 801019e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80101a2:	f04f 0901 	mov.w	r9, #1
 80101a6:	4623      	mov	r3, r4
 80101a8:	469a      	mov	sl, r3
 80101aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101ae:	b10a      	cbz	r2, 80101b4 <_svfiprintf_r+0x5c>
 80101b0:	2a25      	cmp	r2, #37	; 0x25
 80101b2:	d1f9      	bne.n	80101a8 <_svfiprintf_r+0x50>
 80101b4:	ebba 0b04 	subs.w	fp, sl, r4
 80101b8:	d00b      	beq.n	80101d2 <_svfiprintf_r+0x7a>
 80101ba:	465b      	mov	r3, fp
 80101bc:	4622      	mov	r2, r4
 80101be:	4629      	mov	r1, r5
 80101c0:	4638      	mov	r0, r7
 80101c2:	f7ff ff6f 	bl	80100a4 <__ssputs_r>
 80101c6:	3001      	adds	r0, #1
 80101c8:	f000 80a9 	beq.w	801031e <_svfiprintf_r+0x1c6>
 80101cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101ce:	445a      	add	r2, fp
 80101d0:	9209      	str	r2, [sp, #36]	; 0x24
 80101d2:	f89a 3000 	ldrb.w	r3, [sl]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	f000 80a1 	beq.w	801031e <_svfiprintf_r+0x1c6>
 80101dc:	2300      	movs	r3, #0
 80101de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80101e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101e6:	f10a 0a01 	add.w	sl, sl, #1
 80101ea:	9304      	str	r3, [sp, #16]
 80101ec:	9307      	str	r3, [sp, #28]
 80101ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101f2:	931a      	str	r3, [sp, #104]	; 0x68
 80101f4:	4654      	mov	r4, sl
 80101f6:	2205      	movs	r2, #5
 80101f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101fc:	4850      	ldr	r0, [pc, #320]	; (8010340 <_svfiprintf_r+0x1e8>)
 80101fe:	f7f0 f81f 	bl	8000240 <memchr>
 8010202:	9a04      	ldr	r2, [sp, #16]
 8010204:	b9d8      	cbnz	r0, 801023e <_svfiprintf_r+0xe6>
 8010206:	06d0      	lsls	r0, r2, #27
 8010208:	bf44      	itt	mi
 801020a:	2320      	movmi	r3, #32
 801020c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010210:	0711      	lsls	r1, r2, #28
 8010212:	bf44      	itt	mi
 8010214:	232b      	movmi	r3, #43	; 0x2b
 8010216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801021a:	f89a 3000 	ldrb.w	r3, [sl]
 801021e:	2b2a      	cmp	r3, #42	; 0x2a
 8010220:	d015      	beq.n	801024e <_svfiprintf_r+0xf6>
 8010222:	9a07      	ldr	r2, [sp, #28]
 8010224:	4654      	mov	r4, sl
 8010226:	2000      	movs	r0, #0
 8010228:	f04f 0c0a 	mov.w	ip, #10
 801022c:	4621      	mov	r1, r4
 801022e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010232:	3b30      	subs	r3, #48	; 0x30
 8010234:	2b09      	cmp	r3, #9
 8010236:	d94d      	bls.n	80102d4 <_svfiprintf_r+0x17c>
 8010238:	b1b0      	cbz	r0, 8010268 <_svfiprintf_r+0x110>
 801023a:	9207      	str	r2, [sp, #28]
 801023c:	e014      	b.n	8010268 <_svfiprintf_r+0x110>
 801023e:	eba0 0308 	sub.w	r3, r0, r8
 8010242:	fa09 f303 	lsl.w	r3, r9, r3
 8010246:	4313      	orrs	r3, r2
 8010248:	9304      	str	r3, [sp, #16]
 801024a:	46a2      	mov	sl, r4
 801024c:	e7d2      	b.n	80101f4 <_svfiprintf_r+0x9c>
 801024e:	9b03      	ldr	r3, [sp, #12]
 8010250:	1d19      	adds	r1, r3, #4
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	9103      	str	r1, [sp, #12]
 8010256:	2b00      	cmp	r3, #0
 8010258:	bfbb      	ittet	lt
 801025a:	425b      	neglt	r3, r3
 801025c:	f042 0202 	orrlt.w	r2, r2, #2
 8010260:	9307      	strge	r3, [sp, #28]
 8010262:	9307      	strlt	r3, [sp, #28]
 8010264:	bfb8      	it	lt
 8010266:	9204      	strlt	r2, [sp, #16]
 8010268:	7823      	ldrb	r3, [r4, #0]
 801026a:	2b2e      	cmp	r3, #46	; 0x2e
 801026c:	d10c      	bne.n	8010288 <_svfiprintf_r+0x130>
 801026e:	7863      	ldrb	r3, [r4, #1]
 8010270:	2b2a      	cmp	r3, #42	; 0x2a
 8010272:	d134      	bne.n	80102de <_svfiprintf_r+0x186>
 8010274:	9b03      	ldr	r3, [sp, #12]
 8010276:	1d1a      	adds	r2, r3, #4
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	9203      	str	r2, [sp, #12]
 801027c:	2b00      	cmp	r3, #0
 801027e:	bfb8      	it	lt
 8010280:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010284:	3402      	adds	r4, #2
 8010286:	9305      	str	r3, [sp, #20]
 8010288:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010350 <_svfiprintf_r+0x1f8>
 801028c:	7821      	ldrb	r1, [r4, #0]
 801028e:	2203      	movs	r2, #3
 8010290:	4650      	mov	r0, sl
 8010292:	f7ef ffd5 	bl	8000240 <memchr>
 8010296:	b138      	cbz	r0, 80102a8 <_svfiprintf_r+0x150>
 8010298:	9b04      	ldr	r3, [sp, #16]
 801029a:	eba0 000a 	sub.w	r0, r0, sl
 801029e:	2240      	movs	r2, #64	; 0x40
 80102a0:	4082      	lsls	r2, r0
 80102a2:	4313      	orrs	r3, r2
 80102a4:	3401      	adds	r4, #1
 80102a6:	9304      	str	r3, [sp, #16]
 80102a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102ac:	4825      	ldr	r0, [pc, #148]	; (8010344 <_svfiprintf_r+0x1ec>)
 80102ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102b2:	2206      	movs	r2, #6
 80102b4:	f7ef ffc4 	bl	8000240 <memchr>
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d038      	beq.n	801032e <_svfiprintf_r+0x1d6>
 80102bc:	4b22      	ldr	r3, [pc, #136]	; (8010348 <_svfiprintf_r+0x1f0>)
 80102be:	bb1b      	cbnz	r3, 8010308 <_svfiprintf_r+0x1b0>
 80102c0:	9b03      	ldr	r3, [sp, #12]
 80102c2:	3307      	adds	r3, #7
 80102c4:	f023 0307 	bic.w	r3, r3, #7
 80102c8:	3308      	adds	r3, #8
 80102ca:	9303      	str	r3, [sp, #12]
 80102cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102ce:	4433      	add	r3, r6
 80102d0:	9309      	str	r3, [sp, #36]	; 0x24
 80102d2:	e768      	b.n	80101a6 <_svfiprintf_r+0x4e>
 80102d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80102d8:	460c      	mov	r4, r1
 80102da:	2001      	movs	r0, #1
 80102dc:	e7a6      	b.n	801022c <_svfiprintf_r+0xd4>
 80102de:	2300      	movs	r3, #0
 80102e0:	3401      	adds	r4, #1
 80102e2:	9305      	str	r3, [sp, #20]
 80102e4:	4619      	mov	r1, r3
 80102e6:	f04f 0c0a 	mov.w	ip, #10
 80102ea:	4620      	mov	r0, r4
 80102ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102f0:	3a30      	subs	r2, #48	; 0x30
 80102f2:	2a09      	cmp	r2, #9
 80102f4:	d903      	bls.n	80102fe <_svfiprintf_r+0x1a6>
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d0c6      	beq.n	8010288 <_svfiprintf_r+0x130>
 80102fa:	9105      	str	r1, [sp, #20]
 80102fc:	e7c4      	b.n	8010288 <_svfiprintf_r+0x130>
 80102fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8010302:	4604      	mov	r4, r0
 8010304:	2301      	movs	r3, #1
 8010306:	e7f0      	b.n	80102ea <_svfiprintf_r+0x192>
 8010308:	ab03      	add	r3, sp, #12
 801030a:	9300      	str	r3, [sp, #0]
 801030c:	462a      	mov	r2, r5
 801030e:	4b0f      	ldr	r3, [pc, #60]	; (801034c <_svfiprintf_r+0x1f4>)
 8010310:	a904      	add	r1, sp, #16
 8010312:	4638      	mov	r0, r7
 8010314:	f3af 8000 	nop.w
 8010318:	1c42      	adds	r2, r0, #1
 801031a:	4606      	mov	r6, r0
 801031c:	d1d6      	bne.n	80102cc <_svfiprintf_r+0x174>
 801031e:	89ab      	ldrh	r3, [r5, #12]
 8010320:	065b      	lsls	r3, r3, #25
 8010322:	f53f af2d 	bmi.w	8010180 <_svfiprintf_r+0x28>
 8010326:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010328:	b01d      	add	sp, #116	; 0x74
 801032a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801032e:	ab03      	add	r3, sp, #12
 8010330:	9300      	str	r3, [sp, #0]
 8010332:	462a      	mov	r2, r5
 8010334:	4b05      	ldr	r3, [pc, #20]	; (801034c <_svfiprintf_r+0x1f4>)
 8010336:	a904      	add	r1, sp, #16
 8010338:	4638      	mov	r0, r7
 801033a:	f000 f9bd 	bl	80106b8 <_printf_i>
 801033e:	e7eb      	b.n	8010318 <_svfiprintf_r+0x1c0>
 8010340:	080117b5 	.word	0x080117b5
 8010344:	080117bf 	.word	0x080117bf
 8010348:	00000000 	.word	0x00000000
 801034c:	080100a5 	.word	0x080100a5
 8010350:	080117bb 	.word	0x080117bb

08010354 <__sfputc_r>:
 8010354:	6893      	ldr	r3, [r2, #8]
 8010356:	3b01      	subs	r3, #1
 8010358:	2b00      	cmp	r3, #0
 801035a:	b410      	push	{r4}
 801035c:	6093      	str	r3, [r2, #8]
 801035e:	da08      	bge.n	8010372 <__sfputc_r+0x1e>
 8010360:	6994      	ldr	r4, [r2, #24]
 8010362:	42a3      	cmp	r3, r4
 8010364:	db01      	blt.n	801036a <__sfputc_r+0x16>
 8010366:	290a      	cmp	r1, #10
 8010368:	d103      	bne.n	8010372 <__sfputc_r+0x1e>
 801036a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801036e:	f000 bbe5 	b.w	8010b3c <__swbuf_r>
 8010372:	6813      	ldr	r3, [r2, #0]
 8010374:	1c58      	adds	r0, r3, #1
 8010376:	6010      	str	r0, [r2, #0]
 8010378:	7019      	strb	r1, [r3, #0]
 801037a:	4608      	mov	r0, r1
 801037c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010380:	4770      	bx	lr

08010382 <__sfputs_r>:
 8010382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010384:	4606      	mov	r6, r0
 8010386:	460f      	mov	r7, r1
 8010388:	4614      	mov	r4, r2
 801038a:	18d5      	adds	r5, r2, r3
 801038c:	42ac      	cmp	r4, r5
 801038e:	d101      	bne.n	8010394 <__sfputs_r+0x12>
 8010390:	2000      	movs	r0, #0
 8010392:	e007      	b.n	80103a4 <__sfputs_r+0x22>
 8010394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010398:	463a      	mov	r2, r7
 801039a:	4630      	mov	r0, r6
 801039c:	f7ff ffda 	bl	8010354 <__sfputc_r>
 80103a0:	1c43      	adds	r3, r0, #1
 80103a2:	d1f3      	bne.n	801038c <__sfputs_r+0xa>
 80103a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080103a8 <_vfiprintf_r>:
 80103a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ac:	460d      	mov	r5, r1
 80103ae:	b09d      	sub	sp, #116	; 0x74
 80103b0:	4614      	mov	r4, r2
 80103b2:	4698      	mov	r8, r3
 80103b4:	4606      	mov	r6, r0
 80103b6:	b118      	cbz	r0, 80103c0 <_vfiprintf_r+0x18>
 80103b8:	6a03      	ldr	r3, [r0, #32]
 80103ba:	b90b      	cbnz	r3, 80103c0 <_vfiprintf_r+0x18>
 80103bc:	f7ff fca0 	bl	800fd00 <__sinit>
 80103c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103c2:	07d9      	lsls	r1, r3, #31
 80103c4:	d405      	bmi.n	80103d2 <_vfiprintf_r+0x2a>
 80103c6:	89ab      	ldrh	r3, [r5, #12]
 80103c8:	059a      	lsls	r2, r3, #22
 80103ca:	d402      	bmi.n	80103d2 <_vfiprintf_r+0x2a>
 80103cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103ce:	f7ff fe1a 	bl	8010006 <__retarget_lock_acquire_recursive>
 80103d2:	89ab      	ldrh	r3, [r5, #12]
 80103d4:	071b      	lsls	r3, r3, #28
 80103d6:	d501      	bpl.n	80103dc <_vfiprintf_r+0x34>
 80103d8:	692b      	ldr	r3, [r5, #16]
 80103da:	b99b      	cbnz	r3, 8010404 <_vfiprintf_r+0x5c>
 80103dc:	4629      	mov	r1, r5
 80103de:	4630      	mov	r0, r6
 80103e0:	f000 fbea 	bl	8010bb8 <__swsetup_r>
 80103e4:	b170      	cbz	r0, 8010404 <_vfiprintf_r+0x5c>
 80103e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103e8:	07dc      	lsls	r4, r3, #31
 80103ea:	d504      	bpl.n	80103f6 <_vfiprintf_r+0x4e>
 80103ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103f0:	b01d      	add	sp, #116	; 0x74
 80103f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f6:	89ab      	ldrh	r3, [r5, #12]
 80103f8:	0598      	lsls	r0, r3, #22
 80103fa:	d4f7      	bmi.n	80103ec <_vfiprintf_r+0x44>
 80103fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103fe:	f7ff fe03 	bl	8010008 <__retarget_lock_release_recursive>
 8010402:	e7f3      	b.n	80103ec <_vfiprintf_r+0x44>
 8010404:	2300      	movs	r3, #0
 8010406:	9309      	str	r3, [sp, #36]	; 0x24
 8010408:	2320      	movs	r3, #32
 801040a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801040e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010412:	2330      	movs	r3, #48	; 0x30
 8010414:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80105c8 <_vfiprintf_r+0x220>
 8010418:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801041c:	f04f 0901 	mov.w	r9, #1
 8010420:	4623      	mov	r3, r4
 8010422:	469a      	mov	sl, r3
 8010424:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010428:	b10a      	cbz	r2, 801042e <_vfiprintf_r+0x86>
 801042a:	2a25      	cmp	r2, #37	; 0x25
 801042c:	d1f9      	bne.n	8010422 <_vfiprintf_r+0x7a>
 801042e:	ebba 0b04 	subs.w	fp, sl, r4
 8010432:	d00b      	beq.n	801044c <_vfiprintf_r+0xa4>
 8010434:	465b      	mov	r3, fp
 8010436:	4622      	mov	r2, r4
 8010438:	4629      	mov	r1, r5
 801043a:	4630      	mov	r0, r6
 801043c:	f7ff ffa1 	bl	8010382 <__sfputs_r>
 8010440:	3001      	adds	r0, #1
 8010442:	f000 80a9 	beq.w	8010598 <_vfiprintf_r+0x1f0>
 8010446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010448:	445a      	add	r2, fp
 801044a:	9209      	str	r2, [sp, #36]	; 0x24
 801044c:	f89a 3000 	ldrb.w	r3, [sl]
 8010450:	2b00      	cmp	r3, #0
 8010452:	f000 80a1 	beq.w	8010598 <_vfiprintf_r+0x1f0>
 8010456:	2300      	movs	r3, #0
 8010458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801045c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010460:	f10a 0a01 	add.w	sl, sl, #1
 8010464:	9304      	str	r3, [sp, #16]
 8010466:	9307      	str	r3, [sp, #28]
 8010468:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801046c:	931a      	str	r3, [sp, #104]	; 0x68
 801046e:	4654      	mov	r4, sl
 8010470:	2205      	movs	r2, #5
 8010472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010476:	4854      	ldr	r0, [pc, #336]	; (80105c8 <_vfiprintf_r+0x220>)
 8010478:	f7ef fee2 	bl	8000240 <memchr>
 801047c:	9a04      	ldr	r2, [sp, #16]
 801047e:	b9d8      	cbnz	r0, 80104b8 <_vfiprintf_r+0x110>
 8010480:	06d1      	lsls	r1, r2, #27
 8010482:	bf44      	itt	mi
 8010484:	2320      	movmi	r3, #32
 8010486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801048a:	0713      	lsls	r3, r2, #28
 801048c:	bf44      	itt	mi
 801048e:	232b      	movmi	r3, #43	; 0x2b
 8010490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010494:	f89a 3000 	ldrb.w	r3, [sl]
 8010498:	2b2a      	cmp	r3, #42	; 0x2a
 801049a:	d015      	beq.n	80104c8 <_vfiprintf_r+0x120>
 801049c:	9a07      	ldr	r2, [sp, #28]
 801049e:	4654      	mov	r4, sl
 80104a0:	2000      	movs	r0, #0
 80104a2:	f04f 0c0a 	mov.w	ip, #10
 80104a6:	4621      	mov	r1, r4
 80104a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104ac:	3b30      	subs	r3, #48	; 0x30
 80104ae:	2b09      	cmp	r3, #9
 80104b0:	d94d      	bls.n	801054e <_vfiprintf_r+0x1a6>
 80104b2:	b1b0      	cbz	r0, 80104e2 <_vfiprintf_r+0x13a>
 80104b4:	9207      	str	r2, [sp, #28]
 80104b6:	e014      	b.n	80104e2 <_vfiprintf_r+0x13a>
 80104b8:	eba0 0308 	sub.w	r3, r0, r8
 80104bc:	fa09 f303 	lsl.w	r3, r9, r3
 80104c0:	4313      	orrs	r3, r2
 80104c2:	9304      	str	r3, [sp, #16]
 80104c4:	46a2      	mov	sl, r4
 80104c6:	e7d2      	b.n	801046e <_vfiprintf_r+0xc6>
 80104c8:	9b03      	ldr	r3, [sp, #12]
 80104ca:	1d19      	adds	r1, r3, #4
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	9103      	str	r1, [sp, #12]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	bfbb      	ittet	lt
 80104d4:	425b      	neglt	r3, r3
 80104d6:	f042 0202 	orrlt.w	r2, r2, #2
 80104da:	9307      	strge	r3, [sp, #28]
 80104dc:	9307      	strlt	r3, [sp, #28]
 80104de:	bfb8      	it	lt
 80104e0:	9204      	strlt	r2, [sp, #16]
 80104e2:	7823      	ldrb	r3, [r4, #0]
 80104e4:	2b2e      	cmp	r3, #46	; 0x2e
 80104e6:	d10c      	bne.n	8010502 <_vfiprintf_r+0x15a>
 80104e8:	7863      	ldrb	r3, [r4, #1]
 80104ea:	2b2a      	cmp	r3, #42	; 0x2a
 80104ec:	d134      	bne.n	8010558 <_vfiprintf_r+0x1b0>
 80104ee:	9b03      	ldr	r3, [sp, #12]
 80104f0:	1d1a      	adds	r2, r3, #4
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	9203      	str	r2, [sp, #12]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	bfb8      	it	lt
 80104fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80104fe:	3402      	adds	r4, #2
 8010500:	9305      	str	r3, [sp, #20]
 8010502:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80105d8 <_vfiprintf_r+0x230>
 8010506:	7821      	ldrb	r1, [r4, #0]
 8010508:	2203      	movs	r2, #3
 801050a:	4650      	mov	r0, sl
 801050c:	f7ef fe98 	bl	8000240 <memchr>
 8010510:	b138      	cbz	r0, 8010522 <_vfiprintf_r+0x17a>
 8010512:	9b04      	ldr	r3, [sp, #16]
 8010514:	eba0 000a 	sub.w	r0, r0, sl
 8010518:	2240      	movs	r2, #64	; 0x40
 801051a:	4082      	lsls	r2, r0
 801051c:	4313      	orrs	r3, r2
 801051e:	3401      	adds	r4, #1
 8010520:	9304      	str	r3, [sp, #16]
 8010522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010526:	4829      	ldr	r0, [pc, #164]	; (80105cc <_vfiprintf_r+0x224>)
 8010528:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801052c:	2206      	movs	r2, #6
 801052e:	f7ef fe87 	bl	8000240 <memchr>
 8010532:	2800      	cmp	r0, #0
 8010534:	d03f      	beq.n	80105b6 <_vfiprintf_r+0x20e>
 8010536:	4b26      	ldr	r3, [pc, #152]	; (80105d0 <_vfiprintf_r+0x228>)
 8010538:	bb1b      	cbnz	r3, 8010582 <_vfiprintf_r+0x1da>
 801053a:	9b03      	ldr	r3, [sp, #12]
 801053c:	3307      	adds	r3, #7
 801053e:	f023 0307 	bic.w	r3, r3, #7
 8010542:	3308      	adds	r3, #8
 8010544:	9303      	str	r3, [sp, #12]
 8010546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010548:	443b      	add	r3, r7
 801054a:	9309      	str	r3, [sp, #36]	; 0x24
 801054c:	e768      	b.n	8010420 <_vfiprintf_r+0x78>
 801054e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010552:	460c      	mov	r4, r1
 8010554:	2001      	movs	r0, #1
 8010556:	e7a6      	b.n	80104a6 <_vfiprintf_r+0xfe>
 8010558:	2300      	movs	r3, #0
 801055a:	3401      	adds	r4, #1
 801055c:	9305      	str	r3, [sp, #20]
 801055e:	4619      	mov	r1, r3
 8010560:	f04f 0c0a 	mov.w	ip, #10
 8010564:	4620      	mov	r0, r4
 8010566:	f810 2b01 	ldrb.w	r2, [r0], #1
 801056a:	3a30      	subs	r2, #48	; 0x30
 801056c:	2a09      	cmp	r2, #9
 801056e:	d903      	bls.n	8010578 <_vfiprintf_r+0x1d0>
 8010570:	2b00      	cmp	r3, #0
 8010572:	d0c6      	beq.n	8010502 <_vfiprintf_r+0x15a>
 8010574:	9105      	str	r1, [sp, #20]
 8010576:	e7c4      	b.n	8010502 <_vfiprintf_r+0x15a>
 8010578:	fb0c 2101 	mla	r1, ip, r1, r2
 801057c:	4604      	mov	r4, r0
 801057e:	2301      	movs	r3, #1
 8010580:	e7f0      	b.n	8010564 <_vfiprintf_r+0x1bc>
 8010582:	ab03      	add	r3, sp, #12
 8010584:	9300      	str	r3, [sp, #0]
 8010586:	462a      	mov	r2, r5
 8010588:	4b12      	ldr	r3, [pc, #72]	; (80105d4 <_vfiprintf_r+0x22c>)
 801058a:	a904      	add	r1, sp, #16
 801058c:	4630      	mov	r0, r6
 801058e:	f3af 8000 	nop.w
 8010592:	4607      	mov	r7, r0
 8010594:	1c78      	adds	r0, r7, #1
 8010596:	d1d6      	bne.n	8010546 <_vfiprintf_r+0x19e>
 8010598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801059a:	07d9      	lsls	r1, r3, #31
 801059c:	d405      	bmi.n	80105aa <_vfiprintf_r+0x202>
 801059e:	89ab      	ldrh	r3, [r5, #12]
 80105a0:	059a      	lsls	r2, r3, #22
 80105a2:	d402      	bmi.n	80105aa <_vfiprintf_r+0x202>
 80105a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105a6:	f7ff fd2f 	bl	8010008 <__retarget_lock_release_recursive>
 80105aa:	89ab      	ldrh	r3, [r5, #12]
 80105ac:	065b      	lsls	r3, r3, #25
 80105ae:	f53f af1d 	bmi.w	80103ec <_vfiprintf_r+0x44>
 80105b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105b4:	e71c      	b.n	80103f0 <_vfiprintf_r+0x48>
 80105b6:	ab03      	add	r3, sp, #12
 80105b8:	9300      	str	r3, [sp, #0]
 80105ba:	462a      	mov	r2, r5
 80105bc:	4b05      	ldr	r3, [pc, #20]	; (80105d4 <_vfiprintf_r+0x22c>)
 80105be:	a904      	add	r1, sp, #16
 80105c0:	4630      	mov	r0, r6
 80105c2:	f000 f879 	bl	80106b8 <_printf_i>
 80105c6:	e7e4      	b.n	8010592 <_vfiprintf_r+0x1ea>
 80105c8:	080117b5 	.word	0x080117b5
 80105cc:	080117bf 	.word	0x080117bf
 80105d0:	00000000 	.word	0x00000000
 80105d4:	08010383 	.word	0x08010383
 80105d8:	080117bb 	.word	0x080117bb

080105dc <_printf_common>:
 80105dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105e0:	4616      	mov	r6, r2
 80105e2:	4699      	mov	r9, r3
 80105e4:	688a      	ldr	r2, [r1, #8]
 80105e6:	690b      	ldr	r3, [r1, #16]
 80105e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80105ec:	4293      	cmp	r3, r2
 80105ee:	bfb8      	it	lt
 80105f0:	4613      	movlt	r3, r2
 80105f2:	6033      	str	r3, [r6, #0]
 80105f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80105f8:	4607      	mov	r7, r0
 80105fa:	460c      	mov	r4, r1
 80105fc:	b10a      	cbz	r2, 8010602 <_printf_common+0x26>
 80105fe:	3301      	adds	r3, #1
 8010600:	6033      	str	r3, [r6, #0]
 8010602:	6823      	ldr	r3, [r4, #0]
 8010604:	0699      	lsls	r1, r3, #26
 8010606:	bf42      	ittt	mi
 8010608:	6833      	ldrmi	r3, [r6, #0]
 801060a:	3302      	addmi	r3, #2
 801060c:	6033      	strmi	r3, [r6, #0]
 801060e:	6825      	ldr	r5, [r4, #0]
 8010610:	f015 0506 	ands.w	r5, r5, #6
 8010614:	d106      	bne.n	8010624 <_printf_common+0x48>
 8010616:	f104 0a19 	add.w	sl, r4, #25
 801061a:	68e3      	ldr	r3, [r4, #12]
 801061c:	6832      	ldr	r2, [r6, #0]
 801061e:	1a9b      	subs	r3, r3, r2
 8010620:	42ab      	cmp	r3, r5
 8010622:	dc26      	bgt.n	8010672 <_printf_common+0x96>
 8010624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010628:	1e13      	subs	r3, r2, #0
 801062a:	6822      	ldr	r2, [r4, #0]
 801062c:	bf18      	it	ne
 801062e:	2301      	movne	r3, #1
 8010630:	0692      	lsls	r2, r2, #26
 8010632:	d42b      	bmi.n	801068c <_printf_common+0xb0>
 8010634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010638:	4649      	mov	r1, r9
 801063a:	4638      	mov	r0, r7
 801063c:	47c0      	blx	r8
 801063e:	3001      	adds	r0, #1
 8010640:	d01e      	beq.n	8010680 <_printf_common+0xa4>
 8010642:	6823      	ldr	r3, [r4, #0]
 8010644:	6922      	ldr	r2, [r4, #16]
 8010646:	f003 0306 	and.w	r3, r3, #6
 801064a:	2b04      	cmp	r3, #4
 801064c:	bf02      	ittt	eq
 801064e:	68e5      	ldreq	r5, [r4, #12]
 8010650:	6833      	ldreq	r3, [r6, #0]
 8010652:	1aed      	subeq	r5, r5, r3
 8010654:	68a3      	ldr	r3, [r4, #8]
 8010656:	bf0c      	ite	eq
 8010658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801065c:	2500      	movne	r5, #0
 801065e:	4293      	cmp	r3, r2
 8010660:	bfc4      	itt	gt
 8010662:	1a9b      	subgt	r3, r3, r2
 8010664:	18ed      	addgt	r5, r5, r3
 8010666:	2600      	movs	r6, #0
 8010668:	341a      	adds	r4, #26
 801066a:	42b5      	cmp	r5, r6
 801066c:	d11a      	bne.n	80106a4 <_printf_common+0xc8>
 801066e:	2000      	movs	r0, #0
 8010670:	e008      	b.n	8010684 <_printf_common+0xa8>
 8010672:	2301      	movs	r3, #1
 8010674:	4652      	mov	r2, sl
 8010676:	4649      	mov	r1, r9
 8010678:	4638      	mov	r0, r7
 801067a:	47c0      	blx	r8
 801067c:	3001      	adds	r0, #1
 801067e:	d103      	bne.n	8010688 <_printf_common+0xac>
 8010680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010688:	3501      	adds	r5, #1
 801068a:	e7c6      	b.n	801061a <_printf_common+0x3e>
 801068c:	18e1      	adds	r1, r4, r3
 801068e:	1c5a      	adds	r2, r3, #1
 8010690:	2030      	movs	r0, #48	; 0x30
 8010692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010696:	4422      	add	r2, r4
 8010698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801069c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80106a0:	3302      	adds	r3, #2
 80106a2:	e7c7      	b.n	8010634 <_printf_common+0x58>
 80106a4:	2301      	movs	r3, #1
 80106a6:	4622      	mov	r2, r4
 80106a8:	4649      	mov	r1, r9
 80106aa:	4638      	mov	r0, r7
 80106ac:	47c0      	blx	r8
 80106ae:	3001      	adds	r0, #1
 80106b0:	d0e6      	beq.n	8010680 <_printf_common+0xa4>
 80106b2:	3601      	adds	r6, #1
 80106b4:	e7d9      	b.n	801066a <_printf_common+0x8e>
	...

080106b8 <_printf_i>:
 80106b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106bc:	7e0f      	ldrb	r7, [r1, #24]
 80106be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80106c0:	2f78      	cmp	r7, #120	; 0x78
 80106c2:	4691      	mov	r9, r2
 80106c4:	4680      	mov	r8, r0
 80106c6:	460c      	mov	r4, r1
 80106c8:	469a      	mov	sl, r3
 80106ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80106ce:	d807      	bhi.n	80106e0 <_printf_i+0x28>
 80106d0:	2f62      	cmp	r7, #98	; 0x62
 80106d2:	d80a      	bhi.n	80106ea <_printf_i+0x32>
 80106d4:	2f00      	cmp	r7, #0
 80106d6:	f000 80d4 	beq.w	8010882 <_printf_i+0x1ca>
 80106da:	2f58      	cmp	r7, #88	; 0x58
 80106dc:	f000 80c0 	beq.w	8010860 <_printf_i+0x1a8>
 80106e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80106e8:	e03a      	b.n	8010760 <_printf_i+0xa8>
 80106ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80106ee:	2b15      	cmp	r3, #21
 80106f0:	d8f6      	bhi.n	80106e0 <_printf_i+0x28>
 80106f2:	a101      	add	r1, pc, #4	; (adr r1, 80106f8 <_printf_i+0x40>)
 80106f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80106f8:	08010751 	.word	0x08010751
 80106fc:	08010765 	.word	0x08010765
 8010700:	080106e1 	.word	0x080106e1
 8010704:	080106e1 	.word	0x080106e1
 8010708:	080106e1 	.word	0x080106e1
 801070c:	080106e1 	.word	0x080106e1
 8010710:	08010765 	.word	0x08010765
 8010714:	080106e1 	.word	0x080106e1
 8010718:	080106e1 	.word	0x080106e1
 801071c:	080106e1 	.word	0x080106e1
 8010720:	080106e1 	.word	0x080106e1
 8010724:	08010869 	.word	0x08010869
 8010728:	08010791 	.word	0x08010791
 801072c:	08010823 	.word	0x08010823
 8010730:	080106e1 	.word	0x080106e1
 8010734:	080106e1 	.word	0x080106e1
 8010738:	0801088b 	.word	0x0801088b
 801073c:	080106e1 	.word	0x080106e1
 8010740:	08010791 	.word	0x08010791
 8010744:	080106e1 	.word	0x080106e1
 8010748:	080106e1 	.word	0x080106e1
 801074c:	0801082b 	.word	0x0801082b
 8010750:	682b      	ldr	r3, [r5, #0]
 8010752:	1d1a      	adds	r2, r3, #4
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	602a      	str	r2, [r5, #0]
 8010758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801075c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010760:	2301      	movs	r3, #1
 8010762:	e09f      	b.n	80108a4 <_printf_i+0x1ec>
 8010764:	6820      	ldr	r0, [r4, #0]
 8010766:	682b      	ldr	r3, [r5, #0]
 8010768:	0607      	lsls	r7, r0, #24
 801076a:	f103 0104 	add.w	r1, r3, #4
 801076e:	6029      	str	r1, [r5, #0]
 8010770:	d501      	bpl.n	8010776 <_printf_i+0xbe>
 8010772:	681e      	ldr	r6, [r3, #0]
 8010774:	e003      	b.n	801077e <_printf_i+0xc6>
 8010776:	0646      	lsls	r6, r0, #25
 8010778:	d5fb      	bpl.n	8010772 <_printf_i+0xba>
 801077a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801077e:	2e00      	cmp	r6, #0
 8010780:	da03      	bge.n	801078a <_printf_i+0xd2>
 8010782:	232d      	movs	r3, #45	; 0x2d
 8010784:	4276      	negs	r6, r6
 8010786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801078a:	485a      	ldr	r0, [pc, #360]	; (80108f4 <_printf_i+0x23c>)
 801078c:	230a      	movs	r3, #10
 801078e:	e012      	b.n	80107b6 <_printf_i+0xfe>
 8010790:	682b      	ldr	r3, [r5, #0]
 8010792:	6820      	ldr	r0, [r4, #0]
 8010794:	1d19      	adds	r1, r3, #4
 8010796:	6029      	str	r1, [r5, #0]
 8010798:	0605      	lsls	r5, r0, #24
 801079a:	d501      	bpl.n	80107a0 <_printf_i+0xe8>
 801079c:	681e      	ldr	r6, [r3, #0]
 801079e:	e002      	b.n	80107a6 <_printf_i+0xee>
 80107a0:	0641      	lsls	r1, r0, #25
 80107a2:	d5fb      	bpl.n	801079c <_printf_i+0xe4>
 80107a4:	881e      	ldrh	r6, [r3, #0]
 80107a6:	4853      	ldr	r0, [pc, #332]	; (80108f4 <_printf_i+0x23c>)
 80107a8:	2f6f      	cmp	r7, #111	; 0x6f
 80107aa:	bf0c      	ite	eq
 80107ac:	2308      	moveq	r3, #8
 80107ae:	230a      	movne	r3, #10
 80107b0:	2100      	movs	r1, #0
 80107b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80107b6:	6865      	ldr	r5, [r4, #4]
 80107b8:	60a5      	str	r5, [r4, #8]
 80107ba:	2d00      	cmp	r5, #0
 80107bc:	bfa2      	ittt	ge
 80107be:	6821      	ldrge	r1, [r4, #0]
 80107c0:	f021 0104 	bicge.w	r1, r1, #4
 80107c4:	6021      	strge	r1, [r4, #0]
 80107c6:	b90e      	cbnz	r6, 80107cc <_printf_i+0x114>
 80107c8:	2d00      	cmp	r5, #0
 80107ca:	d04b      	beq.n	8010864 <_printf_i+0x1ac>
 80107cc:	4615      	mov	r5, r2
 80107ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80107d2:	fb03 6711 	mls	r7, r3, r1, r6
 80107d6:	5dc7      	ldrb	r7, [r0, r7]
 80107d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80107dc:	4637      	mov	r7, r6
 80107de:	42bb      	cmp	r3, r7
 80107e0:	460e      	mov	r6, r1
 80107e2:	d9f4      	bls.n	80107ce <_printf_i+0x116>
 80107e4:	2b08      	cmp	r3, #8
 80107e6:	d10b      	bne.n	8010800 <_printf_i+0x148>
 80107e8:	6823      	ldr	r3, [r4, #0]
 80107ea:	07de      	lsls	r6, r3, #31
 80107ec:	d508      	bpl.n	8010800 <_printf_i+0x148>
 80107ee:	6923      	ldr	r3, [r4, #16]
 80107f0:	6861      	ldr	r1, [r4, #4]
 80107f2:	4299      	cmp	r1, r3
 80107f4:	bfde      	ittt	le
 80107f6:	2330      	movle	r3, #48	; 0x30
 80107f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80107fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010800:	1b52      	subs	r2, r2, r5
 8010802:	6122      	str	r2, [r4, #16]
 8010804:	f8cd a000 	str.w	sl, [sp]
 8010808:	464b      	mov	r3, r9
 801080a:	aa03      	add	r2, sp, #12
 801080c:	4621      	mov	r1, r4
 801080e:	4640      	mov	r0, r8
 8010810:	f7ff fee4 	bl	80105dc <_printf_common>
 8010814:	3001      	adds	r0, #1
 8010816:	d14a      	bne.n	80108ae <_printf_i+0x1f6>
 8010818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801081c:	b004      	add	sp, #16
 801081e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010822:	6823      	ldr	r3, [r4, #0]
 8010824:	f043 0320 	orr.w	r3, r3, #32
 8010828:	6023      	str	r3, [r4, #0]
 801082a:	4833      	ldr	r0, [pc, #204]	; (80108f8 <_printf_i+0x240>)
 801082c:	2778      	movs	r7, #120	; 0x78
 801082e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010832:	6823      	ldr	r3, [r4, #0]
 8010834:	6829      	ldr	r1, [r5, #0]
 8010836:	061f      	lsls	r7, r3, #24
 8010838:	f851 6b04 	ldr.w	r6, [r1], #4
 801083c:	d402      	bmi.n	8010844 <_printf_i+0x18c>
 801083e:	065f      	lsls	r7, r3, #25
 8010840:	bf48      	it	mi
 8010842:	b2b6      	uxthmi	r6, r6
 8010844:	07df      	lsls	r7, r3, #31
 8010846:	bf48      	it	mi
 8010848:	f043 0320 	orrmi.w	r3, r3, #32
 801084c:	6029      	str	r1, [r5, #0]
 801084e:	bf48      	it	mi
 8010850:	6023      	strmi	r3, [r4, #0]
 8010852:	b91e      	cbnz	r6, 801085c <_printf_i+0x1a4>
 8010854:	6823      	ldr	r3, [r4, #0]
 8010856:	f023 0320 	bic.w	r3, r3, #32
 801085a:	6023      	str	r3, [r4, #0]
 801085c:	2310      	movs	r3, #16
 801085e:	e7a7      	b.n	80107b0 <_printf_i+0xf8>
 8010860:	4824      	ldr	r0, [pc, #144]	; (80108f4 <_printf_i+0x23c>)
 8010862:	e7e4      	b.n	801082e <_printf_i+0x176>
 8010864:	4615      	mov	r5, r2
 8010866:	e7bd      	b.n	80107e4 <_printf_i+0x12c>
 8010868:	682b      	ldr	r3, [r5, #0]
 801086a:	6826      	ldr	r6, [r4, #0]
 801086c:	6961      	ldr	r1, [r4, #20]
 801086e:	1d18      	adds	r0, r3, #4
 8010870:	6028      	str	r0, [r5, #0]
 8010872:	0635      	lsls	r5, r6, #24
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	d501      	bpl.n	801087c <_printf_i+0x1c4>
 8010878:	6019      	str	r1, [r3, #0]
 801087a:	e002      	b.n	8010882 <_printf_i+0x1ca>
 801087c:	0670      	lsls	r0, r6, #25
 801087e:	d5fb      	bpl.n	8010878 <_printf_i+0x1c0>
 8010880:	8019      	strh	r1, [r3, #0]
 8010882:	2300      	movs	r3, #0
 8010884:	6123      	str	r3, [r4, #16]
 8010886:	4615      	mov	r5, r2
 8010888:	e7bc      	b.n	8010804 <_printf_i+0x14c>
 801088a:	682b      	ldr	r3, [r5, #0]
 801088c:	1d1a      	adds	r2, r3, #4
 801088e:	602a      	str	r2, [r5, #0]
 8010890:	681d      	ldr	r5, [r3, #0]
 8010892:	6862      	ldr	r2, [r4, #4]
 8010894:	2100      	movs	r1, #0
 8010896:	4628      	mov	r0, r5
 8010898:	f7ef fcd2 	bl	8000240 <memchr>
 801089c:	b108      	cbz	r0, 80108a2 <_printf_i+0x1ea>
 801089e:	1b40      	subs	r0, r0, r5
 80108a0:	6060      	str	r0, [r4, #4]
 80108a2:	6863      	ldr	r3, [r4, #4]
 80108a4:	6123      	str	r3, [r4, #16]
 80108a6:	2300      	movs	r3, #0
 80108a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108ac:	e7aa      	b.n	8010804 <_printf_i+0x14c>
 80108ae:	6923      	ldr	r3, [r4, #16]
 80108b0:	462a      	mov	r2, r5
 80108b2:	4649      	mov	r1, r9
 80108b4:	4640      	mov	r0, r8
 80108b6:	47d0      	blx	sl
 80108b8:	3001      	adds	r0, #1
 80108ba:	d0ad      	beq.n	8010818 <_printf_i+0x160>
 80108bc:	6823      	ldr	r3, [r4, #0]
 80108be:	079b      	lsls	r3, r3, #30
 80108c0:	d413      	bmi.n	80108ea <_printf_i+0x232>
 80108c2:	68e0      	ldr	r0, [r4, #12]
 80108c4:	9b03      	ldr	r3, [sp, #12]
 80108c6:	4298      	cmp	r0, r3
 80108c8:	bfb8      	it	lt
 80108ca:	4618      	movlt	r0, r3
 80108cc:	e7a6      	b.n	801081c <_printf_i+0x164>
 80108ce:	2301      	movs	r3, #1
 80108d0:	4632      	mov	r2, r6
 80108d2:	4649      	mov	r1, r9
 80108d4:	4640      	mov	r0, r8
 80108d6:	47d0      	blx	sl
 80108d8:	3001      	adds	r0, #1
 80108da:	d09d      	beq.n	8010818 <_printf_i+0x160>
 80108dc:	3501      	adds	r5, #1
 80108de:	68e3      	ldr	r3, [r4, #12]
 80108e0:	9903      	ldr	r1, [sp, #12]
 80108e2:	1a5b      	subs	r3, r3, r1
 80108e4:	42ab      	cmp	r3, r5
 80108e6:	dcf2      	bgt.n	80108ce <_printf_i+0x216>
 80108e8:	e7eb      	b.n	80108c2 <_printf_i+0x20a>
 80108ea:	2500      	movs	r5, #0
 80108ec:	f104 0619 	add.w	r6, r4, #25
 80108f0:	e7f5      	b.n	80108de <_printf_i+0x226>
 80108f2:	bf00      	nop
 80108f4:	080117c6 	.word	0x080117c6
 80108f8:	080117d7 	.word	0x080117d7

080108fc <__sflush_r>:
 80108fc:	898a      	ldrh	r2, [r1, #12]
 80108fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010902:	4605      	mov	r5, r0
 8010904:	0710      	lsls	r0, r2, #28
 8010906:	460c      	mov	r4, r1
 8010908:	d458      	bmi.n	80109bc <__sflush_r+0xc0>
 801090a:	684b      	ldr	r3, [r1, #4]
 801090c:	2b00      	cmp	r3, #0
 801090e:	dc05      	bgt.n	801091c <__sflush_r+0x20>
 8010910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010912:	2b00      	cmp	r3, #0
 8010914:	dc02      	bgt.n	801091c <__sflush_r+0x20>
 8010916:	2000      	movs	r0, #0
 8010918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801091c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801091e:	2e00      	cmp	r6, #0
 8010920:	d0f9      	beq.n	8010916 <__sflush_r+0x1a>
 8010922:	2300      	movs	r3, #0
 8010924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010928:	682f      	ldr	r7, [r5, #0]
 801092a:	6a21      	ldr	r1, [r4, #32]
 801092c:	602b      	str	r3, [r5, #0]
 801092e:	d032      	beq.n	8010996 <__sflush_r+0x9a>
 8010930:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010932:	89a3      	ldrh	r3, [r4, #12]
 8010934:	075a      	lsls	r2, r3, #29
 8010936:	d505      	bpl.n	8010944 <__sflush_r+0x48>
 8010938:	6863      	ldr	r3, [r4, #4]
 801093a:	1ac0      	subs	r0, r0, r3
 801093c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801093e:	b10b      	cbz	r3, 8010944 <__sflush_r+0x48>
 8010940:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010942:	1ac0      	subs	r0, r0, r3
 8010944:	2300      	movs	r3, #0
 8010946:	4602      	mov	r2, r0
 8010948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801094a:	6a21      	ldr	r1, [r4, #32]
 801094c:	4628      	mov	r0, r5
 801094e:	47b0      	blx	r6
 8010950:	1c43      	adds	r3, r0, #1
 8010952:	89a3      	ldrh	r3, [r4, #12]
 8010954:	d106      	bne.n	8010964 <__sflush_r+0x68>
 8010956:	6829      	ldr	r1, [r5, #0]
 8010958:	291d      	cmp	r1, #29
 801095a:	d82b      	bhi.n	80109b4 <__sflush_r+0xb8>
 801095c:	4a29      	ldr	r2, [pc, #164]	; (8010a04 <__sflush_r+0x108>)
 801095e:	410a      	asrs	r2, r1
 8010960:	07d6      	lsls	r6, r2, #31
 8010962:	d427      	bmi.n	80109b4 <__sflush_r+0xb8>
 8010964:	2200      	movs	r2, #0
 8010966:	6062      	str	r2, [r4, #4]
 8010968:	04d9      	lsls	r1, r3, #19
 801096a:	6922      	ldr	r2, [r4, #16]
 801096c:	6022      	str	r2, [r4, #0]
 801096e:	d504      	bpl.n	801097a <__sflush_r+0x7e>
 8010970:	1c42      	adds	r2, r0, #1
 8010972:	d101      	bne.n	8010978 <__sflush_r+0x7c>
 8010974:	682b      	ldr	r3, [r5, #0]
 8010976:	b903      	cbnz	r3, 801097a <__sflush_r+0x7e>
 8010978:	6560      	str	r0, [r4, #84]	; 0x54
 801097a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801097c:	602f      	str	r7, [r5, #0]
 801097e:	2900      	cmp	r1, #0
 8010980:	d0c9      	beq.n	8010916 <__sflush_r+0x1a>
 8010982:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010986:	4299      	cmp	r1, r3
 8010988:	d002      	beq.n	8010990 <__sflush_r+0x94>
 801098a:	4628      	mov	r0, r5
 801098c:	f7ff fb3e 	bl	801000c <_free_r>
 8010990:	2000      	movs	r0, #0
 8010992:	6360      	str	r0, [r4, #52]	; 0x34
 8010994:	e7c0      	b.n	8010918 <__sflush_r+0x1c>
 8010996:	2301      	movs	r3, #1
 8010998:	4628      	mov	r0, r5
 801099a:	47b0      	blx	r6
 801099c:	1c41      	adds	r1, r0, #1
 801099e:	d1c8      	bne.n	8010932 <__sflush_r+0x36>
 80109a0:	682b      	ldr	r3, [r5, #0]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d0c5      	beq.n	8010932 <__sflush_r+0x36>
 80109a6:	2b1d      	cmp	r3, #29
 80109a8:	d001      	beq.n	80109ae <__sflush_r+0xb2>
 80109aa:	2b16      	cmp	r3, #22
 80109ac:	d101      	bne.n	80109b2 <__sflush_r+0xb6>
 80109ae:	602f      	str	r7, [r5, #0]
 80109b0:	e7b1      	b.n	8010916 <__sflush_r+0x1a>
 80109b2:	89a3      	ldrh	r3, [r4, #12]
 80109b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109b8:	81a3      	strh	r3, [r4, #12]
 80109ba:	e7ad      	b.n	8010918 <__sflush_r+0x1c>
 80109bc:	690f      	ldr	r7, [r1, #16]
 80109be:	2f00      	cmp	r7, #0
 80109c0:	d0a9      	beq.n	8010916 <__sflush_r+0x1a>
 80109c2:	0793      	lsls	r3, r2, #30
 80109c4:	680e      	ldr	r6, [r1, #0]
 80109c6:	bf08      	it	eq
 80109c8:	694b      	ldreq	r3, [r1, #20]
 80109ca:	600f      	str	r7, [r1, #0]
 80109cc:	bf18      	it	ne
 80109ce:	2300      	movne	r3, #0
 80109d0:	eba6 0807 	sub.w	r8, r6, r7
 80109d4:	608b      	str	r3, [r1, #8]
 80109d6:	f1b8 0f00 	cmp.w	r8, #0
 80109da:	dd9c      	ble.n	8010916 <__sflush_r+0x1a>
 80109dc:	6a21      	ldr	r1, [r4, #32]
 80109de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80109e0:	4643      	mov	r3, r8
 80109e2:	463a      	mov	r2, r7
 80109e4:	4628      	mov	r0, r5
 80109e6:	47b0      	blx	r6
 80109e8:	2800      	cmp	r0, #0
 80109ea:	dc06      	bgt.n	80109fa <__sflush_r+0xfe>
 80109ec:	89a3      	ldrh	r3, [r4, #12]
 80109ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109f2:	81a3      	strh	r3, [r4, #12]
 80109f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109f8:	e78e      	b.n	8010918 <__sflush_r+0x1c>
 80109fa:	4407      	add	r7, r0
 80109fc:	eba8 0800 	sub.w	r8, r8, r0
 8010a00:	e7e9      	b.n	80109d6 <__sflush_r+0xda>
 8010a02:	bf00      	nop
 8010a04:	dfbffffe 	.word	0xdfbffffe

08010a08 <_fflush_r>:
 8010a08:	b538      	push	{r3, r4, r5, lr}
 8010a0a:	690b      	ldr	r3, [r1, #16]
 8010a0c:	4605      	mov	r5, r0
 8010a0e:	460c      	mov	r4, r1
 8010a10:	b913      	cbnz	r3, 8010a18 <_fflush_r+0x10>
 8010a12:	2500      	movs	r5, #0
 8010a14:	4628      	mov	r0, r5
 8010a16:	bd38      	pop	{r3, r4, r5, pc}
 8010a18:	b118      	cbz	r0, 8010a22 <_fflush_r+0x1a>
 8010a1a:	6a03      	ldr	r3, [r0, #32]
 8010a1c:	b90b      	cbnz	r3, 8010a22 <_fflush_r+0x1a>
 8010a1e:	f7ff f96f 	bl	800fd00 <__sinit>
 8010a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d0f3      	beq.n	8010a12 <_fflush_r+0xa>
 8010a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010a2c:	07d0      	lsls	r0, r2, #31
 8010a2e:	d404      	bmi.n	8010a3a <_fflush_r+0x32>
 8010a30:	0599      	lsls	r1, r3, #22
 8010a32:	d402      	bmi.n	8010a3a <_fflush_r+0x32>
 8010a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a36:	f7ff fae6 	bl	8010006 <__retarget_lock_acquire_recursive>
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	4621      	mov	r1, r4
 8010a3e:	f7ff ff5d 	bl	80108fc <__sflush_r>
 8010a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a44:	07da      	lsls	r2, r3, #31
 8010a46:	4605      	mov	r5, r0
 8010a48:	d4e4      	bmi.n	8010a14 <_fflush_r+0xc>
 8010a4a:	89a3      	ldrh	r3, [r4, #12]
 8010a4c:	059b      	lsls	r3, r3, #22
 8010a4e:	d4e1      	bmi.n	8010a14 <_fflush_r+0xc>
 8010a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a52:	f7ff fad9 	bl	8010008 <__retarget_lock_release_recursive>
 8010a56:	e7dd      	b.n	8010a14 <_fflush_r+0xc>

08010a58 <__sread>:
 8010a58:	b510      	push	{r4, lr}
 8010a5a:	460c      	mov	r4, r1
 8010a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a60:	f000 f9c2 	bl	8010de8 <_read_r>
 8010a64:	2800      	cmp	r0, #0
 8010a66:	bfab      	itete	ge
 8010a68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8010a6c:	181b      	addge	r3, r3, r0
 8010a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010a72:	bfac      	ite	ge
 8010a74:	6563      	strge	r3, [r4, #84]	; 0x54
 8010a76:	81a3      	strhlt	r3, [r4, #12]
 8010a78:	bd10      	pop	{r4, pc}

08010a7a <__swrite>:
 8010a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a7e:	461f      	mov	r7, r3
 8010a80:	898b      	ldrh	r3, [r1, #12]
 8010a82:	05db      	lsls	r3, r3, #23
 8010a84:	4605      	mov	r5, r0
 8010a86:	460c      	mov	r4, r1
 8010a88:	4616      	mov	r6, r2
 8010a8a:	d505      	bpl.n	8010a98 <__swrite+0x1e>
 8010a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a90:	2302      	movs	r3, #2
 8010a92:	2200      	movs	r2, #0
 8010a94:	f000 f996 	bl	8010dc4 <_lseek_r>
 8010a98:	89a3      	ldrh	r3, [r4, #12]
 8010a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010aa2:	81a3      	strh	r3, [r4, #12]
 8010aa4:	4632      	mov	r2, r6
 8010aa6:	463b      	mov	r3, r7
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010aae:	f000 b9ad 	b.w	8010e0c <_write_r>

08010ab2 <__sseek>:
 8010ab2:	b510      	push	{r4, lr}
 8010ab4:	460c      	mov	r4, r1
 8010ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010aba:	f000 f983 	bl	8010dc4 <_lseek_r>
 8010abe:	1c43      	adds	r3, r0, #1
 8010ac0:	89a3      	ldrh	r3, [r4, #12]
 8010ac2:	bf15      	itete	ne
 8010ac4:	6560      	strne	r0, [r4, #84]	; 0x54
 8010ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ace:	81a3      	strheq	r3, [r4, #12]
 8010ad0:	bf18      	it	ne
 8010ad2:	81a3      	strhne	r3, [r4, #12]
 8010ad4:	bd10      	pop	{r4, pc}

08010ad6 <__sclose>:
 8010ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ada:	f000 b941 	b.w	8010d60 <_close_r>

08010ade <_realloc_r>:
 8010ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ae2:	4680      	mov	r8, r0
 8010ae4:	4614      	mov	r4, r2
 8010ae6:	460e      	mov	r6, r1
 8010ae8:	b921      	cbnz	r1, 8010af4 <_realloc_r+0x16>
 8010aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010aee:	4611      	mov	r1, r2
 8010af0:	f7fe bfba 	b.w	800fa68 <_malloc_r>
 8010af4:	b92a      	cbnz	r2, 8010b02 <_realloc_r+0x24>
 8010af6:	f7ff fa89 	bl	801000c <_free_r>
 8010afa:	4625      	mov	r5, r4
 8010afc:	4628      	mov	r0, r5
 8010afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b02:	f000 f9a3 	bl	8010e4c <_malloc_usable_size_r>
 8010b06:	4284      	cmp	r4, r0
 8010b08:	4607      	mov	r7, r0
 8010b0a:	d802      	bhi.n	8010b12 <_realloc_r+0x34>
 8010b0c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010b10:	d812      	bhi.n	8010b38 <_realloc_r+0x5a>
 8010b12:	4621      	mov	r1, r4
 8010b14:	4640      	mov	r0, r8
 8010b16:	f7fe ffa7 	bl	800fa68 <_malloc_r>
 8010b1a:	4605      	mov	r5, r0
 8010b1c:	2800      	cmp	r0, #0
 8010b1e:	d0ed      	beq.n	8010afc <_realloc_r+0x1e>
 8010b20:	42bc      	cmp	r4, r7
 8010b22:	4622      	mov	r2, r4
 8010b24:	4631      	mov	r1, r6
 8010b26:	bf28      	it	cs
 8010b28:	463a      	movcs	r2, r7
 8010b2a:	f000 f981 	bl	8010e30 <memcpy>
 8010b2e:	4631      	mov	r1, r6
 8010b30:	4640      	mov	r0, r8
 8010b32:	f7ff fa6b 	bl	801000c <_free_r>
 8010b36:	e7e1      	b.n	8010afc <_realloc_r+0x1e>
 8010b38:	4635      	mov	r5, r6
 8010b3a:	e7df      	b.n	8010afc <_realloc_r+0x1e>

08010b3c <__swbuf_r>:
 8010b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b3e:	460e      	mov	r6, r1
 8010b40:	4614      	mov	r4, r2
 8010b42:	4605      	mov	r5, r0
 8010b44:	b118      	cbz	r0, 8010b4e <__swbuf_r+0x12>
 8010b46:	6a03      	ldr	r3, [r0, #32]
 8010b48:	b90b      	cbnz	r3, 8010b4e <__swbuf_r+0x12>
 8010b4a:	f7ff f8d9 	bl	800fd00 <__sinit>
 8010b4e:	69a3      	ldr	r3, [r4, #24]
 8010b50:	60a3      	str	r3, [r4, #8]
 8010b52:	89a3      	ldrh	r3, [r4, #12]
 8010b54:	071a      	lsls	r2, r3, #28
 8010b56:	d525      	bpl.n	8010ba4 <__swbuf_r+0x68>
 8010b58:	6923      	ldr	r3, [r4, #16]
 8010b5a:	b31b      	cbz	r3, 8010ba4 <__swbuf_r+0x68>
 8010b5c:	6823      	ldr	r3, [r4, #0]
 8010b5e:	6922      	ldr	r2, [r4, #16]
 8010b60:	1a98      	subs	r0, r3, r2
 8010b62:	6963      	ldr	r3, [r4, #20]
 8010b64:	b2f6      	uxtb	r6, r6
 8010b66:	4283      	cmp	r3, r0
 8010b68:	4637      	mov	r7, r6
 8010b6a:	dc04      	bgt.n	8010b76 <__swbuf_r+0x3a>
 8010b6c:	4621      	mov	r1, r4
 8010b6e:	4628      	mov	r0, r5
 8010b70:	f7ff ff4a 	bl	8010a08 <_fflush_r>
 8010b74:	b9e0      	cbnz	r0, 8010bb0 <__swbuf_r+0x74>
 8010b76:	68a3      	ldr	r3, [r4, #8]
 8010b78:	3b01      	subs	r3, #1
 8010b7a:	60a3      	str	r3, [r4, #8]
 8010b7c:	6823      	ldr	r3, [r4, #0]
 8010b7e:	1c5a      	adds	r2, r3, #1
 8010b80:	6022      	str	r2, [r4, #0]
 8010b82:	701e      	strb	r6, [r3, #0]
 8010b84:	6962      	ldr	r2, [r4, #20]
 8010b86:	1c43      	adds	r3, r0, #1
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d004      	beq.n	8010b96 <__swbuf_r+0x5a>
 8010b8c:	89a3      	ldrh	r3, [r4, #12]
 8010b8e:	07db      	lsls	r3, r3, #31
 8010b90:	d506      	bpl.n	8010ba0 <__swbuf_r+0x64>
 8010b92:	2e0a      	cmp	r6, #10
 8010b94:	d104      	bne.n	8010ba0 <__swbuf_r+0x64>
 8010b96:	4621      	mov	r1, r4
 8010b98:	4628      	mov	r0, r5
 8010b9a:	f7ff ff35 	bl	8010a08 <_fflush_r>
 8010b9e:	b938      	cbnz	r0, 8010bb0 <__swbuf_r+0x74>
 8010ba0:	4638      	mov	r0, r7
 8010ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ba4:	4621      	mov	r1, r4
 8010ba6:	4628      	mov	r0, r5
 8010ba8:	f000 f806 	bl	8010bb8 <__swsetup_r>
 8010bac:	2800      	cmp	r0, #0
 8010bae:	d0d5      	beq.n	8010b5c <__swbuf_r+0x20>
 8010bb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010bb4:	e7f4      	b.n	8010ba0 <__swbuf_r+0x64>
	...

08010bb8 <__swsetup_r>:
 8010bb8:	b538      	push	{r3, r4, r5, lr}
 8010bba:	4b2a      	ldr	r3, [pc, #168]	; (8010c64 <__swsetup_r+0xac>)
 8010bbc:	4605      	mov	r5, r0
 8010bbe:	6818      	ldr	r0, [r3, #0]
 8010bc0:	460c      	mov	r4, r1
 8010bc2:	b118      	cbz	r0, 8010bcc <__swsetup_r+0x14>
 8010bc4:	6a03      	ldr	r3, [r0, #32]
 8010bc6:	b90b      	cbnz	r3, 8010bcc <__swsetup_r+0x14>
 8010bc8:	f7ff f89a 	bl	800fd00 <__sinit>
 8010bcc:	89a3      	ldrh	r3, [r4, #12]
 8010bce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010bd2:	0718      	lsls	r0, r3, #28
 8010bd4:	d422      	bmi.n	8010c1c <__swsetup_r+0x64>
 8010bd6:	06d9      	lsls	r1, r3, #27
 8010bd8:	d407      	bmi.n	8010bea <__swsetup_r+0x32>
 8010bda:	2309      	movs	r3, #9
 8010bdc:	602b      	str	r3, [r5, #0]
 8010bde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010be2:	81a3      	strh	r3, [r4, #12]
 8010be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010be8:	e034      	b.n	8010c54 <__swsetup_r+0x9c>
 8010bea:	0758      	lsls	r0, r3, #29
 8010bec:	d512      	bpl.n	8010c14 <__swsetup_r+0x5c>
 8010bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010bf0:	b141      	cbz	r1, 8010c04 <__swsetup_r+0x4c>
 8010bf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010bf6:	4299      	cmp	r1, r3
 8010bf8:	d002      	beq.n	8010c00 <__swsetup_r+0x48>
 8010bfa:	4628      	mov	r0, r5
 8010bfc:	f7ff fa06 	bl	801000c <_free_r>
 8010c00:	2300      	movs	r3, #0
 8010c02:	6363      	str	r3, [r4, #52]	; 0x34
 8010c04:	89a3      	ldrh	r3, [r4, #12]
 8010c06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010c0a:	81a3      	strh	r3, [r4, #12]
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	6063      	str	r3, [r4, #4]
 8010c10:	6923      	ldr	r3, [r4, #16]
 8010c12:	6023      	str	r3, [r4, #0]
 8010c14:	89a3      	ldrh	r3, [r4, #12]
 8010c16:	f043 0308 	orr.w	r3, r3, #8
 8010c1a:	81a3      	strh	r3, [r4, #12]
 8010c1c:	6923      	ldr	r3, [r4, #16]
 8010c1e:	b94b      	cbnz	r3, 8010c34 <__swsetup_r+0x7c>
 8010c20:	89a3      	ldrh	r3, [r4, #12]
 8010c22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c2a:	d003      	beq.n	8010c34 <__swsetup_r+0x7c>
 8010c2c:	4621      	mov	r1, r4
 8010c2e:	4628      	mov	r0, r5
 8010c30:	f000 f840 	bl	8010cb4 <__smakebuf_r>
 8010c34:	89a0      	ldrh	r0, [r4, #12]
 8010c36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c3a:	f010 0301 	ands.w	r3, r0, #1
 8010c3e:	d00a      	beq.n	8010c56 <__swsetup_r+0x9e>
 8010c40:	2300      	movs	r3, #0
 8010c42:	60a3      	str	r3, [r4, #8]
 8010c44:	6963      	ldr	r3, [r4, #20]
 8010c46:	425b      	negs	r3, r3
 8010c48:	61a3      	str	r3, [r4, #24]
 8010c4a:	6923      	ldr	r3, [r4, #16]
 8010c4c:	b943      	cbnz	r3, 8010c60 <__swsetup_r+0xa8>
 8010c4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010c52:	d1c4      	bne.n	8010bde <__swsetup_r+0x26>
 8010c54:	bd38      	pop	{r3, r4, r5, pc}
 8010c56:	0781      	lsls	r1, r0, #30
 8010c58:	bf58      	it	pl
 8010c5a:	6963      	ldrpl	r3, [r4, #20]
 8010c5c:	60a3      	str	r3, [r4, #8]
 8010c5e:	e7f4      	b.n	8010c4a <__swsetup_r+0x92>
 8010c60:	2000      	movs	r0, #0
 8010c62:	e7f7      	b.n	8010c54 <__swsetup_r+0x9c>
 8010c64:	20000164 	.word	0x20000164

08010c68 <__swhatbuf_r>:
 8010c68:	b570      	push	{r4, r5, r6, lr}
 8010c6a:	460c      	mov	r4, r1
 8010c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c70:	2900      	cmp	r1, #0
 8010c72:	b096      	sub	sp, #88	; 0x58
 8010c74:	4615      	mov	r5, r2
 8010c76:	461e      	mov	r6, r3
 8010c78:	da0d      	bge.n	8010c96 <__swhatbuf_r+0x2e>
 8010c7a:	89a3      	ldrh	r3, [r4, #12]
 8010c7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010c80:	f04f 0100 	mov.w	r1, #0
 8010c84:	bf0c      	ite	eq
 8010c86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010c8a:	2340      	movne	r3, #64	; 0x40
 8010c8c:	2000      	movs	r0, #0
 8010c8e:	6031      	str	r1, [r6, #0]
 8010c90:	602b      	str	r3, [r5, #0]
 8010c92:	b016      	add	sp, #88	; 0x58
 8010c94:	bd70      	pop	{r4, r5, r6, pc}
 8010c96:	466a      	mov	r2, sp
 8010c98:	f000 f872 	bl	8010d80 <_fstat_r>
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	dbec      	blt.n	8010c7a <__swhatbuf_r+0x12>
 8010ca0:	9901      	ldr	r1, [sp, #4]
 8010ca2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010ca6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010caa:	4259      	negs	r1, r3
 8010cac:	4159      	adcs	r1, r3
 8010cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cb2:	e7eb      	b.n	8010c8c <__swhatbuf_r+0x24>

08010cb4 <__smakebuf_r>:
 8010cb4:	898b      	ldrh	r3, [r1, #12]
 8010cb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010cb8:	079d      	lsls	r5, r3, #30
 8010cba:	4606      	mov	r6, r0
 8010cbc:	460c      	mov	r4, r1
 8010cbe:	d507      	bpl.n	8010cd0 <__smakebuf_r+0x1c>
 8010cc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010cc4:	6023      	str	r3, [r4, #0]
 8010cc6:	6123      	str	r3, [r4, #16]
 8010cc8:	2301      	movs	r3, #1
 8010cca:	6163      	str	r3, [r4, #20]
 8010ccc:	b002      	add	sp, #8
 8010cce:	bd70      	pop	{r4, r5, r6, pc}
 8010cd0:	ab01      	add	r3, sp, #4
 8010cd2:	466a      	mov	r2, sp
 8010cd4:	f7ff ffc8 	bl	8010c68 <__swhatbuf_r>
 8010cd8:	9900      	ldr	r1, [sp, #0]
 8010cda:	4605      	mov	r5, r0
 8010cdc:	4630      	mov	r0, r6
 8010cde:	f7fe fec3 	bl	800fa68 <_malloc_r>
 8010ce2:	b948      	cbnz	r0, 8010cf8 <__smakebuf_r+0x44>
 8010ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ce8:	059a      	lsls	r2, r3, #22
 8010cea:	d4ef      	bmi.n	8010ccc <__smakebuf_r+0x18>
 8010cec:	f023 0303 	bic.w	r3, r3, #3
 8010cf0:	f043 0302 	orr.w	r3, r3, #2
 8010cf4:	81a3      	strh	r3, [r4, #12]
 8010cf6:	e7e3      	b.n	8010cc0 <__smakebuf_r+0xc>
 8010cf8:	89a3      	ldrh	r3, [r4, #12]
 8010cfa:	6020      	str	r0, [r4, #0]
 8010cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d00:	81a3      	strh	r3, [r4, #12]
 8010d02:	9b00      	ldr	r3, [sp, #0]
 8010d04:	6163      	str	r3, [r4, #20]
 8010d06:	9b01      	ldr	r3, [sp, #4]
 8010d08:	6120      	str	r0, [r4, #16]
 8010d0a:	b15b      	cbz	r3, 8010d24 <__smakebuf_r+0x70>
 8010d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d10:	4630      	mov	r0, r6
 8010d12:	f000 f847 	bl	8010da4 <_isatty_r>
 8010d16:	b128      	cbz	r0, 8010d24 <__smakebuf_r+0x70>
 8010d18:	89a3      	ldrh	r3, [r4, #12]
 8010d1a:	f023 0303 	bic.w	r3, r3, #3
 8010d1e:	f043 0301 	orr.w	r3, r3, #1
 8010d22:	81a3      	strh	r3, [r4, #12]
 8010d24:	89a3      	ldrh	r3, [r4, #12]
 8010d26:	431d      	orrs	r5, r3
 8010d28:	81a5      	strh	r5, [r4, #12]
 8010d2a:	e7cf      	b.n	8010ccc <__smakebuf_r+0x18>

08010d2c <memmove>:
 8010d2c:	4288      	cmp	r0, r1
 8010d2e:	b510      	push	{r4, lr}
 8010d30:	eb01 0402 	add.w	r4, r1, r2
 8010d34:	d902      	bls.n	8010d3c <memmove+0x10>
 8010d36:	4284      	cmp	r4, r0
 8010d38:	4623      	mov	r3, r4
 8010d3a:	d807      	bhi.n	8010d4c <memmove+0x20>
 8010d3c:	1e43      	subs	r3, r0, #1
 8010d3e:	42a1      	cmp	r1, r4
 8010d40:	d008      	beq.n	8010d54 <memmove+0x28>
 8010d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d4a:	e7f8      	b.n	8010d3e <memmove+0x12>
 8010d4c:	4402      	add	r2, r0
 8010d4e:	4601      	mov	r1, r0
 8010d50:	428a      	cmp	r2, r1
 8010d52:	d100      	bne.n	8010d56 <memmove+0x2a>
 8010d54:	bd10      	pop	{r4, pc}
 8010d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d5e:	e7f7      	b.n	8010d50 <memmove+0x24>

08010d60 <_close_r>:
 8010d60:	b538      	push	{r3, r4, r5, lr}
 8010d62:	4d06      	ldr	r5, [pc, #24]	; (8010d7c <_close_r+0x1c>)
 8010d64:	2300      	movs	r3, #0
 8010d66:	4604      	mov	r4, r0
 8010d68:	4608      	mov	r0, r1
 8010d6a:	602b      	str	r3, [r5, #0]
 8010d6c:	f7f0 fc3d 	bl	80015ea <_close>
 8010d70:	1c43      	adds	r3, r0, #1
 8010d72:	d102      	bne.n	8010d7a <_close_r+0x1a>
 8010d74:	682b      	ldr	r3, [r5, #0]
 8010d76:	b103      	cbz	r3, 8010d7a <_close_r+0x1a>
 8010d78:	6023      	str	r3, [r4, #0]
 8010d7a:	bd38      	pop	{r3, r4, r5, pc}
 8010d7c:	20004fb8 	.word	0x20004fb8

08010d80 <_fstat_r>:
 8010d80:	b538      	push	{r3, r4, r5, lr}
 8010d82:	4d07      	ldr	r5, [pc, #28]	; (8010da0 <_fstat_r+0x20>)
 8010d84:	2300      	movs	r3, #0
 8010d86:	4604      	mov	r4, r0
 8010d88:	4608      	mov	r0, r1
 8010d8a:	4611      	mov	r1, r2
 8010d8c:	602b      	str	r3, [r5, #0]
 8010d8e:	f7f0 fc38 	bl	8001602 <_fstat>
 8010d92:	1c43      	adds	r3, r0, #1
 8010d94:	d102      	bne.n	8010d9c <_fstat_r+0x1c>
 8010d96:	682b      	ldr	r3, [r5, #0]
 8010d98:	b103      	cbz	r3, 8010d9c <_fstat_r+0x1c>
 8010d9a:	6023      	str	r3, [r4, #0]
 8010d9c:	bd38      	pop	{r3, r4, r5, pc}
 8010d9e:	bf00      	nop
 8010da0:	20004fb8 	.word	0x20004fb8

08010da4 <_isatty_r>:
 8010da4:	b538      	push	{r3, r4, r5, lr}
 8010da6:	4d06      	ldr	r5, [pc, #24]	; (8010dc0 <_isatty_r+0x1c>)
 8010da8:	2300      	movs	r3, #0
 8010daa:	4604      	mov	r4, r0
 8010dac:	4608      	mov	r0, r1
 8010dae:	602b      	str	r3, [r5, #0]
 8010db0:	f7f0 fc37 	bl	8001622 <_isatty>
 8010db4:	1c43      	adds	r3, r0, #1
 8010db6:	d102      	bne.n	8010dbe <_isatty_r+0x1a>
 8010db8:	682b      	ldr	r3, [r5, #0]
 8010dba:	b103      	cbz	r3, 8010dbe <_isatty_r+0x1a>
 8010dbc:	6023      	str	r3, [r4, #0]
 8010dbe:	bd38      	pop	{r3, r4, r5, pc}
 8010dc0:	20004fb8 	.word	0x20004fb8

08010dc4 <_lseek_r>:
 8010dc4:	b538      	push	{r3, r4, r5, lr}
 8010dc6:	4d07      	ldr	r5, [pc, #28]	; (8010de4 <_lseek_r+0x20>)
 8010dc8:	4604      	mov	r4, r0
 8010dca:	4608      	mov	r0, r1
 8010dcc:	4611      	mov	r1, r2
 8010dce:	2200      	movs	r2, #0
 8010dd0:	602a      	str	r2, [r5, #0]
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	f7f0 fc30 	bl	8001638 <_lseek>
 8010dd8:	1c43      	adds	r3, r0, #1
 8010dda:	d102      	bne.n	8010de2 <_lseek_r+0x1e>
 8010ddc:	682b      	ldr	r3, [r5, #0]
 8010dde:	b103      	cbz	r3, 8010de2 <_lseek_r+0x1e>
 8010de0:	6023      	str	r3, [r4, #0]
 8010de2:	bd38      	pop	{r3, r4, r5, pc}
 8010de4:	20004fb8 	.word	0x20004fb8

08010de8 <_read_r>:
 8010de8:	b538      	push	{r3, r4, r5, lr}
 8010dea:	4d07      	ldr	r5, [pc, #28]	; (8010e08 <_read_r+0x20>)
 8010dec:	4604      	mov	r4, r0
 8010dee:	4608      	mov	r0, r1
 8010df0:	4611      	mov	r1, r2
 8010df2:	2200      	movs	r2, #0
 8010df4:	602a      	str	r2, [r5, #0]
 8010df6:	461a      	mov	r2, r3
 8010df8:	f7f0 fbbe 	bl	8001578 <_read>
 8010dfc:	1c43      	adds	r3, r0, #1
 8010dfe:	d102      	bne.n	8010e06 <_read_r+0x1e>
 8010e00:	682b      	ldr	r3, [r5, #0]
 8010e02:	b103      	cbz	r3, 8010e06 <_read_r+0x1e>
 8010e04:	6023      	str	r3, [r4, #0]
 8010e06:	bd38      	pop	{r3, r4, r5, pc}
 8010e08:	20004fb8 	.word	0x20004fb8

08010e0c <_write_r>:
 8010e0c:	b538      	push	{r3, r4, r5, lr}
 8010e0e:	4d07      	ldr	r5, [pc, #28]	; (8010e2c <_write_r+0x20>)
 8010e10:	4604      	mov	r4, r0
 8010e12:	4608      	mov	r0, r1
 8010e14:	4611      	mov	r1, r2
 8010e16:	2200      	movs	r2, #0
 8010e18:	602a      	str	r2, [r5, #0]
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	f7f0 fbc9 	bl	80015b2 <_write>
 8010e20:	1c43      	adds	r3, r0, #1
 8010e22:	d102      	bne.n	8010e2a <_write_r+0x1e>
 8010e24:	682b      	ldr	r3, [r5, #0]
 8010e26:	b103      	cbz	r3, 8010e2a <_write_r+0x1e>
 8010e28:	6023      	str	r3, [r4, #0]
 8010e2a:	bd38      	pop	{r3, r4, r5, pc}
 8010e2c:	20004fb8 	.word	0x20004fb8

08010e30 <memcpy>:
 8010e30:	440a      	add	r2, r1
 8010e32:	4291      	cmp	r1, r2
 8010e34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010e38:	d100      	bne.n	8010e3c <memcpy+0xc>
 8010e3a:	4770      	bx	lr
 8010e3c:	b510      	push	{r4, lr}
 8010e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e46:	4291      	cmp	r1, r2
 8010e48:	d1f9      	bne.n	8010e3e <memcpy+0xe>
 8010e4a:	bd10      	pop	{r4, pc}

08010e4c <_malloc_usable_size_r>:
 8010e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e50:	1f18      	subs	r0, r3, #4
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	bfbc      	itt	lt
 8010e56:	580b      	ldrlt	r3, [r1, r0]
 8010e58:	18c0      	addlt	r0, r0, r3
 8010e5a:	4770      	bx	lr

08010e5c <_init>:
 8010e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e5e:	bf00      	nop
 8010e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e62:	bc08      	pop	{r3}
 8010e64:	469e      	mov	lr, r3
 8010e66:	4770      	bx	lr

08010e68 <_fini>:
 8010e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e6a:	bf00      	nop
 8010e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e6e:	bc08      	pop	{r3}
 8010e70:	469e      	mov	lr, r3
 8010e72:	4770      	bx	lr
