
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b50  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  08011d50  08011d50  00021d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080127d0  080127d0  0003016c  2**0
                  CONTENTS
  4 .ARM          00000008  080127d0  080127d0  000227d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080127d8  080127d8  0003016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080127d8  080127d8  000227d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080127dc  080127dc  000227dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  080127e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004c5a4  2000016c  0801294c  0003016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2004c710  0801294c  0003c710  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003019a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022fef  00000000  00000000  000301dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051b1  00000000  00000000  000531cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c28  00000000  00000000  00058380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000157c  00000000  00000000  00059fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ed42  00000000  00000000  0005b524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000267ac  00000000  00000000  0008a266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001031bd  00000000  00000000  000b0a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e54  00000000  00000000  001b3bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001bba24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000016c 	.word	0x2000016c
 800021c:	00000000 	.word	0x00000000
 8000220:	08011d38 	.word	0x08011d38

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000170 	.word	0x20000170
 800023c:	08011d38 	.word	0x08011d38

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	; 0x58
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 fb9a 	bl	8001d1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 fa2d 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fb81 	bl	8000cf0 <MX_GPIO_Init>
  MX_CAN1_Init();
 80005ee:	f000 fa91 	bl	8000b14 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 fb27 	bl	8000c44 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80005f6:	f00f fc7b 	bl	800fef0 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80005fa:	f000 fac1 	bl	8000b80 <MX_I2C1_Init>
  MX_DMA_Init();
 80005fe:	f000 fb51 	bl	8000ca4 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  DS1307_Init(&hi2c1);
 8000602:	48bd      	ldr	r0, [pc, #756]	; (80008f8 <main+0x31c>)
 8000604:	f001 fa9a 	bl	8001b3c <DS1307_Init>
		RESET_STATE,
		POWER_OFF
	} state_t;

	//Starting state is PERIPHERAL_INIT
	state_t state = TURN_ON;
 8000608:	2300      	movs	r3, #0
 800060a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t byteswritten; /* File write/read counts */
	uint8_t writing_failed = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 8000614:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000618:	2b0c      	cmp	r3, #12
 800061a:	f200 81eb 	bhi.w	80009f4 <main+0x418>
 800061e:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <main+0x48>)
 8000620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000624:	08000659 	.word	0x08000659
 8000628:	08000683 	.word	0x08000683
 800062c:	080006ff 	.word	0x080006ff
 8000630:	0800077f 	.word	0x0800077f
 8000634:	08000a07 	.word	0x08000a07
 8000638:	08000a07 	.word	0x08000a07
 800063c:	080007b3 	.word	0x080007b3
 8000640:	08000a07 	.word	0x08000a07
 8000644:	08000863 	.word	0x08000863
 8000648:	08000a07 	.word	0x08000a07
 800064c:	08000887 	.word	0x08000887
 8000650:	0800099b 	.word	0x0800099b
 8000654:	080009df 	.word	0x080009df
		 * Transition out:
		 * 	If power switch is set to on position -> PERIFPHERAL_INIT
		 * 	else (power switch is set to off) -> POWER_OFF
		 */
		case TURN_ON:
			POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 8000658:	2102      	movs	r1, #2
 800065a:	48a8      	ldr	r0, [pc, #672]	; (80008fc <main+0x320>)
 800065c:	f003 f86e 	bl	800373c <HAL_GPIO_ReadPin>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	4ba6      	ldr	r3, [pc, #664]	; (8000900 <main+0x324>)
 8000666:	701a      	strb	r2, [r3, #0]
			state = POWER_STATE ? PERIPHERAL_INIT : POWER_OFF;
 8000668:	4ba5      	ldr	r3, [pc, #660]	; (8000900 <main+0x324>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <main+0x98>
 8000670:	2301      	movs	r3, #1
 8000672:	e000      	b.n	8000676 <main+0x9a>
 8000674:	230c      	movs	r3, #12
 8000676:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			NEW_LOG_FLAG = 0;
 800067a:	4ba2      	ldr	r3, [pc, #648]	; (8000904 <main+0x328>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
			break;
 8000680:	e1c8      	b.n	8000a14 <main+0x438>
		 * Transition out:
		 * 	Always -> CREATE_LOG_FILE
		 */
		case PERIPHERAL_INIT:
#ifdef VERBOSE_DEBUGGING
			printf("Initializing with %d buffers storing %d messages\r\n", NUM_BUFFERS, CAN_MESSAGES_PER_BUFFER);
 8000682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000686:	2110      	movs	r1, #16
 8000688:	489f      	ldr	r0, [pc, #636]	; (8000908 <main+0x32c>)
 800068a:	f010 fb69 	bl	8010d60 <iprintf>
#endif
			// Reset both buffers
			for (int buffer_num = 0; buffer_num < NUM_BUFFERS; buffer_num++) {
 800068e:	2300      	movs	r3, #0
 8000690:	653b      	str	r3, [r7, #80]	; 0x50
 8000692:	e010      	b.n	80006b6 <main+0xda>
				data_buffer[buffer_num][0] = '\00';
 8000694:	4a9d      	ldr	r2, [pc, #628]	; (800090c <main+0x330>)
 8000696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000698:	f644 2101 	movw	r1, #18945	; 0x4a01
 800069c:	fb01 f303 	mul.w	r3, r1, r3
 80006a0:	4413      	add	r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
				buffer_fill_level[buffer_num] = 0;
 80006a6:	4a9a      	ldr	r2, [pc, #616]	; (8000910 <main+0x334>)
 80006a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006aa:	2100      	movs	r1, #0
 80006ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int buffer_num = 0; buffer_num < NUM_BUFFERS; buffer_num++) {
 80006b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006b2:	3301      	adds	r3, #1
 80006b4:	653b      	str	r3, [r7, #80]	; 0x50
 80006b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006b8:	2b0f      	cmp	r3, #15
 80006ba:	ddeb      	ble.n	8000694 <main+0xb8>
			}

			buffer_writing_to = 0;
 80006bc:	4b95      	ldr	r3, [pc, #596]	; (8000914 <main+0x338>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
			buffer_reading_from = 0;
 80006c2:	4b95      	ldr	r3, [pc, #596]	; (8000918 <main+0x33c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
			CAN_notifications_deactivated = 0;
 80006c8:	4b94      	ldr	r3, [pc, #592]	; (800091c <main+0x340>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]

			CANRX_ERROR_T ERROR_CODE = INIT_PERIPHERALS();
 80006ce:	f000 fc0b 	bl	8000ee8 <INIT_PERIPHERALS>
 80006d2:	4603      	mov	r3, r0
 80006d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if (ERROR_CODE != PERIPHERAL_INIT_SUCCESSFUL) {
 80006d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80006dc:	2b07      	cmp	r3, #7
 80006de:	d00a      	beq.n	80006f6 <main+0x11a>
				HAL_CAN_Stop(&hcan1);
 80006e0:	488f      	ldr	r0, [pc, #572]	; (8000920 <main+0x344>)
 80006e2:	f001 fdc7 	bl	8002274 <HAL_CAN_Stop>
				HAL_Delay(1000);
 80006e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ea:	f001 fb73 	bl	8001dd4 <HAL_Delay>
				state = TURN_ON;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80006f4:	e18e      	b.n	8000a14 <main+0x438>
			}
			else {
				state = CREATE_LOG_FILE;
 80006f6:	2302      	movs	r3, #2
 80006f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			break;
 80006fc:	e18a      	b.n	8000a14 <main+0x438>
		 * Transition out:
		 * 	Always -> STANDBY
		 */
		case CREATE_LOG_FILE:
#ifdef VERBOSE_DEBUGGING
			printf("Creating new log file...\r\n");
 80006fe:	4889      	ldr	r0, [pc, #548]	; (8000924 <main+0x348>)
 8000700:	f010 fb94 	bl	8010e2c <puts>
#endif
			if (CREATE_NEW_LOG() != LOG_CREATION_SUCCESSFUL) {
 8000704:	f000 fd04 	bl	8001110 <CREATE_NEW_LOG>
 8000708:	4603      	mov	r3, r0
 800070a:	2b08      	cmp	r3, #8
 800070c:	d003      	beq.n	8000716 <main+0x13a>
				state = RESET_STATE;
 800070e:	230b      	movs	r3, #11
 8000710:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8000714:	e17e      	b.n	8000a14 <main+0x438>
			}
			// Starting CANRx interrupts
			if (HAL_CAN_ActivateNotification(&hcan1,
 8000716:	2102      	movs	r1, #2
 8000718:	4881      	ldr	r0, [pc, #516]	; (8000920 <main+0x344>)
 800071a:	f001 ff2e 	bl	800257a <HAL_CAN_ActivateNotification>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d006      	beq.n	8000732 <main+0x156>
					CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
				/* Notification Error */
#ifdef VERBOSE_DEBUGGING
				printf("Failed to activate CAN\r\n");
 8000724:	4880      	ldr	r0, [pc, #512]	; (8000928 <main+0x34c>)
 8000726:	f010 fb81 	bl	8010e2c <puts>
#endif
				state = RESET_STATE;
 800072a:	230b      	movs	r3, #11
 800072c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8000730:	e170      	b.n	8000a14 <main+0x438>
			}

			// Turn Green LED on (turns Red LED off)
#ifdef VERBOSE_DEBUGGING
			printf("Ready to receive messages!\r\n");
 8000732:	487e      	ldr	r0, [pc, #504]	; (800092c <main+0x350>)
 8000734:	f010 fb7a 	bl	8010e2c <puts>
#endif

			// purge FIFO in case there are old messages
			while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8000738:	e011      	b.n	800075e <main+0x182>
				CAN_RxHeaderTypeDef RxHeader;
				uint8_t rcvd_msg[8];
				if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK) {
 800073a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000742:	2100      	movs	r1, #0
 8000744:	4876      	ldr	r0, [pc, #472]	; (8000920 <main+0x344>)
 8000746:	f001 fdde 	bl	8002306 <HAL_CAN_GetRxMessage>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d006      	beq.n	800075e <main+0x182>
#ifdef VERBOSE_DEBUGGING
						printf("Failed to initialize CAN FIFO\r\n");
 8000750:	4877      	ldr	r0, [pc, #476]	; (8000930 <main+0x354>)
 8000752:	f010 fb6b 	bl	8010e2c <puts>
#endif
						state = RESET_STATE;
 8000756:	230b      	movs	r3, #11
 8000758:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800075c:	e006      	b.n	800076c <main+0x190>
			while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800075e:	2100      	movs	r1, #0
 8000760:	486f      	ldr	r0, [pc, #444]	; (8000920 <main+0x344>)
 8000762:	f001 fee2 	bl	800252a <HAL_CAN_GetRxFifoFillLevel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1e6      	bne.n	800073a <main+0x15e>
						break;
					}
			}

			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_SET); // Successful LED
 800076c:	2201      	movs	r2, #1
 800076e:	2101      	movs	r1, #1
 8000770:	4862      	ldr	r0, [pc, #392]	; (80008fc <main+0x320>)
 8000772:	f002 fffb 	bl	800376c <HAL_GPIO_WritePin>

			state = STANDBY;
 8000776:	2303      	movs	r3, #3
 8000778:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
 800077c:	e14a      	b.n	8000a14 <main+0x438>
		 * 	If power switch is set to off position or the new file button is clicked -> RESET_STATE
		 * 	Else if the current buffer is filled -> SD_CARD_WRITE
		 * 	Else -> STANDBY
		 */
		case STANDBY:
			if (!POWER_STATE || NEW_LOG_FLAG) //Power switch is off or new log file
 800077e:	4b60      	ldr	r3, [pc, #384]	; (8000900 <main+0x324>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <main+0x1b2>
 8000786:	4b5f      	ldr	r3, [pc, #380]	; (8000904 <main+0x328>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d003      	beq.n	8000796 <main+0x1ba>
				state = RESET_STATE;
 800078e:	230b      	movs	r3, #11
 8000790:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			else if (buffer_fill_level[buffer_reading_from] == CAN_MESSAGES_PER_BUFFER) //Buffer is filled
				state = SD_CARD_WRITE;
			break;
 8000794:	e139      	b.n	8000a0a <main+0x42e>
			else if (buffer_fill_level[buffer_reading_from] == CAN_MESSAGES_PER_BUFFER) //Buffer is filled
 8000796:	4b60      	ldr	r3, [pc, #384]	; (8000918 <main+0x33c>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	4b5c      	ldr	r3, [pc, #368]	; (8000910 <main+0x334>)
 800079e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007a6:	f040 8130 	bne.w	8000a0a <main+0x42e>
				state = SD_CARD_WRITE;
 80007aa:	2306      	movs	r3, #6
 80007ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
 80007b0:	e12b      	b.n	8000a0a <main+0x42e>
		 *
		 * Transition out:
		 *	Always -> USB_TRANSMIT
		 */
		case SD_CARD_WRITE:
			if ((fresult_rc = f_write(&SDFile, data_buffer[buffer_reading_from], BUFFER_TOTAL_SIZE, (void*) &byteswritten)) != FR_OK || byteswritten == 0) {
 80007b2:	4b59      	ldr	r3, [pc, #356]	; (8000918 <main+0x33c>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	461a      	mov	r2, r3
 80007b8:	f644 2301 	movw	r3, #18945	; 0x4a01
 80007bc:	fb02 f303 	mul.w	r3, r2, r3
 80007c0:	4a52      	ldr	r2, [pc, #328]	; (800090c <main+0x330>)
 80007c2:	1899      	adds	r1, r3, r2
 80007c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007c8:	f44f 4294 	mov.w	r2, #18944	; 0x4a00
 80007cc:	4859      	ldr	r0, [pc, #356]	; (8000934 <main+0x358>)
 80007ce:	f00e ff0f 	bl	800f5f0 <f_write>
 80007d2:	4603      	mov	r3, r0
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b58      	ldr	r3, [pc, #352]	; (8000938 <main+0x35c>)
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	4b57      	ldr	r3, [pc, #348]	; (8000938 <main+0x35c>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d102      	bne.n	80007e8 <main+0x20c>
 80007e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d124      	bne.n	8000832 <main+0x256>
#ifdef VERBOSE_DEBUGGING
				printf("Writing Failed with rc = %d\r\n", fresult_rc);
 80007e8:	4b53      	ldr	r3, [pc, #332]	; (8000938 <main+0x35c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	4853      	ldr	r0, [pc, #332]	; (800093c <main+0x360>)
 80007f0:	f010 fab6 	bl	8010d60 <iprintf>
#endif
				writing_failed++;
 80007f4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80007f8:	3301      	adds	r3, #1
 80007fa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

				if (writing_failed == 3) {
 80007fe:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000802:	2b03      	cmp	r3, #3
 8000804:	d106      	bne.n	8000814 <main+0x238>
#ifdef VERBOSE_DEBUGGING
					printf("Writing Failed 3 Consecutive Times. Rebooting...\r\n");
 8000806:	484e      	ldr	r0, [pc, #312]	; (8000940 <main+0x364>)
 8000808:	f010 fb10 	bl	8010e2c <puts>
#endif
					state = RESET_STATE;
 800080c:	230b      	movs	r3, #11
 800080e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					break;
 8000812:	e0ff      	b.n	8000a14 <main+0x438>
				}

				if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8000814:	2104      	movs	r1, #4
 8000816:	4839      	ldr	r0, [pc, #228]	; (80008fc <main+0x320>)
 8000818:	f002 ff90 	bl	800373c <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	2b01      	cmp	r3, #1
 8000820:	f000 80f5 	beq.w	8000a0e <main+0x432>
			    {
#ifdef VERBOSE_DEBUGGING
						printf("SD Card Missing.\r\n");
 8000824:	4847      	ldr	r0, [pc, #284]	; (8000944 <main+0x368>)
 8000826:	f010 fb01 	bl	8010e2c <puts>
#endif
						state = RESET_STATE;
 800082a:	230b      	movs	r3, #11
 800082c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						break;
 8000830:	e0f0      	b.n	8000a14 <main+0x438>

				break;

			}

			if ((fresult_rc = f_sync(&SDFile)) != FR_OK) {
 8000832:	4840      	ldr	r0, [pc, #256]	; (8000934 <main+0x358>)
 8000834:	f00f f851 	bl	800f8da <f_sync>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	4b3e      	ldr	r3, [pc, #248]	; (8000938 <main+0x35c>)
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <main+0x35c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d005      	beq.n	8000854 <main+0x278>
#ifdef VERBOSE_DEBUGGING
				printf("Sync Failed with rc = %d!\r\n", fresult_rc);
 8000848:	4b3b      	ldr	r3, [pc, #236]	; (8000938 <main+0x35c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	483e      	ldr	r0, [pc, #248]	; (8000948 <main+0x36c>)
 8000850:	f010 fa86 	bl	8010d60 <iprintf>
#endif
			}

			writing_failed = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			state = USB_TRANSMIT;
 800085a:	2308      	movs	r3, #8
 800085c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
 8000860:	e0d8      	b.n	8000a14 <main+0x438>
		 *
		 * Transition out:
		 *	Always -> RESET_BUFFER
		 */
		case USB_TRANSMIT:
			CDC_Transmit_FS((uint8_t *) data_buffer[buffer_reading_from], BUFFER_TOTAL_SIZE);
 8000862:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <main+0x33c>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	f644 2301 	movw	r3, #18945	; 0x4a01
 800086c:	fb02 f303 	mul.w	r3, r2, r3
 8000870:	4a26      	ldr	r2, [pc, #152]	; (800090c <main+0x330>)
 8000872:	4413      	add	r3, r2
 8000874:	f44f 4194 	mov.w	r1, #18944	; 0x4a00
 8000878:	4618      	mov	r0, r3
 800087a:	f00f fbf7 	bl	801006c <CDC_Transmit_FS>
			state = RESET_BUFFER;
 800087e:	230a      	movs	r3, #10
 8000880:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
 8000884:	e0c6      	b.n	8000a14 <main+0x438>
		 * Transition out:
		 *	Always -> STANDBY
		 */
		case RESET_BUFFER:
			// Reset buffer that was just sent to SD and USB
			data_buffer[buffer_reading_from][0] = '\00';
 8000886:	4b24      	ldr	r3, [pc, #144]	; (8000918 <main+0x33c>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4619      	mov	r1, r3
 800088c:	4a1f      	ldr	r2, [pc, #124]	; (800090c <main+0x330>)
 800088e:	f644 2301 	movw	r3, #18945	; 0x4a01
 8000892:	fb01 f303 	mul.w	r3, r1, r3
 8000896:	4413      	add	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[buffer_reading_from] = 0;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <main+0x33c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <main+0x334>)
 80008a4:	2100      	movs	r1, #0
 80008a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			buffer_reading_from = (buffer_reading_from + 1) % NUM_BUFFERS;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <main+0x33c>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	425a      	negs	r2, r3
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	f002 020f 	and.w	r2, r2, #15
 80008ba:	bf58      	it	pl
 80008bc:	4253      	negpl	r3, r2
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <main+0x33c>)
 80008c2:	701a      	strb	r2, [r3, #0]
//			printf("------------------------------------------\r\n");
//			for (int buff_num = 0; buff_num < NUM_BUFFERS; buff_num++) {
//				printf("Buffer[%d]: %d\r\n", buff_num, buffer_fill_level[buff_num]);
//			}

			if (CAN_notifications_deactivated) {
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <main+0x340>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d060      	beq.n	800098e <main+0x3b2>
#ifdef VERBOSE_DEBUGGING
				printf("Resuming receive...\r\n");
 80008cc:	481f      	ldr	r0, [pc, #124]	; (800094c <main+0x370>)
 80008ce:	f010 faad 	bl	8010e2c <puts>
#endif
				// purge FIFO in case there are old messages
				while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80008d2:	e03d      	b.n	8000950 <main+0x374>
					CAN_RxHeaderTypeDef RxHeader;
					uint8_t rcvd_msg[8];
					if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK) {
 80008d4:	463b      	mov	r3, r7
 80008d6:	f107 0208 	add.w	r2, r7, #8
 80008da:	2100      	movs	r1, #0
 80008dc:	4810      	ldr	r0, [pc, #64]	; (8000920 <main+0x344>)
 80008de:	f001 fd12 	bl	8002306 <HAL_CAN_GetRxMessage>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d033      	beq.n	8000950 <main+0x374>
#ifdef VERBOSE_DEBUGGING
						printf("Failed to initialize CAN FIFO\r\n");
 80008e8:	4811      	ldr	r0, [pc, #68]	; (8000930 <main+0x354>)
 80008ea:	f010 fa9f 	bl	8010e2c <puts>
#endif
						state = RESET_STATE;
 80008ee:	230b      	movs	r3, #11
 80008f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80008f4:	e033      	b.n	800095e <main+0x382>
 80008f6:	bf00      	nop
 80008f8:	200001b0 	.word	0x200001b0
 80008fc:	40021800 	.word	0x40021800
 8000900:	200004e8 	.word	0x200004e8
 8000904:	200004e9 	.word	0x200004e9
 8000908:	08011d5c 	.word	0x08011d5c
 800090c:	200004ec 	.word	0x200004ec
 8000910:	2004a4fc 	.word	0x2004a4fc
 8000914:	2004a51c 	.word	0x2004a51c
 8000918:	2004a51d 	.word	0x2004a51d
 800091c:	2004a51e 	.word	0x2004a51e
 8000920:	20000188 	.word	0x20000188
 8000924:	08011d90 	.word	0x08011d90
 8000928:	08011dac 	.word	0x08011dac
 800092c:	08011dc4 	.word	0x08011dc4
 8000930:	08011de0 	.word	0x08011de0
 8000934:	2004a770 	.word	0x2004a770
 8000938:	2004a51f 	.word	0x2004a51f
 800093c:	08011e00 	.word	0x08011e00
 8000940:	08011e20 	.word	0x08011e20
 8000944:	08011e54 	.word	0x08011e54
 8000948:	08011e68 	.word	0x08011e68
 800094c:	08011e84 	.word	0x08011e84
				while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8000950:	2100      	movs	r1, #0
 8000952:	4831      	ldr	r0, [pc, #196]	; (8000a18 <main+0x43c>)
 8000954:	f001 fde9 	bl	800252a <HAL_CAN_GetRxFifoFillLevel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1ba      	bne.n	80008d4 <main+0x2f8>
						break;
					}
				}

				total_ticks_with_can_deactivated += HAL_GetTick() - tick_when_can_deactivated_last;
 800095e:	f001 fa2d 	bl	8001dbc <HAL_GetTick>
 8000962:	4602      	mov	r2, r0
 8000964:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <main+0x440>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	1ad2      	subs	r2, r2, r3
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <main+0x444>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a2b      	ldr	r2, [pc, #172]	; (8000a20 <main+0x444>)
 8000972:	6013      	str	r3, [r2, #0]

#ifdef VERBOSE_DEBUGGING
				printf("Total ticks with CAN notifications deactivated: %ld\r\n", total_ticks_with_can_deactivated);
 8000974:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <main+0x444>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	482a      	ldr	r0, [pc, #168]	; (8000a24 <main+0x448>)
 800097c:	f010 f9f0 	bl	8010d60 <iprintf>
#endif

				CAN_notifications_deactivated = 0;
 8000980:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <main+0x44c>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
				HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000986:	2102      	movs	r1, #2
 8000988:	4823      	ldr	r0, [pc, #140]	; (8000a18 <main+0x43c>)
 800098a:	f001 fdf6 	bl	800257a <HAL_CAN_ActivateNotification>
			}

			byteswritten = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	64bb      	str	r3, [r7, #72]	; 0x48

			state = STANDBY;
 8000992:	2303      	movs	r3, #3
 8000994:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
 8000998:	e03c      	b.n	8000a14 <main+0x438>
		 *	If power switch is in off position -> POWER_OFF
		 *	Else (button was pressed) -> TURN_ON
		 */
		case RESET_STATE:
			// Turn off CAN interrupt
			HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800099a:	2102      	movs	r1, #2
 800099c:	481e      	ldr	r0, [pc, #120]	; (8000a18 <main+0x43c>)
 800099e:	f001 fe12 	bl	80025c6 <HAL_CAN_DeactivateNotification>
			HAL_CAN_Stop(&hcan1);
 80009a2:	481d      	ldr	r0, [pc, #116]	; (8000a18 <main+0x43c>)
 80009a4:	f001 fc66 	bl	8002274 <HAL_CAN_Stop>

			// Turn Red LED on (Green LED turns off)
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_RESET); //Red LED
 80009a8:	2200      	movs	r2, #0
 80009aa:	2101      	movs	r1, #1
 80009ac:	481f      	ldr	r0, [pc, #124]	; (8000a2c <main+0x450>)
 80009ae:	f002 fedd 	bl	800376c <HAL_GPIO_WritePin>

			f_close(&SDFile);
 80009b2:	481f      	ldr	r0, [pc, #124]	; (8000a30 <main+0x454>)
 80009b4:	f00f f80f 	bl	800f9d6 <f_close>
			f_mount(0, (TCHAR const*) NULL, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	2000      	movs	r0, #0
 80009be:	f00e fc13 	bl	800f1e8 <f_mount>

			if (!POWER_STATE) {
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <main+0x458>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d105      	bne.n	80009d6 <main+0x3fa>
				state = POWER_OFF;
 80009ca:	230c      	movs	r3, #12
 80009cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef VERBOSE_DEBUGGING
				printf("Turning off!\r\n");
 80009d0:	4819      	ldr	r0, [pc, #100]	; (8000a38 <main+0x45c>)
 80009d2:	f010 fa2b 	bl	8010e2c <puts>
#endif
			}

			state = TURN_ON; // button was pressed
 80009d6:	2300      	movs	r3, #0
 80009d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
 80009dc:	e01a      	b.n	8000a14 <main+0x438>
		 * Transition out:
		 *	If power switch is in the on position -> TURN_ON
		 *	Else -> POWER_OFF
		 */
		case POWER_OFF:
			if (POWER_STATE) {
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <main+0x458>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d015      	beq.n	8000a12 <main+0x436>
				state = TURN_ON;
 80009e6:	2300      	movs	r3, #0
 80009e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

#ifdef VERBOSE_DEBUGGING
				printf("\r\nTurning back on!\r\n");
 80009ec:	4813      	ldr	r0, [pc, #76]	; (8000a3c <main+0x460>)
 80009ee:	f010 fa1d 	bl	8010e2c <puts>
#endif
			}
			break;
 80009f2:	e00e      	b.n	8000a12 <main+0x436>

		default:
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin,
 80009f4:	2200      	movs	r2, #0
 80009f6:	2101      	movs	r1, #1
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <main+0x450>)
 80009fa:	f002 feb7 	bl	800376c <HAL_GPIO_WritePin>
								GPIO_PIN_RESET); // Red LED

#ifdef VERBOSE_DEBUGGING
			printf("CAN logger in unknown state!\r\n");
 80009fe:	4810      	ldr	r0, [pc, #64]	; (8000a40 <main+0x464>)
 8000a00:	f010 fa14 	bl	8010e2c <puts>
#endif
			break;
 8000a04:	e006      	b.n	8000a14 <main+0x438>
			break;
 8000a06:	bf00      	nop
 8000a08:	e604      	b.n	8000614 <main+0x38>
			break;
 8000a0a:	bf00      	nop
 8000a0c:	e602      	b.n	8000614 <main+0x38>
				break;
 8000a0e:	bf00      	nop
 8000a10:	e600      	b.n	8000614 <main+0x38>
			break;
 8000a12:	bf00      	nop
		switch (state) {
 8000a14:	e5fe      	b.n	8000614 <main+0x38>
 8000a16:	bf00      	nop
 8000a18:	20000188 	.word	0x20000188
 8000a1c:	2004a520 	.word	0x2004a520
 8000a20:	2004a524 	.word	0x2004a524
 8000a24:	08011e9c 	.word	0x08011e9c
 8000a28:	2004a51e 	.word	0x2004a51e
 8000a2c:	40021800 	.word	0x40021800
 8000a30:	2004a770 	.word	0x2004a770
 8000a34:	200004e8 	.word	0x200004e8
 8000a38:	08011ed4 	.word	0x08011ed4
 8000a3c:	08011ee4 	.word	0x08011ee4
 8000a40:	08011ef8 	.word	0x08011ef8

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b094      	sub	sp, #80	; 0x50
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	2234      	movs	r2, #52	; 0x34
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f010 fa01 	bl	8010e5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <SystemClock_Config+0xc8>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a27      	ldr	r2, [pc, #156]	; (8000b0c <SystemClock_Config+0xc8>)
 8000a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <SystemClock_Config+0xc8>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a80:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a88:	4a21      	ldr	r2, [pc, #132]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ab4:	2360      	movs	r3, #96	; 0x60
 8000ab6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000abc:	2304      	movs	r3, #4
 8000abe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 fec3 	bl	8005854 <HAL_RCC_OscConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ad4:	f000 fc62 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad8:	230f      	movs	r3, #15
 8000ada:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000adc:	2302      	movs	r3, #2
 8000ade:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	2101      	movs	r1, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f005 f95b 	bl	8005db0 <HAL_RCC_ClockConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b00:	f000 fc4c 	bl	800139c <Error_Handler>
  }
}
 8000b04:	bf00      	nop
 8000b06:	3750      	adds	r7, #80	; 0x50
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40007000 	.word	0x40007000

08000b14 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b1a:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <MX_CAN1_Init+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b20:	2203      	movs	r2, #3
 8000b22:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b32:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000b36:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b3e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_CAN1_Init+0x64>)
 8000b66:	f001 f959 	bl	8001e1c <HAL_CAN_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000b70:	f000 fc14 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000188 	.word	0x20000188
 8000b7c:	40006400 	.word	0x40006400

08000b80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b86:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <MX_I2C1_Init+0x78>)
 8000b88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <MX_I2C1_Init+0x7c>)
 8000b8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bba:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bbc:	f002 fe14 	bl	80037e8 <HAL_I2C_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bc6:	f000 fbe9 	bl	800139c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bce:	f003 faf1 	bl	80041b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bd8:	f000 fbe0 	bl	800139c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000be0:	f003 fb33 	bl	800424a <HAL_I2CEx_ConfigDigitalFilter>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bea:	f000 fbd7 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200001b0 	.word	0x200001b0
 8000bf8:	40005400 	.word	0x40005400
 8000bfc:	00506682 	.word	0x00506682

08000c00 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static HAL_StatusTypeDef MX_SDMMC1_SD_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <MX_SDMMC1_SD_Init+0x3c>)
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <MX_SDMMC1_SD_Init+0x40>)
 8000c08:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_SDMMC1_SD_Init+0x3c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <MX_SDMMC1_SD_Init+0x3c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_SDMMC1_SD_Init+0x3c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <MX_SDMMC1_SD_Init+0x3c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_SDMMC1_SD_Init+0x3c>)
 8000c24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c28:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <MX_SDMMC1_SD_Init+0x3c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  return HAL_SD_Init(&hsd1);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <MX_SDMMC1_SD_Init+0x3c>)
 8000c32:	f005 ff0b 	bl	8006a4c <HAL_SD_Init>
 8000c36:	4603      	mov	r3, r0
  /* USER CODE END SDMMC1_Init 2 */

}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000204 	.word	0x20000204
 8000c40:	40012c00 	.word	0x40012c00

08000c44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c4a:	4a15      	ldr	r2, [pc, #84]	; (8000ca0 <MX_USART3_UART_Init+0x5c>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c88:	f007 f808 	bl	8007c9c <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c92:	f000 fb83 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000348 	.word	0x20000348
 8000ca0:	40004800 	.word	0x40004800

08000ca4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <MX_DMA_Init+0x48>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <MX_DMA_Init+0x48>)
 8000cb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <MX_DMA_Init+0x48>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	203b      	movs	r0, #59	; 0x3b
 8000cc8:	f001 ffaf 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ccc:	203b      	movs	r0, #59	; 0x3b
 8000cce:	f001 ffc8 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2045      	movs	r0, #69	; 0x45
 8000cd8:	f001 ffa7 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000cdc:	2045      	movs	r0, #69	; 0x45
 8000cde:	f001 ffc0 	bl	8002c62 <HAL_NVIC_EnableIRQ>

}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08e      	sub	sp, #56	; 0x38
 8000cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	4b74      	ldr	r3, [pc, #464]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a73      	ldr	r2, [pc, #460]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b71      	ldr	r3, [pc, #452]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	623b      	str	r3, [r7, #32]
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1e:	4b6e      	ldr	r3, [pc, #440]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a6d      	ldr	r2, [pc, #436]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b6b      	ldr	r3, [pc, #428]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d32:	61fb      	str	r3, [r7, #28]
 8000d34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d36:	4b68      	ldr	r3, [pc, #416]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a67      	ldr	r2, [pc, #412]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d3c:	f043 0320 	orr.w	r3, r3, #32
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b65      	ldr	r3, [pc, #404]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0320 	and.w	r3, r3, #32
 8000d4a:	61bb      	str	r3, [r7, #24]
 8000d4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4e:	4b62      	ldr	r3, [pc, #392]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a61      	ldr	r2, [pc, #388]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b5f      	ldr	r3, [pc, #380]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d66:	4b5c      	ldr	r3, [pc, #368]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a5b      	ldr	r2, [pc, #364]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d6c:	f043 0310 	orr.w	r3, r3, #16
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b59      	ldr	r3, [pc, #356]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0310 	and.w	r3, r3, #16
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	4b56      	ldr	r3, [pc, #344]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a55      	ldr	r2, [pc, #340]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b53      	ldr	r3, [pc, #332]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b50      	ldr	r3, [pc, #320]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a4f      	ldr	r2, [pc, #316]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b4a      	ldr	r3, [pc, #296]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a49      	ldr	r2, [pc, #292]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <MX_GPIO_Init+0x1e8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PokManualReset_GPIO_Port, PokManualReset_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dcc:	4843      	ldr	r0, [pc, #268]	; (8000edc <MX_GPIO_Init+0x1ec>)
 8000dce:	f002 fccd 	bl	800376c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, StatusSignal_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2141      	movs	r1, #65	; 0x41
 8000dd6:	4842      	ldr	r0, [pc, #264]	; (8000ee0 <MX_GPIO_Init+0x1f0>)
 8000dd8:	f002 fcc8 	bl	800376c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PokRESET_Pin */
  GPIO_InitStruct.Pin = PokRESET_Pin;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000de2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PokRESET_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	483a      	ldr	r0, [pc, #232]	; (8000edc <MX_GPIO_Init+0x1ec>)
 8000df4:	f002 faf6 	bl	80033e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PokManualReset_Pin */
  GPIO_InitStruct.Pin = PokManualReset_Pin;
 8000df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PokManualReset_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4832      	ldr	r0, [pc, #200]	; (8000edc <MX_GPIO_Init+0x1ec>)
 8000e12:	f002 fae7 	bl	80033e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : StatusSignal_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = StatusSignal_Pin|USB_PowerSwitchOn_Pin;
 8000e16:	2341      	movs	r3, #65	; 0x41
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	482c      	ldr	r0, [pc, #176]	; (8000ee0 <MX_GPIO_Init+0x1f0>)
 8000e2e:	f002 fad9 	bl	80033e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PowerSwitch_Pin */
  GPIO_InitStruct.Pin = PowerSwitch_Pin;
 8000e32:	2302      	movs	r3, #2
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e36:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PowerSwitch_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	4826      	ldr	r0, [pc, #152]	; (8000ee0 <MX_GPIO_Init+0x1f0>)
 8000e48:	f002 facc 	bl	80033e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e5e:	2306      	movs	r3, #6
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	4619      	mov	r1, r3
 8000e68:	481e      	ldr	r0, [pc, #120]	; (8000ee4 <MX_GPIO_Init+0x1f4>)
 8000e6a:	f002 fabb 	bl	80033e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin|USB_OverCurrent_Pin;
 8000e6e:	2384      	movs	r3, #132	; 0x84
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4817      	ldr	r0, [pc, #92]	; (8000ee0 <MX_GPIO_Init+0x1f0>)
 8000e82:	f002 faaf 	bl	80033e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NewLogBtn_Pin */
  GPIO_InitStruct.Pin = NewLogBtn_Pin;
 8000e86:	2308      	movs	r3, #8
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NewLogBtn_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4811      	ldr	r0, [pc, #68]	; (8000ee0 <MX_GPIO_Init+0x1f0>)
 8000e9c:	f002 faa2 	bl	80033e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2007      	movs	r0, #7
 8000ea6:	f001 fec0 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000eaa:	2007      	movs	r0, #7
 8000eac:	f001 fed9 	bl	8002c62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2009      	movs	r0, #9
 8000eb6:	f001 feb8 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000eba:	2009      	movs	r0, #9
 8000ebc:	f001 fed1 	bl	8002c62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2028      	movs	r0, #40	; 0x28
 8000ec6:	f001 feb0 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000eca:	2028      	movs	r0, #40	; 0x28
 8000ecc:	f001 fec9 	bl	8002c62 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed0:	bf00      	nop
 8000ed2:	3738      	adds	r7, #56	; 0x38
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40021400 	.word	0x40021400
 8000ee0:	40021800 	.word	0x40021800
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <INIT_PERIPHERALS>:

/* USER CODE BEGIN 4 */

static CANRX_ERROR_T INIT_PERIPHERALS(void) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
#ifdef VERBOSE_DEBUGGING
	printf("Initializing Peripherals...\r\n");
 8000eec:	4829      	ldr	r0, [pc, #164]	; (8000f94 <INIT_PERIPHERALS+0xac>)
 8000eee:	f00f ff9d 	bl	8010e2c <puts>
#endif

	 if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	4828      	ldr	r0, [pc, #160]	; (8000f98 <INIT_PERIPHERALS+0xb0>)
 8000ef6:	f002 fc21 	bl	800373c <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d004      	beq.n	8000f0a <INIT_PERIPHERALS+0x22>
    {
#ifdef VERBOSE_DEBUGGING
		 printf("SD Card Missing.\r\n");
 8000f00:	4826      	ldr	r0, [pc, #152]	; (8000f9c <INIT_PERIPHERALS+0xb4>)
 8000f02:	f00f ff93 	bl	8010e2c <puts>
#endif
        return SD_CARD_MISSING;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e042      	b.n	8000f90 <INIT_PERIPHERALS+0xa8>
//	}
//#ifdef VERBOSE_DEBUGGING
//		 printf("DMA Initialization Successful.\r\n");
//#endif

	if (MX_SDMMC1_SD_Init() != HAL_OK) {
 8000f0a:	f7ff fe79 	bl	8000c00 <MX_SDMMC1_SD_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <INIT_PERIPHERALS+0x36>
#ifdef VERBOSE_DEBUGGING
		 printf("SDMMC Initialization Failed.\r\n");
 8000f14:	4822      	ldr	r0, [pc, #136]	; (8000fa0 <INIT_PERIPHERALS+0xb8>)
 8000f16:	f00f ff89 	bl	8010e2c <puts>
#endif
		return SDMMC_INIT_FAILED;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	e038      	b.n	8000f90 <INIT_PERIPHERALS+0xa8>
	}
#ifdef VERBOSE_DEBUGGING
		 printf("SDMMC Initialization Successful.\r\n");
 8000f1e:	4821      	ldr	r0, [pc, #132]	; (8000fa4 <INIT_PERIPHERALS+0xbc>)
 8000f20:	f00f ff84 	bl	8010e2c <puts>
#endif

	if (!MX_FATFS_Init()) {
 8000f24:	f009 fd24 	bl	800a970 <MX_FATFS_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d104      	bne.n	8000f38 <INIT_PERIPHERALS+0x50>
#ifdef VERBOSE_DEBUGGING
		 printf("FATFS Initialization Failed.\r\n");
 8000f2e:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <INIT_PERIPHERALS+0xc0>)
 8000f30:	f00f ff7c 	bl	8010e2c <puts>
#endif
		return FATFS_INIT_FAILED;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e02b      	b.n	8000f90 <INIT_PERIPHERALS+0xa8>
	}
#ifdef VERBOSE_DEBUGGING
		 printf("FATFS Initialization Successful.\r\n");
 8000f38:	481c      	ldr	r0, [pc, #112]	; (8000fac <INIT_PERIPHERALS+0xc4>)
 8000f3a:	f00f ff77 	bl	8010e2c <puts>
#endif
	// Initializing CAN
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000f3e:	481c      	ldr	r0, [pc, #112]	; (8000fb0 <INIT_PERIPHERALS+0xc8>)
 8000f40:	f001 f954 	bl	80021ec <HAL_CAN_Start>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d004      	beq.n	8000f54 <INIT_PERIPHERALS+0x6c>
#ifdef VERBOSE_DEBUGGING
		printf("CAN could not start.\r\n");
 8000f4a:	481a      	ldr	r0, [pc, #104]	; (8000fb4 <INIT_PERIPHERALS+0xcc>)
 8000f4c:	f00f ff6e 	bl	8010e2c <puts>
#endif
		return HAL_CAN_START_FAILED;
 8000f50:	2305      	movs	r3, #5
 8000f52:	e01d      	b.n	8000f90 <INIT_PERIPHERALS+0xa8>
	}
	if (CAN_Filter_Config() != HAL_OK) {
 8000f54:	f000 f8a8 	bl	80010a8 <CAN_Filter_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d004      	beq.n	8000f68 <INIT_PERIPHERALS+0x80>
#ifdef VERBOSE_DEBUGGING
		printf("CAN filter failed to set.\r\n");
 8000f5e:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <INIT_PERIPHERALS+0xd0>)
 8000f60:	f00f ff64 	bl	8010e2c <puts>
#endif
		return CAN_FILTER_CONFIG_FAILED;
 8000f64:	2304      	movs	r3, #4
 8000f66:	e013      	b.n	8000f90 <INIT_PERIPHERALS+0xa8>
	}
#ifdef VERBOSE_DEBUGGING
	printf("CAN initialization succeeded...\r\n");
 8000f68:	4814      	ldr	r0, [pc, #80]	; (8000fbc <INIT_PERIPHERALS+0xd4>)
 8000f6a:	f00f ff5f 	bl	8010e2c <puts>
#endif

	// Mount and Format SD Card
	if (f_mount(&SDFatFS, SDPath, 1) != FR_OK) {
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4913      	ldr	r1, [pc, #76]	; (8000fc0 <INIT_PERIPHERALS+0xd8>)
 8000f72:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <INIT_PERIPHERALS+0xdc>)
 8000f74:	f00e f938 	bl	800f1e8 <f_mount>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d004      	beq.n	8000f88 <INIT_PERIPHERALS+0xa0>
#ifdef VERBOSE_DEBUGGING
		printf("Mounting failed!\r\n");
 8000f7e:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <INIT_PERIPHERALS+0xe0>)
 8000f80:	f00f ff54 	bl	8010e2c <puts>
#endif
		return SD_MOUNTING_FAILED;
 8000f84:	2306      	movs	r3, #6
 8000f86:	e003      	b.n	8000f90 <INIT_PERIPHERALS+0xa8>
	}
#ifdef VERBOSE_DEBUGGING
		printf("SD Mounting Successful...\r\n");
 8000f88:	4810      	ldr	r0, [pc, #64]	; (8000fcc <INIT_PERIPHERALS+0xe4>)
 8000f8a:	f00f ff4f 	bl	8010e2c <puts>
#endif

	return PERIPHERAL_INIT_SUCCESSFUL;
 8000f8e:	2307      	movs	r3, #7
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	08011f18 	.word	0x08011f18
 8000f98:	40021800 	.word	0x40021800
 8000f9c:	08011e54 	.word	0x08011e54
 8000fa0:	08011f38 	.word	0x08011f38
 8000fa4:	08011f58 	.word	0x08011f58
 8000fa8:	08011f7c 	.word	0x08011f7c
 8000fac:	08011f9c 	.word	0x08011f9c
 8000fb0:	20000188 	.word	0x20000188
 8000fb4:	08011fc0 	.word	0x08011fc0
 8000fb8:	08011fd8 	.word	0x08011fd8
 8000fbc:	08011ff4 	.word	0x08011ff4
 8000fc0:	2004a538 	.word	0x2004a538
 8000fc4:	2004a53c 	.word	0x2004a53c
 8000fc8:	08012018 	.word	0x08012018
 8000fcc:	0801202c 	.word	0x0801202c

08000fd0 <Get_and_Append_CAN_Message_to_Buffer>:

void Get_and_Append_CAN_Message_to_Buffer() {
 8000fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd2:	b0a3      	sub	sp, #140	; 0x8c
 8000fd4:	af0a      	add	r7, sp, #40	; 0x28
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_msg[8];

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg)
 8000fd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fda:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000fde:	2100      	movs	r1, #0
 8000fe0:	482b      	ldr	r0, [pc, #172]	; (8001090 <Get_and_Append_CAN_Message_to_Buffer+0xc0>)
 8000fe2:	f001 f990 	bl	8002306 <HAL_CAN_GetRxMessage>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d004      	beq.n	8000ff6 <Get_and_Append_CAN_Message_to_Buffer+0x26>
			!= HAL_OK){
#ifdef VERBOSE_DEBUGGING
		printf("Failed to get CAN message\r\n");
 8000fec:	4829      	ldr	r0, [pc, #164]	; (8001094 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000fee:	f00f ff1d 	bl	8010e2c <puts>
#endif
		Error_Handler();
 8000ff2:	f000 f9d3 	bl	800139c <Error_Handler>

	// snprintf includes the null terminating string
	char encodedData[ENCODED_CAN_SIZE_BYTES+1];

	// consider writing raw bytes
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8000ff6:	f000 fee1 	bl	8001dbc <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ffe:	60fb      	str	r3, [r7, #12]
			"%010ld#%08lX#%02X%02X%02X%02X%02X%02X%02X%02X\n",
			HAL_GetTick(),
			RxHeader.ExtId,
			rcvd_msg[0], rcvd_msg[1], rcvd_msg[2], rcvd_msg[3],
 8001000:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8001004:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8001008:	4604      	mov	r4, r0
			rcvd_msg[0], rcvd_msg[1], rcvd_msg[2], rcvd_msg[3],
 800100a:	f897 003e 	ldrb.w	r0, [r7, #62]	; 0x3e
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 800100e:	4605      	mov	r5, r0
			rcvd_msg[0], rcvd_msg[1], rcvd_msg[2], rcvd_msg[3],
 8001010:	f897 003f 	ldrb.w	r0, [r7, #63]	; 0x3f
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8001014:	4606      	mov	r6, r0
			rcvd_msg[4], rcvd_msg[5], rcvd_msg[6], rcvd_msg[7]);
 8001016:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 800101a:	60b8      	str	r0, [r7, #8]
			rcvd_msg[4], rcvd_msg[5], rcvd_msg[6], rcvd_msg[7]);
 800101c:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8001020:	6078      	str	r0, [r7, #4]
			rcvd_msg[4], rcvd_msg[5], rcvd_msg[6], rcvd_msg[7]);
 8001022:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8001026:	6038      	str	r0, [r7, #0]
			rcvd_msg[4], rcvd_msg[5], rcvd_msg[6], rcvd_msg[7]);
 8001028:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 800102c:	4603      	mov	r3, r0
 800102e:	f107 0014 	add.w	r0, r7, #20
 8001032:	9308      	str	r3, [sp, #32]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	9307      	str	r3, [sp, #28]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	9306      	str	r3, [sp, #24]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	9305      	str	r3, [sp, #20]
 8001040:	9604      	str	r6, [sp, #16]
 8001042:	9503      	str	r5, [sp, #12]
 8001044:	9402      	str	r4, [sp, #8]
 8001046:	9101      	str	r1, [sp, #4]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8001050:	2126      	movs	r1, #38	; 0x26
 8001052:	f00f fd83 	bl	8010b5c <sniprintf>

	strcat(data_buffer[buffer_writing_to], encodedData);
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <Get_and_Append_CAN_Message_to_Buffer+0xcc>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	f644 2301 	movw	r3, #18945	; 0x4a01
 8001060:	fb02 f303 	mul.w	r3, r2, r3
 8001064:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <Get_and_Append_CAN_Message_to_Buffer+0xd0>)
 8001066:	4413      	add	r3, r2
 8001068:	f107 0214 	add.w	r2, r7, #20
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f00f fee4 	bl	8010e3c <strcat>
	buffer_fill_level[buffer_writing_to]++;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <Get_and_Append_CAN_Message_to_Buffer+0xcc>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <Get_and_Append_CAN_Message_to_Buffer+0xd4>)
 800107a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800107e:	3201      	adds	r2, #1
 8001080:	b291      	uxth	r1, r2
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <Get_and_Append_CAN_Message_to_Buffer+0xd4>)
 8001084:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8001088:	bf00      	nop
 800108a:	3764      	adds	r7, #100	; 0x64
 800108c:	46bd      	mov	sp, r7
 800108e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001090:	20000188 	.word	0x20000188
 8001094:	08012048 	.word	0x08012048
 8001098:	08012064 	.word	0x08012064
 800109c:	2004a51c 	.word	0x2004a51c
 80010a0:	200004ec 	.word	0x200004ec
 80010a4:	2004a4fc 	.word	0x2004a4fc

080010a8 <CAN_Filter_Config>:

HAL_StatusTypeDef CAN_Filter_Config(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 80010b2:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 80010b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ba:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80010be:	b29b      	uxth	r3, r3
 80010c0:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 80010c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c4:	0a1a      	lsrs	r2, r3, #8
 80010c6:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010ca:	4013      	ands	r3, r2
 80010cc:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 80010ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d0:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 80010d4:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 80010d6:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 80010d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010da:	0a1a      	lsrs	r2, r3, #8
 80010dc:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	623b      	str	r3, [r7, #32]

	return HAL_CAN_ConfigFilter(&hcan1, &filter);
 80010f8:	463b      	mov	r3, r7
 80010fa:	4619      	mov	r1, r3
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <CAN_Filter_Config+0x64>)
 80010fe:	f000 ff89 	bl	8002014 <HAL_CAN_ConfigFilter>
 8001102:	4603      	mov	r3, r0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3730      	adds	r7, #48	; 0x30
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000188 	.word	0x20000188

08001110 <CREATE_NEW_LOG>:
//
//	// After the year 2100, this is off by one day, but we ignore that...
//	return ((prev_year - 1972) / 4) + 1;
//}

static CANRX_ERROR_T CREATE_NEW_LOG(void) {
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	b0cb      	sub	sp, #300	; 0x12c
 8001114:	af06      	add	r7, sp, #24

	// Update current date/time info
	uint8_t curr_date = DS1307_GetDate();
 8001116:	f000 fd83 	bl	8001c20 <DS1307_GetDate>
 800111a:	4603      	mov	r3, r0
 800111c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t curr_month = DS1307_GetMonth();
 8001120:	f000 fd8a 	bl	8001c38 <DS1307_GetMonth>
 8001124:	4603      	mov	r3, r0
 8001126:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint8_t curr_year = DS1307_GetYear();
 800112a:	f000 fd91 	bl	8001c50 <DS1307_GetYear>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint8_t curr_hour = DS1307_GetHour();
 8001134:	f000 fdae 	bl	8001c94 <DS1307_GetHour>
 8001138:	4603      	mov	r3, r0
 800113a:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
	uint8_t curr_minute = DS1307_GetMinute();
 800113e:	f000 fdb8 	bl	8001cb2 <DS1307_GetMinute>
 8001142:	4603      	mov	r3, r0
 8001144:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
	uint8_t curr_second = DS1307_GetSecond();
 8001148:	f000 fdbf 	bl	8001cca <DS1307_GetSecond>
 800114c:	4603      	mov	r3, r0
 800114e:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
//
//	// now in milliseconds
//	starting_timestamp_ms = starting_timestamp_sec * 1000 + ((uint64_t) (starting_tick - HAL_GetTick()));

#ifdef VERBOSE_DEBUGGING
	printf("Starting new log at %02d-%02d-20%02dT%02d:%02d:%02dZ\r\n",
 8001152:	f897 010b 	ldrb.w	r0, [r7, #267]	; 0x10b
 8001156:	f897 410c 	ldrb.w	r4, [r7, #268]	; 0x10c
 800115a:	f897 510d 	ldrb.w	r5, [r7, #269]	; 0x10d
 800115e:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8001162:	f897 2109 	ldrb.w	r2, [r7, #265]	; 0x109
 8001166:	f897 1108 	ldrb.w	r1, [r7, #264]	; 0x108
 800116a:	9102      	str	r1, [sp, #8]
 800116c:	9201      	str	r2, [sp, #4]
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	462b      	mov	r3, r5
 8001172:	4622      	mov	r2, r4
 8001174:	4601      	mov	r1, r0
 8001176:	4848      	ldr	r0, [pc, #288]	; (8001298 <CREATE_NEW_LOG+0x188>)
 8001178:	f00f fdf2 	bl	8010d60 <iprintf>
			curr_year, curr_month, curr_date, curr_hour, curr_minute, curr_second);
#endif
	if (f_stat(data_directory, &fno) != FR_OK) {
 800117c:	4b47      	ldr	r3, [pc, #284]	; (800129c <CREATE_NEW_LOG+0x18c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4947      	ldr	r1, [pc, #284]	; (80012a0 <CREATE_NEW_LOG+0x190>)
 8001182:	4618      	mov	r0, r3
 8001184:	f00e fc51 	bl	800fa2a <f_stat>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d028      	beq.n	80011e0 <CREATE_NEW_LOG+0xd0>
#ifdef VERBOSE_DEBUGGING
		printf("/CAN_DATA directory not present attempting to create it...\n\r");
 800118e:	4845      	ldr	r0, [pc, #276]	; (80012a4 <CREATE_NEW_LOG+0x194>)
 8001190:	f00f fde6 	bl	8010d60 <iprintf>
#endif
		uint8_t RETRY_COUNT = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		while (RETRY_COUNT < DEFAULT_RETRIES) {
 800119a:	e014      	b.n	80011c6 <CREATE_NEW_LOG+0xb6>
			if (f_mkdir(data_directory) != FR_OK) {
 800119c:	4b3f      	ldr	r3, [pc, #252]	; (800129c <CREATE_NEW_LOG+0x18c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00e fc7b 	bl	800fa9c <f_mkdir>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d008      	beq.n	80011be <CREATE_NEW_LOG+0xae>
#ifdef VERBOSE_DEBUGGING
				printf("Failed to create /CAN_DATA Directory. Retrying...\n\r");
 80011ac:	483e      	ldr	r0, [pc, #248]	; (80012a8 <CREATE_NEW_LOG+0x198>)
 80011ae:	f00f fdd7 	bl	8010d60 <iprintf>
#endif
				RETRY_COUNT++;
 80011b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011b6:	3301      	adds	r3, #1
 80011b8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80011bc:	e003      	b.n	80011c6 <CREATE_NEW_LOG+0xb6>
			}
			else {
#ifdef VERBOSE_DEBUGGING
				printf("Successfully created /CAN_DATA Directory\n\r");
 80011be:	483b      	ldr	r0, [pc, #236]	; (80012ac <CREATE_NEW_LOG+0x19c>)
 80011c0:	f00f fdce 	bl	8010d60 <iprintf>
#endif
				break;
 80011c4:	e003      	b.n	80011ce <CREATE_NEW_LOG+0xbe>
		while (RETRY_COUNT < DEFAULT_RETRIES) {
 80011c6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d9e6      	bls.n	800119c <CREATE_NEW_LOG+0x8c>
			}
		}
		if (RETRY_COUNT == 3) {
 80011ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d104      	bne.n	80011e0 <CREATE_NEW_LOG+0xd0>
#ifdef VERBOSE_DEBUGGING
			printf("Unable to create /CAN_DATA Directory\n\r");
 80011d6:	4836      	ldr	r0, [pc, #216]	; (80012b0 <CREATE_NEW_LOG+0x1a0>)
 80011d8:	f00f fdc2 	bl	8010d60 <iprintf>
#endif
			return DATA_DIRECTORY_CREATION_UNSUCCESSFUL;
 80011dc:	2309      	movs	r3, #9
 80011de:	e055      	b.n	800128c <CREATE_NEW_LOG+0x17c>
		}
	}

	// Creating new filename
	TCHAR filename[FILENAME_MAX_BYTES];
	snprintf(filename, FILENAME_MAX_BYTES, "%s/20%02d-%02d-%02dT%02d-%02d-%02dZ.log",
 80011e0:	4b2e      	ldr	r3, [pc, #184]	; (800129c <CREATE_NEW_LOG+0x18c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80011ea:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 80011ee:	f897 110d 	ldrb.w	r1, [r7, #269]	; 0x10d
 80011f2:	f897 010a 	ldrb.w	r0, [r7, #266]	; 0x10a
 80011f6:	f897 4109 	ldrb.w	r4, [r7, #265]	; 0x109
 80011fa:	f897 5108 	ldrb.w	r5, [r7, #264]	; 0x108
 80011fe:	f107 0608 	add.w	r6, r7, #8
 8001202:	9505      	str	r5, [sp, #20]
 8001204:	9404      	str	r4, [sp, #16]
 8001206:	9003      	str	r0, [sp, #12]
 8001208:	9102      	str	r1, [sp, #8]
 800120a:	9201      	str	r2, [sp, #4]
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a28      	ldr	r2, [pc, #160]	; (80012b4 <CREATE_NEW_LOG+0x1a4>)
 8001212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001216:	4630      	mov	r0, r6
 8001218:	f00f fca0 	bl	8010b5c <sniprintf>
			data_directory,
			curr_year, curr_month, curr_date,
			curr_hour, curr_minute, curr_second);

#ifdef VERBOSE_DEBUGGING
	printf("New log name: %s \r\n", filename);
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	4619      	mov	r1, r3
 8001222:	4825      	ldr	r0, [pc, #148]	; (80012b8 <CREATE_NEW_LOG+0x1a8>)
 8001224:	f00f fd9c 	bl	8010d60 <iprintf>
#endif
	uint8_t RETRY_COUNT = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	while (RETRY_COUNT < DEFAULT_RETRIES) {
 800122e:	e014      	b.n	800125a <CREATE_NEW_LOG+0x14a>
		RETRY_COUNT++;
 8001230:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001234:	3301      	adds	r3, #1
 8001236:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	// Open file for writing (Create)
		if (f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE)
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	220a      	movs	r2, #10
 8001240:	4619      	mov	r1, r3
 8001242:	481e      	ldr	r0, [pc, #120]	; (80012bc <CREATE_NEW_LOG+0x1ac>)
 8001244:	f00e f816 	bl	800f274 <f_open>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00a      	beq.n	8001264 <CREATE_NEW_LOG+0x154>
				!= FR_OK) {
#ifdef VERBOSE_DEBUGGING
			printf("Failed to create new log file: %s. Retrying...!\r\n", filename);
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	4619      	mov	r1, r3
 8001254:	481a      	ldr	r0, [pc, #104]	; (80012c0 <CREATE_NEW_LOG+0x1b0>)
 8001256:	f00f fd83 	bl	8010d60 <iprintf>
	while (RETRY_COUNT < DEFAULT_RETRIES) {
 800125a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800125e:	2b02      	cmp	r3, #2
 8001260:	d9e6      	bls.n	8001230 <CREATE_NEW_LOG+0x120>
 8001262:	e000      	b.n	8001266 <CREATE_NEW_LOG+0x156>
			// http://elm-chan.org/fsw/ff/doc/utime.html
//			FILINFO date_time_info;
//			date_time_info.fdate = (WORD)(((((WORD) curr_year) + 20) * 512U) | ((WORD) curr_month) * 32U | (WORD) curr_date);
//			date_time_info.ftime = (WORD)(((WORD) curr_hour) * 2048U | ((WORD) curr_minute) * 32U | ((WORD) curr_second) / 2U);
//			f_utime(filename, &date_time_info);
			break;
 8001264:	bf00      	nop
		}
	}
	if (RETRY_COUNT == 3) {
 8001266:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800126a:	2b03      	cmp	r3, #3
 800126c:	d107      	bne.n	800127e <CREATE_NEW_LOG+0x16e>
#ifdef VERBOSE_DEBUGGING
		printf("Failed to create new log file: %s\r\n", filename);
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	4619      	mov	r1, r3
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <CREATE_NEW_LOG+0x1b4>)
 8001276:	f00f fd73 	bl	8010d60 <iprintf>
#endif
		return NEW_LOG_FILE_CREATION_FAILED;
 800127a:	230a      	movs	r3, #10
 800127c:	e006      	b.n	800128c <CREATE_NEW_LOG+0x17c>
	}
#ifdef VERBOSE_DEBUGGING
	printf("Successfully created new log file: %s ...\r\n", filename);
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	4619      	mov	r1, r3
 8001284:	4810      	ldr	r0, [pc, #64]	; (80012c8 <CREATE_NEW_LOG+0x1b8>)
 8001286:	f00f fd6b 	bl	8010d60 <iprintf>
#endif
	return LOG_CREATION_SUCCESSFUL;
 800128a:	2308      	movs	r3, #8
}
 800128c:	4618      	mov	r0, r3
 800128e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001292:	46bd      	mov	sp, r7
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001296:	bf00      	nop
 8001298:	08012094 	.word	0x08012094
 800129c:	20000000 	.word	0x20000000
 80012a0:	200003d0 	.word	0x200003d0
 80012a4:	080120cc 	.word	0x080120cc
 80012a8:	0801210c 	.word	0x0801210c
 80012ac:	08012140 	.word	0x08012140
 80012b0:	0801216c 	.word	0x0801216c
 80012b4:	08012194 	.word	0x08012194
 80012b8:	080121bc 	.word	0x080121bc
 80012bc:	2004a770 	.word	0x2004a770
 80012c0:	080121d0 	.word	0x080121d0
 80012c4:	08012204 	.word	0x08012204
 80012c8:	08012228 	.word	0x08012228

080012cc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	if (buffer_fill_level[buffer_writing_to] == (CAN_MESSAGES_PER_BUFFER-1)
 80012d4:	4b22      	ldr	r3, [pc, #136]	; (8001360 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b22      	ldr	r3, [pc, #136]	; (8001364 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80012dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012e0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d11f      	bne.n	8001328 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
			&& buffer_fill_level[(buffer_writing_to + 1) % NUM_BUFFERS] == CAN_MESSAGES_PER_BUFFER)
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	425a      	negs	r2, r3
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	f002 020f 	and.w	r2, r2, #15
 80012f8:	bf58      	it	pl
 80012fa:	4253      	negpl	r3, r2
 80012fc:	4a19      	ldr	r2, [pc, #100]	; (8001364 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80012fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001306:	d10f      	bne.n	8001328 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
	{
#ifdef VERBOSE_DEBUGGING
		printf("\r\nBuffers are full... passing messages\r\n");
 8001308:	4817      	ldr	r0, [pc, #92]	; (8001368 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800130a:	f00f fd8f 	bl	8010e2c <puts>
#endif
		CAN_notifications_deactivated = 1;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
		HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001314:	2102      	movs	r1, #2
 8001316:	4816      	ldr	r0, [pc, #88]	; (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001318:	f001 f955 	bl	80025c6 <HAL_CAN_DeactivateNotification>

		tick_when_can_deactivated_last = HAL_GetTick();
 800131c:	f000 fd4e 	bl	8001dbc <HAL_GetTick>
 8001320:	4603      	mov	r3, r0
 8001322:	4a14      	ldr	r2, [pc, #80]	; (8001374 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8001324:	6013      	str	r3, [r2, #0]

		if (buffer_fill_level[buffer_writing_to] == CAN_MESSAGES_PER_BUFFER) {
			buffer_writing_to = (buffer_writing_to + 1) % NUM_BUFFERS;
		}
	}
}
 8001326:	e017      	b.n	8001358 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
		Get_and_Append_CAN_Message_to_Buffer();
 8001328:	f7ff fe52 	bl	8000fd0 <Get_and_Append_CAN_Message_to_Buffer>
		if (buffer_fill_level[buffer_writing_to] == CAN_MESSAGES_PER_BUFFER) {
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001334:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800133c:	d10c      	bne.n	8001358 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
			buffer_writing_to = (buffer_writing_to + 1) % NUM_BUFFERS;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	425a      	negs	r2, r3
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	f002 020f 	and.w	r2, r2, #15
 800134e:	bf58      	it	pl
 8001350:	4253      	negpl	r3, r2
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b02      	ldr	r3, [pc, #8]	; (8001360 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001356:	701a      	strb	r2, [r3, #0]
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2004a51c 	.word	0x2004a51c
 8001364:	2004a4fc 	.word	0x2004a4fc
 8001368:	08012254 	.word	0x08012254
 800136c:	2004a51e 	.word	0x2004a51e
 8001370:	20000188 	.word	0x20000188
 8001374:	2004a520 	.word	0x2004a520

08001378 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8001380:	1d39      	adds	r1, r7, #4
 8001382:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001386:	2201      	movs	r2, #1
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <__io_putchar+0x20>)
 800138a:	f006 fcd5 	bl	8007d38 <HAL_UART_Transmit>

	return ch;
 800138e:	687b      	ldr	r3, [r7, #4]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000348 	.word	0x20000348

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
#ifdef VERBOSE_DEBUGGING
	printf("\r\nError Handler Reached\r\n");
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <Error_Handler+0x1c>)
 80013a6:	f00f fd41 	bl	8010e2c <puts>
#endif
	HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2101      	movs	r1, #1
 80013ae:	4803      	ldr	r0, [pc, #12]	; (80013bc <Error_Handler+0x20>)
 80013b0:	f002 f9dc 	bl	800376c <HAL_GPIO_WritePin>

	while (1) {
 80013b4:	e7fe      	b.n	80013b4 <Error_Handler+0x18>
 80013b6:	bf00      	nop
 80013b8:	0801227c 	.word	0x0801227c
 80013bc:	40021800 	.word	0x40021800

080013c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_MspInit+0x44>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <HAL_MspInit+0x44>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_MspInit+0x44>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_MspInit+0x44>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a08      	ldr	r2, [pc, #32]	; (8001404 <HAL_MspInit+0x44>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_MspInit+0x44>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <HAL_CAN_MspInit+0x8c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d12f      	bne.n	800148a <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_CAN_MspInit+0x90>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a1a      	ldr	r2, [pc, #104]	; (8001498 <HAL_CAN_MspInit+0x90>)
 8001430:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_CAN_MspInit+0x90>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_CAN_MspInit+0x90>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <HAL_CAN_MspInit+0x90>)
 8001448:	f043 0308 	orr.w	r3, r3, #8
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_CAN_MspInit+0x90>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800145a:	2303      	movs	r3, #3
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800146a:	2309      	movs	r3, #9
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <HAL_CAN_MspInit+0x94>)
 8001476:	f001 ffb5 	bl	80033e4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	2014      	movs	r0, #20
 8001480:	f001 fbd3 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001484:	2014      	movs	r0, #20
 8001486:	f001 fbec 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40006400 	.word	0x40006400
 8001498:	40023800 	.word	0x40023800
 800149c:	40020c00 	.word	0x40020c00

080014a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0ae      	sub	sp, #184	; 0xb8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2290      	movs	r2, #144	; 0x90
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00f fcca 	bl	8010e5a <memset>
  if(hi2c->Instance==I2C1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a22      	ldr	r2, [pc, #136]	; (8001554 <HAL_I2C_MspInit+0xb4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d13c      	bne.n	800154a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014d4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4618      	mov	r0, r3
 80014e0:	f004 fe8c 	bl	80061fc <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014ea:	f7ff ff57 	bl	800139c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <HAL_I2C_MspInit+0xb8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a19      	ldr	r2, [pc, #100]	; (8001558 <HAL_I2C_MspInit+0xb8>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_I2C_MspInit+0xb8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001506:	f44f 7340 	mov.w	r3, #768	; 0x300
 800150a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150e:	2312      	movs	r3, #18
 8001510:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001520:	2304      	movs	r3, #4
 8001522:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800152a:	4619      	mov	r1, r3
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <HAL_I2C_MspInit+0xbc>)
 800152e:	f001 ff59 	bl	80033e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_I2C_MspInit+0xb8>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_I2C_MspInit+0xb8>)
 8001538:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_I2C_MspInit+0xb8>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	37b8      	adds	r7, #184	; 0xb8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40005400 	.word	0x40005400
 8001558:	40023800 	.word	0x40023800
 800155c:	40020400 	.word	0x40020400

08001560 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0ae      	sub	sp, #184	; 0xb8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2290      	movs	r2, #144	; 0x90
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f00f fc6a 	bl	8010e5a <memset>
  if(hsd->Instance==SDMMC1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a73      	ldr	r2, [pc, #460]	; (8001758 <HAL_SD_MspInit+0x1f8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	f040 80de 	bne.w	800174e <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001592:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001596:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800159c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4618      	mov	r0, r3
 80015a6:	f004 fe29 	bl	80061fc <HAL_RCCEx_PeriphCLKConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80015b0:	f7ff fef4 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015b4:	4b69      	ldr	r3, [pc, #420]	; (800175c <HAL_SD_MspInit+0x1fc>)
 80015b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b8:	4a68      	ldr	r2, [pc, #416]	; (800175c <HAL_SD_MspInit+0x1fc>)
 80015ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015be:	6453      	str	r3, [r2, #68]	; 0x44
 80015c0:	4b66      	ldr	r3, [pc, #408]	; (800175c <HAL_SD_MspInit+0x1fc>)
 80015c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015cc:	4b63      	ldr	r3, [pc, #396]	; (800175c <HAL_SD_MspInit+0x1fc>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	4a62      	ldr	r2, [pc, #392]	; (800175c <HAL_SD_MspInit+0x1fc>)
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	6313      	str	r3, [r2, #48]	; 0x30
 80015d8:	4b60      	ldr	r3, [pc, #384]	; (800175c <HAL_SD_MspInit+0x1fc>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e4:	4b5d      	ldr	r3, [pc, #372]	; (800175c <HAL_SD_MspInit+0x1fc>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	4a5c      	ldr	r2, [pc, #368]	; (800175c <HAL_SD_MspInit+0x1fc>)
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	6313      	str	r3, [r2, #48]	; 0x30
 80015f0:	4b5a      	ldr	r3, [pc, #360]	; (800175c <HAL_SD_MspInit+0x1fc>)
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80015fc:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001600:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001616:	230c      	movs	r3, #12
 8001618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001620:	4619      	mov	r1, r3
 8001622:	484f      	ldr	r0, [pc, #316]	; (8001760 <HAL_SD_MspInit+0x200>)
 8001624:	f001 fede 	bl	80033e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001628:	2304      	movs	r3, #4
 800162a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001640:	230c      	movs	r3, #12
 8001642:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001646:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800164a:	4619      	mov	r1, r3
 800164c:	4845      	ldr	r0, [pc, #276]	; (8001764 <HAL_SD_MspInit+0x204>)
 800164e:	f001 fec9 	bl	80033e4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001652:	4b45      	ldr	r3, [pc, #276]	; (8001768 <HAL_SD_MspInit+0x208>)
 8001654:	4a45      	ldr	r2, [pc, #276]	; (800176c <HAL_SD_MspInit+0x20c>)
 8001656:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001658:	4b43      	ldr	r3, [pc, #268]	; (8001768 <HAL_SD_MspInit+0x208>)
 800165a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800165e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001660:	4b41      	ldr	r3, [pc, #260]	; (8001768 <HAL_SD_MspInit+0x208>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001666:	4b40      	ldr	r3, [pc, #256]	; (8001768 <HAL_SD_MspInit+0x208>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800166c:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <HAL_SD_MspInit+0x208>)
 800166e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001672:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <HAL_SD_MspInit+0x208>)
 8001676:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800167a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800167c:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <HAL_SD_MspInit+0x208>)
 800167e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001682:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001684:	4b38      	ldr	r3, [pc, #224]	; (8001768 <HAL_SD_MspInit+0x208>)
 8001686:	2220      	movs	r2, #32
 8001688:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <HAL_SD_MspInit+0x208>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001690:	4b35      	ldr	r3, [pc, #212]	; (8001768 <HAL_SD_MspInit+0x208>)
 8001692:	2204      	movs	r2, #4
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001696:	4b34      	ldr	r3, [pc, #208]	; (8001768 <HAL_SD_MspInit+0x208>)
 8001698:	2203      	movs	r2, #3
 800169a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800169c:	4b32      	ldr	r3, [pc, #200]	; (8001768 <HAL_SD_MspInit+0x208>)
 800169e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <HAL_SD_MspInit+0x208>)
 80016a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016aa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80016ac:	482e      	ldr	r0, [pc, #184]	; (8001768 <HAL_SD_MspInit+0x208>)
 80016ae:	f001 faf3 	bl	8002c98 <HAL_DMA_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 80016b8:	f7ff fe70 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a2a      	ldr	r2, [pc, #168]	; (8001768 <HAL_SD_MspInit+0x208>)
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
 80016c2:	4a29      	ldr	r2, [pc, #164]	; (8001768 <HAL_SD_MspInit+0x208>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80016c8:	4b29      	ldr	r3, [pc, #164]	; (8001770 <HAL_SD_MspInit+0x210>)
 80016ca:	4a2a      	ldr	r2, [pc, #168]	; (8001774 <HAL_SD_MspInit+0x214>)
 80016cc:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80016ce:	4b28      	ldr	r3, [pc, #160]	; (8001770 <HAL_SD_MspInit+0x210>)
 80016d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016d4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_SD_MspInit+0x210>)
 80016d8:	2240      	movs	r2, #64	; 0x40
 80016da:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <HAL_SD_MspInit+0x210>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <HAL_SD_MspInit+0x210>)
 80016e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_SD_MspInit+0x210>)
 80016ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016f0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <HAL_SD_MspInit+0x210>)
 80016f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016f8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <HAL_SD_MspInit+0x210>)
 80016fc:	2220      	movs	r2, #32
 80016fe:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_SD_MspInit+0x210>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_SD_MspInit+0x210>)
 8001708:	2204      	movs	r2, #4
 800170a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <HAL_SD_MspInit+0x210>)
 800170e:	2203      	movs	r2, #3
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_SD_MspInit+0x210>)
 8001714:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_SD_MspInit+0x210>)
 800171c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001720:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001722:	4813      	ldr	r0, [pc, #76]	; (8001770 <HAL_SD_MspInit+0x210>)
 8001724:	f001 fab8 	bl	8002c98 <HAL_DMA_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800172e:	f7ff fe35 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_SD_MspInit+0x210>)
 8001736:	63da      	str	r2, [r3, #60]	; 0x3c
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <HAL_SD_MspInit+0x210>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2031      	movs	r0, #49	; 0x31
 8001744:	f001 fa71 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001748:	2031      	movs	r0, #49	; 0x31
 800174a:	f001 fa8a 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	37b8      	adds	r7, #184	; 0xb8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40012c00 	.word	0x40012c00
 800175c:	40023800 	.word	0x40023800
 8001760:	40020800 	.word	0x40020800
 8001764:	40020c00 	.word	0x40020c00
 8001768:	20000288 	.word	0x20000288
 800176c:	40026458 	.word	0x40026458
 8001770:	200002e8 	.word	0x200002e8
 8001774:	400264a0 	.word	0x400264a0

08001778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b0ae      	sub	sp, #184	; 0xb8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2290      	movs	r2, #144	; 0x90
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f00f fb5e 	bl	8010e5a <memset>
  if(huart->Instance==USART3)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a22      	ldr	r2, [pc, #136]	; (800182c <HAL_UART_MspInit+0xb4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d13c      	bne.n	8001822 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 fd20 	bl	80061fc <HAL_RCCEx_PeriphCLKConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017c2:	f7ff fdeb 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_UART_MspInit+0xb8>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a19      	ldr	r2, [pc, #100]	; (8001830 <HAL_UART_MspInit+0xb8>)
 80017cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_UART_MspInit+0xb8>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_UART_MspInit+0xb8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a13      	ldr	r2, [pc, #76]	; (8001830 <HAL_UART_MspInit+0xb8>)
 80017e4:	f043 0308 	orr.w	r3, r3, #8
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_UART_MspInit+0xb8>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001810:	2307      	movs	r3, #7
 8001812:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001816:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_UART_MspInit+0xbc>)
 800181e:	f001 fde1 	bl	80033e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	37b8      	adds	r7, #184	; 0xb8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40004800 	.word	0x40004800
 8001830:	40023800 	.word	0x40023800
 8001834:	40020c00 	.word	0x40020c00

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800183c:	e7fe      	b.n	800183c <NMI_Handler+0x4>

0800183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <MemManage_Handler+0x4>

0800184a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <UsageFault_Handler+0x4>

08001856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001884:	f000 fa86 	bl	8001d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 8001890:	2102      	movs	r1, #2
 8001892:	4806      	ldr	r0, [pc, #24]	; (80018ac <EXTI1_IRQHandler+0x20>)
 8001894:	f001 ff52 	bl	800373c <HAL_GPIO_ReadPin>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <EXTI1_IRQHandler+0x24>)
 800189e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PowerSwitch_Pin);
 80018a0:	2002      	movs	r0, #2
 80018a2:	f001 ff7d 	bl	80037a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40021800 	.word	0x40021800
 80018b0:	200004e8 	.word	0x200004e8

080018b4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	NEW_LOG_FLAG = 1;
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <EXTI3_IRQHandler+0x14>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NewLogBtn_Pin);
 80018be:	2008      	movs	r0, #8
 80018c0:	f001 ff6e 	bl	80037a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200004e9 	.word	0x200004e9

080018cc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <CAN1_RX0_IRQHandler+0x10>)
 80018d2:	f000 fe9f 	bl	8002614 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000188 	.word	0x20000188

080018e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (POWER_STATE == 0) {
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <EXTI15_10_IRQHandler+0x40>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d112      	bne.n	8001912 <EXTI15_10_IRQHandler+0x32>
		if (HAL_GPIO_ReadPin(PokRESET_GPIO_Port, PokRESET_Pin) == GPIO_PIN_SET) {
 80018ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <EXTI15_10_IRQHandler+0x44>)
 80018f2:	f001 ff23 	bl	800373c <HAL_GPIO_ReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d105      	bne.n	8001908 <EXTI15_10_IRQHandler+0x28>
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2101      	movs	r1, #1
 8001900:	4809      	ldr	r0, [pc, #36]	; (8001928 <EXTI15_10_IRQHandler+0x48>)
 8001902:	f001 ff33 	bl	800376c <HAL_GPIO_WritePin>
 8001906:	e004      	b.n	8001912 <EXTI15_10_IRQHandler+0x32>
		}
		else {
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2101      	movs	r1, #1
 800190c:	4806      	ldr	r0, [pc, #24]	; (8001928 <EXTI15_10_IRQHandler+0x48>)
 800190e:	f001 ff2d 	bl	800376c <HAL_GPIO_WritePin>
		}
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PokRESET_Pin);
 8001912:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001916:	f001 ff43 	bl	80037a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200004e8 	.word	0x200004e8
 8001924:	40021400 	.word	0x40021400
 8001928:	40021800 	.word	0x40021800

0800192c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <SDMMC1_IRQHandler+0x10>)
 8001932:	f005 fb0b 	bl	8006f4c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000204 	.word	0x20000204

08001940 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <DMA2_Stream3_IRQHandler+0x10>)
 8001946:	f001 fad7 	bl	8002ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000288 	.word	0x20000288

08001954 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <OTG_FS_IRQHandler+0x10>)
 800195a:	f002 fe08 	bl	800456e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2004c0bc 	.word	0x2004c0bc

08001968 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <DMA2_Stream6_IRQHandler+0x10>)
 800196e:	f001 fac3 	bl	8002ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200002e8 	.word	0x200002e8

0800197c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	e00a      	b.n	80019a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800198e:	f3af 8000 	nop.w
 8001992:	4601      	mov	r1, r0
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	60ba      	str	r2, [r7, #8]
 800199a:	b2ca      	uxtb	r2, r1
 800199c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	dbf0      	blt.n	800198e <_read+0x12>
  }

  return len;
 80019ac:	687b      	ldr	r3, [r7, #4]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	e009      	b.n	80019dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	60ba      	str	r2, [r7, #8]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fcd1 	bl	8001378 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	dbf1      	blt.n	80019c8 <_write+0x12>
  }
  return len;
 80019e4:	687b      	ldr	r3, [r7, #4]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_close>:

int _close(int file)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a16:	605a      	str	r2, [r3, #4]
  return 0;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <_isatty>:

int _isatty(int file)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a2e:	2301      	movs	r3, #1
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a60:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <_sbrk+0x5c>)
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <_sbrk+0x60>)
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <_sbrk+0x64>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d102      	bne.n	8001a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <_sbrk+0x64>)
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <_sbrk+0x68>)
 8001a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <_sbrk+0x64>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d207      	bcs.n	8001a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a88:	f00f fa00 	bl	8010e8c <__errno>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	220c      	movs	r2, #12
 8001a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a96:	e009      	b.n	8001aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <_sbrk+0x64>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a05      	ldr	r2, [pc, #20]	; (8001abc <_sbrk+0x64>)
 8001aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20080000 	.word	0x20080000
 8001ab8:	00000400 	.word	0x00000400
 8001abc:	2004a528 	.word	0x2004a528
 8001ac0:	2004c710 	.word	0x2004c710

08001ac4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <SystemInit+0x20>)
 8001aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <SystemInit+0x20>)
 8001ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aec:	480d      	ldr	r0, [pc, #52]	; (8001b24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aee:	490e      	ldr	r1, [pc, #56]	; (8001b28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af0:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b04:	4c0b      	ldr	r4, [pc, #44]	; (8001b34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b12:	f7ff ffd7 	bl	8001ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b16:	f00f f9bf 	bl	8010e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1a:	f7fe fd5f 	bl	80005dc <main>
  bx  lr    
 8001b1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b20:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b28:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001b2c:	080127e0 	.word	0x080127e0
  ldr r2, =_sbss
 8001b30:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001b34:	2004c710 	.word	0x2004c710

08001b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b38:	e7fe      	b.n	8001b38 <ADC_IRQHandler>
	...

08001b3c <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <DS1307_Init+0x1c>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f000 f806 	bl	8001b5c <DS1307_SetClockHalt>
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	2004a52c 	.word	0x2004a52c

08001b5c <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <DS1307_SetClockHalt+0x14>
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	e000      	b.n	8001b72 <DS1307_SetClockHalt+0x16>
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8001b74:	2000      	movs	r0, #0
 8001b76:	f000 f831 	bl	8001bdc <DS1307_GetRegByte>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b82:	b25a      	sxtb	r2, r3
 8001b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b25b      	sxtb	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	4619      	mov	r1, r3
 8001b90:	2000      	movs	r0, #0
 8001b92:	f000 f805 	bl	8001ba0 <DS1307_SetRegByte>
}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	460a      	mov	r2, r1
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	4613      	mov	r3, r2
 8001bae:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	733b      	strb	r3, [r7, #12]
 8001bb4:	79bb      	ldrb	r3, [r7, #6]
 8001bb6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <DS1307_SetRegByte+0x38>)
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	f107 020c 	add.w	r2, r7, #12
 8001bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	21d0      	movs	r1, #208	; 0xd0
 8001bca:	f001 fe9d 	bl	8003908 <HAL_I2C_Master_Transmit>
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2004a52c 	.word	0x2004a52c

08001bdc <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <DS1307_GetRegByte+0x40>)
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	1dfa      	adds	r2, r7, #7
 8001bec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	21d0      	movs	r1, #208	; 0xd0
 8001bf6:	f001 fe87 	bl	8003908 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <DS1307_GetRegByte+0x40>)
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	f107 020f 	add.w	r2, r7, #15
 8001c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	21d0      	movs	r1, #208	; 0xd0
 8001c0c:	f001 ff70 	bl	8003af0 <HAL_I2C_Master_Receive>
	return val;
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2004a52c 	.word	0x2004a52c

08001c20 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8001c24:	2004      	movs	r0, #4
 8001c26:	f7ff ffd9 	bl	8001bdc <DS1307_GetRegByte>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 f85b 	bl	8001ce8 <DS1307_DecodeBCD>
 8001c32:	4603      	mov	r3, r0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8001c3c:	2005      	movs	r0, #5
 8001c3e:	f7ff ffcd 	bl	8001bdc <DS1307_GetRegByte>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f84f 	bl	8001ce8 <DS1307_DecodeBCD>
 8001c4a:	4603      	mov	r3, r0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8001c56:	2010      	movs	r0, #16
 8001c58:	f7ff ffc0 	bl	8001bdc <DS1307_GetRegByte>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	461a      	mov	r2, r3
 8001c68:	0091      	lsls	r1, r2, #2
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8001c74:	2006      	movs	r0, #6
 8001c76:	f7ff ffb1 	bl	8001bdc <DS1307_GetRegByte>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 f833 	bl	8001ce8 <DS1307_DecodeBCD>
 8001c82:	4603      	mov	r3, r0
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f7ff ff9f 	bl	8001bdc <DS1307_GetRegByte>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f81e 	bl	8001ce8 <DS1307_DecodeBCD>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	f7ff ff90 	bl	8001bdc <DS1307_GetRegByte>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f812 	bl	8001ce8 <DS1307_DecodeBCD>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f7ff ff84 	bl	8001bdc <DS1307_GetRegByte>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 f803 	bl	8001ce8 <DS1307_DecodeBCD>
 8001ce2:	4603      	mov	r3, r0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	0092      	lsls	r2, r2, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b2db      	uxtb	r3, r3
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d1e:	2003      	movs	r0, #3
 8001d20:	f000 ff78 	bl	8002c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f000 f805 	bl	8001d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2a:	f7ff fb49 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_InitTick+0x54>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_InitTick+0x58>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 ff93 	bl	8002c7e <HAL_SYSTICK_Config>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00e      	b.n	8001d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b0f      	cmp	r3, #15
 8001d66:	d80a      	bhi.n	8001d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d70:	f000 ff5b 	bl	8002c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d74:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <HAL_InitTick+0x5c>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000004 	.word	0x20000004
 8001d8c:	2000000c 	.word	0x2000000c
 8001d90:	20000008 	.word	0x20000008

08001d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_IncTick+0x20>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_IncTick+0x24>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <HAL_IncTick+0x24>)
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	2000000c 	.word	0x2000000c
 8001db8:	2004a530 	.word	0x2004a530

08001dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <HAL_GetTick+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	2004a530 	.word	0x2004a530

08001dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff ffee 	bl	8001dbc <HAL_GetTick>
 8001de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dec:	d005      	beq.n	8001dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_Delay+0x44>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dfa:	bf00      	nop
 8001dfc:	f7ff ffde 	bl	8001dbc <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d8f7      	bhi.n	8001dfc <HAL_Delay+0x28>
  {
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000000c 	.word	0x2000000c

08001e1c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0ed      	b.n	800200a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d102      	bne.n	8001e40 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff fae4 	bl	8001408 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e50:	f7ff ffb4 	bl	8001dbc <HAL_GetTick>
 8001e54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e56:	e012      	b.n	8001e7e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e58:	f7ff ffb0 	bl	8001dbc <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b0a      	cmp	r3, #10
 8001e64:	d90b      	bls.n	8001e7e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2205      	movs	r2, #5
 8001e76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0c5      	b.n	800200a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0e5      	beq.n	8001e58 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0202 	bic.w	r2, r2, #2
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e9c:	f7ff ff8e 	bl	8001dbc <HAL_GetTick>
 8001ea0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ea2:	e012      	b.n	8001eca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ea4:	f7ff ff8a 	bl	8001dbc <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b0a      	cmp	r3, #10
 8001eb0:	d90b      	bls.n	8001eca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2205      	movs	r2, #5
 8001ec2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e09f      	b.n	800200a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1e5      	bne.n	8001ea4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7e1b      	ldrb	r3, [r3, #24]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d108      	bne.n	8001ef2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	e007      	b.n	8001f02 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7e5b      	ldrb	r3, [r3, #25]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d108      	bne.n	8001f1c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e007      	b.n	8001f2c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7e9b      	ldrb	r3, [r3, #26]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d108      	bne.n	8001f46 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e007      	b.n	8001f56 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0220 	bic.w	r2, r2, #32
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7edb      	ldrb	r3, [r3, #27]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d108      	bne.n	8001f70 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0210 	bic.w	r2, r2, #16
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	e007      	b.n	8001f80 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0210 	orr.w	r2, r2, #16
 8001f7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7f1b      	ldrb	r3, [r3, #28]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d108      	bne.n	8001f9a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0208 	orr.w	r2, r2, #8
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e007      	b.n	8001faa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0208 	bic.w	r2, r2, #8
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7f5b      	ldrb	r3, [r3, #29]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d108      	bne.n	8001fc4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0204 	orr.w	r2, r2, #4
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	e007      	b.n	8001fd4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0204 	bic.w	r2, r2, #4
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	ea42 0103 	orr.w	r1, r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800202a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800202c:	7cfb      	ldrb	r3, [r7, #19]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d003      	beq.n	800203a <HAL_CAN_ConfigFilter+0x26>
 8002032:	7cfb      	ldrb	r3, [r7, #19]
 8002034:	2b02      	cmp	r3, #2
 8002036:	f040 80c7 	bne.w	80021c8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a69      	ldr	r2, [pc, #420]	; (80021e4 <HAL_CAN_ConfigFilter+0x1d0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d001      	beq.n	8002048 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002044:	4b68      	ldr	r3, [pc, #416]	; (80021e8 <HAL_CAN_ConfigFilter+0x1d4>)
 8002046:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	4a63      	ldr	r2, [pc, #396]	; (80021e8 <HAL_CAN_ConfigFilter+0x1d4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d111      	bne.n	8002084 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002066:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	431a      	orrs	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	2201      	movs	r2, #1
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	43db      	mvns	r3, r3
 800209e:	401a      	ands	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d123      	bne.n	80020f6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	401a      	ands	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3248      	adds	r2, #72	; 0x48
 80020d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020ec:	6979      	ldr	r1, [r7, #20]
 80020ee:	3348      	adds	r3, #72	; 0x48
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d122      	bne.n	8002144 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	431a      	orrs	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800211e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3248      	adds	r2, #72	; 0x48
 8002124:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002138:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800213a:	6979      	ldr	r1, [r7, #20]
 800213c:	3348      	adds	r3, #72	; 0x48
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d109      	bne.n	8002160 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	401a      	ands	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800215e:	e007      	b.n	8002170 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	431a      	orrs	r2, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	43db      	mvns	r3, r3
 8002182:	401a      	ands	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800218a:	e007      	b.n	800219c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	431a      	orrs	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d107      	bne.n	80021b4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021ba:	f023 0201 	bic.w	r2, r3, #1
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e006      	b.n	80021d6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
  }
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	371c      	adds	r7, #28
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40003400 	.word	0x40003400
 80021e8:	40006400 	.word	0x40006400

080021ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d12e      	bne.n	800225e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0201 	bic.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002218:	f7ff fdd0 	bl	8001dbc <HAL_GetTick>
 800221c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800221e:	e012      	b.n	8002246 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002220:	f7ff fdcc 	bl	8001dbc <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b0a      	cmp	r3, #10
 800222c:	d90b      	bls.n	8002246 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2205      	movs	r2, #5
 800223e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e012      	b.n	800226c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e5      	bne.n	8002220 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e006      	b.n	800226c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
  }
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d133      	bne.n	80022f0 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002298:	f7ff fd90 	bl	8001dbc <HAL_GetTick>
 800229c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800229e:	e012      	b.n	80022c6 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022a0:	f7ff fd8c 	bl	8001dbc <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b0a      	cmp	r3, #10
 80022ac:	d90b      	bls.n	80022c6 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2205      	movs	r2, #5
 80022be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e01b      	b.n	80022fe <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0e5      	beq.n	80022a0 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0202 	bic.w	r2, r2, #2
 80022e2:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e006      	b.n	80022fe <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
  }
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002306:	b480      	push	{r7}
 8002308:	b087      	sub	sp, #28
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800231a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d003      	beq.n	800232a <HAL_CAN_GetRxMessage+0x24>
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	2b02      	cmp	r3, #2
 8002326:	f040 80f3 	bne.w	8002510 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10e      	bne.n	800234e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d116      	bne.n	800236c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e0e7      	b.n	800251e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d107      	bne.n	800236c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0d8      	b.n	800251e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	331b      	adds	r3, #27
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	4413      	add	r3, r2
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0204 	and.w	r2, r3, #4
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10c      	bne.n	80023a4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	331b      	adds	r3, #27
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4413      	add	r3, r2
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0d5b      	lsrs	r3, r3, #21
 800239a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	e00b      	b.n	80023bc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	331b      	adds	r3, #27
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	4413      	add	r3, r2
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	08db      	lsrs	r3, r3, #3
 80023b4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	331b      	adds	r3, #27
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	4413      	add	r3, r2
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0202 	and.w	r2, r3, #2
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	331b      	adds	r3, #27
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	4413      	add	r3, r2
 80023de:	3304      	adds	r3, #4
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 020f 	and.w	r2, r3, #15
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	331b      	adds	r3, #27
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	4413      	add	r3, r2
 80023f6:	3304      	adds	r3, #4
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	331b      	adds	r3, #27
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	4413      	add	r3, r2
 800240e:	3304      	adds	r3, #4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0c1b      	lsrs	r3, r3, #16
 8002414:	b29a      	uxth	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	4413      	add	r3, r2
 8002424:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b2da      	uxtb	r2, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	4413      	add	r3, r2
 800243a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0a1a      	lsrs	r2, r3, #8
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	4413      	add	r3, r2
 8002454:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0c1a      	lsrs	r2, r3, #16
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	3302      	adds	r3, #2
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	4413      	add	r3, r2
 800246e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0e1a      	lsrs	r2, r3, #24
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	3303      	adds	r3, #3
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	4413      	add	r3, r2
 8002488:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	3304      	adds	r3, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	4413      	add	r3, r2
 80024a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	0a1a      	lsrs	r2, r3, #8
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	3305      	adds	r3, #5
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0c1a      	lsrs	r2, r3, #16
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	3306      	adds	r3, #6
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	0e1a      	lsrs	r2, r3, #24
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	3307      	adds	r3, #7
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d108      	bne.n	80024fc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0220 	orr.w	r2, r2, #32
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	e007      	b.n	800250c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0220 	orr.w	r2, r2, #32
 800250a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	e006      	b.n	800251e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
  }
}
 800251e:	4618      	mov	r0, r3
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002540:	7afb      	ldrb	r3, [r7, #11]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d002      	beq.n	800254c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002546:	7afb      	ldrb	r3, [r7, #11]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d10f      	bne.n	800256c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	e005      	b.n	800256c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800256c:	68fb      	ldr	r3, [r7, #12]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800257a:	b480      	push	{r7}
 800257c:	b085      	sub	sp, #20
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800258a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d002      	beq.n	8002598 <HAL_CAN_ActivateNotification+0x1e>
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d109      	bne.n	80025ac <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6959      	ldr	r1, [r3, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e006      	b.n	80025ba <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b085      	sub	sp, #20
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d002      	beq.n	80025e4 <HAL_CAN_DeactivateNotification+0x1e>
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d10a      	bne.n	80025fa <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6959      	ldr	r1, [r3, #20]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	43da      	mvns	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	400a      	ands	r2, r1
 80025f4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e006      	b.n	8002608 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
  }
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800261c:	2300      	movs	r3, #0
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d07c      	beq.n	8002754 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d023      	beq.n	80026ac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2201      	movs	r2, #1
 800266a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f983 	bl	8002982 <HAL_CAN_TxMailbox0CompleteCallback>
 800267c:	e016      	b.n	80026ac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d004      	beq.n	8002692 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
 8002690:	e00c      	b.n	80026ac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d004      	beq.n	80026a6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
 80026a4:	e002      	b.n	80026ac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f989 	bl	80029be <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d024      	beq.n	8002700 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f963 	bl	8002996 <HAL_CAN_TxMailbox1CompleteCallback>
 80026d0:	e016      	b.n	8002700 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d004      	beq.n	80026e6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	e00c      	b.n	8002700 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d004      	beq.n	80026fa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
 80026f8:	e002      	b.n	8002700 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f969 	bl	80029d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d024      	beq.n	8002754 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002712:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f943 	bl	80029aa <HAL_CAN_TxMailbox2CompleteCallback>
 8002724:	e016      	b.n	8002754 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d004      	beq.n	800273a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
 8002738:	e00c      	b.n	8002754 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d004      	beq.n	800274e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
 800274c:	e002      	b.n	8002754 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f949 	bl	80029e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00c      	beq.n	8002778 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	d007      	beq.n	8002778 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2210      	movs	r2, #16
 8002776:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d006      	beq.n	800279a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2208      	movs	r2, #8
 8002792:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f930 	bl	80029fa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d009      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fe fd8a 	bl	80012cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00c      	beq.n	80027dc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2210      	movs	r2, #16
 80027da:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d006      	beq.n	80027fe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2208      	movs	r2, #8
 80027f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f912 	bl	8002a22 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	d009      	beq.n	800281c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f8f9 	bl	8002a0e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2210      	movs	r2, #16
 8002836:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f8fc 	bl	8002a36 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00b      	beq.n	8002860 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2208      	movs	r2, #8
 8002858:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f8f5 	bl	8002a4a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d07b      	beq.n	8002962 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d072      	beq.n	800295a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	f043 0304 	orr.w	r3, r3, #4
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d043      	beq.n	800295a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d03e      	beq.n	800295a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028e2:	2b60      	cmp	r3, #96	; 0x60
 80028e4:	d02b      	beq.n	800293e <HAL_CAN_IRQHandler+0x32a>
 80028e6:	2b60      	cmp	r3, #96	; 0x60
 80028e8:	d82e      	bhi.n	8002948 <HAL_CAN_IRQHandler+0x334>
 80028ea:	2b50      	cmp	r3, #80	; 0x50
 80028ec:	d022      	beq.n	8002934 <HAL_CAN_IRQHandler+0x320>
 80028ee:	2b50      	cmp	r3, #80	; 0x50
 80028f0:	d82a      	bhi.n	8002948 <HAL_CAN_IRQHandler+0x334>
 80028f2:	2b40      	cmp	r3, #64	; 0x40
 80028f4:	d019      	beq.n	800292a <HAL_CAN_IRQHandler+0x316>
 80028f6:	2b40      	cmp	r3, #64	; 0x40
 80028f8:	d826      	bhi.n	8002948 <HAL_CAN_IRQHandler+0x334>
 80028fa:	2b30      	cmp	r3, #48	; 0x30
 80028fc:	d010      	beq.n	8002920 <HAL_CAN_IRQHandler+0x30c>
 80028fe:	2b30      	cmp	r3, #48	; 0x30
 8002900:	d822      	bhi.n	8002948 <HAL_CAN_IRQHandler+0x334>
 8002902:	2b10      	cmp	r3, #16
 8002904:	d002      	beq.n	800290c <HAL_CAN_IRQHandler+0x2f8>
 8002906:	2b20      	cmp	r3, #32
 8002908:	d005      	beq.n	8002916 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800290a:	e01d      	b.n	8002948 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	f043 0308 	orr.w	r3, r3, #8
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002914:	e019      	b.n	800294a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	f043 0310 	orr.w	r3, r3, #16
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800291e:	e014      	b.n	800294a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	f043 0320 	orr.w	r3, r3, #32
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002928:	e00f      	b.n	800294a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002932:	e00a      	b.n	800294a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800293c:	e005      	b.n	800294a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002946:	e000      	b.n	800294a <HAL_CAN_IRQHandler+0x336>
            break;
 8002948:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699a      	ldr	r2, [r3, #24]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002958:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2204      	movs	r2, #4
 8002960:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f872 	bl	8002a5e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800297a:	bf00      	nop
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x40>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a90:	4013      	ands	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa2:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x40>)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	60d3      	str	r3, [r2, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00
 8002ab8:	05fa0000 	.word	0x05fa0000

08002abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	f003 0307 	and.w	r3, r3, #7
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	db0b      	blt.n	8002b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	4907      	ldr	r1, [pc, #28]	; (8002b10 <__NVIC_EnableIRQ+0x38>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2001      	movs	r0, #1
 8002afa:	fa00 f202 	lsl.w	r2, r0, r2
 8002afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000e100 	.word	0xe000e100

08002b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	db0a      	blt.n	8002b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	490c      	ldr	r1, [pc, #48]	; (8002b60 <__NVIC_SetPriority+0x4c>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	0112      	lsls	r2, r2, #4
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	440b      	add	r3, r1
 8002b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b3c:	e00a      	b.n	8002b54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4908      	ldr	r1, [pc, #32]	; (8002b64 <__NVIC_SetPriority+0x50>)
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	3b04      	subs	r3, #4
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	440b      	add	r3, r1
 8002b52:	761a      	strb	r2, [r3, #24]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000e100 	.word	0xe000e100
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	; 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f1c3 0307 	rsb	r3, r3, #7
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	bf28      	it	cs
 8002b86:	2304      	movcs	r3, #4
 8002b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d902      	bls.n	8002b98 <NVIC_EncodePriority+0x30>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3b03      	subs	r3, #3
 8002b96:	e000      	b.n	8002b9a <NVIC_EncodePriority+0x32>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	401a      	ands	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43d9      	mvns	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	4313      	orrs	r3, r2
         );
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3724      	adds	r7, #36	; 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be0:	d301      	bcc.n	8002be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00f      	b.n	8002c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be6:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <SysTick_Config+0x40>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bee:	210f      	movs	r1, #15
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bf4:	f7ff ff8e 	bl	8002b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <SysTick_Config+0x40>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfe:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <SysTick_Config+0x40>)
 8002c00:	2207      	movs	r2, #7
 8002c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	e000e010 	.word	0xe000e010

08002c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff ff29 	bl	8002a74 <__NVIC_SetPriorityGrouping>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c3c:	f7ff ff3e 	bl	8002abc <__NVIC_GetPriorityGrouping>
 8002c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	6978      	ldr	r0, [r7, #20]
 8002c48:	f7ff ff8e 	bl	8002b68 <NVIC_EncodePriority>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff5d 	bl	8002b14 <__NVIC_SetPriority>
}
 8002c5a:	bf00      	nop
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff31 	bl	8002ad8 <__NVIC_EnableIRQ>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ffa2 	bl	8002bd0 <SysTick_Config>
 8002c8c:	4603      	mov	r3, r0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ca4:	f7ff f88a 	bl	8001dbc <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e099      	b.n	8002de8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd4:	e00f      	b.n	8002cf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cd6:	f7ff f871 	bl	8001dbc <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	d908      	bls.n	8002cf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2203      	movs	r2, #3
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e078      	b.n	8002de8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1e8      	bne.n	8002cd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4b38      	ldr	r3, [pc, #224]	; (8002df0 <HAL_DMA_Init+0x158>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d107      	bne.n	8002d60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f023 0307 	bic.w	r3, r3, #7
 8002d76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d117      	bne.n	8002dba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00e      	beq.n	8002dba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 faa5 	bl	80032ec <DMA_CheckFifoParam>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2240      	movs	r2, #64	; 0x40
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002db6:	2301      	movs	r3, #1
 8002db8:	e016      	b.n	8002de8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa5c 	bl	8003280 <DMA_CalcBaseAndBitshift>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	223f      	movs	r2, #63	; 0x3f
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	e010803f 	.word	0xe010803f

08002df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_DMA_Start_IT+0x26>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e048      	b.n	8002eac <HAL_DMA_Start_IT+0xb8>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d137      	bne.n	8002e9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2202      	movs	r2, #2
 8002e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f9ee 	bl	8003224 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4c:	223f      	movs	r2, #63	; 0x3f
 8002e4e:	409a      	lsls	r2, r3
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0216 	orr.w	r2, r2, #22
 8002e62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e72:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0208 	orr.w	r2, r2, #8
 8002e8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e005      	b.n	8002eaa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2280      	movs	r2, #128	; 0x80
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00c      	b.n	8002eec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2205      	movs	r2, #5
 8002ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002f04:	4b8e      	ldr	r3, [pc, #568]	; (8003140 <HAL_DMA_IRQHandler+0x248>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a8e      	ldr	r2, [pc, #568]	; (8003144 <HAL_DMA_IRQHandler+0x24c>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0a9b      	lsrs	r3, r3, #10
 8002f10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	2208      	movs	r2, #8
 8002f24:	409a      	lsls	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01a      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0204 	bic.w	r2, r2, #4
 8002f4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	2208      	movs	r2, #8
 8002f52:	409a      	lsls	r2, r3
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f68:	2201      	movs	r2, #1
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d012      	beq.n	8002f9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	2201      	movs	r2, #1
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f043 0202 	orr.w	r2, r3, #2
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d012      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00b      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc8:	f043 0204 	orr.w	r2, r3, #4
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d043      	beq.n	8003068 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d03c      	beq.n	8003068 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff2:	2210      	movs	r2, #16
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d018      	beq.n	800303a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d108      	bne.n	8003028 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	d024      	beq.n	8003068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	4798      	blx	r3
 8003026:	e01f      	b.n	8003068 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01b      	beq.n	8003068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
 8003038:	e016      	b.n	8003068 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0208 	bic.w	r2, r2, #8
 8003056:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	2220      	movs	r2, #32
 800306e:	409a      	lsls	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 808f 	beq.w	8003198 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8087 	beq.w	8003198 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308e:	2220      	movs	r2, #32
 8003090:	409a      	lsls	r2, r3
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b05      	cmp	r3, #5
 80030a0:	d136      	bne.n	8003110 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0216 	bic.w	r2, r2, #22
 80030b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <HAL_DMA_IRQHandler+0x1da>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0208 	bic.w	r2, r2, #8
 80030e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	223f      	movs	r2, #63	; 0x3f
 80030e8:	409a      	lsls	r2, r3
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003102:	2b00      	cmp	r3, #0
 8003104:	d07e      	beq.n	8003204 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4798      	blx	r3
        }
        return;
 800310e:	e079      	b.n	8003204 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01d      	beq.n	800315a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10d      	bne.n	8003148 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003130:	2b00      	cmp	r3, #0
 8003132:	d031      	beq.n	8003198 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
 800313c:	e02c      	b.n	8003198 <HAL_DMA_IRQHandler+0x2a0>
 800313e:	bf00      	nop
 8003140:	20000004 	.word	0x20000004
 8003144:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d023      	beq.n	8003198 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
 8003158:	e01e      	b.n	8003198 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10f      	bne.n	8003188 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0210 	bic.w	r2, r2, #16
 8003176:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	2b00      	cmp	r3, #0
 800319e:	d032      	beq.n	8003206 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d022      	beq.n	80031f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2205      	movs	r2, #5
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	3301      	adds	r3, #1
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d307      	bcc.n	80031e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f2      	bne.n	80031c4 <HAL_DMA_IRQHandler+0x2cc>
 80031de:	e000      	b.n	80031e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	4798      	blx	r3
 8003202:	e000      	b.n	8003206 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003204:	bf00      	nop
    }
  }
}
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003240:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b40      	cmp	r3, #64	; 0x40
 8003250:	d108      	bne.n	8003264 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003262:	e007      	b.n	8003274 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	60da      	str	r2, [r3, #12]
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	3b10      	subs	r3, #16
 8003290:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <DMA_CalcBaseAndBitshift+0x60>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800329a:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <DMA_CalcBaseAndBitshift+0x64>)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d908      	bls.n	80032c0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <DMA_CalcBaseAndBitshift+0x68>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	1d1a      	adds	r2, r3, #4
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	659a      	str	r2, [r3, #88]	; 0x58
 80032be:	e006      	b.n	80032ce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <DMA_CalcBaseAndBitshift+0x68>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	aaaaaaab 	.word	0xaaaaaaab
 80032e4:	08012340 	.word	0x08012340
 80032e8:	fffffc00 	.word	0xfffffc00

080032ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d11f      	bne.n	8003346 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d856      	bhi.n	80033ba <DMA_CheckFifoParam+0xce>
 800330c:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <DMA_CheckFifoParam+0x28>)
 800330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003312:	bf00      	nop
 8003314:	08003325 	.word	0x08003325
 8003318:	08003337 	.word	0x08003337
 800331c:	08003325 	.word	0x08003325
 8003320:	080033bb 	.word	0x080033bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d046      	beq.n	80033be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003334:	e043      	b.n	80033be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800333e:	d140      	bne.n	80033c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003344:	e03d      	b.n	80033c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334e:	d121      	bne.n	8003394 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b03      	cmp	r3, #3
 8003354:	d837      	bhi.n	80033c6 <DMA_CheckFifoParam+0xda>
 8003356:	a201      	add	r2, pc, #4	; (adr r2, 800335c <DMA_CheckFifoParam+0x70>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	0800336d 	.word	0x0800336d
 8003360:	08003373 	.word	0x08003373
 8003364:	0800336d 	.word	0x0800336d
 8003368:	08003385 	.word	0x08003385
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
      break;
 8003370:	e030      	b.n	80033d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d025      	beq.n	80033ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003382:	e022      	b.n	80033ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800338c:	d11f      	bne.n	80033ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003392:	e01c      	b.n	80033ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d903      	bls.n	80033a2 <DMA_CheckFifoParam+0xb6>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d003      	beq.n	80033a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033a0:	e018      	b.n	80033d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
      break;
 80033a6:	e015      	b.n	80033d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00e      	beq.n	80033d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
      break;
 80033b8:	e00b      	b.n	80033d2 <DMA_CheckFifoParam+0xe6>
      break;
 80033ba:	bf00      	nop
 80033bc:	e00a      	b.n	80033d4 <DMA_CheckFifoParam+0xe8>
      break;
 80033be:	bf00      	nop
 80033c0:	e008      	b.n	80033d4 <DMA_CheckFifoParam+0xe8>
      break;
 80033c2:	bf00      	nop
 80033c4:	e006      	b.n	80033d4 <DMA_CheckFifoParam+0xe8>
      break;
 80033c6:	bf00      	nop
 80033c8:	e004      	b.n	80033d4 <DMA_CheckFifoParam+0xe8>
      break;
 80033ca:	bf00      	nop
 80033cc:	e002      	b.n	80033d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80033ce:	bf00      	nop
 80033d0:	e000      	b.n	80033d4 <DMA_CheckFifoParam+0xe8>
      break;
 80033d2:	bf00      	nop
    }
  } 
  
  return status; 
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop

080033e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	e175      	b.n	80036f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003404:	2201      	movs	r2, #1
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	429a      	cmp	r2, r3
 800341e:	f040 8164 	bne.w	80036ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d005      	beq.n	800343a <HAL_GPIO_Init+0x56>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d130      	bne.n	800349c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	2203      	movs	r2, #3
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003470:	2201      	movs	r2, #1
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 0201 	and.w	r2, r3, #1
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d017      	beq.n	80034d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	2203      	movs	r2, #3
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d123      	bne.n	800352c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	08da      	lsrs	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3208      	adds	r2, #8
 80034ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	220f      	movs	r2, #15
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	08da      	lsrs	r2, r3, #3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3208      	adds	r2, #8
 8003526:	69b9      	ldr	r1, [r7, #24]
 8003528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2203      	movs	r2, #3
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0203 	and.w	r2, r3, #3
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80be 	beq.w	80036ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800356e:	4b66      	ldr	r3, [pc, #408]	; (8003708 <HAL_GPIO_Init+0x324>)
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	4a65      	ldr	r2, [pc, #404]	; (8003708 <HAL_GPIO_Init+0x324>)
 8003574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003578:	6453      	str	r3, [r2, #68]	; 0x44
 800357a:	4b63      	ldr	r3, [pc, #396]	; (8003708 <HAL_GPIO_Init+0x324>)
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003586:	4a61      	ldr	r2, [pc, #388]	; (800370c <HAL_GPIO_Init+0x328>)
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	089b      	lsrs	r3, r3, #2
 800358c:	3302      	adds	r3, #2
 800358e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003592:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	220f      	movs	r2, #15
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4013      	ands	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a58      	ldr	r2, [pc, #352]	; (8003710 <HAL_GPIO_Init+0x32c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d037      	beq.n	8003622 <HAL_GPIO_Init+0x23e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a57      	ldr	r2, [pc, #348]	; (8003714 <HAL_GPIO_Init+0x330>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d031      	beq.n	800361e <HAL_GPIO_Init+0x23a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a56      	ldr	r2, [pc, #344]	; (8003718 <HAL_GPIO_Init+0x334>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d02b      	beq.n	800361a <HAL_GPIO_Init+0x236>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a55      	ldr	r2, [pc, #340]	; (800371c <HAL_GPIO_Init+0x338>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d025      	beq.n	8003616 <HAL_GPIO_Init+0x232>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a54      	ldr	r2, [pc, #336]	; (8003720 <HAL_GPIO_Init+0x33c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01f      	beq.n	8003612 <HAL_GPIO_Init+0x22e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a53      	ldr	r2, [pc, #332]	; (8003724 <HAL_GPIO_Init+0x340>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d019      	beq.n	800360e <HAL_GPIO_Init+0x22a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a52      	ldr	r2, [pc, #328]	; (8003728 <HAL_GPIO_Init+0x344>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_GPIO_Init+0x226>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a51      	ldr	r2, [pc, #324]	; (800372c <HAL_GPIO_Init+0x348>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00d      	beq.n	8003606 <HAL_GPIO_Init+0x222>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a50      	ldr	r2, [pc, #320]	; (8003730 <HAL_GPIO_Init+0x34c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d007      	beq.n	8003602 <HAL_GPIO_Init+0x21e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a4f      	ldr	r2, [pc, #316]	; (8003734 <HAL_GPIO_Init+0x350>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <HAL_GPIO_Init+0x21a>
 80035fa:	2309      	movs	r3, #9
 80035fc:	e012      	b.n	8003624 <HAL_GPIO_Init+0x240>
 80035fe:	230a      	movs	r3, #10
 8003600:	e010      	b.n	8003624 <HAL_GPIO_Init+0x240>
 8003602:	2308      	movs	r3, #8
 8003604:	e00e      	b.n	8003624 <HAL_GPIO_Init+0x240>
 8003606:	2307      	movs	r3, #7
 8003608:	e00c      	b.n	8003624 <HAL_GPIO_Init+0x240>
 800360a:	2306      	movs	r3, #6
 800360c:	e00a      	b.n	8003624 <HAL_GPIO_Init+0x240>
 800360e:	2305      	movs	r3, #5
 8003610:	e008      	b.n	8003624 <HAL_GPIO_Init+0x240>
 8003612:	2304      	movs	r3, #4
 8003614:	e006      	b.n	8003624 <HAL_GPIO_Init+0x240>
 8003616:	2303      	movs	r3, #3
 8003618:	e004      	b.n	8003624 <HAL_GPIO_Init+0x240>
 800361a:	2302      	movs	r3, #2
 800361c:	e002      	b.n	8003624 <HAL_GPIO_Init+0x240>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_GPIO_Init+0x240>
 8003622:	2300      	movs	r3, #0
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	f002 0203 	and.w	r2, r2, #3
 800362a:	0092      	lsls	r2, r2, #2
 800362c:	4093      	lsls	r3, r2
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003634:	4935      	ldr	r1, [pc, #212]	; (800370c <HAL_GPIO_Init+0x328>)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	089b      	lsrs	r3, r3, #2
 800363a:	3302      	adds	r3, #2
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003642:	4b3d      	ldr	r3, [pc, #244]	; (8003738 <HAL_GPIO_Init+0x354>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003666:	4a34      	ldr	r2, [pc, #208]	; (8003738 <HAL_GPIO_Init+0x354>)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800366c:	4b32      	ldr	r3, [pc, #200]	; (8003738 <HAL_GPIO_Init+0x354>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003690:	4a29      	ldr	r2, [pc, #164]	; (8003738 <HAL_GPIO_Init+0x354>)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003696:	4b28      	ldr	r3, [pc, #160]	; (8003738 <HAL_GPIO_Init+0x354>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ba:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <HAL_GPIO_Init+0x354>)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c0:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <HAL_GPIO_Init+0x354>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e4:	4a14      	ldr	r2, [pc, #80]	; (8003738 <HAL_GPIO_Init+0x354>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3301      	adds	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b0f      	cmp	r3, #15
 80036f4:	f67f ae86 	bls.w	8003404 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3724      	adds	r7, #36	; 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800
 800370c:	40013800 	.word	0x40013800
 8003710:	40020000 	.word	0x40020000
 8003714:	40020400 	.word	0x40020400
 8003718:	40020800 	.word	0x40020800
 800371c:	40020c00 	.word	0x40020c00
 8003720:	40021000 	.word	0x40021000
 8003724:	40021400 	.word	0x40021400
 8003728:	40021800 	.word	0x40021800
 800372c:	40021c00 	.word	0x40021c00
 8003730:	40022000 	.word	0x40022000
 8003734:	40022400 	.word	0x40022400
 8003738:	40013c00 	.word	0x40013c00

0800373c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	887b      	ldrh	r3, [r7, #2]
 800374e:	4013      	ands	r3, r2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
 8003758:	e001      	b.n	800375e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800375e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	807b      	strh	r3, [r7, #2]
 8003778:	4613      	mov	r3, r2
 800377a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800377c:	787b      	ldrb	r3, [r7, #1]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003788:	e003      	b.n	8003792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	041a      	lsls	r2, r3, #16
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	619a      	str	r2, [r3, #24]
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037aa:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d006      	beq.n	80037c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037b6:	4a05      	ldr	r2, [pc, #20]	; (80037cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f806 	bl	80037d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40013c00 	.word	0x40013c00

080037d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e07f      	b.n	80038fa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd fe46 	bl	80014a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2224      	movs	r2, #36	; 0x24
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003838:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003848:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d107      	bne.n	8003862 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	e006      	b.n	8003870 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800386e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d104      	bne.n	8003882 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003880:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <HAL_I2C_Init+0x11c>)
 800388e:	430b      	orrs	r3, r1
 8003890:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69d9      	ldr	r1, [r3, #28]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1a      	ldr	r2, [r3, #32]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	02008000 	.word	0x02008000

08003908 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	461a      	mov	r2, r3
 8003914:	460b      	mov	r3, r1
 8003916:	817b      	strh	r3, [r7, #10]
 8003918:	4613      	mov	r3, r2
 800391a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b20      	cmp	r3, #32
 8003926:	f040 80da 	bne.w	8003ade <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_I2C_Master_Transmit+0x30>
 8003934:	2302      	movs	r3, #2
 8003936:	e0d3      	b.n	8003ae0 <HAL_I2C_Master_Transmit+0x1d8>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003940:	f7fe fa3c 	bl	8001dbc <HAL_GetTick>
 8003944:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	2319      	movs	r3, #25
 800394c:	2201      	movs	r2, #1
 800394e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f9e6 	bl	8003d24 <I2C_WaitOnFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0be      	b.n	8003ae0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2221      	movs	r2, #33	; 0x21
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2210      	movs	r2, #16
 800396e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	893a      	ldrh	r2, [r7, #8]
 8003982:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398e:	b29b      	uxth	r3, r3
 8003990:	2bff      	cmp	r3, #255	; 0xff
 8003992:	d90e      	bls.n	80039b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	22ff      	movs	r2, #255	; 0xff
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	8979      	ldrh	r1, [r7, #10]
 80039a2:	4b51      	ldr	r3, [pc, #324]	; (8003ae8 <HAL_I2C_Master_Transmit+0x1e0>)
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 fbd0 	bl	8004150 <I2C_TransferConfig>
 80039b0:	e06c      	b.n	8003a8c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	8979      	ldrh	r1, [r7, #10]
 80039c4:	4b48      	ldr	r3, [pc, #288]	; (8003ae8 <HAL_I2C_Master_Transmit+0x1e0>)
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 fbbf 	bl	8004150 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80039d2:	e05b      	b.n	8003a8c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	6a39      	ldr	r1, [r7, #32]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f9e3 	bl	8003da4 <I2C_WaitOnTXISFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e07b      	b.n	8003ae0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	781a      	ldrb	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d034      	beq.n	8003a8c <HAL_I2C_Master_Transmit+0x184>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d130      	bne.n	8003a8c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	2200      	movs	r2, #0
 8003a32:	2180      	movs	r1, #128	; 0x80
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f975 	bl	8003d24 <I2C_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e04d      	b.n	8003ae0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2bff      	cmp	r3, #255	; 0xff
 8003a4c:	d90e      	bls.n	8003a6c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	22ff      	movs	r2, #255	; 0xff
 8003a52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	8979      	ldrh	r1, [r7, #10]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 fb73 	bl	8004150 <I2C_TransferConfig>
 8003a6a:	e00f      	b.n	8003a8c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	8979      	ldrh	r1, [r7, #10]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fb62 	bl	8004150 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d19e      	bne.n	80039d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	6a39      	ldr	r1, [r7, #32]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f9c2 	bl	8003e24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e01a      	b.n	8003ae0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6859      	ldr	r1, [r3, #4]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_I2C_Master_Transmit+0x1e4>)
 8003abe:	400b      	ands	r3, r1
 8003ac0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e000      	b.n	8003ae0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
  }
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	80002000 	.word	0x80002000
 8003aec:	fe00e800 	.word	0xfe00e800

08003af0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	461a      	mov	r2, r3
 8003afc:	460b      	mov	r3, r1
 8003afe:	817b      	strh	r3, [r7, #10]
 8003b00:	4613      	mov	r3, r2
 8003b02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	f040 80db 	bne.w	8003cc8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_I2C_Master_Receive+0x30>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e0d4      	b.n	8003cca <HAL_I2C_Master_Receive+0x1da>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b28:	f7fe f948 	bl	8001dbc <HAL_GetTick>
 8003b2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	2319      	movs	r3, #25
 8003b34:	2201      	movs	r2, #1
 8003b36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f8f2 	bl	8003d24 <I2C_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e0bf      	b.n	8003cca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2222      	movs	r2, #34	; 0x22
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2210      	movs	r2, #16
 8003b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	893a      	ldrh	r2, [r7, #8]
 8003b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2bff      	cmp	r3, #255	; 0xff
 8003b7a:	d90e      	bls.n	8003b9a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	22ff      	movs	r2, #255	; 0xff
 8003b80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	8979      	ldrh	r1, [r7, #10]
 8003b8a:	4b52      	ldr	r3, [pc, #328]	; (8003cd4 <HAL_I2C_Master_Receive+0x1e4>)
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 fadc 	bl	8004150 <I2C_TransferConfig>
 8003b98:	e06d      	b.n	8003c76 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	8979      	ldrh	r1, [r7, #10]
 8003bac:	4b49      	ldr	r3, [pc, #292]	; (8003cd4 <HAL_I2C_Master_Receive+0x1e4>)
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 facb 	bl	8004150 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003bba:	e05c      	b.n	8003c76 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	6a39      	ldr	r1, [r7, #32]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f96b 	bl	8003e9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e07c      	b.n	8003cca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d034      	beq.n	8003c76 <HAL_I2C_Master_Receive+0x186>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d130      	bne.n	8003c76 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2180      	movs	r1, #128	; 0x80
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 f880 	bl	8003d24 <I2C_WaitOnFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e04d      	b.n	8003cca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2bff      	cmp	r3, #255	; 0xff
 8003c36:	d90e      	bls.n	8003c56 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	22ff      	movs	r2, #255	; 0xff
 8003c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	8979      	ldrh	r1, [r7, #10]
 8003c46:	2300      	movs	r3, #0
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 fa7e 	bl	8004150 <I2C_TransferConfig>
 8003c54:	e00f      	b.n	8003c76 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	8979      	ldrh	r1, [r7, #10]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fa6d 	bl	8004150 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d19d      	bne.n	8003bbc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	6a39      	ldr	r1, [r7, #32]
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 f8cd 	bl	8003e24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e01a      	b.n	8003cca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <HAL_I2C_Master_Receive+0x1e8>)
 8003ca8:	400b      	ands	r3, r1
 8003caa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e000      	b.n	8003cca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003cc8:	2302      	movs	r3, #2
  }
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	80002400 	.word	0x80002400
 8003cd8:	fe00e800 	.word	0xfe00e800

08003cdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d103      	bne.n	8003cfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d007      	beq.n	8003d18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	619a      	str	r2, [r3, #24]
  }
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	4613      	mov	r3, r2
 8003d32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d34:	e022      	b.n	8003d7c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d3c:	d01e      	beq.n	8003d7c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3e:	f7fe f83d 	bl	8001dbc <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d302      	bcc.n	8003d54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d113      	bne.n	8003d7c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	f043 0220 	orr.w	r2, r3, #32
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e00f      	b.n	8003d9c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4013      	ands	r3, r2
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d0cd      	beq.n	8003d36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003db0:	e02c      	b.n	8003e0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f8ea 	bl	8003f90 <I2C_IsErrorOccurred>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e02a      	b.n	8003e1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dcc:	d01e      	beq.n	8003e0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dce:	f7fd fff5 	bl	8001dbc <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d113      	bne.n	8003e0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	f043 0220 	orr.w	r2, r3, #32
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e007      	b.n	8003e1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d1cb      	bne.n	8003db2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e30:	e028      	b.n	8003e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f8aa 	bl	8003f90 <I2C_IsErrorOccurred>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e026      	b.n	8003e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e46:	f7fd ffb9 	bl	8001dbc <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d302      	bcc.n	8003e5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d113      	bne.n	8003e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e60:	f043 0220 	orr.w	r2, r3, #32
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e007      	b.n	8003e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d1cf      	bne.n	8003e32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ea8:	e064      	b.n	8003f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f86e 	bl	8003f90 <I2C_IsErrorOccurred>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e062      	b.n	8003f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d138      	bne.n	8003f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d105      	bne.n	8003ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e04e      	b.n	8003f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d107      	bne.n	8003f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2210      	movs	r2, #16
 8003efa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2204      	movs	r2, #4
 8003f00:	645a      	str	r2, [r3, #68]	; 0x44
 8003f02:	e002      	b.n	8003f0a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003f1e:	400b      	ands	r3, r1
 8003f20:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e022      	b.n	8003f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3e:	f7fd ff3d 	bl	8001dbc <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d302      	bcc.n	8003f54 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10f      	bne.n	8003f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f58:	f043 0220 	orr.w	r2, r3, #32
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e007      	b.n	8003f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d193      	bne.n	8003eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	fe00e800 	.word	0xfe00e800

08003f90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	; 0x28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d068      	beq.n	800408e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fc4:	e049      	b.n	800405a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fcc:	d045      	beq.n	800405a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fce:	f7fd fef5 	bl	8001dbc <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d302      	bcc.n	8003fe4 <I2C_IsErrorOccurred+0x54>
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d13a      	bne.n	800405a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ff6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004006:	d121      	bne.n	800404c <I2C_IsErrorOccurred+0xbc>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800400e:	d01d      	beq.n	800404c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	2b20      	cmp	r3, #32
 8004014:	d01a      	beq.n	800404c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004024:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004026:	f7fd fec9 	bl	8001dbc <HAL_GetTick>
 800402a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800402c:	e00e      	b.n	800404c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800402e:	f7fd fec5 	bl	8001dbc <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b19      	cmp	r3, #25
 800403a:	d907      	bls.n	800404c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	f043 0320 	orr.w	r3, r3, #32
 8004042:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800404a:	e006      	b.n	800405a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b20      	cmp	r3, #32
 8004058:	d1e9      	bne.n	800402e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b20      	cmp	r3, #32
 8004066:	d003      	beq.n	8004070 <I2C_IsErrorOccurred+0xe0>
 8004068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0aa      	beq.n	8003fc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004074:	2b00      	cmp	r3, #0
 8004076:	d103      	bne.n	8004080 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2220      	movs	r2, #32
 800407e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	f043 0304 	orr.w	r3, r3, #4
 8004086:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00b      	beq.n	80040b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	f043 0308 	orr.w	r3, r3, #8
 80040c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00b      	beq.n	80040fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	f043 0302 	orr.w	r3, r3, #2
 80040ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80040fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01c      	beq.n	800413e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7ff fde9 	bl	8003cdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6859      	ldr	r1, [r3, #4]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b0d      	ldr	r3, [pc, #52]	; (800414c <I2C_IsErrorOccurred+0x1bc>)
 8004116:	400b      	ands	r3, r1
 8004118:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	431a      	orrs	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800413e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004142:	4618      	mov	r0, r3
 8004144:	3728      	adds	r7, #40	; 0x28
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	fe00e800 	.word	0xfe00e800

08004150 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	460b      	mov	r3, r1
 800415c:	817b      	strh	r3, [r7, #10]
 800415e:	4613      	mov	r3, r2
 8004160:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004162:	897b      	ldrh	r3, [r7, #10]
 8004164:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004168:	7a7b      	ldrb	r3, [r7, #9]
 800416a:	041b      	lsls	r3, r3, #16
 800416c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004170:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	4313      	orrs	r3, r2
 800417a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800417e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	0d5b      	lsrs	r3, r3, #21
 800418a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800418e:	4b08      	ldr	r3, [pc, #32]	; (80041b0 <I2C_TransferConfig+0x60>)
 8004190:	430b      	orrs	r3, r1
 8004192:	43db      	mvns	r3, r3
 8004194:	ea02 0103 	and.w	r1, r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	03ff63ff 	.word	0x03ff63ff

080041b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d138      	bne.n	800423c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e032      	b.n	800423e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2224      	movs	r2, #36	; 0x24
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004206:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6819      	ldr	r1, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	e000      	b.n	800423e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800423c:	2302      	movs	r3, #2
  }
}
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b20      	cmp	r3, #32
 800425e:	d139      	bne.n	80042d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800426a:	2302      	movs	r3, #2
 800426c:	e033      	b.n	80042d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2224      	movs	r2, #36	; 0x24
 800427a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800429c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	021b      	lsls	r3, r3, #8
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042e4:	b08f      	sub	sp, #60	; 0x3c
 80042e6:	af0a      	add	r7, sp, #40	; 0x28
 80042e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e116      	b.n	8004522 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f00c f806 	bl	8010320 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2203      	movs	r2, #3
 8004318:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f004 ffdb 	bl	80092ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	687e      	ldr	r6, [r7, #4]
 8004340:	466d      	mov	r5, sp
 8004342:	f106 0410 	add.w	r4, r6, #16
 8004346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800434a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800434c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800434e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004352:	e885 0003 	stmia.w	r5, {r0, r1}
 8004356:	1d33      	adds	r3, r6, #4
 8004358:	cb0e      	ldmia	r3, {r1, r2, r3}
 800435a:	6838      	ldr	r0, [r7, #0]
 800435c:	f004 febc 	bl	80090d8 <USB_CoreInit>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e0d7      	b.n	8004522 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2100      	movs	r1, #0
 8004378:	4618      	mov	r0, r3
 800437a:	f004 ffc9 	bl	8009310 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800437e:	2300      	movs	r3, #0
 8004380:	73fb      	strb	r3, [r7, #15]
 8004382:	e04a      	b.n	800441a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004384:	7bfa      	ldrb	r2, [r7, #15]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	333d      	adds	r3, #61	; 0x3d
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004398:	7bfa      	ldrb	r2, [r7, #15]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	333c      	adds	r3, #60	; 0x3c
 80043a8:	7bfa      	ldrb	r2, [r7, #15]
 80043aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043ac:	7bfa      	ldrb	r2, [r7, #15]
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	b298      	uxth	r0, r3
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	3344      	adds	r3, #68	; 0x44
 80043c0:	4602      	mov	r2, r0
 80043c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043c4:	7bfa      	ldrb	r2, [r7, #15]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	3340      	adds	r3, #64	; 0x40
 80043d4:	2200      	movs	r2, #0
 80043d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043d8:	7bfa      	ldrb	r2, [r7, #15]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	3348      	adds	r3, #72	; 0x48
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043ec:	7bfa      	ldrb	r2, [r7, #15]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	334c      	adds	r3, #76	; 0x4c
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004400:	7bfa      	ldrb	r2, [r7, #15]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	3354      	adds	r3, #84	; 0x54
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	3301      	adds	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
 800441a:	7bfa      	ldrb	r2, [r7, #15]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	429a      	cmp	r2, r3
 8004422:	d3af      	bcc.n	8004384 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004424:	2300      	movs	r3, #0
 8004426:	73fb      	strb	r3, [r7, #15]
 8004428:	e044      	b.n	80044b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800442a:	7bfa      	ldrb	r2, [r7, #15]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004440:	7bfa      	ldrb	r2, [r7, #15]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004452:	7bfa      	ldrb	r2, [r7, #15]
 8004454:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004456:	7bfa      	ldrb	r2, [r7, #15]
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004468:	2200      	movs	r2, #0
 800446a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800446c:	7bfa      	ldrb	r2, [r7, #15]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004482:	7bfa      	ldrb	r2, [r7, #15]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004498:	7bfa      	ldrb	r2, [r7, #15]
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	3301      	adds	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	7bfa      	ldrb	r2, [r7, #15]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d3b5      	bcc.n	800442a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	687e      	ldr	r6, [r7, #4]
 80044c6:	466d      	mov	r5, sp
 80044c8:	f106 0410 	add.w	r4, r6, #16
 80044cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80044dc:	1d33      	adds	r3, r6, #4
 80044de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044e0:	6838      	ldr	r0, [r7, #0]
 80044e2:	f004 ff61 	bl	80093a8 <USB_DevInit>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e014      	b.n	8004522 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	2b01      	cmp	r3, #1
 800450e:	d102      	bne.n	8004516 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f001 f97b 	bl	800580c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f006 f8af 	bl	800a67e <USB_DevDisconnect>

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800452a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_PCD_Start+0x16>
 800453c:	2302      	movs	r3, #2
 800453e:	e012      	b.n	8004566 <HAL_PCD_Start+0x3c>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f004 febd 	bl	80092cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f006 f870 	bl	800a63c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800456e:	b590      	push	{r4, r7, lr}
 8004570:	b08d      	sub	sp, #52	; 0x34
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f006 f92e 	bl	800a7e6 <USB_GetMode>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	f040 84b7 	bne.w	8004f00 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f006 f892 	bl	800a6c0 <USB_ReadInterrupts>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 84ad 	beq.w	8004efe <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	0a1b      	lsrs	r3, r3, #8
 80045ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f006 f87f 	bl	800a6c0 <USB_ReadInterrupts>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d107      	bne.n	80045dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695a      	ldr	r2, [r3, #20]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f002 0202 	and.w	r2, r2, #2
 80045da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f006 f86d 	bl	800a6c0 <USB_ReadInterrupts>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d161      	bne.n	80046b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0210 	bic.w	r2, r2, #16
 80045fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	f003 020f 	and.w	r2, r3, #15
 800460c:	4613      	mov	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	4413      	add	r3, r2
 800461c:	3304      	adds	r3, #4
 800461e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	0c5b      	lsrs	r3, r3, #17
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	2b02      	cmp	r3, #2
 800462a:	d124      	bne.n	8004676 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004632:	4013      	ands	r3, r2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d035      	beq.n	80046a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	091b      	lsrs	r3, r3, #4
 8004640:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004646:	b29b      	uxth	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	6a38      	ldr	r0, [r7, #32]
 800464c:	f005 fea4 	bl	800a398 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	091b      	lsrs	r3, r3, #4
 8004658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800465c:	441a      	add	r2, r3
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	6a1a      	ldr	r2, [r3, #32]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800466e:	441a      	add	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	621a      	str	r2, [r3, #32]
 8004674:	e016      	b.n	80046a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	0c5b      	lsrs	r3, r3, #17
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	2b06      	cmp	r3, #6
 8004680:	d110      	bne.n	80046a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004688:	2208      	movs	r2, #8
 800468a:	4619      	mov	r1, r3
 800468c:	6a38      	ldr	r0, [r7, #32]
 800468e:	f005 fe83 	bl	800a398 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	6a1a      	ldr	r2, [r3, #32]
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800469e:	441a      	add	r2, r3
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0210 	orr.w	r2, r2, #16
 80046b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f006 f801 	bl	800a6c0 <USB_ReadInterrupts>
 80046be:	4603      	mov	r3, r0
 80046c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046c8:	f040 80a7 	bne.w	800481a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f006 f806 	bl	800a6e6 <USB_ReadDevAllOutEpInterrupt>
 80046da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80046dc:	e099      	b.n	8004812 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 808e 	beq.w	8004806 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	4611      	mov	r1, r2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f006 f82a 	bl	800a74e <USB_ReadDevOutEPInterrupt>
 80046fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00c      	beq.n	8004720 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	461a      	mov	r2, r3
 8004714:	2301      	movs	r3, #1
 8004716:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fef0 	bl	8005500 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00c      	beq.n	8004744 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	461a      	mov	r2, r3
 8004738:	2308      	movs	r3, #8
 800473a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800473c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 ffc6 	bl	80056d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475a:	461a      	mov	r2, r3
 800475c:	2310      	movs	r3, #16
 800475e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d030      	beq.n	80047cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004772:	2b80      	cmp	r3, #128	; 0x80
 8004774:	d109      	bne.n	800478a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004784:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004788:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800478a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478c:	4613      	mov	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	4413      	add	r3, r2
 800479c:	3304      	adds	r3, #4
 800479e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	78db      	ldrb	r3, [r3, #3]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d108      	bne.n	80047ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2200      	movs	r2, #0
 80047ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f00b fed7 	bl	8010568 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c6:	461a      	mov	r2, r3
 80047c8:	2302      	movs	r3, #2
 80047ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d008      	beq.n	80047e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e2:	461a      	mov	r2, r3
 80047e4:	2320      	movs	r3, #32
 80047e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fe:	461a      	mov	r2, r3
 8004800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004804:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	3301      	adds	r3, #1
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	085b      	lsrs	r3, r3, #1
 8004810:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	2b00      	cmp	r3, #0
 8004816:	f47f af62 	bne.w	80046de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f005 ff4e 	bl	800a6c0 <USB_ReadInterrupts>
 8004824:	4603      	mov	r3, r0
 8004826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800482a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800482e:	f040 80db 	bne.w	80049e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f005 ff6f 	bl	800a71a <USB_ReadDevAllInEpInterrupt>
 800483c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004842:	e0cd      	b.n	80049e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80c2 	beq.w	80049d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	4611      	mov	r1, r2
 800485a:	4618      	mov	r0, r3
 800485c:	f005 ff95 	bl	800a78a <USB_ReadDevInEPInterrupt>
 8004860:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d057      	beq.n	800491c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	2201      	movs	r2, #1
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	43db      	mvns	r3, r3
 8004886:	69f9      	ldr	r1, [r7, #28]
 8004888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800488c:	4013      	ands	r3, r2
 800488e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489c:	461a      	mov	r2, r3
 800489e:	2301      	movs	r3, #1
 80048a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d132      	bne.n	8004910 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ae:	4613      	mov	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	4413      	add	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	334c      	adds	r3, #76	; 0x4c
 80048ba:	6819      	ldr	r1, [r3, #0]
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c0:	4613      	mov	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4403      	add	r3, r0
 80048ca:	3348      	adds	r3, #72	; 0x48
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4419      	add	r1, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d4:	4613      	mov	r3, r2
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4403      	add	r3, r0
 80048de:	334c      	adds	r3, #76	; 0x4c
 80048e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d113      	bne.n	8004910 <HAL_PCD_IRQHandler+0x3a2>
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ec:	4613      	mov	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	3354      	adds	r3, #84	; 0x54
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d108      	bne.n	8004910 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004908:	461a      	mov	r2, r3
 800490a:	2101      	movs	r1, #1
 800490c:	f005 ff9e 	bl	800a84c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	b2db      	uxtb	r3, r3
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f00b fda1 	bl	801045e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004932:	461a      	mov	r2, r3
 8004934:	2308      	movs	r3, #8
 8004936:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	2b00      	cmp	r3, #0
 8004940:	d008      	beq.n	8004954 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494e:	461a      	mov	r2, r3
 8004950:	2310      	movs	r3, #16
 8004952:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496a:	461a      	mov	r2, r3
 800496c:	2340      	movs	r3, #64	; 0x40
 800496e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d023      	beq.n	80049c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800497a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800497c:	6a38      	ldr	r0, [r7, #32]
 800497e:	f004 fe71 	bl	8009664 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004984:	4613      	mov	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4413      	add	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	3338      	adds	r3, #56	; 0x38
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4413      	add	r3, r2
 8004992:	3304      	adds	r3, #4
 8004994:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	78db      	ldrb	r3, [r3, #3]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d108      	bne.n	80049b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2200      	movs	r2, #0
 80049a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	4619      	mov	r1, r3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f00b fdee 	bl	801058c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049bc:	461a      	mov	r2, r3
 80049be:	2302      	movs	r3, #2
 80049c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80049cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fd08 	bl	80053e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	3301      	adds	r3, #1
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f47f af2e 	bne.w	8004844 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f005 fe67 	bl	800a6c0 <USB_ReadInterrupts>
 80049f2:	4603      	mov	r3, r0
 80049f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049fc:	d122      	bne.n	8004a44 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a0c:	f023 0301 	bic.w	r3, r3, #1
 8004a10:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d108      	bne.n	8004a2e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004a24:	2100      	movs	r1, #0
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f00b ff68 	bl	80108fc <HAL_PCDEx_LPM_Callback>
 8004a2c:	e002      	b.n	8004a34 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f00b fd8c 	bl	801054c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695a      	ldr	r2, [r3, #20]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f005 fe39 	bl	800a6c0 <USB_ReadInterrupts>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a58:	d112      	bne.n	8004a80 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d102      	bne.n	8004a70 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f00b fd48 	bl	8010500 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f005 fe1b 	bl	800a6c0 <USB_ReadInterrupts>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a94:	d121      	bne.n	8004ada <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695a      	ldr	r2, [r3, #20]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004aa4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d111      	bne.n	8004ad4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	089b      	lsrs	r3, r3, #2
 8004ac0:	f003 020f 	and.w	r2, r3, #15
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004aca:	2101      	movs	r1, #1
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f00b ff15 	bl	80108fc <HAL_PCDEx_LPM_Callback>
 8004ad2:	e002      	b.n	8004ada <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f00b fd13 	bl	8010500 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f005 fdee 	bl	800a6c0 <USB_ReadInterrupts>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aee:	f040 80b7 	bne.w	8004c60 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2110      	movs	r1, #16
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f004 fda9 	bl	8009664 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b16:	e046      	b.n	8004ba6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b24:	461a      	mov	r2, r3
 8004b26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b2a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b5e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b9e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d3b3      	bcc.n	8004b18 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bbe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004bc2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d016      	beq.n	8004bfa <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bdc:	f043 030b 	orr.w	r3, r3, #11
 8004be0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bf2:	f043 030b 	orr.w	r3, r3, #11
 8004bf6:	6453      	str	r3, [r2, #68]	; 0x44
 8004bf8:	e015      	b.n	8004c26 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c00:	695a      	ldr	r2, [r3, #20]
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c08:	4619      	mov	r1, r3
 8004c0a:	f242 032b 	movw	r3, #8235	; 0x202b
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c20:	f043 030b 	orr.w	r3, r3, #11
 8004c24:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c34:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c38:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f005 fdfe 	bl	800a84c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f005 fd2b 	bl	800a6c0 <USB_ReadInterrupts>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c74:	d124      	bne.n	8004cc0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f005 fdc2 	bl	800a804 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f004 fd6a 	bl	800975e <USB_GetDevSpeed>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681c      	ldr	r4, [r3, #0]
 8004c96:	f001 fa7d 	bl	8006194 <HAL_RCC_GetHCLKFreq>
 8004c9a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f004 fa6f 	bl	8009188 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f00b fbff 	bl	80104ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695a      	ldr	r2, [r3, #20]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f005 fcfb 	bl	800a6c0 <USB_ReadInterrupts>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d10a      	bne.n	8004cea <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f00b fbdc 	bl	8010492 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695a      	ldr	r2, [r3, #20]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f002 0208 	and.w	r2, r2, #8
 8004ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f005 fce6 	bl	800a6c0 <USB_ReadInterrupts>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfa:	2b80      	cmp	r3, #128	; 0x80
 8004cfc:	d122      	bne.n	8004d44 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d0e:	e014      	b.n	8004d3a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d14:	4613      	mov	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d105      	bne.n	8004d34 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fb27 	bl	8005382 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	3301      	adds	r3, #1
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d3e5      	bcc.n	8004d10 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f005 fcb9 	bl	800a6c0 <USB_ReadInterrupts>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d58:	d13b      	bne.n	8004dd2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5e:	e02b      	b.n	8004db8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d74:	4613      	mov	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3340      	adds	r3, #64	; 0x40
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d115      	bne.n	8004db2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004d86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	da12      	bge.n	8004db2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d90:	4613      	mov	r3, r2
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	333f      	adds	r3, #63	; 0x3f
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	4619      	mov	r1, r3
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fae8 	bl	8005382 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	3301      	adds	r3, #1
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d3ce      	bcc.n	8004d60 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695a      	ldr	r2, [r3, #20]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004dd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f005 fc72 	bl	800a6c0 <USB_ReadInterrupts>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004de6:	d155      	bne.n	8004e94 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004de8:	2301      	movs	r3, #1
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
 8004dec:	e045      	b.n	8004e7a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e02:	4613      	mov	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d12e      	bne.n	8004e74 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e16:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	da2b      	bge.n	8004e74 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004e28:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d121      	bne.n	8004e74 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e34:	4613      	mov	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004e42:	2201      	movs	r2, #1
 8004e44:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10a      	bne.n	8004e74 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e70:	6053      	str	r3, [r2, #4]
            break;
 8004e72:	e007      	b.n	8004e84 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	3301      	adds	r3, #1
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d3b4      	bcc.n	8004dee <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695a      	ldr	r2, [r3, #20]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f005 fc11 	bl	800a6c0 <USB_ReadInterrupts>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea8:	d10a      	bne.n	8004ec0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f00b fb80 	bl	80105b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695a      	ldr	r2, [r3, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f005 fbfb 	bl	800a6c0 <USB_ReadInterrupts>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d115      	bne.n	8004f00 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f00b fb70 	bl	80105cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6859      	ldr	r1, [r3, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
 8004efc:	e000      	b.n	8004f00 <HAL_PCD_IRQHandler+0x992>
      return;
 8004efe:	bf00      	nop
    }
  }
}
 8004f00:	3734      	adds	r7, #52	; 0x34
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd90      	pop	{r4, r7, pc}

08004f06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_PCD_SetAddress+0x1a>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	e013      	b.n	8004f48 <HAL_PCD_SetAddress+0x42>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	78fa      	ldrb	r2, [r7, #3]
 8004f2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	4611      	mov	r1, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f005 fb59 	bl	800a5f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	4608      	mov	r0, r1
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4603      	mov	r3, r0
 8004f60:	70fb      	strb	r3, [r7, #3]
 8004f62:	460b      	mov	r3, r1
 8004f64:	803b      	strh	r3, [r7, #0]
 8004f66:	4613      	mov	r3, r2
 8004f68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	da0f      	bge.n	8004f96 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	f003 020f 	and.w	r2, r3, #15
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	3338      	adds	r3, #56	; 0x38
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	4413      	add	r3, r2
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	705a      	strb	r2, [r3, #1]
 8004f94:	e00f      	b.n	8004fb6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	f003 020f 	and.w	r2, r3, #15
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	4413      	add	r3, r2
 8004fac:	3304      	adds	r3, #4
 8004fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004fb6:	78fb      	ldrb	r3, [r7, #3]
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004fc2:	883a      	ldrh	r2, [r7, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	78ba      	ldrb	r2, [r7, #2]
 8004fcc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	785b      	ldrb	r3, [r3, #1]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d004      	beq.n	8004fe0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004fe0:	78bb      	ldrb	r3, [r7, #2]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d102      	bne.n	8004fec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_PCD_EP_Open+0xaa>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e00e      	b.n	8005018 <HAL_PCD_EP_Open+0xc8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68f9      	ldr	r1, [r7, #12]
 8005008:	4618      	mov	r0, r3
 800500a:	f004 fbcd 	bl	80097a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005016:	7afb      	ldrb	r3, [r7, #11]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800502c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005030:	2b00      	cmp	r3, #0
 8005032:	da0f      	bge.n	8005054 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	f003 020f 	and.w	r2, r3, #15
 800503a:	4613      	mov	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	3338      	adds	r3, #56	; 0x38
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	4413      	add	r3, r2
 8005048:	3304      	adds	r3, #4
 800504a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	705a      	strb	r2, [r3, #1]
 8005052:	e00f      	b.n	8005074 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	f003 020f 	and.w	r2, r3, #15
 800505a:	4613      	mov	r3, r2
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	4413      	add	r3, r2
 800506a:	3304      	adds	r3, #4
 800506c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	b2da      	uxtb	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_PCD_EP_Close+0x6e>
 800508a:	2302      	movs	r3, #2
 800508c:	e00e      	b.n	80050ac <HAL_PCD_EP_Close+0x8c>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68f9      	ldr	r1, [r7, #12]
 800509c:	4618      	mov	r0, r3
 800509e:	f004 fc0b 	bl	80098b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	607a      	str	r2, [r7, #4]
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	460b      	mov	r3, r1
 80050c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050c4:	7afb      	ldrb	r3, [r7, #11]
 80050c6:	f003 020f 	and.w	r2, r3, #15
 80050ca:	4613      	mov	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	3304      	adds	r3, #4
 80050dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2200      	movs	r2, #0
 80050ee:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2200      	movs	r2, #0
 80050f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050f6:	7afb      	ldrb	r3, [r7, #11]
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d102      	bne.n	8005110 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005110:	7afb      	ldrb	r3, [r7, #11]
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	6979      	ldr	r1, [r7, #20]
 8005128:	f004 fef2 	bl	8009f10 <USB_EP0StartXfer>
 800512c:	e008      	b.n	8005140 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	6979      	ldr	r1, [r7, #20]
 800513c:	f004 fc98 	bl	8009a70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	460b      	mov	r3, r1
 8005154:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	f003 020f 	and.w	r2, r3, #15
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	440b      	add	r3, r1
 8005168:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800516c:	681b      	ldr	r3, [r3, #0]
}
 800516e:	4618      	mov	r0, r3
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b086      	sub	sp, #24
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
 8005186:	460b      	mov	r3, r1
 8005188:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800518a:	7afb      	ldrb	r3, [r7, #11]
 800518c:	f003 020f 	and.w	r2, r3, #15
 8005190:	4613      	mov	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	3338      	adds	r3, #56	; 0x38
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	3304      	adds	r3, #4
 80051a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2200      	movs	r2, #0
 80051b2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2201      	movs	r2, #1
 80051b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ba:	7afb      	ldrb	r3, [r7, #11]
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d102      	bne.n	80051d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051d4:	7afb      	ldrb	r3, [r7, #11]
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	6979      	ldr	r1, [r7, #20]
 80051ec:	f004 fe90 	bl	8009f10 <USB_EP0StartXfer>
 80051f0:	e008      	b.n	8005204 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	6979      	ldr	r1, [r7, #20]
 8005200:	f004 fc36 	bl	8009a70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	460b      	mov	r3, r1
 8005218:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	f003 020f 	and.w	r2, r3, #15
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	429a      	cmp	r2, r3
 8005226:	d901      	bls.n	800522c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e050      	b.n	80052ce <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800522c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005230:	2b00      	cmp	r3, #0
 8005232:	da0f      	bge.n	8005254 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	f003 020f 	and.w	r2, r3, #15
 800523a:	4613      	mov	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	3338      	adds	r3, #56	; 0x38
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	4413      	add	r3, r2
 8005248:	3304      	adds	r3, #4
 800524a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	705a      	strb	r2, [r3, #1]
 8005252:	e00d      	b.n	8005270 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005254:	78fa      	ldrb	r2, [r7, #3]
 8005256:	4613      	mov	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	4413      	add	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	4413      	add	r3, r2
 8005266:	3304      	adds	r3, #4
 8005268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	b2da      	uxtb	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_PCD_EP_SetStall+0x82>
 800528c:	2302      	movs	r3, #2
 800528e:	e01e      	b.n	80052ce <HAL_PCD_EP_SetStall+0xc0>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68f9      	ldr	r1, [r7, #12]
 800529e:	4618      	mov	r0, r3
 80052a0:	f005 f8d2 	bl	800a448 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10a      	bne.n	80052c4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	b2d9      	uxtb	r1, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052be:	461a      	mov	r2, r3
 80052c0:	f005 fac4 	bl	800a84c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	f003 020f 	and.w	r2, r3, #15
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d901      	bls.n	80052f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e042      	b.n	800537a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	da0f      	bge.n	800531c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	f003 020f 	and.w	r2, r3, #15
 8005302:	4613      	mov	r3, r2
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	3338      	adds	r3, #56	; 0x38
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	4413      	add	r3, r2
 8005310:	3304      	adds	r3, #4
 8005312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	705a      	strb	r2, [r3, #1]
 800531a:	e00f      	b.n	800533c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	f003 020f 	and.w	r2, r3, #15
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	4413      	add	r3, r2
 8005332:	3304      	adds	r3, #4
 8005334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005342:	78fb      	ldrb	r3, [r7, #3]
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	b2da      	uxtb	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_PCD_EP_ClrStall+0x86>
 8005358:	2302      	movs	r3, #2
 800535a:	e00e      	b.n	800537a <HAL_PCD_EP_ClrStall+0xa4>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68f9      	ldr	r1, [r7, #12]
 800536a:	4618      	mov	r0, r3
 800536c:	f005 f8da 	bl	800a524 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	460b      	mov	r3, r1
 800538c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800538e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005392:	2b00      	cmp	r3, #0
 8005394:	da0c      	bge.n	80053b0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005396:	78fb      	ldrb	r3, [r7, #3]
 8005398:	f003 020f 	and.w	r2, r3, #15
 800539c:	4613      	mov	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	3338      	adds	r3, #56	; 0x38
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	4413      	add	r3, r2
 80053aa:	3304      	adds	r3, #4
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	e00c      	b.n	80053ca <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	f003 020f 	and.w	r2, r3, #15
 80053b6:	4613      	mov	r3, r2
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	4413      	add	r3, r2
 80053c6:	3304      	adds	r3, #4
 80053c8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f004 fef9 	bl	800a1c8 <USB_EPStopXfer>
 80053d6:	4603      	mov	r3, r0
 80053d8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80053da:	7afb      	ldrb	r3, [r7, #11]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08a      	sub	sp, #40	; 0x28
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	4613      	mov	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	3338      	adds	r3, #56	; 0x38
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	4413      	add	r3, r2
 8005408:	3304      	adds	r3, #4
 800540a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	429a      	cmp	r2, r3
 8005416:	d901      	bls.n	800541c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e06c      	b.n	80054f6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	699a      	ldr	r2, [r3, #24]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	429a      	cmp	r2, r3
 8005430:	d902      	bls.n	8005438 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	3303      	adds	r3, #3
 800543c:	089b      	lsrs	r3, r3, #2
 800543e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005440:	e02b      	b.n	800549a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	429a      	cmp	r2, r3
 8005456:	d902      	bls.n	800545e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	3303      	adds	r3, #3
 8005462:	089b      	lsrs	r3, r3, #2
 8005464:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6919      	ldr	r1, [r3, #16]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	b2da      	uxtb	r2, r3
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005476:	b2db      	uxtb	r3, r3
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	4603      	mov	r3, r0
 800547c:	6978      	ldr	r0, [r7, #20]
 800547e:	f004 ff4d 	bl	800a31c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	691a      	ldr	r2, [r3, #16]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	441a      	add	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a1a      	ldr	r2, [r3, #32]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	441a      	add	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d809      	bhi.n	80054c4 <PCD_WriteEmptyTxFifo+0xe0>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a1a      	ldr	r2, [r3, #32]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d203      	bcs.n	80054c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1be      	bne.n	8005442 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	699a      	ldr	r2, [r3, #24]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d811      	bhi.n	80054f4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	2201      	movs	r2, #1
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	43db      	mvns	r3, r3
 80054ea:	6939      	ldr	r1, [r7, #16]
 80054ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054f0:	4013      	ands	r3, r2
 80054f2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	333c      	adds	r3, #60	; 0x3c
 8005518:	3304      	adds	r3, #4
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d17b      	bne.n	800562e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d015      	beq.n	800556c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	4a61      	ldr	r2, [pc, #388]	; (80056c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	f240 80b9 	bls.w	80056bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 80b3 	beq.w	80056bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005562:	461a      	mov	r2, r3
 8005564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005568:	6093      	str	r3, [r2, #8]
 800556a:	e0a7      	b.n	80056bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b00      	cmp	r3, #0
 8005574:	d009      	beq.n	800558a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005582:	461a      	mov	r2, r3
 8005584:	2320      	movs	r3, #32
 8005586:	6093      	str	r3, [r2, #8]
 8005588:	e098      	b.n	80056bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005590:	2b00      	cmp	r3, #0
 8005592:	f040 8093 	bne.w	80056bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4a4b      	ldr	r2, [pc, #300]	; (80056c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d90f      	bls.n	80055be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b4:	461a      	mov	r2, r3
 80055b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ba:	6093      	str	r3, [r2, #8]
 80055bc:	e07e      	b.n	80056bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	4613      	mov	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	4413      	add	r3, r2
 80055d0:	3304      	adds	r3, #4
 80055d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	0159      	lsls	r1, r3, #5
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	440b      	add	r3, r1
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ea:	1ad2      	subs	r2, r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d114      	bne.n	8005620 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005608:	461a      	mov	r2, r3
 800560a:	2101      	movs	r1, #1
 800560c:	f005 f91e 	bl	800a84c <USB_EP0_OutStart>
 8005610:	e006      	b.n	8005620 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	441a      	add	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f00a fefe 	bl	8010428 <HAL_PCD_DataOutStageCallback>
 800562c:	e046      	b.n	80056bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	4a26      	ldr	r2, [pc, #152]	; (80056cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d124      	bne.n	8005680 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564c:	461a      	mov	r2, r3
 800564e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005652:	6093      	str	r3, [r2, #8]
 8005654:	e032      	b.n	80056bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566c:	461a      	mov	r2, r3
 800566e:	2320      	movs	r3, #32
 8005670:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	4619      	mov	r1, r3
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f00a fed5 	bl	8010428 <HAL_PCD_DataOutStageCallback>
 800567e:	e01d      	b.n	80056bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d114      	bne.n	80056b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	4613      	mov	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d108      	bne.n	80056b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056a8:	461a      	mov	r2, r3
 80056aa:	2100      	movs	r1, #0
 80056ac:	f005 f8ce 	bl	800a84c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f00a feb6 	bl	8010428 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	4f54300a 	.word	0x4f54300a
 80056cc:	4f54310a 	.word	0x4f54310a

080056d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	333c      	adds	r3, #60	; 0x3c
 80056e8:	3304      	adds	r3, #4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4a15      	ldr	r2, [pc, #84]	; (8005758 <PCD_EP_OutSetupPacket_int+0x88>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d90e      	bls.n	8005724 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800570c:	2b00      	cmp	r3, #0
 800570e:	d009      	beq.n	8005724 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	461a      	mov	r2, r3
 800571e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005722:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f00a fe6d 	bl	8010404 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4a0a      	ldr	r2, [pc, #40]	; (8005758 <PCD_EP_OutSetupPacket_int+0x88>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d90c      	bls.n	800574c <PCD_EP_OutSetupPacket_int+0x7c>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d108      	bne.n	800574c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005744:	461a      	mov	r2, r3
 8005746:	2101      	movs	r1, #1
 8005748:	f005 f880 	bl	800a84c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	4f54300a 	.word	0x4f54300a

0800575c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	70fb      	strb	r3, [r7, #3]
 8005768:	4613      	mov	r3, r2
 800576a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d107      	bne.n	800578a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800577a:	883b      	ldrh	r3, [r7, #0]
 800577c:	0419      	lsls	r1, r3, #16
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	430a      	orrs	r2, r1
 8005786:	629a      	str	r2, [r3, #40]	; 0x28
 8005788:	e028      	b.n	80057dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	0c1b      	lsrs	r3, r3, #16
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	4413      	add	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005798:	2300      	movs	r3, #0
 800579a:	73fb      	strb	r3, [r7, #15]
 800579c:	e00d      	b.n	80057ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	3340      	adds	r3, #64	; 0x40
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	0c1b      	lsrs	r3, r3, #16
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	4413      	add	r3, r2
 80057b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
 80057b6:	3301      	adds	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
 80057ba:	7bfa      	ldrb	r2, [r7, #15]
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	3b01      	subs	r3, #1
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d3ec      	bcc.n	800579e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80057c4:	883b      	ldrh	r3, [r7, #0]
 80057c6:	0418      	lsls	r0, r3, #16
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6819      	ldr	r1, [r3, #0]
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	3b01      	subs	r3, #1
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	4302      	orrs	r2, r0
 80057d4:	3340      	adds	r3, #64	; 0x40
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	440b      	add	r3, r1
 80057da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	460b      	mov	r3, r1
 80057f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	887a      	ldrh	r2, [r7, #2]
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800583a:	4b05      	ldr	r3, [pc, #20]	; (8005850 <HAL_PCDEx_ActivateLPM+0x44>)
 800583c:	4313      	orrs	r3, r2
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	10000003 	.word	0x10000003

08005854 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800585c:	2300      	movs	r3, #0
 800585e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e29b      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 8087 	beq.w	8005986 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005878:	4b96      	ldr	r3, [pc, #600]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 030c 	and.w	r3, r3, #12
 8005880:	2b04      	cmp	r3, #4
 8005882:	d00c      	beq.n	800589e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005884:	4b93      	ldr	r3, [pc, #588]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 030c 	and.w	r3, r3, #12
 800588c:	2b08      	cmp	r3, #8
 800588e:	d112      	bne.n	80058b6 <HAL_RCC_OscConfig+0x62>
 8005890:	4b90      	ldr	r3, [pc, #576]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800589c:	d10b      	bne.n	80058b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800589e:	4b8d      	ldr	r3, [pc, #564]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d06c      	beq.n	8005984 <HAL_RCC_OscConfig+0x130>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d168      	bne.n	8005984 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e275      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058be:	d106      	bne.n	80058ce <HAL_RCC_OscConfig+0x7a>
 80058c0:	4b84      	ldr	r3, [pc, #528]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a83      	ldr	r2, [pc, #524]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 80058c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	e02e      	b.n	800592c <HAL_RCC_OscConfig+0xd8>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10c      	bne.n	80058f0 <HAL_RCC_OscConfig+0x9c>
 80058d6:	4b7f      	ldr	r3, [pc, #508]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a7e      	ldr	r2, [pc, #504]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 80058dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	4b7c      	ldr	r3, [pc, #496]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a7b      	ldr	r2, [pc, #492]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 80058e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	e01d      	b.n	800592c <HAL_RCC_OscConfig+0xd8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058f8:	d10c      	bne.n	8005914 <HAL_RCC_OscConfig+0xc0>
 80058fa:	4b76      	ldr	r3, [pc, #472]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a75      	ldr	r2, [pc, #468]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	4b73      	ldr	r3, [pc, #460]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a72      	ldr	r2, [pc, #456]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 800590c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	e00b      	b.n	800592c <HAL_RCC_OscConfig+0xd8>
 8005914:	4b6f      	ldr	r3, [pc, #444]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a6e      	ldr	r2, [pc, #440]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 800591a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	4b6c      	ldr	r3, [pc, #432]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a6b      	ldr	r2, [pc, #428]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800592a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d013      	beq.n	800595c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005934:	f7fc fa42 	bl	8001dbc <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800593c:	f7fc fa3e 	bl	8001dbc <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b64      	cmp	r3, #100	; 0x64
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e229      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800594e:	4b61      	ldr	r3, [pc, #388]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0f0      	beq.n	800593c <HAL_RCC_OscConfig+0xe8>
 800595a:	e014      	b.n	8005986 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595c:	f7fc fa2e 	bl	8001dbc <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005964:	f7fc fa2a 	bl	8001dbc <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b64      	cmp	r3, #100	; 0x64
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e215      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005976:	4b57      	ldr	r3, [pc, #348]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f0      	bne.n	8005964 <HAL_RCC_OscConfig+0x110>
 8005982:	e000      	b.n	8005986 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d069      	beq.n	8005a66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005992:	4b50      	ldr	r3, [pc, #320]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 030c 	and.w	r3, r3, #12
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00b      	beq.n	80059b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800599e:	4b4d      	ldr	r3, [pc, #308]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 030c 	and.w	r3, r3, #12
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d11c      	bne.n	80059e4 <HAL_RCC_OscConfig+0x190>
 80059aa:	4b4a      	ldr	r3, [pc, #296]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d116      	bne.n	80059e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059b6:	4b47      	ldr	r3, [pc, #284]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d005      	beq.n	80059ce <HAL_RCC_OscConfig+0x17a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d001      	beq.n	80059ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e1e9      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ce:	4b41      	ldr	r3, [pc, #260]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	493d      	ldr	r1, [pc, #244]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059e2:	e040      	b.n	8005a66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d023      	beq.n	8005a34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059ec:	4b39      	ldr	r3, [pc, #228]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a38      	ldr	r2, [pc, #224]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f8:	f7fc f9e0 	bl	8001dbc <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a00:	f7fc f9dc 	bl	8001dbc <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e1c7      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a12:	4b30      	ldr	r3, [pc, #192]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0f0      	beq.n	8005a00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a1e:	4b2d      	ldr	r3, [pc, #180]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	4929      	ldr	r1, [pc, #164]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	600b      	str	r3, [r1, #0]
 8005a32:	e018      	b.n	8005a66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a34:	4b27      	ldr	r3, [pc, #156]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a26      	ldr	r2, [pc, #152]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fc f9bc 	bl	8001dbc <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a48:	f7fc f9b8 	bl	8001dbc <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e1a3      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a5a:	4b1e      	ldr	r3, [pc, #120]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f0      	bne.n	8005a48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d038      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d019      	beq.n	8005aae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a7a:	4b16      	ldr	r3, [pc, #88]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a7e:	4a15      	ldr	r2, [pc, #84]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a86:	f7fc f999 	bl	8001dbc <HAL_GetTick>
 8005a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a8e:	f7fc f995 	bl	8001dbc <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e180      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aa0:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0f0      	beq.n	8005a8e <HAL_RCC_OscConfig+0x23a>
 8005aac:	e01a      	b.n	8005ae4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005aae:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab2:	4a08      	ldr	r2, [pc, #32]	; (8005ad4 <HAL_RCC_OscConfig+0x280>)
 8005ab4:	f023 0301 	bic.w	r3, r3, #1
 8005ab8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aba:	f7fc f97f 	bl	8001dbc <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ac2:	f7fc f97b 	bl	8001dbc <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d903      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e166      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>
 8005ad4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ad8:	4b92      	ldr	r3, [pc, #584]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1ee      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 80a4 	beq.w	8005c3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005af2:	4b8c      	ldr	r3, [pc, #560]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10d      	bne.n	8005b1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005afe:	4b89      	ldr	r3, [pc, #548]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	4a88      	ldr	r2, [pc, #544]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b08:	6413      	str	r3, [r2, #64]	; 0x40
 8005b0a:	4b86      	ldr	r3, [pc, #536]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b12:	60bb      	str	r3, [r7, #8]
 8005b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b16:	2301      	movs	r3, #1
 8005b18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b1a:	4b83      	ldr	r3, [pc, #524]	; (8005d28 <HAL_RCC_OscConfig+0x4d4>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d118      	bne.n	8005b58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005b26:	4b80      	ldr	r3, [pc, #512]	; (8005d28 <HAL_RCC_OscConfig+0x4d4>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a7f      	ldr	r2, [pc, #508]	; (8005d28 <HAL_RCC_OscConfig+0x4d4>)
 8005b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b32:	f7fc f943 	bl	8001dbc <HAL_GetTick>
 8005b36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b38:	e008      	b.n	8005b4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b3a:	f7fc f93f 	bl	8001dbc <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b64      	cmp	r3, #100	; 0x64
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e12a      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b4c:	4b76      	ldr	r3, [pc, #472]	; (8005d28 <HAL_RCC_OscConfig+0x4d4>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0f0      	beq.n	8005b3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d106      	bne.n	8005b6e <HAL_RCC_OscConfig+0x31a>
 8005b60:	4b70      	ldr	r3, [pc, #448]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b64:	4a6f      	ldr	r2, [pc, #444]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005b66:	f043 0301 	orr.w	r3, r3, #1
 8005b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b6c:	e02d      	b.n	8005bca <HAL_RCC_OscConfig+0x376>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10c      	bne.n	8005b90 <HAL_RCC_OscConfig+0x33c>
 8005b76:	4b6b      	ldr	r3, [pc, #428]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7a:	4a6a      	ldr	r2, [pc, #424]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005b7c:	f023 0301 	bic.w	r3, r3, #1
 8005b80:	6713      	str	r3, [r2, #112]	; 0x70
 8005b82:	4b68      	ldr	r3, [pc, #416]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	4a67      	ldr	r2, [pc, #412]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005b88:	f023 0304 	bic.w	r3, r3, #4
 8005b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b8e:	e01c      	b.n	8005bca <HAL_RCC_OscConfig+0x376>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	2b05      	cmp	r3, #5
 8005b96:	d10c      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x35e>
 8005b98:	4b62      	ldr	r3, [pc, #392]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9c:	4a61      	ldr	r2, [pc, #388]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005b9e:	f043 0304 	orr.w	r3, r3, #4
 8005ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ba4:	4b5f      	ldr	r3, [pc, #380]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	4a5e      	ldr	r2, [pc, #376]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005baa:	f043 0301 	orr.w	r3, r3, #1
 8005bae:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb0:	e00b      	b.n	8005bca <HAL_RCC_OscConfig+0x376>
 8005bb2:	4b5c      	ldr	r3, [pc, #368]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb6:	4a5b      	ldr	r2, [pc, #364]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005bb8:	f023 0301 	bic.w	r3, r3, #1
 8005bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bbe:	4b59      	ldr	r3, [pc, #356]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	4a58      	ldr	r2, [pc, #352]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005bc4:	f023 0304 	bic.w	r3, r3, #4
 8005bc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d015      	beq.n	8005bfe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd2:	f7fc f8f3 	bl	8001dbc <HAL_GetTick>
 8005bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd8:	e00a      	b.n	8005bf0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bda:	f7fc f8ef 	bl	8001dbc <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e0d8      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf0:	4b4c      	ldr	r3, [pc, #304]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0ee      	beq.n	8005bda <HAL_RCC_OscConfig+0x386>
 8005bfc:	e014      	b.n	8005c28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bfe:	f7fc f8dd 	bl	8001dbc <HAL_GetTick>
 8005c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c04:	e00a      	b.n	8005c1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c06:	f7fc f8d9 	bl	8001dbc <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e0c2      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c1c:	4b41      	ldr	r3, [pc, #260]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1ee      	bne.n	8005c06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d105      	bne.n	8005c3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c2e:	4b3d      	ldr	r3, [pc, #244]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	4a3c      	ldr	r2, [pc, #240]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 80ae 	beq.w	8005da0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c44:	4b37      	ldr	r3, [pc, #220]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 030c 	and.w	r3, r3, #12
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d06d      	beq.n	8005d2c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d14b      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c58:	4b32      	ldr	r3, [pc, #200]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a31      	ldr	r2, [pc, #196]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c64:	f7fc f8aa 	bl	8001dbc <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c6c:	f7fc f8a6 	bl	8001dbc <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e091      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c7e:	4b29      	ldr	r3, [pc, #164]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1f0      	bne.n	8005c6c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69da      	ldr	r2, [r3, #28]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	019b      	lsls	r3, r3, #6
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	041b      	lsls	r3, r3, #16
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	061b      	lsls	r3, r3, #24
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb4:	071b      	lsls	r3, r3, #28
 8005cb6:	491b      	ldr	r1, [pc, #108]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cbc:	4b19      	ldr	r3, [pc, #100]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a18      	ldr	r2, [pc, #96]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc8:	f7fc f878 	bl	8001dbc <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd0:	f7fc f874 	bl	8001dbc <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e05f      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce2:	4b10      	ldr	r3, [pc, #64]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0f0      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x47c>
 8005cee:	e057      	b.n	8005da0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf0:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a0b      	ldr	r2, [pc, #44]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfc:	f7fc f85e 	bl	8001dbc <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d04:	f7fc f85a 	bl	8001dbc <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e045      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d16:	4b03      	ldr	r3, [pc, #12]	; (8005d24 <HAL_RCC_OscConfig+0x4d0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f0      	bne.n	8005d04 <HAL_RCC_OscConfig+0x4b0>
 8005d22:	e03d      	b.n	8005da0 <HAL_RCC_OscConfig+0x54c>
 8005d24:	40023800 	.word	0x40023800
 8005d28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005d2c:	4b1f      	ldr	r3, [pc, #124]	; (8005dac <HAL_RCC_OscConfig+0x558>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d030      	beq.n	8005d9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d129      	bne.n	8005d9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d122      	bne.n	8005d9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d119      	bne.n	8005d9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	085b      	lsrs	r3, r3, #1
 8005d74:	3b01      	subs	r3, #1
 8005d76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d10f      	bne.n	8005d9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d107      	bne.n	8005d9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d96:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d001      	beq.n	8005da0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	40023800 	.word	0x40023800

08005db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e0d0      	b.n	8005f6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dc8:	4b6a      	ldr	r3, [pc, #424]	; (8005f74 <HAL_RCC_ClockConfig+0x1c4>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d910      	bls.n	8005df8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd6:	4b67      	ldr	r3, [pc, #412]	; (8005f74 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f023 020f 	bic.w	r2, r3, #15
 8005dde:	4965      	ldr	r1, [pc, #404]	; (8005f74 <HAL_RCC_ClockConfig+0x1c4>)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de6:	4b63      	ldr	r3, [pc, #396]	; (8005f74 <HAL_RCC_ClockConfig+0x1c4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0b8      	b.n	8005f6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d020      	beq.n	8005e46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e10:	4b59      	ldr	r3, [pc, #356]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	4a58      	ldr	r2, [pc, #352]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005e16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d005      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e28:	4b53      	ldr	r3, [pc, #332]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	4a52      	ldr	r2, [pc, #328]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005e2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e34:	4b50      	ldr	r3, [pc, #320]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	494d      	ldr	r1, [pc, #308]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d040      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d107      	bne.n	8005e6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e5a:	4b47      	ldr	r3, [pc, #284]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d115      	bne.n	8005e92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e07f      	b.n	8005f6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d107      	bne.n	8005e82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e72:	4b41      	ldr	r3, [pc, #260]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e073      	b.n	8005f6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e82:	4b3d      	ldr	r3, [pc, #244]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e06b      	b.n	8005f6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e92:	4b39      	ldr	r3, [pc, #228]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f023 0203 	bic.w	r2, r3, #3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	4936      	ldr	r1, [pc, #216]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ea4:	f7fb ff8a 	bl	8001dbc <HAL_GetTick>
 8005ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eaa:	e00a      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eac:	f7fb ff86 	bl	8001dbc <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e053      	b.n	8005f6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec2:	4b2d      	ldr	r3, [pc, #180]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f003 020c 	and.w	r2, r3, #12
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d1eb      	bne.n	8005eac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ed4:	4b27      	ldr	r3, [pc, #156]	; (8005f74 <HAL_RCC_ClockConfig+0x1c4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 030f 	and.w	r3, r3, #15
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d210      	bcs.n	8005f04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee2:	4b24      	ldr	r3, [pc, #144]	; (8005f74 <HAL_RCC_ClockConfig+0x1c4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f023 020f 	bic.w	r2, r3, #15
 8005eea:	4922      	ldr	r1, [pc, #136]	; (8005f74 <HAL_RCC_ClockConfig+0x1c4>)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ef2:	4b20      	ldr	r3, [pc, #128]	; (8005f74 <HAL_RCC_ClockConfig+0x1c4>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d001      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e032      	b.n	8005f6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f10:	4b19      	ldr	r3, [pc, #100]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	4916      	ldr	r1, [pc, #88]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d009      	beq.n	8005f42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f2e:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	490e      	ldr	r1, [pc, #56]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f42:	f000 f821 	bl	8005f88 <HAL_RCC_GetSysClockFreq>
 8005f46:	4602      	mov	r2, r0
 8005f48:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	091b      	lsrs	r3, r3, #4
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	490a      	ldr	r1, [pc, #40]	; (8005f7c <HAL_RCC_ClockConfig+0x1cc>)
 8005f54:	5ccb      	ldrb	r3, [r1, r3]
 8005f56:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5a:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <HAL_RCC_ClockConfig+0x1d0>)
 8005f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f5e:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <HAL_RCC_ClockConfig+0x1d4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fb fee6 	bl	8001d34 <HAL_InitTick>

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	40023c00 	.word	0x40023c00
 8005f78:	40023800 	.word	0x40023800
 8005f7c:	08012328 	.word	0x08012328
 8005f80:	20000004 	.word	0x20000004
 8005f84:	20000008 	.word	0x20000008

08005f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f8c:	b094      	sub	sp, #80	; 0x50
 8005f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	647b      	str	r3, [r7, #68]	; 0x44
 8005f94:	2300      	movs	r3, #0
 8005f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f98:	2300      	movs	r3, #0
 8005f9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fa0:	4b79      	ldr	r3, [pc, #484]	; (8006188 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 030c 	and.w	r3, r3, #12
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d00d      	beq.n	8005fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	f200 80e1 	bhi.w	8006174 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <HAL_RCC_GetSysClockFreq+0x34>
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d003      	beq.n	8005fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005fba:	e0db      	b.n	8006174 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fbc:	4b73      	ldr	r3, [pc, #460]	; (800618c <HAL_RCC_GetSysClockFreq+0x204>)
 8005fbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fc0:	e0db      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fc2:	4b73      	ldr	r3, [pc, #460]	; (8006190 <HAL_RCC_GetSysClockFreq+0x208>)
 8005fc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fc6:	e0d8      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fc8:	4b6f      	ldr	r3, [pc, #444]	; (8006188 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fd0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005fd2:	4b6d      	ldr	r3, [pc, #436]	; (8006188 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d063      	beq.n	80060a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fde:	4b6a      	ldr	r3, [pc, #424]	; (8006188 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	099b      	lsrs	r3, r3, #6
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fe8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	462b      	mov	r3, r5
 8005ffe:	f04f 0000 	mov.w	r0, #0
 8006002:	f04f 0100 	mov.w	r1, #0
 8006006:	0159      	lsls	r1, r3, #5
 8006008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800600c:	0150      	lsls	r0, r2, #5
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	4621      	mov	r1, r4
 8006014:	1a51      	subs	r1, r2, r1
 8006016:	6139      	str	r1, [r7, #16]
 8006018:	4629      	mov	r1, r5
 800601a:	eb63 0301 	sbc.w	r3, r3, r1
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800602c:	4659      	mov	r1, fp
 800602e:	018b      	lsls	r3, r1, #6
 8006030:	4651      	mov	r1, sl
 8006032:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006036:	4651      	mov	r1, sl
 8006038:	018a      	lsls	r2, r1, #6
 800603a:	4651      	mov	r1, sl
 800603c:	ebb2 0801 	subs.w	r8, r2, r1
 8006040:	4659      	mov	r1, fp
 8006042:	eb63 0901 	sbc.w	r9, r3, r1
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800605a:	4690      	mov	r8, r2
 800605c:	4699      	mov	r9, r3
 800605e:	4623      	mov	r3, r4
 8006060:	eb18 0303 	adds.w	r3, r8, r3
 8006064:	60bb      	str	r3, [r7, #8]
 8006066:	462b      	mov	r3, r5
 8006068:	eb49 0303 	adc.w	r3, r9, r3
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800607a:	4629      	mov	r1, r5
 800607c:	024b      	lsls	r3, r1, #9
 800607e:	4621      	mov	r1, r4
 8006080:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006084:	4621      	mov	r1, r4
 8006086:	024a      	lsls	r2, r1, #9
 8006088:	4610      	mov	r0, r2
 800608a:	4619      	mov	r1, r3
 800608c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800608e:	2200      	movs	r2, #0
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
 8006092:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006094:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006098:	f7fa f922 	bl	80002e0 <__aeabi_uldivmod>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4613      	mov	r3, r2
 80060a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060a4:	e058      	b.n	8006158 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060a6:	4b38      	ldr	r3, [pc, #224]	; (8006188 <HAL_RCC_GetSysClockFreq+0x200>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	099b      	lsrs	r3, r3, #6
 80060ac:	2200      	movs	r2, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	4611      	mov	r1, r2
 80060b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060b6:	623b      	str	r3, [r7, #32]
 80060b8:	2300      	movs	r3, #0
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
 80060bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	f04f 0000 	mov.w	r0, #0
 80060c8:	f04f 0100 	mov.w	r1, #0
 80060cc:	0159      	lsls	r1, r3, #5
 80060ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060d2:	0150      	lsls	r0, r2, #5
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4641      	mov	r1, r8
 80060da:	ebb2 0a01 	subs.w	sl, r2, r1
 80060de:	4649      	mov	r1, r9
 80060e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060f8:	ebb2 040a 	subs.w	r4, r2, sl
 80060fc:	eb63 050b 	sbc.w	r5, r3, fp
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	00eb      	lsls	r3, r5, #3
 800610a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800610e:	00e2      	lsls	r2, r4, #3
 8006110:	4614      	mov	r4, r2
 8006112:	461d      	mov	r5, r3
 8006114:	4643      	mov	r3, r8
 8006116:	18e3      	adds	r3, r4, r3
 8006118:	603b      	str	r3, [r7, #0]
 800611a:	464b      	mov	r3, r9
 800611c:	eb45 0303 	adc.w	r3, r5, r3
 8006120:	607b      	str	r3, [r7, #4]
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800612e:	4629      	mov	r1, r5
 8006130:	028b      	lsls	r3, r1, #10
 8006132:	4621      	mov	r1, r4
 8006134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006138:	4621      	mov	r1, r4
 800613a:	028a      	lsls	r2, r1, #10
 800613c:	4610      	mov	r0, r2
 800613e:	4619      	mov	r1, r3
 8006140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006142:	2200      	movs	r2, #0
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	61fa      	str	r2, [r7, #28]
 8006148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800614c:	f7fa f8c8 	bl	80002e0 <__aeabi_uldivmod>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	4613      	mov	r3, r2
 8006156:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006158:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <HAL_RCC_GetSysClockFreq+0x200>)
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	0c1b      	lsrs	r3, r3, #16
 800615e:	f003 0303 	and.w	r3, r3, #3
 8006162:	3301      	adds	r3, #1
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006168:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800616a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800616c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006170:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006172:	e002      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006174:	4b05      	ldr	r3, [pc, #20]	; (800618c <HAL_RCC_GetSysClockFreq+0x204>)
 8006176:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800617a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800617c:	4618      	mov	r0, r3
 800617e:	3750      	adds	r7, #80	; 0x50
 8006180:	46bd      	mov	sp, r7
 8006182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006186:	bf00      	nop
 8006188:	40023800 	.word	0x40023800
 800618c:	00f42400 	.word	0x00f42400
 8006190:	007a1200 	.word	0x007a1200

08006194 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006198:	4b03      	ldr	r3, [pc, #12]	; (80061a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800619a:	681b      	ldr	r3, [r3, #0]
}
 800619c:	4618      	mov	r0, r3
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	20000004 	.word	0x20000004

080061ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061b0:	f7ff fff0 	bl	8006194 <HAL_RCC_GetHCLKFreq>
 80061b4:	4602      	mov	r2, r0
 80061b6:	4b05      	ldr	r3, [pc, #20]	; (80061cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	0a9b      	lsrs	r3, r3, #10
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	4903      	ldr	r1, [pc, #12]	; (80061d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061c2:	5ccb      	ldrb	r3, [r1, r3]
 80061c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	40023800 	.word	0x40023800
 80061d0:	08012338 	.word	0x08012338

080061d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061d8:	f7ff ffdc 	bl	8006194 <HAL_RCC_GetHCLKFreq>
 80061dc:	4602      	mov	r2, r0
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	0b5b      	lsrs	r3, r3, #13
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	4903      	ldr	r1, [pc, #12]	; (80061f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061ea:	5ccb      	ldrb	r3, [r1, r3]
 80061ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	40023800 	.word	0x40023800
 80061f8:	08012338 	.word	0x08012338

080061fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b088      	sub	sp, #32
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006204:	2300      	movs	r3, #0
 8006206:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006210:	2300      	movs	r3, #0
 8006212:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d012      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006224:	4b69      	ldr	r3, [pc, #420]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	4a68      	ldr	r2, [pc, #416]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800622a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800622e:	6093      	str	r3, [r2, #8]
 8006230:	4b66      	ldr	r3, [pc, #408]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006238:	4964      	ldr	r1, [pc, #400]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800623a:	4313      	orrs	r3, r2
 800623c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006246:	2301      	movs	r3, #1
 8006248:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d017      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006256:	4b5d      	ldr	r3, [pc, #372]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800625c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006264:	4959      	ldr	r1, [pc, #356]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006274:	d101      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006276:	2301      	movs	r3, #1
 8006278:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006282:	2301      	movs	r3, #1
 8006284:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d017      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006292:	4b4e      	ldr	r3, [pc, #312]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006298:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a0:	494a      	ldr	r1, [pc, #296]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062b0:	d101      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80062b2:	2301      	movs	r3, #1
 80062b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80062be:	2301      	movs	r3, #1
 80062c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80062ce:	2301      	movs	r3, #1
 80062d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 808b 	beq.w	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062e0:	4b3a      	ldr	r3, [pc, #232]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e4:	4a39      	ldr	r2, [pc, #228]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ea:	6413      	str	r3, [r2, #64]	; 0x40
 80062ec:	4b37      	ldr	r3, [pc, #220]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f4:	60bb      	str	r3, [r7, #8]
 80062f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062f8:	4b35      	ldr	r3, [pc, #212]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a34      	ldr	r2, [pc, #208]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006304:	f7fb fd5a 	bl	8001dbc <HAL_GetTick>
 8006308:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800630a:	e008      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800630c:	f7fb fd56 	bl	8001dbc <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b64      	cmp	r3, #100	; 0x64
 8006318:	d901      	bls.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e38f      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800631e:	4b2c      	ldr	r3, [pc, #176]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0f0      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800632a:	4b28      	ldr	r3, [pc, #160]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800632c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006332:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d035      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	429a      	cmp	r2, r3
 8006346:	d02e      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006348:	4b20      	ldr	r3, [pc, #128]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006350:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006352:	4b1e      	ldr	r3, [pc, #120]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006356:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800635c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800635e:	4b1b      	ldr	r3, [pc, #108]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006362:	4a1a      	ldr	r2, [pc, #104]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006368:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800636a:	4a18      	ldr	r2, [pc, #96]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006370:	4b16      	ldr	r3, [pc, #88]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b01      	cmp	r3, #1
 800637a:	d114      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637c:	f7fb fd1e 	bl	8001dbc <HAL_GetTick>
 8006380:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006382:	e00a      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006384:	f7fb fd1a 	bl	8001dbc <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006392:	4293      	cmp	r3, r2
 8006394:	d901      	bls.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e351      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800639a:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800639c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0ee      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b2:	d111      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80063b4:	4b05      	ldr	r3, [pc, #20]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80063c0:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80063c2:	400b      	ands	r3, r1
 80063c4:	4901      	ldr	r1, [pc, #4]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	608b      	str	r3, [r1, #8]
 80063ca:	e00b      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80063cc:	40023800 	.word	0x40023800
 80063d0:	40007000 	.word	0x40007000
 80063d4:	0ffffcff 	.word	0x0ffffcff
 80063d8:	4bac      	ldr	r3, [pc, #688]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	4aab      	ldr	r2, [pc, #684]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80063e2:	6093      	str	r3, [r2, #8]
 80063e4:	4ba9      	ldr	r3, [pc, #676]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063f0:	49a6      	ldr	r1, [pc, #664]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0310 	and.w	r3, r3, #16
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d010      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006402:	4ba2      	ldr	r3, [pc, #648]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006408:	4aa0      	ldr	r2, [pc, #640]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800640a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800640e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006412:	4b9e      	ldr	r3, [pc, #632]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006414:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	499b      	ldr	r1, [pc, #620]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006430:	4b96      	ldr	r3, [pc, #600]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006436:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800643e:	4993      	ldr	r1, [pc, #588]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006440:	4313      	orrs	r3, r2
 8006442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006452:	4b8e      	ldr	r3, [pc, #568]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006458:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006460:	498a      	ldr	r1, [pc, #552]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00a      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006474:	4b85      	ldr	r3, [pc, #532]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006482:	4982      	ldr	r1, [pc, #520]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006484:	4313      	orrs	r3, r2
 8006486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006496:	4b7d      	ldr	r3, [pc, #500]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a4:	4979      	ldr	r1, [pc, #484]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064b8:	4b74      	ldr	r3, [pc, #464]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064be:	f023 0203 	bic.w	r2, r3, #3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c6:	4971      	ldr	r1, [pc, #452]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064da:	4b6c      	ldr	r3, [pc, #432]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e0:	f023 020c 	bic.w	r2, r3, #12
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e8:	4968      	ldr	r1, [pc, #416]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064fc:	4b63      	ldr	r3, [pc, #396]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006502:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650a:	4960      	ldr	r1, [pc, #384]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800650c:	4313      	orrs	r3, r2
 800650e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800651e:	4b5b      	ldr	r3, [pc, #364]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006524:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800652c:	4957      	ldr	r1, [pc, #348]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006540:	4b52      	ldr	r3, [pc, #328]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006546:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654e:	494f      	ldr	r1, [pc, #316]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006562:	4b4a      	ldr	r3, [pc, #296]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006568:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006570:	4946      	ldr	r1, [pc, #280]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006572:	4313      	orrs	r3, r2
 8006574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00a      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006584:	4b41      	ldr	r3, [pc, #260]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006592:	493e      	ldr	r1, [pc, #248]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006594:	4313      	orrs	r3, r2
 8006596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80065a6:	4b39      	ldr	r3, [pc, #228]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b4:	4935      	ldr	r1, [pc, #212]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065c8:	4b30      	ldr	r3, [pc, #192]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065d6:	492d      	ldr	r1, [pc, #180]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d011      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80065ea:	4b28      	ldr	r3, [pc, #160]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065f8:	4924      	ldr	r1, [pc, #144]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006604:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006608:	d101      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800660a:	2301      	movs	r3, #1
 800660c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800661a:	2301      	movs	r3, #1
 800661c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800662a:	4b18      	ldr	r3, [pc, #96]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800662c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006630:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006638:	4914      	ldr	r1, [pc, #80]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800663a:	4313      	orrs	r3, r2
 800663c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00b      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800664c:	4b0f      	ldr	r3, [pc, #60]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800664e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006652:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800665c:	490b      	ldr	r1, [pc, #44]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800665e:	4313      	orrs	r3, r2
 8006660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00f      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006670:	4b06      	ldr	r3, [pc, #24]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006676:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006680:	4902      	ldr	r1, [pc, #8]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006688:	e002      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800668a:	bf00      	nop
 800668c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800669c:	4b8a      	ldr	r3, [pc, #552]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800669e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ac:	4986      	ldr	r1, [pc, #536]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00b      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80066c0:	4b81      	ldr	r3, [pc, #516]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066d0:	497d      	ldr	r1, [pc, #500]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d006      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 80d6 	beq.w	8006898 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066ec:	4b76      	ldr	r3, [pc, #472]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a75      	ldr	r2, [pc, #468]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066f8:	f7fb fb60 	bl	8001dbc <HAL_GetTick>
 80066fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066fe:	e008      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006700:	f7fb fb5c 	bl	8001dbc <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b64      	cmp	r3, #100	; 0x64
 800670c:	d901      	bls.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e195      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006712:	4b6d      	ldr	r3, [pc, #436]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f0      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d021      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672e:	2b00      	cmp	r3, #0
 8006730:	d11d      	bne.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006732:	4b65      	ldr	r3, [pc, #404]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006738:	0c1b      	lsrs	r3, r3, #16
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006740:	4b61      	ldr	r3, [pc, #388]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006746:	0e1b      	lsrs	r3, r3, #24
 8006748:	f003 030f 	and.w	r3, r3, #15
 800674c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	019a      	lsls	r2, r3, #6
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	041b      	lsls	r3, r3, #16
 8006758:	431a      	orrs	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	061b      	lsls	r3, r3, #24
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	071b      	lsls	r3, r3, #28
 8006766:	4958      	ldr	r1, [pc, #352]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006768:	4313      	orrs	r3, r2
 800676a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d004      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006782:	d00a      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800678c:	2b00      	cmp	r3, #0
 800678e:	d02e      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006798:	d129      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800679a:	4b4b      	ldr	r3, [pc, #300]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800679c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067a0:	0c1b      	lsrs	r3, r3, #16
 80067a2:	f003 0303 	and.w	r3, r3, #3
 80067a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067a8:	4b47      	ldr	r3, [pc, #284]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ae:	0f1b      	lsrs	r3, r3, #28
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	019a      	lsls	r2, r3, #6
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	041b      	lsls	r3, r3, #16
 80067c0:	431a      	orrs	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	061b      	lsls	r3, r3, #24
 80067c8:	431a      	orrs	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	071b      	lsls	r3, r3, #28
 80067ce:	493e      	ldr	r1, [pc, #248]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80067d6:	4b3c      	ldr	r3, [pc, #240]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067dc:	f023 021f 	bic.w	r2, r3, #31
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	3b01      	subs	r3, #1
 80067e6:	4938      	ldr	r1, [pc, #224]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d01d      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80067fa:	4b33      	ldr	r3, [pc, #204]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006800:	0e1b      	lsrs	r3, r3, #24
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006808:	4b2f      	ldr	r3, [pc, #188]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800680a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800680e:	0f1b      	lsrs	r3, r3, #28
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	019a      	lsls	r2, r3, #6
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	041b      	lsls	r3, r3, #16
 8006822:	431a      	orrs	r2, r3
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	061b      	lsls	r3, r3, #24
 8006828:	431a      	orrs	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	071b      	lsls	r3, r3, #28
 800682e:	4926      	ldr	r1, [pc, #152]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d011      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	019a      	lsls	r2, r3, #6
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	041b      	lsls	r3, r3, #16
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	061b      	lsls	r3, r3, #24
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	071b      	lsls	r3, r3, #28
 800685e:	491a      	ldr	r1, [pc, #104]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006860:	4313      	orrs	r3, r2
 8006862:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006866:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a17      	ldr	r2, [pc, #92]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800686c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006872:	f7fb faa3 	bl	8001dbc <HAL_GetTick>
 8006876:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006878:	e008      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800687a:	f7fb fa9f 	bl	8001dbc <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b64      	cmp	r3, #100	; 0x64
 8006886:	d901      	bls.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e0d8      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800688c:	4b0e      	ldr	r3, [pc, #56]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d0f0      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2b01      	cmp	r3, #1
 800689c:	f040 80ce 	bne.w	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80068a0:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a08      	ldr	r2, [pc, #32]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068ac:	f7fb fa86 	bl	8001dbc <HAL_GetTick>
 80068b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068b2:	e00b      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068b4:	f7fb fa82 	bl	8001dbc <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b64      	cmp	r3, #100	; 0x64
 80068c0:	d904      	bls.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e0bb      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80068c6:	bf00      	nop
 80068c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068cc:	4b5e      	ldr	r3, [pc, #376]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068d8:	d0ec      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d02e      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d12a      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006902:	4b51      	ldr	r3, [pc, #324]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006908:	0c1b      	lsrs	r3, r3, #16
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006910:	4b4d      	ldr	r3, [pc, #308]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006916:	0f1b      	lsrs	r3, r3, #28
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	019a      	lsls	r2, r3, #6
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	041b      	lsls	r3, r3, #16
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	061b      	lsls	r3, r3, #24
 8006930:	431a      	orrs	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	071b      	lsls	r3, r3, #28
 8006936:	4944      	ldr	r1, [pc, #272]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006938:	4313      	orrs	r3, r2
 800693a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800693e:	4b42      	ldr	r3, [pc, #264]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006944:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694c:	3b01      	subs	r3, #1
 800694e:	021b      	lsls	r3, r3, #8
 8006950:	493d      	ldr	r1, [pc, #244]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006952:	4313      	orrs	r3, r2
 8006954:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d022      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800696c:	d11d      	bne.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800696e:	4b36      	ldr	r3, [pc, #216]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006974:	0e1b      	lsrs	r3, r3, #24
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800697c:	4b32      	ldr	r3, [pc, #200]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800697e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006982:	0f1b      	lsrs	r3, r3, #28
 8006984:	f003 0307 	and.w	r3, r3, #7
 8006988:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	019a      	lsls	r2, r3, #6
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	041b      	lsls	r3, r3, #16
 8006996:	431a      	orrs	r2, r3
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	061b      	lsls	r3, r3, #24
 800699c:	431a      	orrs	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	071b      	lsls	r3, r3, #28
 80069a2:	4929      	ldr	r1, [pc, #164]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0308 	and.w	r3, r3, #8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d028      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80069b6:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069bc:	0e1b      	lsrs	r3, r3, #24
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80069c4:	4b20      	ldr	r3, [pc, #128]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ca:	0c1b      	lsrs	r3, r3, #16
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	019a      	lsls	r2, r3, #6
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	041b      	lsls	r3, r3, #16
 80069dc:	431a      	orrs	r2, r3
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	061b      	lsls	r3, r3, #24
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	071b      	lsls	r3, r3, #28
 80069ea:	4917      	ldr	r1, [pc, #92]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80069f2:	4b15      	ldr	r3, [pc, #84]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	4911      	ldr	r1, [pc, #68]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006a08:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a0e      	ldr	r2, [pc, #56]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a14:	f7fb f9d2 	bl	8001dbc <HAL_GetTick>
 8006a18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a1c:	f7fb f9ce 	bl	8001dbc <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b64      	cmp	r3, #100	; 0x64
 8006a28:	d901      	bls.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e007      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a2e:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a3a:	d1ef      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3720      	adds	r7, #32
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40023800 	.word	0x40023800

08006a4c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e022      	b.n	8006aa4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d105      	bne.n	8006a76 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7fa fd75 	bl	8001560 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2203      	movs	r2, #3
 8006a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f814 	bl	8006aac <HAL_SD_InitCard>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e00a      	b.n	8006aa4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006aac:	b5b0      	push	{r4, r5, r7, lr}
 8006aae:	b08e      	sub	sp, #56	; 0x38
 8006ab0:	af04      	add	r7, sp, #16
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006abc:	2300      	movs	r3, #0
 8006abe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006ac8:	2376      	movs	r3, #118	; 0x76
 8006aca:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681d      	ldr	r5, [r3, #0]
 8006ad0:	466c      	mov	r4, sp
 8006ad2:	f107 0314 	add.w	r3, r7, #20
 8006ad6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ada:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ade:	f107 0308 	add.w	r3, r7, #8
 8006ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	f001 fdc5 	bl	8008674 <SDMMC_Init>
 8006aea:	4603      	mov	r3, r0
 8006aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e059      	b.n	8006bb0 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b0a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f001 fdf9 	bl	8008708 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b24:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006b26:	2002      	movs	r0, #2
 8006b28:	f7fb f954 	bl	8001dd4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 ff59 	bl	80079e4 <SD_PowerON>
 8006b32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00b      	beq.n	8006b52 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e02e      	b.n	8006bb0 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fe78 	bl	8007848 <SD_InitCard>
 8006b58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00b      	beq.n	8006b78 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e01b      	b.n	8006bb0 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 fe53 	bl	800882c <SDMMC_CmdBlockLength>
 8006b86:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00f      	beq.n	8006bae <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a09      	ldr	r2, [pc, #36]	; (8006bb8 <HAL_SD_InitCard+0x10c>)
 8006b94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e000      	b.n	8006bb0 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3728      	adds	r7, #40	; 0x28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8006bb8:	004005ff 	.word	0x004005ff

08006bbc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08c      	sub	sp, #48	; 0x30
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d107      	bne.n	8006be4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e0c3      	b.n	8006d6c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	f040 80bc 	bne.w	8006d6a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	441a      	add	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d907      	bls.n	8006c16 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e0aa      	b.n	8006d6c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2203      	movs	r2, #3
 8006c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2200      	movs	r2, #0
 8006c24:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006c34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	4a4e      	ldr	r2, [pc, #312]	; (8006d74 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006c3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	4a4d      	ldr	r2, [pc, #308]	; (8006d78 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006c44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	2200      	movs	r2, #0
 8006c54:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3380      	adds	r3, #128	; 0x80
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	025b      	lsls	r3, r3, #9
 8006c84:	089b      	lsrs	r3, r3, #2
 8006c86:	f7fc f8b5 	bl	8002df4 <HAL_DMA_Start_IT>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d017      	beq.n	8006cc0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006c9e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a35      	ldr	r2, [pc, #212]	; (8006d7c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006ca6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e055      	b.n	8006d6c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0208 	orr.w	r2, r2, #8
 8006cce:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d002      	beq.n	8006cde <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	025b      	lsls	r3, r3, #9
 8006cdc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ce2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	025b      	lsls	r3, r3, #9
 8006ce8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006cea:	2390      	movs	r3, #144	; 0x90
 8006cec:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006cee:	2302      	movs	r3, #2
 8006cf0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f107 0210 	add.w	r2, r7, #16
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f001 fd65 	bl	80087d4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d90a      	bls.n	8006d26 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2282      	movs	r2, #130	; 0x82
 8006d14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f001 fdc9 	bl	80088b4 <SDMMC_CmdReadMultiBlock>
 8006d22:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006d24:	e009      	b.n	8006d3a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2281      	movs	r2, #129	; 0x81
 8006d2a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 fd9c 	bl	8008870 <SDMMC_CmdReadSingleBlock>
 8006d38:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d012      	beq.n	8006d66 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a0d      	ldr	r2, [pc, #52]	; (8006d7c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006d46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e002      	b.n	8006d6c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	e000      	b.n	8006d6c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006d6a:	2302      	movs	r3, #2
  }
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3730      	adds	r7, #48	; 0x30
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	08007657 	.word	0x08007657
 8006d78:	080076c9 	.word	0x080076c9
 8006d7c:	004005ff 	.word	0x004005ff

08006d80 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08c      	sub	sp, #48	; 0x30
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d107      	bne.n	8006da8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0c6      	b.n	8006f36 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	f040 80bf 	bne.w	8006f34 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	441a      	add	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d907      	bls.n	8006dda <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e0ad      	b.n	8006f36 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2203      	movs	r2, #3
 8006dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2200      	movs	r2, #0
 8006de8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 021a 	orr.w	r2, r2, #26
 8006df8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfe:	4a50      	ldr	r2, [pc, #320]	; (8006f40 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e06:	4a4f      	ldr	r2, [pc, #316]	; (8006f44 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006e08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0e:	2200      	movs	r2, #0
 8006e10:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d002      	beq.n	8006e20 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	025b      	lsls	r3, r3, #9
 8006e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d90a      	bls.n	8006e3c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	22a0      	movs	r2, #160	; 0xa0
 8006e2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e32:	4618      	mov	r0, r3
 8006e34:	f001 fd82 	bl	800893c <SDMMC_CmdWriteMultiBlock>
 8006e38:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006e3a:	e009      	b.n	8006e50 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2290      	movs	r2, #144	; 0x90
 8006e40:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 fd55 	bl	80088f8 <SDMMC_CmdWriteSingleBlock>
 8006e4e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d012      	beq.n	8006e7c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a3b      	ldr	r2, [pc, #236]	; (8006f48 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006e5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e64:	431a      	orrs	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e05c      	b.n	8006f36 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0208 	orr.w	r2, r2, #8
 8006e8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e90:	2240      	movs	r2, #64	; 0x40
 8006e92:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006eb4:	68b9      	ldr	r1, [r7, #8]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3380      	adds	r3, #128	; 0x80
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	025b      	lsls	r3, r3, #9
 8006ec2:	089b      	lsrs	r3, r3, #2
 8006ec4:	f7fb ff96 	bl	8002df4 <HAL_DMA_Start_IT>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d01a      	beq.n	8006f04 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 021a 	bic.w	r2, r2, #26
 8006edc:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a19      	ldr	r2, [pc, #100]	; (8006f48 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006ee4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e018      	b.n	8006f36 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f08:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	025b      	lsls	r3, r3, #9
 8006f0e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006f10:	2390      	movs	r3, #144	; 0x90
 8006f12:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006f14:	2300      	movs	r3, #0
 8006f16:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f107 0210 	add.w	r2, r7, #16
 8006f28:	4611      	mov	r1, r2
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f001 fc52 	bl	80087d4 <SDMMC_ConfigData>

      return HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	e000      	b.n	8006f36 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006f34:	2302      	movs	r3, #2
  }
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3730      	adds	r7, #48	; 0x30
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	0800762d 	.word	0x0800762d
 8006f44:	080076c9 	.word	0x080076c9
 8006f48:	004005ff 	.word	0x004005ff

08006f4c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f58:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d008      	beq.n	8006f7a <HAL_SD_IRQHandler+0x2e>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f003 0308 	and.w	r3, r3, #8
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fdec 	bl	8007b50 <SD_Read_IT>
 8006f78:	e15a      	b.n	8007230 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 808d 	beq.w	80070a4 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	4b9a      	ldr	r3, [pc, #616]	; (8007208 <HAL_SD_IRQHandler+0x2bc>)
 8006fa0:	400b      	ands	r3, r1
 8006fa2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0201 	bic.w	r2, r2, #1
 8006fb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f003 0308 	and.w	r3, r3, #8
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d039      	beq.n	8007032 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <HAL_SD_IRQHandler+0x86>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d011      	beq.n	8006ff6 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 fcd2 	bl	8008980 <SDMMC_CmdStopTransfer>
 8006fdc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d008      	beq.n	8006ff6 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f921 	bl	8007238 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f240 523a 	movw	r2, #1338	; 0x53a
 8006ffe:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d104      	bne.n	8007022 <HAL_SD_IRQHandler+0xd6>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f003 fd3e 	bl	800aaa4 <HAL_SD_RxCpltCallback>
 8007028:	e102      	b.n	8007230 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f003 fd30 	bl	800aa90 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007030:	e0fe      	b.n	8007230 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 80f9 	beq.w	8007230 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f003 0320 	and.w	r3, r3, #32
 8007044:	2b00      	cmp	r3, #0
 8007046:	d011      	beq.n	800706c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4618      	mov	r0, r3
 800704e:	f001 fc97 	bl	8008980 <SDMMC_CmdStopTransfer>
 8007052:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d008      	beq.n	800706c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	431a      	orrs	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f8e6 	bl	8007238 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	f040 80dc 	bne.w	8007230 <HAL_SD_IRQHandler+0x2e4>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	f040 80d6 	bne.w	8007230 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0208 	bic.w	r2, r2, #8
 8007092:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f003 fcf7 	bl	800aa90 <HAL_SD_TxCpltCallback>
}
 80070a2:	e0c5      	b.n	8007230 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d008      	beq.n	80070c4 <HAL_SD_IRQHandler+0x178>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f003 0308 	and.w	r3, r3, #8
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fd98 	bl	8007bf2 <SD_Write_IT>
 80070c2:	e0b5      	b.n	8007230 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ca:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 80ae 	beq.w	8007230 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d005      	beq.n	80070ee <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	f043 0202 	orr.w	r2, r3, #2
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007100:	f043 0208 	orr.w	r2, r3, #8
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	f043 0220 	orr.w	r2, r3, #32
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007128:	f003 0310 	and.w	r3, r3, #16
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007134:	f043 0210 	orr.w	r2, r3, #16
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f240 523a 	movw	r2, #1338	; 0x53a
 8007144:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007154:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4618      	mov	r0, r3
 800715c:	f001 fc10 	bl	8008980 <SDMMC_CmdStopTransfer>
 8007160:	4602      	mov	r2, r0
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	431a      	orrs	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f003 0308 	and.w	r3, r3, #8
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f857 	bl	8007238 <HAL_SD_ErrorCallback>
}
 800718a:	e051      	b.n	8007230 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007192:	2b00      	cmp	r3, #0
 8007194:	d04c      	beq.n	8007230 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f003 0310 	and.w	r3, r3, #16
 800719c:	2b00      	cmp	r3, #0
 800719e:	d104      	bne.n	80071aa <HAL_SD_IRQHandler+0x25e>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d011      	beq.n	80071ce <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ae:	4a17      	ldr	r2, [pc, #92]	; (800720c <HAL_SD_IRQHandler+0x2c0>)
 80071b0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fb fe7c 	bl	8002eb4 <HAL_DMA_Abort_IT>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d036      	beq.n	8007230 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 fad0 	bl	800776c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80071cc:	e030      	b.n	8007230 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d104      	bne.n	80071e2 <HAL_SD_IRQHandler+0x296>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d018      	beq.n	8007214 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	4a0a      	ldr	r2, [pc, #40]	; (8007210 <HAL_SD_IRQHandler+0x2c4>)
 80071e8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fb fe60 	bl	8002eb4 <HAL_DMA_Abort_IT>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d01a      	beq.n	8007230 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 faeb 	bl	80077da <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007204:	e014      	b.n	8007230 <HAL_SD_IRQHandler+0x2e4>
 8007206:	bf00      	nop
 8007208:	ffff3ec5 	.word	0xffff3ec5
 800720c:	0800776d 	.word	0x0800776d
 8007210:	080077db 	.word	0x080077db
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f003 fc27 	bl	800aa7c <HAL_SD_AbortCallback>
}
 800722e:	e7ff      	b.n	8007230 <HAL_SD_IRQHandler+0x2e4>
 8007230:	bf00      	nop
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800725a:	0f9b      	lsrs	r3, r3, #30
 800725c:	b2da      	uxtb	r2, r3
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007266:	0e9b      	lsrs	r3, r3, #26
 8007268:	b2db      	uxtb	r3, r3
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	b2da      	uxtb	r2, r3
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007278:	0e1b      	lsrs	r3, r3, #24
 800727a:	b2db      	uxtb	r3, r3
 800727c:	f003 0303 	and.w	r3, r3, #3
 8007280:	b2da      	uxtb	r2, r3
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800728a:	0c1b      	lsrs	r3, r3, #16
 800728c:	b2da      	uxtb	r2, r3
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007296:	0a1b      	lsrs	r3, r3, #8
 8007298:	b2da      	uxtb	r2, r3
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072ac:	0d1b      	lsrs	r3, r3, #20
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072b8:	0c1b      	lsrs	r3, r3, #16
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	f003 030f 	and.w	r3, r3, #15
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072ca:	0bdb      	lsrs	r3, r3, #15
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072dc:	0b9b      	lsrs	r3, r3, #14
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072ee:	0b5b      	lsrs	r3, r3, #13
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007300:	0b1b      	lsrs	r3, r3, #12
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	b2da      	uxtb	r2, r3
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2200      	movs	r2, #0
 8007312:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007318:	2b00      	cmp	r3, #0
 800731a:	d163      	bne.n	80073e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007320:	009a      	lsls	r2, r3, #2
 8007322:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007326:	4013      	ands	r3, r2
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800732c:	0f92      	lsrs	r2, r2, #30
 800732e:	431a      	orrs	r2, r3
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007338:	0edb      	lsrs	r3, r3, #27
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	b2da      	uxtb	r2, r3
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800734a:	0e1b      	lsrs	r3, r3, #24
 800734c:	b2db      	uxtb	r3, r3
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	b2da      	uxtb	r2, r3
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800735c:	0d5b      	lsrs	r3, r3, #21
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	b2da      	uxtb	r2, r3
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800736e:	0c9b      	lsrs	r3, r3, #18
 8007370:	b2db      	uxtb	r3, r3
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	b2da      	uxtb	r2, r3
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007380:	0bdb      	lsrs	r3, r3, #15
 8007382:	b2db      	uxtb	r3, r3
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	b2da      	uxtb	r2, r3
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	7e1b      	ldrb	r3, [r3, #24]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	3302      	adds	r3, #2
 80073a4:	2201      	movs	r2, #1
 80073a6:	fa02 f303 	lsl.w	r3, r2, r3
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80073ae:	fb03 f202 	mul.w	r2, r3, r2
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	7a1b      	ldrb	r3, [r3, #8]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	f003 030f 	and.w	r3, r3, #15
 80073c0:	2201      	movs	r2, #1
 80073c2:	409a      	lsls	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80073d0:	0a52      	lsrs	r2, r2, #9
 80073d2:	fb03 f202 	mul.w	r2, r3, r2
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073e0:	661a      	str	r2, [r3, #96]	; 0x60
 80073e2:	e031      	b.n	8007448 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d11d      	bne.n	8007428 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073f0:	041b      	lsls	r3, r3, #16
 80073f2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073fa:	0c1b      	lsrs	r3, r3, #16
 80073fc:	431a      	orrs	r2, r3
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	3301      	adds	r3, #1
 8007408:	029a      	lsls	r2, r3, #10
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800741c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	661a      	str	r2, [r3, #96]	; 0x60
 8007426:	e00f      	b.n	8007448 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a58      	ldr	r2, [pc, #352]	; (8007590 <HAL_SD_GetCardCSD+0x344>)
 800742e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e09d      	b.n	8007584 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800744c:	0b9b      	lsrs	r3, r3, #14
 800744e:	b2db      	uxtb	r3, r3
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	b2da      	uxtb	r2, r3
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800745e:	09db      	lsrs	r3, r3, #7
 8007460:	b2db      	uxtb	r3, r3
 8007462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007466:	b2da      	uxtb	r2, r3
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007470:	b2db      	uxtb	r3, r3
 8007472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007476:	b2da      	uxtb	r2, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007480:	0fdb      	lsrs	r3, r3, #31
 8007482:	b2da      	uxtb	r2, r3
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748c:	0f5b      	lsrs	r3, r3, #29
 800748e:	b2db      	uxtb	r3, r3
 8007490:	f003 0303 	and.w	r3, r3, #3
 8007494:	b2da      	uxtb	r2, r3
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749e:	0e9b      	lsrs	r3, r3, #26
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b0:	0d9b      	lsrs	r3, r3, #22
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f003 030f 	and.w	r3, r3, #15
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c2:	0d5b      	lsrs	r3, r3, #21
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074de:	0c1b      	lsrs	r3, r3, #16
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f2:	0bdb      	lsrs	r3, r3, #15
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007506:	0b9b      	lsrs	r3, r3, #14
 8007508:	b2db      	uxtb	r3, r3
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	b2da      	uxtb	r2, r3
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751a:	0b5b      	lsrs	r3, r3, #13
 800751c:	b2db      	uxtb	r3, r3
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	b2da      	uxtb	r2, r3
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752e:	0b1b      	lsrs	r3, r3, #12
 8007530:	b2db      	uxtb	r3, r3
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	b2da      	uxtb	r2, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007542:	0a9b      	lsrs	r3, r3, #10
 8007544:	b2db      	uxtb	r3, r3
 8007546:	f003 0303 	and.w	r3, r3, #3
 800754a:	b2da      	uxtb	r2, r3
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007556:	0a1b      	lsrs	r3, r3, #8
 8007558:	b2db      	uxtb	r3, r3
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	b2da      	uxtb	r2, r3
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756a:	085b      	lsrs	r3, r3, #1
 800756c:	b2db      	uxtb	r3, r3
 800756e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007572:	b2da      	uxtb	r2, r3
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	004005ff 	.word	0x004005ff

08007594 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80075f8:	f107 030c 	add.w	r3, r7, #12
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fa7e 	bl	8007b00 <SD_SendStatus>
 8007604:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	431a      	orrs	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	0a5b      	lsrs	r3, r3, #9
 800761c:	f003 030f 	and.w	r3, r3, #15
 8007620:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007622:	693b      	ldr	r3, [r7, #16]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007638:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007648:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800764a:	bf00      	nop
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007662:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007668:	2b82      	cmp	r3, #130	; 0x82
 800766a:	d111      	bne.n	8007690 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4618      	mov	r0, r3
 8007672:	f001 f985 	bl	8008980 <SDMMC_CmdStopTransfer>
 8007676:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d008      	beq.n	8007690 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	431a      	orrs	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f7ff fdd4 	bl	8007238 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0208 	bic.w	r2, r2, #8
 800769e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f240 523a 	movw	r2, #1338	; 0x53a
 80076a8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f003 f9f3 	bl	800aaa4 <HAL_SD_RxCpltCallback>
#endif
}
 80076be:	bf00      	nop
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7fb fd98 	bl	800320c <HAL_DMA_GetError>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d03e      	beq.n	8007760 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d002      	beq.n	80076fe <SD_DMAError+0x36>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d12d      	bne.n	800775a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a19      	ldr	r2, [pc, #100]	; (8007768 <SD_DMAError+0xa0>)
 8007704:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007714:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007722:	6978      	ldr	r0, [r7, #20]
 8007724:	f7ff ff62 	bl	80075ec <HAL_SD_GetCardState>
 8007728:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b06      	cmp	r3, #6
 800772e:	d002      	beq.n	8007736 <SD_DMAError+0x6e>
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2b05      	cmp	r3, #5
 8007734:	d10a      	bne.n	800774c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4618      	mov	r0, r3
 800773c:	f001 f920 	bl	8008980 <SDMMC_CmdStopTransfer>
 8007740:	4602      	mov	r2, r0
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	431a      	orrs	r2, r3
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2200      	movs	r2, #0
 8007758:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800775a:	6978      	ldr	r0, [r7, #20]
 800775c:	f7ff fd6c 	bl	8007238 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007760:	bf00      	nop
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	004005ff 	.word	0x004005ff

0800776c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007778:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007782:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f7ff ff31 	bl	80075ec <HAL_SD_GetCardState>
 800778a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b06      	cmp	r3, #6
 800779e:	d002      	beq.n	80077a6 <SD_DMATxAbort+0x3a>
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b05      	cmp	r3, #5
 80077a4:	d10a      	bne.n	80077bc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f001 f8e8 	bl	8008980 <SDMMC_CmdStopTransfer>
 80077b0:	4602      	mov	r2, r0
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	431a      	orrs	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d103      	bne.n	80077cc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f003 f959 	bl	800aa7c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80077ca:	e002      	b.n	80077d2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f7ff fd33 	bl	8007238 <HAL_SD_ErrorCallback>
}
 80077d2:	bf00      	nop
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f240 523a 	movw	r2, #1338	; 0x53a
 80077f0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f7ff fefa 	bl	80075ec <HAL_SD_GetCardState>
 80077f8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b06      	cmp	r3, #6
 800780c:	d002      	beq.n	8007814 <SD_DMARxAbort+0x3a>
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2b05      	cmp	r3, #5
 8007812:	d10a      	bne.n	800782a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4618      	mov	r0, r3
 800781a:	f001 f8b1 	bl	8008980 <SDMMC_CmdStopTransfer>
 800781e:	4602      	mov	r2, r0
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007824:	431a      	orrs	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	2b00      	cmp	r3, #0
 8007830:	d103      	bne.n	800783a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f003 f922 	bl	800aa7c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007838:	e002      	b.n	8007840 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f7ff fcfc 	bl	8007238 <HAL_SD_ErrorCallback>
}
 8007840:	bf00      	nop
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007848:	b5b0      	push	{r4, r5, r7, lr}
 800784a:	b094      	sub	sp, #80	; 0x50
 800784c:	af04      	add	r7, sp, #16
 800784e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007850:	2301      	movs	r3, #1
 8007852:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4618      	mov	r0, r3
 800785a:	f000 ff63 	bl	8008724 <SDMMC_GetPowerState>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d102      	bne.n	800786a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007864:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007868:	e0b8      	b.n	80079dc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786e:	2b03      	cmp	r3, #3
 8007870:	d02f      	beq.n	80078d2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4618      	mov	r0, r3
 8007878:	f001 f94a 	bl	8008b10 <SDMMC_CmdSendCID>
 800787c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800787e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <SD_InitCard+0x40>
    {
      return errorstate;
 8007884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007886:	e0a9      	b.n	80079dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2100      	movs	r1, #0
 800788e:	4618      	mov	r0, r3
 8007890:	f000 ff8d 	bl	80087ae <SDMMC_GetResponse>
 8007894:	4602      	mov	r2, r0
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2104      	movs	r1, #4
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 ff84 	bl	80087ae <SDMMC_GetResponse>
 80078a6:	4602      	mov	r2, r0
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2108      	movs	r1, #8
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 ff7b 	bl	80087ae <SDMMC_GetResponse>
 80078b8:	4602      	mov	r2, r0
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	210c      	movs	r1, #12
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 ff72 	bl	80087ae <SDMMC_GetResponse>
 80078ca:	4602      	mov	r2, r0
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d00d      	beq.n	80078f6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f107 020e 	add.w	r2, r7, #14
 80078e2:	4611      	mov	r1, r2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f001 f950 	bl	8008b8a <SDMMC_CmdSetRelAdd>
 80078ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80078ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <SD_InitCard+0xae>
    {
      return errorstate;
 80078f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f4:	e072      	b.n	80079dc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d036      	beq.n	800796c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80078fe:	89fb      	ldrh	r3, [r7, #14]
 8007900:	461a      	mov	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800790e:	041b      	lsls	r3, r3, #16
 8007910:	4619      	mov	r1, r3
 8007912:	4610      	mov	r0, r2
 8007914:	f001 f91a 	bl	8008b4c <SDMMC_CmdSendCSD>
 8007918:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800791a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007922:	e05b      	b.n	80079dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2100      	movs	r1, #0
 800792a:	4618      	mov	r0, r3
 800792c:	f000 ff3f 	bl	80087ae <SDMMC_GetResponse>
 8007930:	4602      	mov	r2, r0
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2104      	movs	r1, #4
 800793c:	4618      	mov	r0, r3
 800793e:	f000 ff36 	bl	80087ae <SDMMC_GetResponse>
 8007942:	4602      	mov	r2, r0
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2108      	movs	r1, #8
 800794e:	4618      	mov	r0, r3
 8007950:	f000 ff2d 	bl	80087ae <SDMMC_GetResponse>
 8007954:	4602      	mov	r2, r0
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	210c      	movs	r1, #12
 8007960:	4618      	mov	r0, r3
 8007962:	f000 ff24 	bl	80087ae <SDMMC_GetResponse>
 8007966:	4602      	mov	r2, r0
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2104      	movs	r1, #4
 8007972:	4618      	mov	r0, r3
 8007974:	f000 ff1b 	bl	80087ae <SDMMC_GetResponse>
 8007978:	4603      	mov	r3, r0
 800797a:	0d1a      	lsrs	r2, r3, #20
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007980:	f107 0310 	add.w	r3, r7, #16
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff fc60 	bl	800724c <HAL_SD_GetCardCSD>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007992:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007996:	e021      	b.n	80079dc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6819      	ldr	r1, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a0:	041b      	lsls	r3, r3, #16
 80079a2:	2200      	movs	r2, #0
 80079a4:	461c      	mov	r4, r3
 80079a6:	4615      	mov	r5, r2
 80079a8:	4622      	mov	r2, r4
 80079aa:	462b      	mov	r3, r5
 80079ac:	4608      	mov	r0, r1
 80079ae:	f001 f809 	bl	80089c4 <SDMMC_CmdSelDesel>
 80079b2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80079b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <SD_InitCard+0x176>
  {
    return errorstate;
 80079ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079bc:	e00e      	b.n	80079dc <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681d      	ldr	r5, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	466c      	mov	r4, sp
 80079c6:	f103 0210 	add.w	r2, r3, #16
 80079ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80079cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80079d0:	3304      	adds	r3, #4
 80079d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079d4:	4628      	mov	r0, r5
 80079d6:	f000 fe4d 	bl	8008674 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3740      	adds	r7, #64	; 0x40
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bdb0      	pop	{r4, r5, r7, pc}

080079e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	2300      	movs	r3, #0
 80079f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f001 f804 	bl	8008a0a <SDMMC_CmdGoIdleState>
 8007a02:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <SD_PowerON+0x2a>
  {
    return errorstate;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	e072      	b.n	8007af4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f001 f817 	bl	8008a46 <SDMMC_CmdOperCond>
 8007a18:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00d      	beq.n	8007a3c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 ffed 	bl	8008a0a <SDMMC_CmdGoIdleState>
 8007a30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	e05b      	b.n	8007af4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d137      	bne.n	8007aba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2100      	movs	r1, #0
 8007a50:	4618      	mov	r0, r3
 8007a52:	f001 f817 	bl	8008a84 <SDMMC_CmdAppCommand>
 8007a56:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d02d      	beq.n	8007aba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007a62:	e047      	b.n	8007af4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f001 f80a 	bl	8008a84 <SDMMC_CmdAppCommand>
 8007a70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <SD_PowerON+0x98>
    {
      return errorstate;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	e03b      	b.n	8007af4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	491e      	ldr	r1, [pc, #120]	; (8007afc <SD_PowerON+0x118>)
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 f820 	bl	8008ac8 <SDMMC_CmdAppOperCommand>
 8007a88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007a94:	e02e      	b.n	8007af4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fe86 	bl	80087ae <SDMMC_GetResponse>
 8007aa2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	0fdb      	lsrs	r3, r3, #31
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d101      	bne.n	8007ab0 <SD_PowerON+0xcc>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <SD_PowerON+0xce>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	613b      	str	r3, [r7, #16]

    count++;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d802      	bhi.n	8007aca <SD_PowerON+0xe6>
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0cc      	beq.n	8007a64 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d902      	bls.n	8007ada <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007ad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ad8:	e00c      	b.n	8007af4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	645a      	str	r2, [r3, #68]	; 0x44
 8007aea:	e002      	b.n	8007af2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3718      	adds	r7, #24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	c1100000 	.word	0xc1100000

08007b00 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d102      	bne.n	8007b16 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007b10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b14:	e018      	b.n	8007b48 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1e:	041b      	lsls	r3, r3, #16
 8007b20:	4619      	mov	r1, r3
 8007b22:	4610      	mov	r0, r2
 8007b24:	f001 f852 	bl	8008bcc <SDMMC_CmdSendStatus>
 8007b28:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	e009      	b.n	8007b48 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2100      	movs	r1, #0
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 fe37 	bl	80087ae <SDMMC_GetResponse>
 8007b40:	4602      	mov	r2, r0
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b62:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d03f      	beq.n	8007bea <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	617b      	str	r3, [r7, #20]
 8007b6e:	e033      	b.n	8007bd8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 fda9 	bl	80086cc <SDMMC_ReadFIFO>
 8007b7a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	3301      	adds	r3, #1
 8007b88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	0a1b      	lsrs	r3, r3, #8
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	0c1b      	lsrs	r3, r3, #16
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	0e1b      	lsrs	r3, r3, #24
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2b07      	cmp	r3, #7
 8007bdc:	d9c8      	bls.n	8007b70 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007bea:	bf00      	nop
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b086      	sub	sp, #24
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d043      	beq.n	8007c94 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	617b      	str	r3, [r7, #20]
 8007c10:	e037      	b.n	8007c82 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	021a      	lsls	r2, r3, #8
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	041a      	lsls	r2, r3, #16
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	061a      	lsls	r2, r3, #24
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3301      	adds	r3, #1
 8007c64:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f107 0208 	add.w	r2, r7, #8
 8007c74:	4611      	mov	r1, r2
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fd35 	bl	80086e6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	617b      	str	r3, [r7, #20]
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	2b07      	cmp	r3, #7
 8007c86:	d9c4      	bls.n	8007c12 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007c94:	bf00      	nop
 8007c96:	3718      	adds	r7, #24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e040      	b.n	8007d30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d106      	bne.n	8007cc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7f9 fd5a 	bl	8001778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2224      	movs	r2, #36	; 0x24
 8007cc8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0201 	bic.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f8b0 	bl	8007e40 <UART_SetConfig>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d101      	bne.n	8007cea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e022      	b.n	8007d30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fb08 	bl	8008308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689a      	ldr	r2, [r3, #8]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f042 0201 	orr.w	r2, r2, #1
 8007d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fb8f 	bl	800844c <UART_CheckIdleState>
 8007d2e:	4603      	mov	r3, r0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08a      	sub	sp, #40	; 0x28
 8007d3c:	af02      	add	r7, sp, #8
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	4613      	mov	r3, r2
 8007d46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d4c:	2b20      	cmp	r3, #32
 8007d4e:	d171      	bne.n	8007e34 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <HAL_UART_Transmit+0x24>
 8007d56:	88fb      	ldrh	r3, [r7, #6]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e06a      	b.n	8007e36 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2221      	movs	r2, #33	; 0x21
 8007d6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d6e:	f7fa f825 	bl	8001dbc <HAL_GetTick>
 8007d72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	88fa      	ldrh	r2, [r7, #6]
 8007d78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	88fa      	ldrh	r2, [r7, #6]
 8007d80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d8c:	d108      	bne.n	8007da0 <HAL_UART_Transmit+0x68>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d104      	bne.n	8007da0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	61bb      	str	r3, [r7, #24]
 8007d9e:	e003      	b.n	8007da8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007da4:	2300      	movs	r3, #0
 8007da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007da8:	e02c      	b.n	8007e04 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2200      	movs	r2, #0
 8007db2:	2180      	movs	r1, #128	; 0x80
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 fb96 	bl	80084e6 <UART_WaitOnFlagUntilTimeout>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e038      	b.n	8007e36 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10b      	bne.n	8007de2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	3302      	adds	r3, #2
 8007dde:	61bb      	str	r3, [r7, #24]
 8007de0:	e007      	b.n	8007df2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	781a      	ldrb	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	3301      	adds	r3, #1
 8007df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1cc      	bne.n	8007daa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2200      	movs	r2, #0
 8007e18:	2140      	movs	r1, #64	; 0x40
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f000 fb63 	bl	80084e6 <UART_WaitOnFlagUntilTimeout>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e005      	b.n	8007e36 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	e000      	b.n	8007e36 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007e34:	2302      	movs	r3, #2
  }
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3720      	adds	r7, #32
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	431a      	orrs	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	4ba6      	ldr	r3, [pc, #664]	; (8008104 <UART_SetConfig+0x2c4>)
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	6979      	ldr	r1, [r7, #20]
 8007e74:	430b      	orrs	r3, r1
 8007e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a94      	ldr	r2, [pc, #592]	; (8008108 <UART_SetConfig+0x2c8>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d120      	bne.n	8007efe <UART_SetConfig+0xbe>
 8007ebc:	4b93      	ldr	r3, [pc, #588]	; (800810c <UART_SetConfig+0x2cc>)
 8007ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d816      	bhi.n	8007ef8 <UART_SetConfig+0xb8>
 8007eca:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <UART_SetConfig+0x90>)
 8007ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed0:	08007ee1 	.word	0x08007ee1
 8007ed4:	08007eed 	.word	0x08007eed
 8007ed8:	08007ee7 	.word	0x08007ee7
 8007edc:	08007ef3 	.word	0x08007ef3
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	77fb      	strb	r3, [r7, #31]
 8007ee4:	e150      	b.n	8008188 <UART_SetConfig+0x348>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	77fb      	strb	r3, [r7, #31]
 8007eea:	e14d      	b.n	8008188 <UART_SetConfig+0x348>
 8007eec:	2304      	movs	r3, #4
 8007eee:	77fb      	strb	r3, [r7, #31]
 8007ef0:	e14a      	b.n	8008188 <UART_SetConfig+0x348>
 8007ef2:	2308      	movs	r3, #8
 8007ef4:	77fb      	strb	r3, [r7, #31]
 8007ef6:	e147      	b.n	8008188 <UART_SetConfig+0x348>
 8007ef8:	2310      	movs	r3, #16
 8007efa:	77fb      	strb	r3, [r7, #31]
 8007efc:	e144      	b.n	8008188 <UART_SetConfig+0x348>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a83      	ldr	r2, [pc, #524]	; (8008110 <UART_SetConfig+0x2d0>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d132      	bne.n	8007f6e <UART_SetConfig+0x12e>
 8007f08:	4b80      	ldr	r3, [pc, #512]	; (800810c <UART_SetConfig+0x2cc>)
 8007f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0e:	f003 030c 	and.w	r3, r3, #12
 8007f12:	2b0c      	cmp	r3, #12
 8007f14:	d828      	bhi.n	8007f68 <UART_SetConfig+0x128>
 8007f16:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <UART_SetConfig+0xdc>)
 8007f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1c:	08007f51 	.word	0x08007f51
 8007f20:	08007f69 	.word	0x08007f69
 8007f24:	08007f69 	.word	0x08007f69
 8007f28:	08007f69 	.word	0x08007f69
 8007f2c:	08007f5d 	.word	0x08007f5d
 8007f30:	08007f69 	.word	0x08007f69
 8007f34:	08007f69 	.word	0x08007f69
 8007f38:	08007f69 	.word	0x08007f69
 8007f3c:	08007f57 	.word	0x08007f57
 8007f40:	08007f69 	.word	0x08007f69
 8007f44:	08007f69 	.word	0x08007f69
 8007f48:	08007f69 	.word	0x08007f69
 8007f4c:	08007f63 	.word	0x08007f63
 8007f50:	2300      	movs	r3, #0
 8007f52:	77fb      	strb	r3, [r7, #31]
 8007f54:	e118      	b.n	8008188 <UART_SetConfig+0x348>
 8007f56:	2302      	movs	r3, #2
 8007f58:	77fb      	strb	r3, [r7, #31]
 8007f5a:	e115      	b.n	8008188 <UART_SetConfig+0x348>
 8007f5c:	2304      	movs	r3, #4
 8007f5e:	77fb      	strb	r3, [r7, #31]
 8007f60:	e112      	b.n	8008188 <UART_SetConfig+0x348>
 8007f62:	2308      	movs	r3, #8
 8007f64:	77fb      	strb	r3, [r7, #31]
 8007f66:	e10f      	b.n	8008188 <UART_SetConfig+0x348>
 8007f68:	2310      	movs	r3, #16
 8007f6a:	77fb      	strb	r3, [r7, #31]
 8007f6c:	e10c      	b.n	8008188 <UART_SetConfig+0x348>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a68      	ldr	r2, [pc, #416]	; (8008114 <UART_SetConfig+0x2d4>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d120      	bne.n	8007fba <UART_SetConfig+0x17a>
 8007f78:	4b64      	ldr	r3, [pc, #400]	; (800810c <UART_SetConfig+0x2cc>)
 8007f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f82:	2b30      	cmp	r3, #48	; 0x30
 8007f84:	d013      	beq.n	8007fae <UART_SetConfig+0x16e>
 8007f86:	2b30      	cmp	r3, #48	; 0x30
 8007f88:	d814      	bhi.n	8007fb4 <UART_SetConfig+0x174>
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	d009      	beq.n	8007fa2 <UART_SetConfig+0x162>
 8007f8e:	2b20      	cmp	r3, #32
 8007f90:	d810      	bhi.n	8007fb4 <UART_SetConfig+0x174>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <UART_SetConfig+0x15c>
 8007f96:	2b10      	cmp	r3, #16
 8007f98:	d006      	beq.n	8007fa8 <UART_SetConfig+0x168>
 8007f9a:	e00b      	b.n	8007fb4 <UART_SetConfig+0x174>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	77fb      	strb	r3, [r7, #31]
 8007fa0:	e0f2      	b.n	8008188 <UART_SetConfig+0x348>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	77fb      	strb	r3, [r7, #31]
 8007fa6:	e0ef      	b.n	8008188 <UART_SetConfig+0x348>
 8007fa8:	2304      	movs	r3, #4
 8007faa:	77fb      	strb	r3, [r7, #31]
 8007fac:	e0ec      	b.n	8008188 <UART_SetConfig+0x348>
 8007fae:	2308      	movs	r3, #8
 8007fb0:	77fb      	strb	r3, [r7, #31]
 8007fb2:	e0e9      	b.n	8008188 <UART_SetConfig+0x348>
 8007fb4:	2310      	movs	r3, #16
 8007fb6:	77fb      	strb	r3, [r7, #31]
 8007fb8:	e0e6      	b.n	8008188 <UART_SetConfig+0x348>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a56      	ldr	r2, [pc, #344]	; (8008118 <UART_SetConfig+0x2d8>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d120      	bne.n	8008006 <UART_SetConfig+0x1c6>
 8007fc4:	4b51      	ldr	r3, [pc, #324]	; (800810c <UART_SetConfig+0x2cc>)
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007fce:	2bc0      	cmp	r3, #192	; 0xc0
 8007fd0:	d013      	beq.n	8007ffa <UART_SetConfig+0x1ba>
 8007fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8007fd4:	d814      	bhi.n	8008000 <UART_SetConfig+0x1c0>
 8007fd6:	2b80      	cmp	r3, #128	; 0x80
 8007fd8:	d009      	beq.n	8007fee <UART_SetConfig+0x1ae>
 8007fda:	2b80      	cmp	r3, #128	; 0x80
 8007fdc:	d810      	bhi.n	8008000 <UART_SetConfig+0x1c0>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <UART_SetConfig+0x1a8>
 8007fe2:	2b40      	cmp	r3, #64	; 0x40
 8007fe4:	d006      	beq.n	8007ff4 <UART_SetConfig+0x1b4>
 8007fe6:	e00b      	b.n	8008000 <UART_SetConfig+0x1c0>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	77fb      	strb	r3, [r7, #31]
 8007fec:	e0cc      	b.n	8008188 <UART_SetConfig+0x348>
 8007fee:	2302      	movs	r3, #2
 8007ff0:	77fb      	strb	r3, [r7, #31]
 8007ff2:	e0c9      	b.n	8008188 <UART_SetConfig+0x348>
 8007ff4:	2304      	movs	r3, #4
 8007ff6:	77fb      	strb	r3, [r7, #31]
 8007ff8:	e0c6      	b.n	8008188 <UART_SetConfig+0x348>
 8007ffa:	2308      	movs	r3, #8
 8007ffc:	77fb      	strb	r3, [r7, #31]
 8007ffe:	e0c3      	b.n	8008188 <UART_SetConfig+0x348>
 8008000:	2310      	movs	r3, #16
 8008002:	77fb      	strb	r3, [r7, #31]
 8008004:	e0c0      	b.n	8008188 <UART_SetConfig+0x348>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a44      	ldr	r2, [pc, #272]	; (800811c <UART_SetConfig+0x2dc>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d125      	bne.n	800805c <UART_SetConfig+0x21c>
 8008010:	4b3e      	ldr	r3, [pc, #248]	; (800810c <UART_SetConfig+0x2cc>)
 8008012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800801a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800801e:	d017      	beq.n	8008050 <UART_SetConfig+0x210>
 8008020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008024:	d817      	bhi.n	8008056 <UART_SetConfig+0x216>
 8008026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800802a:	d00b      	beq.n	8008044 <UART_SetConfig+0x204>
 800802c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008030:	d811      	bhi.n	8008056 <UART_SetConfig+0x216>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <UART_SetConfig+0x1fe>
 8008036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800803a:	d006      	beq.n	800804a <UART_SetConfig+0x20a>
 800803c:	e00b      	b.n	8008056 <UART_SetConfig+0x216>
 800803e:	2300      	movs	r3, #0
 8008040:	77fb      	strb	r3, [r7, #31]
 8008042:	e0a1      	b.n	8008188 <UART_SetConfig+0x348>
 8008044:	2302      	movs	r3, #2
 8008046:	77fb      	strb	r3, [r7, #31]
 8008048:	e09e      	b.n	8008188 <UART_SetConfig+0x348>
 800804a:	2304      	movs	r3, #4
 800804c:	77fb      	strb	r3, [r7, #31]
 800804e:	e09b      	b.n	8008188 <UART_SetConfig+0x348>
 8008050:	2308      	movs	r3, #8
 8008052:	77fb      	strb	r3, [r7, #31]
 8008054:	e098      	b.n	8008188 <UART_SetConfig+0x348>
 8008056:	2310      	movs	r3, #16
 8008058:	77fb      	strb	r3, [r7, #31]
 800805a:	e095      	b.n	8008188 <UART_SetConfig+0x348>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a2f      	ldr	r2, [pc, #188]	; (8008120 <UART_SetConfig+0x2e0>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d125      	bne.n	80080b2 <UART_SetConfig+0x272>
 8008066:	4b29      	ldr	r3, [pc, #164]	; (800810c <UART_SetConfig+0x2cc>)
 8008068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800806c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008070:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008074:	d017      	beq.n	80080a6 <UART_SetConfig+0x266>
 8008076:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800807a:	d817      	bhi.n	80080ac <UART_SetConfig+0x26c>
 800807c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008080:	d00b      	beq.n	800809a <UART_SetConfig+0x25a>
 8008082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008086:	d811      	bhi.n	80080ac <UART_SetConfig+0x26c>
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <UART_SetConfig+0x254>
 800808c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008090:	d006      	beq.n	80080a0 <UART_SetConfig+0x260>
 8008092:	e00b      	b.n	80080ac <UART_SetConfig+0x26c>
 8008094:	2301      	movs	r3, #1
 8008096:	77fb      	strb	r3, [r7, #31]
 8008098:	e076      	b.n	8008188 <UART_SetConfig+0x348>
 800809a:	2302      	movs	r3, #2
 800809c:	77fb      	strb	r3, [r7, #31]
 800809e:	e073      	b.n	8008188 <UART_SetConfig+0x348>
 80080a0:	2304      	movs	r3, #4
 80080a2:	77fb      	strb	r3, [r7, #31]
 80080a4:	e070      	b.n	8008188 <UART_SetConfig+0x348>
 80080a6:	2308      	movs	r3, #8
 80080a8:	77fb      	strb	r3, [r7, #31]
 80080aa:	e06d      	b.n	8008188 <UART_SetConfig+0x348>
 80080ac:	2310      	movs	r3, #16
 80080ae:	77fb      	strb	r3, [r7, #31]
 80080b0:	e06a      	b.n	8008188 <UART_SetConfig+0x348>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a1b      	ldr	r2, [pc, #108]	; (8008124 <UART_SetConfig+0x2e4>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d138      	bne.n	800812e <UART_SetConfig+0x2ee>
 80080bc:	4b13      	ldr	r3, [pc, #76]	; (800810c <UART_SetConfig+0x2cc>)
 80080be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80080c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080ca:	d017      	beq.n	80080fc <UART_SetConfig+0x2bc>
 80080cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080d0:	d82a      	bhi.n	8008128 <UART_SetConfig+0x2e8>
 80080d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080d6:	d00b      	beq.n	80080f0 <UART_SetConfig+0x2b0>
 80080d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080dc:	d824      	bhi.n	8008128 <UART_SetConfig+0x2e8>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <UART_SetConfig+0x2aa>
 80080e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e6:	d006      	beq.n	80080f6 <UART_SetConfig+0x2b6>
 80080e8:	e01e      	b.n	8008128 <UART_SetConfig+0x2e8>
 80080ea:	2300      	movs	r3, #0
 80080ec:	77fb      	strb	r3, [r7, #31]
 80080ee:	e04b      	b.n	8008188 <UART_SetConfig+0x348>
 80080f0:	2302      	movs	r3, #2
 80080f2:	77fb      	strb	r3, [r7, #31]
 80080f4:	e048      	b.n	8008188 <UART_SetConfig+0x348>
 80080f6:	2304      	movs	r3, #4
 80080f8:	77fb      	strb	r3, [r7, #31]
 80080fa:	e045      	b.n	8008188 <UART_SetConfig+0x348>
 80080fc:	2308      	movs	r3, #8
 80080fe:	77fb      	strb	r3, [r7, #31]
 8008100:	e042      	b.n	8008188 <UART_SetConfig+0x348>
 8008102:	bf00      	nop
 8008104:	efff69f3 	.word	0xefff69f3
 8008108:	40011000 	.word	0x40011000
 800810c:	40023800 	.word	0x40023800
 8008110:	40004400 	.word	0x40004400
 8008114:	40004800 	.word	0x40004800
 8008118:	40004c00 	.word	0x40004c00
 800811c:	40005000 	.word	0x40005000
 8008120:	40011400 	.word	0x40011400
 8008124:	40007800 	.word	0x40007800
 8008128:	2310      	movs	r3, #16
 800812a:	77fb      	strb	r3, [r7, #31]
 800812c:	e02c      	b.n	8008188 <UART_SetConfig+0x348>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a72      	ldr	r2, [pc, #456]	; (80082fc <UART_SetConfig+0x4bc>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d125      	bne.n	8008184 <UART_SetConfig+0x344>
 8008138:	4b71      	ldr	r3, [pc, #452]	; (8008300 <UART_SetConfig+0x4c0>)
 800813a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800813e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008142:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008146:	d017      	beq.n	8008178 <UART_SetConfig+0x338>
 8008148:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800814c:	d817      	bhi.n	800817e <UART_SetConfig+0x33e>
 800814e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008152:	d00b      	beq.n	800816c <UART_SetConfig+0x32c>
 8008154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008158:	d811      	bhi.n	800817e <UART_SetConfig+0x33e>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <UART_SetConfig+0x326>
 800815e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008162:	d006      	beq.n	8008172 <UART_SetConfig+0x332>
 8008164:	e00b      	b.n	800817e <UART_SetConfig+0x33e>
 8008166:	2300      	movs	r3, #0
 8008168:	77fb      	strb	r3, [r7, #31]
 800816a:	e00d      	b.n	8008188 <UART_SetConfig+0x348>
 800816c:	2302      	movs	r3, #2
 800816e:	77fb      	strb	r3, [r7, #31]
 8008170:	e00a      	b.n	8008188 <UART_SetConfig+0x348>
 8008172:	2304      	movs	r3, #4
 8008174:	77fb      	strb	r3, [r7, #31]
 8008176:	e007      	b.n	8008188 <UART_SetConfig+0x348>
 8008178:	2308      	movs	r3, #8
 800817a:	77fb      	strb	r3, [r7, #31]
 800817c:	e004      	b.n	8008188 <UART_SetConfig+0x348>
 800817e:	2310      	movs	r3, #16
 8008180:	77fb      	strb	r3, [r7, #31]
 8008182:	e001      	b.n	8008188 <UART_SetConfig+0x348>
 8008184:	2310      	movs	r3, #16
 8008186:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008190:	d15b      	bne.n	800824a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008192:	7ffb      	ldrb	r3, [r7, #31]
 8008194:	2b08      	cmp	r3, #8
 8008196:	d828      	bhi.n	80081ea <UART_SetConfig+0x3aa>
 8008198:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <UART_SetConfig+0x360>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	080081c5 	.word	0x080081c5
 80081a4:	080081cd 	.word	0x080081cd
 80081a8:	080081d5 	.word	0x080081d5
 80081ac:	080081eb 	.word	0x080081eb
 80081b0:	080081db 	.word	0x080081db
 80081b4:	080081eb 	.word	0x080081eb
 80081b8:	080081eb 	.word	0x080081eb
 80081bc:	080081eb 	.word	0x080081eb
 80081c0:	080081e3 	.word	0x080081e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081c4:	f7fd fff2 	bl	80061ac <HAL_RCC_GetPCLK1Freq>
 80081c8:	61b8      	str	r0, [r7, #24]
        break;
 80081ca:	e013      	b.n	80081f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081cc:	f7fe f802 	bl	80061d4 <HAL_RCC_GetPCLK2Freq>
 80081d0:	61b8      	str	r0, [r7, #24]
        break;
 80081d2:	e00f      	b.n	80081f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081d4:	4b4b      	ldr	r3, [pc, #300]	; (8008304 <UART_SetConfig+0x4c4>)
 80081d6:	61bb      	str	r3, [r7, #24]
        break;
 80081d8:	e00c      	b.n	80081f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081da:	f7fd fed5 	bl	8005f88 <HAL_RCC_GetSysClockFreq>
 80081de:	61b8      	str	r0, [r7, #24]
        break;
 80081e0:	e008      	b.n	80081f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081e6:	61bb      	str	r3, [r7, #24]
        break;
 80081e8:	e004      	b.n	80081f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	77bb      	strb	r3, [r7, #30]
        break;
 80081f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d074      	beq.n	80082e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	005a      	lsls	r2, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	085b      	lsrs	r3, r3, #1
 8008204:	441a      	add	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	fbb2 f3f3 	udiv	r3, r2, r3
 800820e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	2b0f      	cmp	r3, #15
 8008214:	d916      	bls.n	8008244 <UART_SetConfig+0x404>
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800821c:	d212      	bcs.n	8008244 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	b29b      	uxth	r3, r3
 8008222:	f023 030f 	bic.w	r3, r3, #15
 8008226:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	085b      	lsrs	r3, r3, #1
 800822c:	b29b      	uxth	r3, r3
 800822e:	f003 0307 	and.w	r3, r3, #7
 8008232:	b29a      	uxth	r2, r3
 8008234:	89fb      	ldrh	r3, [r7, #14]
 8008236:	4313      	orrs	r3, r2
 8008238:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	89fa      	ldrh	r2, [r7, #14]
 8008240:	60da      	str	r2, [r3, #12]
 8008242:	e04f      	b.n	80082e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	77bb      	strb	r3, [r7, #30]
 8008248:	e04c      	b.n	80082e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800824a:	7ffb      	ldrb	r3, [r7, #31]
 800824c:	2b08      	cmp	r3, #8
 800824e:	d828      	bhi.n	80082a2 <UART_SetConfig+0x462>
 8008250:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <UART_SetConfig+0x418>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	0800827d 	.word	0x0800827d
 800825c:	08008285 	.word	0x08008285
 8008260:	0800828d 	.word	0x0800828d
 8008264:	080082a3 	.word	0x080082a3
 8008268:	08008293 	.word	0x08008293
 800826c:	080082a3 	.word	0x080082a3
 8008270:	080082a3 	.word	0x080082a3
 8008274:	080082a3 	.word	0x080082a3
 8008278:	0800829b 	.word	0x0800829b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800827c:	f7fd ff96 	bl	80061ac <HAL_RCC_GetPCLK1Freq>
 8008280:	61b8      	str	r0, [r7, #24]
        break;
 8008282:	e013      	b.n	80082ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008284:	f7fd ffa6 	bl	80061d4 <HAL_RCC_GetPCLK2Freq>
 8008288:	61b8      	str	r0, [r7, #24]
        break;
 800828a:	e00f      	b.n	80082ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800828c:	4b1d      	ldr	r3, [pc, #116]	; (8008304 <UART_SetConfig+0x4c4>)
 800828e:	61bb      	str	r3, [r7, #24]
        break;
 8008290:	e00c      	b.n	80082ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008292:	f7fd fe79 	bl	8005f88 <HAL_RCC_GetSysClockFreq>
 8008296:	61b8      	str	r0, [r7, #24]
        break;
 8008298:	e008      	b.n	80082ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800829a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800829e:	61bb      	str	r3, [r7, #24]
        break;
 80082a0:	e004      	b.n	80082ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	77bb      	strb	r3, [r7, #30]
        break;
 80082aa:	bf00      	nop
    }

    if (pclk != 0U)
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d018      	beq.n	80082e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	085a      	lsrs	r2, r3, #1
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	441a      	add	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	2b0f      	cmp	r3, #15
 80082ca:	d909      	bls.n	80082e0 <UART_SetConfig+0x4a0>
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082d2:	d205      	bcs.n	80082e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	60da      	str	r2, [r3, #12]
 80082de:	e001      	b.n	80082e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80082f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3720      	adds	r7, #32
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	40007c00 	.word	0x40007c00
 8008300:	40023800 	.word	0x40023800
 8008304:	00f42400 	.word	0x00f42400

08008308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00a      	beq.n	8008332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	430a      	orrs	r2, r1
 8008330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	f003 0304 	and.w	r3, r3, #4
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00a      	beq.n	8008376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837a:	f003 0308 	and.w	r3, r3, #8
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	f003 0310 	and.w	r3, r3, #16
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	f003 0320 	and.w	r3, r3, #32
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01a      	beq.n	800841e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008406:	d10a      	bne.n	800841e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	605a      	str	r2, [r3, #4]
  }
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af02      	add	r7, sp, #8
 8008452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800845c:	f7f9 fcae 	bl	8001dbc <HAL_GetTick>
 8008460:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0308 	and.w	r3, r3, #8
 800846c:	2b08      	cmp	r3, #8
 800846e:	d10e      	bne.n	800848e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f831 	bl	80084e6 <UART_WaitOnFlagUntilTimeout>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e027      	b.n	80084de <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0304 	and.w	r3, r3, #4
 8008498:	2b04      	cmp	r3, #4
 800849a:	d10e      	bne.n	80084ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800849c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f81b 	bl	80084e6 <UART_WaitOnFlagUntilTimeout>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e011      	b.n	80084de <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2220      	movs	r2, #32
 80084be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2220      	movs	r2, #32
 80084c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b09c      	sub	sp, #112	; 0x70
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	60b9      	str	r1, [r7, #8]
 80084f0:	603b      	str	r3, [r7, #0]
 80084f2:	4613      	mov	r3, r2
 80084f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084f6:	e0a7      	b.n	8008648 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084fe:	f000 80a3 	beq.w	8008648 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008502:	f7f9 fc5b 	bl	8001dbc <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800850e:	429a      	cmp	r2, r3
 8008510:	d302      	bcc.n	8008518 <UART_WaitOnFlagUntilTimeout+0x32>
 8008512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008514:	2b00      	cmp	r3, #0
 8008516:	d13f      	bne.n	8008598 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008520:	e853 3f00 	ldrex	r3, [r3]
 8008524:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008528:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800852c:	667b      	str	r3, [r7, #100]	; 0x64
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008536:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008538:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800853c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800853e:	e841 2300 	strex	r3, r2, [r1]
 8008542:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e6      	bne.n	8008518 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3308      	adds	r3, #8
 8008550:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800855a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855c:	f023 0301 	bic.w	r3, r3, #1
 8008560:	663b      	str	r3, [r7, #96]	; 0x60
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3308      	adds	r3, #8
 8008568:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800856a:	64ba      	str	r2, [r7, #72]	; 0x48
 800856c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008570:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008572:	e841 2300 	strex	r3, r2, [r1]
 8008576:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1e5      	bne.n	800854a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2220      	movs	r2, #32
 8008582:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2220      	movs	r2, #32
 8008588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e068      	b.n	800866a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0304 	and.w	r3, r3, #4
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d050      	beq.n	8008648 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	69db      	ldr	r3, [r3, #28]
 80085ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085b4:	d148      	bne.n	8008648 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	e853 3f00 	ldrex	r3, [r3]
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085de:	637b      	str	r3, [r7, #52]	; 0x34
 80085e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085e6:	e841 2300 	strex	r3, r2, [r1]
 80085ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1e6      	bne.n	80085c0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3308      	adds	r3, #8
 80085f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	e853 3f00 	ldrex	r3, [r3]
 8008600:	613b      	str	r3, [r7, #16]
   return(result);
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	f023 0301 	bic.w	r3, r3, #1
 8008608:	66bb      	str	r3, [r7, #104]	; 0x68
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3308      	adds	r3, #8
 8008610:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008612:	623a      	str	r2, [r7, #32]
 8008614:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008616:	69f9      	ldr	r1, [r7, #28]
 8008618:	6a3a      	ldr	r2, [r7, #32]
 800861a:	e841 2300 	strex	r3, r2, [r1]
 800861e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1e5      	bne.n	80085f2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2220      	movs	r2, #32
 800862a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2220      	movs	r2, #32
 8008630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2220      	movs	r2, #32
 8008638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e010      	b.n	800866a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	69da      	ldr	r2, [r3, #28]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	4013      	ands	r3, r2
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	429a      	cmp	r2, r3
 8008656:	bf0c      	ite	eq
 8008658:	2301      	moveq	r3, #1
 800865a:	2300      	movne	r3, #0
 800865c:	b2db      	uxtb	r3, r3
 800865e:	461a      	mov	r2, r3
 8008660:	79fb      	ldrb	r3, [r7, #7]
 8008662:	429a      	cmp	r2, r3
 8008664:	f43f af48 	beq.w	80084f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3770      	adds	r7, #112	; 0x70
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008674:	b084      	sub	sp, #16
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	f107 001c 	add.w	r0, r7, #28
 8008682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800868a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800868c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800868e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008692:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008694:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008696:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800869a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800869e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	4b07      	ldr	r3, [pc, #28]	; (80086c8 <SDMMC_Init+0x54>)
 80086ac:	4013      	ands	r3, r2
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	431a      	orrs	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	b004      	add	sp, #16
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	ffff8100 	.word	0xffff8100

080086cc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80086da:	4618      	mov	r0, r3
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2203      	movs	r2, #3
 8008714:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0303 	and.w	r3, r3, #3
}
 8008734:	4618      	mov	r0, r3
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800874a:	2300      	movs	r3, #0
 800874c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800875e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008764:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800876a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	4313      	orrs	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68da      	ldr	r2, [r3, #12]
 8008776:	4b06      	ldr	r3, [pc, #24]	; (8008790 <SDMMC_SendCommand+0x50>)
 8008778:	4013      	ands	r3, r2
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	431a      	orrs	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	fffff000 	.word	0xfffff000

08008794 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	b2db      	uxtb	r3, r3
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b085      	sub	sp, #20
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3314      	adds	r3, #20
 80087bc:	461a      	mov	r2, r3
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	4413      	add	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
}  
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80087fa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008800:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008806:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	4313      	orrs	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008812:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	431a      	orrs	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800881e:	2300      	movs	r3, #0

}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b088      	sub	sp, #32
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800883a:	2310      	movs	r3, #16
 800883c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800883e:	2340      	movs	r3, #64	; 0x40
 8008840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008842:	2300      	movs	r3, #0
 8008844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800884a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800884c:	f107 0308 	add.w	r3, r7, #8
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7ff ff74 	bl	8008740 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008858:	f241 3288 	movw	r2, #5000	; 0x1388
 800885c:	2110      	movs	r1, #16
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f9d6 	bl	8008c10 <SDMMC_GetCmdResp1>
 8008864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008866:	69fb      	ldr	r3, [r7, #28]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3720      	adds	r7, #32
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b088      	sub	sp, #32
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800887e:	2311      	movs	r3, #17
 8008880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008882:	2340      	movs	r3, #64	; 0x40
 8008884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008886:	2300      	movs	r3, #0
 8008888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800888a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800888e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008890:	f107 0308 	add.w	r3, r7, #8
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7ff ff52 	bl	8008740 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800889c:	f241 3288 	movw	r2, #5000	; 0x1388
 80088a0:	2111      	movs	r1, #17
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f9b4 	bl	8008c10 <SDMMC_GetCmdResp1>
 80088a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088aa:	69fb      	ldr	r3, [r7, #28]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3720      	adds	r7, #32
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b088      	sub	sp, #32
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80088c2:	2312      	movs	r3, #18
 80088c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088c6:	2340      	movs	r3, #64	; 0x40
 80088c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088ca:	2300      	movs	r3, #0
 80088cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088d4:	f107 0308 	add.w	r3, r7, #8
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7ff ff30 	bl	8008740 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80088e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80088e4:	2112      	movs	r1, #18
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f992 	bl	8008c10 <SDMMC_GetCmdResp1>
 80088ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088ee:	69fb      	ldr	r3, [r7, #28]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3720      	adds	r7, #32
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008906:	2318      	movs	r3, #24
 8008908:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800890a:	2340      	movs	r3, #64	; 0x40
 800890c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800890e:	2300      	movs	r3, #0
 8008910:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008916:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008918:	f107 0308 	add.w	r3, r7, #8
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7ff ff0e 	bl	8008740 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008924:	f241 3288 	movw	r2, #5000	; 0x1388
 8008928:	2118      	movs	r1, #24
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f970 	bl	8008c10 <SDMMC_GetCmdResp1>
 8008930:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008932:	69fb      	ldr	r3, [r7, #28]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3720      	adds	r7, #32
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800894a:	2319      	movs	r3, #25
 800894c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800894e:	2340      	movs	r3, #64	; 0x40
 8008950:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008952:	2300      	movs	r3, #0
 8008954:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800895a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800895c:	f107 0308 	add.w	r3, r7, #8
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff feec 	bl	8008740 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008968:	f241 3288 	movw	r2, #5000	; 0x1388
 800896c:	2119      	movs	r1, #25
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f94e 	bl	8008c10 <SDMMC_GetCmdResp1>
 8008974:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008976:	69fb      	ldr	r3, [r7, #28]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3720      	adds	r7, #32
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b088      	sub	sp, #32
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008988:	2300      	movs	r3, #0
 800898a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800898c:	230c      	movs	r3, #12
 800898e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008990:	2340      	movs	r3, #64	; 0x40
 8008992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008994:	2300      	movs	r3, #0
 8008996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800899c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800899e:	f107 0308 	add.w	r3, r7, #8
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff fecb 	bl	8008740 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80089aa:	4a05      	ldr	r2, [pc, #20]	; (80089c0 <SDMMC_CmdStopTransfer+0x40>)
 80089ac:	210c      	movs	r1, #12
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f92e 	bl	8008c10 <SDMMC_GetCmdResp1>
 80089b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089b6:	69fb      	ldr	r3, [r7, #28]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3720      	adds	r7, #32
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	05f5e100 	.word	0x05f5e100

080089c4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08a      	sub	sp, #40	; 0x28
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80089d4:	2307      	movs	r3, #7
 80089d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089d8:	2340      	movs	r3, #64	; 0x40
 80089da:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089dc:	2300      	movs	r3, #0
 80089de:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089e4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089e6:	f107 0310 	add.w	r3, r7, #16
 80089ea:	4619      	mov	r1, r3
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f7ff fea7 	bl	8008740 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80089f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f6:	2107      	movs	r1, #7
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 f909 	bl	8008c10 <SDMMC_GetCmdResp1>
 80089fe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3728      	adds	r7, #40	; 0x28
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b088      	sub	sp, #32
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a28:	f107 0308 	add.w	r3, r7, #8
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff fe86 	bl	8008740 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fb23 	bl	8009080 <SDMMC_GetCmdError>
 8008a3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a3c:	69fb      	ldr	r3, [r7, #28]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3720      	adds	r7, #32
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b088      	sub	sp, #32
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008a4e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008a52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008a54:	2308      	movs	r3, #8
 8008a56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a58:	2340      	movs	r3, #64	; 0x40
 8008a5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a66:	f107 0308 	add.w	r3, r7, #8
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7ff fe67 	bl	8008740 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fab6 	bl	8008fe4 <SDMMC_GetCmdResp7>
 8008a78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a7a:	69fb      	ldr	r3, [r7, #28]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3720      	adds	r7, #32
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008a92:	2337      	movs	r3, #55	; 0x37
 8008a94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a96:	2340      	movs	r3, #64	; 0x40
 8008a98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008aa4:	f107 0308 	add.w	r3, r7, #8
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff fe48 	bl	8008740 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab4:	2137      	movs	r1, #55	; 0x37
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f8aa 	bl	8008c10 <SDMMC_GetCmdResp1>
 8008abc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008abe:	69fb      	ldr	r3, [r7, #28]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3720      	adds	r7, #32
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	4b0d      	ldr	r3, [pc, #52]	; (8008b0c <SDMMC_CmdAppOperCommand+0x44>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008ada:	2329      	movs	r3, #41	; 0x29
 8008adc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ade:	2340      	movs	r3, #64	; 0x40
 8008ae0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008aec:	f107 0308 	add.w	r3, r7, #8
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7ff fe24 	bl	8008740 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f9bf 	bl	8008e7c <SDMMC_GetCmdResp3>
 8008afe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b00:	69fb      	ldr	r3, [r7, #28]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3720      	adds	r7, #32
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	80100000 	.word	0x80100000

08008b10 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b088      	sub	sp, #32
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008b20:	23c0      	movs	r3, #192	; 0xc0
 8008b22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b24:	2300      	movs	r3, #0
 8008b26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b2e:	f107 0308 	add.w	r3, r7, #8
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7ff fe03 	bl	8008740 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f956 	bl	8008dec <SDMMC_GetCmdResp2>
 8008b40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b42:	69fb      	ldr	r3, [r7, #28]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3720      	adds	r7, #32
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b088      	sub	sp, #32
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008b5a:	2309      	movs	r3, #9
 8008b5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008b5e:	23c0      	movs	r3, #192	; 0xc0
 8008b60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b62:	2300      	movs	r3, #0
 8008b64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b6c:	f107 0308 	add.w	r3, r7, #8
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7ff fde4 	bl	8008740 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f937 	bl	8008dec <SDMMC_GetCmdResp2>
 8008b7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b80:	69fb      	ldr	r3, [r7, #28]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3720      	adds	r7, #32
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b088      	sub	sp, #32
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008b94:	2300      	movs	r3, #0
 8008b96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b9c:	2340      	movs	r3, #64	; 0x40
 8008b9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ba8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008baa:	f107 0308 	add.w	r3, r7, #8
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7ff fdc5 	bl	8008740 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	2103      	movs	r1, #3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f99c 	bl	8008ef8 <SDMMC_GetCmdResp6>
 8008bc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bc2:	69fb      	ldr	r3, [r7, #28]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3720      	adds	r7, #32
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b088      	sub	sp, #32
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008bda:	230d      	movs	r3, #13
 8008bdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bde:	2340      	movs	r3, #64	; 0x40
 8008be0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008be2:	2300      	movs	r3, #0
 8008be4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bec:	f107 0308 	add.w	r3, r7, #8
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff fda4 	bl	8008740 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bfc:	210d      	movs	r1, #13
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f806 	bl	8008c10 <SDMMC_GetCmdResp1>
 8008c04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c06:	69fb      	ldr	r3, [r7, #28]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3720      	adds	r7, #32
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	607a      	str	r2, [r7, #4]
 8008c1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008c1e:	4b70      	ldr	r3, [pc, #448]	; (8008de0 <SDMMC_GetCmdResp1+0x1d0>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a70      	ldr	r2, [pc, #448]	; (8008de4 <SDMMC_GetCmdResp1+0x1d4>)
 8008c24:	fba2 2303 	umull	r2, r3, r2, r3
 8008c28:	0a5a      	lsrs	r2, r3, #9
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	fb02 f303 	mul.w	r3, r2, r3
 8008c30:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	1e5a      	subs	r2, r3, #1
 8008c36:	61fa      	str	r2, [r7, #28]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d102      	bne.n	8008c42 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c40:	e0c9      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c46:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0ef      	beq.n	8008c32 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1ea      	bne.n	8008c32 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d004      	beq.n	8008c72 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2204      	movs	r2, #4
 8008c6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c6e:	2304      	movs	r3, #4
 8008c70:	e0b1      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d004      	beq.n	8008c88 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2201      	movs	r2, #1
 8008c82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e0a6      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	22c5      	movs	r2, #197	; 0xc5
 8008c8c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f7ff fd80 	bl	8008794 <SDMMC_GetCommandResponse>
 8008c94:	4603      	mov	r3, r0
 8008c96:	461a      	mov	r2, r3
 8008c98:	7afb      	ldrb	r3, [r7, #11]
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d001      	beq.n	8008ca2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e099      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f7ff fd82 	bl	80087ae <SDMMC_GetResponse>
 8008caa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	4b4e      	ldr	r3, [pc, #312]	; (8008de8 <SDMMC_GetCmdResp1+0x1d8>)
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	e08d      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	da02      	bge.n	8008cc6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008cc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008cc4:	e087      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008cd0:	2340      	movs	r3, #64	; 0x40
 8008cd2:	e080      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008cde:	2380      	movs	r3, #128	; 0x80
 8008ce0:	e079      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cf0:	e071      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d00:	e069      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d10:	e061      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008d1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d20:	e059      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d30:	e051      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d40:	e049      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008d4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d50:	e041      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d60:	e039      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d002      	beq.n	8008d72 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d70:	e031      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d002      	beq.n	8008d82 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008d7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d80:	e029      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d002      	beq.n	8008d92 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008d8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008d90:	e021      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008d9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008da0:	e019      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008dac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008db0:	e011      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008dbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008dc0:	e009      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f003 0308 	and.w	r3, r3, #8
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008dcc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008dd0:	e001      	b.n	8008dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3720      	adds	r7, #32
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000004 	.word	0x20000004
 8008de4:	10624dd3 	.word	0x10624dd3
 8008de8:	fdffe008 	.word	0xfdffe008

08008dec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008df4:	4b1f      	ldr	r3, [pc, #124]	; (8008e74 <SDMMC_GetCmdResp2+0x88>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a1f      	ldr	r2, [pc, #124]	; (8008e78 <SDMMC_GetCmdResp2+0x8c>)
 8008dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfe:	0a5b      	lsrs	r3, r3, #9
 8008e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e04:	fb02 f303 	mul.w	r3, r2, r3
 8008e08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	1e5a      	subs	r2, r3, #1
 8008e0e:	60fa      	str	r2, [r7, #12]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d102      	bne.n	8008e1a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e18:	e026      	b.n	8008e68 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d0ef      	beq.n	8008e0a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1ea      	bne.n	8008e0a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d004      	beq.n	8008e4a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2204      	movs	r2, #4
 8008e44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e46:	2304      	movs	r3, #4
 8008e48:	e00e      	b.n	8008e68 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d004      	beq.n	8008e60 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e003      	b.n	8008e68 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	22c5      	movs	r2, #197	; 0xc5
 8008e64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	20000004 	.word	0x20000004
 8008e78:	10624dd3 	.word	0x10624dd3

08008e7c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e84:	4b1a      	ldr	r3, [pc, #104]	; (8008ef0 <SDMMC_GetCmdResp3+0x74>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a1a      	ldr	r2, [pc, #104]	; (8008ef4 <SDMMC_GetCmdResp3+0x78>)
 8008e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e8e:	0a5b      	lsrs	r3, r3, #9
 8008e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e94:	fb02 f303 	mul.w	r3, r2, r3
 8008e98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	1e5a      	subs	r2, r3, #1
 8008e9e:	60fa      	str	r2, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d102      	bne.n	8008eaa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ea4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ea8:	e01b      	b.n	8008ee2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d0ef      	beq.n	8008e9a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1ea      	bne.n	8008e9a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d004      	beq.n	8008eda <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2204      	movs	r2, #4
 8008ed4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ed6:	2304      	movs	r3, #4
 8008ed8:	e003      	b.n	8008ee2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	22c5      	movs	r2, #197	; 0xc5
 8008ede:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	20000004 	.word	0x20000004
 8008ef4:	10624dd3 	.word	0x10624dd3

08008ef8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b088      	sub	sp, #32
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	460b      	mov	r3, r1
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f06:	4b35      	ldr	r3, [pc, #212]	; (8008fdc <SDMMC_GetCmdResp6+0xe4>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a35      	ldr	r2, [pc, #212]	; (8008fe0 <SDMMC_GetCmdResp6+0xe8>)
 8008f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f10:	0a5b      	lsrs	r3, r3, #9
 8008f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f16:	fb02 f303 	mul.w	r3, r2, r3
 8008f1a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	1e5a      	subs	r2, r3, #1
 8008f20:	61fa      	str	r2, [r7, #28]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f2a:	e052      	b.n	8008fd2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f30:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d0ef      	beq.n	8008f1c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1ea      	bne.n	8008f1c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4a:	f003 0304 	and.w	r3, r3, #4
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d004      	beq.n	8008f5c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2204      	movs	r2, #4
 8008f56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f58:	2304      	movs	r3, #4
 8008f5a:	e03a      	b.n	8008fd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d004      	beq.n	8008f72 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e02f      	b.n	8008fd2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f7ff fc0e 	bl	8008794 <SDMMC_GetCommandResponse>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	7afb      	ldrb	r3, [r7, #11]
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d001      	beq.n	8008f86 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e025      	b.n	8008fd2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	22c5      	movs	r2, #197	; 0xc5
 8008f8a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f7ff fc0d 	bl	80087ae <SDMMC_GetResponse>
 8008f94:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d106      	bne.n	8008fae <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	0c1b      	lsrs	r3, r3, #16
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008faa:	2300      	movs	r3, #0
 8008fac:	e011      	b.n	8008fd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008fbc:	e009      	b.n	8008fd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fcc:	e001      	b.n	8008fd2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008fce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3720      	adds	r7, #32
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	20000004 	.word	0x20000004
 8008fe0:	10624dd3 	.word	0x10624dd3

08008fe4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008fec:	4b22      	ldr	r3, [pc, #136]	; (8009078 <SDMMC_GetCmdResp7+0x94>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a22      	ldr	r2, [pc, #136]	; (800907c <SDMMC_GetCmdResp7+0x98>)
 8008ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff6:	0a5b      	lsrs	r3, r3, #9
 8008ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ffc:	fb02 f303 	mul.w	r3, r2, r3
 8009000:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	1e5a      	subs	r2, r3, #1
 8009006:	60fa      	str	r2, [r7, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d102      	bne.n	8009012 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800900c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009010:	e02c      	b.n	800906c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009016:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0ef      	beq.n	8009002 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1ea      	bne.n	8009002 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	2b00      	cmp	r3, #0
 8009036:	d004      	beq.n	8009042 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2204      	movs	r2, #4
 800903c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800903e:	2304      	movs	r3, #4
 8009040:	e014      	b.n	800906c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d004      	beq.n	8009058 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009054:	2301      	movs	r3, #1
 8009056:	e009      	b.n	800906c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800905c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2240      	movs	r2, #64	; 0x40
 8009068:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800906a:	2300      	movs	r3, #0
  
}
 800906c:	4618      	mov	r0, r3
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	20000004 	.word	0x20000004
 800907c:	10624dd3 	.word	0x10624dd3

08009080 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009088:	4b11      	ldr	r3, [pc, #68]	; (80090d0 <SDMMC_GetCmdError+0x50>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a11      	ldr	r2, [pc, #68]	; (80090d4 <SDMMC_GetCmdError+0x54>)
 800908e:	fba2 2303 	umull	r2, r3, r2, r3
 8009092:	0a5b      	lsrs	r3, r3, #9
 8009094:	f241 3288 	movw	r2, #5000	; 0x1388
 8009098:	fb02 f303 	mul.w	r3, r2, r3
 800909c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	1e5a      	subs	r2, r3, #1
 80090a2:	60fa      	str	r2, [r7, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d102      	bne.n	80090ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090ac:	e009      	b.n	80090c2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0f1      	beq.n	800909e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	22c5      	movs	r2, #197	; 0xc5
 80090be:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3714      	adds	r7, #20
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	20000004 	.word	0x20000004
 80090d4:	10624dd3 	.word	0x10624dd3

080090d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090d8:	b084      	sub	sp, #16
 80090da:	b580      	push	{r7, lr}
 80090dc:	b084      	sub	sp, #16
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	f107 001c 	add.w	r0, r7, #28
 80090e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d120      	bne.n	8009132 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68da      	ldr	r2, [r3, #12]
 8009100:	4b20      	ldr	r3, [pc, #128]	; (8009184 <USB_CoreInit+0xac>)
 8009102:	4013      	ands	r3, r2
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009116:	2b01      	cmp	r3, #1
 8009118:	d105      	bne.n	8009126 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 fbee 	bl	800a908 <USB_CoreReset>
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]
 8009130:	e010      	b.n	8009154 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f001 fbe2 	bl	800a908 <USB_CoreReset>
 8009144:	4603      	mov	r3, r0
 8009146:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	2b01      	cmp	r3, #1
 8009158:	d10b      	bne.n	8009172 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f043 0206 	orr.w	r2, r3, #6
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f043 0220 	orr.w	r2, r3, #32
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009172:	7bfb      	ldrb	r3, [r7, #15]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800917e:	b004      	add	sp, #16
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	ffbdffbf 	.word	0xffbdffbf

08009188 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	4613      	mov	r3, r2
 8009194:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009196:	79fb      	ldrb	r3, [r7, #7]
 8009198:	2b02      	cmp	r3, #2
 800919a:	d165      	bne.n	8009268 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	4a41      	ldr	r2, [pc, #260]	; (80092a4 <USB_SetTurnaroundTime+0x11c>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d906      	bls.n	80091b2 <USB_SetTurnaroundTime+0x2a>
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	4a40      	ldr	r2, [pc, #256]	; (80092a8 <USB_SetTurnaroundTime+0x120>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d202      	bcs.n	80091b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80091ac:	230f      	movs	r3, #15
 80091ae:	617b      	str	r3, [r7, #20]
 80091b0:	e062      	b.n	8009278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	4a3c      	ldr	r2, [pc, #240]	; (80092a8 <USB_SetTurnaroundTime+0x120>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d306      	bcc.n	80091c8 <USB_SetTurnaroundTime+0x40>
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	4a3b      	ldr	r2, [pc, #236]	; (80092ac <USB_SetTurnaroundTime+0x124>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d202      	bcs.n	80091c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80091c2:	230e      	movs	r3, #14
 80091c4:	617b      	str	r3, [r7, #20]
 80091c6:	e057      	b.n	8009278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	4a38      	ldr	r2, [pc, #224]	; (80092ac <USB_SetTurnaroundTime+0x124>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d306      	bcc.n	80091de <USB_SetTurnaroundTime+0x56>
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	4a37      	ldr	r2, [pc, #220]	; (80092b0 <USB_SetTurnaroundTime+0x128>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d202      	bcs.n	80091de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80091d8:	230d      	movs	r3, #13
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	e04c      	b.n	8009278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	4a33      	ldr	r2, [pc, #204]	; (80092b0 <USB_SetTurnaroundTime+0x128>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d306      	bcc.n	80091f4 <USB_SetTurnaroundTime+0x6c>
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	4a32      	ldr	r2, [pc, #200]	; (80092b4 <USB_SetTurnaroundTime+0x12c>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d802      	bhi.n	80091f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80091ee:	230c      	movs	r3, #12
 80091f0:	617b      	str	r3, [r7, #20]
 80091f2:	e041      	b.n	8009278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	4a2f      	ldr	r2, [pc, #188]	; (80092b4 <USB_SetTurnaroundTime+0x12c>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d906      	bls.n	800920a <USB_SetTurnaroundTime+0x82>
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	4a2e      	ldr	r2, [pc, #184]	; (80092b8 <USB_SetTurnaroundTime+0x130>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d802      	bhi.n	800920a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009204:	230b      	movs	r3, #11
 8009206:	617b      	str	r3, [r7, #20]
 8009208:	e036      	b.n	8009278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	4a2a      	ldr	r2, [pc, #168]	; (80092b8 <USB_SetTurnaroundTime+0x130>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d906      	bls.n	8009220 <USB_SetTurnaroundTime+0x98>
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	4a29      	ldr	r2, [pc, #164]	; (80092bc <USB_SetTurnaroundTime+0x134>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d802      	bhi.n	8009220 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800921a:	230a      	movs	r3, #10
 800921c:	617b      	str	r3, [r7, #20]
 800921e:	e02b      	b.n	8009278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	4a26      	ldr	r2, [pc, #152]	; (80092bc <USB_SetTurnaroundTime+0x134>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d906      	bls.n	8009236 <USB_SetTurnaroundTime+0xae>
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	4a25      	ldr	r2, [pc, #148]	; (80092c0 <USB_SetTurnaroundTime+0x138>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d202      	bcs.n	8009236 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009230:	2309      	movs	r3, #9
 8009232:	617b      	str	r3, [r7, #20]
 8009234:	e020      	b.n	8009278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	4a21      	ldr	r2, [pc, #132]	; (80092c0 <USB_SetTurnaroundTime+0x138>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d306      	bcc.n	800924c <USB_SetTurnaroundTime+0xc4>
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	4a20      	ldr	r2, [pc, #128]	; (80092c4 <USB_SetTurnaroundTime+0x13c>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d802      	bhi.n	800924c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009246:	2308      	movs	r3, #8
 8009248:	617b      	str	r3, [r7, #20]
 800924a:	e015      	b.n	8009278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	4a1d      	ldr	r2, [pc, #116]	; (80092c4 <USB_SetTurnaroundTime+0x13c>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d906      	bls.n	8009262 <USB_SetTurnaroundTime+0xda>
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	4a1c      	ldr	r2, [pc, #112]	; (80092c8 <USB_SetTurnaroundTime+0x140>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d202      	bcs.n	8009262 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800925c:	2307      	movs	r3, #7
 800925e:	617b      	str	r3, [r7, #20]
 8009260:	e00a      	b.n	8009278 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009262:	2306      	movs	r3, #6
 8009264:	617b      	str	r3, [r7, #20]
 8009266:	e007      	b.n	8009278 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d102      	bne.n	8009274 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800926e:	2309      	movs	r3, #9
 8009270:	617b      	str	r3, [r7, #20]
 8009272:	e001      	b.n	8009278 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009274:	2309      	movs	r3, #9
 8009276:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	68da      	ldr	r2, [r3, #12]
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	029b      	lsls	r3, r3, #10
 800928c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009290:	431a      	orrs	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	371c      	adds	r7, #28
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	00d8acbf 	.word	0x00d8acbf
 80092a8:	00e4e1c0 	.word	0x00e4e1c0
 80092ac:	00f42400 	.word	0x00f42400
 80092b0:	01067380 	.word	0x01067380
 80092b4:	011a499f 	.word	0x011a499f
 80092b8:	01312cff 	.word	0x01312cff
 80092bc:	014ca43f 	.word	0x014ca43f
 80092c0:	016e3600 	.word	0x016e3600
 80092c4:	01a6ab1f 	.word	0x01a6ab1f
 80092c8:	01e84800 	.word	0x01e84800

080092cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f043 0201 	orr.w	r2, r3, #1
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	370c      	adds	r7, #12
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr

080092ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b083      	sub	sp, #12
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f023 0201 	bic.w	r2, r3, #1
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800931c:	2300      	movs	r3, #0
 800931e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d115      	bne.n	800935e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800933e:	2001      	movs	r0, #1
 8009340:	f7f8 fd48 	bl	8001dd4 <HAL_Delay>
      ms++;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3301      	adds	r3, #1
 8009348:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f001 fa4b 	bl	800a7e6 <USB_GetMode>
 8009350:	4603      	mov	r3, r0
 8009352:	2b01      	cmp	r3, #1
 8009354:	d01e      	beq.n	8009394 <USB_SetCurrentMode+0x84>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2b31      	cmp	r3, #49	; 0x31
 800935a:	d9f0      	bls.n	800933e <USB_SetCurrentMode+0x2e>
 800935c:	e01a      	b.n	8009394 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800935e:	78fb      	ldrb	r3, [r7, #3]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d115      	bne.n	8009390 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009370:	2001      	movs	r0, #1
 8009372:	f7f8 fd2f 	bl	8001dd4 <HAL_Delay>
      ms++;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3301      	adds	r3, #1
 800937a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f001 fa32 	bl	800a7e6 <USB_GetMode>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <USB_SetCurrentMode+0x84>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2b31      	cmp	r3, #49	; 0x31
 800938c:	d9f0      	bls.n	8009370 <USB_SetCurrentMode+0x60>
 800938e:	e001      	b.n	8009394 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e005      	b.n	80093a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2b32      	cmp	r3, #50	; 0x32
 8009398:	d101      	bne.n	800939e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093a8:	b084      	sub	sp, #16
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b086      	sub	sp, #24
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80093b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80093c2:	2300      	movs	r3, #0
 80093c4:	613b      	str	r3, [r7, #16]
 80093c6:	e009      	b.n	80093dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	3340      	adds	r3, #64	; 0x40
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4413      	add	r3, r2
 80093d2:	2200      	movs	r2, #0
 80093d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	3301      	adds	r3, #1
 80093da:	613b      	str	r3, [r7, #16]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	2b0e      	cmp	r3, #14
 80093e0:	d9f2      	bls.n	80093c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80093e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d11c      	bne.n	8009422 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093f6:	f043 0302 	orr.w	r3, r3, #2
 80093fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009400:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	601a      	str	r2, [r3, #0]
 8009420:	e005      	b.n	800942e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009426:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009434:	461a      	mov	r2, r3
 8009436:	2300      	movs	r3, #0
 8009438:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009440:	4619      	mov	r1, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009448:	461a      	mov	r2, r3
 800944a:	680b      	ldr	r3, [r1, #0]
 800944c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	2b01      	cmp	r3, #1
 8009452:	d10c      	bne.n	800946e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009456:	2b00      	cmp	r3, #0
 8009458:	d104      	bne.n	8009464 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800945a:	2100      	movs	r1, #0
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f965 	bl	800972c <USB_SetDevSpeed>
 8009462:	e008      	b.n	8009476 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009464:	2101      	movs	r1, #1
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f960 	bl	800972c <USB_SetDevSpeed>
 800946c:	e003      	b.n	8009476 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800946e:	2103      	movs	r1, #3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f95b 	bl	800972c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009476:	2110      	movs	r1, #16
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f8f3 	bl	8009664 <USB_FlushTxFifo>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d001      	beq.n	8009488 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f91f 	bl	80096cc <USB_FlushRxFifo>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800949e:	461a      	mov	r2, r3
 80094a0:	2300      	movs	r3, #0
 80094a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094aa:	461a      	mov	r2, r3
 80094ac:	2300      	movs	r3, #0
 80094ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b6:	461a      	mov	r2, r3
 80094b8:	2300      	movs	r3, #0
 80094ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094bc:	2300      	movs	r3, #0
 80094be:	613b      	str	r3, [r7, #16]
 80094c0:	e043      	b.n	800954a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094d8:	d118      	bne.n	800950c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10a      	bne.n	80094f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ec:	461a      	mov	r2, r3
 80094ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80094f2:	6013      	str	r3, [r2, #0]
 80094f4:	e013      	b.n	800951e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	015a      	lsls	r2, r3, #5
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009502:	461a      	mov	r2, r3
 8009504:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009508:	6013      	str	r3, [r2, #0]
 800950a:	e008      	b.n	800951e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4413      	add	r3, r2
 8009514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009518:	461a      	mov	r2, r3
 800951a:	2300      	movs	r3, #0
 800951c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	4413      	add	r3, r2
 8009526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800952a:	461a      	mov	r2, r3
 800952c:	2300      	movs	r3, #0
 800952e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	015a      	lsls	r2, r3, #5
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4413      	add	r3, r2
 8009538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800953c:	461a      	mov	r2, r3
 800953e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009542:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	3301      	adds	r3, #1
 8009548:	613b      	str	r3, [r7, #16]
 800954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	429a      	cmp	r2, r3
 8009550:	d3b7      	bcc.n	80094c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009552:	2300      	movs	r3, #0
 8009554:	613b      	str	r3, [r7, #16]
 8009556:	e043      	b.n	80095e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	4413      	add	r3, r2
 8009560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800956a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800956e:	d118      	bne.n	80095a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10a      	bne.n	800958c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	4413      	add	r3, r2
 800957e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009582:	461a      	mov	r2, r3
 8009584:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009588:	6013      	str	r3, [r2, #0]
 800958a:	e013      	b.n	80095b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	015a      	lsls	r2, r3, #5
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4413      	add	r3, r2
 8009594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009598:	461a      	mov	r2, r3
 800959a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	e008      	b.n	80095b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	015a      	lsls	r2, r3, #5
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	4413      	add	r3, r2
 80095aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ae:	461a      	mov	r2, r3
 80095b0:	2300      	movs	r3, #0
 80095b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	015a      	lsls	r2, r3, #5
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c0:	461a      	mov	r2, r3
 80095c2:	2300      	movs	r3, #0
 80095c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	015a      	lsls	r2, r3, #5
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	4413      	add	r3, r2
 80095ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d2:	461a      	mov	r2, r3
 80095d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80095d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	3301      	adds	r3, #1
 80095de:	613b      	str	r3, [r7, #16]
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d3b7      	bcc.n	8009558 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009608:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800960a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960c:	2b00      	cmp	r3, #0
 800960e:	d105      	bne.n	800961c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	f043 0210 	orr.w	r2, r3, #16
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	699a      	ldr	r2, [r3, #24]
 8009620:	4b0e      	ldr	r3, [pc, #56]	; (800965c <USB_DevInit+0x2b4>)
 8009622:	4313      	orrs	r3, r2
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800962a:	2b00      	cmp	r3, #0
 800962c:	d005      	beq.n	800963a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	699b      	ldr	r3, [r3, #24]
 8009632:	f043 0208 	orr.w	r2, r3, #8
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800963a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800963c:	2b01      	cmp	r3, #1
 800963e:	d105      	bne.n	800964c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	699a      	ldr	r2, [r3, #24]
 8009644:	4b06      	ldr	r3, [pc, #24]	; (8009660 <USB_DevInit+0x2b8>)
 8009646:	4313      	orrs	r3, r2
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800964c:	7dfb      	ldrb	r3, [r7, #23]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009658:	b004      	add	sp, #16
 800965a:	4770      	bx	lr
 800965c:	803c3800 	.word	0x803c3800
 8009660:	40000004 	.word	0x40000004

08009664 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800966e:	2300      	movs	r3, #0
 8009670:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	3301      	adds	r3, #1
 8009676:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	4a13      	ldr	r2, [pc, #76]	; (80096c8 <USB_FlushTxFifo+0x64>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d901      	bls.n	8009684 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	e01b      	b.n	80096bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	daf2      	bge.n	8009672 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800968c:	2300      	movs	r3, #0
 800968e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	019b      	lsls	r3, r3, #6
 8009694:	f043 0220 	orr.w	r2, r3, #32
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	3301      	adds	r3, #1
 80096a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	4a08      	ldr	r2, [pc, #32]	; (80096c8 <USB_FlushTxFifo+0x64>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d901      	bls.n	80096ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	e006      	b.n	80096bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	f003 0320 	and.w	r3, r3, #32
 80096b6:	2b20      	cmp	r3, #32
 80096b8:	d0f0      	beq.n	800969c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	00030d40 	.word	0x00030d40

080096cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096d4:	2300      	movs	r3, #0
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3301      	adds	r3, #1
 80096dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	4a11      	ldr	r2, [pc, #68]	; (8009728 <USB_FlushRxFifo+0x5c>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d901      	bls.n	80096ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80096e6:	2303      	movs	r3, #3
 80096e8:	e018      	b.n	800971c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	daf2      	bge.n	80096d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2210      	movs	r2, #16
 80096fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3301      	adds	r3, #1
 8009700:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	4a08      	ldr	r2, [pc, #32]	; (8009728 <USB_FlushRxFifo+0x5c>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d901      	bls.n	800970e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800970a:	2303      	movs	r3, #3
 800970c:	e006      	b.n	800971c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	f003 0310 	and.w	r3, r3, #16
 8009716:	2b10      	cmp	r3, #16
 8009718:	d0f0      	beq.n	80096fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	00030d40 	.word	0x00030d40

0800972c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	78fb      	ldrb	r3, [r7, #3]
 8009746:	68f9      	ldr	r1, [r7, #12]
 8009748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800974c:	4313      	orrs	r3, r2
 800974e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr

0800975e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800975e:	b480      	push	{r7}
 8009760:	b087      	sub	sp, #28
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f003 0306 	and.w	r3, r3, #6
 8009776:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d102      	bne.n	8009784 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800977e:	2300      	movs	r3, #0
 8009780:	75fb      	strb	r3, [r7, #23]
 8009782:	e00a      	b.n	800979a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2b02      	cmp	r3, #2
 8009788:	d002      	beq.n	8009790 <USB_GetDevSpeed+0x32>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2b06      	cmp	r3, #6
 800978e:	d102      	bne.n	8009796 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009790:	2302      	movs	r3, #2
 8009792:	75fb      	strb	r3, [r7, #23]
 8009794:	e001      	b.n	800979a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009796:	230f      	movs	r3, #15
 8009798:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800979a:	7dfb      	ldrb	r3, [r7, #23]
}
 800979c:	4618      	mov	r0, r3
 800979e:	371c      	adds	r7, #28
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	785b      	ldrb	r3, [r3, #1]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d139      	bne.n	8009838 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ca:	69da      	ldr	r2, [r3, #28]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	f003 030f 	and.w	r3, r3, #15
 80097d4:	2101      	movs	r1, #1
 80097d6:	fa01 f303 	lsl.w	r3, r1, r3
 80097da:	b29b      	uxth	r3, r3
 80097dc:	68f9      	ldr	r1, [r7, #12]
 80097de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097e2:	4313      	orrs	r3, r2
 80097e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	015a      	lsls	r2, r3, #5
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4413      	add	r3, r2
 80097ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d153      	bne.n	80098a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	791b      	ldrb	r3, [r3, #4]
 8009816:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009818:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	059b      	lsls	r3, r3, #22
 800981e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009820:	431a      	orrs	r2, r3
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	0159      	lsls	r1, r3, #5
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	440b      	add	r3, r1
 800982a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982e:	4619      	mov	r1, r3
 8009830:	4b20      	ldr	r3, [pc, #128]	; (80098b4 <USB_ActivateEndpoint+0x10c>)
 8009832:	4313      	orrs	r3, r2
 8009834:	600b      	str	r3, [r1, #0]
 8009836:	e035      	b.n	80098a4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800983e:	69da      	ldr	r2, [r3, #28]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	f003 030f 	and.w	r3, r3, #15
 8009848:	2101      	movs	r1, #1
 800984a:	fa01 f303 	lsl.w	r3, r1, r3
 800984e:	041b      	lsls	r3, r3, #16
 8009850:	68f9      	ldr	r1, [r7, #12]
 8009852:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009856:	4313      	orrs	r3, r2
 8009858:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	015a      	lsls	r2, r3, #5
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	4413      	add	r3, r2
 8009862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d119      	bne.n	80098a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	791b      	ldrb	r3, [r3, #4]
 800988a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800988c:	430b      	orrs	r3, r1
 800988e:	431a      	orrs	r2, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	0159      	lsls	r1, r3, #5
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	440b      	add	r3, r1
 8009898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800989c:	4619      	mov	r1, r3
 800989e:	4b05      	ldr	r3, [pc, #20]	; (80098b4 <USB_ActivateEndpoint+0x10c>)
 80098a0:	4313      	orrs	r3, r2
 80098a2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	10008000 	.word	0x10008000

080098b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	785b      	ldrb	r3, [r3, #1]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d161      	bne.n	8009998 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098ea:	d11f      	bne.n	800992c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	015a      	lsls	r2, r3, #5
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	0151      	lsls	r1, r2, #5
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	440a      	add	r2, r1
 8009902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009906:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800990a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4413      	add	r3, r2
 8009914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	0151      	lsls	r1, r2, #5
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	440a      	add	r2, r1
 8009922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800992a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	f003 030f 	and.w	r3, r3, #15
 800993c:	2101      	movs	r1, #1
 800993e:	fa01 f303 	lsl.w	r3, r1, r3
 8009942:	b29b      	uxth	r3, r3
 8009944:	43db      	mvns	r3, r3
 8009946:	68f9      	ldr	r1, [r7, #12]
 8009948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800994c:	4013      	ands	r3, r2
 800994e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009956:	69da      	ldr	r2, [r3, #28]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	f003 030f 	and.w	r3, r3, #15
 8009960:	2101      	movs	r1, #1
 8009962:	fa01 f303 	lsl.w	r3, r1, r3
 8009966:	b29b      	uxth	r3, r3
 8009968:	43db      	mvns	r3, r3
 800996a:	68f9      	ldr	r1, [r7, #12]
 800996c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009970:	4013      	ands	r3, r2
 8009972:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	015a      	lsls	r2, r3, #5
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4413      	add	r3, r2
 800997c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	0159      	lsls	r1, r3, #5
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	440b      	add	r3, r1
 800998a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800998e:	4619      	mov	r1, r3
 8009990:	4b35      	ldr	r3, [pc, #212]	; (8009a68 <USB_DeactivateEndpoint+0x1b0>)
 8009992:	4013      	ands	r3, r2
 8009994:	600b      	str	r3, [r1, #0]
 8009996:	e060      	b.n	8009a5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099ae:	d11f      	bne.n	80099f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	015a      	lsls	r2, r3, #5
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	4413      	add	r3, r2
 80099b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	0151      	lsls	r1, r2, #5
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	440a      	add	r2, r1
 80099c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	0151      	lsls	r1, r2, #5
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	440a      	add	r2, r1
 80099e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	f003 030f 	and.w	r3, r3, #15
 8009a00:	2101      	movs	r1, #1
 8009a02:	fa01 f303 	lsl.w	r3, r1, r3
 8009a06:	041b      	lsls	r3, r3, #16
 8009a08:	43db      	mvns	r3, r3
 8009a0a:	68f9      	ldr	r1, [r7, #12]
 8009a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a10:	4013      	ands	r3, r2
 8009a12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a1a:	69da      	ldr	r2, [r3, #28]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	f003 030f 	and.w	r3, r3, #15
 8009a24:	2101      	movs	r1, #1
 8009a26:	fa01 f303 	lsl.w	r3, r1, r3
 8009a2a:	041b      	lsls	r3, r3, #16
 8009a2c:	43db      	mvns	r3, r3
 8009a2e:	68f9      	ldr	r1, [r7, #12]
 8009a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a34:	4013      	ands	r3, r2
 8009a36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	015a      	lsls	r2, r3, #5
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4413      	add	r3, r2
 8009a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	0159      	lsls	r1, r3, #5
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	440b      	add	r3, r1
 8009a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a52:	4619      	mov	r1, r3
 8009a54:	4b05      	ldr	r3, [pc, #20]	; (8009a6c <USB_DeactivateEndpoint+0x1b4>)
 8009a56:	4013      	ands	r3, r2
 8009a58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	ec337800 	.word	0xec337800
 8009a6c:	eff37800 	.word	0xeff37800

08009a70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08a      	sub	sp, #40	; 0x28
 8009a74:	af02      	add	r7, sp, #8
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	785b      	ldrb	r3, [r3, #1]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	f040 8163 	bne.w	8009d58 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d132      	bne.n	8009b00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	015a      	lsls	r2, r3, #5
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa6:	691a      	ldr	r2, [r3, #16]
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	0159      	lsls	r1, r3, #5
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	440b      	add	r3, r1
 8009ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	4ba5      	ldr	r3, [pc, #660]	; (8009d4c <USB_EPStartXfer+0x2dc>)
 8009ab8:	4013      	ands	r3, r2
 8009aba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	015a      	lsls	r2, r3, #5
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	0151      	lsls	r1, r2, #5
 8009ace:	69fa      	ldr	r2, [r7, #28]
 8009ad0:	440a      	add	r2, r1
 8009ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ad6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ada:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae8:	691a      	ldr	r2, [r3, #16]
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	0159      	lsls	r1, r3, #5
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	440b      	add	r3, r1
 8009af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af6:	4619      	mov	r1, r3
 8009af8:	4b95      	ldr	r3, [pc, #596]	; (8009d50 <USB_EPStartXfer+0x2e0>)
 8009afa:	4013      	ands	r3, r2
 8009afc:	610b      	str	r3, [r1, #16]
 8009afe:	e074      	b.n	8009bea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	015a      	lsls	r2, r3, #5
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	4413      	add	r3, r2
 8009b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b0c:	691a      	ldr	r2, [r3, #16]
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	0159      	lsls	r1, r3, #5
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	440b      	add	r3, r1
 8009b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	4b8c      	ldr	r3, [pc, #560]	; (8009d50 <USB_EPStartXfer+0x2e0>)
 8009b1e:	4013      	ands	r3, r2
 8009b20:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b2e:	691a      	ldr	r2, [r3, #16]
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	0159      	lsls	r1, r3, #5
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	440b      	add	r3, r1
 8009b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4b83      	ldr	r3, [pc, #524]	; (8009d4c <USB_EPStartXfer+0x2dc>)
 8009b40:	4013      	ands	r3, r2
 8009b42:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b50:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	6999      	ldr	r1, [r3, #24]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	440b      	add	r3, r1
 8009b5c:	1e59      	subs	r1, r3, #1
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b66:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009b68:	4b7a      	ldr	r3, [pc, #488]	; (8009d54 <USB_EPStartXfer+0x2e4>)
 8009b6a:	400b      	ands	r3, r1
 8009b6c:	69b9      	ldr	r1, [r7, #24]
 8009b6e:	0148      	lsls	r0, r1, #5
 8009b70:	69f9      	ldr	r1, [r7, #28]
 8009b72:	4401      	add	r1, r0
 8009b74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	015a      	lsls	r2, r3, #5
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	4413      	add	r3, r2
 8009b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b88:	691a      	ldr	r2, [r3, #16]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b92:	69b9      	ldr	r1, [r7, #24]
 8009b94:	0148      	lsls	r0, r1, #5
 8009b96:	69f9      	ldr	r1, [r7, #28]
 8009b98:	4401      	add	r1, r0
 8009b9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	791b      	ldrb	r3, [r3, #4]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d11f      	bne.n	8009bea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	015a      	lsls	r2, r3, #5
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	69ba      	ldr	r2, [r7, #24]
 8009bba:	0151      	lsls	r1, r2, #5
 8009bbc:	69fa      	ldr	r2, [r7, #28]
 8009bbe:	440a      	add	r2, r1
 8009bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bc4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009bc8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	69ba      	ldr	r2, [r7, #24]
 8009bda:	0151      	lsls	r1, r2, #5
 8009bdc:	69fa      	ldr	r2, [r7, #28]
 8009bde:	440a      	add	r2, r1
 8009be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009be4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009be8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d14b      	bne.n	8009c88 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	695b      	ldr	r3, [r3, #20]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d009      	beq.n	8009c0c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	015a      	lsls	r2, r3, #5
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	4413      	add	r3, r2
 8009c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c04:	461a      	mov	r2, r3
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	791b      	ldrb	r3, [r3, #4]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d128      	bne.n	8009c66 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d110      	bne.n	8009c46 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	69ba      	ldr	r2, [r7, #24]
 8009c34:	0151      	lsls	r1, r2, #5
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	440a      	add	r2, r1
 8009c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c42:	6013      	str	r3, [r2, #0]
 8009c44:	e00f      	b.n	8009c66 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	015a      	lsls	r2, r3, #5
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	69ba      	ldr	r2, [r7, #24]
 8009c56:	0151      	lsls	r1, r2, #5
 8009c58:	69fa      	ldr	r2, [r7, #28]
 8009c5a:	440a      	add	r2, r1
 8009c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	0151      	lsls	r1, r2, #5
 8009c78:	69fa      	ldr	r2, [r7, #28]
 8009c7a:	440a      	add	r2, r1
 8009c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c84:	6013      	str	r3, [r2, #0]
 8009c86:	e137      	b.n	8009ef8 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	69ba      	ldr	r2, [r7, #24]
 8009c98:	0151      	lsls	r1, r2, #5
 8009c9a:	69fa      	ldr	r2, [r7, #28]
 8009c9c:	440a      	add	r2, r1
 8009c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ca2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ca6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	791b      	ldrb	r3, [r3, #4]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d015      	beq.n	8009cdc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 811f 	beq.w	8009ef8 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	f003 030f 	and.w	r3, r3, #15
 8009cca:	2101      	movs	r1, #1
 8009ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8009cd0:	69f9      	ldr	r1, [r7, #28]
 8009cd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	634b      	str	r3, [r1, #52]	; 0x34
 8009cda:	e10d      	b.n	8009ef8 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d110      	bne.n	8009d0e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	015a      	lsls	r2, r3, #5
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	69ba      	ldr	r2, [r7, #24]
 8009cfc:	0151      	lsls	r1, r2, #5
 8009cfe:	69fa      	ldr	r2, [r7, #28]
 8009d00:	440a      	add	r2, r1
 8009d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d0a:	6013      	str	r3, [r2, #0]
 8009d0c:	e00f      	b.n	8009d2e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	015a      	lsls	r2, r3, #5
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	69ba      	ldr	r2, [r7, #24]
 8009d1e:	0151      	lsls	r1, r2, #5
 8009d20:	69fa      	ldr	r2, [r7, #28]
 8009d22:	440a      	add	r2, r1
 8009d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d2c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	6919      	ldr	r1, [r3, #16]
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	781a      	ldrb	r2, [r3, #0]
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	b298      	uxth	r0, r3
 8009d3c:	79fb      	ldrb	r3, [r7, #7]
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	4603      	mov	r3, r0
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 faea 	bl	800a31c <USB_WritePacket>
 8009d48:	e0d6      	b.n	8009ef8 <USB_EPStartXfer+0x488>
 8009d4a:	bf00      	nop
 8009d4c:	e007ffff 	.word	0xe007ffff
 8009d50:	fff80000 	.word	0xfff80000
 8009d54:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d64:	691a      	ldr	r2, [r3, #16]
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	0159      	lsls	r1, r3, #5
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	440b      	add	r3, r1
 8009d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d72:	4619      	mov	r1, r3
 8009d74:	4b63      	ldr	r3, [pc, #396]	; (8009f04 <USB_EPStartXfer+0x494>)
 8009d76:	4013      	ands	r3, r2
 8009d78:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	015a      	lsls	r2, r3, #5
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	4413      	add	r3, r2
 8009d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d86:	691a      	ldr	r2, [r3, #16]
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	0159      	lsls	r1, r3, #5
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	440b      	add	r3, r1
 8009d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d94:	4619      	mov	r1, r3
 8009d96:	4b5c      	ldr	r3, [pc, #368]	; (8009f08 <USB_EPStartXfer+0x498>)
 8009d98:	4013      	ands	r3, r2
 8009d9a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d123      	bne.n	8009dec <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	015a      	lsls	r2, r3, #5
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	4413      	add	r3, r2
 8009dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db0:	691a      	ldr	r2, [r3, #16]
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dba:	69b9      	ldr	r1, [r7, #24]
 8009dbc:	0148      	lsls	r0, r1, #5
 8009dbe:	69f9      	ldr	r1, [r7, #28]
 8009dc0:	4401      	add	r1, r0
 8009dc2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	015a      	lsls	r2, r3, #5
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	69ba      	ldr	r2, [r7, #24]
 8009dda:	0151      	lsls	r1, r2, #5
 8009ddc:	69fa      	ldr	r2, [r7, #28]
 8009dde:	440a      	add	r2, r1
 8009de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009de4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009de8:	6113      	str	r3, [r2, #16]
 8009dea:	e037      	b.n	8009e5c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	699a      	ldr	r2, [r3, #24]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	4413      	add	r3, r2
 8009df6:	1e5a      	subs	r2, r3, #1
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e00:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	8afa      	ldrh	r2, [r7, #22]
 8009e08:	fb03 f202 	mul.w	r2, r3, r2
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e1c:	691a      	ldr	r2, [r3, #16]
 8009e1e:	8afb      	ldrh	r3, [r7, #22]
 8009e20:	04d9      	lsls	r1, r3, #19
 8009e22:	4b3a      	ldr	r3, [pc, #232]	; (8009f0c <USB_EPStartXfer+0x49c>)
 8009e24:	400b      	ands	r3, r1
 8009e26:	69b9      	ldr	r1, [r7, #24]
 8009e28:	0148      	lsls	r0, r1, #5
 8009e2a:	69f9      	ldr	r1, [r7, #28]
 8009e2c:	4401      	add	r1, r0
 8009e2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e32:	4313      	orrs	r3, r2
 8009e34:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	015a      	lsls	r2, r3, #5
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e42:	691a      	ldr	r2, [r3, #16]
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	69db      	ldr	r3, [r3, #28]
 8009e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e4c:	69b9      	ldr	r1, [r7, #24]
 8009e4e:	0148      	lsls	r0, r1, #5
 8009e50:	69f9      	ldr	r1, [r7, #28]
 8009e52:	4401      	add	r1, r0
 8009e54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009e5c:	79fb      	ldrb	r3, [r7, #7]
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d10d      	bne.n	8009e7e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d009      	beq.n	8009e7e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	6919      	ldr	r1, [r3, #16]
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	015a      	lsls	r2, r3, #5
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	4413      	add	r3, r2
 8009e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e7a:	460a      	mov	r2, r1
 8009e7c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	791b      	ldrb	r3, [r3, #4]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d128      	bne.n	8009ed8 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d110      	bne.n	8009eb8 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	015a      	lsls	r2, r3, #5
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	69ba      	ldr	r2, [r7, #24]
 8009ea6:	0151      	lsls	r1, r2, #5
 8009ea8:	69fa      	ldr	r2, [r7, #28]
 8009eaa:	440a      	add	r2, r1
 8009eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009eb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	e00f      	b.n	8009ed8 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	015a      	lsls	r2, r3, #5
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	69ba      	ldr	r2, [r7, #24]
 8009ec8:	0151      	lsls	r1, r2, #5
 8009eca:	69fa      	ldr	r2, [r7, #28]
 8009ecc:	440a      	add	r2, r1
 8009ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ed6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	69ba      	ldr	r2, [r7, #24]
 8009ee8:	0151      	lsls	r1, r2, #5
 8009eea:	69fa      	ldr	r2, [r7, #28]
 8009eec:	440a      	add	r2, r1
 8009eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ef2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ef6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3720      	adds	r7, #32
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	fff80000 	.word	0xfff80000
 8009f08:	e007ffff 	.word	0xe007ffff
 8009f0c:	1ff80000 	.word	0x1ff80000

08009f10 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b087      	sub	sp, #28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	785b      	ldrb	r3, [r3, #1]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	f040 80ce 	bne.w	800a0ce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d132      	bne.n	8009fa0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	015a      	lsls	r2, r3, #5
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	4413      	add	r3, r2
 8009f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f46:	691a      	ldr	r2, [r3, #16]
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	0159      	lsls	r1, r3, #5
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	440b      	add	r3, r1
 8009f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f54:	4619      	mov	r1, r3
 8009f56:	4b9a      	ldr	r3, [pc, #616]	; (800a1c0 <USB_EP0StartXfer+0x2b0>)
 8009f58:	4013      	ands	r3, r2
 8009f5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	0151      	lsls	r1, r2, #5
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	440a      	add	r2, r1
 8009f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f88:	691a      	ldr	r2, [r3, #16]
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	0159      	lsls	r1, r3, #5
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	440b      	add	r3, r1
 8009f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f96:	4619      	mov	r1, r3
 8009f98:	4b8a      	ldr	r3, [pc, #552]	; (800a1c4 <USB_EP0StartXfer+0x2b4>)
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	610b      	str	r3, [r1, #16]
 8009f9e:	e04e      	b.n	800a03e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	015a      	lsls	r2, r3, #5
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fac:	691a      	ldr	r2, [r3, #16]
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	0159      	lsls	r1, r3, #5
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	440b      	add	r3, r1
 8009fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4b81      	ldr	r3, [pc, #516]	; (800a1c4 <USB_EP0StartXfer+0x2b4>)
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fce:	691a      	ldr	r2, [r3, #16]
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	0159      	lsls	r1, r3, #5
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	440b      	add	r3, r1
 8009fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fdc:	4619      	mov	r1, r3
 8009fde:	4b78      	ldr	r3, [pc, #480]	; (800a1c0 <USB_EP0StartXfer+0x2b0>)
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	699a      	ldr	r2, [r3, #24]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d903      	bls.n	8009ff8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	68da      	ldr	r2, [r3, #12]
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	0151      	lsls	r1, r2, #5
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	440a      	add	r2, r1
 800a00e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a012:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a016:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a024:	691a      	ldr	r2, [r3, #16]
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a02e:	6939      	ldr	r1, [r7, #16]
 800a030:	0148      	lsls	r0, r1, #5
 800a032:	6979      	ldr	r1, [r7, #20]
 800a034:	4401      	add	r1, r0
 800a036:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a03a:	4313      	orrs	r3, r2
 800a03c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a03e:	79fb      	ldrb	r3, [r7, #7]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d11e      	bne.n	800a082 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d009      	beq.n	800a060 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	015a      	lsls	r2, r3, #5
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	4413      	add	r3, r2
 800a054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a058:	461a      	mov	r2, r3
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	015a      	lsls	r2, r3, #5
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	4413      	add	r3, r2
 800a068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	0151      	lsls	r1, r2, #5
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	440a      	add	r2, r1
 800a076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a07a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a07e:	6013      	str	r3, [r2, #0]
 800a080:	e097      	b.n	800a1b2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	015a      	lsls	r2, r3, #5
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	4413      	add	r3, r2
 800a08a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	0151      	lsls	r1, r2, #5
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	440a      	add	r2, r1
 800a098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a09c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f000 8083 	beq.w	800a1b2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	f003 030f 	and.w	r3, r3, #15
 800a0bc:	2101      	movs	r1, #1
 800a0be:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c2:	6979      	ldr	r1, [r7, #20]
 800a0c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	634b      	str	r3, [r1, #52]	; 0x34
 800a0cc:	e071      	b.n	800a1b2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	015a      	lsls	r2, r3, #5
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0da:	691a      	ldr	r2, [r3, #16]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	0159      	lsls	r1, r3, #5
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	440b      	add	r3, r1
 800a0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	4b36      	ldr	r3, [pc, #216]	; (800a1c4 <USB_EP0StartXfer+0x2b4>)
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0fc:	691a      	ldr	r2, [r3, #16]
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	0159      	lsls	r1, r3, #5
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	440b      	add	r3, r1
 800a106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a10a:	4619      	mov	r1, r3
 800a10c:	4b2c      	ldr	r3, [pc, #176]	; (800a1c0 <USB_EP0StartXfer+0x2b0>)
 800a10e:	4013      	ands	r3, r2
 800a110:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	68da      	ldr	r2, [r3, #12]
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	68da      	ldr	r2, [r3, #12]
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	4413      	add	r3, r2
 800a132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	693a      	ldr	r2, [r7, #16]
 800a13a:	0151      	lsls	r1, r2, #5
 800a13c:	697a      	ldr	r2, [r7, #20]
 800a13e:	440a      	add	r2, r1
 800a140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a144:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a148:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	015a      	lsls	r2, r3, #5
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	4413      	add	r3, r2
 800a152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a156:	691a      	ldr	r2, [r3, #16]
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	69db      	ldr	r3, [r3, #28]
 800a15c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a160:	6939      	ldr	r1, [r7, #16]
 800a162:	0148      	lsls	r0, r1, #5
 800a164:	6979      	ldr	r1, [r7, #20]
 800a166:	4401      	add	r1, r0
 800a168:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a16c:	4313      	orrs	r3, r2
 800a16e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a170:	79fb      	ldrb	r3, [r7, #7]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d10d      	bne.n	800a192 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d009      	beq.n	800a192 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	6919      	ldr	r1, [r3, #16]
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a18e:	460a      	mov	r2, r1
 800a190:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	0151      	lsls	r1, r2, #5
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	440a      	add	r2, r1
 800a1a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	371c      	adds	r7, #28
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	e007ffff 	.word	0xe007ffff
 800a1c4:	fff80000 	.word	0xfff80000

0800a1c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b087      	sub	sp, #28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	785b      	ldrb	r3, [r3, #1]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d14a      	bne.n	800a27c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	015a      	lsls	r2, r3, #5
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1fe:	f040 8086 	bne.w	800a30e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	015a      	lsls	r2, r3, #5
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	4413      	add	r3, r2
 800a20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	7812      	ldrb	r2, [r2, #0]
 800a216:	0151      	lsls	r1, r2, #5
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	440a      	add	r2, r1
 800a21c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a220:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a224:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	7812      	ldrb	r2, [r2, #0]
 800a23a:	0151      	lsls	r1, r2, #5
 800a23c:	693a      	ldr	r2, [r7, #16]
 800a23e:	440a      	add	r2, r1
 800a240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a244:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a248:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3301      	adds	r3, #1
 800a24e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f242 7210 	movw	r2, #10000	; 0x2710
 800a256:	4293      	cmp	r3, r2
 800a258:	d902      	bls.n	800a260 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	75fb      	strb	r3, [r7, #23]
          break;
 800a25e:	e056      	b.n	800a30e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	015a      	lsls	r2, r3, #5
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	4413      	add	r3, r2
 800a26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a278:	d0e7      	beq.n	800a24a <USB_EPStopXfer+0x82>
 800a27a:	e048      	b.n	800a30e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a290:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a294:	d13b      	bne.n	800a30e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	015a      	lsls	r2, r3, #5
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	4413      	add	r3, r2
 800a2a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	7812      	ldrb	r2, [r2, #0]
 800a2aa:	0151      	lsls	r1, r2, #5
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	440a      	add	r2, r1
 800a2b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a2b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	7812      	ldrb	r2, [r2, #0]
 800a2ce:	0151      	lsls	r1, r2, #5
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	440a      	add	r2, r1
 800a2d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f242 7210 	movw	r2, #10000	; 0x2710
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d902      	bls.n	800a2f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	75fb      	strb	r3, [r7, #23]
          break;
 800a2f2:	e00c      	b.n	800a30e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a30c:	d0e7      	beq.n	800a2de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a30e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a310:	4618      	mov	r0, r3
 800a312:	371c      	adds	r7, #28
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b089      	sub	sp, #36	; 0x24
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	4611      	mov	r1, r2
 800a328:	461a      	mov	r2, r3
 800a32a:	460b      	mov	r3, r1
 800a32c:	71fb      	strb	r3, [r7, #7]
 800a32e:	4613      	mov	r3, r2
 800a330:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a33a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d123      	bne.n	800a38a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a342:	88bb      	ldrh	r3, [r7, #4]
 800a344:	3303      	adds	r3, #3
 800a346:	089b      	lsrs	r3, r3, #2
 800a348:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a34a:	2300      	movs	r3, #0
 800a34c:	61bb      	str	r3, [r7, #24]
 800a34e:	e018      	b.n	800a382 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a350:	79fb      	ldrb	r3, [r7, #7]
 800a352:	031a      	lsls	r2, r3, #12
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	4413      	add	r3, r2
 800a358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a35c:	461a      	mov	r2, r3
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	3301      	adds	r3, #1
 800a368:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	3301      	adds	r3, #1
 800a36e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	3301      	adds	r3, #1
 800a374:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a376:	69fb      	ldr	r3, [r7, #28]
 800a378:	3301      	adds	r3, #1
 800a37a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	3301      	adds	r3, #1
 800a380:	61bb      	str	r3, [r7, #24]
 800a382:	69ba      	ldr	r2, [r7, #24]
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	429a      	cmp	r2, r3
 800a388:	d3e2      	bcc.n	800a350 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3724      	adds	r7, #36	; 0x24
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a398:	b480      	push	{r7}
 800a39a:	b08b      	sub	sp, #44	; 0x2c
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a3ae:	88fb      	ldrh	r3, [r7, #6]
 800a3b0:	089b      	lsrs	r3, r3, #2
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a3b6:	88fb      	ldrh	r3, [r7, #6]
 800a3b8:	f003 0303 	and.w	r3, r3, #3
 800a3bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a3be:	2300      	movs	r3, #0
 800a3c0:	623b      	str	r3, [r7, #32]
 800a3c2:	e014      	b.n	800a3ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ce:	601a      	str	r2, [r3, #0]
    pDest++;
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	3301      	adds	r3, #1
 800a3da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3de:	3301      	adds	r3, #1
 800a3e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	623b      	str	r3, [r7, #32]
 800a3ee:	6a3a      	ldr	r2, [r7, #32]
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d3e6      	bcc.n	800a3c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a3f6:	8bfb      	ldrh	r3, [r7, #30]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d01e      	beq.n	800a43a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a406:	461a      	mov	r2, r3
 800a408:	f107 0310 	add.w	r3, r7, #16
 800a40c:	6812      	ldr	r2, [r2, #0]
 800a40e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a410:	693a      	ldr	r2, [r7, #16]
 800a412:	6a3b      	ldr	r3, [r7, #32]
 800a414:	b2db      	uxtb	r3, r3
 800a416:	00db      	lsls	r3, r3, #3
 800a418:	fa22 f303 	lsr.w	r3, r2, r3
 800a41c:	b2da      	uxtb	r2, r3
 800a41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a420:	701a      	strb	r2, [r3, #0]
      i++;
 800a422:	6a3b      	ldr	r3, [r7, #32]
 800a424:	3301      	adds	r3, #1
 800a426:	623b      	str	r3, [r7, #32]
      pDest++;
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	3301      	adds	r3, #1
 800a42c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a42e:	8bfb      	ldrh	r3, [r7, #30]
 800a430:	3b01      	subs	r3, #1
 800a432:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a434:	8bfb      	ldrh	r3, [r7, #30]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1ea      	bne.n	800a410 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	372c      	adds	r7, #44	; 0x2c
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	785b      	ldrb	r3, [r3, #1]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d12c      	bne.n	800a4be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	db12      	blt.n	800a49c <USB_EPSetStall+0x54>
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00f      	beq.n	800a49c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	015a      	lsls	r2, r3, #5
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	4413      	add	r3, r2
 800a484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	0151      	lsls	r1, r2, #5
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	440a      	add	r2, r1
 800a492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a496:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a49a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	015a      	lsls	r2, r3, #5
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	0151      	lsls	r1, r2, #5
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	440a      	add	r2, r1
 800a4b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a4ba:	6013      	str	r3, [r2, #0]
 800a4bc:	e02b      	b.n	800a516 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	015a      	lsls	r2, r3, #5
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	db12      	blt.n	800a4f6 <USB_EPSetStall+0xae>
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00f      	beq.n	800a4f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	015a      	lsls	r2, r3, #5
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	0151      	lsls	r1, r2, #5
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	440a      	add	r2, r1
 800a4ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a4f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	0151      	lsls	r1, r2, #5
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	440a      	add	r2, r1
 800a50c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a514:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	785b      	ldrb	r3, [r3, #1]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d128      	bne.n	800a592 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4413      	add	r3, r2
 800a548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	0151      	lsls	r1, r2, #5
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	440a      	add	r2, r1
 800a556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a55a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a55e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	791b      	ldrb	r3, [r3, #4]
 800a564:	2b03      	cmp	r3, #3
 800a566:	d003      	beq.n	800a570 <USB_EPClearStall+0x4c>
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	791b      	ldrb	r3, [r3, #4]
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d138      	bne.n	800a5e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4413      	add	r3, r2
 800a578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68ba      	ldr	r2, [r7, #8]
 800a580:	0151      	lsls	r1, r2, #5
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	440a      	add	r2, r1
 800a586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a58a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a58e:	6013      	str	r3, [r2, #0]
 800a590:	e027      	b.n	800a5e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	015a      	lsls	r2, r3, #5
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	4413      	add	r3, r2
 800a59a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	0151      	lsls	r1, r2, #5
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	440a      	add	r2, r1
 800a5a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	791b      	ldrb	r3, [r3, #4]
 800a5b6:	2b03      	cmp	r3, #3
 800a5b8:	d003      	beq.n	800a5c2 <USB_EPClearStall+0x9e>
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	791b      	ldrb	r3, [r3, #4]
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d10f      	bne.n	800a5e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	0151      	lsls	r1, r2, #5
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	440a      	add	r2, r1
 800a5d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a60e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a612:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	78fb      	ldrb	r3, [r7, #3]
 800a61e:	011b      	lsls	r3, r3, #4
 800a620:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a624:	68f9      	ldr	r1, [r7, #12]
 800a626:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a62a:	4313      	orrs	r3, r2
 800a62c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3714      	adds	r7, #20
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a656:	f023 0303 	bic.w	r3, r3, #3
 800a65a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a66a:	f023 0302 	bic.w	r3, r3, #2
 800a66e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3714      	adds	r7, #20
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a67e:	b480      	push	{r7}
 800a680:	b085      	sub	sp, #20
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a698:	f023 0303 	bic.w	r3, r3, #3
 800a69c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6ac:	f043 0302 	orr.w	r3, r3, #2
 800a6b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3714      	adds	r7, #20
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	695b      	ldr	r3, [r3, #20]
 800a6cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr

0800a6e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b085      	sub	sp, #20
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a702:	69db      	ldr	r3, [r3, #28]
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	4013      	ands	r3, r2
 800a708:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	0c1b      	lsrs	r3, r3, #16
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3714      	adds	r7, #20
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b085      	sub	sp, #20
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a736:	69db      	ldr	r3, [r3, #28]
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	4013      	ands	r3, r2
 800a73c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	b29b      	uxth	r3, r3
}
 800a742:	4618      	mov	r0, r3
 800a744:	3714      	adds	r7, #20
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a74e:	b480      	push	{r7}
 800a750:	b085      	sub	sp, #20
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
 800a756:	460b      	mov	r3, r1
 800a758:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a75e:	78fb      	ldrb	r3, [r7, #3]
 800a760:	015a      	lsls	r2, r3, #5
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	4413      	add	r3, r2
 800a766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a774:	695b      	ldr	r3, [r3, #20]
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	4013      	ands	r3, r2
 800a77a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a77c:	68bb      	ldr	r3, [r7, #8]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3714      	adds	r7, #20
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b087      	sub	sp, #28
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	460b      	mov	r3, r1
 800a794:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a7ae:	78fb      	ldrb	r3, [r7, #3]
 800a7b0:	f003 030f 	and.w	r3, r3, #15
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ba:	01db      	lsls	r3, r3, #7
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	693a      	ldr	r2, [r7, #16]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a7c4:	78fb      	ldrb	r3, [r7, #3]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	693a      	ldr	r2, [r7, #16]
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a7d8:	68bb      	ldr	r3, [r7, #8]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	371c      	adds	r7, #28
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b083      	sub	sp, #12
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	695b      	ldr	r3, [r3, #20]
 800a7f2:	f003 0301 	and.w	r3, r3, #1
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
	...

0800a804 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a81e:	4619      	mov	r1, r3
 800a820:	4b09      	ldr	r3, [pc, #36]	; (800a848 <USB_ActivateSetup+0x44>)
 800a822:	4013      	ands	r3, r2
 800a824:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a838:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	fffff800 	.word	0xfffff800

0800a84c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b087      	sub	sp, #28
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	460b      	mov	r3, r1
 800a856:	607a      	str	r2, [r7, #4]
 800a858:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	333c      	adds	r3, #60	; 0x3c
 800a862:	3304      	adds	r3, #4
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	4a26      	ldr	r2, [pc, #152]	; (800a904 <USB_EP0_OutStart+0xb8>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d90a      	bls.n	800a886 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a87c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a880:	d101      	bne.n	800a886 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	e037      	b.n	800a8f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a88c:	461a      	mov	r2, r3
 800a88e:	2300      	movs	r3, #0
 800a890:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	697a      	ldr	r2, [r7, #20]
 800a8b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8b4:	f043 0318 	orr.w	r3, r3, #24
 800a8b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a8cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a8ce:	7afb      	ldrb	r3, [r7, #11]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d10f      	bne.n	800a8f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8da:	461a      	mov	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	697a      	ldr	r2, [r7, #20]
 800a8ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a8f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	371c      	adds	r7, #28
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	4f54300a 	.word	0x4f54300a

0800a908 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a910:	2300      	movs	r3, #0
 800a912:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	3301      	adds	r3, #1
 800a918:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	4a13      	ldr	r2, [pc, #76]	; (800a96c <USB_CoreReset+0x64>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d901      	bls.n	800a926 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a922:	2303      	movs	r3, #3
 800a924:	e01b      	b.n	800a95e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	daf2      	bge.n	800a914 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a92e:	2300      	movs	r3, #0
 800a930:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	f043 0201 	orr.w	r2, r3, #1
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3301      	adds	r3, #1
 800a942:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	4a09      	ldr	r2, [pc, #36]	; (800a96c <USB_CoreReset+0x64>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d901      	bls.n	800a950 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a94c:	2303      	movs	r3, #3
 800a94e:	e006      	b.n	800a95e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d0f0      	beq.n	800a93e <USB_CoreReset+0x36>

  return HAL_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3714      	adds	r7, #20
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	00030d40 	.word	0x00030d40

0800a970 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

uint8_t MX_FATFS_Init(void)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a974:	4905      	ldr	r1, [pc, #20]	; (800a98c <MX_FATFS_Init+0x1c>)
 800a976:	4806      	ldr	r0, [pc, #24]	; (800a990 <MX_FATFS_Init+0x20>)
 800a978:	f005 f9e4 	bl	800fd44 <FATFS_LinkDriver>
 800a97c:	4603      	mov	r3, r0
 800a97e:	461a      	mov	r2, r3
 800a980:	4b04      	ldr	r3, [pc, #16]	; (800a994 <MX_FATFS_Init+0x24>)
 800a982:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  return retSD;
 800a984:	4b03      	ldr	r3, [pc, #12]	; (800a994 <MX_FATFS_Init+0x24>)
 800a986:	781b      	ldrb	r3, [r3, #0]
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a988:	4618      	mov	r0, r3
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	2004a538 	.word	0x2004a538
 800a990:	08012348 	.word	0x08012348
 800a994:	2004a534 	.word	0x2004a534

0800a998 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a998:	b480      	push	{r7}
 800a99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a99c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a9b2:	f000 f888 	bl	800aac6 <BSP_SD_IsDetected>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d001      	beq.n	800a9c0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a9bc:	2302      	movs	r3, #2
 800a9be:	e005      	b.n	800a9cc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a9c0:	4804      	ldr	r0, [pc, #16]	; (800a9d4 <BSP_SD_Init+0x2c>)
 800a9c2:	f7fc f843 	bl	8006a4c <HAL_SD_Init>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a9ca:	79fb      	ldrb	r3, [r7, #7]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	20000204 	.word	0x20000204

0800a9d8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	68f9      	ldr	r1, [r7, #12]
 800a9ee:	4806      	ldr	r0, [pc, #24]	; (800aa08 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a9f0:	f7fc f8e4 	bl	8006bbc <HAL_SD_ReadBlocks_DMA>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a9fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3718      	adds	r7, #24
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	20000204 	.word	0x20000204

0800aa0c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	68f9      	ldr	r1, [r7, #12]
 800aa22:	4806      	ldr	r0, [pc, #24]	; (800aa3c <BSP_SD_WriteBlocks_DMA+0x30>)
 800aa24:	f7fc f9ac 	bl	8006d80 <HAL_SD_WriteBlocks_DMA>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d001      	beq.n	800aa32 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aa32:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	20000204 	.word	0x20000204

0800aa40 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800aa44:	4805      	ldr	r0, [pc, #20]	; (800aa5c <BSP_SD_GetCardState+0x1c>)
 800aa46:	f7fc fdd1 	bl	80075ec <HAL_SD_GetCardState>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b04      	cmp	r3, #4
 800aa4e:	bf14      	ite	ne
 800aa50:	2301      	movne	r3, #1
 800aa52:	2300      	moveq	r3, #0
 800aa54:	b2db      	uxtb	r3, r3
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20000204 	.word	0x20000204

0800aa60 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800aa68:	6879      	ldr	r1, [r7, #4]
 800aa6a:	4803      	ldr	r0, [pc, #12]	; (800aa78 <BSP_SD_GetCardInfo+0x18>)
 800aa6c:	f7fc fd92 	bl	8007594 <HAL_SD_GetCardInfo>
}
 800aa70:	bf00      	nop
 800aa72:	3708      	adds	r7, #8
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	20000204 	.word	0x20000204

0800aa7c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800aa84:	f000 f818 	bl	800aab8 <BSP_SD_AbortCallback>
}
 800aa88:	bf00      	nop
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800aa98:	f000 f9a8 	bl	800adec <BSP_SD_WriteCpltCallback>
}
 800aa9c:	bf00      	nop
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800aaac:	f000 f9aa 	bl	800ae04 <BSP_SD_ReadCpltCallback>
}
 800aab0:	bf00      	nop
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800aab8:	b480      	push	{r7}
 800aaba:	af00      	add	r7, sp, #0

}
 800aabc:	bf00      	nop
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr

0800aac6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b082      	sub	sp, #8
 800aaca:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800aacc:	2301      	movs	r3, #1
 800aace:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800aad0:	f000 f80c 	bl	800aaec <BSP_PlatformIsDetected>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800aada:	2300      	movs	r3, #0
 800aadc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800aade:	79fb      	ldrb	r3, [r7, #7]
 800aae0:	b2db      	uxtb	r3, r3
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
	...

0800aaec <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800aaf6:	2104      	movs	r1, #4
 800aaf8:	4806      	ldr	r0, [pc, #24]	; (800ab14 <BSP_PlatformIsDetected+0x28>)
 800aafa:	f7f8 fe1f 	bl	800373c <HAL_GPIO_ReadPin>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d001      	beq.n	800ab08 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800ab04:	2300      	movs	r3, #0
 800ab06:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ab08:	79fb      	ldrb	r3, [r7, #7]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	40021800 	.word	0x40021800

0800ab18 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ab20:	f7f7 f94c 	bl	8001dbc <HAL_GetTick>
 800ab24:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ab26:	e006      	b.n	800ab36 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ab28:	f7ff ff8a 	bl	800aa40 <BSP_SD_GetCardState>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	e009      	b.n	800ab4a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ab36:	f7f7 f941 	bl	8001dbc <HAL_GetTick>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d8f0      	bhi.n	800ab28 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ab46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ab5e:	4b0b      	ldr	r3, [pc, #44]	; (800ab8c <SD_CheckStatus+0x38>)
 800ab60:	2201      	movs	r2, #1
 800ab62:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ab64:	f7ff ff6c 	bl	800aa40 <BSP_SD_GetCardState>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d107      	bne.n	800ab7e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ab6e:	4b07      	ldr	r3, [pc, #28]	; (800ab8c <SD_CheckStatus+0x38>)
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	f023 0301 	bic.w	r3, r3, #1
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	4b04      	ldr	r3, [pc, #16]	; (800ab8c <SD_CheckStatus+0x38>)
 800ab7c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ab7e:	4b03      	ldr	r3, [pc, #12]	; (800ab8c <SD_CheckStatus+0x38>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	b2db      	uxtb	r3, r3
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	2000000d 	.word	0x2000000d

0800ab90 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	4603      	mov	r3, r0
 800ab98:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ab9a:	f7ff ff05 	bl	800a9a8 <BSP_SD_Init>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d107      	bne.n	800abb4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800aba4:	79fb      	ldrb	r3, [r7, #7]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7ff ffd4 	bl	800ab54 <SD_CheckStatus>
 800abac:	4603      	mov	r3, r0
 800abae:	461a      	mov	r2, r3
 800abb0:	4b04      	ldr	r3, [pc, #16]	; (800abc4 <SD_initialize+0x34>)
 800abb2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800abb4:	4b03      	ldr	r3, [pc, #12]	; (800abc4 <SD_initialize+0x34>)
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	b2db      	uxtb	r3, r3
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	2000000d 	.word	0x2000000d

0800abc8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	4603      	mov	r3, r0
 800abd0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800abd2:	79fb      	ldrb	r3, [r7, #7]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7ff ffbd 	bl	800ab54 <SD_CheckStatus>
 800abda:	4603      	mov	r3, r0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b086      	sub	sp, #24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60b9      	str	r1, [r7, #8]
 800abec:	607a      	str	r2, [r7, #4]
 800abee:	603b      	str	r3, [r7, #0]
 800abf0:	4603      	mov	r3, r0
 800abf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800abf8:	f247 5030 	movw	r0, #30000	; 0x7530
 800abfc:	f7ff ff8c 	bl	800ab18 <SD_CheckStatusWithTimeout>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	da01      	bge.n	800ac0a <SD_read+0x26>
  {
    return res;
 800ac06:	7dfb      	ldrb	r3, [r7, #23]
 800ac08:	e03b      	b.n	800ac82 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	6879      	ldr	r1, [r7, #4]
 800ac0e:	68b8      	ldr	r0, [r7, #8]
 800ac10:	f7ff fee2 	bl	800a9d8 <BSP_SD_ReadBlocks_DMA>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d132      	bne.n	800ac80 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ac1a:	4b1c      	ldr	r3, [pc, #112]	; (800ac8c <SD_read+0xa8>)
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ac20:	f7f7 f8cc 	bl	8001dbc <HAL_GetTick>
 800ac24:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ac26:	bf00      	nop
 800ac28:	4b18      	ldr	r3, [pc, #96]	; (800ac8c <SD_read+0xa8>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d108      	bne.n	800ac42 <SD_read+0x5e>
 800ac30:	f7f7 f8c4 	bl	8001dbc <HAL_GetTick>
 800ac34:	4602      	mov	r2, r0
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	f247 522f 	movw	r2, #29999	; 0x752f
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d9f2      	bls.n	800ac28 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800ac42:	4b12      	ldr	r3, [pc, #72]	; (800ac8c <SD_read+0xa8>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d102      	bne.n	800ac50 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	75fb      	strb	r3, [r7, #23]
 800ac4e:	e017      	b.n	800ac80 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ac50:	4b0e      	ldr	r3, [pc, #56]	; (800ac8c <SD_read+0xa8>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ac56:	f7f7 f8b1 	bl	8001dbc <HAL_GetTick>
 800ac5a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ac5c:	e007      	b.n	800ac6e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ac5e:	f7ff feef 	bl	800aa40 <BSP_SD_GetCardState>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <SD_read+0x8a>
          {
            res = RES_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ac6c:	e008      	b.n	800ac80 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ac6e:	f7f7 f8a5 	bl	8001dbc <HAL_GetTick>
 800ac72:	4602      	mov	r2, r0
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	f247 522f 	movw	r2, #29999	; 0x752f
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d9ee      	bls.n	800ac5e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ac80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3718      	adds	r7, #24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	2004a9a4 	.word	0x2004a9a4

0800ac90 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b086      	sub	sp, #24
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60b9      	str	r1, [r7, #8]
 800ac98:	607a      	str	r2, [r7, #4]
 800ac9a:	603b      	str	r3, [r7, #0]
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800aca4:	4b24      	ldr	r3, [pc, #144]	; (800ad38 <SD_write+0xa8>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800acaa:	f247 5030 	movw	r0, #30000	; 0x7530
 800acae:	f7ff ff33 	bl	800ab18 <SD_CheckStatusWithTimeout>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	da01      	bge.n	800acbc <SD_write+0x2c>
  {
    return res;
 800acb8:	7dfb      	ldrb	r3, [r7, #23]
 800acba:	e038      	b.n	800ad2e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800acbc:	683a      	ldr	r2, [r7, #0]
 800acbe:	6879      	ldr	r1, [r7, #4]
 800acc0:	68b8      	ldr	r0, [r7, #8]
 800acc2:	f7ff fea3 	bl	800aa0c <BSP_SD_WriteBlocks_DMA>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d12f      	bne.n	800ad2c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800accc:	f7f7 f876 	bl	8001dbc <HAL_GetTick>
 800acd0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800acd2:	bf00      	nop
 800acd4:	4b18      	ldr	r3, [pc, #96]	; (800ad38 <SD_write+0xa8>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d108      	bne.n	800acee <SD_write+0x5e>
 800acdc:	f7f7 f86e 	bl	8001dbc <HAL_GetTick>
 800ace0:	4602      	mov	r2, r0
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	f247 522f 	movw	r2, #29999	; 0x752f
 800acea:	4293      	cmp	r3, r2
 800acec:	d9f2      	bls.n	800acd4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800acee:	4b12      	ldr	r3, [pc, #72]	; (800ad38 <SD_write+0xa8>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d102      	bne.n	800acfc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	75fb      	strb	r3, [r7, #23]
 800acfa:	e017      	b.n	800ad2c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800acfc:	4b0e      	ldr	r3, [pc, #56]	; (800ad38 <SD_write+0xa8>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ad02:	f7f7 f85b 	bl	8001dbc <HAL_GetTick>
 800ad06:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ad08:	e007      	b.n	800ad1a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ad0a:	f7ff fe99 	bl	800aa40 <BSP_SD_GetCardState>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d102      	bne.n	800ad1a <SD_write+0x8a>
          {
            res = RES_OK;
 800ad14:	2300      	movs	r3, #0
 800ad16:	75fb      	strb	r3, [r7, #23]
            break;
 800ad18:	e008      	b.n	800ad2c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ad1a:	f7f7 f84f 	bl	8001dbc <HAL_GetTick>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	f247 522f 	movw	r2, #29999	; 0x752f
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d9ee      	bls.n	800ad0a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ad2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3718      	adds	r7, #24
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	2004a9a0 	.word	0x2004a9a0

0800ad3c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b08c      	sub	sp, #48	; 0x30
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	4603      	mov	r3, r0
 800ad44:	603a      	str	r2, [r7, #0]
 800ad46:	71fb      	strb	r3, [r7, #7]
 800ad48:	460b      	mov	r3, r1
 800ad4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ad52:	4b25      	ldr	r3, [pc, #148]	; (800ade8 <SD_ioctl+0xac>)
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	f003 0301 	and.w	r3, r3, #1
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <SD_ioctl+0x28>
 800ad60:	2303      	movs	r3, #3
 800ad62:	e03c      	b.n	800adde <SD_ioctl+0xa2>

  switch (cmd)
 800ad64:	79bb      	ldrb	r3, [r7, #6]
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d834      	bhi.n	800add4 <SD_ioctl+0x98>
 800ad6a:	a201      	add	r2, pc, #4	; (adr r2, 800ad70 <SD_ioctl+0x34>)
 800ad6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad70:	0800ad81 	.word	0x0800ad81
 800ad74:	0800ad89 	.word	0x0800ad89
 800ad78:	0800ada1 	.word	0x0800ada1
 800ad7c:	0800adbb 	.word	0x0800adbb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ad86:	e028      	b.n	800adda <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ad88:	f107 030c 	add.w	r3, r7, #12
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7ff fe67 	bl	800aa60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ad92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ad9e:	e01c      	b.n	800adda <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ada0:	f107 030c 	add.w	r3, r7, #12
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7ff fe5b 	bl	800aa60 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800adaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adac:	b29a      	uxth	r2, r3
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800adb2:	2300      	movs	r3, #0
 800adb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800adb8:	e00f      	b.n	800adda <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800adba:	f107 030c 	add.w	r3, r7, #12
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7ff fe4e 	bl	800aa60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800adc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc6:	0a5a      	lsrs	r2, r3, #9
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800add2:	e002      	b.n	800adda <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800add4:	2304      	movs	r3, #4
 800add6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800adda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3730      	adds	r7, #48	; 0x30
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	2000000d 	.word	0x2000000d

0800adec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800adec:	b480      	push	{r7}
 800adee:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800adf0:	4b03      	ldr	r3, [pc, #12]	; (800ae00 <BSP_SD_WriteCpltCallback+0x14>)
 800adf2:	2201      	movs	r2, #1
 800adf4:	601a      	str	r2, [r3, #0]
}
 800adf6:	bf00      	nop
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr
 800ae00:	2004a9a0 	.word	0x2004a9a0

0800ae04 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ae04:	b480      	push	{r7}
 800ae06:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ae08:	4b03      	ldr	r3, [pc, #12]	; (800ae18 <BSP_SD_ReadCpltCallback+0x14>)
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	601a      	str	r2, [r3, #0]
}
 800ae0e:	bf00      	nop
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr
 800ae18:	2004a9a4 	.word	0x2004a9a4

0800ae1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ae2c:	f005 fde6 	bl	80109fc <malloc>
 800ae30:	4603      	mov	r3, r0
 800ae32:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d109      	bne.n	800ae4e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	32b0      	adds	r2, #176	; 0xb0
 800ae44:	2100      	movs	r1, #0
 800ae46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	e0d4      	b.n	800aff8 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ae4e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ae52:	2100      	movs	r1, #0
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f006 f800 	bl	8010e5a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	32b0      	adds	r2, #176	; 0xb0
 800ae64:	68f9      	ldr	r1, [r7, #12]
 800ae66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	32b0      	adds	r2, #176	; 0xb0
 800ae74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	7c1b      	ldrb	r3, [r3, #16]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d138      	bne.n	800aef8 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ae86:	4b5e      	ldr	r3, [pc, #376]	; (800b000 <USBD_CDC_Init+0x1e4>)
 800ae88:	7819      	ldrb	r1, [r3, #0]
 800ae8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae8e:	2202      	movs	r2, #2
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f005 fc10 	bl	80106b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ae96:	4b5a      	ldr	r3, [pc, #360]	; (800b000 <USBD_CDC_Init+0x1e4>)
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	f003 020f 	and.w	r2, r3, #15
 800ae9e:	6879      	ldr	r1, [r7, #4]
 800aea0:	4613      	mov	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	440b      	add	r3, r1
 800aeaa:	3324      	adds	r3, #36	; 0x24
 800aeac:	2201      	movs	r2, #1
 800aeae:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aeb0:	4b54      	ldr	r3, [pc, #336]	; (800b004 <USBD_CDC_Init+0x1e8>)
 800aeb2:	7819      	ldrb	r1, [r3, #0]
 800aeb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aeb8:	2202      	movs	r2, #2
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f005 fbfb 	bl	80106b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aec0:	4b50      	ldr	r3, [pc, #320]	; (800b004 <USBD_CDC_Init+0x1e8>)
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	f003 020f 	and.w	r2, r3, #15
 800aec8:	6879      	ldr	r1, [r7, #4]
 800aeca:	4613      	mov	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	440b      	add	r3, r1
 800aed4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aed8:	2201      	movs	r2, #1
 800aeda:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aedc:	4b4a      	ldr	r3, [pc, #296]	; (800b008 <USBD_CDC_Init+0x1ec>)
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	f003 020f 	and.w	r2, r3, #15
 800aee4:	6879      	ldr	r1, [r7, #4]
 800aee6:	4613      	mov	r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4413      	add	r3, r2
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	440b      	add	r3, r1
 800aef0:	3326      	adds	r3, #38	; 0x26
 800aef2:	2210      	movs	r2, #16
 800aef4:	801a      	strh	r2, [r3, #0]
 800aef6:	e035      	b.n	800af64 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aef8:	4b41      	ldr	r3, [pc, #260]	; (800b000 <USBD_CDC_Init+0x1e4>)
 800aefa:	7819      	ldrb	r1, [r3, #0]
 800aefc:	2340      	movs	r3, #64	; 0x40
 800aefe:	2202      	movs	r2, #2
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f005 fbd8 	bl	80106b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800af06:	4b3e      	ldr	r3, [pc, #248]	; (800b000 <USBD_CDC_Init+0x1e4>)
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	f003 020f 	and.w	r2, r3, #15
 800af0e:	6879      	ldr	r1, [r7, #4]
 800af10:	4613      	mov	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	440b      	add	r3, r1
 800af1a:	3324      	adds	r3, #36	; 0x24
 800af1c:	2201      	movs	r2, #1
 800af1e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af20:	4b38      	ldr	r3, [pc, #224]	; (800b004 <USBD_CDC_Init+0x1e8>)
 800af22:	7819      	ldrb	r1, [r3, #0]
 800af24:	2340      	movs	r3, #64	; 0x40
 800af26:	2202      	movs	r2, #2
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f005 fbc4 	bl	80106b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800af2e:	4b35      	ldr	r3, [pc, #212]	; (800b004 <USBD_CDC_Init+0x1e8>)
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	f003 020f 	and.w	r2, r3, #15
 800af36:	6879      	ldr	r1, [r7, #4]
 800af38:	4613      	mov	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	440b      	add	r3, r1
 800af42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af46:	2201      	movs	r2, #1
 800af48:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af4a:	4b2f      	ldr	r3, [pc, #188]	; (800b008 <USBD_CDC_Init+0x1ec>)
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	f003 020f 	and.w	r2, r3, #15
 800af52:	6879      	ldr	r1, [r7, #4]
 800af54:	4613      	mov	r3, r2
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	4413      	add	r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	440b      	add	r3, r1
 800af5e:	3326      	adds	r3, #38	; 0x26
 800af60:	2210      	movs	r2, #16
 800af62:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af64:	4b28      	ldr	r3, [pc, #160]	; (800b008 <USBD_CDC_Init+0x1ec>)
 800af66:	7819      	ldrb	r1, [r3, #0]
 800af68:	2308      	movs	r3, #8
 800af6a:	2203      	movs	r2, #3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f005 fba2 	bl	80106b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800af72:	4b25      	ldr	r3, [pc, #148]	; (800b008 <USBD_CDC_Init+0x1ec>)
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	f003 020f 	and.w	r2, r3, #15
 800af7a:	6879      	ldr	r1, [r7, #4]
 800af7c:	4613      	mov	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	4413      	add	r3, r2
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	440b      	add	r3, r1
 800af86:	3324      	adds	r3, #36	; 0x24
 800af88:	2201      	movs	r2, #1
 800af8a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2200      	movs	r2, #0
 800af90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	33b0      	adds	r3, #176	; 0xb0
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2200      	movs	r2, #0
 800afac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800afc2:	2302      	movs	r3, #2
 800afc4:	e018      	b.n	800aff8 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	7c1b      	ldrb	r3, [r3, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d10a      	bne.n	800afe4 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afce:	4b0d      	ldr	r3, [pc, #52]	; (800b004 <USBD_CDC_Init+0x1e8>)
 800afd0:	7819      	ldrb	r1, [r3, #0]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f005 fc59 	bl	8010894 <USBD_LL_PrepareReceive>
 800afe2:	e008      	b.n	800aff6 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afe4:	4b07      	ldr	r3, [pc, #28]	; (800b004 <USBD_CDC_Init+0x1e8>)
 800afe6:	7819      	ldrb	r1, [r3, #0]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afee:	2340      	movs	r3, #64	; 0x40
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f005 fc4f 	bl	8010894 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	20000097 	.word	0x20000097
 800b004:	20000098 	.word	0x20000098
 800b008:	20000099 	.word	0x20000099

0800b00c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	460b      	mov	r3, r1
 800b016:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b018:	4b3a      	ldr	r3, [pc, #232]	; (800b104 <USBD_CDC_DeInit+0xf8>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	4619      	mov	r1, r3
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f005 fb6f 	bl	8010702 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b024:	4b37      	ldr	r3, [pc, #220]	; (800b104 <USBD_CDC_DeInit+0xf8>)
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	f003 020f 	and.w	r2, r3, #15
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	4613      	mov	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	4413      	add	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	440b      	add	r3, r1
 800b038:	3324      	adds	r3, #36	; 0x24
 800b03a:	2200      	movs	r2, #0
 800b03c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b03e:	4b32      	ldr	r3, [pc, #200]	; (800b108 <USBD_CDC_DeInit+0xfc>)
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f005 fb5c 	bl	8010702 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b04a:	4b2f      	ldr	r3, [pc, #188]	; (800b108 <USBD_CDC_DeInit+0xfc>)
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	f003 020f 	and.w	r2, r3, #15
 800b052:	6879      	ldr	r1, [r7, #4]
 800b054:	4613      	mov	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	440b      	add	r3, r1
 800b05e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b062:	2200      	movs	r2, #0
 800b064:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b066:	4b29      	ldr	r3, [pc, #164]	; (800b10c <USBD_CDC_DeInit+0x100>)
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f005 fb48 	bl	8010702 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b072:	4b26      	ldr	r3, [pc, #152]	; (800b10c <USBD_CDC_DeInit+0x100>)
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	f003 020f 	and.w	r2, r3, #15
 800b07a:	6879      	ldr	r1, [r7, #4]
 800b07c:	4613      	mov	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	4413      	add	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	440b      	add	r3, r1
 800b086:	3324      	adds	r3, #36	; 0x24
 800b088:	2200      	movs	r2, #0
 800b08a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b08c:	4b1f      	ldr	r3, [pc, #124]	; (800b10c <USBD_CDC_DeInit+0x100>)
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	f003 020f 	and.w	r2, r3, #15
 800b094:	6879      	ldr	r1, [r7, #4]
 800b096:	4613      	mov	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	440b      	add	r3, r1
 800b0a0:	3326      	adds	r3, #38	; 0x26
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	32b0      	adds	r2, #176	; 0xb0
 800b0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d01f      	beq.n	800b0f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	33b0      	adds	r3, #176	; 0xb0
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	4413      	add	r3, r2
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	32b0      	adds	r2, #176	; 0xb0
 800b0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f005 fc96 	bl	8010a0c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	32b0      	adds	r2, #176	; 0xb0
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3708      	adds	r7, #8
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	20000097 	.word	0x20000097
 800b108:	20000098 	.word	0x20000098
 800b10c:	20000099 	.word	0x20000099

0800b110 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	32b0      	adds	r2, #176	; 0xb0
 800b124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b128:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b12a:	2300      	movs	r3, #0
 800b12c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b12e:	2300      	movs	r3, #0
 800b130:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d101      	bne.n	800b140 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b13c:	2303      	movs	r3, #3
 800b13e:	e0bf      	b.n	800b2c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d050      	beq.n	800b1ee <USBD_CDC_Setup+0xde>
 800b14c:	2b20      	cmp	r3, #32
 800b14e:	f040 80af 	bne.w	800b2b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	88db      	ldrh	r3, [r3, #6]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d03a      	beq.n	800b1d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	b25b      	sxtb	r3, r3
 800b160:	2b00      	cmp	r3, #0
 800b162:	da1b      	bge.n	800b19c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	33b0      	adds	r3, #176	; 0xb0
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b17a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	88d2      	ldrh	r2, [r2, #6]
 800b180:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	88db      	ldrh	r3, [r3, #6]
 800b186:	2b07      	cmp	r3, #7
 800b188:	bf28      	it	cs
 800b18a:	2307      	movcs	r3, #7
 800b18c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	89fa      	ldrh	r2, [r7, #14]
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f001 fdad 	bl	800ccf4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b19a:	e090      	b.n	800b2be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	785a      	ldrb	r2, [r3, #1]
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	88db      	ldrh	r3, [r3, #6]
 800b1aa:	2b3f      	cmp	r3, #63	; 0x3f
 800b1ac:	d803      	bhi.n	800b1b6 <USBD_CDC_Setup+0xa6>
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	88db      	ldrh	r3, [r3, #6]
 800b1b2:	b2da      	uxtb	r2, r3
 800b1b4:	e000      	b.n	800b1b8 <USBD_CDC_Setup+0xa8>
 800b1b6:	2240      	movs	r2, #64	; 0x40
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b1be:	6939      	ldr	r1, [r7, #16]
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f001 fdbf 	bl	800cd4c <USBD_CtlPrepareRx>
      break;
 800b1ce:	e076      	b.n	800b2be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	33b0      	adds	r3, #176	; 0xb0
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4413      	add	r3, r2
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	683a      	ldr	r2, [r7, #0]
 800b1e4:	7850      	ldrb	r0, [r2, #1]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	4798      	blx	r3
      break;
 800b1ec:	e067      	b.n	800b2be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	785b      	ldrb	r3, [r3, #1]
 800b1f2:	2b0b      	cmp	r3, #11
 800b1f4:	d851      	bhi.n	800b29a <USBD_CDC_Setup+0x18a>
 800b1f6:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <USBD_CDC_Setup+0xec>)
 800b1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fc:	0800b22d 	.word	0x0800b22d
 800b200:	0800b2a9 	.word	0x0800b2a9
 800b204:	0800b29b 	.word	0x0800b29b
 800b208:	0800b29b 	.word	0x0800b29b
 800b20c:	0800b29b 	.word	0x0800b29b
 800b210:	0800b29b 	.word	0x0800b29b
 800b214:	0800b29b 	.word	0x0800b29b
 800b218:	0800b29b 	.word	0x0800b29b
 800b21c:	0800b29b 	.word	0x0800b29b
 800b220:	0800b29b 	.word	0x0800b29b
 800b224:	0800b257 	.word	0x0800b257
 800b228:	0800b281 	.word	0x0800b281
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b232:	b2db      	uxtb	r3, r3
 800b234:	2b03      	cmp	r3, #3
 800b236:	d107      	bne.n	800b248 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b238:	f107 030a 	add.w	r3, r7, #10
 800b23c:	2202      	movs	r2, #2
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f001 fd57 	bl	800ccf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b246:	e032      	b.n	800b2ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b248:	6839      	ldr	r1, [r7, #0]
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f001 fce1 	bl	800cc12 <USBD_CtlError>
            ret = USBD_FAIL;
 800b250:	2303      	movs	r3, #3
 800b252:	75fb      	strb	r3, [r7, #23]
          break;
 800b254:	e02b      	b.n	800b2ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b03      	cmp	r3, #3
 800b260:	d107      	bne.n	800b272 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b262:	f107 030d 	add.w	r3, r7, #13
 800b266:	2201      	movs	r2, #1
 800b268:	4619      	mov	r1, r3
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f001 fd42 	bl	800ccf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b270:	e01d      	b.n	800b2ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f001 fccc 	bl	800cc12 <USBD_CtlError>
            ret = USBD_FAIL;
 800b27a:	2303      	movs	r3, #3
 800b27c:	75fb      	strb	r3, [r7, #23]
          break;
 800b27e:	e016      	b.n	800b2ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b286:	b2db      	uxtb	r3, r3
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d00f      	beq.n	800b2ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f001 fcbf 	bl	800cc12 <USBD_CtlError>
            ret = USBD_FAIL;
 800b294:	2303      	movs	r3, #3
 800b296:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b298:	e008      	b.n	800b2ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b29a:	6839      	ldr	r1, [r7, #0]
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f001 fcb8 	bl	800cc12 <USBD_CtlError>
          ret = USBD_FAIL;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	75fb      	strb	r3, [r7, #23]
          break;
 800b2a6:	e002      	b.n	800b2ae <USBD_CDC_Setup+0x19e>
          break;
 800b2a8:	bf00      	nop
 800b2aa:	e008      	b.n	800b2be <USBD_CDC_Setup+0x1ae>
          break;
 800b2ac:	bf00      	nop
      }
      break;
 800b2ae:	e006      	b.n	800b2be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f001 fcad 	bl	800cc12 <USBD_CtlError>
      ret = USBD_FAIL;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b2bc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b2be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3718      	adds	r7, #24
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	32b0      	adds	r2, #176	; 0xb0
 800b2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e065      	b.n	800b3be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	32b0      	adds	r2, #176	; 0xb0
 800b2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b300:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b302:	78fb      	ldrb	r3, [r7, #3]
 800b304:	f003 020f 	and.w	r2, r3, #15
 800b308:	6879      	ldr	r1, [r7, #4]
 800b30a:	4613      	mov	r3, r2
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	4413      	add	r3, r2
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	440b      	add	r3, r1
 800b314:	3318      	adds	r3, #24
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d02f      	beq.n	800b37c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b31c:	78fb      	ldrb	r3, [r7, #3]
 800b31e:	f003 020f 	and.w	r2, r3, #15
 800b322:	6879      	ldr	r1, [r7, #4]
 800b324:	4613      	mov	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	4413      	add	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	440b      	add	r3, r1
 800b32e:	3318      	adds	r3, #24
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	78fb      	ldrb	r3, [r7, #3]
 800b334:	f003 010f 	and.w	r1, r3, #15
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	460b      	mov	r3, r1
 800b33c:	00db      	lsls	r3, r3, #3
 800b33e:	440b      	add	r3, r1
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4403      	add	r3, r0
 800b344:	3348      	adds	r3, #72	; 0x48
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	fbb2 f1f3 	udiv	r1, r2, r3
 800b34c:	fb01 f303 	mul.w	r3, r1, r3
 800b350:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b352:	2b00      	cmp	r3, #0
 800b354:	d112      	bne.n	800b37c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b356:	78fb      	ldrb	r3, [r7, #3]
 800b358:	f003 020f 	and.w	r2, r3, #15
 800b35c:	6879      	ldr	r1, [r7, #4]
 800b35e:	4613      	mov	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	4413      	add	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	440b      	add	r3, r1
 800b368:	3318      	adds	r3, #24
 800b36a:	2200      	movs	r2, #0
 800b36c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b36e:	78f9      	ldrb	r1, [r7, #3]
 800b370:	2300      	movs	r3, #0
 800b372:	2200      	movs	r2, #0
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f005 fa6c 	bl	8010852 <USBD_LL_Transmit>
 800b37a:	e01f      	b.n	800b3bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	2200      	movs	r2, #0
 800b380:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	33b0      	adds	r3, #176	; 0xb0
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4413      	add	r3, r2
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d010      	beq.n	800b3bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	33b0      	adds	r3, #176	; 0xb0
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b3b2:	68ba      	ldr	r2, [r7, #8]
 800b3b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b3b8:	78fa      	ldrb	r2, [r7, #3]
 800b3ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b084      	sub	sp, #16
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	32b0      	adds	r2, #176	; 0xb0
 800b3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	32b0      	adds	r2, #176	; 0xb0
 800b3ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e01a      	b.n	800b42e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b3f8:	78fb      	ldrb	r3, [r7, #3]
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f005 fa6a 	bl	80108d6 <USBD_LL_GetRxDataSize>
 800b402:	4602      	mov	r2, r0
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	33b0      	adds	r3, #176	; 0xb0
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4413      	add	r3, r2
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b428:	4611      	mov	r1, r2
 800b42a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b084      	sub	sp, #16
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	32b0      	adds	r2, #176	; 0xb0
 800b448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d101      	bne.n	800b458 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b454:	2303      	movs	r3, #3
 800b456:	e025      	b.n	800b4a4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	33b0      	adds	r3, #176	; 0xb0
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4413      	add	r3, r2
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d01a      	beq.n	800b4a2 <USBD_CDC_EP0_RxReady+0x6c>
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b472:	2bff      	cmp	r3, #255	; 0xff
 800b474:	d015      	beq.n	800b4a2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	33b0      	adds	r3, #176	; 0xb0
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4413      	add	r3, r2
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b48e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b496:	b292      	uxth	r2, r2
 800b498:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	22ff      	movs	r2, #255	; 0xff
 800b49e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b4b4:	2182      	movs	r1, #130	; 0x82
 800b4b6:	4818      	ldr	r0, [pc, #96]	; (800b518 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4b8:	f000 fd49 	bl	800bf4e <USBD_GetEpDesc>
 800b4bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b4be:	2101      	movs	r1, #1
 800b4c0:	4815      	ldr	r0, [pc, #84]	; (800b518 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4c2:	f000 fd44 	bl	800bf4e <USBD_GetEpDesc>
 800b4c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b4c8:	2181      	movs	r1, #129	; 0x81
 800b4ca:	4813      	ldr	r0, [pc, #76]	; (800b518 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4cc:	f000 fd3f 	bl	800bf4e <USBD_GetEpDesc>
 800b4d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d002      	beq.n	800b4de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	2210      	movs	r2, #16
 800b4dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d006      	beq.n	800b4f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4ec:	711a      	strb	r2, [r3, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d006      	beq.n	800b506 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b500:	711a      	strb	r2, [r3, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2243      	movs	r2, #67	; 0x43
 800b50a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b50c:	4b02      	ldr	r3, [pc, #8]	; (800b518 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3718      	adds	r7, #24
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	20000054 	.word	0x20000054

0800b51c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b086      	sub	sp, #24
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b524:	2182      	movs	r1, #130	; 0x82
 800b526:	4818      	ldr	r0, [pc, #96]	; (800b588 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b528:	f000 fd11 	bl	800bf4e <USBD_GetEpDesc>
 800b52c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b52e:	2101      	movs	r1, #1
 800b530:	4815      	ldr	r0, [pc, #84]	; (800b588 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b532:	f000 fd0c 	bl	800bf4e <USBD_GetEpDesc>
 800b536:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b538:	2181      	movs	r1, #129	; 0x81
 800b53a:	4813      	ldr	r0, [pc, #76]	; (800b588 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b53c:	f000 fd07 	bl	800bf4e <USBD_GetEpDesc>
 800b540:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	2210      	movs	r2, #16
 800b54c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d006      	beq.n	800b562 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	2200      	movs	r2, #0
 800b558:	711a      	strb	r2, [r3, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f042 0202 	orr.w	r2, r2, #2
 800b560:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d006      	beq.n	800b576 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	711a      	strb	r2, [r3, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	f042 0202 	orr.w	r2, r2, #2
 800b574:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2243      	movs	r2, #67	; 0x43
 800b57a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b57c:	4b02      	ldr	r3, [pc, #8]	; (800b588 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3718      	adds	r7, #24
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	20000054 	.word	0x20000054

0800b58c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b086      	sub	sp, #24
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b594:	2182      	movs	r1, #130	; 0x82
 800b596:	4818      	ldr	r0, [pc, #96]	; (800b5f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b598:	f000 fcd9 	bl	800bf4e <USBD_GetEpDesc>
 800b59c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b59e:	2101      	movs	r1, #1
 800b5a0:	4815      	ldr	r0, [pc, #84]	; (800b5f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5a2:	f000 fcd4 	bl	800bf4e <USBD_GetEpDesc>
 800b5a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b5a8:	2181      	movs	r1, #129	; 0x81
 800b5aa:	4813      	ldr	r0, [pc, #76]	; (800b5f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5ac:	f000 fccf 	bl	800bf4e <USBD_GetEpDesc>
 800b5b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d002      	beq.n	800b5be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	2210      	movs	r2, #16
 800b5bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d006      	beq.n	800b5d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5cc:	711a      	strb	r2, [r3, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d006      	beq.n	800b5e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5e0:	711a      	strb	r2, [r3, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2243      	movs	r2, #67	; 0x43
 800b5ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5ec:	4b02      	ldr	r3, [pc, #8]	; (800b5f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3718      	adds	r7, #24
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20000054 	.word	0x20000054

0800b5fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	220a      	movs	r2, #10
 800b608:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b60a:	4b03      	ldr	r3, [pc, #12]	; (800b618 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	20000010 	.word	0x20000010

0800b61c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d101      	bne.n	800b630 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b62c:	2303      	movs	r3, #3
 800b62e:	e009      	b.n	800b644 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	33b0      	adds	r3, #176	; 0xb0
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	4413      	add	r3, r2
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b650:	b480      	push	{r7}
 800b652:	b087      	sub	sp, #28
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	32b0      	adds	r2, #176	; 0xb0
 800b666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b66a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b672:	2303      	movs	r3, #3
 800b674:	e008      	b.n	800b688 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	371c      	adds	r7, #28
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	32b0      	adds	r2, #176	; 0xb0
 800b6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d101      	bne.n	800b6b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	e004      	b.n	800b6c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3714      	adds	r7, #20
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
	...

0800b6d0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	32b0      	adds	r2, #176	; 0xb0
 800b6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6e6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d101      	bne.n	800b6f6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e025      	b.n	800b742 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d11f      	bne.n	800b740 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	2201      	movs	r2, #1
 800b704:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b708:	4b10      	ldr	r3, [pc, #64]	; (800b74c <USBD_CDC_TransmitPacket+0x7c>)
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	f003 020f 	and.w	r2, r3, #15
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	4613      	mov	r3, r2
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	4413      	add	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4403      	add	r3, r0
 800b722:	3318      	adds	r3, #24
 800b724:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b726:	4b09      	ldr	r3, [pc, #36]	; (800b74c <USBD_CDC_TransmitPacket+0x7c>)
 800b728:	7819      	ldrb	r1, [r3, #0]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f005 f88b 	bl	8010852 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b73c:	2300      	movs	r3, #0
 800b73e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b740:	7bfb      	ldrb	r3, [r7, #15]
}
 800b742:	4618      	mov	r0, r3
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	20000097 	.word	0x20000097

0800b750 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	32b0      	adds	r2, #176	; 0xb0
 800b762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b766:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	32b0      	adds	r2, #176	; 0xb0
 800b772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d101      	bne.n	800b77e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b77a:	2303      	movs	r3, #3
 800b77c:	e018      	b.n	800b7b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	7c1b      	ldrb	r3, [r3, #16]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10a      	bne.n	800b79c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b786:	4b0c      	ldr	r3, [pc, #48]	; (800b7b8 <USBD_CDC_ReceivePacket+0x68>)
 800b788:	7819      	ldrb	r1, [r3, #0]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b790:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f005 f87d 	bl	8010894 <USBD_LL_PrepareReceive>
 800b79a:	e008      	b.n	800b7ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b79c:	4b06      	ldr	r3, [pc, #24]	; (800b7b8 <USBD_CDC_ReceivePacket+0x68>)
 800b79e:	7819      	ldrb	r1, [r3, #0]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7a6:	2340      	movs	r3, #64	; 0x40
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f005 f873 	bl	8010894 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	20000098 	.word	0x20000098

0800b7bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d101      	bne.n	800b7d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	e01f      	b.n	800b814 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d003      	beq.n	800b7fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	79fa      	ldrb	r2, [r7, #7]
 800b806:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f004 feed 	bl	80105e8 <USBD_LL_Init>
 800b80e:	4603      	mov	r3, r0
 800b810:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b812:	7dfb      	ldrb	r3, [r7, #23]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b826:	2300      	movs	r3, #0
 800b828:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d101      	bne.n	800b834 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b830:	2303      	movs	r3, #3
 800b832:	e025      	b.n	800b880 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	32ae      	adds	r2, #174	; 0xae
 800b846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00f      	beq.n	800b870 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	32ae      	adds	r2, #174	; 0xae
 800b85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b860:	f107 020e 	add.w	r2, r7, #14
 800b864:	4610      	mov	r0, r2
 800b866:	4798      	blx	r3
 800b868:	4602      	mov	r2, r0
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b876:	1c5a      	adds	r2, r3, #1
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f004 fef5 	bl	8010680 <USBD_LL_Start>
 800b896:	4603      	mov	r3, r0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3708      	adds	r7, #8
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	370c      	adds	r7, #12
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr

0800b8b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b084      	sub	sp, #16
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	460b      	mov	r3, r1
 800b8c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d009      	beq.n	800b8e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	78fa      	ldrb	r2, [r7, #3]
 800b8da:	4611      	mov	r1, r2
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	4798      	blx	r3
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b084      	sub	sp, #16
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	78fa      	ldrb	r2, [r7, #3]
 800b908:	4611      	mov	r1, r2
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	4798      	blx	r3
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d001      	beq.n	800b918 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b914:	2303      	movs	r3, #3
 800b916:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b918:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b084      	sub	sp, #16
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b932:	6839      	ldr	r1, [r7, #0]
 800b934:	4618      	mov	r0, r3
 800b936:	f001 f932 	bl	800cb9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2201      	movs	r2, #1
 800b93e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b948:	461a      	mov	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b956:	f003 031f 	and.w	r3, r3, #31
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d01a      	beq.n	800b994 <USBD_LL_SetupStage+0x72>
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d822      	bhi.n	800b9a8 <USBD_LL_SetupStage+0x86>
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <USBD_LL_SetupStage+0x4a>
 800b966:	2b01      	cmp	r3, #1
 800b968:	d00a      	beq.n	800b980 <USBD_LL_SetupStage+0x5e>
 800b96a:	e01d      	b.n	800b9a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b972:	4619      	mov	r1, r3
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fb5f 	bl	800c038 <USBD_StdDevReq>
 800b97a:	4603      	mov	r3, r0
 800b97c:	73fb      	strb	r3, [r7, #15]
      break;
 800b97e:	e020      	b.n	800b9c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b986:	4619      	mov	r1, r3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fbc7 	bl	800c11c <USBD_StdItfReq>
 800b98e:	4603      	mov	r3, r0
 800b990:	73fb      	strb	r3, [r7, #15]
      break;
 800b992:	e016      	b.n	800b9c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b99a:	4619      	mov	r1, r3
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 fc29 	bl	800c1f4 <USBD_StdEPReq>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	73fb      	strb	r3, [r7, #15]
      break;
 800b9a6:	e00c      	b.n	800b9c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b9ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f004 fec2 	bl	8010740 <USBD_LL_StallEP>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	73fb      	strb	r3, [r7, #15]
      break;
 800b9c0:	bf00      	nop
  }

  return ret;
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	607a      	str	r2, [r7, #4]
 800b9d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b9de:	7afb      	ldrb	r3, [r7, #11]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d16e      	bne.n	800bac2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b9ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	f040 8098 	bne.w	800bb28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	689a      	ldr	r2, [r3, #8]
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d913      	bls.n	800ba2c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	689a      	ldr	r2, [r3, #8]
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	1ad2      	subs	r2, r2, r3
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	68da      	ldr	r2, [r3, #12]
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	bf28      	it	cs
 800ba1e:	4613      	movcs	r3, r2
 800ba20:	461a      	mov	r2, r3
 800ba22:	6879      	ldr	r1, [r7, #4]
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	f001 f9ae 	bl	800cd86 <USBD_CtlContinueRx>
 800ba2a:	e07d      	b.n	800bb28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ba32:	f003 031f 	and.w	r3, r3, #31
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d014      	beq.n	800ba64 <USBD_LL_DataOutStage+0x98>
 800ba3a:	2b02      	cmp	r3, #2
 800ba3c:	d81d      	bhi.n	800ba7a <USBD_LL_DataOutStage+0xae>
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d002      	beq.n	800ba48 <USBD_LL_DataOutStage+0x7c>
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d003      	beq.n	800ba4e <USBD_LL_DataOutStage+0x82>
 800ba46:	e018      	b.n	800ba7a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	75bb      	strb	r3, [r7, #22]
            break;
 800ba4c:	e018      	b.n	800ba80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	4619      	mov	r1, r3
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f000 fa5e 	bl	800bf1a <USBD_CoreFindIF>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	75bb      	strb	r3, [r7, #22]
            break;
 800ba62:	e00d      	b.n	800ba80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f000 fa60 	bl	800bf34 <USBD_CoreFindEP>
 800ba74:	4603      	mov	r3, r0
 800ba76:	75bb      	strb	r3, [r7, #22]
            break;
 800ba78:	e002      	b.n	800ba80 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	75bb      	strb	r3, [r7, #22]
            break;
 800ba7e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ba80:	7dbb      	ldrb	r3, [r7, #22]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d119      	bne.n	800baba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	2b03      	cmp	r3, #3
 800ba90:	d113      	bne.n	800baba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ba92:	7dba      	ldrb	r2, [r7, #22]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	32ae      	adds	r2, #174	; 0xae
 800ba98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00b      	beq.n	800baba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800baa2:	7dba      	ldrb	r2, [r7, #22]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800baaa:	7dba      	ldrb	r2, [r7, #22]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	32ae      	adds	r2, #174	; 0xae
 800bab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f001 f974 	bl	800cda8 <USBD_CtlSendStatus>
 800bac0:	e032      	b.n	800bb28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bac2:	7afb      	ldrb	r3, [r7, #11]
 800bac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	4619      	mov	r1, r3
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f000 fa31 	bl	800bf34 <USBD_CoreFindEP>
 800bad2:	4603      	mov	r3, r0
 800bad4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bad6:	7dbb      	ldrb	r3, [r7, #22]
 800bad8:	2bff      	cmp	r3, #255	; 0xff
 800bada:	d025      	beq.n	800bb28 <USBD_LL_DataOutStage+0x15c>
 800badc:	7dbb      	ldrb	r3, [r7, #22]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d122      	bne.n	800bb28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	2b03      	cmp	r3, #3
 800baec:	d117      	bne.n	800bb1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800baee:	7dba      	ldrb	r2, [r7, #22]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	32ae      	adds	r2, #174	; 0xae
 800baf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00f      	beq.n	800bb1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bafe:	7dba      	ldrb	r2, [r7, #22]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bb06:	7dba      	ldrb	r2, [r7, #22]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	32ae      	adds	r2, #174	; 0xae
 800bb0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb10:	699b      	ldr	r3, [r3, #24]
 800bb12:	7afa      	ldrb	r2, [r7, #11]
 800bb14:	4611      	mov	r1, r2
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	4798      	blx	r3
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bb1e:	7dfb      	ldrb	r3, [r7, #23]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d001      	beq.n	800bb28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bb24:	7dfb      	ldrb	r3, [r7, #23]
 800bb26:	e000      	b.n	800bb2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3718      	adds	r7, #24
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b086      	sub	sp, #24
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	60f8      	str	r0, [r7, #12]
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	607a      	str	r2, [r7, #4]
 800bb3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bb40:	7afb      	ldrb	r3, [r7, #11]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d16f      	bne.n	800bc26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	3314      	adds	r3, #20
 800bb4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	d15a      	bne.n	800bc0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	689a      	ldr	r2, [r3, #8]
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d914      	bls.n	800bb8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	689a      	ldr	r2, [r3, #8]
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	1ad2      	subs	r2, r2, r3
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	461a      	mov	r2, r3
 800bb76:	6879      	ldr	r1, [r7, #4]
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f001 f8d6 	bl	800cd2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb7e:	2300      	movs	r3, #0
 800bb80:	2200      	movs	r2, #0
 800bb82:	2100      	movs	r1, #0
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	f004 fe85 	bl	8010894 <USBD_LL_PrepareReceive>
 800bb8a:	e03f      	b.n	800bc0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	68da      	ldr	r2, [r3, #12]
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d11c      	bne.n	800bbd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	685a      	ldr	r2, [r3, #4]
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d316      	bcc.n	800bbd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	685a      	ldr	r2, [r3, #4]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d20f      	bcs.n	800bbd2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f001 f8b7 	bl	800cd2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	2100      	movs	r1, #0
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f004 fe62 	bl	8010894 <USBD_LL_PrepareReceive>
 800bbd0:	e01c      	b.n	800bc0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b03      	cmp	r3, #3
 800bbdc:	d10f      	bne.n	800bbfe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d009      	beq.n	800bbfe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2200      	movs	r2, #0
 800bbee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbfe:	2180      	movs	r1, #128	; 0x80
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f004 fd9d 	bl	8010740 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f001 f8e1 	bl	800cdce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d03a      	beq.n	800bc8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f7ff fe42 	bl	800b8a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bc24:	e032      	b.n	800bc8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bc26:	7afb      	ldrb	r3, [r7, #11]
 800bc28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	4619      	mov	r1, r3
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f000 f97f 	bl	800bf34 <USBD_CoreFindEP>
 800bc36:	4603      	mov	r3, r0
 800bc38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc3a:	7dfb      	ldrb	r3, [r7, #23]
 800bc3c:	2bff      	cmp	r3, #255	; 0xff
 800bc3e:	d025      	beq.n	800bc8c <USBD_LL_DataInStage+0x15a>
 800bc40:	7dfb      	ldrb	r3, [r7, #23]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d122      	bne.n	800bc8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	2b03      	cmp	r3, #3
 800bc50:	d11c      	bne.n	800bc8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bc52:	7dfa      	ldrb	r2, [r7, #23]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	32ae      	adds	r2, #174	; 0xae
 800bc58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d014      	beq.n	800bc8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bc62:	7dfa      	ldrb	r2, [r7, #23]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bc6a:	7dfa      	ldrb	r2, [r7, #23]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	32ae      	adds	r2, #174	; 0xae
 800bc70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	7afa      	ldrb	r2, [r7, #11]
 800bc78:	4611      	mov	r1, r2
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	4798      	blx	r3
 800bc7e:	4603      	mov	r3, r0
 800bc80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bc82:	7dbb      	ldrb	r3, [r7, #22]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d001      	beq.n	800bc8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bc88:	7dbb      	ldrb	r3, [r7, #22]
 800bc8a:	e000      	b.n	800bc8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3718      	adds	r7, #24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b084      	sub	sp, #16
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2201      	movs	r2, #1
 800bca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d014      	beq.n	800bcfc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00e      	beq.n	800bcfc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	6852      	ldr	r2, [r2, #4]
 800bcea:	b2d2      	uxtb	r2, r2
 800bcec:	4611      	mov	r1, r2
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	4798      	blx	r3
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d001      	beq.n	800bcfc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bcfc:	2340      	movs	r3, #64	; 0x40
 800bcfe:	2200      	movs	r2, #0
 800bd00:	2100      	movs	r1, #0
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f004 fcd7 	bl	80106b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2240      	movs	r2, #64	; 0x40
 800bd14:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd18:	2340      	movs	r3, #64	; 0x40
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	2180      	movs	r1, #128	; 0x80
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f004 fcc9 	bl	80106b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2240      	movs	r2, #64	; 0x40
 800bd2e:	621a      	str	r2, [r3, #32]

  return ret;
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b083      	sub	sp, #12
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
 800bd42:	460b      	mov	r3, r1
 800bd44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	78fa      	ldrb	r2, [r7, #3]
 800bd4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	b083      	sub	sp, #12
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd68:	b2da      	uxtb	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2204      	movs	r2, #4
 800bd74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bd78:	2300      	movs	r3, #0
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	370c      	adds	r7, #12
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr

0800bd86 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd86:	b480      	push	{r7}
 800bd88:	b083      	sub	sp, #12
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b04      	cmp	r3, #4
 800bd98:	d106      	bne.n	800bda8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	370c      	adds	r7, #12
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr

0800bdb6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b082      	sub	sp, #8
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	2b03      	cmp	r3, #3
 800bdc8:	d110      	bne.n	800bdec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00b      	beq.n	800bdec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdda:	69db      	ldr	r3, [r3, #28]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d005      	beq.n	800bdec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bde6:	69db      	ldr	r3, [r3, #28]
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b082      	sub	sp, #8
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	460b      	mov	r3, r1
 800be00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	32ae      	adds	r2, #174	; 0xae
 800be0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800be14:	2303      	movs	r3, #3
 800be16:	e01c      	b.n	800be52 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	2b03      	cmp	r3, #3
 800be22:	d115      	bne.n	800be50 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	32ae      	adds	r2, #174	; 0xae
 800be2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be32:	6a1b      	ldr	r3, [r3, #32]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00b      	beq.n	800be50 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	32ae      	adds	r2, #174	; 0xae
 800be42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be46:	6a1b      	ldr	r3, [r3, #32]
 800be48:	78fa      	ldrb	r2, [r7, #3]
 800be4a:	4611      	mov	r1, r2
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be50:	2300      	movs	r3, #0
}
 800be52:	4618      	mov	r0, r3
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b082      	sub	sp, #8
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	460b      	mov	r3, r1
 800be64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	32ae      	adds	r2, #174	; 0xae
 800be70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800be78:	2303      	movs	r3, #3
 800be7a:	e01c      	b.n	800beb6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be82:	b2db      	uxtb	r3, r3
 800be84:	2b03      	cmp	r3, #3
 800be86:	d115      	bne.n	800beb4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	32ae      	adds	r2, #174	; 0xae
 800be92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00b      	beq.n	800beb4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	32ae      	adds	r2, #174	; 0xae
 800bea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beac:	78fa      	ldrb	r2, [r7, #3]
 800beae:	4611      	mov	r1, r2
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bebe:	b480      	push	{r7}
 800bec0:	b083      	sub	sp, #12
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00e      	beq.n	800bf10 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	6852      	ldr	r2, [r2, #4]
 800befe:	b2d2      	uxtb	r2, r2
 800bf00:	4611      	mov	r1, r2
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	4798      	blx	r3
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf1a:	b480      	push	{r7}
 800bf1c:	b083      	sub	sp, #12
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	460b      	mov	r3, r1
 800bf24:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf26:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	370c      	adds	r7, #12
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr

0800bf4e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b086      	sub	sp, #24
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	460b      	mov	r3, r1
 800bf58:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bf62:	2300      	movs	r3, #0
 800bf64:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	885b      	ldrh	r3, [r3, #2]
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d920      	bls.n	800bfb8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bf7e:	e013      	b.n	800bfa8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bf80:	f107 030a 	add.w	r3, r7, #10
 800bf84:	4619      	mov	r1, r3
 800bf86:	6978      	ldr	r0, [r7, #20]
 800bf88:	f000 f81b 	bl	800bfc2 <USBD_GetNextDesc>
 800bf8c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	785b      	ldrb	r3, [r3, #1]
 800bf92:	2b05      	cmp	r3, #5
 800bf94:	d108      	bne.n	800bfa8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	789b      	ldrb	r3, [r3, #2]
 800bf9e:	78fa      	ldrb	r2, [r7, #3]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d008      	beq.n	800bfb6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	885b      	ldrh	r3, [r3, #2]
 800bfac:	b29a      	uxth	r2, r3
 800bfae:	897b      	ldrh	r3, [r7, #10]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d8e5      	bhi.n	800bf80 <USBD_GetEpDesc+0x32>
 800bfb4:	e000      	b.n	800bfb8 <USBD_GetEpDesc+0x6a>
          break;
 800bfb6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bfb8:	693b      	ldr	r3, [r7, #16]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3718      	adds	r7, #24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bfc2:	b480      	push	{r7}
 800bfc4:	b085      	sub	sp, #20
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
 800bfca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	881a      	ldrh	r2, [r3, #0]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	4413      	add	r3, r2
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4413      	add	r3, r2
 800bfec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bfee:	68fb      	ldr	r3, [r7, #12]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3714      	adds	r7, #20
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b087      	sub	sp, #28
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	3301      	adds	r3, #1
 800c012:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c01a:	8a3b      	ldrh	r3, [r7, #16]
 800c01c:	021b      	lsls	r3, r3, #8
 800c01e:	b21a      	sxth	r2, r3
 800c020:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c024:	4313      	orrs	r3, r2
 800c026:	b21b      	sxth	r3, r3
 800c028:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c02a:	89fb      	ldrh	r3, [r7, #14]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	371c      	adds	r7, #28
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c04e:	2b40      	cmp	r3, #64	; 0x40
 800c050:	d005      	beq.n	800c05e <USBD_StdDevReq+0x26>
 800c052:	2b40      	cmp	r3, #64	; 0x40
 800c054:	d857      	bhi.n	800c106 <USBD_StdDevReq+0xce>
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00f      	beq.n	800c07a <USBD_StdDevReq+0x42>
 800c05a:	2b20      	cmp	r3, #32
 800c05c:	d153      	bne.n	800c106 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	32ae      	adds	r2, #174	; 0xae
 800c068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	6839      	ldr	r1, [r7, #0]
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	4798      	blx	r3
 800c074:	4603      	mov	r3, r0
 800c076:	73fb      	strb	r3, [r7, #15]
      break;
 800c078:	e04a      	b.n	800c110 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	785b      	ldrb	r3, [r3, #1]
 800c07e:	2b09      	cmp	r3, #9
 800c080:	d83b      	bhi.n	800c0fa <USBD_StdDevReq+0xc2>
 800c082:	a201      	add	r2, pc, #4	; (adr r2, 800c088 <USBD_StdDevReq+0x50>)
 800c084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c088:	0800c0dd 	.word	0x0800c0dd
 800c08c:	0800c0f1 	.word	0x0800c0f1
 800c090:	0800c0fb 	.word	0x0800c0fb
 800c094:	0800c0e7 	.word	0x0800c0e7
 800c098:	0800c0fb 	.word	0x0800c0fb
 800c09c:	0800c0bb 	.word	0x0800c0bb
 800c0a0:	0800c0b1 	.word	0x0800c0b1
 800c0a4:	0800c0fb 	.word	0x0800c0fb
 800c0a8:	0800c0d3 	.word	0x0800c0d3
 800c0ac:	0800c0c5 	.word	0x0800c0c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c0b0:	6839      	ldr	r1, [r7, #0]
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fa3c 	bl	800c530 <USBD_GetDescriptor>
          break;
 800c0b8:	e024      	b.n	800c104 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c0ba:	6839      	ldr	r1, [r7, #0]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fbcb 	bl	800c858 <USBD_SetAddress>
          break;
 800c0c2:	e01f      	b.n	800c104 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fc0a 	bl	800c8e0 <USBD_SetConfig>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	73fb      	strb	r3, [r7, #15]
          break;
 800c0d0:	e018      	b.n	800c104 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 fcad 	bl	800ca34 <USBD_GetConfig>
          break;
 800c0da:	e013      	b.n	800c104 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 fcde 	bl	800caa0 <USBD_GetStatus>
          break;
 800c0e4:	e00e      	b.n	800c104 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c0e6:	6839      	ldr	r1, [r7, #0]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fd0d 	bl	800cb08 <USBD_SetFeature>
          break;
 800c0ee:	e009      	b.n	800c104 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fd31 	bl	800cb5a <USBD_ClrFeature>
          break;
 800c0f8:	e004      	b.n	800c104 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 fd88 	bl	800cc12 <USBD_CtlError>
          break;
 800c102:	bf00      	nop
      }
      break;
 800c104:	e004      	b.n	800c110 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fd82 	bl	800cc12 <USBD_CtlError>
      break;
 800c10e:	bf00      	nop
  }

  return ret;
 800c110:	7bfb      	ldrb	r3, [r7, #15]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop

0800c11c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c126:	2300      	movs	r3, #0
 800c128:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c132:	2b40      	cmp	r3, #64	; 0x40
 800c134:	d005      	beq.n	800c142 <USBD_StdItfReq+0x26>
 800c136:	2b40      	cmp	r3, #64	; 0x40
 800c138:	d852      	bhi.n	800c1e0 <USBD_StdItfReq+0xc4>
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <USBD_StdItfReq+0x26>
 800c13e:	2b20      	cmp	r3, #32
 800c140:	d14e      	bne.n	800c1e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	3b01      	subs	r3, #1
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d840      	bhi.n	800c1d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	889b      	ldrh	r3, [r3, #4]
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b01      	cmp	r3, #1
 800c158:	d836      	bhi.n	800c1c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	889b      	ldrh	r3, [r3, #4]
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	4619      	mov	r1, r3
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f7ff fed9 	bl	800bf1a <USBD_CoreFindIF>
 800c168:	4603      	mov	r3, r0
 800c16a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c16c:	7bbb      	ldrb	r3, [r7, #14]
 800c16e:	2bff      	cmp	r3, #255	; 0xff
 800c170:	d01d      	beq.n	800c1ae <USBD_StdItfReq+0x92>
 800c172:	7bbb      	ldrb	r3, [r7, #14]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d11a      	bne.n	800c1ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c178:	7bba      	ldrb	r2, [r7, #14]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	32ae      	adds	r2, #174	; 0xae
 800c17e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d00f      	beq.n	800c1a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c188:	7bba      	ldrb	r2, [r7, #14]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c190:	7bba      	ldrb	r2, [r7, #14]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	32ae      	adds	r2, #174	; 0xae
 800c196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	6839      	ldr	r1, [r7, #0]
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	4798      	blx	r3
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c1a6:	e004      	b.n	800c1b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c1a8:	2303      	movs	r3, #3
 800c1aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c1ac:	e001      	b.n	800c1b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c1ae:	2303      	movs	r3, #3
 800c1b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	88db      	ldrh	r3, [r3, #6]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d110      	bne.n	800c1dc <USBD_StdItfReq+0xc0>
 800c1ba:	7bfb      	ldrb	r3, [r7, #15]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10d      	bne.n	800c1dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 fdf1 	bl	800cda8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c1c6:	e009      	b.n	800c1dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 fd21 	bl	800cc12 <USBD_CtlError>
          break;
 800c1d0:	e004      	b.n	800c1dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fd1c 	bl	800cc12 <USBD_CtlError>
          break;
 800c1da:	e000      	b.n	800c1de <USBD_StdItfReq+0xc2>
          break;
 800c1dc:	bf00      	nop
      }
      break;
 800c1de:	e004      	b.n	800c1ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c1e0:	6839      	ldr	r1, [r7, #0]
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fd15 	bl	800cc12 <USBD_CtlError>
      break;
 800c1e8:	bf00      	nop
  }

  return ret;
 800c1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3710      	adds	r7, #16
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	889b      	ldrh	r3, [r3, #4]
 800c206:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c210:	2b40      	cmp	r3, #64	; 0x40
 800c212:	d007      	beq.n	800c224 <USBD_StdEPReq+0x30>
 800c214:	2b40      	cmp	r3, #64	; 0x40
 800c216:	f200 817f 	bhi.w	800c518 <USBD_StdEPReq+0x324>
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d02a      	beq.n	800c274 <USBD_StdEPReq+0x80>
 800c21e:	2b20      	cmp	r3, #32
 800c220:	f040 817a 	bne.w	800c518 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c224:	7bbb      	ldrb	r3, [r7, #14]
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7ff fe83 	bl	800bf34 <USBD_CoreFindEP>
 800c22e:	4603      	mov	r3, r0
 800c230:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c232:	7b7b      	ldrb	r3, [r7, #13]
 800c234:	2bff      	cmp	r3, #255	; 0xff
 800c236:	f000 8174 	beq.w	800c522 <USBD_StdEPReq+0x32e>
 800c23a:	7b7b      	ldrb	r3, [r7, #13]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f040 8170 	bne.w	800c522 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c242:	7b7a      	ldrb	r2, [r7, #13]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c24a:	7b7a      	ldrb	r2, [r7, #13]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	32ae      	adds	r2, #174	; 0xae
 800c250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 8163 	beq.w	800c522 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c25c:	7b7a      	ldrb	r2, [r7, #13]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	32ae      	adds	r2, #174	; 0xae
 800c262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	6839      	ldr	r1, [r7, #0]
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	4798      	blx	r3
 800c26e:	4603      	mov	r3, r0
 800c270:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c272:	e156      	b.n	800c522 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	785b      	ldrb	r3, [r3, #1]
 800c278:	2b03      	cmp	r3, #3
 800c27a:	d008      	beq.n	800c28e <USBD_StdEPReq+0x9a>
 800c27c:	2b03      	cmp	r3, #3
 800c27e:	f300 8145 	bgt.w	800c50c <USBD_StdEPReq+0x318>
 800c282:	2b00      	cmp	r3, #0
 800c284:	f000 809b 	beq.w	800c3be <USBD_StdEPReq+0x1ca>
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d03c      	beq.n	800c306 <USBD_StdEPReq+0x112>
 800c28c:	e13e      	b.n	800c50c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c294:	b2db      	uxtb	r3, r3
 800c296:	2b02      	cmp	r3, #2
 800c298:	d002      	beq.n	800c2a0 <USBD_StdEPReq+0xac>
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	d016      	beq.n	800c2cc <USBD_StdEPReq+0xd8>
 800c29e:	e02c      	b.n	800c2fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2a0:	7bbb      	ldrb	r3, [r7, #14]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00d      	beq.n	800c2c2 <USBD_StdEPReq+0xce>
 800c2a6:	7bbb      	ldrb	r3, [r7, #14]
 800c2a8:	2b80      	cmp	r3, #128	; 0x80
 800c2aa:	d00a      	beq.n	800c2c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f004 fa45 	bl	8010740 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2b6:	2180      	movs	r1, #128	; 0x80
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f004 fa41 	bl	8010740 <USBD_LL_StallEP>
 800c2be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c2c0:	e020      	b.n	800c304 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c2c2:	6839      	ldr	r1, [r7, #0]
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fca4 	bl	800cc12 <USBD_CtlError>
              break;
 800c2ca:	e01b      	b.n	800c304 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	885b      	ldrh	r3, [r3, #2]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d10e      	bne.n	800c2f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c2d4:	7bbb      	ldrb	r3, [r7, #14]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00b      	beq.n	800c2f2 <USBD_StdEPReq+0xfe>
 800c2da:	7bbb      	ldrb	r3, [r7, #14]
 800c2dc:	2b80      	cmp	r3, #128	; 0x80
 800c2de:	d008      	beq.n	800c2f2 <USBD_StdEPReq+0xfe>
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	88db      	ldrh	r3, [r3, #6]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d104      	bne.n	800c2f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2e8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f004 fa27 	bl	8010740 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fd58 	bl	800cda8 <USBD_CtlSendStatus>

              break;
 800c2f8:	e004      	b.n	800c304 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 fc88 	bl	800cc12 <USBD_CtlError>
              break;
 800c302:	bf00      	nop
          }
          break;
 800c304:	e107      	b.n	800c516 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	2b02      	cmp	r3, #2
 800c310:	d002      	beq.n	800c318 <USBD_StdEPReq+0x124>
 800c312:	2b03      	cmp	r3, #3
 800c314:	d016      	beq.n	800c344 <USBD_StdEPReq+0x150>
 800c316:	e04b      	b.n	800c3b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c318:	7bbb      	ldrb	r3, [r7, #14]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00d      	beq.n	800c33a <USBD_StdEPReq+0x146>
 800c31e:	7bbb      	ldrb	r3, [r7, #14]
 800c320:	2b80      	cmp	r3, #128	; 0x80
 800c322:	d00a      	beq.n	800c33a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c324:	7bbb      	ldrb	r3, [r7, #14]
 800c326:	4619      	mov	r1, r3
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f004 fa09 	bl	8010740 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c32e:	2180      	movs	r1, #128	; 0x80
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f004 fa05 	bl	8010740 <USBD_LL_StallEP>
 800c336:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c338:	e040      	b.n	800c3bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c33a:	6839      	ldr	r1, [r7, #0]
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 fc68 	bl	800cc12 <USBD_CtlError>
              break;
 800c342:	e03b      	b.n	800c3bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	885b      	ldrh	r3, [r3, #2]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d136      	bne.n	800c3ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
 800c34e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c352:	2b00      	cmp	r3, #0
 800c354:	d004      	beq.n	800c360 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c356:	7bbb      	ldrb	r3, [r7, #14]
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f004 fa0f 	bl	801077e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fd21 	bl	800cda8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c366:	7bbb      	ldrb	r3, [r7, #14]
 800c368:	4619      	mov	r1, r3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7ff fde2 	bl	800bf34 <USBD_CoreFindEP>
 800c370:	4603      	mov	r3, r0
 800c372:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c374:	7b7b      	ldrb	r3, [r7, #13]
 800c376:	2bff      	cmp	r3, #255	; 0xff
 800c378:	d01f      	beq.n	800c3ba <USBD_StdEPReq+0x1c6>
 800c37a:	7b7b      	ldrb	r3, [r7, #13]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d11c      	bne.n	800c3ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c380:	7b7a      	ldrb	r2, [r7, #13]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c388:	7b7a      	ldrb	r2, [r7, #13]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	32ae      	adds	r2, #174	; 0xae
 800c38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d010      	beq.n	800c3ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c398:	7b7a      	ldrb	r2, [r7, #13]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	32ae      	adds	r2, #174	; 0xae
 800c39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	4798      	blx	r3
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c3ae:	e004      	b.n	800c3ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 fc2d 	bl	800cc12 <USBD_CtlError>
              break;
 800c3b8:	e000      	b.n	800c3bc <USBD_StdEPReq+0x1c8>
              break;
 800c3ba:	bf00      	nop
          }
          break;
 800c3bc:	e0ab      	b.n	800c516 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d002      	beq.n	800c3d0 <USBD_StdEPReq+0x1dc>
 800c3ca:	2b03      	cmp	r3, #3
 800c3cc:	d032      	beq.n	800c434 <USBD_StdEPReq+0x240>
 800c3ce:	e097      	b.n	800c500 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3d0:	7bbb      	ldrb	r3, [r7, #14]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d007      	beq.n	800c3e6 <USBD_StdEPReq+0x1f2>
 800c3d6:	7bbb      	ldrb	r3, [r7, #14]
 800c3d8:	2b80      	cmp	r3, #128	; 0x80
 800c3da:	d004      	beq.n	800c3e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fc17 	bl	800cc12 <USBD_CtlError>
                break;
 800c3e4:	e091      	b.n	800c50a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	da0b      	bge.n	800c406 <USBD_StdEPReq+0x212>
 800c3ee:	7bbb      	ldrb	r3, [r7, #14]
 800c3f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	4413      	add	r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	3310      	adds	r3, #16
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	4413      	add	r3, r2
 800c402:	3304      	adds	r3, #4
 800c404:	e00b      	b.n	800c41e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c406:	7bbb      	ldrb	r3, [r7, #14]
 800c408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c40c:	4613      	mov	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	4413      	add	r3, r2
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	4413      	add	r3, r2
 800c41c:	3304      	adds	r3, #4
 800c41e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2200      	movs	r2, #0
 800c424:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	2202      	movs	r2, #2
 800c42a:	4619      	mov	r1, r3
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fc61 	bl	800ccf4 <USBD_CtlSendData>
              break;
 800c432:	e06a      	b.n	800c50a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	da11      	bge.n	800c460 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c43c:	7bbb      	ldrb	r3, [r7, #14]
 800c43e:	f003 020f 	and.w	r2, r3, #15
 800c442:	6879      	ldr	r1, [r7, #4]
 800c444:	4613      	mov	r3, r2
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	4413      	add	r3, r2
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	440b      	add	r3, r1
 800c44e:	3324      	adds	r3, #36	; 0x24
 800c450:	881b      	ldrh	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d117      	bne.n	800c486 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c456:	6839      	ldr	r1, [r7, #0]
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 fbda 	bl	800cc12 <USBD_CtlError>
                  break;
 800c45e:	e054      	b.n	800c50a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c460:	7bbb      	ldrb	r3, [r7, #14]
 800c462:	f003 020f 	and.w	r2, r3, #15
 800c466:	6879      	ldr	r1, [r7, #4]
 800c468:	4613      	mov	r3, r2
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	4413      	add	r3, r2
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	440b      	add	r3, r1
 800c472:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c476:	881b      	ldrh	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d104      	bne.n	800c486 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c47c:	6839      	ldr	r1, [r7, #0]
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 fbc7 	bl	800cc12 <USBD_CtlError>
                  break;
 800c484:	e041      	b.n	800c50a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c486:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	da0b      	bge.n	800c4a6 <USBD_StdEPReq+0x2b2>
 800c48e:	7bbb      	ldrb	r3, [r7, #14]
 800c490:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c494:	4613      	mov	r3, r2
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	4413      	add	r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	3310      	adds	r3, #16
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	e00b      	b.n	800c4be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c4a6:	7bbb      	ldrb	r3, [r7, #14]
 800c4a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4413      	add	r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	3304      	adds	r3, #4
 800c4be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c4c0:	7bbb      	ldrb	r3, [r7, #14]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d002      	beq.n	800c4cc <USBD_StdEPReq+0x2d8>
 800c4c6:	7bbb      	ldrb	r3, [r7, #14]
 800c4c8:	2b80      	cmp	r3, #128	; 0x80
 800c4ca:	d103      	bne.n	800c4d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	601a      	str	r2, [r3, #0]
 800c4d2:	e00e      	b.n	800c4f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c4d4:	7bbb      	ldrb	r3, [r7, #14]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f004 f96f 	bl	80107bc <USBD_LL_IsStallEP>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d003      	beq.n	800c4ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	601a      	str	r2, [r3, #0]
 800c4ea:	e002      	b.n	800c4f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	2202      	movs	r2, #2
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 fbfb 	bl	800ccf4 <USBD_CtlSendData>
              break;
 800c4fe:	e004      	b.n	800c50a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fb85 	bl	800cc12 <USBD_CtlError>
              break;
 800c508:	bf00      	nop
          }
          break;
 800c50a:	e004      	b.n	800c516 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c50c:	6839      	ldr	r1, [r7, #0]
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fb7f 	bl	800cc12 <USBD_CtlError>
          break;
 800c514:	bf00      	nop
      }
      break;
 800c516:	e005      	b.n	800c524 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fb79 	bl	800cc12 <USBD_CtlError>
      break;
 800c520:	e000      	b.n	800c524 <USBD_StdEPReq+0x330>
      break;
 800c522:	bf00      	nop
  }

  return ret;
 800c524:	7bfb      	ldrb	r3, [r7, #15]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
	...

0800c530 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c53a:	2300      	movs	r3, #0
 800c53c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c53e:	2300      	movs	r3, #0
 800c540:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c542:	2300      	movs	r3, #0
 800c544:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	885b      	ldrh	r3, [r3, #2]
 800c54a:	0a1b      	lsrs	r3, r3, #8
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	3b01      	subs	r3, #1
 800c550:	2b0e      	cmp	r3, #14
 800c552:	f200 8152 	bhi.w	800c7fa <USBD_GetDescriptor+0x2ca>
 800c556:	a201      	add	r2, pc, #4	; (adr r2, 800c55c <USBD_GetDescriptor+0x2c>)
 800c558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c55c:	0800c5cd 	.word	0x0800c5cd
 800c560:	0800c5e5 	.word	0x0800c5e5
 800c564:	0800c625 	.word	0x0800c625
 800c568:	0800c7fb 	.word	0x0800c7fb
 800c56c:	0800c7fb 	.word	0x0800c7fb
 800c570:	0800c79b 	.word	0x0800c79b
 800c574:	0800c7c7 	.word	0x0800c7c7
 800c578:	0800c7fb 	.word	0x0800c7fb
 800c57c:	0800c7fb 	.word	0x0800c7fb
 800c580:	0800c7fb 	.word	0x0800c7fb
 800c584:	0800c7fb 	.word	0x0800c7fb
 800c588:	0800c7fb 	.word	0x0800c7fb
 800c58c:	0800c7fb 	.word	0x0800c7fb
 800c590:	0800c7fb 	.word	0x0800c7fb
 800c594:	0800c599 	.word	0x0800c599
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c59e:	69db      	ldr	r3, [r3, #28]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00b      	beq.n	800c5bc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5aa:	69db      	ldr	r3, [r3, #28]
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	7c12      	ldrb	r2, [r2, #16]
 800c5b0:	f107 0108 	add.w	r1, r7, #8
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	4798      	blx	r3
 800c5b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5ba:	e126      	b.n	800c80a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c5bc:	6839      	ldr	r1, [r7, #0]
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fb27 	bl	800cc12 <USBD_CtlError>
        err++;
 800c5c4:	7afb      	ldrb	r3, [r7, #11]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	72fb      	strb	r3, [r7, #11]
      break;
 800c5ca:	e11e      	b.n	800c80a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	7c12      	ldrb	r2, [r2, #16]
 800c5d8:	f107 0108 	add.w	r1, r7, #8
 800c5dc:	4610      	mov	r0, r2
 800c5de:	4798      	blx	r3
 800c5e0:	60f8      	str	r0, [r7, #12]
      break;
 800c5e2:	e112      	b.n	800c80a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	7c1b      	ldrb	r3, [r3, #16]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10d      	bne.n	800c608 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f4:	f107 0208 	add.w	r2, r7, #8
 800c5f8:	4610      	mov	r0, r2
 800c5fa:	4798      	blx	r3
 800c5fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	3301      	adds	r3, #1
 800c602:	2202      	movs	r2, #2
 800c604:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c606:	e100      	b.n	800c80a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c610:	f107 0208 	add.w	r2, r7, #8
 800c614:	4610      	mov	r0, r2
 800c616:	4798      	blx	r3
 800c618:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	3301      	adds	r3, #1
 800c61e:	2202      	movs	r2, #2
 800c620:	701a      	strb	r2, [r3, #0]
      break;
 800c622:	e0f2      	b.n	800c80a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	885b      	ldrh	r3, [r3, #2]
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	2b05      	cmp	r3, #5
 800c62c:	f200 80ac 	bhi.w	800c788 <USBD_GetDescriptor+0x258>
 800c630:	a201      	add	r2, pc, #4	; (adr r2, 800c638 <USBD_GetDescriptor+0x108>)
 800c632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c636:	bf00      	nop
 800c638:	0800c651 	.word	0x0800c651
 800c63c:	0800c685 	.word	0x0800c685
 800c640:	0800c6b9 	.word	0x0800c6b9
 800c644:	0800c6ed 	.word	0x0800c6ed
 800c648:	0800c721 	.word	0x0800c721
 800c64c:	0800c755 	.word	0x0800c755
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00b      	beq.n	800c674 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	7c12      	ldrb	r2, [r2, #16]
 800c668:	f107 0108 	add.w	r1, r7, #8
 800c66c:	4610      	mov	r0, r2
 800c66e:	4798      	blx	r3
 800c670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c672:	e091      	b.n	800c798 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c674:	6839      	ldr	r1, [r7, #0]
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 facb 	bl	800cc12 <USBD_CtlError>
            err++;
 800c67c:	7afb      	ldrb	r3, [r7, #11]
 800c67e:	3301      	adds	r3, #1
 800c680:	72fb      	strb	r3, [r7, #11]
          break;
 800c682:	e089      	b.n	800c798 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c68a:	689b      	ldr	r3, [r3, #8]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00b      	beq.n	800c6a8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	7c12      	ldrb	r2, [r2, #16]
 800c69c:	f107 0108 	add.w	r1, r7, #8
 800c6a0:	4610      	mov	r0, r2
 800c6a2:	4798      	blx	r3
 800c6a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6a6:	e077      	b.n	800c798 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c6a8:	6839      	ldr	r1, [r7, #0]
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 fab1 	bl	800cc12 <USBD_CtlError>
            err++;
 800c6b0:	7afb      	ldrb	r3, [r7, #11]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c6b6:	e06f      	b.n	800c798 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d00b      	beq.n	800c6dc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	7c12      	ldrb	r2, [r2, #16]
 800c6d0:	f107 0108 	add.w	r1, r7, #8
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	4798      	blx	r3
 800c6d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6da:	e05d      	b.n	800c798 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 fa97 	bl	800cc12 <USBD_CtlError>
            err++;
 800c6e4:	7afb      	ldrb	r3, [r7, #11]
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c6ea:	e055      	b.n	800c798 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00b      	beq.n	800c710 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6fe:	691b      	ldr	r3, [r3, #16]
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	7c12      	ldrb	r2, [r2, #16]
 800c704:	f107 0108 	add.w	r1, r7, #8
 800c708:	4610      	mov	r0, r2
 800c70a:	4798      	blx	r3
 800c70c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c70e:	e043      	b.n	800c798 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c710:	6839      	ldr	r1, [r7, #0]
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 fa7d 	bl	800cc12 <USBD_CtlError>
            err++;
 800c718:	7afb      	ldrb	r3, [r7, #11]
 800c71a:	3301      	adds	r3, #1
 800c71c:	72fb      	strb	r3, [r7, #11]
          break;
 800c71e:	e03b      	b.n	800c798 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c726:	695b      	ldr	r3, [r3, #20]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00b      	beq.n	800c744 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c732:	695b      	ldr	r3, [r3, #20]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	7c12      	ldrb	r2, [r2, #16]
 800c738:	f107 0108 	add.w	r1, r7, #8
 800c73c:	4610      	mov	r0, r2
 800c73e:	4798      	blx	r3
 800c740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c742:	e029      	b.n	800c798 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fa63 	bl	800cc12 <USBD_CtlError>
            err++;
 800c74c:	7afb      	ldrb	r3, [r7, #11]
 800c74e:	3301      	adds	r3, #1
 800c750:	72fb      	strb	r3, [r7, #11]
          break;
 800c752:	e021      	b.n	800c798 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c75a:	699b      	ldr	r3, [r3, #24]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00b      	beq.n	800c778 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c766:	699b      	ldr	r3, [r3, #24]
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	7c12      	ldrb	r2, [r2, #16]
 800c76c:	f107 0108 	add.w	r1, r7, #8
 800c770:	4610      	mov	r0, r2
 800c772:	4798      	blx	r3
 800c774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c776:	e00f      	b.n	800c798 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c778:	6839      	ldr	r1, [r7, #0]
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fa49 	bl	800cc12 <USBD_CtlError>
            err++;
 800c780:	7afb      	ldrb	r3, [r7, #11]
 800c782:	3301      	adds	r3, #1
 800c784:	72fb      	strb	r3, [r7, #11]
          break;
 800c786:	e007      	b.n	800c798 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c788:	6839      	ldr	r1, [r7, #0]
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 fa41 	bl	800cc12 <USBD_CtlError>
          err++;
 800c790:	7afb      	ldrb	r3, [r7, #11]
 800c792:	3301      	adds	r3, #1
 800c794:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c796:	bf00      	nop
      }
      break;
 800c798:	e037      	b.n	800c80a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	7c1b      	ldrb	r3, [r3, #16]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d109      	bne.n	800c7b6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7aa:	f107 0208 	add.w	r2, r7, #8
 800c7ae:	4610      	mov	r0, r2
 800c7b0:	4798      	blx	r3
 800c7b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7b4:	e029      	b.n	800c80a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c7b6:	6839      	ldr	r1, [r7, #0]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 fa2a 	bl	800cc12 <USBD_CtlError>
        err++;
 800c7be:	7afb      	ldrb	r3, [r7, #11]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	72fb      	strb	r3, [r7, #11]
      break;
 800c7c4:	e021      	b.n	800c80a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	7c1b      	ldrb	r3, [r3, #16]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d10d      	bne.n	800c7ea <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d6:	f107 0208 	add.w	r2, r7, #8
 800c7da:	4610      	mov	r0, r2
 800c7dc:	4798      	blx	r3
 800c7de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	2207      	movs	r2, #7
 800c7e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7e8:	e00f      	b.n	800c80a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c7ea:	6839      	ldr	r1, [r7, #0]
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 fa10 	bl	800cc12 <USBD_CtlError>
        err++;
 800c7f2:	7afb      	ldrb	r3, [r7, #11]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	72fb      	strb	r3, [r7, #11]
      break;
 800c7f8:	e007      	b.n	800c80a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fa08 	bl	800cc12 <USBD_CtlError>
      err++;
 800c802:	7afb      	ldrb	r3, [r7, #11]
 800c804:	3301      	adds	r3, #1
 800c806:	72fb      	strb	r3, [r7, #11]
      break;
 800c808:	bf00      	nop
  }

  if (err != 0U)
 800c80a:	7afb      	ldrb	r3, [r7, #11]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d11e      	bne.n	800c84e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	88db      	ldrh	r3, [r3, #6]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d016      	beq.n	800c846 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c818:	893b      	ldrh	r3, [r7, #8]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00e      	beq.n	800c83c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	88da      	ldrh	r2, [r3, #6]
 800c822:	893b      	ldrh	r3, [r7, #8]
 800c824:	4293      	cmp	r3, r2
 800c826:	bf28      	it	cs
 800c828:	4613      	movcs	r3, r2
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c82e:	893b      	ldrh	r3, [r7, #8]
 800c830:	461a      	mov	r2, r3
 800c832:	68f9      	ldr	r1, [r7, #12]
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fa5d 	bl	800ccf4 <USBD_CtlSendData>
 800c83a:	e009      	b.n	800c850 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c83c:	6839      	ldr	r1, [r7, #0]
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 f9e7 	bl	800cc12 <USBD_CtlError>
 800c844:	e004      	b.n	800c850 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 faae 	bl	800cda8 <USBD_CtlSendStatus>
 800c84c:	e000      	b.n	800c850 <USBD_GetDescriptor+0x320>
    return;
 800c84e:	bf00      	nop
  }
}
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop

0800c858 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	889b      	ldrh	r3, [r3, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d131      	bne.n	800c8ce <USBD_SetAddress+0x76>
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	88db      	ldrh	r3, [r3, #6]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d12d      	bne.n	800c8ce <USBD_SetAddress+0x76>
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	885b      	ldrh	r3, [r3, #2]
 800c876:	2b7f      	cmp	r3, #127	; 0x7f
 800c878:	d829      	bhi.n	800c8ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	885b      	ldrh	r3, [r3, #2]
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c884:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	2b03      	cmp	r3, #3
 800c890:	d104      	bne.n	800c89c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c892:	6839      	ldr	r1, [r7, #0]
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 f9bc 	bl	800cc12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c89a:	e01d      	b.n	800c8d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	7bfa      	ldrb	r2, [r7, #15]
 800c8a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c8a4:	7bfb      	ldrb	r3, [r7, #15]
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f003 ffb3 	bl	8010814 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fa7a 	bl	800cda8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c8b4:	7bfb      	ldrb	r3, [r7, #15]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d004      	beq.n	800c8c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2202      	movs	r2, #2
 800c8be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8c2:	e009      	b.n	800c8d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8cc:	e004      	b.n	800c8d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 f99e 	bl	800cc12 <USBD_CtlError>
  }
}
 800c8d6:	bf00      	nop
 800c8d8:	bf00      	nop
 800c8da:	3710      	adds	r7, #16
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	885b      	ldrh	r3, [r3, #2]
 800c8f2:	b2da      	uxtb	r2, r3
 800c8f4:	4b4e      	ldr	r3, [pc, #312]	; (800ca30 <USBD_SetConfig+0x150>)
 800c8f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c8f8:	4b4d      	ldr	r3, [pc, #308]	; (800ca30 <USBD_SetConfig+0x150>)
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d905      	bls.n	800c90c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c900:	6839      	ldr	r1, [r7, #0]
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f985 	bl	800cc12 <USBD_CtlError>
    return USBD_FAIL;
 800c908:	2303      	movs	r3, #3
 800c90a:	e08c      	b.n	800ca26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c912:	b2db      	uxtb	r3, r3
 800c914:	2b02      	cmp	r3, #2
 800c916:	d002      	beq.n	800c91e <USBD_SetConfig+0x3e>
 800c918:	2b03      	cmp	r3, #3
 800c91a:	d029      	beq.n	800c970 <USBD_SetConfig+0x90>
 800c91c:	e075      	b.n	800ca0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c91e:	4b44      	ldr	r3, [pc, #272]	; (800ca30 <USBD_SetConfig+0x150>)
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d020      	beq.n	800c968 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c926:	4b42      	ldr	r3, [pc, #264]	; (800ca30 <USBD_SetConfig+0x150>)
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	461a      	mov	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c930:	4b3f      	ldr	r3, [pc, #252]	; (800ca30 <USBD_SetConfig+0x150>)
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	4619      	mov	r1, r3
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f7fe ffbd 	bl	800b8b6 <USBD_SetClassConfig>
 800c93c:	4603      	mov	r3, r0
 800c93e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c940:	7bfb      	ldrb	r3, [r7, #15]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d008      	beq.n	800c958 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c946:	6839      	ldr	r1, [r7, #0]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f962 	bl	800cc12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2202      	movs	r2, #2
 800c952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c956:	e065      	b.n	800ca24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fa25 	bl	800cda8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2203      	movs	r2, #3
 800c962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c966:	e05d      	b.n	800ca24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fa1d 	bl	800cda8 <USBD_CtlSendStatus>
      break;
 800c96e:	e059      	b.n	800ca24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c970:	4b2f      	ldr	r3, [pc, #188]	; (800ca30 <USBD_SetConfig+0x150>)
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d112      	bne.n	800c99e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2202      	movs	r2, #2
 800c97c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c980:	4b2b      	ldr	r3, [pc, #172]	; (800ca30 <USBD_SetConfig+0x150>)
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	461a      	mov	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c98a:	4b29      	ldr	r3, [pc, #164]	; (800ca30 <USBD_SetConfig+0x150>)
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	4619      	mov	r1, r3
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7fe ffac 	bl	800b8ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 fa06 	bl	800cda8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c99c:	e042      	b.n	800ca24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c99e:	4b24      	ldr	r3, [pc, #144]	; (800ca30 <USBD_SetConfig+0x150>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d02a      	beq.n	800ca02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f7fe ff9a 	bl	800b8ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c9ba:	4b1d      	ldr	r3, [pc, #116]	; (800ca30 <USBD_SetConfig+0x150>)
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	461a      	mov	r2, r3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c9c4:	4b1a      	ldr	r3, [pc, #104]	; (800ca30 <USBD_SetConfig+0x150>)
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7fe ff73 	bl	800b8b6 <USBD_SetClassConfig>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c9d4:	7bfb      	ldrb	r3, [r7, #15]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00f      	beq.n	800c9fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c9da:	6839      	ldr	r1, [r7, #0]
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 f918 	bl	800cc12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f7fe ff7f 	bl	800b8ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2202      	movs	r2, #2
 800c9f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c9f8:	e014      	b.n	800ca24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 f9d4 	bl	800cda8 <USBD_CtlSendStatus>
      break;
 800ca00:	e010      	b.n	800ca24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f000 f9d0 	bl	800cda8 <USBD_CtlSendStatus>
      break;
 800ca08:	e00c      	b.n	800ca24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ca0a:	6839      	ldr	r1, [r7, #0]
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 f900 	bl	800cc12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca12:	4b07      	ldr	r3, [pc, #28]	; (800ca30 <USBD_SetConfig+0x150>)
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	4619      	mov	r1, r3
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f7fe ff68 	bl	800b8ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	73fb      	strb	r3, [r7, #15]
      break;
 800ca22:	bf00      	nop
  }

  return ret;
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	2004a9a8 	.word	0x2004a9a8

0800ca34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	88db      	ldrh	r3, [r3, #6]
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d004      	beq.n	800ca50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 f8e2 	bl	800cc12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ca4e:	e023      	b.n	800ca98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	dc02      	bgt.n	800ca62 <USBD_GetConfig+0x2e>
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	dc03      	bgt.n	800ca68 <USBD_GetConfig+0x34>
 800ca60:	e015      	b.n	800ca8e <USBD_GetConfig+0x5a>
 800ca62:	2b03      	cmp	r3, #3
 800ca64:	d00b      	beq.n	800ca7e <USBD_GetConfig+0x4a>
 800ca66:	e012      	b.n	800ca8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	3308      	adds	r3, #8
 800ca72:	2201      	movs	r2, #1
 800ca74:	4619      	mov	r1, r3
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 f93c 	bl	800ccf4 <USBD_CtlSendData>
        break;
 800ca7c:	e00c      	b.n	800ca98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	3304      	adds	r3, #4
 800ca82:	2201      	movs	r2, #1
 800ca84:	4619      	mov	r1, r3
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 f934 	bl	800ccf4 <USBD_CtlSendData>
        break;
 800ca8c:	e004      	b.n	800ca98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 f8be 	bl	800cc12 <USBD_CtlError>
        break;
 800ca96:	bf00      	nop
}
 800ca98:	bf00      	nop
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	3b01      	subs	r3, #1
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	d81e      	bhi.n	800caf6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	88db      	ldrh	r3, [r3, #6]
 800cabc:	2b02      	cmp	r3, #2
 800cabe:	d004      	beq.n	800caca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cac0:	6839      	ldr	r1, [r7, #0]
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 f8a5 	bl	800cc12 <USBD_CtlError>
        break;
 800cac8:	e01a      	b.n	800cb00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2201      	movs	r2, #1
 800cace:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d005      	beq.n	800cae6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	f043 0202 	orr.w	r2, r3, #2
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	330c      	adds	r3, #12
 800caea:	2202      	movs	r2, #2
 800caec:	4619      	mov	r1, r3
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 f900 	bl	800ccf4 <USBD_CtlSendData>
      break;
 800caf4:	e004      	b.n	800cb00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800caf6:	6839      	ldr	r1, [r7, #0]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 f88a 	bl	800cc12 <USBD_CtlError>
      break;
 800cafe:	bf00      	nop
  }
}
 800cb00:	bf00      	nop
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	885b      	ldrh	r3, [r3, #2]
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d107      	bne.n	800cb2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 f940 	bl	800cda8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cb28:	e013      	b.n	800cb52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	885b      	ldrh	r3, [r3, #2]
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	d10b      	bne.n	800cb4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	889b      	ldrh	r3, [r3, #4]
 800cb36:	0a1b      	lsrs	r3, r3, #8
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	b2da      	uxtb	r2, r3
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 f930 	bl	800cda8 <USBD_CtlSendStatus>
}
 800cb48:	e003      	b.n	800cb52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cb4a:	6839      	ldr	r1, [r7, #0]
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 f860 	bl	800cc12 <USBD_CtlError>
}
 800cb52:	bf00      	nop
 800cb54:	3708      	adds	r7, #8
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b082      	sub	sp, #8
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
 800cb62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	2b02      	cmp	r3, #2
 800cb70:	d80b      	bhi.n	800cb8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	885b      	ldrh	r3, [r3, #2]
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d10c      	bne.n	800cb94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f910 	bl	800cda8 <USBD_CtlSendStatus>
      }
      break;
 800cb88:	e004      	b.n	800cb94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 f840 	bl	800cc12 <USBD_CtlError>
      break;
 800cb92:	e000      	b.n	800cb96 <USBD_ClrFeature+0x3c>
      break;
 800cb94:	bf00      	nop
  }
}
 800cb96:	bf00      	nop
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}

0800cb9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b084      	sub	sp, #16
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
 800cba6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	781a      	ldrb	r2, [r3, #0]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	781a      	ldrb	r2, [r3, #0]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f7ff fa17 	bl	800bffc <SWAPBYTE>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f7ff fa0a 	bl	800bffc <SWAPBYTE>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	461a      	mov	r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f7ff f9fd 	bl	800bffc <SWAPBYTE>
 800cc02:	4603      	mov	r3, r0
 800cc04:	461a      	mov	r2, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	80da      	strh	r2, [r3, #6]
}
 800cc0a:	bf00      	nop
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}

0800cc12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc12:	b580      	push	{r7, lr}
 800cc14:	b082      	sub	sp, #8
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
 800cc1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc1c:	2180      	movs	r1, #128	; 0x80
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f003 fd8e 	bl	8010740 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc24:	2100      	movs	r1, #0
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f003 fd8a 	bl	8010740 <USBD_LL_StallEP>
}
 800cc2c:	bf00      	nop
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b086      	sub	sp, #24
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cc40:	2300      	movs	r3, #0
 800cc42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d036      	beq.n	800ccb8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cc4e:	6938      	ldr	r0, [r7, #16]
 800cc50:	f000 f836 	bl	800ccc0 <USBD_GetLen>
 800cc54:	4603      	mov	r3, r0
 800cc56:	3301      	adds	r3, #1
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	005b      	lsls	r3, r3, #1
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cc62:	7dfb      	ldrb	r3, [r7, #23]
 800cc64:	68ba      	ldr	r2, [r7, #8]
 800cc66:	4413      	add	r3, r2
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	7812      	ldrb	r2, [r2, #0]
 800cc6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc6e:	7dfb      	ldrb	r3, [r7, #23]
 800cc70:	3301      	adds	r3, #1
 800cc72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cc74:	7dfb      	ldrb	r3, [r7, #23]
 800cc76:	68ba      	ldr	r2, [r7, #8]
 800cc78:	4413      	add	r3, r2
 800cc7a:	2203      	movs	r2, #3
 800cc7c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc7e:	7dfb      	ldrb	r3, [r7, #23]
 800cc80:	3301      	adds	r3, #1
 800cc82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cc84:	e013      	b.n	800ccae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cc86:	7dfb      	ldrb	r3, [r7, #23]
 800cc88:	68ba      	ldr	r2, [r7, #8]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	693a      	ldr	r2, [r7, #16]
 800cc8e:	7812      	ldrb	r2, [r2, #0]
 800cc90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	3301      	adds	r3, #1
 800cc96:	613b      	str	r3, [r7, #16]
    idx++;
 800cc98:	7dfb      	ldrb	r3, [r7, #23]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cc9e:	7dfb      	ldrb	r3, [r7, #23]
 800cca0:	68ba      	ldr	r2, [r7, #8]
 800cca2:	4413      	add	r3, r2
 800cca4:	2200      	movs	r2, #0
 800cca6:	701a      	strb	r2, [r3, #0]
    idx++;
 800cca8:	7dfb      	ldrb	r3, [r7, #23]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d1e7      	bne.n	800cc86 <USBD_GetString+0x52>
 800ccb6:	e000      	b.n	800ccba <USBD_GetString+0x86>
    return;
 800ccb8:	bf00      	nop
  }
}
 800ccba:	3718      	adds	r7, #24
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ccd0:	e005      	b.n	800ccde <USBD_GetLen+0x1e>
  {
    len++;
 800ccd2:	7bfb      	ldrb	r3, [r7, #15]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d1f5      	bne.n	800ccd2 <USBD_GetLen+0x12>
  }

  return len;
 800cce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2202      	movs	r2, #2
 800cd04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	68ba      	ldr	r2, [r7, #8]
 800cd18:	2100      	movs	r1, #0
 800cd1a:	68f8      	ldr	r0, [r7, #12]
 800cd1c:	f003 fd99 	bl	8010852 <USBD_LL_Transmit>

  return USBD_OK;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b084      	sub	sp, #16
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	60f8      	str	r0, [r7, #12]
 800cd32:	60b9      	str	r1, [r7, #8]
 800cd34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	68ba      	ldr	r2, [r7, #8]
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f003 fd88 	bl	8010852 <USBD_LL_Transmit>

  return USBD_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3710      	adds	r7, #16
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2203      	movs	r2, #3
 800cd5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	2100      	movs	r1, #0
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	f003 fd8c 	bl	8010894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3710      	adds	r7, #16
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b084      	sub	sp, #16
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	60f8      	str	r0, [r7, #12]
 800cd8e:	60b9      	str	r1, [r7, #8]
 800cd90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	68ba      	ldr	r2, [r7, #8]
 800cd96:	2100      	movs	r1, #0
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f003 fd7b 	bl	8010894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd9e:	2300      	movs	r3, #0
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3710      	adds	r7, #16
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2204      	movs	r2, #4
 800cdb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cdb8:	2300      	movs	r3, #0
 800cdba:	2200      	movs	r2, #0
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f003 fd47 	bl	8010852 <USBD_LL_Transmit>

  return USBD_OK;
 800cdc4:	2300      	movs	r3, #0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b082      	sub	sp, #8
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2205      	movs	r2, #5
 800cdda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cdde:	2300      	movs	r3, #0
 800cde0:	2200      	movs	r2, #0
 800cde2:	2100      	movs	r1, #0
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f003 fd55 	bl	8010894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdea:	2300      	movs	r3, #0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cdfe:	79fb      	ldrb	r3, [r7, #7]
 800ce00:	4a08      	ldr	r2, [pc, #32]	; (800ce24 <disk_status+0x30>)
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	4413      	add	r3, r2
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	79fa      	ldrb	r2, [r7, #7]
 800ce0c:	4905      	ldr	r1, [pc, #20]	; (800ce24 <disk_status+0x30>)
 800ce0e:	440a      	add	r2, r1
 800ce10:	7a12      	ldrb	r2, [r2, #8]
 800ce12:	4610      	mov	r0, r2
 800ce14:	4798      	blx	r3
 800ce16:	4603      	mov	r3, r0
 800ce18:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ce1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3710      	adds	r7, #16
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	2004abd4 	.word	0x2004abd4

0800ce28 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	4603      	mov	r3, r0
 800ce30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ce32:	2300      	movs	r3, #0
 800ce34:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ce36:	79fb      	ldrb	r3, [r7, #7]
 800ce38:	4a0d      	ldr	r2, [pc, #52]	; (800ce70 <disk_initialize+0x48>)
 800ce3a:	5cd3      	ldrb	r3, [r2, r3]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d111      	bne.n	800ce64 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ce40:	79fb      	ldrb	r3, [r7, #7]
 800ce42:	4a0b      	ldr	r2, [pc, #44]	; (800ce70 <disk_initialize+0x48>)
 800ce44:	2101      	movs	r1, #1
 800ce46:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ce48:	79fb      	ldrb	r3, [r7, #7]
 800ce4a:	4a09      	ldr	r2, [pc, #36]	; (800ce70 <disk_initialize+0x48>)
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	4413      	add	r3, r2
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	79fa      	ldrb	r2, [r7, #7]
 800ce56:	4906      	ldr	r1, [pc, #24]	; (800ce70 <disk_initialize+0x48>)
 800ce58:	440a      	add	r2, r1
 800ce5a:	7a12      	ldrb	r2, [r2, #8]
 800ce5c:	4610      	mov	r0, r2
 800ce5e:	4798      	blx	r3
 800ce60:	4603      	mov	r3, r0
 800ce62:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ce64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	2004abd4 	.word	0x2004abd4

0800ce74 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ce74:	b590      	push	{r4, r7, lr}
 800ce76:	b087      	sub	sp, #28
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60b9      	str	r1, [r7, #8]
 800ce7c:	607a      	str	r2, [r7, #4]
 800ce7e:	603b      	str	r3, [r7, #0]
 800ce80:	4603      	mov	r3, r0
 800ce82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ce84:	7bfb      	ldrb	r3, [r7, #15]
 800ce86:	4a0a      	ldr	r2, [pc, #40]	; (800ceb0 <disk_read+0x3c>)
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	4413      	add	r3, r2
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	689c      	ldr	r4, [r3, #8]
 800ce90:	7bfb      	ldrb	r3, [r7, #15]
 800ce92:	4a07      	ldr	r2, [pc, #28]	; (800ceb0 <disk_read+0x3c>)
 800ce94:	4413      	add	r3, r2
 800ce96:	7a18      	ldrb	r0, [r3, #8]
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	68b9      	ldr	r1, [r7, #8]
 800ce9e:	47a0      	blx	r4
 800cea0:	4603      	mov	r3, r0
 800cea2:	75fb      	strb	r3, [r7, #23]
  return res;
 800cea4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	371c      	adds	r7, #28
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd90      	pop	{r4, r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	2004abd4 	.word	0x2004abd4

0800ceb4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ceb4:	b590      	push	{r4, r7, lr}
 800ceb6:	b087      	sub	sp, #28
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60b9      	str	r1, [r7, #8]
 800cebc:	607a      	str	r2, [r7, #4]
 800cebe:	603b      	str	r3, [r7, #0]
 800cec0:	4603      	mov	r3, r0
 800cec2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cec4:	7bfb      	ldrb	r3, [r7, #15]
 800cec6:	4a0a      	ldr	r2, [pc, #40]	; (800cef0 <disk_write+0x3c>)
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	4413      	add	r3, r2
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	68dc      	ldr	r4, [r3, #12]
 800ced0:	7bfb      	ldrb	r3, [r7, #15]
 800ced2:	4a07      	ldr	r2, [pc, #28]	; (800cef0 <disk_write+0x3c>)
 800ced4:	4413      	add	r3, r2
 800ced6:	7a18      	ldrb	r0, [r3, #8]
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	68b9      	ldr	r1, [r7, #8]
 800cede:	47a0      	blx	r4
 800cee0:	4603      	mov	r3, r0
 800cee2:	75fb      	strb	r3, [r7, #23]
  return res;
 800cee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	371c      	adds	r7, #28
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd90      	pop	{r4, r7, pc}
 800ceee:	bf00      	nop
 800cef0:	2004abd4 	.word	0x2004abd4

0800cef4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	4603      	mov	r3, r0
 800cefc:	603a      	str	r2, [r7, #0]
 800cefe:	71fb      	strb	r3, [r7, #7]
 800cf00:	460b      	mov	r3, r1
 800cf02:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cf04:	79fb      	ldrb	r3, [r7, #7]
 800cf06:	4a09      	ldr	r2, [pc, #36]	; (800cf2c <disk_ioctl+0x38>)
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	4413      	add	r3, r2
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	691b      	ldr	r3, [r3, #16]
 800cf10:	79fa      	ldrb	r2, [r7, #7]
 800cf12:	4906      	ldr	r1, [pc, #24]	; (800cf2c <disk_ioctl+0x38>)
 800cf14:	440a      	add	r2, r1
 800cf16:	7a10      	ldrb	r0, [r2, #8]
 800cf18:	79b9      	ldrb	r1, [r7, #6]
 800cf1a:	683a      	ldr	r2, [r7, #0]
 800cf1c:	4798      	blx	r3
 800cf1e:	4603      	mov	r3, r0
 800cf20:	73fb      	strb	r3, [r7, #15]
  return res;
 800cf22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3710      	adds	r7, #16
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	2004abd4 	.word	0x2004abd4

0800cf30 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cf30:	b480      	push	{r7}
 800cf32:	b085      	sub	sp, #20
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cf40:	89fb      	ldrh	r3, [r7, #14]
 800cf42:	021b      	lsls	r3, r3, #8
 800cf44:	b21a      	sxth	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	b21b      	sxth	r3, r3
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	b21b      	sxth	r3, r3
 800cf50:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cf52:	89fb      	ldrh	r3, [r7, #14]
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3714      	adds	r7, #20
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cf60:	b480      	push	{r7}
 800cf62:	b085      	sub	sp, #20
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	3303      	adds	r3, #3
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	021b      	lsls	r3, r3, #8
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	3202      	adds	r2, #2
 800cf78:	7812      	ldrb	r2, [r2, #0]
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	021b      	lsls	r3, r3, #8
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	3201      	adds	r2, #1
 800cf86:	7812      	ldrb	r2, [r2, #0]
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	021b      	lsls	r3, r3, #8
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	7812      	ldrb	r2, [r2, #0]
 800cf94:	4313      	orrs	r3, r2
 800cf96:	60fb      	str	r3, [r7, #12]
	return rv;
 800cf98:	68fb      	ldr	r3, [r7, #12]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3714      	adds	r7, #20
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr

0800cfa6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cfa6:	b480      	push	{r7}
 800cfa8:	b083      	sub	sp, #12
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
 800cfae:	460b      	mov	r3, r1
 800cfb0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	1c5a      	adds	r2, r3, #1
 800cfb6:	607a      	str	r2, [r7, #4]
 800cfb8:	887a      	ldrh	r2, [r7, #2]
 800cfba:	b2d2      	uxtb	r2, r2
 800cfbc:	701a      	strb	r2, [r3, #0]
 800cfbe:	887b      	ldrh	r3, [r7, #2]
 800cfc0:	0a1b      	lsrs	r3, r3, #8
 800cfc2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	1c5a      	adds	r2, r3, #1
 800cfc8:	607a      	str	r2, [r7, #4]
 800cfca:	887a      	ldrh	r2, [r7, #2]
 800cfcc:	b2d2      	uxtb	r2, r2
 800cfce:	701a      	strb	r2, [r3, #0]
}
 800cfd0:	bf00      	nop
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	1c5a      	adds	r2, r3, #1
 800cfea:	607a      	str	r2, [r7, #4]
 800cfec:	683a      	ldr	r2, [r7, #0]
 800cfee:	b2d2      	uxtb	r2, r2
 800cff0:	701a      	strb	r2, [r3, #0]
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	0a1b      	lsrs	r3, r3, #8
 800cff6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	1c5a      	adds	r2, r3, #1
 800cffc:	607a      	str	r2, [r7, #4]
 800cffe:	683a      	ldr	r2, [r7, #0]
 800d000:	b2d2      	uxtb	r2, r2
 800d002:	701a      	strb	r2, [r3, #0]
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	0a1b      	lsrs	r3, r3, #8
 800d008:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	1c5a      	adds	r2, r3, #1
 800d00e:	607a      	str	r2, [r7, #4]
 800d010:	683a      	ldr	r2, [r7, #0]
 800d012:	b2d2      	uxtb	r2, r2
 800d014:	701a      	strb	r2, [r3, #0]
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	0a1b      	lsrs	r3, r3, #8
 800d01a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	1c5a      	adds	r2, r3, #1
 800d020:	607a      	str	r2, [r7, #4]
 800d022:	683a      	ldr	r2, [r7, #0]
 800d024:	b2d2      	uxtb	r2, r2
 800d026:	701a      	strb	r2, [r3, #0]
}
 800d028:	bf00      	nop
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d034:	b480      	push	{r7}
 800d036:	b087      	sub	sp, #28
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00d      	beq.n	800d06a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d04e:	693a      	ldr	r2, [r7, #16]
 800d050:	1c53      	adds	r3, r2, #1
 800d052:	613b      	str	r3, [r7, #16]
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	1c59      	adds	r1, r3, #1
 800d058:	6179      	str	r1, [r7, #20]
 800d05a:	7812      	ldrb	r2, [r2, #0]
 800d05c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	3b01      	subs	r3, #1
 800d062:	607b      	str	r3, [r7, #4]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d1f1      	bne.n	800d04e <mem_cpy+0x1a>
	}
}
 800d06a:	bf00      	nop
 800d06c:	371c      	adds	r7, #28
 800d06e:	46bd      	mov	sp, r7
 800d070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d074:	4770      	bx	lr

0800d076 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d076:	b480      	push	{r7}
 800d078:	b087      	sub	sp, #28
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	60f8      	str	r0, [r7, #12]
 800d07e:	60b9      	str	r1, [r7, #8]
 800d080:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	1c5a      	adds	r2, r3, #1
 800d08a:	617a      	str	r2, [r7, #20]
 800d08c:	68ba      	ldr	r2, [r7, #8]
 800d08e:	b2d2      	uxtb	r2, r2
 800d090:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	3b01      	subs	r3, #1
 800d096:	607b      	str	r3, [r7, #4]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d1f3      	bne.n	800d086 <mem_set+0x10>
}
 800d09e:	bf00      	nop
 800d0a0:	bf00      	nop
 800d0a2:	371c      	adds	r7, #28
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d0ac:	b480      	push	{r7}
 800d0ae:	b089      	sub	sp, #36	; 0x24
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	61fb      	str	r3, [r7, #28]
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	1c5a      	adds	r2, r3, #1
 800d0c8:	61fa      	str	r2, [r7, #28]
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	69bb      	ldr	r3, [r7, #24]
 800d0d0:	1c5a      	adds	r2, r3, #1
 800d0d2:	61ba      	str	r2, [r7, #24]
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	1acb      	subs	r3, r1, r3
 800d0d8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	607b      	str	r3, [r7, #4]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d002      	beq.n	800d0ec <mem_cmp+0x40>
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d0eb      	beq.n	800d0c4 <mem_cmp+0x18>

	return r;
 800d0ec:	697b      	ldr	r3, [r7, #20]
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3724      	adds	r7, #36	; 0x24
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr

0800d0fa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d0fa:	b480      	push	{r7}
 800d0fc:	b083      	sub	sp, #12
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
 800d102:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d104:	e002      	b.n	800d10c <chk_chr+0x12>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	3301      	adds	r3, #1
 800d10a:	607b      	str	r3, [r7, #4]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d005      	beq.n	800d120 <chk_chr+0x26>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	461a      	mov	r2, r3
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d1f2      	bne.n	800d106 <chk_chr+0xc>
	return *str;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	781b      	ldrb	r3, [r3, #0]
}
 800d124:	4618      	mov	r0, r3
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d13a:	2300      	movs	r3, #0
 800d13c:	60bb      	str	r3, [r7, #8]
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	60fb      	str	r3, [r7, #12]
 800d142:	e029      	b.n	800d198 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d144:	4a27      	ldr	r2, [pc, #156]	; (800d1e4 <chk_lock+0xb4>)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	011b      	lsls	r3, r3, #4
 800d14a:	4413      	add	r3, r2
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d01d      	beq.n	800d18e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d152:	4a24      	ldr	r2, [pc, #144]	; (800d1e4 <chk_lock+0xb4>)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	011b      	lsls	r3, r3, #4
 800d158:	4413      	add	r3, r2
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	429a      	cmp	r2, r3
 800d162:	d116      	bne.n	800d192 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d164:	4a1f      	ldr	r2, [pc, #124]	; (800d1e4 <chk_lock+0xb4>)
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	011b      	lsls	r3, r3, #4
 800d16a:	4413      	add	r3, r2
 800d16c:	3304      	adds	r3, #4
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d174:	429a      	cmp	r2, r3
 800d176:	d10c      	bne.n	800d192 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d178:	4a1a      	ldr	r2, [pc, #104]	; (800d1e4 <chk_lock+0xb4>)
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	011b      	lsls	r3, r3, #4
 800d17e:	4413      	add	r3, r2
 800d180:	3308      	adds	r3, #8
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d188:	429a      	cmp	r2, r3
 800d18a:	d102      	bne.n	800d192 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d18c:	e007      	b.n	800d19e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d18e:	2301      	movs	r3, #1
 800d190:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	3301      	adds	r3, #1
 800d196:	60fb      	str	r3, [r7, #12]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d9d2      	bls.n	800d144 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d109      	bne.n	800d1b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d102      	bne.n	800d1b0 <chk_lock+0x80>
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	d101      	bne.n	800d1b4 <chk_lock+0x84>
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	e010      	b.n	800d1d6 <chk_lock+0xa6>
 800d1b4:	2312      	movs	r3, #18
 800d1b6:	e00e      	b.n	800d1d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d108      	bne.n	800d1d0 <chk_lock+0xa0>
 800d1be:	4a09      	ldr	r2, [pc, #36]	; (800d1e4 <chk_lock+0xb4>)
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	011b      	lsls	r3, r3, #4
 800d1c4:	4413      	add	r3, r2
 800d1c6:	330c      	adds	r3, #12
 800d1c8:	881b      	ldrh	r3, [r3, #0]
 800d1ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1ce:	d101      	bne.n	800d1d4 <chk_lock+0xa4>
 800d1d0:	2310      	movs	r3, #16
 800d1d2:	e000      	b.n	800d1d6 <chk_lock+0xa6>
 800d1d4:	2300      	movs	r3, #0
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3714      	adds	r7, #20
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr
 800d1e2:	bf00      	nop
 800d1e4:	2004a9b4 	.word	0x2004a9b4

0800d1e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	607b      	str	r3, [r7, #4]
 800d1f2:	e002      	b.n	800d1fa <enq_lock+0x12>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	607b      	str	r3, [r7, #4]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d806      	bhi.n	800d20e <enq_lock+0x26>
 800d200:	4a09      	ldr	r2, [pc, #36]	; (800d228 <enq_lock+0x40>)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	011b      	lsls	r3, r3, #4
 800d206:	4413      	add	r3, r2
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d1f2      	bne.n	800d1f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2b02      	cmp	r3, #2
 800d212:	bf14      	ite	ne
 800d214:	2301      	movne	r3, #1
 800d216:	2300      	moveq	r3, #0
 800d218:	b2db      	uxtb	r3, r3
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	370c      	adds	r7, #12
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	2004a9b4 	.word	0x2004a9b4

0800d22c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b085      	sub	sp, #20
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d236:	2300      	movs	r3, #0
 800d238:	60fb      	str	r3, [r7, #12]
 800d23a:	e01f      	b.n	800d27c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d23c:	4a41      	ldr	r2, [pc, #260]	; (800d344 <inc_lock+0x118>)
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	011b      	lsls	r3, r3, #4
 800d242:	4413      	add	r3, r2
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d113      	bne.n	800d276 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d24e:	4a3d      	ldr	r2, [pc, #244]	; (800d344 <inc_lock+0x118>)
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	011b      	lsls	r3, r3, #4
 800d254:	4413      	add	r3, r2
 800d256:	3304      	adds	r3, #4
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d25e:	429a      	cmp	r2, r3
 800d260:	d109      	bne.n	800d276 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d262:	4a38      	ldr	r2, [pc, #224]	; (800d344 <inc_lock+0x118>)
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	011b      	lsls	r3, r3, #4
 800d268:	4413      	add	r3, r2
 800d26a:	3308      	adds	r3, #8
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d272:	429a      	cmp	r2, r3
 800d274:	d006      	beq.n	800d284 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	3301      	adds	r3, #1
 800d27a:	60fb      	str	r3, [r7, #12]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d9dc      	bls.n	800d23c <inc_lock+0x10>
 800d282:	e000      	b.n	800d286 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d284:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d132      	bne.n	800d2f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d28c:	2300      	movs	r3, #0
 800d28e:	60fb      	str	r3, [r7, #12]
 800d290:	e002      	b.n	800d298 <inc_lock+0x6c>
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	3301      	adds	r3, #1
 800d296:	60fb      	str	r3, [r7, #12]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d806      	bhi.n	800d2ac <inc_lock+0x80>
 800d29e:	4a29      	ldr	r2, [pc, #164]	; (800d344 <inc_lock+0x118>)
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	011b      	lsls	r3, r3, #4
 800d2a4:	4413      	add	r3, r2
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1f2      	bne.n	800d292 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2b02      	cmp	r3, #2
 800d2b0:	d101      	bne.n	800d2b6 <inc_lock+0x8a>
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	e040      	b.n	800d338 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	4922      	ldr	r1, [pc, #136]	; (800d344 <inc_lock+0x118>)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	011b      	lsls	r3, r3, #4
 800d2c0:	440b      	add	r3, r1
 800d2c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	689a      	ldr	r2, [r3, #8]
 800d2c8:	491e      	ldr	r1, [pc, #120]	; (800d344 <inc_lock+0x118>)
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	011b      	lsls	r3, r3, #4
 800d2ce:	440b      	add	r3, r1
 800d2d0:	3304      	adds	r3, #4
 800d2d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	695a      	ldr	r2, [r3, #20]
 800d2d8:	491a      	ldr	r1, [pc, #104]	; (800d344 <inc_lock+0x118>)
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	011b      	lsls	r3, r3, #4
 800d2de:	440b      	add	r3, r1
 800d2e0:	3308      	adds	r3, #8
 800d2e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d2e4:	4a17      	ldr	r2, [pc, #92]	; (800d344 <inc_lock+0x118>)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	011b      	lsls	r3, r3, #4
 800d2ea:	4413      	add	r3, r2
 800d2ec:	330c      	adds	r3, #12
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d009      	beq.n	800d30c <inc_lock+0xe0>
 800d2f8:	4a12      	ldr	r2, [pc, #72]	; (800d344 <inc_lock+0x118>)
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	011b      	lsls	r3, r3, #4
 800d2fe:	4413      	add	r3, r2
 800d300:	330c      	adds	r3, #12
 800d302:	881b      	ldrh	r3, [r3, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d001      	beq.n	800d30c <inc_lock+0xe0>
 800d308:	2300      	movs	r3, #0
 800d30a:	e015      	b.n	800d338 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d108      	bne.n	800d324 <inc_lock+0xf8>
 800d312:	4a0c      	ldr	r2, [pc, #48]	; (800d344 <inc_lock+0x118>)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	011b      	lsls	r3, r3, #4
 800d318:	4413      	add	r3, r2
 800d31a:	330c      	adds	r3, #12
 800d31c:	881b      	ldrh	r3, [r3, #0]
 800d31e:	3301      	adds	r3, #1
 800d320:	b29a      	uxth	r2, r3
 800d322:	e001      	b.n	800d328 <inc_lock+0xfc>
 800d324:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d328:	4906      	ldr	r1, [pc, #24]	; (800d344 <inc_lock+0x118>)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	011b      	lsls	r3, r3, #4
 800d32e:	440b      	add	r3, r1
 800d330:	330c      	adds	r3, #12
 800d332:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	3301      	adds	r3, #1
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3714      	adds	r7, #20
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr
 800d344:	2004a9b4 	.word	0x2004a9b4

0800d348 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d348:	b480      	push	{r7}
 800d34a:	b085      	sub	sp, #20
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	3b01      	subs	r3, #1
 800d354:	607b      	str	r3, [r7, #4]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d825      	bhi.n	800d3a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800d35c:	4a17      	ldr	r2, [pc, #92]	; (800d3bc <dec_lock+0x74>)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	011b      	lsls	r3, r3, #4
 800d362:	4413      	add	r3, r2
 800d364:	330c      	adds	r3, #12
 800d366:	881b      	ldrh	r3, [r3, #0]
 800d368:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d36a:	89fb      	ldrh	r3, [r7, #14]
 800d36c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d370:	d101      	bne.n	800d376 <dec_lock+0x2e>
 800d372:	2300      	movs	r3, #0
 800d374:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d376:	89fb      	ldrh	r3, [r7, #14]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d002      	beq.n	800d382 <dec_lock+0x3a>
 800d37c:	89fb      	ldrh	r3, [r7, #14]
 800d37e:	3b01      	subs	r3, #1
 800d380:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d382:	4a0e      	ldr	r2, [pc, #56]	; (800d3bc <dec_lock+0x74>)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	011b      	lsls	r3, r3, #4
 800d388:	4413      	add	r3, r2
 800d38a:	330c      	adds	r3, #12
 800d38c:	89fa      	ldrh	r2, [r7, #14]
 800d38e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d390:	89fb      	ldrh	r3, [r7, #14]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d105      	bne.n	800d3a2 <dec_lock+0x5a>
 800d396:	4a09      	ldr	r2, [pc, #36]	; (800d3bc <dec_lock+0x74>)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	011b      	lsls	r3, r3, #4
 800d39c:	4413      	add	r3, r2
 800d39e:	2200      	movs	r2, #0
 800d3a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	737b      	strb	r3, [r7, #13]
 800d3a6:	e001      	b.n	800d3ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d3a8:	2302      	movs	r3, #2
 800d3aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d3ac:	7b7b      	ldrb	r3, [r7, #13]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3714      	adds	r7, #20
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	2004a9b4 	.word	0x2004a9b4

0800d3c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	e010      	b.n	800d3f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d3ce:	4a0d      	ldr	r2, [pc, #52]	; (800d404 <clear_lock+0x44>)
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	011b      	lsls	r3, r3, #4
 800d3d4:	4413      	add	r3, r2
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d105      	bne.n	800d3ea <clear_lock+0x2a>
 800d3de:	4a09      	ldr	r2, [pc, #36]	; (800d404 <clear_lock+0x44>)
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	011b      	lsls	r3, r3, #4
 800d3e4:	4413      	add	r3, r2
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	60fb      	str	r3, [r7, #12]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d9eb      	bls.n	800d3ce <clear_lock+0xe>
	}
}
 800d3f6:	bf00      	nop
 800d3f8:	bf00      	nop
 800d3fa:	3714      	adds	r7, #20
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr
 800d404:	2004a9b4 	.word	0x2004a9b4

0800d408 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d410:	2300      	movs	r3, #0
 800d412:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	78db      	ldrb	r3, [r3, #3]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d034      	beq.n	800d486 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d420:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	7858      	ldrb	r0, [r3, #1]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d42c:	2301      	movs	r3, #1
 800d42e:	697a      	ldr	r2, [r7, #20]
 800d430:	f7ff fd40 	bl	800ceb4 <disk_write>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d002      	beq.n	800d440 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d43a:	2301      	movs	r3, #1
 800d43c:	73fb      	strb	r3, [r7, #15]
 800d43e:	e022      	b.n	800d486 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d44a:	697a      	ldr	r2, [r7, #20]
 800d44c:	1ad2      	subs	r2, r2, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	69db      	ldr	r3, [r3, #28]
 800d452:	429a      	cmp	r2, r3
 800d454:	d217      	bcs.n	800d486 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	789b      	ldrb	r3, [r3, #2]
 800d45a:	613b      	str	r3, [r7, #16]
 800d45c:	e010      	b.n	800d480 <sync_window+0x78>
					wsect += fs->fsize;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	69db      	ldr	r3, [r3, #28]
 800d462:	697a      	ldr	r2, [r7, #20]
 800d464:	4413      	add	r3, r2
 800d466:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	7858      	ldrb	r0, [r3, #1]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d472:	2301      	movs	r3, #1
 800d474:	697a      	ldr	r2, [r7, #20]
 800d476:	f7ff fd1d 	bl	800ceb4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	3b01      	subs	r3, #1
 800d47e:	613b      	str	r3, [r7, #16]
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	2b01      	cmp	r3, #1
 800d484:	d8eb      	bhi.n	800d45e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d486:	7bfb      	ldrb	r3, [r7, #15]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3718      	adds	r7, #24
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d49a:	2300      	movs	r3, #0
 800d49c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4a2:	683a      	ldr	r2, [r7, #0]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d01b      	beq.n	800d4e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f7ff ffad 	bl	800d408 <sync_window>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d4b2:	7bfb      	ldrb	r3, [r7, #15]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d113      	bne.n	800d4e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	7858      	ldrb	r0, [r3, #1]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	683a      	ldr	r2, [r7, #0]
 800d4c6:	f7ff fcd5 	bl	800ce74 <disk_read>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d004      	beq.n	800d4da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d4d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	683a      	ldr	r2, [r7, #0]
 800d4de:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3710      	adds	r7, #16
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
	...

0800d4ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7ff ff87 	bl	800d408 <sync_window>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d4fe:	7bfb      	ldrb	r3, [r7, #15]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d158      	bne.n	800d5b6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	2b03      	cmp	r3, #3
 800d50a:	d148      	bne.n	800d59e <sync_fs+0xb2>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	791b      	ldrb	r3, [r3, #4]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d144      	bne.n	800d59e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	3334      	adds	r3, #52	; 0x34
 800d518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d51c:	2100      	movs	r1, #0
 800d51e:	4618      	mov	r0, r3
 800d520:	f7ff fda9 	bl	800d076 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	3334      	adds	r3, #52	; 0x34
 800d528:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d52c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d530:	4618      	mov	r0, r3
 800d532:	f7ff fd38 	bl	800cfa6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	3334      	adds	r3, #52	; 0x34
 800d53a:	4921      	ldr	r1, [pc, #132]	; (800d5c0 <sync_fs+0xd4>)
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7ff fd4d 	bl	800cfdc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	3334      	adds	r3, #52	; 0x34
 800d546:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d54a:	491e      	ldr	r1, [pc, #120]	; (800d5c4 <sync_fs+0xd8>)
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7ff fd45 	bl	800cfdc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	3334      	adds	r3, #52	; 0x34
 800d556:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	695b      	ldr	r3, [r3, #20]
 800d55e:	4619      	mov	r1, r3
 800d560:	4610      	mov	r0, r2
 800d562:	f7ff fd3b 	bl	800cfdc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	3334      	adds	r3, #52	; 0x34
 800d56a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	691b      	ldr	r3, [r3, #16]
 800d572:	4619      	mov	r1, r3
 800d574:	4610      	mov	r0, r2
 800d576:	f7ff fd31 	bl	800cfdc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6a1b      	ldr	r3, [r3, #32]
 800d57e:	1c5a      	adds	r2, r3, #1
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	7858      	ldrb	r0, [r3, #1]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d592:	2301      	movs	r3, #1
 800d594:	f7ff fc8e 	bl	800ceb4 <disk_write>
			fs->fsi_flag = 0;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	785b      	ldrb	r3, [r3, #1]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	2100      	movs	r1, #0
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7ff fca4 	bl	800cef4 <disk_ioctl>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d001      	beq.n	800d5b6 <sync_fs+0xca>
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3710      	adds	r7, #16
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	41615252 	.word	0x41615252
 800d5c4:	61417272 	.word	0x61417272

0800d5c8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	3b02      	subs	r3, #2
 800d5d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	699b      	ldr	r3, [r3, #24]
 800d5dc:	3b02      	subs	r3, #2
 800d5de:	683a      	ldr	r2, [r7, #0]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d301      	bcc.n	800d5e8 <clust2sect+0x20>
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	e008      	b.n	800d5fa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	895b      	ldrh	r3, [r3, #10]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	fb03 f202 	mul.w	r2, r3, r2
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f8:	4413      	add	r3, r2
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	370c      	adds	r7, #12
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr

0800d606 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b086      	sub	sp, #24
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
 800d60e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d904      	bls.n	800d626 <get_fat+0x20>
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	699b      	ldr	r3, [r3, #24]
 800d620:	683a      	ldr	r2, [r7, #0]
 800d622:	429a      	cmp	r2, r3
 800d624:	d302      	bcc.n	800d62c <get_fat+0x26>
		val = 1;	/* Internal error */
 800d626:	2301      	movs	r3, #1
 800d628:	617b      	str	r3, [r7, #20]
 800d62a:	e08f      	b.n	800d74c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d62c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d630:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	2b03      	cmp	r3, #3
 800d638:	d062      	beq.n	800d700 <get_fat+0xfa>
 800d63a:	2b03      	cmp	r3, #3
 800d63c:	dc7c      	bgt.n	800d738 <get_fat+0x132>
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d002      	beq.n	800d648 <get_fat+0x42>
 800d642:	2b02      	cmp	r3, #2
 800d644:	d042      	beq.n	800d6cc <get_fat+0xc6>
 800d646:	e077      	b.n	800d738 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	60fb      	str	r3, [r7, #12]
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	085b      	lsrs	r3, r3, #1
 800d650:	68fa      	ldr	r2, [r7, #12]
 800d652:	4413      	add	r3, r2
 800d654:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	0a5b      	lsrs	r3, r3, #9
 800d65e:	4413      	add	r3, r2
 800d660:	4619      	mov	r1, r3
 800d662:	6938      	ldr	r0, [r7, #16]
 800d664:	f7ff ff14 	bl	800d490 <move_window>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d167      	bne.n	800d73e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	1c5a      	adds	r2, r3, #1
 800d672:	60fa      	str	r2, [r7, #12]
 800d674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d678:	693a      	ldr	r2, [r7, #16]
 800d67a:	4413      	add	r3, r2
 800d67c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d680:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	0a5b      	lsrs	r3, r3, #9
 800d68a:	4413      	add	r3, r2
 800d68c:	4619      	mov	r1, r3
 800d68e:	6938      	ldr	r0, [r7, #16]
 800d690:	f7ff fefe 	bl	800d490 <move_window>
 800d694:	4603      	mov	r3, r0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d153      	bne.n	800d742 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6a0:	693a      	ldr	r2, [r7, #16]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d6a8:	021b      	lsls	r3, r3, #8
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	f003 0301 	and.w	r3, r3, #1
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d002      	beq.n	800d6c2 <get_fat+0xbc>
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	091b      	lsrs	r3, r3, #4
 800d6c0:	e002      	b.n	800d6c8 <get_fat+0xc2>
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d6c8:	617b      	str	r3, [r7, #20]
			break;
 800d6ca:	e03f      	b.n	800d74c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	0a1b      	lsrs	r3, r3, #8
 800d6d4:	4413      	add	r3, r2
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	6938      	ldr	r0, [r7, #16]
 800d6da:	f7ff fed9 	bl	800d490 <move_window>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d130      	bne.n	800d746 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	005b      	lsls	r3, r3, #1
 800d6ee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d6f2:	4413      	add	r3, r2
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7ff fc1b 	bl	800cf30 <ld_word>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	617b      	str	r3, [r7, #20]
			break;
 800d6fe:	e025      	b.n	800d74c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	09db      	lsrs	r3, r3, #7
 800d708:	4413      	add	r3, r2
 800d70a:	4619      	mov	r1, r3
 800d70c:	6938      	ldr	r0, [r7, #16]
 800d70e:	f7ff febf 	bl	800d490 <move_window>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d118      	bne.n	800d74a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d726:	4413      	add	r3, r2
 800d728:	4618      	mov	r0, r3
 800d72a:	f7ff fc19 	bl	800cf60 <ld_dword>
 800d72e:	4603      	mov	r3, r0
 800d730:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d734:	617b      	str	r3, [r7, #20]
			break;
 800d736:	e009      	b.n	800d74c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d738:	2301      	movs	r3, #1
 800d73a:	617b      	str	r3, [r7, #20]
 800d73c:	e006      	b.n	800d74c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d73e:	bf00      	nop
 800d740:	e004      	b.n	800d74c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d742:	bf00      	nop
 800d744:	e002      	b.n	800d74c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d746:	bf00      	nop
 800d748:	e000      	b.n	800d74c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d74a:	bf00      	nop
		}
	}

	return val;
 800d74c:	697b      	ldr	r3, [r7, #20]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3718      	adds	r7, #24
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d756:	b590      	push	{r4, r7, lr}
 800d758:	b089      	sub	sp, #36	; 0x24
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	60f8      	str	r0, [r7, #12]
 800d75e:	60b9      	str	r1, [r7, #8]
 800d760:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d762:	2302      	movs	r3, #2
 800d764:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	2b01      	cmp	r3, #1
 800d76a:	f240 80d9 	bls.w	800d920 <put_fat+0x1ca>
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	699b      	ldr	r3, [r3, #24]
 800d772:	68ba      	ldr	r2, [r7, #8]
 800d774:	429a      	cmp	r2, r3
 800d776:	f080 80d3 	bcs.w	800d920 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	2b03      	cmp	r3, #3
 800d780:	f000 8096 	beq.w	800d8b0 <put_fat+0x15a>
 800d784:	2b03      	cmp	r3, #3
 800d786:	f300 80cb 	bgt.w	800d920 <put_fat+0x1ca>
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d002      	beq.n	800d794 <put_fat+0x3e>
 800d78e:	2b02      	cmp	r3, #2
 800d790:	d06e      	beq.n	800d870 <put_fat+0x11a>
 800d792:	e0c5      	b.n	800d920 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	61bb      	str	r3, [r7, #24]
 800d798:	69bb      	ldr	r3, [r7, #24]
 800d79a:	085b      	lsrs	r3, r3, #1
 800d79c:	69ba      	ldr	r2, [r7, #24]
 800d79e:	4413      	add	r3, r2
 800d7a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	0a5b      	lsrs	r3, r3, #9
 800d7aa:	4413      	add	r3, r2
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	68f8      	ldr	r0, [r7, #12]
 800d7b0:	f7ff fe6e 	bl	800d490 <move_window>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d7b8:	7ffb      	ldrb	r3, [r7, #31]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	f040 80a9 	bne.w	800d912 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	1c59      	adds	r1, r3, #1
 800d7ca:	61b9      	str	r1, [r7, #24]
 800d7cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7d0:	4413      	add	r3, r2
 800d7d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	f003 0301 	and.w	r3, r3, #1
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d00d      	beq.n	800d7fa <put_fat+0xa4>
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	b25b      	sxtb	r3, r3
 800d7e4:	f003 030f 	and.w	r3, r3, #15
 800d7e8:	b25a      	sxtb	r2, r3
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	011b      	lsls	r3, r3, #4
 800d7f0:	b25b      	sxtb	r3, r3
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	b25b      	sxtb	r3, r3
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	e001      	b.n	800d7fe <put_fat+0xa8>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	697a      	ldr	r2, [r7, #20]
 800d800:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2201      	movs	r2, #1
 800d806:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	0a5b      	lsrs	r3, r3, #9
 800d810:	4413      	add	r3, r2
 800d812:	4619      	mov	r1, r3
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	f7ff fe3b 	bl	800d490 <move_window>
 800d81a:	4603      	mov	r3, r0
 800d81c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d81e:	7ffb      	ldrb	r3, [r7, #31]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d178      	bne.n	800d916 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d830:	4413      	add	r3, r2
 800d832:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	f003 0301 	and.w	r3, r3, #1
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d003      	beq.n	800d846 <put_fat+0xf0>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	091b      	lsrs	r3, r3, #4
 800d842:	b2db      	uxtb	r3, r3
 800d844:	e00e      	b.n	800d864 <put_fat+0x10e>
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	b25b      	sxtb	r3, r3
 800d84c:	f023 030f 	bic.w	r3, r3, #15
 800d850:	b25a      	sxtb	r2, r3
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	0a1b      	lsrs	r3, r3, #8
 800d856:	b25b      	sxtb	r3, r3
 800d858:	f003 030f 	and.w	r3, r3, #15
 800d85c:	b25b      	sxtb	r3, r3
 800d85e:	4313      	orrs	r3, r2
 800d860:	b25b      	sxtb	r3, r3
 800d862:	b2db      	uxtb	r3, r3
 800d864:	697a      	ldr	r2, [r7, #20]
 800d866:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2201      	movs	r2, #1
 800d86c:	70da      	strb	r2, [r3, #3]
			break;
 800d86e:	e057      	b.n	800d920 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	0a1b      	lsrs	r3, r3, #8
 800d878:	4413      	add	r3, r2
 800d87a:	4619      	mov	r1, r3
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	f7ff fe07 	bl	800d490 <move_window>
 800d882:	4603      	mov	r3, r0
 800d884:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d886:	7ffb      	ldrb	r3, [r7, #31]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d146      	bne.n	800d91a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	005b      	lsls	r3, r3, #1
 800d896:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d89a:	4413      	add	r3, r2
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	b292      	uxth	r2, r2
 800d8a0:	4611      	mov	r1, r2
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7ff fb7f 	bl	800cfa6 <st_word>
			fs->wflag = 1;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	70da      	strb	r2, [r3, #3]
			break;
 800d8ae:	e037      	b.n	800d920 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	09db      	lsrs	r3, r3, #7
 800d8b8:	4413      	add	r3, r2
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f7ff fde7 	bl	800d490 <move_window>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d8c6:	7ffb      	ldrb	r3, [r7, #31]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d128      	bne.n	800d91e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d8e0:	4413      	add	r3, r2
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7ff fb3c 	bl	800cf60 <ld_dword>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d8ee:	4323      	orrs	r3, r4
 800d8f0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d900:	4413      	add	r3, r2
 800d902:	6879      	ldr	r1, [r7, #4]
 800d904:	4618      	mov	r0, r3
 800d906:	f7ff fb69 	bl	800cfdc <st_dword>
			fs->wflag = 1;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2201      	movs	r2, #1
 800d90e:	70da      	strb	r2, [r3, #3]
			break;
 800d910:	e006      	b.n	800d920 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d912:	bf00      	nop
 800d914:	e004      	b.n	800d920 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d916:	bf00      	nop
 800d918:	e002      	b.n	800d920 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d91a:	bf00      	nop
 800d91c:	e000      	b.n	800d920 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d91e:	bf00      	nop
		}
	}
	return res;
 800d920:	7ffb      	ldrb	r3, [r7, #31]
}
 800d922:	4618      	mov	r0, r3
 800d924:	3724      	adds	r7, #36	; 0x24
 800d926:	46bd      	mov	sp, r7
 800d928:	bd90      	pop	{r4, r7, pc}

0800d92a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b088      	sub	sp, #32
 800d92e:	af00      	add	r7, sp, #0
 800d930:	60f8      	str	r0, [r7, #12]
 800d932:	60b9      	str	r1, [r7, #8]
 800d934:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d936:	2300      	movs	r3, #0
 800d938:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	2b01      	cmp	r3, #1
 800d944:	d904      	bls.n	800d950 <remove_chain+0x26>
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	699b      	ldr	r3, [r3, #24]
 800d94a:	68ba      	ldr	r2, [r7, #8]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d301      	bcc.n	800d954 <remove_chain+0x2a>
 800d950:	2302      	movs	r3, #2
 800d952:	e04b      	b.n	800d9ec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d00c      	beq.n	800d974 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d95a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d95e:	6879      	ldr	r1, [r7, #4]
 800d960:	69b8      	ldr	r0, [r7, #24]
 800d962:	f7ff fef8 	bl	800d756 <put_fat>
 800d966:	4603      	mov	r3, r0
 800d968:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d96a:	7ffb      	ldrb	r3, [r7, #31]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d001      	beq.n	800d974 <remove_chain+0x4a>
 800d970:	7ffb      	ldrb	r3, [r7, #31]
 800d972:	e03b      	b.n	800d9ec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d974:	68b9      	ldr	r1, [r7, #8]
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	f7ff fe45 	bl	800d606 <get_fat>
 800d97c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d031      	beq.n	800d9e8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	2b01      	cmp	r3, #1
 800d988:	d101      	bne.n	800d98e <remove_chain+0x64>
 800d98a:	2302      	movs	r3, #2
 800d98c:	e02e      	b.n	800d9ec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d994:	d101      	bne.n	800d99a <remove_chain+0x70>
 800d996:	2301      	movs	r3, #1
 800d998:	e028      	b.n	800d9ec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d99a:	2200      	movs	r2, #0
 800d99c:	68b9      	ldr	r1, [r7, #8]
 800d99e:	69b8      	ldr	r0, [r7, #24]
 800d9a0:	f7ff fed9 	bl	800d756 <put_fat>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d9a8:	7ffb      	ldrb	r3, [r7, #31]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d001      	beq.n	800d9b2 <remove_chain+0x88>
 800d9ae:	7ffb      	ldrb	r3, [r7, #31]
 800d9b0:	e01c      	b.n	800d9ec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d9b2:	69bb      	ldr	r3, [r7, #24]
 800d9b4:	695a      	ldr	r2, [r3, #20]
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	699b      	ldr	r3, [r3, #24]
 800d9ba:	3b02      	subs	r3, #2
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d20b      	bcs.n	800d9d8 <remove_chain+0xae>
			fs->free_clst++;
 800d9c0:	69bb      	ldr	r3, [r7, #24]
 800d9c2:	695b      	ldr	r3, [r3, #20]
 800d9c4:	1c5a      	adds	r2, r3, #1
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	791b      	ldrb	r3, [r3, #4]
 800d9ce:	f043 0301 	orr.w	r3, r3, #1
 800d9d2:	b2da      	uxtb	r2, r3
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	699b      	ldr	r3, [r3, #24]
 800d9e0:	68ba      	ldr	r2, [r7, #8]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d3c6      	bcc.n	800d974 <remove_chain+0x4a>
 800d9e6:	e000      	b.n	800d9ea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d9e8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3720      	adds	r7, #32
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b088      	sub	sp, #32
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10d      	bne.n	800da26 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	691b      	ldr	r3, [r3, #16]
 800da0e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d004      	beq.n	800da20 <create_chain+0x2c>
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	699b      	ldr	r3, [r3, #24]
 800da1a:	69ba      	ldr	r2, [r7, #24]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d31b      	bcc.n	800da58 <create_chain+0x64>
 800da20:	2301      	movs	r3, #1
 800da22:	61bb      	str	r3, [r7, #24]
 800da24:	e018      	b.n	800da58 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800da26:	6839      	ldr	r1, [r7, #0]
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f7ff fdec 	bl	800d606 <get_fat>
 800da2e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2b01      	cmp	r3, #1
 800da34:	d801      	bhi.n	800da3a <create_chain+0x46>
 800da36:	2301      	movs	r3, #1
 800da38:	e070      	b.n	800db1c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da40:	d101      	bne.n	800da46 <create_chain+0x52>
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	e06a      	b.n	800db1c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	699b      	ldr	r3, [r3, #24]
 800da4a:	68fa      	ldr	r2, [r7, #12]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d201      	bcs.n	800da54 <create_chain+0x60>
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	e063      	b.n	800db1c <create_chain+0x128>
		scl = clst;
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	3301      	adds	r3, #1
 800da60:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	699b      	ldr	r3, [r3, #24]
 800da66:	69fa      	ldr	r2, [r7, #28]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d307      	bcc.n	800da7c <create_chain+0x88>
				ncl = 2;
 800da6c:	2302      	movs	r3, #2
 800da6e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800da70:	69fa      	ldr	r2, [r7, #28]
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	429a      	cmp	r2, r3
 800da76:	d901      	bls.n	800da7c <create_chain+0x88>
 800da78:	2300      	movs	r3, #0
 800da7a:	e04f      	b.n	800db1c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800da7c:	69f9      	ldr	r1, [r7, #28]
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7ff fdc1 	bl	800d606 <get_fat>
 800da84:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d00e      	beq.n	800daaa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d003      	beq.n	800da9a <create_chain+0xa6>
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da98:	d101      	bne.n	800da9e <create_chain+0xaa>
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	e03e      	b.n	800db1c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800da9e:	69fa      	ldr	r2, [r7, #28]
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d1da      	bne.n	800da5c <create_chain+0x68>
 800daa6:	2300      	movs	r3, #0
 800daa8:	e038      	b.n	800db1c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800daaa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800daac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dab0:	69f9      	ldr	r1, [r7, #28]
 800dab2:	6938      	ldr	r0, [r7, #16]
 800dab4:	f7ff fe4f 	bl	800d756 <put_fat>
 800dab8:	4603      	mov	r3, r0
 800daba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dabc:	7dfb      	ldrb	r3, [r7, #23]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d109      	bne.n	800dad6 <create_chain+0xe2>
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d006      	beq.n	800dad6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dac8:	69fa      	ldr	r2, [r7, #28]
 800daca:	6839      	ldr	r1, [r7, #0]
 800dacc:	6938      	ldr	r0, [r7, #16]
 800dace:	f7ff fe42 	bl	800d756 <put_fat>
 800dad2:	4603      	mov	r3, r0
 800dad4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dad6:	7dfb      	ldrb	r3, [r7, #23]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d116      	bne.n	800db0a <create_chain+0x116>
		fs->last_clst = ncl;
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	69fa      	ldr	r2, [r7, #28]
 800dae0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	695a      	ldr	r2, [r3, #20]
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	699b      	ldr	r3, [r3, #24]
 800daea:	3b02      	subs	r3, #2
 800daec:	429a      	cmp	r2, r3
 800daee:	d804      	bhi.n	800dafa <create_chain+0x106>
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	695b      	ldr	r3, [r3, #20]
 800daf4:	1e5a      	subs	r2, r3, #1
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	791b      	ldrb	r3, [r3, #4]
 800dafe:	f043 0301 	orr.w	r3, r3, #1
 800db02:	b2da      	uxtb	r2, r3
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	711a      	strb	r2, [r3, #4]
 800db08:	e007      	b.n	800db1a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800db0a:	7dfb      	ldrb	r3, [r7, #23]
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d102      	bne.n	800db16 <create_chain+0x122>
 800db10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db14:	e000      	b.n	800db18 <create_chain+0x124>
 800db16:	2301      	movs	r3, #1
 800db18:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800db1a:	69fb      	ldr	r3, [r7, #28]
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3720      	adds	r7, #32
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800db24:	b480      	push	{r7}
 800db26:	b087      	sub	sp, #28
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db38:	3304      	adds	r3, #4
 800db3a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	0a5b      	lsrs	r3, r3, #9
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	8952      	ldrh	r2, [r2, #10]
 800db44:	fbb3 f3f2 	udiv	r3, r3, r2
 800db48:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	1d1a      	adds	r2, r3, #4
 800db4e:	613a      	str	r2, [r7, #16]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d101      	bne.n	800db5e <clmt_clust+0x3a>
 800db5a:	2300      	movs	r3, #0
 800db5c:	e010      	b.n	800db80 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800db5e:	697a      	ldr	r2, [r7, #20]
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	429a      	cmp	r2, r3
 800db64:	d307      	bcc.n	800db76 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800db66:	697a      	ldr	r2, [r7, #20]
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	1ad3      	subs	r3, r2, r3
 800db6c:	617b      	str	r3, [r7, #20]
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	3304      	adds	r3, #4
 800db72:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800db74:	e7e9      	b.n	800db4a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800db76:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	681a      	ldr	r2, [r3, #0]
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	4413      	add	r3, r2
}
 800db80:	4618      	mov	r0, r3
 800db82:	371c      	adds	r7, #28
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr

0800db8c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dba2:	d204      	bcs.n	800dbae <dir_sdi+0x22>
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	f003 031f 	and.w	r3, r3, #31
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d001      	beq.n	800dbb2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800dbae:	2302      	movs	r3, #2
 800dbb0:	e063      	b.n	800dc7a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	683a      	ldr	r2, [r7, #0]
 800dbb6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	689b      	ldr	r3, [r3, #8]
 800dbbc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d106      	bne.n	800dbd2 <dir_sdi+0x46>
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	d902      	bls.n	800dbd2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbd0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d10c      	bne.n	800dbf2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	095b      	lsrs	r3, r3, #5
 800dbdc:	693a      	ldr	r2, [r7, #16]
 800dbde:	8912      	ldrh	r2, [r2, #8]
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	d301      	bcc.n	800dbe8 <dir_sdi+0x5c>
 800dbe4:	2302      	movs	r3, #2
 800dbe6:	e048      	b.n	800dc7a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	61da      	str	r2, [r3, #28]
 800dbf0:	e029      	b.n	800dc46 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	895b      	ldrh	r3, [r3, #10]
 800dbf6:	025b      	lsls	r3, r3, #9
 800dbf8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dbfa:	e019      	b.n	800dc30 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6979      	ldr	r1, [r7, #20]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7ff fd00 	bl	800d606 <get_fat>
 800dc06:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc0e:	d101      	bne.n	800dc14 <dir_sdi+0x88>
 800dc10:	2301      	movs	r3, #1
 800dc12:	e032      	b.n	800dc7a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d904      	bls.n	800dc24 <dir_sdi+0x98>
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	699b      	ldr	r3, [r3, #24]
 800dc1e:	697a      	ldr	r2, [r7, #20]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d301      	bcc.n	800dc28 <dir_sdi+0x9c>
 800dc24:	2302      	movs	r3, #2
 800dc26:	e028      	b.n	800dc7a <dir_sdi+0xee>
			ofs -= csz;
 800dc28:	683a      	ldr	r2, [r7, #0]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	1ad3      	subs	r3, r2, r3
 800dc2e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dc30:	683a      	ldr	r2, [r7, #0]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d2e1      	bcs.n	800dbfc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dc38:	6979      	ldr	r1, [r7, #20]
 800dc3a:	6938      	ldr	r0, [r7, #16]
 800dc3c:	f7ff fcc4 	bl	800d5c8 <clust2sect>
 800dc40:	4602      	mov	r2, r0
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	697a      	ldr	r2, [r7, #20]
 800dc4a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	69db      	ldr	r3, [r3, #28]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d101      	bne.n	800dc58 <dir_sdi+0xcc>
 800dc54:	2302      	movs	r3, #2
 800dc56:	e010      	b.n	800dc7a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	69da      	ldr	r2, [r3, #28]
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	0a5b      	lsrs	r3, r3, #9
 800dc60:	441a      	add	r2, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc72:	441a      	add	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dc78:	2300      	movs	r3, #0
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3718      	adds	r7, #24
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b086      	sub	sp, #24
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
 800dc8a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	695b      	ldr	r3, [r3, #20]
 800dc96:	3320      	adds	r3, #32
 800dc98:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	69db      	ldr	r3, [r3, #28]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d003      	beq.n	800dcaa <dir_next+0x28>
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dca8:	d301      	bcc.n	800dcae <dir_next+0x2c>
 800dcaa:	2304      	movs	r3, #4
 800dcac:	e0aa      	b.n	800de04 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f040 8098 	bne.w	800ddea <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	69db      	ldr	r3, [r3, #28]
 800dcbe:	1c5a      	adds	r2, r3, #1
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	699b      	ldr	r3, [r3, #24]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d10b      	bne.n	800dce4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	095b      	lsrs	r3, r3, #5
 800dcd0:	68fa      	ldr	r2, [r7, #12]
 800dcd2:	8912      	ldrh	r2, [r2, #8]
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	f0c0 8088 	bcc.w	800ddea <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	61da      	str	r2, [r3, #28]
 800dce0:	2304      	movs	r3, #4
 800dce2:	e08f      	b.n	800de04 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	0a5b      	lsrs	r3, r3, #9
 800dce8:	68fa      	ldr	r2, [r7, #12]
 800dcea:	8952      	ldrh	r2, [r2, #10]
 800dcec:	3a01      	subs	r2, #1
 800dcee:	4013      	ands	r3, r2
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d17a      	bne.n	800ddea <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	699b      	ldr	r3, [r3, #24]
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	4610      	mov	r0, r2
 800dcfe:	f7ff fc82 	bl	800d606 <get_fat>
 800dd02:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d801      	bhi.n	800dd0e <dir_next+0x8c>
 800dd0a:	2302      	movs	r3, #2
 800dd0c:	e07a      	b.n	800de04 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd14:	d101      	bne.n	800dd1a <dir_next+0x98>
 800dd16:	2301      	movs	r3, #1
 800dd18:	e074      	b.n	800de04 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	699b      	ldr	r3, [r3, #24]
 800dd1e:	697a      	ldr	r2, [r7, #20]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d358      	bcc.n	800ddd6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d104      	bne.n	800dd34 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	61da      	str	r2, [r3, #28]
 800dd30:	2304      	movs	r3, #4
 800dd32:	e067      	b.n	800de04 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dd34:	687a      	ldr	r2, [r7, #4]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	699b      	ldr	r3, [r3, #24]
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	4610      	mov	r0, r2
 800dd3e:	f7ff fe59 	bl	800d9f4 <create_chain>
 800dd42:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d101      	bne.n	800dd4e <dir_next+0xcc>
 800dd4a:	2307      	movs	r3, #7
 800dd4c:	e05a      	b.n	800de04 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d101      	bne.n	800dd58 <dir_next+0xd6>
 800dd54:	2302      	movs	r3, #2
 800dd56:	e055      	b.n	800de04 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd5e:	d101      	bne.n	800dd64 <dir_next+0xe2>
 800dd60:	2301      	movs	r3, #1
 800dd62:	e04f      	b.n	800de04 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f7ff fb4f 	bl	800d408 <sync_window>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d001      	beq.n	800dd74 <dir_next+0xf2>
 800dd70:	2301      	movs	r3, #1
 800dd72:	e047      	b.n	800de04 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	3334      	adds	r3, #52	; 0x34
 800dd78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd7c:	2100      	movs	r1, #0
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7ff f979 	bl	800d076 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dd84:	2300      	movs	r3, #0
 800dd86:	613b      	str	r3, [r7, #16]
 800dd88:	6979      	ldr	r1, [r7, #20]
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	f7ff fc1c 	bl	800d5c8 <clust2sect>
 800dd90:	4602      	mov	r2, r0
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	631a      	str	r2, [r3, #48]	; 0x30
 800dd96:	e012      	b.n	800ddbe <dir_next+0x13c>
						fs->wflag = 1;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f7ff fb32 	bl	800d408 <sync_window>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d001      	beq.n	800ddae <dir_next+0x12c>
 800ddaa:	2301      	movs	r3, #1
 800ddac:	e02a      	b.n	800de04 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	613b      	str	r3, [r7, #16]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddb8:	1c5a      	adds	r2, r3, #1
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	631a      	str	r2, [r3, #48]	; 0x30
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	895b      	ldrh	r3, [r3, #10]
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d3e6      	bcc.n	800dd98 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	1ad2      	subs	r2, r2, r3
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	697a      	ldr	r2, [r7, #20]
 800ddda:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dddc:	6979      	ldr	r1, [r7, #20]
 800ddde:	68f8      	ldr	r0, [r7, #12]
 800dde0:	f7ff fbf2 	bl	800d5c8 <clust2sect>
 800dde4:	4602      	mov	r2, r0
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	68ba      	ldr	r2, [r7, #8]
 800ddee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddfc:	441a      	add	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800de02:	2300      	movs	r3, #0
}
 800de04:	4618      	mov	r0, r3
 800de06:	3718      	adds	r7, #24
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b086      	sub	sp, #24
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800de1c:	2100      	movs	r1, #0
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f7ff feb4 	bl	800db8c <dir_sdi>
 800de24:	4603      	mov	r3, r0
 800de26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800de28:	7dfb      	ldrb	r3, [r7, #23]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d12b      	bne.n	800de86 <dir_alloc+0x7a>
		n = 0;
 800de2e:	2300      	movs	r3, #0
 800de30:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	69db      	ldr	r3, [r3, #28]
 800de36:	4619      	mov	r1, r3
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f7ff fb29 	bl	800d490 <move_window>
 800de3e:	4603      	mov	r3, r0
 800de40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800de42:	7dfb      	ldrb	r3, [r7, #23]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d11d      	bne.n	800de84 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6a1b      	ldr	r3, [r3, #32]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	2be5      	cmp	r3, #229	; 0xe5
 800de50:	d004      	beq.n	800de5c <dir_alloc+0x50>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6a1b      	ldr	r3, [r3, #32]
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d107      	bne.n	800de6c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	3301      	adds	r3, #1
 800de60:	613b      	str	r3, [r7, #16]
 800de62:	693a      	ldr	r2, [r7, #16]
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	429a      	cmp	r2, r3
 800de68:	d102      	bne.n	800de70 <dir_alloc+0x64>
 800de6a:	e00c      	b.n	800de86 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800de6c:	2300      	movs	r3, #0
 800de6e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800de70:	2101      	movs	r1, #1
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7ff ff05 	bl	800dc82 <dir_next>
 800de78:	4603      	mov	r3, r0
 800de7a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800de7c:	7dfb      	ldrb	r3, [r7, #23]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d0d7      	beq.n	800de32 <dir_alloc+0x26>
 800de82:	e000      	b.n	800de86 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800de84:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800de86:	7dfb      	ldrb	r3, [r7, #23]
 800de88:	2b04      	cmp	r3, #4
 800de8a:	d101      	bne.n	800de90 <dir_alloc+0x84>
 800de8c:	2307      	movs	r3, #7
 800de8e:	75fb      	strb	r3, [r7, #23]
	return res;
 800de90:	7dfb      	ldrb	r3, [r7, #23]
}
 800de92:	4618      	mov	r0, r3
 800de94:	3718      	adds	r7, #24
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b084      	sub	sp, #16
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
 800dea2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	331a      	adds	r3, #26
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7ff f841 	bl	800cf30 <ld_word>
 800deae:	4603      	mov	r3, r0
 800deb0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	2b03      	cmp	r3, #3
 800deb8:	d109      	bne.n	800dece <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	3314      	adds	r3, #20
 800debe:	4618      	mov	r0, r3
 800dec0:	f7ff f836 	bl	800cf30 <ld_word>
 800dec4:	4603      	mov	r3, r0
 800dec6:	041b      	lsls	r3, r3, #16
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	4313      	orrs	r3, r2
 800decc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dece:	68fb      	ldr	r3, [r7, #12]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3710      	adds	r7, #16
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	331a      	adds	r3, #26
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	b292      	uxth	r2, r2
 800deec:	4611      	mov	r1, r2
 800deee:	4618      	mov	r0, r3
 800def0:	f7ff f859 	bl	800cfa6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	2b03      	cmp	r3, #3
 800defa:	d109      	bne.n	800df10 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	f103 0214 	add.w	r2, r3, #20
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	0c1b      	lsrs	r3, r3, #16
 800df06:	b29b      	uxth	r3, r3
 800df08:	4619      	mov	r1, r3
 800df0a:	4610      	mov	r0, r2
 800df0c:	f7ff f84b 	bl	800cfa6 <st_word>
	}
}
 800df10:	bf00      	nop
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800df18:	b590      	push	{r4, r7, lr}
 800df1a:	b087      	sub	sp, #28
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	331a      	adds	r3, #26
 800df26:	4618      	mov	r0, r3
 800df28:	f7ff f802 	bl	800cf30 <ld_word>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d001      	beq.n	800df36 <cmp_lfn+0x1e>
 800df32:	2300      	movs	r3, #0
 800df34:	e059      	b.n	800dfea <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df3e:	1e5a      	subs	r2, r3, #1
 800df40:	4613      	mov	r3, r2
 800df42:	005b      	lsls	r3, r3, #1
 800df44:	4413      	add	r3, r2
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	4413      	add	r3, r2
 800df4a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800df4c:	2301      	movs	r3, #1
 800df4e:	81fb      	strh	r3, [r7, #14]
 800df50:	2300      	movs	r3, #0
 800df52:	613b      	str	r3, [r7, #16]
 800df54:	e033      	b.n	800dfbe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800df56:	4a27      	ldr	r2, [pc, #156]	; (800dff4 <cmp_lfn+0xdc>)
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	4413      	add	r3, r2
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	461a      	mov	r2, r3
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	4413      	add	r3, r2
 800df64:	4618      	mov	r0, r3
 800df66:	f7fe ffe3 	bl	800cf30 <ld_word>
 800df6a:	4603      	mov	r3, r0
 800df6c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800df6e:	89fb      	ldrh	r3, [r7, #14]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d01a      	beq.n	800dfaa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	2bfe      	cmp	r3, #254	; 0xfe
 800df78:	d812      	bhi.n	800dfa0 <cmp_lfn+0x88>
 800df7a:	89bb      	ldrh	r3, [r7, #12]
 800df7c:	4618      	mov	r0, r3
 800df7e:	f001 ff2d 	bl	800fddc <ff_wtoupper>
 800df82:	4603      	mov	r3, r0
 800df84:	461c      	mov	r4, r3
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	1c5a      	adds	r2, r3, #1
 800df8a:	617a      	str	r2, [r7, #20]
 800df8c:	005b      	lsls	r3, r3, #1
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	4413      	add	r3, r2
 800df92:	881b      	ldrh	r3, [r3, #0]
 800df94:	4618      	mov	r0, r3
 800df96:	f001 ff21 	bl	800fddc <ff_wtoupper>
 800df9a:	4603      	mov	r3, r0
 800df9c:	429c      	cmp	r4, r3
 800df9e:	d001      	beq.n	800dfa4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	e022      	b.n	800dfea <cmp_lfn+0xd2>
			}
			wc = uc;
 800dfa4:	89bb      	ldrh	r3, [r7, #12]
 800dfa6:	81fb      	strh	r3, [r7, #14]
 800dfa8:	e006      	b.n	800dfb8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dfaa:	89bb      	ldrh	r3, [r7, #12]
 800dfac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d001      	beq.n	800dfb8 <cmp_lfn+0xa0>
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	e018      	b.n	800dfea <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	613b      	str	r3, [r7, #16]
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	2b0c      	cmp	r3, #12
 800dfc2:	d9c8      	bls.n	800df56 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00b      	beq.n	800dfe8 <cmp_lfn+0xd0>
 800dfd0:	89fb      	ldrh	r3, [r7, #14]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d008      	beq.n	800dfe8 <cmp_lfn+0xd0>
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	005b      	lsls	r3, r3, #1
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	4413      	add	r3, r2
 800dfde:	881b      	ldrh	r3, [r3, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d001      	beq.n	800dfe8 <cmp_lfn+0xd0>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	e000      	b.n	800dfea <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800dfe8:	2301      	movs	r3, #1
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	371c      	adds	r7, #28
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd90      	pop	{r4, r7, pc}
 800dff2:	bf00      	nop
 800dff4:	080123dc 	.word	0x080123dc

0800dff8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b088      	sub	sp, #32
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	4611      	mov	r1, r2
 800e004:	461a      	mov	r2, r3
 800e006:	460b      	mov	r3, r1
 800e008:	71fb      	strb	r3, [r7, #7]
 800e00a:	4613      	mov	r3, r2
 800e00c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	330d      	adds	r3, #13
 800e012:	79ba      	ldrb	r2, [r7, #6]
 800e014:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	330b      	adds	r3, #11
 800e01a:	220f      	movs	r2, #15
 800e01c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	330c      	adds	r3, #12
 800e022:	2200      	movs	r2, #0
 800e024:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	331a      	adds	r3, #26
 800e02a:	2100      	movs	r1, #0
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7fe ffba 	bl	800cfa6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e032:	79fb      	ldrb	r3, [r7, #7]
 800e034:	1e5a      	subs	r2, r3, #1
 800e036:	4613      	mov	r3, r2
 800e038:	005b      	lsls	r3, r3, #1
 800e03a:	4413      	add	r3, r2
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	4413      	add	r3, r2
 800e040:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e042:	2300      	movs	r3, #0
 800e044:	82fb      	strh	r3, [r7, #22]
 800e046:	2300      	movs	r3, #0
 800e048:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e04a:	8afb      	ldrh	r3, [r7, #22]
 800e04c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e050:	4293      	cmp	r3, r2
 800e052:	d007      	beq.n	800e064 <put_lfn+0x6c>
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	1c5a      	adds	r2, r3, #1
 800e058:	61fa      	str	r2, [r7, #28]
 800e05a:	005b      	lsls	r3, r3, #1
 800e05c:	68fa      	ldr	r2, [r7, #12]
 800e05e:	4413      	add	r3, r2
 800e060:	881b      	ldrh	r3, [r3, #0]
 800e062:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e064:	4a17      	ldr	r2, [pc, #92]	; (800e0c4 <put_lfn+0xcc>)
 800e066:	69bb      	ldr	r3, [r7, #24]
 800e068:	4413      	add	r3, r2
 800e06a:	781b      	ldrb	r3, [r3, #0]
 800e06c:	461a      	mov	r2, r3
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	4413      	add	r3, r2
 800e072:	8afa      	ldrh	r2, [r7, #22]
 800e074:	4611      	mov	r1, r2
 800e076:	4618      	mov	r0, r3
 800e078:	f7fe ff95 	bl	800cfa6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e07c:	8afb      	ldrh	r3, [r7, #22]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d102      	bne.n	800e088 <put_lfn+0x90>
 800e082:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e086:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	3301      	adds	r3, #1
 800e08c:	61bb      	str	r3, [r7, #24]
 800e08e:	69bb      	ldr	r3, [r7, #24]
 800e090:	2b0c      	cmp	r3, #12
 800e092:	d9da      	bls.n	800e04a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e094:	8afb      	ldrh	r3, [r7, #22]
 800e096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d006      	beq.n	800e0ac <put_lfn+0xb4>
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	005b      	lsls	r3, r3, #1
 800e0a2:	68fa      	ldr	r2, [r7, #12]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	881b      	ldrh	r3, [r3, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d103      	bne.n	800e0b4 <put_lfn+0xbc>
 800e0ac:	79fb      	ldrb	r3, [r7, #7]
 800e0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0b2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	79fa      	ldrb	r2, [r7, #7]
 800e0b8:	701a      	strb	r2, [r3, #0]
}
 800e0ba:	bf00      	nop
 800e0bc:	3720      	adds	r7, #32
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	080123dc 	.word	0x080123dc

0800e0c8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b08c      	sub	sp, #48	; 0x30
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	607a      	str	r2, [r7, #4]
 800e0d4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e0d6:	220b      	movs	r2, #11
 800e0d8:	68b9      	ldr	r1, [r7, #8]
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	f7fe ffaa 	bl	800d034 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	2b05      	cmp	r3, #5
 800e0e4:	d929      	bls.n	800e13a <gen_numname+0x72>
		sr = seq;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e0ea:	e020      	b.n	800e12e <gen_numname+0x66>
			wc = *lfn++;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	1c9a      	adds	r2, r3, #2
 800e0f0:	607a      	str	r2, [r7, #4]
 800e0f2:	881b      	ldrh	r3, [r3, #0]
 800e0f4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e0fa:	e015      	b.n	800e128 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	005a      	lsls	r2, r3, #1
 800e100:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e102:	f003 0301 	and.w	r3, r3, #1
 800e106:	4413      	add	r3, r2
 800e108:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e10a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e10c:	085b      	lsrs	r3, r3, #1
 800e10e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e116:	2b00      	cmp	r3, #0
 800e118:	d003      	beq.n	800e122 <gen_numname+0x5a>
 800e11a:	69fa      	ldr	r2, [r7, #28]
 800e11c:	4b30      	ldr	r3, [pc, #192]	; (800e1e0 <gen_numname+0x118>)
 800e11e:	4053      	eors	r3, r2
 800e120:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e124:	3301      	adds	r3, #1
 800e126:	62bb      	str	r3, [r7, #40]	; 0x28
 800e128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12a:	2b0f      	cmp	r3, #15
 800e12c:	d9e6      	bls.n	800e0fc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	881b      	ldrh	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d1da      	bne.n	800e0ec <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e13a:	2307      	movs	r3, #7
 800e13c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	b2db      	uxtb	r3, r3
 800e142:	f003 030f 	and.w	r3, r3, #15
 800e146:	b2db      	uxtb	r3, r3
 800e148:	3330      	adds	r3, #48	; 0x30
 800e14a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e14e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e152:	2b39      	cmp	r3, #57	; 0x39
 800e154:	d904      	bls.n	800e160 <gen_numname+0x98>
 800e156:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e15a:	3307      	adds	r3, #7
 800e15c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e162:	1e5a      	subs	r2, r3, #1
 800e164:	62ba      	str	r2, [r7, #40]	; 0x28
 800e166:	3330      	adds	r3, #48	; 0x30
 800e168:	443b      	add	r3, r7
 800e16a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e16e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	091b      	lsrs	r3, r3, #4
 800e176:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d1df      	bne.n	800e13e <gen_numname+0x76>
	ns[i] = '~';
 800e17e:	f107 0214 	add.w	r2, r7, #20
 800e182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e184:	4413      	add	r3, r2
 800e186:	227e      	movs	r2, #126	; 0x7e
 800e188:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e18a:	2300      	movs	r3, #0
 800e18c:	627b      	str	r3, [r7, #36]	; 0x24
 800e18e:	e002      	b.n	800e196 <gen_numname+0xce>
 800e190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e192:	3301      	adds	r3, #1
 800e194:	627b      	str	r3, [r7, #36]	; 0x24
 800e196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d205      	bcs.n	800e1aa <gen_numname+0xe2>
 800e19e:	68fa      	ldr	r2, [r7, #12]
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a2:	4413      	add	r3, r2
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	2b20      	cmp	r3, #32
 800e1a8:	d1f2      	bne.n	800e190 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ac:	2b07      	cmp	r3, #7
 800e1ae:	d807      	bhi.n	800e1c0 <gen_numname+0xf8>
 800e1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b2:	1c5a      	adds	r2, r3, #1
 800e1b4:	62ba      	str	r2, [r7, #40]	; 0x28
 800e1b6:	3330      	adds	r3, #48	; 0x30
 800e1b8:	443b      	add	r3, r7
 800e1ba:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e1be:	e000      	b.n	800e1c2 <gen_numname+0xfa>
 800e1c0:	2120      	movs	r1, #32
 800e1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c4:	1c5a      	adds	r2, r3, #1
 800e1c6:	627a      	str	r2, [r7, #36]	; 0x24
 800e1c8:	68fa      	ldr	r2, [r7, #12]
 800e1ca:	4413      	add	r3, r2
 800e1cc:	460a      	mov	r2, r1
 800e1ce:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d2:	2b07      	cmp	r3, #7
 800e1d4:	d9e9      	bls.n	800e1aa <gen_numname+0xe2>
}
 800e1d6:	bf00      	nop
 800e1d8:	bf00      	nop
 800e1da:	3730      	adds	r7, #48	; 0x30
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	00011021 	.word	0x00011021

0800e1e4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e1f0:	230b      	movs	r3, #11
 800e1f2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e1f4:	7bfb      	ldrb	r3, [r7, #15]
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	0852      	lsrs	r2, r2, #1
 800e1fa:	01db      	lsls	r3, r3, #7
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	b2da      	uxtb	r2, r3
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	1c59      	adds	r1, r3, #1
 800e204:	6079      	str	r1, [r7, #4]
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	4413      	add	r3, r2
 800e20a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	3b01      	subs	r3, #1
 800e210:	60bb      	str	r3, [r7, #8]
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d1ed      	bne.n	800e1f4 <sum_sfn+0x10>
	return sum;
 800e218:	7bfb      	ldrb	r3, [r7, #15]
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3714      	adds	r7, #20
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr

0800e226 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e226:	b580      	push	{r7, lr}
 800e228:	b086      	sub	sp, #24
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e234:	2100      	movs	r1, #0
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7ff fca8 	bl	800db8c <dir_sdi>
 800e23c:	4603      	mov	r3, r0
 800e23e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e240:	7dfb      	ldrb	r3, [r7, #23]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d001      	beq.n	800e24a <dir_find+0x24>
 800e246:	7dfb      	ldrb	r3, [r7, #23]
 800e248:	e0a9      	b.n	800e39e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e24a:	23ff      	movs	r3, #255	; 0xff
 800e24c:	753b      	strb	r3, [r7, #20]
 800e24e:	7d3b      	ldrb	r3, [r7, #20]
 800e250:	757b      	strb	r3, [r7, #21]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e258:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	69db      	ldr	r3, [r3, #28]
 800e25e:	4619      	mov	r1, r3
 800e260:	6938      	ldr	r0, [r7, #16]
 800e262:	f7ff f915 	bl	800d490 <move_window>
 800e266:	4603      	mov	r3, r0
 800e268:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e26a:	7dfb      	ldrb	r3, [r7, #23]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	f040 8090 	bne.w	800e392 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6a1b      	ldr	r3, [r3, #32]
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e27a:	7dbb      	ldrb	r3, [r7, #22]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d102      	bne.n	800e286 <dir_find+0x60>
 800e280:	2304      	movs	r3, #4
 800e282:	75fb      	strb	r3, [r7, #23]
 800e284:	e08a      	b.n	800e39c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6a1b      	ldr	r3, [r3, #32]
 800e28a:	330b      	adds	r3, #11
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e292:	73fb      	strb	r3, [r7, #15]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	7bfa      	ldrb	r2, [r7, #15]
 800e298:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e29a:	7dbb      	ldrb	r3, [r7, #22]
 800e29c:	2be5      	cmp	r3, #229	; 0xe5
 800e29e:	d007      	beq.n	800e2b0 <dir_find+0x8a>
 800e2a0:	7bfb      	ldrb	r3, [r7, #15]
 800e2a2:	f003 0308 	and.w	r3, r3, #8
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d009      	beq.n	800e2be <dir_find+0x98>
 800e2aa:	7bfb      	ldrb	r3, [r7, #15]
 800e2ac:	2b0f      	cmp	r3, #15
 800e2ae:	d006      	beq.n	800e2be <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e2b0:	23ff      	movs	r3, #255	; 0xff
 800e2b2:	757b      	strb	r3, [r7, #21]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2ba:	631a      	str	r2, [r3, #48]	; 0x30
 800e2bc:	e05e      	b.n	800e37c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e2be:	7bfb      	ldrb	r3, [r7, #15]
 800e2c0:	2b0f      	cmp	r3, #15
 800e2c2:	d136      	bne.n	800e332 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d154      	bne.n	800e37c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e2d2:	7dbb      	ldrb	r3, [r7, #22]
 800e2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00d      	beq.n	800e2f8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6a1b      	ldr	r3, [r3, #32]
 800e2e0:	7b5b      	ldrb	r3, [r3, #13]
 800e2e2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e2e4:	7dbb      	ldrb	r3, [r7, #22]
 800e2e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2ea:	75bb      	strb	r3, [r7, #22]
 800e2ec:	7dbb      	ldrb	r3, [r7, #22]
 800e2ee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	695a      	ldr	r2, [r3, #20]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e2f8:	7dba      	ldrb	r2, [r7, #22]
 800e2fa:	7d7b      	ldrb	r3, [r7, #21]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d115      	bne.n	800e32c <dir_find+0x106>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6a1b      	ldr	r3, [r3, #32]
 800e304:	330d      	adds	r3, #13
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	7d3a      	ldrb	r2, [r7, #20]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d10e      	bne.n	800e32c <dir_find+0x106>
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	68da      	ldr	r2, [r3, #12]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6a1b      	ldr	r3, [r3, #32]
 800e316:	4619      	mov	r1, r3
 800e318:	4610      	mov	r0, r2
 800e31a:	f7ff fdfd 	bl	800df18 <cmp_lfn>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b00      	cmp	r3, #0
 800e322:	d003      	beq.n	800e32c <dir_find+0x106>
 800e324:	7d7b      	ldrb	r3, [r7, #21]
 800e326:	3b01      	subs	r3, #1
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	e000      	b.n	800e32e <dir_find+0x108>
 800e32c:	23ff      	movs	r3, #255	; 0xff
 800e32e:	757b      	strb	r3, [r7, #21]
 800e330:	e024      	b.n	800e37c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e332:	7d7b      	ldrb	r3, [r7, #21]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d109      	bne.n	800e34c <dir_find+0x126>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6a1b      	ldr	r3, [r3, #32]
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7ff ff51 	bl	800e1e4 <sum_sfn>
 800e342:	4603      	mov	r3, r0
 800e344:	461a      	mov	r2, r3
 800e346:	7d3b      	ldrb	r3, [r7, #20]
 800e348:	4293      	cmp	r3, r2
 800e34a:	d024      	beq.n	800e396 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e352:	f003 0301 	and.w	r3, r3, #1
 800e356:	2b00      	cmp	r3, #0
 800e358:	d10a      	bne.n	800e370 <dir_find+0x14a>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6a18      	ldr	r0, [r3, #32]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	3324      	adds	r3, #36	; 0x24
 800e362:	220b      	movs	r2, #11
 800e364:	4619      	mov	r1, r3
 800e366:	f7fe fea1 	bl	800d0ac <mem_cmp>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d014      	beq.n	800e39a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e370:	23ff      	movs	r3, #255	; 0xff
 800e372:	757b      	strb	r3, [r7, #21]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e37a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e37c:	2100      	movs	r1, #0
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f7ff fc7f 	bl	800dc82 <dir_next>
 800e384:	4603      	mov	r3, r0
 800e386:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e388:	7dfb      	ldrb	r3, [r7, #23]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	f43f af65 	beq.w	800e25a <dir_find+0x34>
 800e390:	e004      	b.n	800e39c <dir_find+0x176>
		if (res != FR_OK) break;
 800e392:	bf00      	nop
 800e394:	e002      	b.n	800e39c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e396:	bf00      	nop
 800e398:	e000      	b.n	800e39c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e39a:	bf00      	nop

	return res;
 800e39c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3718      	adds	r7, #24
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
	...

0800e3a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b08c      	sub	sp, #48	; 0x30
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e3bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d001      	beq.n	800e3c8 <dir_register+0x20>
 800e3c4:	2306      	movs	r3, #6
 800e3c6:	e0e0      	b.n	800e58a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	627b      	str	r3, [r7, #36]	; 0x24
 800e3cc:	e002      	b.n	800e3d4 <dir_register+0x2c>
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	627b      	str	r3, [r7, #36]	; 0x24
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	68da      	ldr	r2, [r3, #12]
 800e3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3da:	005b      	lsls	r3, r3, #1
 800e3dc:	4413      	add	r3, r2
 800e3de:	881b      	ldrh	r3, [r3, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d1f4      	bne.n	800e3ce <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e3ea:	f107 030c 	add.w	r3, r7, #12
 800e3ee:	220c      	movs	r2, #12
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7fe fe1f 	bl	800d034 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e3f6:	7dfb      	ldrb	r3, [r7, #23]
 800e3f8:	f003 0301 	and.w	r3, r3, #1
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d032      	beq.n	800e466 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2240      	movs	r2, #64	; 0x40
 800e404:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e408:	2301      	movs	r3, #1
 800e40a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e40c:	e016      	b.n	800e43c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e414:	69fb      	ldr	r3, [r7, #28]
 800e416:	68da      	ldr	r2, [r3, #12]
 800e418:	f107 010c 	add.w	r1, r7, #12
 800e41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41e:	f7ff fe53 	bl	800e0c8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f7ff feff 	bl	800e226 <dir_find>
 800e428:	4603      	mov	r3, r0
 800e42a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e42e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e432:	2b00      	cmp	r3, #0
 800e434:	d106      	bne.n	800e444 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e438:	3301      	adds	r3, #1
 800e43a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43e:	2b63      	cmp	r3, #99	; 0x63
 800e440:	d9e5      	bls.n	800e40e <dir_register+0x66>
 800e442:	e000      	b.n	800e446 <dir_register+0x9e>
			if (res != FR_OK) break;
 800e444:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e448:	2b64      	cmp	r3, #100	; 0x64
 800e44a:	d101      	bne.n	800e450 <dir_register+0xa8>
 800e44c:	2307      	movs	r3, #7
 800e44e:	e09c      	b.n	800e58a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e454:	2b04      	cmp	r3, #4
 800e456:	d002      	beq.n	800e45e <dir_register+0xb6>
 800e458:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e45c:	e095      	b.n	800e58a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e45e:	7dfa      	ldrb	r2, [r7, #23]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e466:	7dfb      	ldrb	r3, [r7, #23]
 800e468:	f003 0302 	and.w	r3, r3, #2
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d007      	beq.n	800e480 <dir_register+0xd8>
 800e470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e472:	330c      	adds	r3, #12
 800e474:	4a47      	ldr	r2, [pc, #284]	; (800e594 <dir_register+0x1ec>)
 800e476:	fba2 2303 	umull	r2, r3, r2, r3
 800e47a:	089b      	lsrs	r3, r3, #2
 800e47c:	3301      	adds	r3, #1
 800e47e:	e000      	b.n	800e482 <dir_register+0xda>
 800e480:	2301      	movs	r3, #1
 800e482:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e484:	6a39      	ldr	r1, [r7, #32]
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f7ff fcc0 	bl	800de0c <dir_alloc>
 800e48c:	4603      	mov	r3, r0
 800e48e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e492:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e496:	2b00      	cmp	r3, #0
 800e498:	d148      	bne.n	800e52c <dir_register+0x184>
 800e49a:	6a3b      	ldr	r3, [r7, #32]
 800e49c:	3b01      	subs	r3, #1
 800e49e:	623b      	str	r3, [r7, #32]
 800e4a0:	6a3b      	ldr	r3, [r7, #32]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d042      	beq.n	800e52c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	695a      	ldr	r2, [r3, #20]
 800e4aa:	6a3b      	ldr	r3, [r7, #32]
 800e4ac:	015b      	lsls	r3, r3, #5
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f7ff fb6a 	bl	800db8c <dir_sdi>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e4be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d132      	bne.n	800e52c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	3324      	adds	r3, #36	; 0x24
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7ff fe8a 	bl	800e1e4 <sum_sfn>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	69db      	ldr	r3, [r3, #28]
 800e4d8:	4619      	mov	r1, r3
 800e4da:	69f8      	ldr	r0, [r7, #28]
 800e4dc:	f7fe ffd8 	bl	800d490 <move_window>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e4e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d11d      	bne.n	800e52a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	68d8      	ldr	r0, [r3, #12]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6a19      	ldr	r1, [r3, #32]
 800e4f6:	6a3b      	ldr	r3, [r7, #32]
 800e4f8:	b2da      	uxtb	r2, r3
 800e4fa:	7efb      	ldrb	r3, [r7, #27]
 800e4fc:	f7ff fd7c 	bl	800dff8 <put_lfn>
				fs->wflag = 1;
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	2201      	movs	r2, #1
 800e504:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e506:	2100      	movs	r1, #0
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f7ff fbba 	bl	800dc82 <dir_next>
 800e50e:	4603      	mov	r3, r0
 800e510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d107      	bne.n	800e52c <dir_register+0x184>
 800e51c:	6a3b      	ldr	r3, [r7, #32]
 800e51e:	3b01      	subs	r3, #1
 800e520:	623b      	str	r3, [r7, #32]
 800e522:	6a3b      	ldr	r3, [r7, #32]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d1d5      	bne.n	800e4d4 <dir_register+0x12c>
 800e528:	e000      	b.n	800e52c <dir_register+0x184>
				if (res != FR_OK) break;
 800e52a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e52c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e530:	2b00      	cmp	r3, #0
 800e532:	d128      	bne.n	800e586 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	69db      	ldr	r3, [r3, #28]
 800e538:	4619      	mov	r1, r3
 800e53a:	69f8      	ldr	r0, [r7, #28]
 800e53c:	f7fe ffa8 	bl	800d490 <move_window>
 800e540:	4603      	mov	r3, r0
 800e542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d11b      	bne.n	800e586 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6a1b      	ldr	r3, [r3, #32]
 800e552:	2220      	movs	r2, #32
 800e554:	2100      	movs	r1, #0
 800e556:	4618      	mov	r0, r3
 800e558:	f7fe fd8d 	bl	800d076 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6a18      	ldr	r0, [r3, #32]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	3324      	adds	r3, #36	; 0x24
 800e564:	220b      	movs	r2, #11
 800e566:	4619      	mov	r1, r3
 800e568:	f7fe fd64 	bl	800d034 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6a1b      	ldr	r3, [r3, #32]
 800e576:	330c      	adds	r3, #12
 800e578:	f002 0218 	and.w	r2, r2, #24
 800e57c:	b2d2      	uxtb	r2, r2
 800e57e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	2201      	movs	r2, #1
 800e584:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e586:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3730      	adds	r7, #48	; 0x30
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	4ec4ec4f 	.word	0x4ec4ec4f

0800e598 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b088      	sub	sp, #32
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	69db      	ldr	r3, [r3, #28]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f000 80c9 	beq.w	800e74a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5c0:	d032      	beq.n	800e628 <get_fileinfo+0x90>
			i = j = 0;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	61bb      	str	r3, [r7, #24]
 800e5c6:	69bb      	ldr	r3, [r7, #24]
 800e5c8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e5ca:	e01b      	b.n	800e604 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e5cc:	89fb      	ldrh	r3, [r7, #14]
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f001 fbc7 	bl	800fd64 <ff_convert>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e5da:	89fb      	ldrh	r3, [r7, #14]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d102      	bne.n	800e5e6 <get_fileinfo+0x4e>
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	61fb      	str	r3, [r7, #28]
 800e5e4:	e01a      	b.n	800e61c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e5e6:	69fb      	ldr	r3, [r7, #28]
 800e5e8:	2bfe      	cmp	r3, #254	; 0xfe
 800e5ea:	d902      	bls.n	800e5f2 <get_fileinfo+0x5a>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	61fb      	str	r3, [r7, #28]
 800e5f0:	e014      	b.n	800e61c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	1c5a      	adds	r2, r3, #1
 800e5f6:	61fa      	str	r2, [r7, #28]
 800e5f8:	89fa      	ldrh	r2, [r7, #14]
 800e5fa:	b2d1      	uxtb	r1, r2
 800e5fc:	683a      	ldr	r2, [r7, #0]
 800e5fe:	4413      	add	r3, r2
 800e600:	460a      	mov	r2, r1
 800e602:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	68da      	ldr	r2, [r3, #12]
 800e608:	69bb      	ldr	r3, [r7, #24]
 800e60a:	1c59      	adds	r1, r3, #1
 800e60c:	61b9      	str	r1, [r7, #24]
 800e60e:	005b      	lsls	r3, r3, #1
 800e610:	4413      	add	r3, r2
 800e612:	881b      	ldrh	r3, [r3, #0]
 800e614:	81fb      	strh	r3, [r7, #14]
 800e616:	89fb      	ldrh	r3, [r7, #14]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d1d7      	bne.n	800e5cc <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e61c:	683a      	ldr	r2, [r7, #0]
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	4413      	add	r3, r2
 800e622:	3316      	adds	r3, #22
 800e624:	2200      	movs	r2, #0
 800e626:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800e628:	2300      	movs	r3, #0
 800e62a:	61bb      	str	r3, [r7, #24]
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e630:	683a      	ldr	r2, [r7, #0]
 800e632:	69fb      	ldr	r3, [r7, #28]
 800e634:	4413      	add	r3, r2
 800e636:	3316      	adds	r3, #22
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800e63c:	e04c      	b.n	800e6d8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6a1a      	ldr	r2, [r3, #32]
 800e642:	69fb      	ldr	r3, [r7, #28]
 800e644:	1c59      	adds	r1, r3, #1
 800e646:	61f9      	str	r1, [r7, #28]
 800e648:	4413      	add	r3, r2
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e64e:	7dfb      	ldrb	r3, [r7, #23]
 800e650:	2b20      	cmp	r3, #32
 800e652:	d100      	bne.n	800e656 <get_fileinfo+0xbe>
 800e654:	e040      	b.n	800e6d8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e656:	7dfb      	ldrb	r3, [r7, #23]
 800e658:	2b05      	cmp	r3, #5
 800e65a:	d101      	bne.n	800e660 <get_fileinfo+0xc8>
 800e65c:	23e5      	movs	r3, #229	; 0xe5
 800e65e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	2b09      	cmp	r3, #9
 800e664:	d10f      	bne.n	800e686 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800e666:	89bb      	ldrh	r3, [r7, #12]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d105      	bne.n	800e678 <get_fileinfo+0xe0>
 800e66c:	683a      	ldr	r2, [r7, #0]
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	4413      	add	r3, r2
 800e672:	3316      	adds	r3, #22
 800e674:	222e      	movs	r2, #46	; 0x2e
 800e676:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	1c5a      	adds	r2, r3, #1
 800e67c:	61ba      	str	r2, [r7, #24]
 800e67e:	683a      	ldr	r2, [r7, #0]
 800e680:	4413      	add	r3, r2
 800e682:	222e      	movs	r2, #46	; 0x2e
 800e684:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800e686:	683a      	ldr	r2, [r7, #0]
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	4413      	add	r3, r2
 800e68c:	3309      	adds	r3, #9
 800e68e:	7dfa      	ldrb	r2, [r7, #23]
 800e690:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800e692:	89bb      	ldrh	r3, [r7, #12]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d11c      	bne.n	800e6d2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e698:	7dfb      	ldrb	r3, [r7, #23]
 800e69a:	2b40      	cmp	r3, #64	; 0x40
 800e69c:	d913      	bls.n	800e6c6 <get_fileinfo+0x12e>
 800e69e:	7dfb      	ldrb	r3, [r7, #23]
 800e6a0:	2b5a      	cmp	r3, #90	; 0x5a
 800e6a2:	d810      	bhi.n	800e6c6 <get_fileinfo+0x12e>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6a1b      	ldr	r3, [r3, #32]
 800e6a8:	330c      	adds	r3, #12
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	2b08      	cmp	r3, #8
 800e6b2:	d901      	bls.n	800e6b8 <get_fileinfo+0x120>
 800e6b4:	2310      	movs	r3, #16
 800e6b6:	e000      	b.n	800e6ba <get_fileinfo+0x122>
 800e6b8:	2308      	movs	r3, #8
 800e6ba:	4013      	ands	r3, r2
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d002      	beq.n	800e6c6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800e6c0:	7dfb      	ldrb	r3, [r7, #23]
 800e6c2:	3320      	adds	r3, #32
 800e6c4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800e6c6:	683a      	ldr	r2, [r7, #0]
 800e6c8:	69bb      	ldr	r3, [r7, #24]
 800e6ca:	4413      	add	r3, r2
 800e6cc:	3316      	adds	r3, #22
 800e6ce:	7dfa      	ldrb	r2, [r7, #23]
 800e6d0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	2b0a      	cmp	r3, #10
 800e6dc:	d9af      	bls.n	800e63e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800e6de:	89bb      	ldrh	r3, [r7, #12]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d10d      	bne.n	800e700 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800e6e4:	683a      	ldr	r2, [r7, #0]
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	4413      	add	r3, r2
 800e6ea:	3316      	adds	r3, #22
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a1b      	ldr	r3, [r3, #32]
 800e6f4:	330c      	adds	r3, #12
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d101      	bne.n	800e700 <get_fileinfo+0x168>
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e700:	683a      	ldr	r2, [r7, #0]
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	4413      	add	r3, r2
 800e706:	3309      	adds	r3, #9
 800e708:	2200      	movs	r2, #0
 800e70a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6a1b      	ldr	r3, [r3, #32]
 800e710:	7ada      	ldrb	r2, [r3, #11]
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6a1b      	ldr	r3, [r3, #32]
 800e71a:	331c      	adds	r3, #28
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7fe fc1f 	bl	800cf60 <ld_dword>
 800e722:	4602      	mov	r2, r0
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6a1b      	ldr	r3, [r3, #32]
 800e72c:	3316      	adds	r3, #22
 800e72e:	4618      	mov	r0, r3
 800e730:	f7fe fc16 	bl	800cf60 <ld_dword>
 800e734:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	b29a      	uxth	r2, r3
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	80da      	strh	r2, [r3, #6]
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	0c1b      	lsrs	r3, r3, #16
 800e742:	b29a      	uxth	r2, r3
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	809a      	strh	r2, [r3, #4]
 800e748:	e000      	b.n	800e74c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e74a:	bf00      	nop
}
 800e74c:	3720      	adds	r7, #32
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
	...

0800e754 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b08a      	sub	sp, #40	; 0x28
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	613b      	str	r3, [r7, #16]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	68db      	ldr	r3, [r3, #12]
 800e76a:	60fb      	str	r3, [r7, #12]
 800e76c:	2300      	movs	r3, #0
 800e76e:	617b      	str	r3, [r7, #20]
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	1c5a      	adds	r2, r3, #1
 800e778:	61ba      	str	r2, [r7, #24]
 800e77a:	693a      	ldr	r2, [r7, #16]
 800e77c:	4413      	add	r3, r2
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e784:	2b1f      	cmp	r3, #31
 800e786:	d940      	bls.n	800e80a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e78a:	2b2f      	cmp	r3, #47	; 0x2f
 800e78c:	d006      	beq.n	800e79c <create_name+0x48>
 800e78e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e790:	2b5c      	cmp	r3, #92	; 0x5c
 800e792:	d110      	bne.n	800e7b6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e794:	e002      	b.n	800e79c <create_name+0x48>
 800e796:	69bb      	ldr	r3, [r7, #24]
 800e798:	3301      	adds	r3, #1
 800e79a:	61bb      	str	r3, [r7, #24]
 800e79c:	693a      	ldr	r2, [r7, #16]
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	2b2f      	cmp	r3, #47	; 0x2f
 800e7a6:	d0f6      	beq.n	800e796 <create_name+0x42>
 800e7a8:	693a      	ldr	r2, [r7, #16]
 800e7aa:	69bb      	ldr	r3, [r7, #24]
 800e7ac:	4413      	add	r3, r2
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	2b5c      	cmp	r3, #92	; 0x5c
 800e7b2:	d0f0      	beq.n	800e796 <create_name+0x42>
			break;
 800e7b4:	e02a      	b.n	800e80c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	2bfe      	cmp	r3, #254	; 0xfe
 800e7ba:	d901      	bls.n	800e7c0 <create_name+0x6c>
 800e7bc:	2306      	movs	r3, #6
 800e7be:	e17d      	b.n	800eabc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e7c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e7c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7c8:	2101      	movs	r1, #1
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f001 faca 	bl	800fd64 <ff_convert>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e7d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d101      	bne.n	800e7de <create_name+0x8a>
 800e7da:	2306      	movs	r3, #6
 800e7dc:	e16e      	b.n	800eabc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e7de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7e0:	2b7f      	cmp	r3, #127	; 0x7f
 800e7e2:	d809      	bhi.n	800e7f8 <create_name+0xa4>
 800e7e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	488d      	ldr	r0, [pc, #564]	; (800ea20 <create_name+0x2cc>)
 800e7ea:	f7fe fc86 	bl	800d0fa <chk_chr>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d001      	beq.n	800e7f8 <create_name+0xa4>
 800e7f4:	2306      	movs	r3, #6
 800e7f6:	e161      	b.n	800eabc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	1c5a      	adds	r2, r3, #1
 800e7fc:	617a      	str	r2, [r7, #20]
 800e7fe:	005b      	lsls	r3, r3, #1
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	4413      	add	r3, r2
 800e804:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e806:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e808:	e7b4      	b.n	800e774 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e80a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e80c:	693a      	ldr	r2, [r7, #16]
 800e80e:	69bb      	ldr	r3, [r7, #24]
 800e810:	441a      	add	r2, r3
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e818:	2b1f      	cmp	r3, #31
 800e81a:	d801      	bhi.n	800e820 <create_name+0xcc>
 800e81c:	2304      	movs	r3, #4
 800e81e:	e000      	b.n	800e822 <create_name+0xce>
 800e820:	2300      	movs	r3, #0
 800e822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e826:	e011      	b.n	800e84c <create_name+0xf8>
		w = lfn[di - 1];
 800e828:	697a      	ldr	r2, [r7, #20]
 800e82a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e82e:	4413      	add	r3, r2
 800e830:	005b      	lsls	r3, r3, #1
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	4413      	add	r3, r2
 800e836:	881b      	ldrh	r3, [r3, #0]
 800e838:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e83a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e83c:	2b20      	cmp	r3, #32
 800e83e:	d002      	beq.n	800e846 <create_name+0xf2>
 800e840:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e842:	2b2e      	cmp	r3, #46	; 0x2e
 800e844:	d106      	bne.n	800e854 <create_name+0x100>
		di--;
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	3b01      	subs	r3, #1
 800e84a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1ea      	bne.n	800e828 <create_name+0xd4>
 800e852:	e000      	b.n	800e856 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e854:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	005b      	lsls	r3, r3, #1
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	4413      	add	r3, r2
 800e85e:	2200      	movs	r2, #0
 800e860:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d101      	bne.n	800e86c <create_name+0x118>
 800e868:	2306      	movs	r3, #6
 800e86a:	e127      	b.n	800eabc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	3324      	adds	r3, #36	; 0x24
 800e870:	220b      	movs	r2, #11
 800e872:	2120      	movs	r1, #32
 800e874:	4618      	mov	r0, r3
 800e876:	f7fe fbfe 	bl	800d076 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e87a:	2300      	movs	r3, #0
 800e87c:	61bb      	str	r3, [r7, #24]
 800e87e:	e002      	b.n	800e886 <create_name+0x132>
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	3301      	adds	r3, #1
 800e884:	61bb      	str	r3, [r7, #24]
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	005b      	lsls	r3, r3, #1
 800e88a:	68fa      	ldr	r2, [r7, #12]
 800e88c:	4413      	add	r3, r2
 800e88e:	881b      	ldrh	r3, [r3, #0]
 800e890:	2b20      	cmp	r3, #32
 800e892:	d0f5      	beq.n	800e880 <create_name+0x12c>
 800e894:	69bb      	ldr	r3, [r7, #24]
 800e896:	005b      	lsls	r3, r3, #1
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	4413      	add	r3, r2
 800e89c:	881b      	ldrh	r3, [r3, #0]
 800e89e:	2b2e      	cmp	r3, #46	; 0x2e
 800e8a0:	d0ee      	beq.n	800e880 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e8a2:	69bb      	ldr	r3, [r7, #24]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d009      	beq.n	800e8bc <create_name+0x168>
 800e8a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8ac:	f043 0303 	orr.w	r3, r3, #3
 800e8b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e8b4:	e002      	b.n	800e8bc <create_name+0x168>
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	3b01      	subs	r3, #1
 800e8ba:	617b      	str	r3, [r7, #20]
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d009      	beq.n	800e8d6 <create_name+0x182>
 800e8c2:	697a      	ldr	r2, [r7, #20]
 800e8c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e8c8:	4413      	add	r3, r2
 800e8ca:	005b      	lsls	r3, r3, #1
 800e8cc:	68fa      	ldr	r2, [r7, #12]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	881b      	ldrh	r3, [r3, #0]
 800e8d2:	2b2e      	cmp	r3, #46	; 0x2e
 800e8d4:	d1ef      	bne.n	800e8b6 <create_name+0x162>

	i = b = 0; ni = 8;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e8dc:	2300      	movs	r3, #0
 800e8de:	623b      	str	r3, [r7, #32]
 800e8e0:	2308      	movs	r3, #8
 800e8e2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e8e4:	69bb      	ldr	r3, [r7, #24]
 800e8e6:	1c5a      	adds	r2, r3, #1
 800e8e8:	61ba      	str	r2, [r7, #24]
 800e8ea:	005b      	lsls	r3, r3, #1
 800e8ec:	68fa      	ldr	r2, [r7, #12]
 800e8ee:	4413      	add	r3, r2
 800e8f0:	881b      	ldrh	r3, [r3, #0]
 800e8f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e8f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	f000 8090 	beq.w	800ea1c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e8fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8fe:	2b20      	cmp	r3, #32
 800e900:	d006      	beq.n	800e910 <create_name+0x1bc>
 800e902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e904:	2b2e      	cmp	r3, #46	; 0x2e
 800e906:	d10a      	bne.n	800e91e <create_name+0x1ca>
 800e908:	69ba      	ldr	r2, [r7, #24]
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d006      	beq.n	800e91e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e914:	f043 0303 	orr.w	r3, r3, #3
 800e918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e91c:	e07d      	b.n	800ea1a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e91e:	6a3a      	ldr	r2, [r7, #32]
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	429a      	cmp	r2, r3
 800e924:	d203      	bcs.n	800e92e <create_name+0x1da>
 800e926:	69ba      	ldr	r2, [r7, #24]
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d123      	bne.n	800e976 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	2b0b      	cmp	r3, #11
 800e932:	d106      	bne.n	800e942 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e938:	f043 0303 	orr.w	r3, r3, #3
 800e93c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e940:	e075      	b.n	800ea2e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e942:	69ba      	ldr	r2, [r7, #24]
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	429a      	cmp	r2, r3
 800e948:	d005      	beq.n	800e956 <create_name+0x202>
 800e94a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e94e:	f043 0303 	orr.w	r3, r3, #3
 800e952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e956:	69ba      	ldr	r2, [r7, #24]
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d866      	bhi.n	800ea2c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	61bb      	str	r3, [r7, #24]
 800e962:	2308      	movs	r3, #8
 800e964:	623b      	str	r3, [r7, #32]
 800e966:	230b      	movs	r3, #11
 800e968:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e96a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e96e:	009b      	lsls	r3, r3, #2
 800e970:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e974:	e051      	b.n	800ea1a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e978:	2b7f      	cmp	r3, #127	; 0x7f
 800e97a:	d914      	bls.n	800e9a6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e97c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e97e:	2100      	movs	r1, #0
 800e980:	4618      	mov	r0, r3
 800e982:	f001 f9ef 	bl	800fd64 <ff_convert>
 800e986:	4603      	mov	r3, r0
 800e988:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e98a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d004      	beq.n	800e99a <create_name+0x246>
 800e990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e992:	3b80      	subs	r3, #128	; 0x80
 800e994:	4a23      	ldr	r2, [pc, #140]	; (800ea24 <create_name+0x2d0>)
 800e996:	5cd3      	ldrb	r3, [r2, r3]
 800e998:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e99a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e99e:	f043 0302 	orr.w	r3, r3, #2
 800e9a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e9a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d007      	beq.n	800e9bc <create_name+0x268>
 800e9ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	481d      	ldr	r0, [pc, #116]	; (800ea28 <create_name+0x2d4>)
 800e9b2:	f7fe fba2 	bl	800d0fa <chk_chr>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d008      	beq.n	800e9ce <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e9bc:	235f      	movs	r3, #95	; 0x5f
 800e9be:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9c4:	f043 0303 	orr.w	r3, r3, #3
 800e9c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e9cc:	e01b      	b.n	800ea06 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e9ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9d0:	2b40      	cmp	r3, #64	; 0x40
 800e9d2:	d909      	bls.n	800e9e8 <create_name+0x294>
 800e9d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9d6:	2b5a      	cmp	r3, #90	; 0x5a
 800e9d8:	d806      	bhi.n	800e9e8 <create_name+0x294>
					b |= 2;
 800e9da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9de:	f043 0302 	orr.w	r3, r3, #2
 800e9e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e9e6:	e00e      	b.n	800ea06 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e9e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9ea:	2b60      	cmp	r3, #96	; 0x60
 800e9ec:	d90b      	bls.n	800ea06 <create_name+0x2b2>
 800e9ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9f0:	2b7a      	cmp	r3, #122	; 0x7a
 800e9f2:	d808      	bhi.n	800ea06 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e9f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9f8:	f043 0301 	orr.w	r3, r3, #1
 800e9fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ea00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea02:	3b20      	subs	r3, #32
 800ea04:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ea06:	6a3b      	ldr	r3, [r7, #32]
 800ea08:	1c5a      	adds	r2, r3, #1
 800ea0a:	623a      	str	r2, [r7, #32]
 800ea0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea0e:	b2d1      	uxtb	r1, r2
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	4413      	add	r3, r2
 800ea14:	460a      	mov	r2, r1
 800ea16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ea1a:	e763      	b.n	800e8e4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ea1c:	bf00      	nop
 800ea1e:	e006      	b.n	800ea2e <create_name+0x2da>
 800ea20:	08012298 	.word	0x08012298
 800ea24:	0801235c 	.word	0x0801235c
 800ea28:	080122a4 	.word	0x080122a4
			if (si > di) break;			/* No extension */
 800ea2c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ea34:	2be5      	cmp	r3, #229	; 0xe5
 800ea36:	d103      	bne.n	800ea40 <create_name+0x2ec>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2205      	movs	r2, #5
 800ea3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	2b08      	cmp	r3, #8
 800ea44:	d104      	bne.n	800ea50 <create_name+0x2fc>
 800ea46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ea50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea54:	f003 030c 	and.w	r3, r3, #12
 800ea58:	2b0c      	cmp	r3, #12
 800ea5a:	d005      	beq.n	800ea68 <create_name+0x314>
 800ea5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea60:	f003 0303 	and.w	r3, r3, #3
 800ea64:	2b03      	cmp	r3, #3
 800ea66:	d105      	bne.n	800ea74 <create_name+0x320>
 800ea68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea6c:	f043 0302 	orr.w	r3, r3, #2
 800ea70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ea74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea78:	f003 0302 	and.w	r3, r3, #2
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d117      	bne.n	800eab0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ea80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea84:	f003 0303 	and.w	r3, r3, #3
 800ea88:	2b01      	cmp	r3, #1
 800ea8a:	d105      	bne.n	800ea98 <create_name+0x344>
 800ea8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea90:	f043 0310 	orr.w	r3, r3, #16
 800ea94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ea98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea9c:	f003 030c 	and.w	r3, r3, #12
 800eaa0:	2b04      	cmp	r3, #4
 800eaa2:	d105      	bne.n	800eab0 <create_name+0x35c>
 800eaa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaa8:	f043 0308 	orr.w	r3, r3, #8
 800eaac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800eab6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800eaba:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3728      	adds	r7, #40	; 0x28
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b086      	sub	sp, #24
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ead8:	e002      	b.n	800eae0 <follow_path+0x1c>
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	3301      	adds	r3, #1
 800eade:	603b      	str	r3, [r7, #0]
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	2b2f      	cmp	r3, #47	; 0x2f
 800eae6:	d0f8      	beq.n	800eada <follow_path+0x16>
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	2b5c      	cmp	r3, #92	; 0x5c
 800eaee:	d0f4      	beq.n	800eada <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	2b1f      	cmp	r3, #31
 800eafc:	d80a      	bhi.n	800eb14 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2280      	movs	r2, #128	; 0x80
 800eb02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800eb06:	2100      	movs	r1, #0
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f7ff f83f 	bl	800db8c <dir_sdi>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	75fb      	strb	r3, [r7, #23]
 800eb12:	e043      	b.n	800eb9c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eb14:	463b      	mov	r3, r7
 800eb16:	4619      	mov	r1, r3
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f7ff fe1b 	bl	800e754 <create_name>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eb22:	7dfb      	ldrb	r3, [r7, #23]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d134      	bne.n	800eb92 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f7ff fb7c 	bl	800e226 <dir_find>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eb3a:	7dfb      	ldrb	r3, [r7, #23]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00a      	beq.n	800eb56 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eb40:	7dfb      	ldrb	r3, [r7, #23]
 800eb42:	2b04      	cmp	r3, #4
 800eb44:	d127      	bne.n	800eb96 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eb46:	7afb      	ldrb	r3, [r7, #11]
 800eb48:	f003 0304 	and.w	r3, r3, #4
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d122      	bne.n	800eb96 <follow_path+0xd2>
 800eb50:	2305      	movs	r3, #5
 800eb52:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eb54:	e01f      	b.n	800eb96 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eb56:	7afb      	ldrb	r3, [r7, #11]
 800eb58:	f003 0304 	and.w	r3, r3, #4
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d11c      	bne.n	800eb9a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	799b      	ldrb	r3, [r3, #6]
 800eb64:	f003 0310 	and.w	r3, r3, #16
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d102      	bne.n	800eb72 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800eb6c:	2305      	movs	r3, #5
 800eb6e:	75fb      	strb	r3, [r7, #23]
 800eb70:	e014      	b.n	800eb9c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	695b      	ldr	r3, [r3, #20]
 800eb7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb80:	4413      	add	r3, r2
 800eb82:	4619      	mov	r1, r3
 800eb84:	68f8      	ldr	r0, [r7, #12]
 800eb86:	f7ff f988 	bl	800de9a <ld_clust>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eb90:	e7c0      	b.n	800eb14 <follow_path+0x50>
			if (res != FR_OK) break;
 800eb92:	bf00      	nop
 800eb94:	e002      	b.n	800eb9c <follow_path+0xd8>
				break;
 800eb96:	bf00      	nop
 800eb98:	e000      	b.n	800eb9c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eb9a:	bf00      	nop
			}
		}
	}

	return res;
 800eb9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3718      	adds	r7, #24
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800eba6:	b480      	push	{r7}
 800eba8:	b087      	sub	sp, #28
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ebae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ebb2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d031      	beq.n	800ec20 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	617b      	str	r3, [r7, #20]
 800ebc2:	e002      	b.n	800ebca <get_ldnumber+0x24>
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	617b      	str	r3, [r7, #20]
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	2b1f      	cmp	r3, #31
 800ebd0:	d903      	bls.n	800ebda <get_ldnumber+0x34>
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	2b3a      	cmp	r3, #58	; 0x3a
 800ebd8:	d1f4      	bne.n	800ebc4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	2b3a      	cmp	r3, #58	; 0x3a
 800ebe0:	d11c      	bne.n	800ec1c <get_ldnumber+0x76>
			tp = *path;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	1c5a      	adds	r2, r3, #1
 800ebec:	60fa      	str	r2, [r7, #12]
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	3b30      	subs	r3, #48	; 0x30
 800ebf2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	2b09      	cmp	r3, #9
 800ebf8:	d80e      	bhi.n	800ec18 <get_ldnumber+0x72>
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d10a      	bne.n	800ec18 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d107      	bne.n	800ec18 <get_ldnumber+0x72>
					vol = (int)i;
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	3301      	adds	r3, #1
 800ec10:	617b      	str	r3, [r7, #20]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	697a      	ldr	r2, [r7, #20]
 800ec16:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	e002      	b.n	800ec22 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ec20:	693b      	ldr	r3, [r7, #16]
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	371c      	adds	r7, #28
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr
	...

0800ec30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b082      	sub	sp, #8
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	70da      	strb	r2, [r3, #3]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec46:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ec48:	6839      	ldr	r1, [r7, #0]
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f7fe fc20 	bl	800d490 <move_window>
 800ec50:	4603      	mov	r3, r0
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d001      	beq.n	800ec5a <check_fs+0x2a>
 800ec56:	2304      	movs	r3, #4
 800ec58:	e038      	b.n	800eccc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	3334      	adds	r3, #52	; 0x34
 800ec5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7fe f964 	bl	800cf30 <ld_word>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d001      	beq.n	800ec78 <check_fs+0x48>
 800ec74:	2303      	movs	r3, #3
 800ec76:	e029      	b.n	800eccc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec7e:	2be9      	cmp	r3, #233	; 0xe9
 800ec80:	d009      	beq.n	800ec96 <check_fs+0x66>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec88:	2beb      	cmp	r3, #235	; 0xeb
 800ec8a:	d11e      	bne.n	800ecca <check_fs+0x9a>
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ec92:	2b90      	cmp	r3, #144	; 0x90
 800ec94:	d119      	bne.n	800ecca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	3334      	adds	r3, #52	; 0x34
 800ec9a:	3336      	adds	r3, #54	; 0x36
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7fe f95f 	bl	800cf60 <ld_dword>
 800eca2:	4603      	mov	r3, r0
 800eca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800eca8:	4a0a      	ldr	r2, [pc, #40]	; (800ecd4 <check_fs+0xa4>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d101      	bne.n	800ecb2 <check_fs+0x82>
 800ecae:	2300      	movs	r3, #0
 800ecb0:	e00c      	b.n	800eccc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	3334      	adds	r3, #52	; 0x34
 800ecb6:	3352      	adds	r3, #82	; 0x52
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7fe f951 	bl	800cf60 <ld_dword>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	4a05      	ldr	r2, [pc, #20]	; (800ecd8 <check_fs+0xa8>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d101      	bne.n	800ecca <check_fs+0x9a>
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	e000      	b.n	800eccc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ecca:	2302      	movs	r3, #2
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3708      	adds	r7, #8
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	00544146 	.word	0x00544146
 800ecd8:	33544146 	.word	0x33544146

0800ecdc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b096      	sub	sp, #88	; 0x58
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	4613      	mov	r3, r2
 800ece8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	2200      	movs	r2, #0
 800ecee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ecf0:	68f8      	ldr	r0, [r7, #12]
 800ecf2:	f7ff ff58 	bl	800eba6 <get_ldnumber>
 800ecf6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ecf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	da01      	bge.n	800ed02 <find_volume+0x26>
 800ecfe:	230b      	movs	r3, #11
 800ed00:	e230      	b.n	800f164 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ed02:	4aa1      	ldr	r2, [pc, #644]	; (800ef88 <find_volume+0x2ac>)
 800ed04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ed0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d101      	bne.n	800ed16 <find_volume+0x3a>
 800ed12:	230c      	movs	r3, #12
 800ed14:	e226      	b.n	800f164 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ed1c:	79fb      	ldrb	r3, [r7, #7]
 800ed1e:	f023 0301 	bic.w	r3, r3, #1
 800ed22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ed24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d01a      	beq.n	800ed62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ed2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2e:	785b      	ldrb	r3, [r3, #1]
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7fe f85f 	bl	800cdf4 <disk_status>
 800ed36:	4603      	mov	r3, r0
 800ed38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ed3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed40:	f003 0301 	and.w	r3, r3, #1
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d10c      	bne.n	800ed62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ed48:	79fb      	ldrb	r3, [r7, #7]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d007      	beq.n	800ed5e <find_volume+0x82>
 800ed4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed52:	f003 0304 	and.w	r3, r3, #4
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d001      	beq.n	800ed5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ed5a:	230a      	movs	r3, #10
 800ed5c:	e202      	b.n	800f164 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800ed5e:	2300      	movs	r3, #0
 800ed60:	e200      	b.n	800f164 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ed62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed64:	2200      	movs	r2, #0
 800ed66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ed68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed6a:	b2da      	uxtb	r2, r3
 800ed6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ed70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed72:	785b      	ldrb	r3, [r3, #1]
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7fe f857 	bl	800ce28 <disk_initialize>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ed80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed84:	f003 0301 	and.w	r3, r3, #1
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d001      	beq.n	800ed90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ed8c:	2303      	movs	r3, #3
 800ed8e:	e1e9      	b.n	800f164 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ed90:	79fb      	ldrb	r3, [r7, #7]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d007      	beq.n	800eda6 <find_volume+0xca>
 800ed96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed9a:	f003 0304 	and.w	r3, r3, #4
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d001      	beq.n	800eda6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800eda2:	230a      	movs	r3, #10
 800eda4:	e1de      	b.n	800f164 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800eda6:	2300      	movs	r3, #0
 800eda8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800edaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800edac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800edae:	f7ff ff3f 	bl	800ec30 <check_fs>
 800edb2:	4603      	mov	r3, r0
 800edb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800edb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d149      	bne.n	800ee54 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800edc0:	2300      	movs	r3, #0
 800edc2:	643b      	str	r3, [r7, #64]	; 0x40
 800edc4:	e01e      	b.n	800ee04 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800edc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800edcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edce:	011b      	lsls	r3, r3, #4
 800edd0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800edd4:	4413      	add	r3, r2
 800edd6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800edd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edda:	3304      	adds	r3, #4
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d006      	beq.n	800edf0 <find_volume+0x114>
 800ede2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede4:	3308      	adds	r3, #8
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7fe f8ba 	bl	800cf60 <ld_dword>
 800edec:	4602      	mov	r2, r0
 800edee:	e000      	b.n	800edf2 <find_volume+0x116>
 800edf0:	2200      	movs	r2, #0
 800edf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	3358      	adds	r3, #88	; 0x58
 800edf8:	443b      	add	r3, r7
 800edfa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800edfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee00:	3301      	adds	r3, #1
 800ee02:	643b      	str	r3, [r7, #64]	; 0x40
 800ee04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee06:	2b03      	cmp	r3, #3
 800ee08:	d9dd      	bls.n	800edc6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ee0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d002      	beq.n	800ee1a <find_volume+0x13e>
 800ee14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee16:	3b01      	subs	r3, #1
 800ee18:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ee1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	3358      	adds	r3, #88	; 0x58
 800ee20:	443b      	add	r3, r7
 800ee22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ee26:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ee28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d005      	beq.n	800ee3a <find_volume+0x15e>
 800ee2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ee30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee32:	f7ff fefd 	bl	800ec30 <check_fs>
 800ee36:	4603      	mov	r3, r0
 800ee38:	e000      	b.n	800ee3c <find_volume+0x160>
 800ee3a:	2303      	movs	r3, #3
 800ee3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ee40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d905      	bls.n	800ee54 <find_volume+0x178>
 800ee48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	643b      	str	r3, [r7, #64]	; 0x40
 800ee4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee50:	2b03      	cmp	r3, #3
 800ee52:	d9e2      	bls.n	800ee1a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ee54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee58:	2b04      	cmp	r3, #4
 800ee5a:	d101      	bne.n	800ee60 <find_volume+0x184>
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e181      	b.n	800f164 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ee60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d901      	bls.n	800ee6c <find_volume+0x190>
 800ee68:	230d      	movs	r3, #13
 800ee6a:	e17b      	b.n	800f164 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ee6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6e:	3334      	adds	r3, #52	; 0x34
 800ee70:	330b      	adds	r3, #11
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7fe f85c 	bl	800cf30 <ld_word>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee7e:	d001      	beq.n	800ee84 <find_volume+0x1a8>
 800ee80:	230d      	movs	r3, #13
 800ee82:	e16f      	b.n	800f164 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ee84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee86:	3334      	adds	r3, #52	; 0x34
 800ee88:	3316      	adds	r3, #22
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fe f850 	bl	800cf30 <ld_word>
 800ee90:	4603      	mov	r3, r0
 800ee92:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ee94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d106      	bne.n	800eea8 <find_volume+0x1cc>
 800ee9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9c:	3334      	adds	r3, #52	; 0x34
 800ee9e:	3324      	adds	r3, #36	; 0x24
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7fe f85d 	bl	800cf60 <ld_dword>
 800eea6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800eea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eeac:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800eeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800eeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800eeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeba:	789b      	ldrb	r3, [r3, #2]
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d005      	beq.n	800eecc <find_volume+0x1f0>
 800eec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec2:	789b      	ldrb	r3, [r3, #2]
 800eec4:	2b02      	cmp	r3, #2
 800eec6:	d001      	beq.n	800eecc <find_volume+0x1f0>
 800eec8:	230d      	movs	r3, #13
 800eeca:	e14b      	b.n	800f164 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800eecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eece:	789b      	ldrb	r3, [r3, #2]
 800eed0:	461a      	mov	r2, r3
 800eed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eed4:	fb02 f303 	mul.w	r3, r2, r3
 800eed8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800eeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eedc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eee0:	b29a      	uxth	r2, r3
 800eee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800eee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee8:	895b      	ldrh	r3, [r3, #10]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d008      	beq.n	800ef00 <find_volume+0x224>
 800eeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef0:	895b      	ldrh	r3, [r3, #10]
 800eef2:	461a      	mov	r2, r3
 800eef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef6:	895b      	ldrh	r3, [r3, #10]
 800eef8:	3b01      	subs	r3, #1
 800eefa:	4013      	ands	r3, r2
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d001      	beq.n	800ef04 <find_volume+0x228>
 800ef00:	230d      	movs	r3, #13
 800ef02:	e12f      	b.n	800f164 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ef04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef06:	3334      	adds	r3, #52	; 0x34
 800ef08:	3311      	adds	r3, #17
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7fe f810 	bl	800cf30 <ld_word>
 800ef10:	4603      	mov	r3, r0
 800ef12:	461a      	mov	r2, r3
 800ef14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ef18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1a:	891b      	ldrh	r3, [r3, #8]
 800ef1c:	f003 030f 	and.w	r3, r3, #15
 800ef20:	b29b      	uxth	r3, r3
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d001      	beq.n	800ef2a <find_volume+0x24e>
 800ef26:	230d      	movs	r3, #13
 800ef28:	e11c      	b.n	800f164 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ef2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef2c:	3334      	adds	r3, #52	; 0x34
 800ef2e:	3313      	adds	r3, #19
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7fd fffd 	bl	800cf30 <ld_word>
 800ef36:	4603      	mov	r3, r0
 800ef38:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ef3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d106      	bne.n	800ef4e <find_volume+0x272>
 800ef40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef42:	3334      	adds	r3, #52	; 0x34
 800ef44:	3320      	adds	r3, #32
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7fe f80a 	bl	800cf60 <ld_dword>
 800ef4c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ef4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef50:	3334      	adds	r3, #52	; 0x34
 800ef52:	330e      	adds	r3, #14
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7fd ffeb 	bl	800cf30 <ld_word>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ef5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d101      	bne.n	800ef68 <find_volume+0x28c>
 800ef64:	230d      	movs	r3, #13
 800ef66:	e0fd      	b.n	800f164 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ef68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef6c:	4413      	add	r3, r2
 800ef6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef70:	8912      	ldrh	r2, [r2, #8]
 800ef72:	0912      	lsrs	r2, r2, #4
 800ef74:	b292      	uxth	r2, r2
 800ef76:	4413      	add	r3, r2
 800ef78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ef7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d204      	bcs.n	800ef8c <find_volume+0x2b0>
 800ef82:	230d      	movs	r3, #13
 800ef84:	e0ee      	b.n	800f164 <find_volume+0x488>
 800ef86:	bf00      	nop
 800ef88:	2004a9ac 	.word	0x2004a9ac
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ef8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef90:	1ad3      	subs	r3, r2, r3
 800ef92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef94:	8952      	ldrh	r2, [r2, #10]
 800ef96:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef9a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ef9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d101      	bne.n	800efa6 <find_volume+0x2ca>
 800efa2:	230d      	movs	r3, #13
 800efa4:	e0de      	b.n	800f164 <find_volume+0x488>
		fmt = FS_FAT32;
 800efa6:	2303      	movs	r3, #3
 800efa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800efac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800efb2:	4293      	cmp	r3, r2
 800efb4:	d802      	bhi.n	800efbc <find_volume+0x2e0>
 800efb6:	2302      	movs	r3, #2
 800efb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800efbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efbe:	f640 72f5 	movw	r2, #4085	; 0xff5
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d802      	bhi.n	800efcc <find_volume+0x2f0>
 800efc6:	2301      	movs	r3, #1
 800efc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800efcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efce:	1c9a      	adds	r2, r3, #2
 800efd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800efd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800efd8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800efda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800efdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efde:	441a      	add	r2, r3
 800efe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800efe4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800efe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe8:	441a      	add	r2, r3
 800efea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efec:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800efee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eff2:	2b03      	cmp	r3, #3
 800eff4:	d11e      	bne.n	800f034 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800eff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff8:	3334      	adds	r3, #52	; 0x34
 800effa:	332a      	adds	r3, #42	; 0x2a
 800effc:	4618      	mov	r0, r3
 800effe:	f7fd ff97 	bl	800cf30 <ld_word>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d001      	beq.n	800f00c <find_volume+0x330>
 800f008:	230d      	movs	r3, #13
 800f00a:	e0ab      	b.n	800f164 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00e:	891b      	ldrh	r3, [r3, #8]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d001      	beq.n	800f018 <find_volume+0x33c>
 800f014:	230d      	movs	r3, #13
 800f016:	e0a5      	b.n	800f164 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01a:	3334      	adds	r3, #52	; 0x34
 800f01c:	332c      	adds	r3, #44	; 0x2c
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fd ff9e 	bl	800cf60 <ld_dword>
 800f024:	4602      	mov	r2, r0
 800f026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f028:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02c:	699b      	ldr	r3, [r3, #24]
 800f02e:	009b      	lsls	r3, r3, #2
 800f030:	647b      	str	r3, [r7, #68]	; 0x44
 800f032:	e01f      	b.n	800f074 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f036:	891b      	ldrh	r3, [r3, #8]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d101      	bne.n	800f040 <find_volume+0x364>
 800f03c:	230d      	movs	r3, #13
 800f03e:	e091      	b.n	800f164 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f046:	441a      	add	r2, r3
 800f048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f04c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f050:	2b02      	cmp	r3, #2
 800f052:	d103      	bne.n	800f05c <find_volume+0x380>
 800f054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f056:	699b      	ldr	r3, [r3, #24]
 800f058:	005b      	lsls	r3, r3, #1
 800f05a:	e00a      	b.n	800f072 <find_volume+0x396>
 800f05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05e:	699a      	ldr	r2, [r3, #24]
 800f060:	4613      	mov	r3, r2
 800f062:	005b      	lsls	r3, r3, #1
 800f064:	4413      	add	r3, r2
 800f066:	085a      	lsrs	r2, r3, #1
 800f068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06a:	699b      	ldr	r3, [r3, #24]
 800f06c:	f003 0301 	and.w	r3, r3, #1
 800f070:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f072:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f076:	69da      	ldr	r2, [r3, #28]
 800f078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f07a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f07e:	0a5b      	lsrs	r3, r3, #9
 800f080:	429a      	cmp	r2, r3
 800f082:	d201      	bcs.n	800f088 <find_volume+0x3ac>
 800f084:	230d      	movs	r3, #13
 800f086:	e06d      	b.n	800f164 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f08e:	615a      	str	r2, [r3, #20]
 800f090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f092:	695a      	ldr	r2, [r3, #20]
 800f094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f096:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09a:	2280      	movs	r2, #128	; 0x80
 800f09c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f09e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f0a2:	2b03      	cmp	r3, #3
 800f0a4:	d149      	bne.n	800f13a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a8:	3334      	adds	r3, #52	; 0x34
 800f0aa:	3330      	adds	r3, #48	; 0x30
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7fd ff3f 	bl	800cf30 <ld_word>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b01      	cmp	r3, #1
 800f0b6:	d140      	bne.n	800f13a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f0b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	4619      	mov	r1, r3
 800f0be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f0c0:	f7fe f9e6 	bl	800d490 <move_window>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d137      	bne.n	800f13a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d2:	3334      	adds	r3, #52	; 0x34
 800f0d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7fd ff29 	bl	800cf30 <ld_word>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d127      	bne.n	800f13a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ec:	3334      	adds	r3, #52	; 0x34
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fd ff36 	bl	800cf60 <ld_dword>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	4a1d      	ldr	r2, [pc, #116]	; (800f16c <find_volume+0x490>)
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d11e      	bne.n	800f13a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fe:	3334      	adds	r3, #52	; 0x34
 800f100:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f104:	4618      	mov	r0, r3
 800f106:	f7fd ff2b 	bl	800cf60 <ld_dword>
 800f10a:	4603      	mov	r3, r0
 800f10c:	4a18      	ldr	r2, [pc, #96]	; (800f170 <find_volume+0x494>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d113      	bne.n	800f13a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f114:	3334      	adds	r3, #52	; 0x34
 800f116:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7fd ff20 	bl	800cf60 <ld_dword>
 800f120:	4602      	mov	r2, r0
 800f122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f124:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f128:	3334      	adds	r3, #52	; 0x34
 800f12a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f12e:	4618      	mov	r0, r3
 800f130:	f7fd ff16 	bl	800cf60 <ld_dword>
 800f134:	4602      	mov	r2, r0
 800f136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f138:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f13c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f140:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f142:	4b0c      	ldr	r3, [pc, #48]	; (800f174 <find_volume+0x498>)
 800f144:	881b      	ldrh	r3, [r3, #0]
 800f146:	3301      	adds	r3, #1
 800f148:	b29a      	uxth	r2, r3
 800f14a:	4b0a      	ldr	r3, [pc, #40]	; (800f174 <find_volume+0x498>)
 800f14c:	801a      	strh	r2, [r3, #0]
 800f14e:	4b09      	ldr	r3, [pc, #36]	; (800f174 <find_volume+0x498>)
 800f150:	881a      	ldrh	r2, [r3, #0]
 800f152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f154:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f158:	4a07      	ldr	r2, [pc, #28]	; (800f178 <find_volume+0x49c>)
 800f15a:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f15c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f15e:	f7fe f92f 	bl	800d3c0 <clear_lock>
#endif
	return FR_OK;
 800f162:	2300      	movs	r3, #0
}
 800f164:	4618      	mov	r0, r3
 800f166:	3758      	adds	r7, #88	; 0x58
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	41615252 	.word	0x41615252
 800f170:	61417272 	.word	0x61417272
 800f174:	2004a9b0 	.word	0x2004a9b0
 800f178:	2004a9d4 	.word	0x2004a9d4

0800f17c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b084      	sub	sp, #16
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f186:	2309      	movs	r3, #9
 800f188:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d01c      	beq.n	800f1ca <validate+0x4e>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d018      	beq.n	800f1ca <validate+0x4e>
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d013      	beq.n	800f1ca <validate+0x4e>
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	889a      	ldrh	r2, [r3, #4]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	88db      	ldrh	r3, [r3, #6]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d10c      	bne.n	800f1ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	785b      	ldrb	r3, [r3, #1]
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7fd fe1c 	bl	800cdf4 <disk_status>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	f003 0301 	and.w	r3, r3, #1
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d101      	bne.n	800f1ca <validate+0x4e>
			res = FR_OK;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f1ca:	7bfb      	ldrb	r3, [r7, #15]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d102      	bne.n	800f1d6 <validate+0x5a>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	e000      	b.n	800f1d8 <validate+0x5c>
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	683a      	ldr	r2, [r7, #0]
 800f1da:	6013      	str	r3, [r2, #0]
	return res;
 800f1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3710      	adds	r7, #16
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
	...

0800f1e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b088      	sub	sp, #32
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	60f8      	str	r0, [r7, #12]
 800f1f0:	60b9      	str	r1, [r7, #8]
 800f1f2:	4613      	mov	r3, r2
 800f1f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f1fa:	f107 0310 	add.w	r3, r7, #16
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7ff fcd1 	bl	800eba6 <get_ldnumber>
 800f204:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	da01      	bge.n	800f210 <f_mount+0x28>
 800f20c:	230b      	movs	r3, #11
 800f20e:	e02b      	b.n	800f268 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f210:	4a17      	ldr	r2, [pc, #92]	; (800f270 <f_mount+0x88>)
 800f212:	69fb      	ldr	r3, [r7, #28]
 800f214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f218:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f21a:	69bb      	ldr	r3, [r7, #24]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d005      	beq.n	800f22c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f220:	69b8      	ldr	r0, [r7, #24]
 800f222:	f7fe f8cd 	bl	800d3c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f226:	69bb      	ldr	r3, [r7, #24]
 800f228:	2200      	movs	r2, #0
 800f22a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d002      	beq.n	800f238 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2200      	movs	r2, #0
 800f236:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f238:	68fa      	ldr	r2, [r7, #12]
 800f23a:	490d      	ldr	r1, [pc, #52]	; (800f270 <f_mount+0x88>)
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d002      	beq.n	800f24e <f_mount+0x66>
 800f248:	79fb      	ldrb	r3, [r7, #7]
 800f24a:	2b01      	cmp	r3, #1
 800f24c:	d001      	beq.n	800f252 <f_mount+0x6a>
 800f24e:	2300      	movs	r3, #0
 800f250:	e00a      	b.n	800f268 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f252:	f107 010c 	add.w	r1, r7, #12
 800f256:	f107 0308 	add.w	r3, r7, #8
 800f25a:	2200      	movs	r2, #0
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7ff fd3d 	bl	800ecdc <find_volume>
 800f262:	4603      	mov	r3, r0
 800f264:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f266:	7dfb      	ldrb	r3, [r7, #23]
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3720      	adds	r7, #32
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	2004a9ac 	.word	0x2004a9ac

0800f274 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b09a      	sub	sp, #104	; 0x68
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	4613      	mov	r3, r2
 800f280:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d101      	bne.n	800f28c <f_open+0x18>
 800f288:	2309      	movs	r3, #9
 800f28a:	e1ad      	b.n	800f5e8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f28c:	79fb      	ldrb	r3, [r7, #7]
 800f28e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f292:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f294:	79fa      	ldrb	r2, [r7, #7]
 800f296:	f107 0114 	add.w	r1, r7, #20
 800f29a:	f107 0308 	add.w	r3, r7, #8
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7ff fd1c 	bl	800ecdc <find_volume>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f2aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	f040 8191 	bne.w	800f5d6 <f_open+0x362>
		dj.obj.fs = fs;
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f2b8:	68ba      	ldr	r2, [r7, #8]
 800f2ba:	f107 0318 	add.w	r3, r7, #24
 800f2be:	4611      	mov	r1, r2
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7ff fbff 	bl	800eac4 <follow_path>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f2cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d11a      	bne.n	800f30a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f2d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f2d8:	b25b      	sxtb	r3, r3
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	da03      	bge.n	800f2e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f2de:	2306      	movs	r3, #6
 800f2e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f2e4:	e011      	b.n	800f30a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f2e6:	79fb      	ldrb	r3, [r7, #7]
 800f2e8:	f023 0301 	bic.w	r3, r3, #1
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	bf14      	ite	ne
 800f2f0:	2301      	movne	r3, #1
 800f2f2:	2300      	moveq	r3, #0
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	461a      	mov	r2, r3
 800f2f8:	f107 0318 	add.w	r3, r7, #24
 800f2fc:	4611      	mov	r1, r2
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fd ff16 	bl	800d130 <chk_lock>
 800f304:	4603      	mov	r3, r0
 800f306:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f30a:	79fb      	ldrb	r3, [r7, #7]
 800f30c:	f003 031c 	and.w	r3, r3, #28
 800f310:	2b00      	cmp	r3, #0
 800f312:	d07f      	beq.n	800f414 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f314:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d017      	beq.n	800f34c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f31c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f320:	2b04      	cmp	r3, #4
 800f322:	d10e      	bne.n	800f342 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f324:	f7fd ff60 	bl	800d1e8 <enq_lock>
 800f328:	4603      	mov	r3, r0
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d006      	beq.n	800f33c <f_open+0xc8>
 800f32e:	f107 0318 	add.w	r3, r7, #24
 800f332:	4618      	mov	r0, r3
 800f334:	f7ff f838 	bl	800e3a8 <dir_register>
 800f338:	4603      	mov	r3, r0
 800f33a:	e000      	b.n	800f33e <f_open+0xca>
 800f33c:	2312      	movs	r3, #18
 800f33e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f342:	79fb      	ldrb	r3, [r7, #7]
 800f344:	f043 0308 	orr.w	r3, r3, #8
 800f348:	71fb      	strb	r3, [r7, #7]
 800f34a:	e010      	b.n	800f36e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f34c:	7fbb      	ldrb	r3, [r7, #30]
 800f34e:	f003 0311 	and.w	r3, r3, #17
 800f352:	2b00      	cmp	r3, #0
 800f354:	d003      	beq.n	800f35e <f_open+0xea>
					res = FR_DENIED;
 800f356:	2307      	movs	r3, #7
 800f358:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f35c:	e007      	b.n	800f36e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f35e:	79fb      	ldrb	r3, [r7, #7]
 800f360:	f003 0304 	and.w	r3, r3, #4
 800f364:	2b00      	cmp	r3, #0
 800f366:	d002      	beq.n	800f36e <f_open+0xfa>
 800f368:	2308      	movs	r3, #8
 800f36a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f36e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f372:	2b00      	cmp	r3, #0
 800f374:	d168      	bne.n	800f448 <f_open+0x1d4>
 800f376:	79fb      	ldrb	r3, [r7, #7]
 800f378:	f003 0308 	and.w	r3, r3, #8
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d063      	beq.n	800f448 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f380:	f7fb fb0a 	bl	800a998 <get_fattime>
 800f384:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f388:	330e      	adds	r3, #14
 800f38a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fd fe25 	bl	800cfdc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f394:	3316      	adds	r3, #22
 800f396:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f398:	4618      	mov	r0, r3
 800f39a:	f7fd fe1f 	bl	800cfdc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a0:	330b      	adds	r3, #11
 800f3a2:	2220      	movs	r2, #32
 800f3a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3aa:	4611      	mov	r1, r2
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7fe fd74 	bl	800de9a <ld_clust>
 800f3b2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f7fe fd8c 	bl	800ded8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3c2:	331c      	adds	r3, #28
 800f3c4:	2100      	movs	r1, #0
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7fd fe08 	bl	800cfdc <st_dword>
					fs->wflag = 1;
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f3d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d037      	beq.n	800f448 <f_open+0x1d4>
						dw = fs->winsect;
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3dc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f3de:	f107 0318 	add.w	r3, r7, #24
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fe fa9f 	bl	800d92a <remove_chain>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f3f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d126      	bne.n	800f448 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7fe f846 	bl	800d490 <move_window>
 800f404:	4603      	mov	r3, r0
 800f406:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f40e:	3a01      	subs	r2, #1
 800f410:	611a      	str	r2, [r3, #16]
 800f412:	e019      	b.n	800f448 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f414:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d115      	bne.n	800f448 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f41c:	7fbb      	ldrb	r3, [r7, #30]
 800f41e:	f003 0310 	and.w	r3, r3, #16
 800f422:	2b00      	cmp	r3, #0
 800f424:	d003      	beq.n	800f42e <f_open+0x1ba>
					res = FR_NO_FILE;
 800f426:	2304      	movs	r3, #4
 800f428:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f42c:	e00c      	b.n	800f448 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f42e:	79fb      	ldrb	r3, [r7, #7]
 800f430:	f003 0302 	and.w	r3, r3, #2
 800f434:	2b00      	cmp	r3, #0
 800f436:	d007      	beq.n	800f448 <f_open+0x1d4>
 800f438:	7fbb      	ldrb	r3, [r7, #30]
 800f43a:	f003 0301 	and.w	r3, r3, #1
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d002      	beq.n	800f448 <f_open+0x1d4>
						res = FR_DENIED;
 800f442:	2307      	movs	r3, #7
 800f444:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f448:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d128      	bne.n	800f4a2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f450:	79fb      	ldrb	r3, [r7, #7]
 800f452:	f003 0308 	and.w	r3, r3, #8
 800f456:	2b00      	cmp	r3, #0
 800f458:	d003      	beq.n	800f462 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f45a:	79fb      	ldrb	r3, [r7, #7]
 800f45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f460:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f46a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f470:	79fb      	ldrb	r3, [r7, #7]
 800f472:	f023 0301 	bic.w	r3, r3, #1
 800f476:	2b00      	cmp	r3, #0
 800f478:	bf14      	ite	ne
 800f47a:	2301      	movne	r3, #1
 800f47c:	2300      	moveq	r3, #0
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	461a      	mov	r2, r3
 800f482:	f107 0318 	add.w	r3, r7, #24
 800f486:	4611      	mov	r1, r2
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fd fecf 	bl	800d22c <inc_lock>
 800f48e:	4602      	mov	r2, r0
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	691b      	ldr	r3, [r3, #16]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d102      	bne.n	800f4a2 <f_open+0x22e>
 800f49c:	2302      	movs	r3, #2
 800f49e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f4a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f040 8095 	bne.w	800f5d6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4b0:	4611      	mov	r1, r2
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fe fcf1 	bl	800de9a <ld_clust>
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c0:	331c      	adds	r3, #28
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fd fd4c 	bl	800cf60 <ld_dword>
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f4d4:	697a      	ldr	r2, [r7, #20]
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	88da      	ldrh	r2, [r3, #6]
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	79fa      	ldrb	r2, [r7, #7]
 800f4e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	3330      	adds	r3, #48	; 0x30
 800f4fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f502:	2100      	movs	r1, #0
 800f504:	4618      	mov	r0, r3
 800f506:	f7fd fdb6 	bl	800d076 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f50a:	79fb      	ldrb	r3, [r7, #7]
 800f50c:	f003 0320 	and.w	r3, r3, #32
 800f510:	2b00      	cmp	r3, #0
 800f512:	d060      	beq.n	800f5d6 <f_open+0x362>
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	68db      	ldr	r3, [r3, #12]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d05c      	beq.n	800f5d6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	68da      	ldr	r2, [r3, #12]
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	895b      	ldrh	r3, [r3, #10]
 800f528:	025b      	lsls	r3, r3, #9
 800f52a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	68db      	ldr	r3, [r3, #12]
 800f536:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f538:	e016      	b.n	800f568 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fe f861 	bl	800d606 <get_fat>
 800f544:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f548:	2b01      	cmp	r3, #1
 800f54a:	d802      	bhi.n	800f552 <f_open+0x2de>
 800f54c:	2302      	movs	r3, #2
 800f54e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f558:	d102      	bne.n	800f560 <f_open+0x2ec>
 800f55a:	2301      	movs	r3, #1
 800f55c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f560:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f564:	1ad3      	subs	r3, r2, r3
 800f566:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f568:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d103      	bne.n	800f578 <f_open+0x304>
 800f570:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f574:	429a      	cmp	r2, r3
 800f576:	d8e0      	bhi.n	800f53a <f_open+0x2c6>
				}
				fp->clust = clst;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f57c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f57e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f582:	2b00      	cmp	r3, #0
 800f584:	d127      	bne.n	800f5d6 <f_open+0x362>
 800f586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d022      	beq.n	800f5d6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f594:	4618      	mov	r0, r3
 800f596:	f7fe f817 	bl	800d5c8 <clust2sect>
 800f59a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f59c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d103      	bne.n	800f5aa <f_open+0x336>
						res = FR_INT_ERR;
 800f5a2:	2302      	movs	r3, #2
 800f5a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f5a8:	e015      	b.n	800f5d6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f5aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5ac:	0a5a      	lsrs	r2, r3, #9
 800f5ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5b0:	441a      	add	r2, r3
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	7858      	ldrb	r0, [r3, #1]
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	6a1a      	ldr	r2, [r3, #32]
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	f7fd fc55 	bl	800ce74 <disk_read>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d002      	beq.n	800f5d6 <f_open+0x362>
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f5d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d002      	beq.n	800f5e4 <f_open+0x370>
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f5e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3768      	adds	r7, #104	; 0x68
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}

0800f5f0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b08c      	sub	sp, #48	; 0x30
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	60b9      	str	r1, [r7, #8]
 800f5fa:	607a      	str	r2, [r7, #4]
 800f5fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	2200      	movs	r2, #0
 800f606:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f107 0210 	add.w	r2, r7, #16
 800f60e:	4611      	mov	r1, r2
 800f610:	4618      	mov	r0, r3
 800f612:	f7ff fdb3 	bl	800f17c <validate>
 800f616:	4603      	mov	r3, r0
 800f618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f61c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f620:	2b00      	cmp	r3, #0
 800f622:	d107      	bne.n	800f634 <f_write+0x44>
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	7d5b      	ldrb	r3, [r3, #21]
 800f628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f62c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f630:	2b00      	cmp	r3, #0
 800f632:	d002      	beq.n	800f63a <f_write+0x4a>
 800f634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f638:	e14b      	b.n	800f8d2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	7d1b      	ldrb	r3, [r3, #20]
 800f63e:	f003 0302 	and.w	r3, r3, #2
 800f642:	2b00      	cmp	r3, #0
 800f644:	d101      	bne.n	800f64a <f_write+0x5a>
 800f646:	2307      	movs	r3, #7
 800f648:	e143      	b.n	800f8d2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	699a      	ldr	r2, [r3, #24]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	441a      	add	r2, r3
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	699b      	ldr	r3, [r3, #24]
 800f656:	429a      	cmp	r2, r3
 800f658:	f080 812d 	bcs.w	800f8b6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	699b      	ldr	r3, [r3, #24]
 800f660:	43db      	mvns	r3, r3
 800f662:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f664:	e127      	b.n	800f8b6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	699b      	ldr	r3, [r3, #24]
 800f66a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f66e:	2b00      	cmp	r3, #0
 800f670:	f040 80e3 	bne.w	800f83a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	699b      	ldr	r3, [r3, #24]
 800f678:	0a5b      	lsrs	r3, r3, #9
 800f67a:	693a      	ldr	r2, [r7, #16]
 800f67c:	8952      	ldrh	r2, [r2, #10]
 800f67e:	3a01      	subs	r2, #1
 800f680:	4013      	ands	r3, r2
 800f682:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f684:	69bb      	ldr	r3, [r7, #24]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d143      	bne.n	800f712 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	699b      	ldr	r3, [r3, #24]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d10c      	bne.n	800f6ac <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	689b      	ldr	r3, [r3, #8]
 800f696:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d11a      	bne.n	800f6d4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2100      	movs	r1, #0
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fe f9a6 	bl	800d9f4 <create_chain>
 800f6a8:	62b8      	str	r0, [r7, #40]	; 0x28
 800f6aa:	e013      	b.n	800f6d4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d007      	beq.n	800f6c4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	699b      	ldr	r3, [r3, #24]
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	68f8      	ldr	r0, [r7, #12]
 800f6bc:	f7fe fa32 	bl	800db24 <clmt_clust>
 800f6c0:	62b8      	str	r0, [r7, #40]	; 0x28
 800f6c2:	e007      	b.n	800f6d4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f6c4:	68fa      	ldr	r2, [r7, #12]
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	69db      	ldr	r3, [r3, #28]
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	4610      	mov	r0, r2
 800f6ce:	f7fe f991 	bl	800d9f4 <create_chain>
 800f6d2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	f000 80f2 	beq.w	800f8c0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d104      	bne.n	800f6ec <f_write+0xfc>
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2202      	movs	r2, #2
 800f6e6:	755a      	strb	r2, [r3, #21]
 800f6e8:	2302      	movs	r3, #2
 800f6ea:	e0f2      	b.n	800f8d2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6f2:	d104      	bne.n	800f6fe <f_write+0x10e>
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	755a      	strb	r2, [r3, #21]
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	e0e9      	b.n	800f8d2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f702:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	689b      	ldr	r3, [r3, #8]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d102      	bne.n	800f712 <f_write+0x122>
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f710:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	7d1b      	ldrb	r3, [r3, #20]
 800f716:	b25b      	sxtb	r3, r3
 800f718:	2b00      	cmp	r3, #0
 800f71a:	da18      	bge.n	800f74e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	7858      	ldrb	r0, [r3, #1]
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	6a1a      	ldr	r2, [r3, #32]
 800f72a:	2301      	movs	r3, #1
 800f72c:	f7fd fbc2 	bl	800ceb4 <disk_write>
 800f730:	4603      	mov	r3, r0
 800f732:	2b00      	cmp	r3, #0
 800f734:	d004      	beq.n	800f740 <f_write+0x150>
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2201      	movs	r2, #1
 800f73a:	755a      	strb	r2, [r3, #21]
 800f73c:	2301      	movs	r3, #1
 800f73e:	e0c8      	b.n	800f8d2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	7d1b      	ldrb	r3, [r3, #20]
 800f744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f748:	b2da      	uxtb	r2, r3
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f74e:	693a      	ldr	r2, [r7, #16]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	69db      	ldr	r3, [r3, #28]
 800f754:	4619      	mov	r1, r3
 800f756:	4610      	mov	r0, r2
 800f758:	f7fd ff36 	bl	800d5c8 <clust2sect>
 800f75c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d104      	bne.n	800f76e <f_write+0x17e>
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2202      	movs	r2, #2
 800f768:	755a      	strb	r2, [r3, #21]
 800f76a:	2302      	movs	r3, #2
 800f76c:	e0b1      	b.n	800f8d2 <f_write+0x2e2>
			sect += csect;
 800f76e:	697a      	ldr	r2, [r7, #20]
 800f770:	69bb      	ldr	r3, [r7, #24]
 800f772:	4413      	add	r3, r2
 800f774:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	0a5b      	lsrs	r3, r3, #9
 800f77a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f77c:	6a3b      	ldr	r3, [r7, #32]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d03c      	beq.n	800f7fc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f782:	69ba      	ldr	r2, [r7, #24]
 800f784:	6a3b      	ldr	r3, [r7, #32]
 800f786:	4413      	add	r3, r2
 800f788:	693a      	ldr	r2, [r7, #16]
 800f78a:	8952      	ldrh	r2, [r2, #10]
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d905      	bls.n	800f79c <f_write+0x1ac>
					cc = fs->csize - csect;
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	895b      	ldrh	r3, [r3, #10]
 800f794:	461a      	mov	r2, r3
 800f796:	69bb      	ldr	r3, [r7, #24]
 800f798:	1ad3      	subs	r3, r2, r3
 800f79a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	7858      	ldrb	r0, [r3, #1]
 800f7a0:	6a3b      	ldr	r3, [r7, #32]
 800f7a2:	697a      	ldr	r2, [r7, #20]
 800f7a4:	69f9      	ldr	r1, [r7, #28]
 800f7a6:	f7fd fb85 	bl	800ceb4 <disk_write>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d004      	beq.n	800f7ba <f_write+0x1ca>
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	2201      	movs	r2, #1
 800f7b4:	755a      	strb	r2, [r3, #21]
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	e08b      	b.n	800f8d2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6a1a      	ldr	r2, [r3, #32]
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	1ad3      	subs	r3, r2, r3
 800f7c2:	6a3a      	ldr	r2, [r7, #32]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d915      	bls.n	800f7f4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	6a1a      	ldr	r2, [r3, #32]
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	025b      	lsls	r3, r3, #9
 800f7d8:	69fa      	ldr	r2, [r7, #28]
 800f7da:	4413      	add	r3, r2
 800f7dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	f7fd fc27 	bl	800d034 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	7d1b      	ldrb	r3, [r3, #20]
 800f7ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7ee:	b2da      	uxtb	r2, r3
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f7f4:	6a3b      	ldr	r3, [r7, #32]
 800f7f6:	025b      	lsls	r3, r3, #9
 800f7f8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f7fa:	e03f      	b.n	800f87c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	6a1b      	ldr	r3, [r3, #32]
 800f800:	697a      	ldr	r2, [r7, #20]
 800f802:	429a      	cmp	r2, r3
 800f804:	d016      	beq.n	800f834 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	699a      	ldr	r2, [r3, #24]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f80e:	429a      	cmp	r2, r3
 800f810:	d210      	bcs.n	800f834 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	7858      	ldrb	r0, [r3, #1]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f81c:	2301      	movs	r3, #1
 800f81e:	697a      	ldr	r2, [r7, #20]
 800f820:	f7fd fb28 	bl	800ce74 <disk_read>
 800f824:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f826:	2b00      	cmp	r3, #0
 800f828:	d004      	beq.n	800f834 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2201      	movs	r2, #1
 800f82e:	755a      	strb	r2, [r3, #21]
 800f830:	2301      	movs	r3, #1
 800f832:	e04e      	b.n	800f8d2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	697a      	ldr	r2, [r7, #20]
 800f838:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	699b      	ldr	r3, [r3, #24]
 800f83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f842:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f846:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d901      	bls.n	800f854 <f_write+0x264>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	699b      	ldr	r3, [r3, #24]
 800f85e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f862:	4413      	add	r3, r2
 800f864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f866:	69f9      	ldr	r1, [r7, #28]
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fd fbe3 	bl	800d034 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	7d1b      	ldrb	r3, [r3, #20]
 800f872:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f876:	b2da      	uxtb	r2, r3
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f87c:	69fa      	ldr	r2, [r7, #28]
 800f87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f880:	4413      	add	r3, r2
 800f882:	61fb      	str	r3, [r7, #28]
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	699a      	ldr	r2, [r3, #24]
 800f888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88a:	441a      	add	r2, r3
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	619a      	str	r2, [r3, #24]
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	68da      	ldr	r2, [r3, #12]
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	699b      	ldr	r3, [r3, #24]
 800f898:	429a      	cmp	r2, r3
 800f89a:	bf38      	it	cc
 800f89c:	461a      	movcc	r2, r3
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	60da      	str	r2, [r3, #12]
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	681a      	ldr	r2, [r3, #0]
 800f8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a8:	441a      	add	r2, r3
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	601a      	str	r2, [r3, #0]
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b2:	1ad3      	subs	r3, r2, r3
 800f8b4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f47f aed4 	bne.w	800f666 <f_write+0x76>
 800f8be:	e000      	b.n	800f8c2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f8c0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	7d1b      	ldrb	r3, [r3, #20]
 800f8c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8ca:	b2da      	uxtb	r2, r3
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f8d0:	2300      	movs	r3, #0
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3730      	adds	r7, #48	; 0x30
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}

0800f8da <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f8da:	b580      	push	{r7, lr}
 800f8dc:	b086      	sub	sp, #24
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f107 0208 	add.w	r2, r7, #8
 800f8e8:	4611      	mov	r1, r2
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7ff fc46 	bl	800f17c <validate>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f8f4:	7dfb      	ldrb	r3, [r7, #23]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d168      	bne.n	800f9cc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	7d1b      	ldrb	r3, [r3, #20]
 800f8fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f902:	2b00      	cmp	r3, #0
 800f904:	d062      	beq.n	800f9cc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	7d1b      	ldrb	r3, [r3, #20]
 800f90a:	b25b      	sxtb	r3, r3
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	da15      	bge.n	800f93c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	7858      	ldrb	r0, [r3, #1]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6a1a      	ldr	r2, [r3, #32]
 800f91e:	2301      	movs	r3, #1
 800f920:	f7fd fac8 	bl	800ceb4 <disk_write>
 800f924:	4603      	mov	r3, r0
 800f926:	2b00      	cmp	r3, #0
 800f928:	d001      	beq.n	800f92e <f_sync+0x54>
 800f92a:	2301      	movs	r3, #1
 800f92c:	e04f      	b.n	800f9ce <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	7d1b      	ldrb	r3, [r3, #20]
 800f932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f936:	b2da      	uxtb	r2, r3
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f93c:	f7fb f82c 	bl	800a998 <get_fattime>
 800f940:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f942:	68ba      	ldr	r2, [r7, #8]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f948:	4619      	mov	r1, r3
 800f94a:	4610      	mov	r0, r2
 800f94c:	f7fd fda0 	bl	800d490 <move_window>
 800f950:	4603      	mov	r3, r0
 800f952:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f954:	7dfb      	ldrb	r3, [r7, #23]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d138      	bne.n	800f9cc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f95e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	330b      	adds	r3, #11
 800f964:	781a      	ldrb	r2, [r3, #0]
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	330b      	adds	r3, #11
 800f96a:	f042 0220 	orr.w	r2, r2, #32
 800f96e:	b2d2      	uxtb	r2, r2
 800f970:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6818      	ldr	r0, [r3, #0]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	689b      	ldr	r3, [r3, #8]
 800f97a:	461a      	mov	r2, r3
 800f97c:	68f9      	ldr	r1, [r7, #12]
 800f97e:	f7fe faab 	bl	800ded8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	f103 021c 	add.w	r2, r3, #28
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	4619      	mov	r1, r3
 800f98e:	4610      	mov	r0, r2
 800f990:	f7fd fb24 	bl	800cfdc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	3316      	adds	r3, #22
 800f998:	6939      	ldr	r1, [r7, #16]
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7fd fb1e 	bl	800cfdc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	3312      	adds	r3, #18
 800f9a4:	2100      	movs	r1, #0
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7fd fafd 	bl	800cfa6 <st_word>
					fs->wflag = 1;
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fd fd99 	bl	800d4ec <sync_fs>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	7d1b      	ldrb	r3, [r3, #20]
 800f9c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9c6:	b2da      	uxtb	r2, r3
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f9cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3718      	adds	r7, #24
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f9d6:	b580      	push	{r7, lr}
 800f9d8:	b084      	sub	sp, #16
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f7ff ff7b 	bl	800f8da <f_sync>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f9e8:	7bfb      	ldrb	r3, [r7, #15]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d118      	bne.n	800fa20 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f107 0208 	add.w	r2, r7, #8
 800f9f4:	4611      	mov	r1, r2
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7ff fbc0 	bl	800f17c <validate>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fa00:	7bfb      	ldrb	r3, [r7, #15]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d10c      	bne.n	800fa20 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	691b      	ldr	r3, [r3, #16]
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fd fc9c 	bl	800d348 <dec_lock>
 800fa10:	4603      	mov	r3, r0
 800fa12:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fa14:	7bfb      	ldrb	r3, [r7, #15]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d102      	bne.n	800fa20 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fa20:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3710      	adds	r7, #16
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}

0800fa2a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fa2a:	b580      	push	{r7, lr}
 800fa2c:	b090      	sub	sp, #64	; 0x40
 800fa2e:	af00      	add	r7, sp, #0
 800fa30:	6078      	str	r0, [r7, #4]
 800fa32:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800fa34:	f107 0108 	add.w	r1, r7, #8
 800fa38:	1d3b      	adds	r3, r7, #4
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7ff f94d 	bl	800ecdc <find_volume>
 800fa42:	4603      	mov	r3, r0
 800fa44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800fa48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d11f      	bne.n	800fa90 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fa50:	687a      	ldr	r2, [r7, #4]
 800fa52:	f107 0308 	add.w	r3, r7, #8
 800fa56:	4611      	mov	r1, r2
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7ff f833 	bl	800eac4 <follow_path>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800fa64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d111      	bne.n	800fa90 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800fa6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa70:	b25b      	sxtb	r3, r3
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	da03      	bge.n	800fa7e <f_stat+0x54>
				res = FR_INVALID_NAME;
 800fa76:	2306      	movs	r3, #6
 800fa78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fa7c:	e008      	b.n	800fa90 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d005      	beq.n	800fa90 <f_stat+0x66>
 800fa84:	f107 0308 	add.w	r3, r7, #8
 800fa88:	6839      	ldr	r1, [r7, #0]
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7fe fd84 	bl	800e598 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800fa90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3740      	adds	r7, #64	; 0x40
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b098      	sub	sp, #96	; 0x60
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800faa4:	f107 010c 	add.w	r1, r7, #12
 800faa8:	1d3b      	adds	r3, r7, #4
 800faaa:	2202      	movs	r2, #2
 800faac:	4618      	mov	r0, r3
 800faae:	f7ff f915 	bl	800ecdc <find_volume>
 800fab2:	4603      	mov	r3, r0
 800fab4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800fabc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	f040 80ec 	bne.w	800fc9e <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	f107 0310 	add.w	r3, r7, #16
 800facc:	4611      	mov	r1, r2
 800face:	4618      	mov	r0, r3
 800fad0:	f7fe fff8 	bl	800eac4 <follow_path>
 800fad4:	4603      	mov	r3, r0
 800fad6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800fada:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d102      	bne.n	800fae8 <f_mkdir+0x4c>
 800fae2:	2308      	movs	r3, #8
 800fae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800fae8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800faec:	2b04      	cmp	r3, #4
 800faee:	f040 80d6 	bne.w	800fc9e <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800faf2:	f107 0310 	add.w	r3, r7, #16
 800faf6:	2100      	movs	r1, #0
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7fd ff7b 	bl	800d9f4 <create_chain>
 800fafe:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	895b      	ldrh	r3, [r3, #10]
 800fb04:	025b      	lsls	r3, r3, #9
 800fb06:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800fb0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d102      	bne.n	800fb1a <f_mkdir+0x7e>
 800fb14:	2307      	movs	r3, #7
 800fb16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800fb1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d102      	bne.n	800fb26 <f_mkdir+0x8a>
 800fb20:	2302      	movs	r3, #2
 800fb22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fb26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb2c:	d102      	bne.n	800fb34 <f_mkdir+0x98>
 800fb2e:	2301      	movs	r3, #1
 800fb30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800fb34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d106      	bne.n	800fb4a <f_mkdir+0xae>
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fd fc62 	bl	800d408 <sync_window>
 800fb44:	4603      	mov	r3, r0
 800fb46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800fb4a:	f7fa ff25 	bl	800a998 <get_fattime>
 800fb4e:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800fb50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d16a      	bne.n	800fc2e <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7fd fd33 	bl	800d5c8 <clust2sect>
 800fb62:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	3334      	adds	r3, #52	; 0x34
 800fb68:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800fb6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb6e:	2100      	movs	r1, #0
 800fb70:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fb72:	f7fd fa80 	bl	800d076 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800fb76:	220b      	movs	r2, #11
 800fb78:	2120      	movs	r1, #32
 800fb7a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fb7c:	f7fd fa7b 	bl	800d076 <mem_set>
					dir[DIR_Name] = '.';
 800fb80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb82:	222e      	movs	r2, #46	; 0x2e
 800fb84:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800fb86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb88:	330b      	adds	r3, #11
 800fb8a:	2210      	movs	r2, #16
 800fb8c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800fb8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb90:	3316      	adds	r3, #22
 800fb92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fd fa21 	bl	800cfdc <st_dword>
					st_clust(fs, dir, dcl);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fb9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7fe f999 	bl	800ded8 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800fba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fba8:	3320      	adds	r3, #32
 800fbaa:	2220      	movs	r2, #32
 800fbac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7fd fa40 	bl	800d034 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800fbb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbb6:	3321      	adds	r3, #33	; 0x21
 800fbb8:	222e      	movs	r2, #46	; 0x2e
 800fbba:	701a      	strb	r2, [r3, #0]
 800fbbc:	69bb      	ldr	r3, [r7, #24]
 800fbbe:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	2b03      	cmp	r3, #3
 800fbc6:	d106      	bne.n	800fbd6 <f_mkdir+0x13a>
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d101      	bne.n	800fbd6 <f_mkdir+0x13a>
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800fbd6:	68f8      	ldr	r0, [r7, #12]
 800fbd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbda:	3320      	adds	r3, #32
 800fbdc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fbde:	4619      	mov	r1, r3
 800fbe0:	f7fe f97a 	bl	800ded8 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	895b      	ldrh	r3, [r3, #10]
 800fbe8:	65bb      	str	r3, [r7, #88]	; 0x58
 800fbea:	e01b      	b.n	800fc24 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800fbec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbee:	1c5a      	adds	r2, r3, #1
 800fbf0:	657a      	str	r2, [r7, #84]	; 0x54
 800fbf2:	68fa      	ldr	r2, [r7, #12]
 800fbf4:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	2201      	movs	r2, #1
 800fbfa:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7fd fc02 	bl	800d408 <sync_window>
 800fc04:	4603      	mov	r3, r0
 800fc06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800fc0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d10c      	bne.n	800fc2c <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800fc12:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc16:	2100      	movs	r1, #0
 800fc18:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fc1a:	f7fd fa2c 	bl	800d076 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800fc1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc20:	3b01      	subs	r3, #1
 800fc22:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1e0      	bne.n	800fbec <f_mkdir+0x150>
 800fc2a:	e000      	b.n	800fc2e <f_mkdir+0x192>
					if (res != FR_OK) break;
 800fc2c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800fc2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d107      	bne.n	800fc46 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800fc36:	f107 0310 	add.w	r3, r7, #16
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7fe fbb4 	bl	800e3a8 <dir_register>
 800fc40:	4603      	mov	r3, r0
 800fc42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800fc46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d120      	bne.n	800fc90 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800fc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc50:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800fc52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc54:	3316      	adds	r3, #22
 800fc56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7fd f9bf 	bl	800cfdc <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fc62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7fe f937 	bl	800ded8 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800fc6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc6c:	330b      	adds	r3, #11
 800fc6e:	2210      	movs	r2, #16
 800fc70:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2201      	movs	r2, #1
 800fc76:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800fc78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d10e      	bne.n	800fc9e <f_mkdir+0x202>
					res = sync_fs(fs);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7fd fc32 	bl	800d4ec <sync_fs>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fc8e:	e006      	b.n	800fc9e <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800fc90:	f107 0310 	add.w	r3, r7, #16
 800fc94:	2200      	movs	r2, #0
 800fc96:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7fd fe46 	bl	800d92a <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800fc9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3760      	adds	r7, #96	; 0x60
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
	...

0800fcac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b087      	sub	sp, #28
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	60f8      	str	r0, [r7, #12]
 800fcb4:	60b9      	str	r1, [r7, #8]
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fcba:	2301      	movs	r3, #1
 800fcbc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fcc2:	4b1f      	ldr	r3, [pc, #124]	; (800fd40 <FATFS_LinkDriverEx+0x94>)
 800fcc4:	7a5b      	ldrb	r3, [r3, #9]
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d131      	bne.n	800fd30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fccc:	4b1c      	ldr	r3, [pc, #112]	; (800fd40 <FATFS_LinkDriverEx+0x94>)
 800fcce:	7a5b      	ldrb	r3, [r3, #9]
 800fcd0:	b2db      	uxtb	r3, r3
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	4b1a      	ldr	r3, [pc, #104]	; (800fd40 <FATFS_LinkDriverEx+0x94>)
 800fcd6:	2100      	movs	r1, #0
 800fcd8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fcda:	4b19      	ldr	r3, [pc, #100]	; (800fd40 <FATFS_LinkDriverEx+0x94>)
 800fcdc:	7a5b      	ldrb	r3, [r3, #9]
 800fcde:	b2db      	uxtb	r3, r3
 800fce0:	4a17      	ldr	r2, [pc, #92]	; (800fd40 <FATFS_LinkDriverEx+0x94>)
 800fce2:	009b      	lsls	r3, r3, #2
 800fce4:	4413      	add	r3, r2
 800fce6:	68fa      	ldr	r2, [r7, #12]
 800fce8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fcea:	4b15      	ldr	r3, [pc, #84]	; (800fd40 <FATFS_LinkDriverEx+0x94>)
 800fcec:	7a5b      	ldrb	r3, [r3, #9]
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	461a      	mov	r2, r3
 800fcf2:	4b13      	ldr	r3, [pc, #76]	; (800fd40 <FATFS_LinkDriverEx+0x94>)
 800fcf4:	4413      	add	r3, r2
 800fcf6:	79fa      	ldrb	r2, [r7, #7]
 800fcf8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fcfa:	4b11      	ldr	r3, [pc, #68]	; (800fd40 <FATFS_LinkDriverEx+0x94>)
 800fcfc:	7a5b      	ldrb	r3, [r3, #9]
 800fcfe:	b2db      	uxtb	r3, r3
 800fd00:	1c5a      	adds	r2, r3, #1
 800fd02:	b2d1      	uxtb	r1, r2
 800fd04:	4a0e      	ldr	r2, [pc, #56]	; (800fd40 <FATFS_LinkDriverEx+0x94>)
 800fd06:	7251      	strb	r1, [r2, #9]
 800fd08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fd0a:	7dbb      	ldrb	r3, [r7, #22]
 800fd0c:	3330      	adds	r3, #48	; 0x30
 800fd0e:	b2da      	uxtb	r2, r3
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	3301      	adds	r3, #1
 800fd18:	223a      	movs	r2, #58	; 0x3a
 800fd1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	3302      	adds	r3, #2
 800fd20:	222f      	movs	r2, #47	; 0x2f
 800fd22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	3303      	adds	r3, #3
 800fd28:	2200      	movs	r2, #0
 800fd2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fd30:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	371c      	adds	r7, #28
 800fd36:	46bd      	mov	sp, r7
 800fd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3c:	4770      	bx	lr
 800fd3e:	bf00      	nop
 800fd40:	2004abd4 	.word	0x2004abd4

0800fd44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fd4e:	2200      	movs	r2, #0
 800fd50:	6839      	ldr	r1, [r7, #0]
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f7ff ffaa 	bl	800fcac <FATFS_LinkDriverEx>
 800fd58:	4603      	mov	r3, r0
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3708      	adds	r7, #8
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
	...

0800fd64 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b085      	sub	sp, #20
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	6039      	str	r1, [r7, #0]
 800fd6e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fd70:	88fb      	ldrh	r3, [r7, #6]
 800fd72:	2b7f      	cmp	r3, #127	; 0x7f
 800fd74:	d802      	bhi.n	800fd7c <ff_convert+0x18>
		c = chr;
 800fd76:	88fb      	ldrh	r3, [r7, #6]
 800fd78:	81fb      	strh	r3, [r7, #14]
 800fd7a:	e025      	b.n	800fdc8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d00b      	beq.n	800fd9a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fd82:	88fb      	ldrh	r3, [r7, #6]
 800fd84:	2bff      	cmp	r3, #255	; 0xff
 800fd86:	d805      	bhi.n	800fd94 <ff_convert+0x30>
 800fd88:	88fb      	ldrh	r3, [r7, #6]
 800fd8a:	3b80      	subs	r3, #128	; 0x80
 800fd8c:	4a12      	ldr	r2, [pc, #72]	; (800fdd8 <ff_convert+0x74>)
 800fd8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd92:	e000      	b.n	800fd96 <ff_convert+0x32>
 800fd94:	2300      	movs	r3, #0
 800fd96:	81fb      	strh	r3, [r7, #14]
 800fd98:	e016      	b.n	800fdc8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	81fb      	strh	r3, [r7, #14]
 800fd9e:	e009      	b.n	800fdb4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fda0:	89fb      	ldrh	r3, [r7, #14]
 800fda2:	4a0d      	ldr	r2, [pc, #52]	; (800fdd8 <ff_convert+0x74>)
 800fda4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fda8:	88fa      	ldrh	r2, [r7, #6]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d006      	beq.n	800fdbc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fdae:	89fb      	ldrh	r3, [r7, #14]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	81fb      	strh	r3, [r7, #14]
 800fdb4:	89fb      	ldrh	r3, [r7, #14]
 800fdb6:	2b7f      	cmp	r3, #127	; 0x7f
 800fdb8:	d9f2      	bls.n	800fda0 <ff_convert+0x3c>
 800fdba:	e000      	b.n	800fdbe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fdbc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fdbe:	89fb      	ldrh	r3, [r7, #14]
 800fdc0:	3380      	adds	r3, #128	; 0x80
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fdc8:	89fb      	ldrh	r3, [r7, #14]
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3714      	adds	r7, #20
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd4:	4770      	bx	lr
 800fdd6:	bf00      	nop
 800fdd8:	080123ec 	.word	0x080123ec

0800fddc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b087      	sub	sp, #28
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	4603      	mov	r3, r0
 800fde4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fde6:	88fb      	ldrh	r3, [r7, #6]
 800fde8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdec:	d201      	bcs.n	800fdf2 <ff_wtoupper+0x16>
 800fdee:	4b3e      	ldr	r3, [pc, #248]	; (800fee8 <ff_wtoupper+0x10c>)
 800fdf0:	e000      	b.n	800fdf4 <ff_wtoupper+0x18>
 800fdf2:	4b3e      	ldr	r3, [pc, #248]	; (800feec <ff_wtoupper+0x110>)
 800fdf4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	1c9a      	adds	r2, r3, #2
 800fdfa:	617a      	str	r2, [r7, #20]
 800fdfc:	881b      	ldrh	r3, [r3, #0]
 800fdfe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fe00:	8a7b      	ldrh	r3, [r7, #18]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d068      	beq.n	800fed8 <ff_wtoupper+0xfc>
 800fe06:	88fa      	ldrh	r2, [r7, #6]
 800fe08:	8a7b      	ldrh	r3, [r7, #18]
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d364      	bcc.n	800fed8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	1c9a      	adds	r2, r3, #2
 800fe12:	617a      	str	r2, [r7, #20]
 800fe14:	881b      	ldrh	r3, [r3, #0]
 800fe16:	823b      	strh	r3, [r7, #16]
 800fe18:	8a3b      	ldrh	r3, [r7, #16]
 800fe1a:	0a1b      	lsrs	r3, r3, #8
 800fe1c:	81fb      	strh	r3, [r7, #14]
 800fe1e:	8a3b      	ldrh	r3, [r7, #16]
 800fe20:	b2db      	uxtb	r3, r3
 800fe22:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fe24:	88fa      	ldrh	r2, [r7, #6]
 800fe26:	8a79      	ldrh	r1, [r7, #18]
 800fe28:	8a3b      	ldrh	r3, [r7, #16]
 800fe2a:	440b      	add	r3, r1
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	da49      	bge.n	800fec4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800fe30:	89fb      	ldrh	r3, [r7, #14]
 800fe32:	2b08      	cmp	r3, #8
 800fe34:	d84f      	bhi.n	800fed6 <ff_wtoupper+0xfa>
 800fe36:	a201      	add	r2, pc, #4	; (adr r2, 800fe3c <ff_wtoupper+0x60>)
 800fe38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe3c:	0800fe61 	.word	0x0800fe61
 800fe40:	0800fe73 	.word	0x0800fe73
 800fe44:	0800fe89 	.word	0x0800fe89
 800fe48:	0800fe91 	.word	0x0800fe91
 800fe4c:	0800fe99 	.word	0x0800fe99
 800fe50:	0800fea1 	.word	0x0800fea1
 800fe54:	0800fea9 	.word	0x0800fea9
 800fe58:	0800feb1 	.word	0x0800feb1
 800fe5c:	0800feb9 	.word	0x0800feb9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fe60:	88fa      	ldrh	r2, [r7, #6]
 800fe62:	8a7b      	ldrh	r3, [r7, #18]
 800fe64:	1ad3      	subs	r3, r2, r3
 800fe66:	005b      	lsls	r3, r3, #1
 800fe68:	697a      	ldr	r2, [r7, #20]
 800fe6a:	4413      	add	r3, r2
 800fe6c:	881b      	ldrh	r3, [r3, #0]
 800fe6e:	80fb      	strh	r3, [r7, #6]
 800fe70:	e027      	b.n	800fec2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fe72:	88fa      	ldrh	r2, [r7, #6]
 800fe74:	8a7b      	ldrh	r3, [r7, #18]
 800fe76:	1ad3      	subs	r3, r2, r3
 800fe78:	b29b      	uxth	r3, r3
 800fe7a:	f003 0301 	and.w	r3, r3, #1
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	88fa      	ldrh	r2, [r7, #6]
 800fe82:	1ad3      	subs	r3, r2, r3
 800fe84:	80fb      	strh	r3, [r7, #6]
 800fe86:	e01c      	b.n	800fec2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fe88:	88fb      	ldrh	r3, [r7, #6]
 800fe8a:	3b10      	subs	r3, #16
 800fe8c:	80fb      	strh	r3, [r7, #6]
 800fe8e:	e018      	b.n	800fec2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fe90:	88fb      	ldrh	r3, [r7, #6]
 800fe92:	3b20      	subs	r3, #32
 800fe94:	80fb      	strh	r3, [r7, #6]
 800fe96:	e014      	b.n	800fec2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fe98:	88fb      	ldrh	r3, [r7, #6]
 800fe9a:	3b30      	subs	r3, #48	; 0x30
 800fe9c:	80fb      	strh	r3, [r7, #6]
 800fe9e:	e010      	b.n	800fec2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fea0:	88fb      	ldrh	r3, [r7, #6]
 800fea2:	3b1a      	subs	r3, #26
 800fea4:	80fb      	strh	r3, [r7, #6]
 800fea6:	e00c      	b.n	800fec2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fea8:	88fb      	ldrh	r3, [r7, #6]
 800feaa:	3308      	adds	r3, #8
 800feac:	80fb      	strh	r3, [r7, #6]
 800feae:	e008      	b.n	800fec2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800feb0:	88fb      	ldrh	r3, [r7, #6]
 800feb2:	3b50      	subs	r3, #80	; 0x50
 800feb4:	80fb      	strh	r3, [r7, #6]
 800feb6:	e004      	b.n	800fec2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800feb8:	88fb      	ldrh	r3, [r7, #6]
 800feba:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800febe:	80fb      	strh	r3, [r7, #6]
 800fec0:	bf00      	nop
			}
			break;
 800fec2:	e008      	b.n	800fed6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fec4:	89fb      	ldrh	r3, [r7, #14]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d195      	bne.n	800fdf6 <ff_wtoupper+0x1a>
 800feca:	8a3b      	ldrh	r3, [r7, #16]
 800fecc:	005b      	lsls	r3, r3, #1
 800fece:	697a      	ldr	r2, [r7, #20]
 800fed0:	4413      	add	r3, r2
 800fed2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fed4:	e78f      	b.n	800fdf6 <ff_wtoupper+0x1a>
			break;
 800fed6:	bf00      	nop
	}

	return chr;
 800fed8:	88fb      	ldrh	r3, [r7, #6]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	371c      	adds	r7, #28
 800fede:	46bd      	mov	sp, r7
 800fee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee4:	4770      	bx	lr
 800fee6:	bf00      	nop
 800fee8:	080124ec 	.word	0x080124ec
 800feec:	080126e0 	.word	0x080126e0

0800fef0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fef4:	2200      	movs	r2, #0
 800fef6:	4912      	ldr	r1, [pc, #72]	; (800ff40 <MX_USB_DEVICE_Init+0x50>)
 800fef8:	4812      	ldr	r0, [pc, #72]	; (800ff44 <MX_USB_DEVICE_Init+0x54>)
 800fefa:	f7fb fc5f 	bl	800b7bc <USBD_Init>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d001      	beq.n	800ff08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ff04:	f7f1 fa4a 	bl	800139c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ff08:	490f      	ldr	r1, [pc, #60]	; (800ff48 <MX_USB_DEVICE_Init+0x58>)
 800ff0a:	480e      	ldr	r0, [pc, #56]	; (800ff44 <MX_USB_DEVICE_Init+0x54>)
 800ff0c:	f7fb fc86 	bl	800b81c <USBD_RegisterClass>
 800ff10:	4603      	mov	r3, r0
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d001      	beq.n	800ff1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ff16:	f7f1 fa41 	bl	800139c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ff1a:	490c      	ldr	r1, [pc, #48]	; (800ff4c <MX_USB_DEVICE_Init+0x5c>)
 800ff1c:	4809      	ldr	r0, [pc, #36]	; (800ff44 <MX_USB_DEVICE_Init+0x54>)
 800ff1e:	f7fb fb7d 	bl	800b61c <USBD_CDC_RegisterInterface>
 800ff22:	4603      	mov	r3, r0
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d001      	beq.n	800ff2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ff28:	f7f1 fa38 	bl	800139c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ff2c:	4805      	ldr	r0, [pc, #20]	; (800ff44 <MX_USB_DEVICE_Init+0x54>)
 800ff2e:	f7fb fcab 	bl	800b888 <USBD_Start>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d001      	beq.n	800ff3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ff38:	f7f1 fa30 	bl	800139c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ff3c:	bf00      	nop
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	200000b0 	.word	0x200000b0
 800ff44:	2004abe0 	.word	0x2004abe0
 800ff48:	2000001c 	.word	0x2000001c
 800ff4c:	2000009c 	.word	0x2000009c

0800ff50 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ff54:	2200      	movs	r2, #0
 800ff56:	4905      	ldr	r1, [pc, #20]	; (800ff6c <CDC_Init_FS+0x1c>)
 800ff58:	4805      	ldr	r0, [pc, #20]	; (800ff70 <CDC_Init_FS+0x20>)
 800ff5a:	f7fb fb79 	bl	800b650 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ff5e:	4905      	ldr	r1, [pc, #20]	; (800ff74 <CDC_Init_FS+0x24>)
 800ff60:	4803      	ldr	r0, [pc, #12]	; (800ff70 <CDC_Init_FS+0x20>)
 800ff62:	f7fb fb97 	bl	800b694 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ff66:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	2004b6bc 	.word	0x2004b6bc
 800ff70:	2004abe0 	.word	0x2004abe0
 800ff74:	2004aebc 	.word	0x2004aebc

0800ff78 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ff7c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr

0800ff88 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b083      	sub	sp, #12
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	4603      	mov	r3, r0
 800ff90:	6039      	str	r1, [r7, #0]
 800ff92:	71fb      	strb	r3, [r7, #7]
 800ff94:	4613      	mov	r3, r2
 800ff96:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ff98:	79fb      	ldrb	r3, [r7, #7]
 800ff9a:	2b23      	cmp	r3, #35	; 0x23
 800ff9c:	d84a      	bhi.n	8010034 <CDC_Control_FS+0xac>
 800ff9e:	a201      	add	r2, pc, #4	; (adr r2, 800ffa4 <CDC_Control_FS+0x1c>)
 800ffa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffa4:	08010035 	.word	0x08010035
 800ffa8:	08010035 	.word	0x08010035
 800ffac:	08010035 	.word	0x08010035
 800ffb0:	08010035 	.word	0x08010035
 800ffb4:	08010035 	.word	0x08010035
 800ffb8:	08010035 	.word	0x08010035
 800ffbc:	08010035 	.word	0x08010035
 800ffc0:	08010035 	.word	0x08010035
 800ffc4:	08010035 	.word	0x08010035
 800ffc8:	08010035 	.word	0x08010035
 800ffcc:	08010035 	.word	0x08010035
 800ffd0:	08010035 	.word	0x08010035
 800ffd4:	08010035 	.word	0x08010035
 800ffd8:	08010035 	.word	0x08010035
 800ffdc:	08010035 	.word	0x08010035
 800ffe0:	08010035 	.word	0x08010035
 800ffe4:	08010035 	.word	0x08010035
 800ffe8:	08010035 	.word	0x08010035
 800ffec:	08010035 	.word	0x08010035
 800fff0:	08010035 	.word	0x08010035
 800fff4:	08010035 	.word	0x08010035
 800fff8:	08010035 	.word	0x08010035
 800fffc:	08010035 	.word	0x08010035
 8010000:	08010035 	.word	0x08010035
 8010004:	08010035 	.word	0x08010035
 8010008:	08010035 	.word	0x08010035
 801000c:	08010035 	.word	0x08010035
 8010010:	08010035 	.word	0x08010035
 8010014:	08010035 	.word	0x08010035
 8010018:	08010035 	.word	0x08010035
 801001c:	08010035 	.word	0x08010035
 8010020:	08010035 	.word	0x08010035
 8010024:	08010035 	.word	0x08010035
 8010028:	08010035 	.word	0x08010035
 801002c:	08010035 	.word	0x08010035
 8010030:	08010035 	.word	0x08010035
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010034:	bf00      	nop
  }

  return (USBD_OK);
 8010036:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010038:	4618      	mov	r0, r3
 801003a:	370c      	adds	r7, #12
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr

08010044 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b082      	sub	sp, #8
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801004e:	6879      	ldr	r1, [r7, #4]
 8010050:	4805      	ldr	r0, [pc, #20]	; (8010068 <CDC_Receive_FS+0x24>)
 8010052:	f7fb fb1f 	bl	800b694 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010056:	4804      	ldr	r0, [pc, #16]	; (8010068 <CDC_Receive_FS+0x24>)
 8010058:	f7fb fb7a 	bl	800b750 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801005c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801005e:	4618      	mov	r0, r3
 8010060:	3708      	adds	r7, #8
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	2004abe0 	.word	0x2004abe0

0801006c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b084      	sub	sp, #16
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	460b      	mov	r3, r1
 8010076:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010078:	2300      	movs	r3, #0
 801007a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801007c:	4b0d      	ldr	r3, [pc, #52]	; (80100b4 <CDC_Transmit_FS+0x48>)
 801007e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010082:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801008a:	2b00      	cmp	r3, #0
 801008c:	d001      	beq.n	8010092 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801008e:	2301      	movs	r3, #1
 8010090:	e00b      	b.n	80100aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010092:	887b      	ldrh	r3, [r7, #2]
 8010094:	461a      	mov	r2, r3
 8010096:	6879      	ldr	r1, [r7, #4]
 8010098:	4806      	ldr	r0, [pc, #24]	; (80100b4 <CDC_Transmit_FS+0x48>)
 801009a:	f7fb fad9 	bl	800b650 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801009e:	4805      	ldr	r0, [pc, #20]	; (80100b4 <CDC_Transmit_FS+0x48>)
 80100a0:	f7fb fb16 	bl	800b6d0 <USBD_CDC_TransmitPacket>
 80100a4:	4603      	mov	r3, r0
 80100a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80100a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3710      	adds	r7, #16
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
 80100b2:	bf00      	nop
 80100b4:	2004abe0 	.word	0x2004abe0

080100b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b087      	sub	sp, #28
 80100bc:	af00      	add	r7, sp, #0
 80100be:	60f8      	str	r0, [r7, #12]
 80100c0:	60b9      	str	r1, [r7, #8]
 80100c2:	4613      	mov	r3, r2
 80100c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80100c6:	2300      	movs	r3, #0
 80100c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80100ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	371c      	adds	r7, #28
 80100d2:	46bd      	mov	sp, r7
 80100d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d8:	4770      	bx	lr
	...

080100dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100dc:	b480      	push	{r7}
 80100de:	b083      	sub	sp, #12
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	4603      	mov	r3, r0
 80100e4:	6039      	str	r1, [r7, #0]
 80100e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	2212      	movs	r2, #18
 80100ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80100ee:	4b03      	ldr	r3, [pc, #12]	; (80100fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	200000d0 	.word	0x200000d0

08010100 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010100:	b480      	push	{r7}
 8010102:	b083      	sub	sp, #12
 8010104:	af00      	add	r7, sp, #0
 8010106:	4603      	mov	r3, r0
 8010108:	6039      	str	r1, [r7, #0]
 801010a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	2204      	movs	r2, #4
 8010110:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010112:	4b03      	ldr	r3, [pc, #12]	; (8010120 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010114:	4618      	mov	r0, r3
 8010116:	370c      	adds	r7, #12
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr
 8010120:	200000f0 	.word	0x200000f0

08010124 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
 801012a:	4603      	mov	r3, r0
 801012c:	6039      	str	r1, [r7, #0]
 801012e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010130:	79fb      	ldrb	r3, [r7, #7]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d105      	bne.n	8010142 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010136:	683a      	ldr	r2, [r7, #0]
 8010138:	4907      	ldr	r1, [pc, #28]	; (8010158 <USBD_FS_ProductStrDescriptor+0x34>)
 801013a:	4808      	ldr	r0, [pc, #32]	; (801015c <USBD_FS_ProductStrDescriptor+0x38>)
 801013c:	f7fc fd7a 	bl	800cc34 <USBD_GetString>
 8010140:	e004      	b.n	801014c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010142:	683a      	ldr	r2, [r7, #0]
 8010144:	4904      	ldr	r1, [pc, #16]	; (8010158 <USBD_FS_ProductStrDescriptor+0x34>)
 8010146:	4805      	ldr	r0, [pc, #20]	; (801015c <USBD_FS_ProductStrDescriptor+0x38>)
 8010148:	f7fc fd74 	bl	800cc34 <USBD_GetString>
  }
  return USBD_StrDesc;
 801014c:	4b02      	ldr	r3, [pc, #8]	; (8010158 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801014e:	4618      	mov	r0, r3
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	2004bebc 	.word	0x2004bebc
 801015c:	080122e0 	.word	0x080122e0

08010160 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	4603      	mov	r3, r0
 8010168:	6039      	str	r1, [r7, #0]
 801016a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801016c:	683a      	ldr	r2, [r7, #0]
 801016e:	4904      	ldr	r1, [pc, #16]	; (8010180 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010170:	4804      	ldr	r0, [pc, #16]	; (8010184 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010172:	f7fc fd5f 	bl	800cc34 <USBD_GetString>
  return USBD_StrDesc;
 8010176:	4b02      	ldr	r3, [pc, #8]	; (8010180 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010178:	4618      	mov	r0, r3
 801017a:	3708      	adds	r7, #8
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}
 8010180:	2004bebc 	.word	0x2004bebc
 8010184:	080122f8 	.word	0x080122f8

08010188 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	4603      	mov	r3, r0
 8010190:	6039      	str	r1, [r7, #0]
 8010192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	221a      	movs	r2, #26
 8010198:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801019a:	f000 f855 	bl	8010248 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801019e:	4b02      	ldr	r3, [pc, #8]	; (80101a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3708      	adds	r7, #8
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}
 80101a8:	200000f4 	.word	0x200000f4

080101ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	4603      	mov	r3, r0
 80101b4:	6039      	str	r1, [r7, #0]
 80101b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80101b8:	79fb      	ldrb	r3, [r7, #7]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d105      	bne.n	80101ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101be:	683a      	ldr	r2, [r7, #0]
 80101c0:	4907      	ldr	r1, [pc, #28]	; (80101e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80101c2:	4808      	ldr	r0, [pc, #32]	; (80101e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80101c4:	f7fc fd36 	bl	800cc34 <USBD_GetString>
 80101c8:	e004      	b.n	80101d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101ca:	683a      	ldr	r2, [r7, #0]
 80101cc:	4904      	ldr	r1, [pc, #16]	; (80101e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80101ce:	4805      	ldr	r0, [pc, #20]	; (80101e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80101d0:	f7fc fd30 	bl	800cc34 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101d4:	4b02      	ldr	r3, [pc, #8]	; (80101e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3708      	adds	r7, #8
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
 80101de:	bf00      	nop
 80101e0:	2004bebc 	.word	0x2004bebc
 80101e4:	0801230c 	.word	0x0801230c

080101e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	4603      	mov	r3, r0
 80101f0:	6039      	str	r1, [r7, #0]
 80101f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80101f4:	79fb      	ldrb	r3, [r7, #7]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d105      	bne.n	8010206 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101fa:	683a      	ldr	r2, [r7, #0]
 80101fc:	4907      	ldr	r1, [pc, #28]	; (801021c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101fe:	4808      	ldr	r0, [pc, #32]	; (8010220 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010200:	f7fc fd18 	bl	800cc34 <USBD_GetString>
 8010204:	e004      	b.n	8010210 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010206:	683a      	ldr	r2, [r7, #0]
 8010208:	4904      	ldr	r1, [pc, #16]	; (801021c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801020a:	4805      	ldr	r0, [pc, #20]	; (8010220 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801020c:	f7fc fd12 	bl	800cc34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010210:	4b02      	ldr	r3, [pc, #8]	; (801021c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010212:	4618      	mov	r0, r3
 8010214:	3708      	adds	r7, #8
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	2004bebc 	.word	0x2004bebc
 8010220:	08012318 	.word	0x08012318

08010224 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010224:	b480      	push	{r7}
 8010226:	b083      	sub	sp, #12
 8010228:	af00      	add	r7, sp, #0
 801022a:	4603      	mov	r3, r0
 801022c:	6039      	str	r1, [r7, #0]
 801022e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	220c      	movs	r2, #12
 8010234:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010236:	4b03      	ldr	r3, [pc, #12]	; (8010244 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010238:	4618      	mov	r0, r3
 801023a:	370c      	adds	r7, #12
 801023c:	46bd      	mov	sp, r7
 801023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010242:	4770      	bx	lr
 8010244:	200000e4 	.word	0x200000e4

08010248 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b084      	sub	sp, #16
 801024c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801024e:	4b0f      	ldr	r3, [pc, #60]	; (801028c <Get_SerialNum+0x44>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010254:	4b0e      	ldr	r3, [pc, #56]	; (8010290 <Get_SerialNum+0x48>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801025a:	4b0e      	ldr	r3, [pc, #56]	; (8010294 <Get_SerialNum+0x4c>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010260:	68fa      	ldr	r2, [r7, #12]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	4413      	add	r3, r2
 8010266:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d009      	beq.n	8010282 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801026e:	2208      	movs	r2, #8
 8010270:	4909      	ldr	r1, [pc, #36]	; (8010298 <Get_SerialNum+0x50>)
 8010272:	68f8      	ldr	r0, [r7, #12]
 8010274:	f000 f814 	bl	80102a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010278:	2204      	movs	r2, #4
 801027a:	4908      	ldr	r1, [pc, #32]	; (801029c <Get_SerialNum+0x54>)
 801027c:	68b8      	ldr	r0, [r7, #8]
 801027e:	f000 f80f 	bl	80102a0 <IntToUnicode>
  }
}
 8010282:	bf00      	nop
 8010284:	3710      	adds	r7, #16
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}
 801028a:	bf00      	nop
 801028c:	1ff0f420 	.word	0x1ff0f420
 8010290:	1ff0f424 	.word	0x1ff0f424
 8010294:	1ff0f428 	.word	0x1ff0f428
 8010298:	200000f6 	.word	0x200000f6
 801029c:	20000106 	.word	0x20000106

080102a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b087      	sub	sp, #28
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	60f8      	str	r0, [r7, #12]
 80102a8:	60b9      	str	r1, [r7, #8]
 80102aa:	4613      	mov	r3, r2
 80102ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80102ae:	2300      	movs	r3, #0
 80102b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80102b2:	2300      	movs	r3, #0
 80102b4:	75fb      	strb	r3, [r7, #23]
 80102b6:	e027      	b.n	8010308 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	0f1b      	lsrs	r3, r3, #28
 80102bc:	2b09      	cmp	r3, #9
 80102be:	d80b      	bhi.n	80102d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	0f1b      	lsrs	r3, r3, #28
 80102c4:	b2da      	uxtb	r2, r3
 80102c6:	7dfb      	ldrb	r3, [r7, #23]
 80102c8:	005b      	lsls	r3, r3, #1
 80102ca:	4619      	mov	r1, r3
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	440b      	add	r3, r1
 80102d0:	3230      	adds	r2, #48	; 0x30
 80102d2:	b2d2      	uxtb	r2, r2
 80102d4:	701a      	strb	r2, [r3, #0]
 80102d6:	e00a      	b.n	80102ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	0f1b      	lsrs	r3, r3, #28
 80102dc:	b2da      	uxtb	r2, r3
 80102de:	7dfb      	ldrb	r3, [r7, #23]
 80102e0:	005b      	lsls	r3, r3, #1
 80102e2:	4619      	mov	r1, r3
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	440b      	add	r3, r1
 80102e8:	3237      	adds	r2, #55	; 0x37
 80102ea:	b2d2      	uxtb	r2, r2
 80102ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	011b      	lsls	r3, r3, #4
 80102f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80102f4:	7dfb      	ldrb	r3, [r7, #23]
 80102f6:	005b      	lsls	r3, r3, #1
 80102f8:	3301      	adds	r3, #1
 80102fa:	68ba      	ldr	r2, [r7, #8]
 80102fc:	4413      	add	r3, r2
 80102fe:	2200      	movs	r2, #0
 8010300:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010302:	7dfb      	ldrb	r3, [r7, #23]
 8010304:	3301      	adds	r3, #1
 8010306:	75fb      	strb	r3, [r7, #23]
 8010308:	7dfa      	ldrb	r2, [r7, #23]
 801030a:	79fb      	ldrb	r3, [r7, #7]
 801030c:	429a      	cmp	r2, r3
 801030e:	d3d3      	bcc.n	80102b8 <IntToUnicode+0x18>
  }
}
 8010310:	bf00      	nop
 8010312:	bf00      	nop
 8010314:	371c      	adds	r7, #28
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr
	...

08010320 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b0ae      	sub	sp, #184	; 0xb8
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010328:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801032c:	2200      	movs	r2, #0
 801032e:	601a      	str	r2, [r3, #0]
 8010330:	605a      	str	r2, [r3, #4]
 8010332:	609a      	str	r2, [r3, #8]
 8010334:	60da      	str	r2, [r3, #12]
 8010336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010338:	f107 0314 	add.w	r3, r7, #20
 801033c:	2290      	movs	r2, #144	; 0x90
 801033e:	2100      	movs	r1, #0
 8010340:	4618      	mov	r0, r3
 8010342:	f000 fd8a 	bl	8010e5a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801034e:	d151      	bne.n	80103f4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8010350:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010354:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8010356:	2300      	movs	r3, #0
 8010358:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801035c:	f107 0314 	add.w	r3, r7, #20
 8010360:	4618      	mov	r0, r3
 8010362:	f7f5 ff4b 	bl	80061fc <HAL_RCCEx_PeriphCLKConfig>
 8010366:	4603      	mov	r3, r0
 8010368:	2b00      	cmp	r3, #0
 801036a:	d001      	beq.n	8010370 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 801036c:	f7f1 f816 	bl	800139c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010370:	4b22      	ldr	r3, [pc, #136]	; (80103fc <HAL_PCD_MspInit+0xdc>)
 8010372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010374:	4a21      	ldr	r2, [pc, #132]	; (80103fc <HAL_PCD_MspInit+0xdc>)
 8010376:	f043 0301 	orr.w	r3, r3, #1
 801037a:	6313      	str	r3, [r2, #48]	; 0x30
 801037c:	4b1f      	ldr	r3, [pc, #124]	; (80103fc <HAL_PCD_MspInit+0xdc>)
 801037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010380:	f003 0301 	and.w	r3, r3, #1
 8010384:	613b      	str	r3, [r7, #16]
 8010386:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010388:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801038c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010390:	2302      	movs	r3, #2
 8010392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010396:	2300      	movs	r3, #0
 8010398:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801039c:	2303      	movs	r3, #3
 801039e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80103a2:	230a      	movs	r3, #10
 80103a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80103ac:	4619      	mov	r1, r3
 80103ae:	4814      	ldr	r0, [pc, #80]	; (8010400 <HAL_PCD_MspInit+0xe0>)
 80103b0:	f7f3 f818 	bl	80033e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80103b4:	4b11      	ldr	r3, [pc, #68]	; (80103fc <HAL_PCD_MspInit+0xdc>)
 80103b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103b8:	4a10      	ldr	r2, [pc, #64]	; (80103fc <HAL_PCD_MspInit+0xdc>)
 80103ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103be:	6353      	str	r3, [r2, #52]	; 0x34
 80103c0:	4b0e      	ldr	r3, [pc, #56]	; (80103fc <HAL_PCD_MspInit+0xdc>)
 80103c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103c8:	60fb      	str	r3, [r7, #12]
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	4b0b      	ldr	r3, [pc, #44]	; (80103fc <HAL_PCD_MspInit+0xdc>)
 80103ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103d0:	4a0a      	ldr	r2, [pc, #40]	; (80103fc <HAL_PCD_MspInit+0xdc>)
 80103d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80103d6:	6453      	str	r3, [r2, #68]	; 0x44
 80103d8:	4b08      	ldr	r3, [pc, #32]	; (80103fc <HAL_PCD_MspInit+0xdc>)
 80103da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103e0:	60bb      	str	r3, [r7, #8]
 80103e2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80103e4:	2200      	movs	r2, #0
 80103e6:	2100      	movs	r1, #0
 80103e8:	2043      	movs	r0, #67	; 0x43
 80103ea:	f7f2 fc1e 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80103ee:	2043      	movs	r0, #67	; 0x43
 80103f0:	f7f2 fc37 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80103f4:	bf00      	nop
 80103f6:	37b8      	adds	r7, #184	; 0xb8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}
 80103fc:	40023800 	.word	0x40023800
 8010400:	40020000 	.word	0x40020000

08010404 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010418:	4619      	mov	r1, r3
 801041a:	4610      	mov	r0, r2
 801041c:	f7fb fa81 	bl	800b922 <USBD_LL_SetupStage>
}
 8010420:	bf00      	nop
 8010422:	3708      	adds	r7, #8
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	460b      	mov	r3, r1
 8010432:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 801043a:	78fa      	ldrb	r2, [r7, #3]
 801043c:	6879      	ldr	r1, [r7, #4]
 801043e:	4613      	mov	r3, r2
 8010440:	00db      	lsls	r3, r3, #3
 8010442:	4413      	add	r3, r2
 8010444:	009b      	lsls	r3, r3, #2
 8010446:	440b      	add	r3, r1
 8010448:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	78fb      	ldrb	r3, [r7, #3]
 8010450:	4619      	mov	r1, r3
 8010452:	f7fb fabb 	bl	800b9cc <USBD_LL_DataOutStage>
}
 8010456:	bf00      	nop
 8010458:	3708      	adds	r7, #8
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}

0801045e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801045e:	b580      	push	{r7, lr}
 8010460:	b082      	sub	sp, #8
 8010462:	af00      	add	r7, sp, #0
 8010464:	6078      	str	r0, [r7, #4]
 8010466:	460b      	mov	r3, r1
 8010468:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8010470:	78fa      	ldrb	r2, [r7, #3]
 8010472:	6879      	ldr	r1, [r7, #4]
 8010474:	4613      	mov	r3, r2
 8010476:	00db      	lsls	r3, r3, #3
 8010478:	4413      	add	r3, r2
 801047a:	009b      	lsls	r3, r3, #2
 801047c:	440b      	add	r3, r1
 801047e:	334c      	adds	r3, #76	; 0x4c
 8010480:	681a      	ldr	r2, [r3, #0]
 8010482:	78fb      	ldrb	r3, [r7, #3]
 8010484:	4619      	mov	r1, r3
 8010486:	f7fb fb54 	bl	800bb32 <USBD_LL_DataInStage>
}
 801048a:	bf00      	nop
 801048c:	3708      	adds	r7, #8
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}

08010492 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010492:	b580      	push	{r7, lr}
 8010494:	b082      	sub	sp, #8
 8010496:	af00      	add	r7, sp, #0
 8010498:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7fb fc88 	bl	800bdb6 <USBD_LL_SOF>
}
 80104a6:	bf00      	nop
 80104a8:	3708      	adds	r7, #8
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}

080104ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104ae:	b580      	push	{r7, lr}
 80104b0:	b084      	sub	sp, #16
 80104b2:	af00      	add	r7, sp, #0
 80104b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80104b6:	2301      	movs	r3, #1
 80104b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	68db      	ldr	r3, [r3, #12]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d102      	bne.n	80104c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80104c2:	2300      	movs	r3, #0
 80104c4:	73fb      	strb	r3, [r7, #15]
 80104c6:	e008      	b.n	80104da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	68db      	ldr	r3, [r3, #12]
 80104cc:	2b02      	cmp	r3, #2
 80104ce:	d102      	bne.n	80104d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80104d0:	2301      	movs	r3, #1
 80104d2:	73fb      	strb	r3, [r7, #15]
 80104d4:	e001      	b.n	80104da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80104d6:	f7f0 ff61 	bl	800139c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80104e0:	7bfa      	ldrb	r2, [r7, #15]
 80104e2:	4611      	mov	r1, r2
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7fb fc28 	bl	800bd3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7fb fbd0 	bl	800bc96 <USBD_LL_Reset>
}
 80104f6:	bf00      	nop
 80104f8:	3710      	adds	r7, #16
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
	...

08010500 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b082      	sub	sp, #8
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801050e:	4618      	mov	r0, r3
 8010510:	f7fb fc23 	bl	800bd5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	6812      	ldr	r2, [r2, #0]
 8010522:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010526:	f043 0301 	orr.w	r3, r3, #1
 801052a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6a1b      	ldr	r3, [r3, #32]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d005      	beq.n	8010540 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010534:	4b04      	ldr	r3, [pc, #16]	; (8010548 <HAL_PCD_SuspendCallback+0x48>)
 8010536:	691b      	ldr	r3, [r3, #16]
 8010538:	4a03      	ldr	r2, [pc, #12]	; (8010548 <HAL_PCD_SuspendCallback+0x48>)
 801053a:	f043 0306 	orr.w	r3, r3, #6
 801053e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010540:	bf00      	nop
 8010542:	3708      	adds	r7, #8
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}
 8010548:	e000ed00 	.word	0xe000ed00

0801054c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801055a:	4618      	mov	r0, r3
 801055c:	f7fb fc13 	bl	800bd86 <USBD_LL_Resume>
}
 8010560:	bf00      	nop
 8010562:	3708      	adds	r7, #8
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	460b      	mov	r3, r1
 8010572:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801057a:	78fa      	ldrb	r2, [r7, #3]
 801057c:	4611      	mov	r1, r2
 801057e:	4618      	mov	r0, r3
 8010580:	f7fb fc6b 	bl	800be5a <USBD_LL_IsoOUTIncomplete>
}
 8010584:	bf00      	nop
 8010586:	3708      	adds	r7, #8
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	460b      	mov	r3, r1
 8010596:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801059e:	78fa      	ldrb	r2, [r7, #3]
 80105a0:	4611      	mov	r1, r2
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7fb fc27 	bl	800bdf6 <USBD_LL_IsoINIncomplete>
}
 80105a8:	bf00      	nop
 80105aa:	3708      	adds	r7, #8
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80105be:	4618      	mov	r0, r3
 80105c0:	f7fb fc7d 	bl	800bebe <USBD_LL_DevConnected>
}
 80105c4:	bf00      	nop
 80105c6:	3708      	adds	r7, #8
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80105da:	4618      	mov	r0, r3
 80105dc:	f7fb fc7a 	bl	800bed4 <USBD_LL_DevDisconnected>
}
 80105e0:	bf00      	nop
 80105e2:	3708      	adds	r7, #8
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d13c      	bne.n	8010672 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80105f8:	4a20      	ldr	r2, [pc, #128]	; (801067c <USBD_LL_Init+0x94>)
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	4a1e      	ldr	r2, [pc, #120]	; (801067c <USBD_LL_Init+0x94>)
 8010604:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010608:	4b1c      	ldr	r3, [pc, #112]	; (801067c <USBD_LL_Init+0x94>)
 801060a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801060e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010610:	4b1a      	ldr	r3, [pc, #104]	; (801067c <USBD_LL_Init+0x94>)
 8010612:	2206      	movs	r2, #6
 8010614:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010616:	4b19      	ldr	r3, [pc, #100]	; (801067c <USBD_LL_Init+0x94>)
 8010618:	2202      	movs	r2, #2
 801061a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801061c:	4b17      	ldr	r3, [pc, #92]	; (801067c <USBD_LL_Init+0x94>)
 801061e:	2200      	movs	r2, #0
 8010620:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010622:	4b16      	ldr	r3, [pc, #88]	; (801067c <USBD_LL_Init+0x94>)
 8010624:	2202      	movs	r2, #2
 8010626:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010628:	4b14      	ldr	r3, [pc, #80]	; (801067c <USBD_LL_Init+0x94>)
 801062a:	2200      	movs	r2, #0
 801062c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801062e:	4b13      	ldr	r3, [pc, #76]	; (801067c <USBD_LL_Init+0x94>)
 8010630:	2200      	movs	r2, #0
 8010632:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010634:	4b11      	ldr	r3, [pc, #68]	; (801067c <USBD_LL_Init+0x94>)
 8010636:	2200      	movs	r2, #0
 8010638:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801063a:	4b10      	ldr	r3, [pc, #64]	; (801067c <USBD_LL_Init+0x94>)
 801063c:	2200      	movs	r2, #0
 801063e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010640:	4b0e      	ldr	r3, [pc, #56]	; (801067c <USBD_LL_Init+0x94>)
 8010642:	2200      	movs	r2, #0
 8010644:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010646:	480d      	ldr	r0, [pc, #52]	; (801067c <USBD_LL_Init+0x94>)
 8010648:	f7f3 fe4b 	bl	80042e2 <HAL_PCD_Init>
 801064c:	4603      	mov	r3, r0
 801064e:	2b00      	cmp	r3, #0
 8010650:	d001      	beq.n	8010656 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010652:	f7f0 fea3 	bl	800139c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010656:	2180      	movs	r1, #128	; 0x80
 8010658:	4808      	ldr	r0, [pc, #32]	; (801067c <USBD_LL_Init+0x94>)
 801065a:	f7f5 f8c6 	bl	80057ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801065e:	2240      	movs	r2, #64	; 0x40
 8010660:	2100      	movs	r1, #0
 8010662:	4806      	ldr	r0, [pc, #24]	; (801067c <USBD_LL_Init+0x94>)
 8010664:	f7f5 f87a 	bl	800575c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010668:	2280      	movs	r2, #128	; 0x80
 801066a:	2101      	movs	r1, #1
 801066c:	4803      	ldr	r0, [pc, #12]	; (801067c <USBD_LL_Init+0x94>)
 801066e:	f7f5 f875 	bl	800575c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010672:	2300      	movs	r3, #0
}
 8010674:	4618      	mov	r0, r3
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}
 801067c:	2004c0bc 	.word	0x2004c0bc

08010680 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b084      	sub	sp, #16
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010688:	2300      	movs	r3, #0
 801068a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801068c:	2300      	movs	r3, #0
 801068e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010696:	4618      	mov	r0, r3
 8010698:	f7f3 ff47 	bl	800452a <HAL_PCD_Start>
 801069c:	4603      	mov	r3, r0
 801069e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106a0:	7bfb      	ldrb	r3, [r7, #15]
 80106a2:	4618      	mov	r0, r3
 80106a4:	f000 f97e 	bl	80109a4 <USBD_Get_USB_Status>
 80106a8:	4603      	mov	r3, r0
 80106aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3710      	adds	r7, #16
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80106b6:	b580      	push	{r7, lr}
 80106b8:	b084      	sub	sp, #16
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
 80106be:	4608      	mov	r0, r1
 80106c0:	4611      	mov	r1, r2
 80106c2:	461a      	mov	r2, r3
 80106c4:	4603      	mov	r3, r0
 80106c6:	70fb      	strb	r3, [r7, #3]
 80106c8:	460b      	mov	r3, r1
 80106ca:	70bb      	strb	r3, [r7, #2]
 80106cc:	4613      	mov	r3, r2
 80106ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106d0:	2300      	movs	r3, #0
 80106d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106d4:	2300      	movs	r3, #0
 80106d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80106de:	78bb      	ldrb	r3, [r7, #2]
 80106e0:	883a      	ldrh	r2, [r7, #0]
 80106e2:	78f9      	ldrb	r1, [r7, #3]
 80106e4:	f7f4 fc34 	bl	8004f50 <HAL_PCD_EP_Open>
 80106e8:	4603      	mov	r3, r0
 80106ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106ec:	7bfb      	ldrb	r3, [r7, #15]
 80106ee:	4618      	mov	r0, r3
 80106f0:	f000 f958 	bl	80109a4 <USBD_Get_USB_Status>
 80106f4:	4603      	mov	r3, r0
 80106f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3710      	adds	r7, #16
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}

08010702 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b084      	sub	sp, #16
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
 801070a:	460b      	mov	r3, r1
 801070c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801070e:	2300      	movs	r3, #0
 8010710:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010712:	2300      	movs	r3, #0
 8010714:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801071c:	78fa      	ldrb	r2, [r7, #3]
 801071e:	4611      	mov	r1, r2
 8010720:	4618      	mov	r0, r3
 8010722:	f7f4 fc7d 	bl	8005020 <HAL_PCD_EP_Close>
 8010726:	4603      	mov	r3, r0
 8010728:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801072a:	7bfb      	ldrb	r3, [r7, #15]
 801072c:	4618      	mov	r0, r3
 801072e:	f000 f939 	bl	80109a4 <USBD_Get_USB_Status>
 8010732:	4603      	mov	r3, r0
 8010734:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010736:	7bbb      	ldrb	r3, [r7, #14]
}
 8010738:	4618      	mov	r0, r3
 801073a:	3710      	adds	r7, #16
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b084      	sub	sp, #16
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	460b      	mov	r3, r1
 801074a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801074c:	2300      	movs	r3, #0
 801074e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010750:	2300      	movs	r3, #0
 8010752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801075a:	78fa      	ldrb	r2, [r7, #3]
 801075c:	4611      	mov	r1, r2
 801075e:	4618      	mov	r0, r3
 8010760:	f7f4 fd55 	bl	800520e <HAL_PCD_EP_SetStall>
 8010764:	4603      	mov	r3, r0
 8010766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010768:	7bfb      	ldrb	r3, [r7, #15]
 801076a:	4618      	mov	r0, r3
 801076c:	f000 f91a 	bl	80109a4 <USBD_Get_USB_Status>
 8010770:	4603      	mov	r3, r0
 8010772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010774:	7bbb      	ldrb	r3, [r7, #14]
}
 8010776:	4618      	mov	r0, r3
 8010778:	3710      	adds	r7, #16
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801077e:	b580      	push	{r7, lr}
 8010780:	b084      	sub	sp, #16
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
 8010786:	460b      	mov	r3, r1
 8010788:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801078a:	2300      	movs	r3, #0
 801078c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801078e:	2300      	movs	r3, #0
 8010790:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010798:	78fa      	ldrb	r2, [r7, #3]
 801079a:	4611      	mov	r1, r2
 801079c:	4618      	mov	r0, r3
 801079e:	f7f4 fd9a 	bl	80052d6 <HAL_PCD_EP_ClrStall>
 80107a2:	4603      	mov	r3, r0
 80107a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107a6:	7bfb      	ldrb	r3, [r7, #15]
 80107a8:	4618      	mov	r0, r3
 80107aa:	f000 f8fb 	bl	80109a4 <USBD_Get_USB_Status>
 80107ae:	4603      	mov	r3, r0
 80107b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3710      	adds	r7, #16
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107bc:	b480      	push	{r7}
 80107be:	b085      	sub	sp, #20
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	460b      	mov	r3, r1
 80107c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80107ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80107d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	da0b      	bge.n	80107f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80107d8:	78fb      	ldrb	r3, [r7, #3]
 80107da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107de:	68f9      	ldr	r1, [r7, #12]
 80107e0:	4613      	mov	r3, r2
 80107e2:	00db      	lsls	r3, r3, #3
 80107e4:	4413      	add	r3, r2
 80107e6:	009b      	lsls	r3, r3, #2
 80107e8:	440b      	add	r3, r1
 80107ea:	333e      	adds	r3, #62	; 0x3e
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	e00b      	b.n	8010808 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80107f0:	78fb      	ldrb	r3, [r7, #3]
 80107f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107f6:	68f9      	ldr	r1, [r7, #12]
 80107f8:	4613      	mov	r3, r2
 80107fa:	00db      	lsls	r3, r3, #3
 80107fc:	4413      	add	r3, r2
 80107fe:	009b      	lsls	r3, r3, #2
 8010800:	440b      	add	r3, r1
 8010802:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010806:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010808:	4618      	mov	r0, r3
 801080a:	3714      	adds	r7, #20
 801080c:	46bd      	mov	sp, r7
 801080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010812:	4770      	bx	lr

08010814 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b084      	sub	sp, #16
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	460b      	mov	r3, r1
 801081e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010820:	2300      	movs	r3, #0
 8010822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010824:	2300      	movs	r3, #0
 8010826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801082e:	78fa      	ldrb	r2, [r7, #3]
 8010830:	4611      	mov	r1, r2
 8010832:	4618      	mov	r0, r3
 8010834:	f7f4 fb67 	bl	8004f06 <HAL_PCD_SetAddress>
 8010838:	4603      	mov	r3, r0
 801083a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801083c:	7bfb      	ldrb	r3, [r7, #15]
 801083e:	4618      	mov	r0, r3
 8010840:	f000 f8b0 	bl	80109a4 <USBD_Get_USB_Status>
 8010844:	4603      	mov	r3, r0
 8010846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010848:	7bbb      	ldrb	r3, [r7, #14]
}
 801084a:	4618      	mov	r0, r3
 801084c:	3710      	adds	r7, #16
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}

08010852 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010852:	b580      	push	{r7, lr}
 8010854:	b086      	sub	sp, #24
 8010856:	af00      	add	r7, sp, #0
 8010858:	60f8      	str	r0, [r7, #12]
 801085a:	607a      	str	r2, [r7, #4]
 801085c:	603b      	str	r3, [r7, #0]
 801085e:	460b      	mov	r3, r1
 8010860:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010862:	2300      	movs	r3, #0
 8010864:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010866:	2300      	movs	r3, #0
 8010868:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010870:	7af9      	ldrb	r1, [r7, #11]
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	687a      	ldr	r2, [r7, #4]
 8010876:	f7f4 fc80 	bl	800517a <HAL_PCD_EP_Transmit>
 801087a:	4603      	mov	r3, r0
 801087c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801087e:	7dfb      	ldrb	r3, [r7, #23]
 8010880:	4618      	mov	r0, r3
 8010882:	f000 f88f 	bl	80109a4 <USBD_Get_USB_Status>
 8010886:	4603      	mov	r3, r0
 8010888:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801088a:	7dbb      	ldrb	r3, [r7, #22]
}
 801088c:	4618      	mov	r0, r3
 801088e:	3718      	adds	r7, #24
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}

08010894 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b086      	sub	sp, #24
 8010898:	af00      	add	r7, sp, #0
 801089a:	60f8      	str	r0, [r7, #12]
 801089c:	607a      	str	r2, [r7, #4]
 801089e:	603b      	str	r3, [r7, #0]
 80108a0:	460b      	mov	r3, r1
 80108a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108a4:	2300      	movs	r3, #0
 80108a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108a8:	2300      	movs	r3, #0
 80108aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80108b2:	7af9      	ldrb	r1, [r7, #11]
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	f7f4 fbfc 	bl	80050b4 <HAL_PCD_EP_Receive>
 80108bc:	4603      	mov	r3, r0
 80108be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108c0:	7dfb      	ldrb	r3, [r7, #23]
 80108c2:	4618      	mov	r0, r3
 80108c4:	f000 f86e 	bl	80109a4 <USBD_Get_USB_Status>
 80108c8:	4603      	mov	r3, r0
 80108ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80108cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3718      	adds	r7, #24
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}

080108d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108d6:	b580      	push	{r7, lr}
 80108d8:	b082      	sub	sp, #8
 80108da:	af00      	add	r7, sp, #0
 80108dc:	6078      	str	r0, [r7, #4]
 80108de:	460b      	mov	r3, r1
 80108e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80108e8:	78fa      	ldrb	r2, [r7, #3]
 80108ea:	4611      	mov	r1, r2
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7f4 fc2c 	bl	800514a <HAL_PCD_EP_GetRxCount>
 80108f2:	4603      	mov	r3, r0
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3708      	adds	r7, #8
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	460b      	mov	r3, r1
 8010906:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010908:	78fb      	ldrb	r3, [r7, #3]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d002      	beq.n	8010914 <HAL_PCDEx_LPM_Callback+0x18>
 801090e:	2b01      	cmp	r3, #1
 8010910:	d01f      	beq.n	8010952 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010912:	e03b      	b.n	801098c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6a1b      	ldr	r3, [r3, #32]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d007      	beq.n	801092c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801091c:	f000 f83c 	bl	8010998 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010920:	4b1c      	ldr	r3, [pc, #112]	; (8010994 <HAL_PCDEx_LPM_Callback+0x98>)
 8010922:	691b      	ldr	r3, [r3, #16]
 8010924:	4a1b      	ldr	r2, [pc, #108]	; (8010994 <HAL_PCDEx_LPM_Callback+0x98>)
 8010926:	f023 0306 	bic.w	r3, r3, #6
 801092a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	687a      	ldr	r2, [r7, #4]
 8010938:	6812      	ldr	r2, [r2, #0]
 801093a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801093e:	f023 0301 	bic.w	r3, r3, #1
 8010942:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801094a:	4618      	mov	r0, r3
 801094c:	f7fb fa1b 	bl	800bd86 <USBD_LL_Resume>
    break;
 8010950:	e01c      	b.n	801098c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	687a      	ldr	r2, [r7, #4]
 801095e:	6812      	ldr	r2, [r2, #0]
 8010960:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010964:	f043 0301 	orr.w	r3, r3, #1
 8010968:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010970:	4618      	mov	r0, r3
 8010972:	f7fb f9f2 	bl	800bd5a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6a1b      	ldr	r3, [r3, #32]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d005      	beq.n	801098a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801097e:	4b05      	ldr	r3, [pc, #20]	; (8010994 <HAL_PCDEx_LPM_Callback+0x98>)
 8010980:	691b      	ldr	r3, [r3, #16]
 8010982:	4a04      	ldr	r2, [pc, #16]	; (8010994 <HAL_PCDEx_LPM_Callback+0x98>)
 8010984:	f043 0306 	orr.w	r3, r3, #6
 8010988:	6113      	str	r3, [r2, #16]
    break;
 801098a:	bf00      	nop
}
 801098c:	bf00      	nop
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	e000ed00 	.word	0xe000ed00

08010998 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801099c:	f7f0 f852 	bl	8000a44 <SystemClock_Config>
}
 80109a0:	bf00      	nop
 80109a2:	bd80      	pop	{r7, pc}

080109a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80109a4:	b480      	push	{r7}
 80109a6:	b085      	sub	sp, #20
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	4603      	mov	r3, r0
 80109ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109ae:	2300      	movs	r3, #0
 80109b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80109b2:	79fb      	ldrb	r3, [r7, #7]
 80109b4:	2b03      	cmp	r3, #3
 80109b6:	d817      	bhi.n	80109e8 <USBD_Get_USB_Status+0x44>
 80109b8:	a201      	add	r2, pc, #4	; (adr r2, 80109c0 <USBD_Get_USB_Status+0x1c>)
 80109ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109be:	bf00      	nop
 80109c0:	080109d1 	.word	0x080109d1
 80109c4:	080109d7 	.word	0x080109d7
 80109c8:	080109dd 	.word	0x080109dd
 80109cc:	080109e3 	.word	0x080109e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80109d0:	2300      	movs	r3, #0
 80109d2:	73fb      	strb	r3, [r7, #15]
    break;
 80109d4:	e00b      	b.n	80109ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80109d6:	2303      	movs	r3, #3
 80109d8:	73fb      	strb	r3, [r7, #15]
    break;
 80109da:	e008      	b.n	80109ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80109dc:	2301      	movs	r3, #1
 80109de:	73fb      	strb	r3, [r7, #15]
    break;
 80109e0:	e005      	b.n	80109ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80109e2:	2303      	movs	r3, #3
 80109e4:	73fb      	strb	r3, [r7, #15]
    break;
 80109e6:	e002      	b.n	80109ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80109e8:	2303      	movs	r3, #3
 80109ea:	73fb      	strb	r3, [r7, #15]
    break;
 80109ec:	bf00      	nop
  }
  return usb_status;
 80109ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3714      	adds	r7, #20
 80109f4:	46bd      	mov	sp, r7
 80109f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fa:	4770      	bx	lr

080109fc <malloc>:
 80109fc:	4b02      	ldr	r3, [pc, #8]	; (8010a08 <malloc+0xc>)
 80109fe:	4601      	mov	r1, r0
 8010a00:	6818      	ldr	r0, [r3, #0]
 8010a02:	f000 b82b 	b.w	8010a5c <_malloc_r>
 8010a06:	bf00      	nop
 8010a08:	20000168 	.word	0x20000168

08010a0c <free>:
 8010a0c:	4b02      	ldr	r3, [pc, #8]	; (8010a18 <free+0xc>)
 8010a0e:	4601      	mov	r1, r0
 8010a10:	6818      	ldr	r0, [r3, #0]
 8010a12:	f000 ba69 	b.w	8010ee8 <_free_r>
 8010a16:	bf00      	nop
 8010a18:	20000168 	.word	0x20000168

08010a1c <sbrk_aligned>:
 8010a1c:	b570      	push	{r4, r5, r6, lr}
 8010a1e:	4e0e      	ldr	r6, [pc, #56]	; (8010a58 <sbrk_aligned+0x3c>)
 8010a20:	460c      	mov	r4, r1
 8010a22:	6831      	ldr	r1, [r6, #0]
 8010a24:	4605      	mov	r5, r0
 8010a26:	b911      	cbnz	r1, 8010a2e <sbrk_aligned+0x12>
 8010a28:	f000 fa20 	bl	8010e6c <_sbrk_r>
 8010a2c:	6030      	str	r0, [r6, #0]
 8010a2e:	4621      	mov	r1, r4
 8010a30:	4628      	mov	r0, r5
 8010a32:	f000 fa1b 	bl	8010e6c <_sbrk_r>
 8010a36:	1c43      	adds	r3, r0, #1
 8010a38:	d00a      	beq.n	8010a50 <sbrk_aligned+0x34>
 8010a3a:	1cc4      	adds	r4, r0, #3
 8010a3c:	f024 0403 	bic.w	r4, r4, #3
 8010a40:	42a0      	cmp	r0, r4
 8010a42:	d007      	beq.n	8010a54 <sbrk_aligned+0x38>
 8010a44:	1a21      	subs	r1, r4, r0
 8010a46:	4628      	mov	r0, r5
 8010a48:	f000 fa10 	bl	8010e6c <_sbrk_r>
 8010a4c:	3001      	adds	r0, #1
 8010a4e:	d101      	bne.n	8010a54 <sbrk_aligned+0x38>
 8010a50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010a54:	4620      	mov	r0, r4
 8010a56:	bd70      	pop	{r4, r5, r6, pc}
 8010a58:	2004c5c8 	.word	0x2004c5c8

08010a5c <_malloc_r>:
 8010a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a60:	1ccd      	adds	r5, r1, #3
 8010a62:	f025 0503 	bic.w	r5, r5, #3
 8010a66:	3508      	adds	r5, #8
 8010a68:	2d0c      	cmp	r5, #12
 8010a6a:	bf38      	it	cc
 8010a6c:	250c      	movcc	r5, #12
 8010a6e:	2d00      	cmp	r5, #0
 8010a70:	4607      	mov	r7, r0
 8010a72:	db01      	blt.n	8010a78 <_malloc_r+0x1c>
 8010a74:	42a9      	cmp	r1, r5
 8010a76:	d905      	bls.n	8010a84 <_malloc_r+0x28>
 8010a78:	230c      	movs	r3, #12
 8010a7a:	603b      	str	r3, [r7, #0]
 8010a7c:	2600      	movs	r6, #0
 8010a7e:	4630      	mov	r0, r6
 8010a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010b58 <_malloc_r+0xfc>
 8010a88:	f000 f89c 	bl	8010bc4 <__malloc_lock>
 8010a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8010a90:	461c      	mov	r4, r3
 8010a92:	bb5c      	cbnz	r4, 8010aec <_malloc_r+0x90>
 8010a94:	4629      	mov	r1, r5
 8010a96:	4638      	mov	r0, r7
 8010a98:	f7ff ffc0 	bl	8010a1c <sbrk_aligned>
 8010a9c:	1c43      	adds	r3, r0, #1
 8010a9e:	4604      	mov	r4, r0
 8010aa0:	d155      	bne.n	8010b4e <_malloc_r+0xf2>
 8010aa2:	f8d8 4000 	ldr.w	r4, [r8]
 8010aa6:	4626      	mov	r6, r4
 8010aa8:	2e00      	cmp	r6, #0
 8010aaa:	d145      	bne.n	8010b38 <_malloc_r+0xdc>
 8010aac:	2c00      	cmp	r4, #0
 8010aae:	d048      	beq.n	8010b42 <_malloc_r+0xe6>
 8010ab0:	6823      	ldr	r3, [r4, #0]
 8010ab2:	4631      	mov	r1, r6
 8010ab4:	4638      	mov	r0, r7
 8010ab6:	eb04 0903 	add.w	r9, r4, r3
 8010aba:	f000 f9d7 	bl	8010e6c <_sbrk_r>
 8010abe:	4581      	cmp	r9, r0
 8010ac0:	d13f      	bne.n	8010b42 <_malloc_r+0xe6>
 8010ac2:	6821      	ldr	r1, [r4, #0]
 8010ac4:	1a6d      	subs	r5, r5, r1
 8010ac6:	4629      	mov	r1, r5
 8010ac8:	4638      	mov	r0, r7
 8010aca:	f7ff ffa7 	bl	8010a1c <sbrk_aligned>
 8010ace:	3001      	adds	r0, #1
 8010ad0:	d037      	beq.n	8010b42 <_malloc_r+0xe6>
 8010ad2:	6823      	ldr	r3, [r4, #0]
 8010ad4:	442b      	add	r3, r5
 8010ad6:	6023      	str	r3, [r4, #0]
 8010ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d038      	beq.n	8010b52 <_malloc_r+0xf6>
 8010ae0:	685a      	ldr	r2, [r3, #4]
 8010ae2:	42a2      	cmp	r2, r4
 8010ae4:	d12b      	bne.n	8010b3e <_malloc_r+0xe2>
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	605a      	str	r2, [r3, #4]
 8010aea:	e00f      	b.n	8010b0c <_malloc_r+0xb0>
 8010aec:	6822      	ldr	r2, [r4, #0]
 8010aee:	1b52      	subs	r2, r2, r5
 8010af0:	d41f      	bmi.n	8010b32 <_malloc_r+0xd6>
 8010af2:	2a0b      	cmp	r2, #11
 8010af4:	d917      	bls.n	8010b26 <_malloc_r+0xca>
 8010af6:	1961      	adds	r1, r4, r5
 8010af8:	42a3      	cmp	r3, r4
 8010afa:	6025      	str	r5, [r4, #0]
 8010afc:	bf18      	it	ne
 8010afe:	6059      	strne	r1, [r3, #4]
 8010b00:	6863      	ldr	r3, [r4, #4]
 8010b02:	bf08      	it	eq
 8010b04:	f8c8 1000 	streq.w	r1, [r8]
 8010b08:	5162      	str	r2, [r4, r5]
 8010b0a:	604b      	str	r3, [r1, #4]
 8010b0c:	4638      	mov	r0, r7
 8010b0e:	f104 060b 	add.w	r6, r4, #11
 8010b12:	f000 f85d 	bl	8010bd0 <__malloc_unlock>
 8010b16:	f026 0607 	bic.w	r6, r6, #7
 8010b1a:	1d23      	adds	r3, r4, #4
 8010b1c:	1af2      	subs	r2, r6, r3
 8010b1e:	d0ae      	beq.n	8010a7e <_malloc_r+0x22>
 8010b20:	1b9b      	subs	r3, r3, r6
 8010b22:	50a3      	str	r3, [r4, r2]
 8010b24:	e7ab      	b.n	8010a7e <_malloc_r+0x22>
 8010b26:	42a3      	cmp	r3, r4
 8010b28:	6862      	ldr	r2, [r4, #4]
 8010b2a:	d1dd      	bne.n	8010ae8 <_malloc_r+0x8c>
 8010b2c:	f8c8 2000 	str.w	r2, [r8]
 8010b30:	e7ec      	b.n	8010b0c <_malloc_r+0xb0>
 8010b32:	4623      	mov	r3, r4
 8010b34:	6864      	ldr	r4, [r4, #4]
 8010b36:	e7ac      	b.n	8010a92 <_malloc_r+0x36>
 8010b38:	4634      	mov	r4, r6
 8010b3a:	6876      	ldr	r6, [r6, #4]
 8010b3c:	e7b4      	b.n	8010aa8 <_malloc_r+0x4c>
 8010b3e:	4613      	mov	r3, r2
 8010b40:	e7cc      	b.n	8010adc <_malloc_r+0x80>
 8010b42:	230c      	movs	r3, #12
 8010b44:	603b      	str	r3, [r7, #0]
 8010b46:	4638      	mov	r0, r7
 8010b48:	f000 f842 	bl	8010bd0 <__malloc_unlock>
 8010b4c:	e797      	b.n	8010a7e <_malloc_r+0x22>
 8010b4e:	6025      	str	r5, [r4, #0]
 8010b50:	e7dc      	b.n	8010b0c <_malloc_r+0xb0>
 8010b52:	605b      	str	r3, [r3, #4]
 8010b54:	deff      	udf	#255	; 0xff
 8010b56:	bf00      	nop
 8010b58:	2004c5c4 	.word	0x2004c5c4

08010b5c <sniprintf>:
 8010b5c:	b40c      	push	{r2, r3}
 8010b5e:	b530      	push	{r4, r5, lr}
 8010b60:	4b17      	ldr	r3, [pc, #92]	; (8010bc0 <sniprintf+0x64>)
 8010b62:	1e0c      	subs	r4, r1, #0
 8010b64:	681d      	ldr	r5, [r3, #0]
 8010b66:	b09d      	sub	sp, #116	; 0x74
 8010b68:	da08      	bge.n	8010b7c <sniprintf+0x20>
 8010b6a:	238b      	movs	r3, #139	; 0x8b
 8010b6c:	602b      	str	r3, [r5, #0]
 8010b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b72:	b01d      	add	sp, #116	; 0x74
 8010b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b78:	b002      	add	sp, #8
 8010b7a:	4770      	bx	lr
 8010b7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010b80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010b84:	bf14      	ite	ne
 8010b86:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010b8a:	4623      	moveq	r3, r4
 8010b8c:	9304      	str	r3, [sp, #16]
 8010b8e:	9307      	str	r3, [sp, #28]
 8010b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b94:	9002      	str	r0, [sp, #8]
 8010b96:	9006      	str	r0, [sp, #24]
 8010b98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010b9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010b9e:	ab21      	add	r3, sp, #132	; 0x84
 8010ba0:	a902      	add	r1, sp, #8
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	9301      	str	r3, [sp, #4]
 8010ba6:	f000 fa45 	bl	8011034 <_svfiprintf_r>
 8010baa:	1c43      	adds	r3, r0, #1
 8010bac:	bfbc      	itt	lt
 8010bae:	238b      	movlt	r3, #139	; 0x8b
 8010bb0:	602b      	strlt	r3, [r5, #0]
 8010bb2:	2c00      	cmp	r4, #0
 8010bb4:	d0dd      	beq.n	8010b72 <sniprintf+0x16>
 8010bb6:	9b02      	ldr	r3, [sp, #8]
 8010bb8:	2200      	movs	r2, #0
 8010bba:	701a      	strb	r2, [r3, #0]
 8010bbc:	e7d9      	b.n	8010b72 <sniprintf+0x16>
 8010bbe:	bf00      	nop
 8010bc0:	20000168 	.word	0x20000168

08010bc4 <__malloc_lock>:
 8010bc4:	4801      	ldr	r0, [pc, #4]	; (8010bcc <__malloc_lock+0x8>)
 8010bc6:	f000 b98c 	b.w	8010ee2 <__retarget_lock_acquire_recursive>
 8010bca:	bf00      	nop
 8010bcc:	2004c708 	.word	0x2004c708

08010bd0 <__malloc_unlock>:
 8010bd0:	4801      	ldr	r0, [pc, #4]	; (8010bd8 <__malloc_unlock+0x8>)
 8010bd2:	f000 b987 	b.w	8010ee4 <__retarget_lock_release_recursive>
 8010bd6:	bf00      	nop
 8010bd8:	2004c708 	.word	0x2004c708

08010bdc <std>:
 8010bdc:	2300      	movs	r3, #0
 8010bde:	b510      	push	{r4, lr}
 8010be0:	4604      	mov	r4, r0
 8010be2:	e9c0 3300 	strd	r3, r3, [r0]
 8010be6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010bea:	6083      	str	r3, [r0, #8]
 8010bec:	8181      	strh	r1, [r0, #12]
 8010bee:	6643      	str	r3, [r0, #100]	; 0x64
 8010bf0:	81c2      	strh	r2, [r0, #14]
 8010bf2:	6183      	str	r3, [r0, #24]
 8010bf4:	4619      	mov	r1, r3
 8010bf6:	2208      	movs	r2, #8
 8010bf8:	305c      	adds	r0, #92	; 0x5c
 8010bfa:	f000 f92e 	bl	8010e5a <memset>
 8010bfe:	4b0d      	ldr	r3, [pc, #52]	; (8010c34 <std+0x58>)
 8010c00:	6263      	str	r3, [r4, #36]	; 0x24
 8010c02:	4b0d      	ldr	r3, [pc, #52]	; (8010c38 <std+0x5c>)
 8010c04:	62a3      	str	r3, [r4, #40]	; 0x28
 8010c06:	4b0d      	ldr	r3, [pc, #52]	; (8010c3c <std+0x60>)
 8010c08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010c0a:	4b0d      	ldr	r3, [pc, #52]	; (8010c40 <std+0x64>)
 8010c0c:	6323      	str	r3, [r4, #48]	; 0x30
 8010c0e:	4b0d      	ldr	r3, [pc, #52]	; (8010c44 <std+0x68>)
 8010c10:	6224      	str	r4, [r4, #32]
 8010c12:	429c      	cmp	r4, r3
 8010c14:	d006      	beq.n	8010c24 <std+0x48>
 8010c16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010c1a:	4294      	cmp	r4, r2
 8010c1c:	d002      	beq.n	8010c24 <std+0x48>
 8010c1e:	33d0      	adds	r3, #208	; 0xd0
 8010c20:	429c      	cmp	r4, r3
 8010c22:	d105      	bne.n	8010c30 <std+0x54>
 8010c24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c2c:	f000 b958 	b.w	8010ee0 <__retarget_lock_init_recursive>
 8010c30:	bd10      	pop	{r4, pc}
 8010c32:	bf00      	nop
 8010c34:	08011935 	.word	0x08011935
 8010c38:	08011957 	.word	0x08011957
 8010c3c:	0801198f 	.word	0x0801198f
 8010c40:	080119b3 	.word	0x080119b3
 8010c44:	2004c5cc 	.word	0x2004c5cc

08010c48 <stdio_exit_handler>:
 8010c48:	4a02      	ldr	r2, [pc, #8]	; (8010c54 <stdio_exit_handler+0xc>)
 8010c4a:	4903      	ldr	r1, [pc, #12]	; (8010c58 <stdio_exit_handler+0x10>)
 8010c4c:	4803      	ldr	r0, [pc, #12]	; (8010c5c <stdio_exit_handler+0x14>)
 8010c4e:	f000 b869 	b.w	8010d24 <_fwalk_sglue>
 8010c52:	bf00      	nop
 8010c54:	20000110 	.word	0x20000110
 8010c58:	080118e5 	.word	0x080118e5
 8010c5c:	2000011c 	.word	0x2000011c

08010c60 <cleanup_stdio>:
 8010c60:	6841      	ldr	r1, [r0, #4]
 8010c62:	4b0c      	ldr	r3, [pc, #48]	; (8010c94 <cleanup_stdio+0x34>)
 8010c64:	4299      	cmp	r1, r3
 8010c66:	b510      	push	{r4, lr}
 8010c68:	4604      	mov	r4, r0
 8010c6a:	d001      	beq.n	8010c70 <cleanup_stdio+0x10>
 8010c6c:	f000 fe3a 	bl	80118e4 <_fflush_r>
 8010c70:	68a1      	ldr	r1, [r4, #8]
 8010c72:	4b09      	ldr	r3, [pc, #36]	; (8010c98 <cleanup_stdio+0x38>)
 8010c74:	4299      	cmp	r1, r3
 8010c76:	d002      	beq.n	8010c7e <cleanup_stdio+0x1e>
 8010c78:	4620      	mov	r0, r4
 8010c7a:	f000 fe33 	bl	80118e4 <_fflush_r>
 8010c7e:	68e1      	ldr	r1, [r4, #12]
 8010c80:	4b06      	ldr	r3, [pc, #24]	; (8010c9c <cleanup_stdio+0x3c>)
 8010c82:	4299      	cmp	r1, r3
 8010c84:	d004      	beq.n	8010c90 <cleanup_stdio+0x30>
 8010c86:	4620      	mov	r0, r4
 8010c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c8c:	f000 be2a 	b.w	80118e4 <_fflush_r>
 8010c90:	bd10      	pop	{r4, pc}
 8010c92:	bf00      	nop
 8010c94:	2004c5cc 	.word	0x2004c5cc
 8010c98:	2004c634 	.word	0x2004c634
 8010c9c:	2004c69c 	.word	0x2004c69c

08010ca0 <global_stdio_init.part.0>:
 8010ca0:	b510      	push	{r4, lr}
 8010ca2:	4b0b      	ldr	r3, [pc, #44]	; (8010cd0 <global_stdio_init.part.0+0x30>)
 8010ca4:	4c0b      	ldr	r4, [pc, #44]	; (8010cd4 <global_stdio_init.part.0+0x34>)
 8010ca6:	4a0c      	ldr	r2, [pc, #48]	; (8010cd8 <global_stdio_init.part.0+0x38>)
 8010ca8:	601a      	str	r2, [r3, #0]
 8010caa:	4620      	mov	r0, r4
 8010cac:	2200      	movs	r2, #0
 8010cae:	2104      	movs	r1, #4
 8010cb0:	f7ff ff94 	bl	8010bdc <std>
 8010cb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010cb8:	2201      	movs	r2, #1
 8010cba:	2109      	movs	r1, #9
 8010cbc:	f7ff ff8e 	bl	8010bdc <std>
 8010cc0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010cc4:	2202      	movs	r2, #2
 8010cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cca:	2112      	movs	r1, #18
 8010ccc:	f7ff bf86 	b.w	8010bdc <std>
 8010cd0:	2004c704 	.word	0x2004c704
 8010cd4:	2004c5cc 	.word	0x2004c5cc
 8010cd8:	08010c49 	.word	0x08010c49

08010cdc <__sfp_lock_acquire>:
 8010cdc:	4801      	ldr	r0, [pc, #4]	; (8010ce4 <__sfp_lock_acquire+0x8>)
 8010cde:	f000 b900 	b.w	8010ee2 <__retarget_lock_acquire_recursive>
 8010ce2:	bf00      	nop
 8010ce4:	2004c709 	.word	0x2004c709

08010ce8 <__sfp_lock_release>:
 8010ce8:	4801      	ldr	r0, [pc, #4]	; (8010cf0 <__sfp_lock_release+0x8>)
 8010cea:	f000 b8fb 	b.w	8010ee4 <__retarget_lock_release_recursive>
 8010cee:	bf00      	nop
 8010cf0:	2004c709 	.word	0x2004c709

08010cf4 <__sinit>:
 8010cf4:	b510      	push	{r4, lr}
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	f7ff fff0 	bl	8010cdc <__sfp_lock_acquire>
 8010cfc:	6a23      	ldr	r3, [r4, #32]
 8010cfe:	b11b      	cbz	r3, 8010d08 <__sinit+0x14>
 8010d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d04:	f7ff bff0 	b.w	8010ce8 <__sfp_lock_release>
 8010d08:	4b04      	ldr	r3, [pc, #16]	; (8010d1c <__sinit+0x28>)
 8010d0a:	6223      	str	r3, [r4, #32]
 8010d0c:	4b04      	ldr	r3, [pc, #16]	; (8010d20 <__sinit+0x2c>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d1f5      	bne.n	8010d00 <__sinit+0xc>
 8010d14:	f7ff ffc4 	bl	8010ca0 <global_stdio_init.part.0>
 8010d18:	e7f2      	b.n	8010d00 <__sinit+0xc>
 8010d1a:	bf00      	nop
 8010d1c:	08010c61 	.word	0x08010c61
 8010d20:	2004c704 	.word	0x2004c704

08010d24 <_fwalk_sglue>:
 8010d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d28:	4607      	mov	r7, r0
 8010d2a:	4688      	mov	r8, r1
 8010d2c:	4614      	mov	r4, r2
 8010d2e:	2600      	movs	r6, #0
 8010d30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d34:	f1b9 0901 	subs.w	r9, r9, #1
 8010d38:	d505      	bpl.n	8010d46 <_fwalk_sglue+0x22>
 8010d3a:	6824      	ldr	r4, [r4, #0]
 8010d3c:	2c00      	cmp	r4, #0
 8010d3e:	d1f7      	bne.n	8010d30 <_fwalk_sglue+0xc>
 8010d40:	4630      	mov	r0, r6
 8010d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d46:	89ab      	ldrh	r3, [r5, #12]
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	d907      	bls.n	8010d5c <_fwalk_sglue+0x38>
 8010d4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d50:	3301      	adds	r3, #1
 8010d52:	d003      	beq.n	8010d5c <_fwalk_sglue+0x38>
 8010d54:	4629      	mov	r1, r5
 8010d56:	4638      	mov	r0, r7
 8010d58:	47c0      	blx	r8
 8010d5a:	4306      	orrs	r6, r0
 8010d5c:	3568      	adds	r5, #104	; 0x68
 8010d5e:	e7e9      	b.n	8010d34 <_fwalk_sglue+0x10>

08010d60 <iprintf>:
 8010d60:	b40f      	push	{r0, r1, r2, r3}
 8010d62:	b507      	push	{r0, r1, r2, lr}
 8010d64:	4906      	ldr	r1, [pc, #24]	; (8010d80 <iprintf+0x20>)
 8010d66:	ab04      	add	r3, sp, #16
 8010d68:	6808      	ldr	r0, [r1, #0]
 8010d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d6e:	6881      	ldr	r1, [r0, #8]
 8010d70:	9301      	str	r3, [sp, #4]
 8010d72:	f000 fa87 	bl	8011284 <_vfiprintf_r>
 8010d76:	b003      	add	sp, #12
 8010d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d7c:	b004      	add	sp, #16
 8010d7e:	4770      	bx	lr
 8010d80:	20000168 	.word	0x20000168

08010d84 <_puts_r>:
 8010d84:	6a03      	ldr	r3, [r0, #32]
 8010d86:	b570      	push	{r4, r5, r6, lr}
 8010d88:	6884      	ldr	r4, [r0, #8]
 8010d8a:	4605      	mov	r5, r0
 8010d8c:	460e      	mov	r6, r1
 8010d8e:	b90b      	cbnz	r3, 8010d94 <_puts_r+0x10>
 8010d90:	f7ff ffb0 	bl	8010cf4 <__sinit>
 8010d94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d96:	07db      	lsls	r3, r3, #31
 8010d98:	d405      	bmi.n	8010da6 <_puts_r+0x22>
 8010d9a:	89a3      	ldrh	r3, [r4, #12]
 8010d9c:	0598      	lsls	r0, r3, #22
 8010d9e:	d402      	bmi.n	8010da6 <_puts_r+0x22>
 8010da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010da2:	f000 f89e 	bl	8010ee2 <__retarget_lock_acquire_recursive>
 8010da6:	89a3      	ldrh	r3, [r4, #12]
 8010da8:	0719      	lsls	r1, r3, #28
 8010daa:	d513      	bpl.n	8010dd4 <_puts_r+0x50>
 8010dac:	6923      	ldr	r3, [r4, #16]
 8010dae:	b18b      	cbz	r3, 8010dd4 <_puts_r+0x50>
 8010db0:	3e01      	subs	r6, #1
 8010db2:	68a3      	ldr	r3, [r4, #8]
 8010db4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010db8:	3b01      	subs	r3, #1
 8010dba:	60a3      	str	r3, [r4, #8]
 8010dbc:	b9e9      	cbnz	r1, 8010dfa <_puts_r+0x76>
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	da2e      	bge.n	8010e20 <_puts_r+0x9c>
 8010dc2:	4622      	mov	r2, r4
 8010dc4:	210a      	movs	r1, #10
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f000 fe26 	bl	8011a18 <__swbuf_r>
 8010dcc:	3001      	adds	r0, #1
 8010dce:	d007      	beq.n	8010de0 <_puts_r+0x5c>
 8010dd0:	250a      	movs	r5, #10
 8010dd2:	e007      	b.n	8010de4 <_puts_r+0x60>
 8010dd4:	4621      	mov	r1, r4
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	f000 fe5c 	bl	8011a94 <__swsetup_r>
 8010ddc:	2800      	cmp	r0, #0
 8010dde:	d0e7      	beq.n	8010db0 <_puts_r+0x2c>
 8010de0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010de4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010de6:	07da      	lsls	r2, r3, #31
 8010de8:	d405      	bmi.n	8010df6 <_puts_r+0x72>
 8010dea:	89a3      	ldrh	r3, [r4, #12]
 8010dec:	059b      	lsls	r3, r3, #22
 8010dee:	d402      	bmi.n	8010df6 <_puts_r+0x72>
 8010df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010df2:	f000 f877 	bl	8010ee4 <__retarget_lock_release_recursive>
 8010df6:	4628      	mov	r0, r5
 8010df8:	bd70      	pop	{r4, r5, r6, pc}
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	da04      	bge.n	8010e08 <_puts_r+0x84>
 8010dfe:	69a2      	ldr	r2, [r4, #24]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	dc06      	bgt.n	8010e12 <_puts_r+0x8e>
 8010e04:	290a      	cmp	r1, #10
 8010e06:	d004      	beq.n	8010e12 <_puts_r+0x8e>
 8010e08:	6823      	ldr	r3, [r4, #0]
 8010e0a:	1c5a      	adds	r2, r3, #1
 8010e0c:	6022      	str	r2, [r4, #0]
 8010e0e:	7019      	strb	r1, [r3, #0]
 8010e10:	e7cf      	b.n	8010db2 <_puts_r+0x2e>
 8010e12:	4622      	mov	r2, r4
 8010e14:	4628      	mov	r0, r5
 8010e16:	f000 fdff 	bl	8011a18 <__swbuf_r>
 8010e1a:	3001      	adds	r0, #1
 8010e1c:	d1c9      	bne.n	8010db2 <_puts_r+0x2e>
 8010e1e:	e7df      	b.n	8010de0 <_puts_r+0x5c>
 8010e20:	6823      	ldr	r3, [r4, #0]
 8010e22:	250a      	movs	r5, #10
 8010e24:	1c5a      	adds	r2, r3, #1
 8010e26:	6022      	str	r2, [r4, #0]
 8010e28:	701d      	strb	r5, [r3, #0]
 8010e2a:	e7db      	b.n	8010de4 <_puts_r+0x60>

08010e2c <puts>:
 8010e2c:	4b02      	ldr	r3, [pc, #8]	; (8010e38 <puts+0xc>)
 8010e2e:	4601      	mov	r1, r0
 8010e30:	6818      	ldr	r0, [r3, #0]
 8010e32:	f7ff bfa7 	b.w	8010d84 <_puts_r>
 8010e36:	bf00      	nop
 8010e38:	20000168 	.word	0x20000168

08010e3c <strcat>:
 8010e3c:	b510      	push	{r4, lr}
 8010e3e:	4602      	mov	r2, r0
 8010e40:	7814      	ldrb	r4, [r2, #0]
 8010e42:	4613      	mov	r3, r2
 8010e44:	3201      	adds	r2, #1
 8010e46:	2c00      	cmp	r4, #0
 8010e48:	d1fa      	bne.n	8010e40 <strcat+0x4>
 8010e4a:	3b01      	subs	r3, #1
 8010e4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e50:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010e54:	2a00      	cmp	r2, #0
 8010e56:	d1f9      	bne.n	8010e4c <strcat+0x10>
 8010e58:	bd10      	pop	{r4, pc}

08010e5a <memset>:
 8010e5a:	4402      	add	r2, r0
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d100      	bne.n	8010e64 <memset+0xa>
 8010e62:	4770      	bx	lr
 8010e64:	f803 1b01 	strb.w	r1, [r3], #1
 8010e68:	e7f9      	b.n	8010e5e <memset+0x4>
	...

08010e6c <_sbrk_r>:
 8010e6c:	b538      	push	{r3, r4, r5, lr}
 8010e6e:	4d06      	ldr	r5, [pc, #24]	; (8010e88 <_sbrk_r+0x1c>)
 8010e70:	2300      	movs	r3, #0
 8010e72:	4604      	mov	r4, r0
 8010e74:	4608      	mov	r0, r1
 8010e76:	602b      	str	r3, [r5, #0]
 8010e78:	f7f0 fdee 	bl	8001a58 <_sbrk>
 8010e7c:	1c43      	adds	r3, r0, #1
 8010e7e:	d102      	bne.n	8010e86 <_sbrk_r+0x1a>
 8010e80:	682b      	ldr	r3, [r5, #0]
 8010e82:	b103      	cbz	r3, 8010e86 <_sbrk_r+0x1a>
 8010e84:	6023      	str	r3, [r4, #0]
 8010e86:	bd38      	pop	{r3, r4, r5, pc}
 8010e88:	2004c70c 	.word	0x2004c70c

08010e8c <__errno>:
 8010e8c:	4b01      	ldr	r3, [pc, #4]	; (8010e94 <__errno+0x8>)
 8010e8e:	6818      	ldr	r0, [r3, #0]
 8010e90:	4770      	bx	lr
 8010e92:	bf00      	nop
 8010e94:	20000168 	.word	0x20000168

08010e98 <__libc_init_array>:
 8010e98:	b570      	push	{r4, r5, r6, lr}
 8010e9a:	4d0d      	ldr	r5, [pc, #52]	; (8010ed0 <__libc_init_array+0x38>)
 8010e9c:	4c0d      	ldr	r4, [pc, #52]	; (8010ed4 <__libc_init_array+0x3c>)
 8010e9e:	1b64      	subs	r4, r4, r5
 8010ea0:	10a4      	asrs	r4, r4, #2
 8010ea2:	2600      	movs	r6, #0
 8010ea4:	42a6      	cmp	r6, r4
 8010ea6:	d109      	bne.n	8010ebc <__libc_init_array+0x24>
 8010ea8:	4d0b      	ldr	r5, [pc, #44]	; (8010ed8 <__libc_init_array+0x40>)
 8010eaa:	4c0c      	ldr	r4, [pc, #48]	; (8010edc <__libc_init_array+0x44>)
 8010eac:	f000 ff44 	bl	8011d38 <_init>
 8010eb0:	1b64      	subs	r4, r4, r5
 8010eb2:	10a4      	asrs	r4, r4, #2
 8010eb4:	2600      	movs	r6, #0
 8010eb6:	42a6      	cmp	r6, r4
 8010eb8:	d105      	bne.n	8010ec6 <__libc_init_array+0x2e>
 8010eba:	bd70      	pop	{r4, r5, r6, pc}
 8010ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ec0:	4798      	blx	r3
 8010ec2:	3601      	adds	r6, #1
 8010ec4:	e7ee      	b.n	8010ea4 <__libc_init_array+0xc>
 8010ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8010eca:	4798      	blx	r3
 8010ecc:	3601      	adds	r6, #1
 8010ece:	e7f2      	b.n	8010eb6 <__libc_init_array+0x1e>
 8010ed0:	080127d8 	.word	0x080127d8
 8010ed4:	080127d8 	.word	0x080127d8
 8010ed8:	080127d8 	.word	0x080127d8
 8010edc:	080127dc 	.word	0x080127dc

08010ee0 <__retarget_lock_init_recursive>:
 8010ee0:	4770      	bx	lr

08010ee2 <__retarget_lock_acquire_recursive>:
 8010ee2:	4770      	bx	lr

08010ee4 <__retarget_lock_release_recursive>:
 8010ee4:	4770      	bx	lr
	...

08010ee8 <_free_r>:
 8010ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010eea:	2900      	cmp	r1, #0
 8010eec:	d044      	beq.n	8010f78 <_free_r+0x90>
 8010eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ef2:	9001      	str	r0, [sp, #4]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	f1a1 0404 	sub.w	r4, r1, #4
 8010efa:	bfb8      	it	lt
 8010efc:	18e4      	addlt	r4, r4, r3
 8010efe:	f7ff fe61 	bl	8010bc4 <__malloc_lock>
 8010f02:	4a1e      	ldr	r2, [pc, #120]	; (8010f7c <_free_r+0x94>)
 8010f04:	9801      	ldr	r0, [sp, #4]
 8010f06:	6813      	ldr	r3, [r2, #0]
 8010f08:	b933      	cbnz	r3, 8010f18 <_free_r+0x30>
 8010f0a:	6063      	str	r3, [r4, #4]
 8010f0c:	6014      	str	r4, [r2, #0]
 8010f0e:	b003      	add	sp, #12
 8010f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f14:	f7ff be5c 	b.w	8010bd0 <__malloc_unlock>
 8010f18:	42a3      	cmp	r3, r4
 8010f1a:	d908      	bls.n	8010f2e <_free_r+0x46>
 8010f1c:	6825      	ldr	r5, [r4, #0]
 8010f1e:	1961      	adds	r1, r4, r5
 8010f20:	428b      	cmp	r3, r1
 8010f22:	bf01      	itttt	eq
 8010f24:	6819      	ldreq	r1, [r3, #0]
 8010f26:	685b      	ldreq	r3, [r3, #4]
 8010f28:	1949      	addeq	r1, r1, r5
 8010f2a:	6021      	streq	r1, [r4, #0]
 8010f2c:	e7ed      	b.n	8010f0a <_free_r+0x22>
 8010f2e:	461a      	mov	r2, r3
 8010f30:	685b      	ldr	r3, [r3, #4]
 8010f32:	b10b      	cbz	r3, 8010f38 <_free_r+0x50>
 8010f34:	42a3      	cmp	r3, r4
 8010f36:	d9fa      	bls.n	8010f2e <_free_r+0x46>
 8010f38:	6811      	ldr	r1, [r2, #0]
 8010f3a:	1855      	adds	r5, r2, r1
 8010f3c:	42a5      	cmp	r5, r4
 8010f3e:	d10b      	bne.n	8010f58 <_free_r+0x70>
 8010f40:	6824      	ldr	r4, [r4, #0]
 8010f42:	4421      	add	r1, r4
 8010f44:	1854      	adds	r4, r2, r1
 8010f46:	42a3      	cmp	r3, r4
 8010f48:	6011      	str	r1, [r2, #0]
 8010f4a:	d1e0      	bne.n	8010f0e <_free_r+0x26>
 8010f4c:	681c      	ldr	r4, [r3, #0]
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	6053      	str	r3, [r2, #4]
 8010f52:	440c      	add	r4, r1
 8010f54:	6014      	str	r4, [r2, #0]
 8010f56:	e7da      	b.n	8010f0e <_free_r+0x26>
 8010f58:	d902      	bls.n	8010f60 <_free_r+0x78>
 8010f5a:	230c      	movs	r3, #12
 8010f5c:	6003      	str	r3, [r0, #0]
 8010f5e:	e7d6      	b.n	8010f0e <_free_r+0x26>
 8010f60:	6825      	ldr	r5, [r4, #0]
 8010f62:	1961      	adds	r1, r4, r5
 8010f64:	428b      	cmp	r3, r1
 8010f66:	bf04      	itt	eq
 8010f68:	6819      	ldreq	r1, [r3, #0]
 8010f6a:	685b      	ldreq	r3, [r3, #4]
 8010f6c:	6063      	str	r3, [r4, #4]
 8010f6e:	bf04      	itt	eq
 8010f70:	1949      	addeq	r1, r1, r5
 8010f72:	6021      	streq	r1, [r4, #0]
 8010f74:	6054      	str	r4, [r2, #4]
 8010f76:	e7ca      	b.n	8010f0e <_free_r+0x26>
 8010f78:	b003      	add	sp, #12
 8010f7a:	bd30      	pop	{r4, r5, pc}
 8010f7c:	2004c5c4 	.word	0x2004c5c4

08010f80 <__ssputs_r>:
 8010f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f84:	688e      	ldr	r6, [r1, #8]
 8010f86:	461f      	mov	r7, r3
 8010f88:	42be      	cmp	r6, r7
 8010f8a:	680b      	ldr	r3, [r1, #0]
 8010f8c:	4682      	mov	sl, r0
 8010f8e:	460c      	mov	r4, r1
 8010f90:	4690      	mov	r8, r2
 8010f92:	d82c      	bhi.n	8010fee <__ssputs_r+0x6e>
 8010f94:	898a      	ldrh	r2, [r1, #12]
 8010f96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010f9a:	d026      	beq.n	8010fea <__ssputs_r+0x6a>
 8010f9c:	6965      	ldr	r5, [r4, #20]
 8010f9e:	6909      	ldr	r1, [r1, #16]
 8010fa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010fa4:	eba3 0901 	sub.w	r9, r3, r1
 8010fa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010fac:	1c7b      	adds	r3, r7, #1
 8010fae:	444b      	add	r3, r9
 8010fb0:	106d      	asrs	r5, r5, #1
 8010fb2:	429d      	cmp	r5, r3
 8010fb4:	bf38      	it	cc
 8010fb6:	461d      	movcc	r5, r3
 8010fb8:	0553      	lsls	r3, r2, #21
 8010fba:	d527      	bpl.n	801100c <__ssputs_r+0x8c>
 8010fbc:	4629      	mov	r1, r5
 8010fbe:	f7ff fd4d 	bl	8010a5c <_malloc_r>
 8010fc2:	4606      	mov	r6, r0
 8010fc4:	b360      	cbz	r0, 8011020 <__ssputs_r+0xa0>
 8010fc6:	6921      	ldr	r1, [r4, #16]
 8010fc8:	464a      	mov	r2, r9
 8010fca:	f000 fe9f 	bl	8011d0c <memcpy>
 8010fce:	89a3      	ldrh	r3, [r4, #12]
 8010fd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fd8:	81a3      	strh	r3, [r4, #12]
 8010fda:	6126      	str	r6, [r4, #16]
 8010fdc:	6165      	str	r5, [r4, #20]
 8010fde:	444e      	add	r6, r9
 8010fe0:	eba5 0509 	sub.w	r5, r5, r9
 8010fe4:	6026      	str	r6, [r4, #0]
 8010fe6:	60a5      	str	r5, [r4, #8]
 8010fe8:	463e      	mov	r6, r7
 8010fea:	42be      	cmp	r6, r7
 8010fec:	d900      	bls.n	8010ff0 <__ssputs_r+0x70>
 8010fee:	463e      	mov	r6, r7
 8010ff0:	6820      	ldr	r0, [r4, #0]
 8010ff2:	4632      	mov	r2, r6
 8010ff4:	4641      	mov	r1, r8
 8010ff6:	f000 fe07 	bl	8011c08 <memmove>
 8010ffa:	68a3      	ldr	r3, [r4, #8]
 8010ffc:	1b9b      	subs	r3, r3, r6
 8010ffe:	60a3      	str	r3, [r4, #8]
 8011000:	6823      	ldr	r3, [r4, #0]
 8011002:	4433      	add	r3, r6
 8011004:	6023      	str	r3, [r4, #0]
 8011006:	2000      	movs	r0, #0
 8011008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801100c:	462a      	mov	r2, r5
 801100e:	f000 fcd4 	bl	80119ba <_realloc_r>
 8011012:	4606      	mov	r6, r0
 8011014:	2800      	cmp	r0, #0
 8011016:	d1e0      	bne.n	8010fda <__ssputs_r+0x5a>
 8011018:	6921      	ldr	r1, [r4, #16]
 801101a:	4650      	mov	r0, sl
 801101c:	f7ff ff64 	bl	8010ee8 <_free_r>
 8011020:	230c      	movs	r3, #12
 8011022:	f8ca 3000 	str.w	r3, [sl]
 8011026:	89a3      	ldrh	r3, [r4, #12]
 8011028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801102c:	81a3      	strh	r3, [r4, #12]
 801102e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011032:	e7e9      	b.n	8011008 <__ssputs_r+0x88>

08011034 <_svfiprintf_r>:
 8011034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011038:	4698      	mov	r8, r3
 801103a:	898b      	ldrh	r3, [r1, #12]
 801103c:	061b      	lsls	r3, r3, #24
 801103e:	b09d      	sub	sp, #116	; 0x74
 8011040:	4607      	mov	r7, r0
 8011042:	460d      	mov	r5, r1
 8011044:	4614      	mov	r4, r2
 8011046:	d50e      	bpl.n	8011066 <_svfiprintf_r+0x32>
 8011048:	690b      	ldr	r3, [r1, #16]
 801104a:	b963      	cbnz	r3, 8011066 <_svfiprintf_r+0x32>
 801104c:	2140      	movs	r1, #64	; 0x40
 801104e:	f7ff fd05 	bl	8010a5c <_malloc_r>
 8011052:	6028      	str	r0, [r5, #0]
 8011054:	6128      	str	r0, [r5, #16]
 8011056:	b920      	cbnz	r0, 8011062 <_svfiprintf_r+0x2e>
 8011058:	230c      	movs	r3, #12
 801105a:	603b      	str	r3, [r7, #0]
 801105c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011060:	e0d0      	b.n	8011204 <_svfiprintf_r+0x1d0>
 8011062:	2340      	movs	r3, #64	; 0x40
 8011064:	616b      	str	r3, [r5, #20]
 8011066:	2300      	movs	r3, #0
 8011068:	9309      	str	r3, [sp, #36]	; 0x24
 801106a:	2320      	movs	r3, #32
 801106c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011070:	f8cd 800c 	str.w	r8, [sp, #12]
 8011074:	2330      	movs	r3, #48	; 0x30
 8011076:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801121c <_svfiprintf_r+0x1e8>
 801107a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801107e:	f04f 0901 	mov.w	r9, #1
 8011082:	4623      	mov	r3, r4
 8011084:	469a      	mov	sl, r3
 8011086:	f813 2b01 	ldrb.w	r2, [r3], #1
 801108a:	b10a      	cbz	r2, 8011090 <_svfiprintf_r+0x5c>
 801108c:	2a25      	cmp	r2, #37	; 0x25
 801108e:	d1f9      	bne.n	8011084 <_svfiprintf_r+0x50>
 8011090:	ebba 0b04 	subs.w	fp, sl, r4
 8011094:	d00b      	beq.n	80110ae <_svfiprintf_r+0x7a>
 8011096:	465b      	mov	r3, fp
 8011098:	4622      	mov	r2, r4
 801109a:	4629      	mov	r1, r5
 801109c:	4638      	mov	r0, r7
 801109e:	f7ff ff6f 	bl	8010f80 <__ssputs_r>
 80110a2:	3001      	adds	r0, #1
 80110a4:	f000 80a9 	beq.w	80111fa <_svfiprintf_r+0x1c6>
 80110a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110aa:	445a      	add	r2, fp
 80110ac:	9209      	str	r2, [sp, #36]	; 0x24
 80110ae:	f89a 3000 	ldrb.w	r3, [sl]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	f000 80a1 	beq.w	80111fa <_svfiprintf_r+0x1c6>
 80110b8:	2300      	movs	r3, #0
 80110ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80110be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110c2:	f10a 0a01 	add.w	sl, sl, #1
 80110c6:	9304      	str	r3, [sp, #16]
 80110c8:	9307      	str	r3, [sp, #28]
 80110ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110ce:	931a      	str	r3, [sp, #104]	; 0x68
 80110d0:	4654      	mov	r4, sl
 80110d2:	2205      	movs	r2, #5
 80110d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110d8:	4850      	ldr	r0, [pc, #320]	; (801121c <_svfiprintf_r+0x1e8>)
 80110da:	f7ef f8b1 	bl	8000240 <memchr>
 80110de:	9a04      	ldr	r2, [sp, #16]
 80110e0:	b9d8      	cbnz	r0, 801111a <_svfiprintf_r+0xe6>
 80110e2:	06d0      	lsls	r0, r2, #27
 80110e4:	bf44      	itt	mi
 80110e6:	2320      	movmi	r3, #32
 80110e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110ec:	0711      	lsls	r1, r2, #28
 80110ee:	bf44      	itt	mi
 80110f0:	232b      	movmi	r3, #43	; 0x2b
 80110f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110f6:	f89a 3000 	ldrb.w	r3, [sl]
 80110fa:	2b2a      	cmp	r3, #42	; 0x2a
 80110fc:	d015      	beq.n	801112a <_svfiprintf_r+0xf6>
 80110fe:	9a07      	ldr	r2, [sp, #28]
 8011100:	4654      	mov	r4, sl
 8011102:	2000      	movs	r0, #0
 8011104:	f04f 0c0a 	mov.w	ip, #10
 8011108:	4621      	mov	r1, r4
 801110a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801110e:	3b30      	subs	r3, #48	; 0x30
 8011110:	2b09      	cmp	r3, #9
 8011112:	d94d      	bls.n	80111b0 <_svfiprintf_r+0x17c>
 8011114:	b1b0      	cbz	r0, 8011144 <_svfiprintf_r+0x110>
 8011116:	9207      	str	r2, [sp, #28]
 8011118:	e014      	b.n	8011144 <_svfiprintf_r+0x110>
 801111a:	eba0 0308 	sub.w	r3, r0, r8
 801111e:	fa09 f303 	lsl.w	r3, r9, r3
 8011122:	4313      	orrs	r3, r2
 8011124:	9304      	str	r3, [sp, #16]
 8011126:	46a2      	mov	sl, r4
 8011128:	e7d2      	b.n	80110d0 <_svfiprintf_r+0x9c>
 801112a:	9b03      	ldr	r3, [sp, #12]
 801112c:	1d19      	adds	r1, r3, #4
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	9103      	str	r1, [sp, #12]
 8011132:	2b00      	cmp	r3, #0
 8011134:	bfbb      	ittet	lt
 8011136:	425b      	neglt	r3, r3
 8011138:	f042 0202 	orrlt.w	r2, r2, #2
 801113c:	9307      	strge	r3, [sp, #28]
 801113e:	9307      	strlt	r3, [sp, #28]
 8011140:	bfb8      	it	lt
 8011142:	9204      	strlt	r2, [sp, #16]
 8011144:	7823      	ldrb	r3, [r4, #0]
 8011146:	2b2e      	cmp	r3, #46	; 0x2e
 8011148:	d10c      	bne.n	8011164 <_svfiprintf_r+0x130>
 801114a:	7863      	ldrb	r3, [r4, #1]
 801114c:	2b2a      	cmp	r3, #42	; 0x2a
 801114e:	d134      	bne.n	80111ba <_svfiprintf_r+0x186>
 8011150:	9b03      	ldr	r3, [sp, #12]
 8011152:	1d1a      	adds	r2, r3, #4
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	9203      	str	r2, [sp, #12]
 8011158:	2b00      	cmp	r3, #0
 801115a:	bfb8      	it	lt
 801115c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011160:	3402      	adds	r4, #2
 8011162:	9305      	str	r3, [sp, #20]
 8011164:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801122c <_svfiprintf_r+0x1f8>
 8011168:	7821      	ldrb	r1, [r4, #0]
 801116a:	2203      	movs	r2, #3
 801116c:	4650      	mov	r0, sl
 801116e:	f7ef f867 	bl	8000240 <memchr>
 8011172:	b138      	cbz	r0, 8011184 <_svfiprintf_r+0x150>
 8011174:	9b04      	ldr	r3, [sp, #16]
 8011176:	eba0 000a 	sub.w	r0, r0, sl
 801117a:	2240      	movs	r2, #64	; 0x40
 801117c:	4082      	lsls	r2, r0
 801117e:	4313      	orrs	r3, r2
 8011180:	3401      	adds	r4, #1
 8011182:	9304      	str	r3, [sp, #16]
 8011184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011188:	4825      	ldr	r0, [pc, #148]	; (8011220 <_svfiprintf_r+0x1ec>)
 801118a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801118e:	2206      	movs	r2, #6
 8011190:	f7ef f856 	bl	8000240 <memchr>
 8011194:	2800      	cmp	r0, #0
 8011196:	d038      	beq.n	801120a <_svfiprintf_r+0x1d6>
 8011198:	4b22      	ldr	r3, [pc, #136]	; (8011224 <_svfiprintf_r+0x1f0>)
 801119a:	bb1b      	cbnz	r3, 80111e4 <_svfiprintf_r+0x1b0>
 801119c:	9b03      	ldr	r3, [sp, #12]
 801119e:	3307      	adds	r3, #7
 80111a0:	f023 0307 	bic.w	r3, r3, #7
 80111a4:	3308      	adds	r3, #8
 80111a6:	9303      	str	r3, [sp, #12]
 80111a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111aa:	4433      	add	r3, r6
 80111ac:	9309      	str	r3, [sp, #36]	; 0x24
 80111ae:	e768      	b.n	8011082 <_svfiprintf_r+0x4e>
 80111b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80111b4:	460c      	mov	r4, r1
 80111b6:	2001      	movs	r0, #1
 80111b8:	e7a6      	b.n	8011108 <_svfiprintf_r+0xd4>
 80111ba:	2300      	movs	r3, #0
 80111bc:	3401      	adds	r4, #1
 80111be:	9305      	str	r3, [sp, #20]
 80111c0:	4619      	mov	r1, r3
 80111c2:	f04f 0c0a 	mov.w	ip, #10
 80111c6:	4620      	mov	r0, r4
 80111c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111cc:	3a30      	subs	r2, #48	; 0x30
 80111ce:	2a09      	cmp	r2, #9
 80111d0:	d903      	bls.n	80111da <_svfiprintf_r+0x1a6>
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d0c6      	beq.n	8011164 <_svfiprintf_r+0x130>
 80111d6:	9105      	str	r1, [sp, #20]
 80111d8:	e7c4      	b.n	8011164 <_svfiprintf_r+0x130>
 80111da:	fb0c 2101 	mla	r1, ip, r1, r2
 80111de:	4604      	mov	r4, r0
 80111e0:	2301      	movs	r3, #1
 80111e2:	e7f0      	b.n	80111c6 <_svfiprintf_r+0x192>
 80111e4:	ab03      	add	r3, sp, #12
 80111e6:	9300      	str	r3, [sp, #0]
 80111e8:	462a      	mov	r2, r5
 80111ea:	4b0f      	ldr	r3, [pc, #60]	; (8011228 <_svfiprintf_r+0x1f4>)
 80111ec:	a904      	add	r1, sp, #16
 80111ee:	4638      	mov	r0, r7
 80111f0:	f3af 8000 	nop.w
 80111f4:	1c42      	adds	r2, r0, #1
 80111f6:	4606      	mov	r6, r0
 80111f8:	d1d6      	bne.n	80111a8 <_svfiprintf_r+0x174>
 80111fa:	89ab      	ldrh	r3, [r5, #12]
 80111fc:	065b      	lsls	r3, r3, #25
 80111fe:	f53f af2d 	bmi.w	801105c <_svfiprintf_r+0x28>
 8011202:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011204:	b01d      	add	sp, #116	; 0x74
 8011206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801120a:	ab03      	add	r3, sp, #12
 801120c:	9300      	str	r3, [sp, #0]
 801120e:	462a      	mov	r2, r5
 8011210:	4b05      	ldr	r3, [pc, #20]	; (8011228 <_svfiprintf_r+0x1f4>)
 8011212:	a904      	add	r1, sp, #16
 8011214:	4638      	mov	r0, r7
 8011216:	f000 f9bd 	bl	8011594 <_printf_i>
 801121a:	e7eb      	b.n	80111f4 <_svfiprintf_r+0x1c0>
 801121c:	0801279c 	.word	0x0801279c
 8011220:	080127a6 	.word	0x080127a6
 8011224:	00000000 	.word	0x00000000
 8011228:	08010f81 	.word	0x08010f81
 801122c:	080127a2 	.word	0x080127a2

08011230 <__sfputc_r>:
 8011230:	6893      	ldr	r3, [r2, #8]
 8011232:	3b01      	subs	r3, #1
 8011234:	2b00      	cmp	r3, #0
 8011236:	b410      	push	{r4}
 8011238:	6093      	str	r3, [r2, #8]
 801123a:	da08      	bge.n	801124e <__sfputc_r+0x1e>
 801123c:	6994      	ldr	r4, [r2, #24]
 801123e:	42a3      	cmp	r3, r4
 8011240:	db01      	blt.n	8011246 <__sfputc_r+0x16>
 8011242:	290a      	cmp	r1, #10
 8011244:	d103      	bne.n	801124e <__sfputc_r+0x1e>
 8011246:	f85d 4b04 	ldr.w	r4, [sp], #4
 801124a:	f000 bbe5 	b.w	8011a18 <__swbuf_r>
 801124e:	6813      	ldr	r3, [r2, #0]
 8011250:	1c58      	adds	r0, r3, #1
 8011252:	6010      	str	r0, [r2, #0]
 8011254:	7019      	strb	r1, [r3, #0]
 8011256:	4608      	mov	r0, r1
 8011258:	f85d 4b04 	ldr.w	r4, [sp], #4
 801125c:	4770      	bx	lr

0801125e <__sfputs_r>:
 801125e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011260:	4606      	mov	r6, r0
 8011262:	460f      	mov	r7, r1
 8011264:	4614      	mov	r4, r2
 8011266:	18d5      	adds	r5, r2, r3
 8011268:	42ac      	cmp	r4, r5
 801126a:	d101      	bne.n	8011270 <__sfputs_r+0x12>
 801126c:	2000      	movs	r0, #0
 801126e:	e007      	b.n	8011280 <__sfputs_r+0x22>
 8011270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011274:	463a      	mov	r2, r7
 8011276:	4630      	mov	r0, r6
 8011278:	f7ff ffda 	bl	8011230 <__sfputc_r>
 801127c:	1c43      	adds	r3, r0, #1
 801127e:	d1f3      	bne.n	8011268 <__sfputs_r+0xa>
 8011280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011284 <_vfiprintf_r>:
 8011284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011288:	460d      	mov	r5, r1
 801128a:	b09d      	sub	sp, #116	; 0x74
 801128c:	4614      	mov	r4, r2
 801128e:	4698      	mov	r8, r3
 8011290:	4606      	mov	r6, r0
 8011292:	b118      	cbz	r0, 801129c <_vfiprintf_r+0x18>
 8011294:	6a03      	ldr	r3, [r0, #32]
 8011296:	b90b      	cbnz	r3, 801129c <_vfiprintf_r+0x18>
 8011298:	f7ff fd2c 	bl	8010cf4 <__sinit>
 801129c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801129e:	07d9      	lsls	r1, r3, #31
 80112a0:	d405      	bmi.n	80112ae <_vfiprintf_r+0x2a>
 80112a2:	89ab      	ldrh	r3, [r5, #12]
 80112a4:	059a      	lsls	r2, r3, #22
 80112a6:	d402      	bmi.n	80112ae <_vfiprintf_r+0x2a>
 80112a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112aa:	f7ff fe1a 	bl	8010ee2 <__retarget_lock_acquire_recursive>
 80112ae:	89ab      	ldrh	r3, [r5, #12]
 80112b0:	071b      	lsls	r3, r3, #28
 80112b2:	d501      	bpl.n	80112b8 <_vfiprintf_r+0x34>
 80112b4:	692b      	ldr	r3, [r5, #16]
 80112b6:	b99b      	cbnz	r3, 80112e0 <_vfiprintf_r+0x5c>
 80112b8:	4629      	mov	r1, r5
 80112ba:	4630      	mov	r0, r6
 80112bc:	f000 fbea 	bl	8011a94 <__swsetup_r>
 80112c0:	b170      	cbz	r0, 80112e0 <_vfiprintf_r+0x5c>
 80112c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112c4:	07dc      	lsls	r4, r3, #31
 80112c6:	d504      	bpl.n	80112d2 <_vfiprintf_r+0x4e>
 80112c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112cc:	b01d      	add	sp, #116	; 0x74
 80112ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112d2:	89ab      	ldrh	r3, [r5, #12]
 80112d4:	0598      	lsls	r0, r3, #22
 80112d6:	d4f7      	bmi.n	80112c8 <_vfiprintf_r+0x44>
 80112d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112da:	f7ff fe03 	bl	8010ee4 <__retarget_lock_release_recursive>
 80112de:	e7f3      	b.n	80112c8 <_vfiprintf_r+0x44>
 80112e0:	2300      	movs	r3, #0
 80112e2:	9309      	str	r3, [sp, #36]	; 0x24
 80112e4:	2320      	movs	r3, #32
 80112e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80112ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80112ee:	2330      	movs	r3, #48	; 0x30
 80112f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80114a4 <_vfiprintf_r+0x220>
 80112f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80112f8:	f04f 0901 	mov.w	r9, #1
 80112fc:	4623      	mov	r3, r4
 80112fe:	469a      	mov	sl, r3
 8011300:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011304:	b10a      	cbz	r2, 801130a <_vfiprintf_r+0x86>
 8011306:	2a25      	cmp	r2, #37	; 0x25
 8011308:	d1f9      	bne.n	80112fe <_vfiprintf_r+0x7a>
 801130a:	ebba 0b04 	subs.w	fp, sl, r4
 801130e:	d00b      	beq.n	8011328 <_vfiprintf_r+0xa4>
 8011310:	465b      	mov	r3, fp
 8011312:	4622      	mov	r2, r4
 8011314:	4629      	mov	r1, r5
 8011316:	4630      	mov	r0, r6
 8011318:	f7ff ffa1 	bl	801125e <__sfputs_r>
 801131c:	3001      	adds	r0, #1
 801131e:	f000 80a9 	beq.w	8011474 <_vfiprintf_r+0x1f0>
 8011322:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011324:	445a      	add	r2, fp
 8011326:	9209      	str	r2, [sp, #36]	; 0x24
 8011328:	f89a 3000 	ldrb.w	r3, [sl]
 801132c:	2b00      	cmp	r3, #0
 801132e:	f000 80a1 	beq.w	8011474 <_vfiprintf_r+0x1f0>
 8011332:	2300      	movs	r3, #0
 8011334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801133c:	f10a 0a01 	add.w	sl, sl, #1
 8011340:	9304      	str	r3, [sp, #16]
 8011342:	9307      	str	r3, [sp, #28]
 8011344:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011348:	931a      	str	r3, [sp, #104]	; 0x68
 801134a:	4654      	mov	r4, sl
 801134c:	2205      	movs	r2, #5
 801134e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011352:	4854      	ldr	r0, [pc, #336]	; (80114a4 <_vfiprintf_r+0x220>)
 8011354:	f7ee ff74 	bl	8000240 <memchr>
 8011358:	9a04      	ldr	r2, [sp, #16]
 801135a:	b9d8      	cbnz	r0, 8011394 <_vfiprintf_r+0x110>
 801135c:	06d1      	lsls	r1, r2, #27
 801135e:	bf44      	itt	mi
 8011360:	2320      	movmi	r3, #32
 8011362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011366:	0713      	lsls	r3, r2, #28
 8011368:	bf44      	itt	mi
 801136a:	232b      	movmi	r3, #43	; 0x2b
 801136c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011370:	f89a 3000 	ldrb.w	r3, [sl]
 8011374:	2b2a      	cmp	r3, #42	; 0x2a
 8011376:	d015      	beq.n	80113a4 <_vfiprintf_r+0x120>
 8011378:	9a07      	ldr	r2, [sp, #28]
 801137a:	4654      	mov	r4, sl
 801137c:	2000      	movs	r0, #0
 801137e:	f04f 0c0a 	mov.w	ip, #10
 8011382:	4621      	mov	r1, r4
 8011384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011388:	3b30      	subs	r3, #48	; 0x30
 801138a:	2b09      	cmp	r3, #9
 801138c:	d94d      	bls.n	801142a <_vfiprintf_r+0x1a6>
 801138e:	b1b0      	cbz	r0, 80113be <_vfiprintf_r+0x13a>
 8011390:	9207      	str	r2, [sp, #28]
 8011392:	e014      	b.n	80113be <_vfiprintf_r+0x13a>
 8011394:	eba0 0308 	sub.w	r3, r0, r8
 8011398:	fa09 f303 	lsl.w	r3, r9, r3
 801139c:	4313      	orrs	r3, r2
 801139e:	9304      	str	r3, [sp, #16]
 80113a0:	46a2      	mov	sl, r4
 80113a2:	e7d2      	b.n	801134a <_vfiprintf_r+0xc6>
 80113a4:	9b03      	ldr	r3, [sp, #12]
 80113a6:	1d19      	adds	r1, r3, #4
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	9103      	str	r1, [sp, #12]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	bfbb      	ittet	lt
 80113b0:	425b      	neglt	r3, r3
 80113b2:	f042 0202 	orrlt.w	r2, r2, #2
 80113b6:	9307      	strge	r3, [sp, #28]
 80113b8:	9307      	strlt	r3, [sp, #28]
 80113ba:	bfb8      	it	lt
 80113bc:	9204      	strlt	r2, [sp, #16]
 80113be:	7823      	ldrb	r3, [r4, #0]
 80113c0:	2b2e      	cmp	r3, #46	; 0x2e
 80113c2:	d10c      	bne.n	80113de <_vfiprintf_r+0x15a>
 80113c4:	7863      	ldrb	r3, [r4, #1]
 80113c6:	2b2a      	cmp	r3, #42	; 0x2a
 80113c8:	d134      	bne.n	8011434 <_vfiprintf_r+0x1b0>
 80113ca:	9b03      	ldr	r3, [sp, #12]
 80113cc:	1d1a      	adds	r2, r3, #4
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	9203      	str	r2, [sp, #12]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	bfb8      	it	lt
 80113d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80113da:	3402      	adds	r4, #2
 80113dc:	9305      	str	r3, [sp, #20]
 80113de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80114b4 <_vfiprintf_r+0x230>
 80113e2:	7821      	ldrb	r1, [r4, #0]
 80113e4:	2203      	movs	r2, #3
 80113e6:	4650      	mov	r0, sl
 80113e8:	f7ee ff2a 	bl	8000240 <memchr>
 80113ec:	b138      	cbz	r0, 80113fe <_vfiprintf_r+0x17a>
 80113ee:	9b04      	ldr	r3, [sp, #16]
 80113f0:	eba0 000a 	sub.w	r0, r0, sl
 80113f4:	2240      	movs	r2, #64	; 0x40
 80113f6:	4082      	lsls	r2, r0
 80113f8:	4313      	orrs	r3, r2
 80113fa:	3401      	adds	r4, #1
 80113fc:	9304      	str	r3, [sp, #16]
 80113fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011402:	4829      	ldr	r0, [pc, #164]	; (80114a8 <_vfiprintf_r+0x224>)
 8011404:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011408:	2206      	movs	r2, #6
 801140a:	f7ee ff19 	bl	8000240 <memchr>
 801140e:	2800      	cmp	r0, #0
 8011410:	d03f      	beq.n	8011492 <_vfiprintf_r+0x20e>
 8011412:	4b26      	ldr	r3, [pc, #152]	; (80114ac <_vfiprintf_r+0x228>)
 8011414:	bb1b      	cbnz	r3, 801145e <_vfiprintf_r+0x1da>
 8011416:	9b03      	ldr	r3, [sp, #12]
 8011418:	3307      	adds	r3, #7
 801141a:	f023 0307 	bic.w	r3, r3, #7
 801141e:	3308      	adds	r3, #8
 8011420:	9303      	str	r3, [sp, #12]
 8011422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011424:	443b      	add	r3, r7
 8011426:	9309      	str	r3, [sp, #36]	; 0x24
 8011428:	e768      	b.n	80112fc <_vfiprintf_r+0x78>
 801142a:	fb0c 3202 	mla	r2, ip, r2, r3
 801142e:	460c      	mov	r4, r1
 8011430:	2001      	movs	r0, #1
 8011432:	e7a6      	b.n	8011382 <_vfiprintf_r+0xfe>
 8011434:	2300      	movs	r3, #0
 8011436:	3401      	adds	r4, #1
 8011438:	9305      	str	r3, [sp, #20]
 801143a:	4619      	mov	r1, r3
 801143c:	f04f 0c0a 	mov.w	ip, #10
 8011440:	4620      	mov	r0, r4
 8011442:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011446:	3a30      	subs	r2, #48	; 0x30
 8011448:	2a09      	cmp	r2, #9
 801144a:	d903      	bls.n	8011454 <_vfiprintf_r+0x1d0>
 801144c:	2b00      	cmp	r3, #0
 801144e:	d0c6      	beq.n	80113de <_vfiprintf_r+0x15a>
 8011450:	9105      	str	r1, [sp, #20]
 8011452:	e7c4      	b.n	80113de <_vfiprintf_r+0x15a>
 8011454:	fb0c 2101 	mla	r1, ip, r1, r2
 8011458:	4604      	mov	r4, r0
 801145a:	2301      	movs	r3, #1
 801145c:	e7f0      	b.n	8011440 <_vfiprintf_r+0x1bc>
 801145e:	ab03      	add	r3, sp, #12
 8011460:	9300      	str	r3, [sp, #0]
 8011462:	462a      	mov	r2, r5
 8011464:	4b12      	ldr	r3, [pc, #72]	; (80114b0 <_vfiprintf_r+0x22c>)
 8011466:	a904      	add	r1, sp, #16
 8011468:	4630      	mov	r0, r6
 801146a:	f3af 8000 	nop.w
 801146e:	4607      	mov	r7, r0
 8011470:	1c78      	adds	r0, r7, #1
 8011472:	d1d6      	bne.n	8011422 <_vfiprintf_r+0x19e>
 8011474:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011476:	07d9      	lsls	r1, r3, #31
 8011478:	d405      	bmi.n	8011486 <_vfiprintf_r+0x202>
 801147a:	89ab      	ldrh	r3, [r5, #12]
 801147c:	059a      	lsls	r2, r3, #22
 801147e:	d402      	bmi.n	8011486 <_vfiprintf_r+0x202>
 8011480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011482:	f7ff fd2f 	bl	8010ee4 <__retarget_lock_release_recursive>
 8011486:	89ab      	ldrh	r3, [r5, #12]
 8011488:	065b      	lsls	r3, r3, #25
 801148a:	f53f af1d 	bmi.w	80112c8 <_vfiprintf_r+0x44>
 801148e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011490:	e71c      	b.n	80112cc <_vfiprintf_r+0x48>
 8011492:	ab03      	add	r3, sp, #12
 8011494:	9300      	str	r3, [sp, #0]
 8011496:	462a      	mov	r2, r5
 8011498:	4b05      	ldr	r3, [pc, #20]	; (80114b0 <_vfiprintf_r+0x22c>)
 801149a:	a904      	add	r1, sp, #16
 801149c:	4630      	mov	r0, r6
 801149e:	f000 f879 	bl	8011594 <_printf_i>
 80114a2:	e7e4      	b.n	801146e <_vfiprintf_r+0x1ea>
 80114a4:	0801279c 	.word	0x0801279c
 80114a8:	080127a6 	.word	0x080127a6
 80114ac:	00000000 	.word	0x00000000
 80114b0:	0801125f 	.word	0x0801125f
 80114b4:	080127a2 	.word	0x080127a2

080114b8 <_printf_common>:
 80114b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114bc:	4616      	mov	r6, r2
 80114be:	4699      	mov	r9, r3
 80114c0:	688a      	ldr	r2, [r1, #8]
 80114c2:	690b      	ldr	r3, [r1, #16]
 80114c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80114c8:	4293      	cmp	r3, r2
 80114ca:	bfb8      	it	lt
 80114cc:	4613      	movlt	r3, r2
 80114ce:	6033      	str	r3, [r6, #0]
 80114d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80114d4:	4607      	mov	r7, r0
 80114d6:	460c      	mov	r4, r1
 80114d8:	b10a      	cbz	r2, 80114de <_printf_common+0x26>
 80114da:	3301      	adds	r3, #1
 80114dc:	6033      	str	r3, [r6, #0]
 80114de:	6823      	ldr	r3, [r4, #0]
 80114e0:	0699      	lsls	r1, r3, #26
 80114e2:	bf42      	ittt	mi
 80114e4:	6833      	ldrmi	r3, [r6, #0]
 80114e6:	3302      	addmi	r3, #2
 80114e8:	6033      	strmi	r3, [r6, #0]
 80114ea:	6825      	ldr	r5, [r4, #0]
 80114ec:	f015 0506 	ands.w	r5, r5, #6
 80114f0:	d106      	bne.n	8011500 <_printf_common+0x48>
 80114f2:	f104 0a19 	add.w	sl, r4, #25
 80114f6:	68e3      	ldr	r3, [r4, #12]
 80114f8:	6832      	ldr	r2, [r6, #0]
 80114fa:	1a9b      	subs	r3, r3, r2
 80114fc:	42ab      	cmp	r3, r5
 80114fe:	dc26      	bgt.n	801154e <_printf_common+0x96>
 8011500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011504:	1e13      	subs	r3, r2, #0
 8011506:	6822      	ldr	r2, [r4, #0]
 8011508:	bf18      	it	ne
 801150a:	2301      	movne	r3, #1
 801150c:	0692      	lsls	r2, r2, #26
 801150e:	d42b      	bmi.n	8011568 <_printf_common+0xb0>
 8011510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011514:	4649      	mov	r1, r9
 8011516:	4638      	mov	r0, r7
 8011518:	47c0      	blx	r8
 801151a:	3001      	adds	r0, #1
 801151c:	d01e      	beq.n	801155c <_printf_common+0xa4>
 801151e:	6823      	ldr	r3, [r4, #0]
 8011520:	6922      	ldr	r2, [r4, #16]
 8011522:	f003 0306 	and.w	r3, r3, #6
 8011526:	2b04      	cmp	r3, #4
 8011528:	bf02      	ittt	eq
 801152a:	68e5      	ldreq	r5, [r4, #12]
 801152c:	6833      	ldreq	r3, [r6, #0]
 801152e:	1aed      	subeq	r5, r5, r3
 8011530:	68a3      	ldr	r3, [r4, #8]
 8011532:	bf0c      	ite	eq
 8011534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011538:	2500      	movne	r5, #0
 801153a:	4293      	cmp	r3, r2
 801153c:	bfc4      	itt	gt
 801153e:	1a9b      	subgt	r3, r3, r2
 8011540:	18ed      	addgt	r5, r5, r3
 8011542:	2600      	movs	r6, #0
 8011544:	341a      	adds	r4, #26
 8011546:	42b5      	cmp	r5, r6
 8011548:	d11a      	bne.n	8011580 <_printf_common+0xc8>
 801154a:	2000      	movs	r0, #0
 801154c:	e008      	b.n	8011560 <_printf_common+0xa8>
 801154e:	2301      	movs	r3, #1
 8011550:	4652      	mov	r2, sl
 8011552:	4649      	mov	r1, r9
 8011554:	4638      	mov	r0, r7
 8011556:	47c0      	blx	r8
 8011558:	3001      	adds	r0, #1
 801155a:	d103      	bne.n	8011564 <_printf_common+0xac>
 801155c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011564:	3501      	adds	r5, #1
 8011566:	e7c6      	b.n	80114f6 <_printf_common+0x3e>
 8011568:	18e1      	adds	r1, r4, r3
 801156a:	1c5a      	adds	r2, r3, #1
 801156c:	2030      	movs	r0, #48	; 0x30
 801156e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011572:	4422      	add	r2, r4
 8011574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801157c:	3302      	adds	r3, #2
 801157e:	e7c7      	b.n	8011510 <_printf_common+0x58>
 8011580:	2301      	movs	r3, #1
 8011582:	4622      	mov	r2, r4
 8011584:	4649      	mov	r1, r9
 8011586:	4638      	mov	r0, r7
 8011588:	47c0      	blx	r8
 801158a:	3001      	adds	r0, #1
 801158c:	d0e6      	beq.n	801155c <_printf_common+0xa4>
 801158e:	3601      	adds	r6, #1
 8011590:	e7d9      	b.n	8011546 <_printf_common+0x8e>
	...

08011594 <_printf_i>:
 8011594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011598:	7e0f      	ldrb	r7, [r1, #24]
 801159a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801159c:	2f78      	cmp	r7, #120	; 0x78
 801159e:	4691      	mov	r9, r2
 80115a0:	4680      	mov	r8, r0
 80115a2:	460c      	mov	r4, r1
 80115a4:	469a      	mov	sl, r3
 80115a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80115aa:	d807      	bhi.n	80115bc <_printf_i+0x28>
 80115ac:	2f62      	cmp	r7, #98	; 0x62
 80115ae:	d80a      	bhi.n	80115c6 <_printf_i+0x32>
 80115b0:	2f00      	cmp	r7, #0
 80115b2:	f000 80d4 	beq.w	801175e <_printf_i+0x1ca>
 80115b6:	2f58      	cmp	r7, #88	; 0x58
 80115b8:	f000 80c0 	beq.w	801173c <_printf_i+0x1a8>
 80115bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80115c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80115c4:	e03a      	b.n	801163c <_printf_i+0xa8>
 80115c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80115ca:	2b15      	cmp	r3, #21
 80115cc:	d8f6      	bhi.n	80115bc <_printf_i+0x28>
 80115ce:	a101      	add	r1, pc, #4	; (adr r1, 80115d4 <_printf_i+0x40>)
 80115d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80115d4:	0801162d 	.word	0x0801162d
 80115d8:	08011641 	.word	0x08011641
 80115dc:	080115bd 	.word	0x080115bd
 80115e0:	080115bd 	.word	0x080115bd
 80115e4:	080115bd 	.word	0x080115bd
 80115e8:	080115bd 	.word	0x080115bd
 80115ec:	08011641 	.word	0x08011641
 80115f0:	080115bd 	.word	0x080115bd
 80115f4:	080115bd 	.word	0x080115bd
 80115f8:	080115bd 	.word	0x080115bd
 80115fc:	080115bd 	.word	0x080115bd
 8011600:	08011745 	.word	0x08011745
 8011604:	0801166d 	.word	0x0801166d
 8011608:	080116ff 	.word	0x080116ff
 801160c:	080115bd 	.word	0x080115bd
 8011610:	080115bd 	.word	0x080115bd
 8011614:	08011767 	.word	0x08011767
 8011618:	080115bd 	.word	0x080115bd
 801161c:	0801166d 	.word	0x0801166d
 8011620:	080115bd 	.word	0x080115bd
 8011624:	080115bd 	.word	0x080115bd
 8011628:	08011707 	.word	0x08011707
 801162c:	682b      	ldr	r3, [r5, #0]
 801162e:	1d1a      	adds	r2, r3, #4
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	602a      	str	r2, [r5, #0]
 8011634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801163c:	2301      	movs	r3, #1
 801163e:	e09f      	b.n	8011780 <_printf_i+0x1ec>
 8011640:	6820      	ldr	r0, [r4, #0]
 8011642:	682b      	ldr	r3, [r5, #0]
 8011644:	0607      	lsls	r7, r0, #24
 8011646:	f103 0104 	add.w	r1, r3, #4
 801164a:	6029      	str	r1, [r5, #0]
 801164c:	d501      	bpl.n	8011652 <_printf_i+0xbe>
 801164e:	681e      	ldr	r6, [r3, #0]
 8011650:	e003      	b.n	801165a <_printf_i+0xc6>
 8011652:	0646      	lsls	r6, r0, #25
 8011654:	d5fb      	bpl.n	801164e <_printf_i+0xba>
 8011656:	f9b3 6000 	ldrsh.w	r6, [r3]
 801165a:	2e00      	cmp	r6, #0
 801165c:	da03      	bge.n	8011666 <_printf_i+0xd2>
 801165e:	232d      	movs	r3, #45	; 0x2d
 8011660:	4276      	negs	r6, r6
 8011662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011666:	485a      	ldr	r0, [pc, #360]	; (80117d0 <_printf_i+0x23c>)
 8011668:	230a      	movs	r3, #10
 801166a:	e012      	b.n	8011692 <_printf_i+0xfe>
 801166c:	682b      	ldr	r3, [r5, #0]
 801166e:	6820      	ldr	r0, [r4, #0]
 8011670:	1d19      	adds	r1, r3, #4
 8011672:	6029      	str	r1, [r5, #0]
 8011674:	0605      	lsls	r5, r0, #24
 8011676:	d501      	bpl.n	801167c <_printf_i+0xe8>
 8011678:	681e      	ldr	r6, [r3, #0]
 801167a:	e002      	b.n	8011682 <_printf_i+0xee>
 801167c:	0641      	lsls	r1, r0, #25
 801167e:	d5fb      	bpl.n	8011678 <_printf_i+0xe4>
 8011680:	881e      	ldrh	r6, [r3, #0]
 8011682:	4853      	ldr	r0, [pc, #332]	; (80117d0 <_printf_i+0x23c>)
 8011684:	2f6f      	cmp	r7, #111	; 0x6f
 8011686:	bf0c      	ite	eq
 8011688:	2308      	moveq	r3, #8
 801168a:	230a      	movne	r3, #10
 801168c:	2100      	movs	r1, #0
 801168e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011692:	6865      	ldr	r5, [r4, #4]
 8011694:	60a5      	str	r5, [r4, #8]
 8011696:	2d00      	cmp	r5, #0
 8011698:	bfa2      	ittt	ge
 801169a:	6821      	ldrge	r1, [r4, #0]
 801169c:	f021 0104 	bicge.w	r1, r1, #4
 80116a0:	6021      	strge	r1, [r4, #0]
 80116a2:	b90e      	cbnz	r6, 80116a8 <_printf_i+0x114>
 80116a4:	2d00      	cmp	r5, #0
 80116a6:	d04b      	beq.n	8011740 <_printf_i+0x1ac>
 80116a8:	4615      	mov	r5, r2
 80116aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80116ae:	fb03 6711 	mls	r7, r3, r1, r6
 80116b2:	5dc7      	ldrb	r7, [r0, r7]
 80116b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80116b8:	4637      	mov	r7, r6
 80116ba:	42bb      	cmp	r3, r7
 80116bc:	460e      	mov	r6, r1
 80116be:	d9f4      	bls.n	80116aa <_printf_i+0x116>
 80116c0:	2b08      	cmp	r3, #8
 80116c2:	d10b      	bne.n	80116dc <_printf_i+0x148>
 80116c4:	6823      	ldr	r3, [r4, #0]
 80116c6:	07de      	lsls	r6, r3, #31
 80116c8:	d508      	bpl.n	80116dc <_printf_i+0x148>
 80116ca:	6923      	ldr	r3, [r4, #16]
 80116cc:	6861      	ldr	r1, [r4, #4]
 80116ce:	4299      	cmp	r1, r3
 80116d0:	bfde      	ittt	le
 80116d2:	2330      	movle	r3, #48	; 0x30
 80116d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80116d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80116dc:	1b52      	subs	r2, r2, r5
 80116de:	6122      	str	r2, [r4, #16]
 80116e0:	f8cd a000 	str.w	sl, [sp]
 80116e4:	464b      	mov	r3, r9
 80116e6:	aa03      	add	r2, sp, #12
 80116e8:	4621      	mov	r1, r4
 80116ea:	4640      	mov	r0, r8
 80116ec:	f7ff fee4 	bl	80114b8 <_printf_common>
 80116f0:	3001      	adds	r0, #1
 80116f2:	d14a      	bne.n	801178a <_printf_i+0x1f6>
 80116f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116f8:	b004      	add	sp, #16
 80116fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116fe:	6823      	ldr	r3, [r4, #0]
 8011700:	f043 0320 	orr.w	r3, r3, #32
 8011704:	6023      	str	r3, [r4, #0]
 8011706:	4833      	ldr	r0, [pc, #204]	; (80117d4 <_printf_i+0x240>)
 8011708:	2778      	movs	r7, #120	; 0x78
 801170a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801170e:	6823      	ldr	r3, [r4, #0]
 8011710:	6829      	ldr	r1, [r5, #0]
 8011712:	061f      	lsls	r7, r3, #24
 8011714:	f851 6b04 	ldr.w	r6, [r1], #4
 8011718:	d402      	bmi.n	8011720 <_printf_i+0x18c>
 801171a:	065f      	lsls	r7, r3, #25
 801171c:	bf48      	it	mi
 801171e:	b2b6      	uxthmi	r6, r6
 8011720:	07df      	lsls	r7, r3, #31
 8011722:	bf48      	it	mi
 8011724:	f043 0320 	orrmi.w	r3, r3, #32
 8011728:	6029      	str	r1, [r5, #0]
 801172a:	bf48      	it	mi
 801172c:	6023      	strmi	r3, [r4, #0]
 801172e:	b91e      	cbnz	r6, 8011738 <_printf_i+0x1a4>
 8011730:	6823      	ldr	r3, [r4, #0]
 8011732:	f023 0320 	bic.w	r3, r3, #32
 8011736:	6023      	str	r3, [r4, #0]
 8011738:	2310      	movs	r3, #16
 801173a:	e7a7      	b.n	801168c <_printf_i+0xf8>
 801173c:	4824      	ldr	r0, [pc, #144]	; (80117d0 <_printf_i+0x23c>)
 801173e:	e7e4      	b.n	801170a <_printf_i+0x176>
 8011740:	4615      	mov	r5, r2
 8011742:	e7bd      	b.n	80116c0 <_printf_i+0x12c>
 8011744:	682b      	ldr	r3, [r5, #0]
 8011746:	6826      	ldr	r6, [r4, #0]
 8011748:	6961      	ldr	r1, [r4, #20]
 801174a:	1d18      	adds	r0, r3, #4
 801174c:	6028      	str	r0, [r5, #0]
 801174e:	0635      	lsls	r5, r6, #24
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	d501      	bpl.n	8011758 <_printf_i+0x1c4>
 8011754:	6019      	str	r1, [r3, #0]
 8011756:	e002      	b.n	801175e <_printf_i+0x1ca>
 8011758:	0670      	lsls	r0, r6, #25
 801175a:	d5fb      	bpl.n	8011754 <_printf_i+0x1c0>
 801175c:	8019      	strh	r1, [r3, #0]
 801175e:	2300      	movs	r3, #0
 8011760:	6123      	str	r3, [r4, #16]
 8011762:	4615      	mov	r5, r2
 8011764:	e7bc      	b.n	80116e0 <_printf_i+0x14c>
 8011766:	682b      	ldr	r3, [r5, #0]
 8011768:	1d1a      	adds	r2, r3, #4
 801176a:	602a      	str	r2, [r5, #0]
 801176c:	681d      	ldr	r5, [r3, #0]
 801176e:	6862      	ldr	r2, [r4, #4]
 8011770:	2100      	movs	r1, #0
 8011772:	4628      	mov	r0, r5
 8011774:	f7ee fd64 	bl	8000240 <memchr>
 8011778:	b108      	cbz	r0, 801177e <_printf_i+0x1ea>
 801177a:	1b40      	subs	r0, r0, r5
 801177c:	6060      	str	r0, [r4, #4]
 801177e:	6863      	ldr	r3, [r4, #4]
 8011780:	6123      	str	r3, [r4, #16]
 8011782:	2300      	movs	r3, #0
 8011784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011788:	e7aa      	b.n	80116e0 <_printf_i+0x14c>
 801178a:	6923      	ldr	r3, [r4, #16]
 801178c:	462a      	mov	r2, r5
 801178e:	4649      	mov	r1, r9
 8011790:	4640      	mov	r0, r8
 8011792:	47d0      	blx	sl
 8011794:	3001      	adds	r0, #1
 8011796:	d0ad      	beq.n	80116f4 <_printf_i+0x160>
 8011798:	6823      	ldr	r3, [r4, #0]
 801179a:	079b      	lsls	r3, r3, #30
 801179c:	d413      	bmi.n	80117c6 <_printf_i+0x232>
 801179e:	68e0      	ldr	r0, [r4, #12]
 80117a0:	9b03      	ldr	r3, [sp, #12]
 80117a2:	4298      	cmp	r0, r3
 80117a4:	bfb8      	it	lt
 80117a6:	4618      	movlt	r0, r3
 80117a8:	e7a6      	b.n	80116f8 <_printf_i+0x164>
 80117aa:	2301      	movs	r3, #1
 80117ac:	4632      	mov	r2, r6
 80117ae:	4649      	mov	r1, r9
 80117b0:	4640      	mov	r0, r8
 80117b2:	47d0      	blx	sl
 80117b4:	3001      	adds	r0, #1
 80117b6:	d09d      	beq.n	80116f4 <_printf_i+0x160>
 80117b8:	3501      	adds	r5, #1
 80117ba:	68e3      	ldr	r3, [r4, #12]
 80117bc:	9903      	ldr	r1, [sp, #12]
 80117be:	1a5b      	subs	r3, r3, r1
 80117c0:	42ab      	cmp	r3, r5
 80117c2:	dcf2      	bgt.n	80117aa <_printf_i+0x216>
 80117c4:	e7eb      	b.n	801179e <_printf_i+0x20a>
 80117c6:	2500      	movs	r5, #0
 80117c8:	f104 0619 	add.w	r6, r4, #25
 80117cc:	e7f5      	b.n	80117ba <_printf_i+0x226>
 80117ce:	bf00      	nop
 80117d0:	080127ad 	.word	0x080127ad
 80117d4:	080127be 	.word	0x080127be

080117d8 <__sflush_r>:
 80117d8:	898a      	ldrh	r2, [r1, #12]
 80117da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117de:	4605      	mov	r5, r0
 80117e0:	0710      	lsls	r0, r2, #28
 80117e2:	460c      	mov	r4, r1
 80117e4:	d458      	bmi.n	8011898 <__sflush_r+0xc0>
 80117e6:	684b      	ldr	r3, [r1, #4]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	dc05      	bgt.n	80117f8 <__sflush_r+0x20>
 80117ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	dc02      	bgt.n	80117f8 <__sflush_r+0x20>
 80117f2:	2000      	movs	r0, #0
 80117f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80117fa:	2e00      	cmp	r6, #0
 80117fc:	d0f9      	beq.n	80117f2 <__sflush_r+0x1a>
 80117fe:	2300      	movs	r3, #0
 8011800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011804:	682f      	ldr	r7, [r5, #0]
 8011806:	6a21      	ldr	r1, [r4, #32]
 8011808:	602b      	str	r3, [r5, #0]
 801180a:	d032      	beq.n	8011872 <__sflush_r+0x9a>
 801180c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801180e:	89a3      	ldrh	r3, [r4, #12]
 8011810:	075a      	lsls	r2, r3, #29
 8011812:	d505      	bpl.n	8011820 <__sflush_r+0x48>
 8011814:	6863      	ldr	r3, [r4, #4]
 8011816:	1ac0      	subs	r0, r0, r3
 8011818:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801181a:	b10b      	cbz	r3, 8011820 <__sflush_r+0x48>
 801181c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801181e:	1ac0      	subs	r0, r0, r3
 8011820:	2300      	movs	r3, #0
 8011822:	4602      	mov	r2, r0
 8011824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011826:	6a21      	ldr	r1, [r4, #32]
 8011828:	4628      	mov	r0, r5
 801182a:	47b0      	blx	r6
 801182c:	1c43      	adds	r3, r0, #1
 801182e:	89a3      	ldrh	r3, [r4, #12]
 8011830:	d106      	bne.n	8011840 <__sflush_r+0x68>
 8011832:	6829      	ldr	r1, [r5, #0]
 8011834:	291d      	cmp	r1, #29
 8011836:	d82b      	bhi.n	8011890 <__sflush_r+0xb8>
 8011838:	4a29      	ldr	r2, [pc, #164]	; (80118e0 <__sflush_r+0x108>)
 801183a:	410a      	asrs	r2, r1
 801183c:	07d6      	lsls	r6, r2, #31
 801183e:	d427      	bmi.n	8011890 <__sflush_r+0xb8>
 8011840:	2200      	movs	r2, #0
 8011842:	6062      	str	r2, [r4, #4]
 8011844:	04d9      	lsls	r1, r3, #19
 8011846:	6922      	ldr	r2, [r4, #16]
 8011848:	6022      	str	r2, [r4, #0]
 801184a:	d504      	bpl.n	8011856 <__sflush_r+0x7e>
 801184c:	1c42      	adds	r2, r0, #1
 801184e:	d101      	bne.n	8011854 <__sflush_r+0x7c>
 8011850:	682b      	ldr	r3, [r5, #0]
 8011852:	b903      	cbnz	r3, 8011856 <__sflush_r+0x7e>
 8011854:	6560      	str	r0, [r4, #84]	; 0x54
 8011856:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011858:	602f      	str	r7, [r5, #0]
 801185a:	2900      	cmp	r1, #0
 801185c:	d0c9      	beq.n	80117f2 <__sflush_r+0x1a>
 801185e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011862:	4299      	cmp	r1, r3
 8011864:	d002      	beq.n	801186c <__sflush_r+0x94>
 8011866:	4628      	mov	r0, r5
 8011868:	f7ff fb3e 	bl	8010ee8 <_free_r>
 801186c:	2000      	movs	r0, #0
 801186e:	6360      	str	r0, [r4, #52]	; 0x34
 8011870:	e7c0      	b.n	80117f4 <__sflush_r+0x1c>
 8011872:	2301      	movs	r3, #1
 8011874:	4628      	mov	r0, r5
 8011876:	47b0      	blx	r6
 8011878:	1c41      	adds	r1, r0, #1
 801187a:	d1c8      	bne.n	801180e <__sflush_r+0x36>
 801187c:	682b      	ldr	r3, [r5, #0]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d0c5      	beq.n	801180e <__sflush_r+0x36>
 8011882:	2b1d      	cmp	r3, #29
 8011884:	d001      	beq.n	801188a <__sflush_r+0xb2>
 8011886:	2b16      	cmp	r3, #22
 8011888:	d101      	bne.n	801188e <__sflush_r+0xb6>
 801188a:	602f      	str	r7, [r5, #0]
 801188c:	e7b1      	b.n	80117f2 <__sflush_r+0x1a>
 801188e:	89a3      	ldrh	r3, [r4, #12]
 8011890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011894:	81a3      	strh	r3, [r4, #12]
 8011896:	e7ad      	b.n	80117f4 <__sflush_r+0x1c>
 8011898:	690f      	ldr	r7, [r1, #16]
 801189a:	2f00      	cmp	r7, #0
 801189c:	d0a9      	beq.n	80117f2 <__sflush_r+0x1a>
 801189e:	0793      	lsls	r3, r2, #30
 80118a0:	680e      	ldr	r6, [r1, #0]
 80118a2:	bf08      	it	eq
 80118a4:	694b      	ldreq	r3, [r1, #20]
 80118a6:	600f      	str	r7, [r1, #0]
 80118a8:	bf18      	it	ne
 80118aa:	2300      	movne	r3, #0
 80118ac:	eba6 0807 	sub.w	r8, r6, r7
 80118b0:	608b      	str	r3, [r1, #8]
 80118b2:	f1b8 0f00 	cmp.w	r8, #0
 80118b6:	dd9c      	ble.n	80117f2 <__sflush_r+0x1a>
 80118b8:	6a21      	ldr	r1, [r4, #32]
 80118ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118bc:	4643      	mov	r3, r8
 80118be:	463a      	mov	r2, r7
 80118c0:	4628      	mov	r0, r5
 80118c2:	47b0      	blx	r6
 80118c4:	2800      	cmp	r0, #0
 80118c6:	dc06      	bgt.n	80118d6 <__sflush_r+0xfe>
 80118c8:	89a3      	ldrh	r3, [r4, #12]
 80118ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118ce:	81a3      	strh	r3, [r4, #12]
 80118d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118d4:	e78e      	b.n	80117f4 <__sflush_r+0x1c>
 80118d6:	4407      	add	r7, r0
 80118d8:	eba8 0800 	sub.w	r8, r8, r0
 80118dc:	e7e9      	b.n	80118b2 <__sflush_r+0xda>
 80118de:	bf00      	nop
 80118e0:	dfbffffe 	.word	0xdfbffffe

080118e4 <_fflush_r>:
 80118e4:	b538      	push	{r3, r4, r5, lr}
 80118e6:	690b      	ldr	r3, [r1, #16]
 80118e8:	4605      	mov	r5, r0
 80118ea:	460c      	mov	r4, r1
 80118ec:	b913      	cbnz	r3, 80118f4 <_fflush_r+0x10>
 80118ee:	2500      	movs	r5, #0
 80118f0:	4628      	mov	r0, r5
 80118f2:	bd38      	pop	{r3, r4, r5, pc}
 80118f4:	b118      	cbz	r0, 80118fe <_fflush_r+0x1a>
 80118f6:	6a03      	ldr	r3, [r0, #32]
 80118f8:	b90b      	cbnz	r3, 80118fe <_fflush_r+0x1a>
 80118fa:	f7ff f9fb 	bl	8010cf4 <__sinit>
 80118fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d0f3      	beq.n	80118ee <_fflush_r+0xa>
 8011906:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011908:	07d0      	lsls	r0, r2, #31
 801190a:	d404      	bmi.n	8011916 <_fflush_r+0x32>
 801190c:	0599      	lsls	r1, r3, #22
 801190e:	d402      	bmi.n	8011916 <_fflush_r+0x32>
 8011910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011912:	f7ff fae6 	bl	8010ee2 <__retarget_lock_acquire_recursive>
 8011916:	4628      	mov	r0, r5
 8011918:	4621      	mov	r1, r4
 801191a:	f7ff ff5d 	bl	80117d8 <__sflush_r>
 801191e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011920:	07da      	lsls	r2, r3, #31
 8011922:	4605      	mov	r5, r0
 8011924:	d4e4      	bmi.n	80118f0 <_fflush_r+0xc>
 8011926:	89a3      	ldrh	r3, [r4, #12]
 8011928:	059b      	lsls	r3, r3, #22
 801192a:	d4e1      	bmi.n	80118f0 <_fflush_r+0xc>
 801192c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801192e:	f7ff fad9 	bl	8010ee4 <__retarget_lock_release_recursive>
 8011932:	e7dd      	b.n	80118f0 <_fflush_r+0xc>

08011934 <__sread>:
 8011934:	b510      	push	{r4, lr}
 8011936:	460c      	mov	r4, r1
 8011938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801193c:	f000 f9c2 	bl	8011cc4 <_read_r>
 8011940:	2800      	cmp	r0, #0
 8011942:	bfab      	itete	ge
 8011944:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011946:	89a3      	ldrhlt	r3, [r4, #12]
 8011948:	181b      	addge	r3, r3, r0
 801194a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801194e:	bfac      	ite	ge
 8011950:	6563      	strge	r3, [r4, #84]	; 0x54
 8011952:	81a3      	strhlt	r3, [r4, #12]
 8011954:	bd10      	pop	{r4, pc}

08011956 <__swrite>:
 8011956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801195a:	461f      	mov	r7, r3
 801195c:	898b      	ldrh	r3, [r1, #12]
 801195e:	05db      	lsls	r3, r3, #23
 8011960:	4605      	mov	r5, r0
 8011962:	460c      	mov	r4, r1
 8011964:	4616      	mov	r6, r2
 8011966:	d505      	bpl.n	8011974 <__swrite+0x1e>
 8011968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801196c:	2302      	movs	r3, #2
 801196e:	2200      	movs	r2, #0
 8011970:	f000 f996 	bl	8011ca0 <_lseek_r>
 8011974:	89a3      	ldrh	r3, [r4, #12]
 8011976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801197a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801197e:	81a3      	strh	r3, [r4, #12]
 8011980:	4632      	mov	r2, r6
 8011982:	463b      	mov	r3, r7
 8011984:	4628      	mov	r0, r5
 8011986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801198a:	f000 b9ad 	b.w	8011ce8 <_write_r>

0801198e <__sseek>:
 801198e:	b510      	push	{r4, lr}
 8011990:	460c      	mov	r4, r1
 8011992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011996:	f000 f983 	bl	8011ca0 <_lseek_r>
 801199a:	1c43      	adds	r3, r0, #1
 801199c:	89a3      	ldrh	r3, [r4, #12]
 801199e:	bf15      	itete	ne
 80119a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80119a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80119a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80119aa:	81a3      	strheq	r3, [r4, #12]
 80119ac:	bf18      	it	ne
 80119ae:	81a3      	strhne	r3, [r4, #12]
 80119b0:	bd10      	pop	{r4, pc}

080119b2 <__sclose>:
 80119b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119b6:	f000 b941 	b.w	8011c3c <_close_r>

080119ba <_realloc_r>:
 80119ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119be:	4680      	mov	r8, r0
 80119c0:	4614      	mov	r4, r2
 80119c2:	460e      	mov	r6, r1
 80119c4:	b921      	cbnz	r1, 80119d0 <_realloc_r+0x16>
 80119c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119ca:	4611      	mov	r1, r2
 80119cc:	f7ff b846 	b.w	8010a5c <_malloc_r>
 80119d0:	b92a      	cbnz	r2, 80119de <_realloc_r+0x24>
 80119d2:	f7ff fa89 	bl	8010ee8 <_free_r>
 80119d6:	4625      	mov	r5, r4
 80119d8:	4628      	mov	r0, r5
 80119da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119de:	f000 f9a3 	bl	8011d28 <_malloc_usable_size_r>
 80119e2:	4284      	cmp	r4, r0
 80119e4:	4607      	mov	r7, r0
 80119e6:	d802      	bhi.n	80119ee <_realloc_r+0x34>
 80119e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80119ec:	d812      	bhi.n	8011a14 <_realloc_r+0x5a>
 80119ee:	4621      	mov	r1, r4
 80119f0:	4640      	mov	r0, r8
 80119f2:	f7ff f833 	bl	8010a5c <_malloc_r>
 80119f6:	4605      	mov	r5, r0
 80119f8:	2800      	cmp	r0, #0
 80119fa:	d0ed      	beq.n	80119d8 <_realloc_r+0x1e>
 80119fc:	42bc      	cmp	r4, r7
 80119fe:	4622      	mov	r2, r4
 8011a00:	4631      	mov	r1, r6
 8011a02:	bf28      	it	cs
 8011a04:	463a      	movcs	r2, r7
 8011a06:	f000 f981 	bl	8011d0c <memcpy>
 8011a0a:	4631      	mov	r1, r6
 8011a0c:	4640      	mov	r0, r8
 8011a0e:	f7ff fa6b 	bl	8010ee8 <_free_r>
 8011a12:	e7e1      	b.n	80119d8 <_realloc_r+0x1e>
 8011a14:	4635      	mov	r5, r6
 8011a16:	e7df      	b.n	80119d8 <_realloc_r+0x1e>

08011a18 <__swbuf_r>:
 8011a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a1a:	460e      	mov	r6, r1
 8011a1c:	4614      	mov	r4, r2
 8011a1e:	4605      	mov	r5, r0
 8011a20:	b118      	cbz	r0, 8011a2a <__swbuf_r+0x12>
 8011a22:	6a03      	ldr	r3, [r0, #32]
 8011a24:	b90b      	cbnz	r3, 8011a2a <__swbuf_r+0x12>
 8011a26:	f7ff f965 	bl	8010cf4 <__sinit>
 8011a2a:	69a3      	ldr	r3, [r4, #24]
 8011a2c:	60a3      	str	r3, [r4, #8]
 8011a2e:	89a3      	ldrh	r3, [r4, #12]
 8011a30:	071a      	lsls	r2, r3, #28
 8011a32:	d525      	bpl.n	8011a80 <__swbuf_r+0x68>
 8011a34:	6923      	ldr	r3, [r4, #16]
 8011a36:	b31b      	cbz	r3, 8011a80 <__swbuf_r+0x68>
 8011a38:	6823      	ldr	r3, [r4, #0]
 8011a3a:	6922      	ldr	r2, [r4, #16]
 8011a3c:	1a98      	subs	r0, r3, r2
 8011a3e:	6963      	ldr	r3, [r4, #20]
 8011a40:	b2f6      	uxtb	r6, r6
 8011a42:	4283      	cmp	r3, r0
 8011a44:	4637      	mov	r7, r6
 8011a46:	dc04      	bgt.n	8011a52 <__swbuf_r+0x3a>
 8011a48:	4621      	mov	r1, r4
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	f7ff ff4a 	bl	80118e4 <_fflush_r>
 8011a50:	b9e0      	cbnz	r0, 8011a8c <__swbuf_r+0x74>
 8011a52:	68a3      	ldr	r3, [r4, #8]
 8011a54:	3b01      	subs	r3, #1
 8011a56:	60a3      	str	r3, [r4, #8]
 8011a58:	6823      	ldr	r3, [r4, #0]
 8011a5a:	1c5a      	adds	r2, r3, #1
 8011a5c:	6022      	str	r2, [r4, #0]
 8011a5e:	701e      	strb	r6, [r3, #0]
 8011a60:	6962      	ldr	r2, [r4, #20]
 8011a62:	1c43      	adds	r3, r0, #1
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d004      	beq.n	8011a72 <__swbuf_r+0x5a>
 8011a68:	89a3      	ldrh	r3, [r4, #12]
 8011a6a:	07db      	lsls	r3, r3, #31
 8011a6c:	d506      	bpl.n	8011a7c <__swbuf_r+0x64>
 8011a6e:	2e0a      	cmp	r6, #10
 8011a70:	d104      	bne.n	8011a7c <__swbuf_r+0x64>
 8011a72:	4621      	mov	r1, r4
 8011a74:	4628      	mov	r0, r5
 8011a76:	f7ff ff35 	bl	80118e4 <_fflush_r>
 8011a7a:	b938      	cbnz	r0, 8011a8c <__swbuf_r+0x74>
 8011a7c:	4638      	mov	r0, r7
 8011a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a80:	4621      	mov	r1, r4
 8011a82:	4628      	mov	r0, r5
 8011a84:	f000 f806 	bl	8011a94 <__swsetup_r>
 8011a88:	2800      	cmp	r0, #0
 8011a8a:	d0d5      	beq.n	8011a38 <__swbuf_r+0x20>
 8011a8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011a90:	e7f4      	b.n	8011a7c <__swbuf_r+0x64>
	...

08011a94 <__swsetup_r>:
 8011a94:	b538      	push	{r3, r4, r5, lr}
 8011a96:	4b2a      	ldr	r3, [pc, #168]	; (8011b40 <__swsetup_r+0xac>)
 8011a98:	4605      	mov	r5, r0
 8011a9a:	6818      	ldr	r0, [r3, #0]
 8011a9c:	460c      	mov	r4, r1
 8011a9e:	b118      	cbz	r0, 8011aa8 <__swsetup_r+0x14>
 8011aa0:	6a03      	ldr	r3, [r0, #32]
 8011aa2:	b90b      	cbnz	r3, 8011aa8 <__swsetup_r+0x14>
 8011aa4:	f7ff f926 	bl	8010cf4 <__sinit>
 8011aa8:	89a3      	ldrh	r3, [r4, #12]
 8011aaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011aae:	0718      	lsls	r0, r3, #28
 8011ab0:	d422      	bmi.n	8011af8 <__swsetup_r+0x64>
 8011ab2:	06d9      	lsls	r1, r3, #27
 8011ab4:	d407      	bmi.n	8011ac6 <__swsetup_r+0x32>
 8011ab6:	2309      	movs	r3, #9
 8011ab8:	602b      	str	r3, [r5, #0]
 8011aba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011abe:	81a3      	strh	r3, [r4, #12]
 8011ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ac4:	e034      	b.n	8011b30 <__swsetup_r+0x9c>
 8011ac6:	0758      	lsls	r0, r3, #29
 8011ac8:	d512      	bpl.n	8011af0 <__swsetup_r+0x5c>
 8011aca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011acc:	b141      	cbz	r1, 8011ae0 <__swsetup_r+0x4c>
 8011ace:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ad2:	4299      	cmp	r1, r3
 8011ad4:	d002      	beq.n	8011adc <__swsetup_r+0x48>
 8011ad6:	4628      	mov	r0, r5
 8011ad8:	f7ff fa06 	bl	8010ee8 <_free_r>
 8011adc:	2300      	movs	r3, #0
 8011ade:	6363      	str	r3, [r4, #52]	; 0x34
 8011ae0:	89a3      	ldrh	r3, [r4, #12]
 8011ae2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011ae6:	81a3      	strh	r3, [r4, #12]
 8011ae8:	2300      	movs	r3, #0
 8011aea:	6063      	str	r3, [r4, #4]
 8011aec:	6923      	ldr	r3, [r4, #16]
 8011aee:	6023      	str	r3, [r4, #0]
 8011af0:	89a3      	ldrh	r3, [r4, #12]
 8011af2:	f043 0308 	orr.w	r3, r3, #8
 8011af6:	81a3      	strh	r3, [r4, #12]
 8011af8:	6923      	ldr	r3, [r4, #16]
 8011afa:	b94b      	cbnz	r3, 8011b10 <__swsetup_r+0x7c>
 8011afc:	89a3      	ldrh	r3, [r4, #12]
 8011afe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b06:	d003      	beq.n	8011b10 <__swsetup_r+0x7c>
 8011b08:	4621      	mov	r1, r4
 8011b0a:	4628      	mov	r0, r5
 8011b0c:	f000 f840 	bl	8011b90 <__smakebuf_r>
 8011b10:	89a0      	ldrh	r0, [r4, #12]
 8011b12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b16:	f010 0301 	ands.w	r3, r0, #1
 8011b1a:	d00a      	beq.n	8011b32 <__swsetup_r+0x9e>
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	60a3      	str	r3, [r4, #8]
 8011b20:	6963      	ldr	r3, [r4, #20]
 8011b22:	425b      	negs	r3, r3
 8011b24:	61a3      	str	r3, [r4, #24]
 8011b26:	6923      	ldr	r3, [r4, #16]
 8011b28:	b943      	cbnz	r3, 8011b3c <__swsetup_r+0xa8>
 8011b2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011b2e:	d1c4      	bne.n	8011aba <__swsetup_r+0x26>
 8011b30:	bd38      	pop	{r3, r4, r5, pc}
 8011b32:	0781      	lsls	r1, r0, #30
 8011b34:	bf58      	it	pl
 8011b36:	6963      	ldrpl	r3, [r4, #20]
 8011b38:	60a3      	str	r3, [r4, #8]
 8011b3a:	e7f4      	b.n	8011b26 <__swsetup_r+0x92>
 8011b3c:	2000      	movs	r0, #0
 8011b3e:	e7f7      	b.n	8011b30 <__swsetup_r+0x9c>
 8011b40:	20000168 	.word	0x20000168

08011b44 <__swhatbuf_r>:
 8011b44:	b570      	push	{r4, r5, r6, lr}
 8011b46:	460c      	mov	r4, r1
 8011b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b4c:	2900      	cmp	r1, #0
 8011b4e:	b096      	sub	sp, #88	; 0x58
 8011b50:	4615      	mov	r5, r2
 8011b52:	461e      	mov	r6, r3
 8011b54:	da0d      	bge.n	8011b72 <__swhatbuf_r+0x2e>
 8011b56:	89a3      	ldrh	r3, [r4, #12]
 8011b58:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011b5c:	f04f 0100 	mov.w	r1, #0
 8011b60:	bf0c      	ite	eq
 8011b62:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011b66:	2340      	movne	r3, #64	; 0x40
 8011b68:	2000      	movs	r0, #0
 8011b6a:	6031      	str	r1, [r6, #0]
 8011b6c:	602b      	str	r3, [r5, #0]
 8011b6e:	b016      	add	sp, #88	; 0x58
 8011b70:	bd70      	pop	{r4, r5, r6, pc}
 8011b72:	466a      	mov	r2, sp
 8011b74:	f000 f872 	bl	8011c5c <_fstat_r>
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	dbec      	blt.n	8011b56 <__swhatbuf_r+0x12>
 8011b7c:	9901      	ldr	r1, [sp, #4]
 8011b7e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011b82:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011b86:	4259      	negs	r1, r3
 8011b88:	4159      	adcs	r1, r3
 8011b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b8e:	e7eb      	b.n	8011b68 <__swhatbuf_r+0x24>

08011b90 <__smakebuf_r>:
 8011b90:	898b      	ldrh	r3, [r1, #12]
 8011b92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b94:	079d      	lsls	r5, r3, #30
 8011b96:	4606      	mov	r6, r0
 8011b98:	460c      	mov	r4, r1
 8011b9a:	d507      	bpl.n	8011bac <__smakebuf_r+0x1c>
 8011b9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011ba0:	6023      	str	r3, [r4, #0]
 8011ba2:	6123      	str	r3, [r4, #16]
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	6163      	str	r3, [r4, #20]
 8011ba8:	b002      	add	sp, #8
 8011baa:	bd70      	pop	{r4, r5, r6, pc}
 8011bac:	ab01      	add	r3, sp, #4
 8011bae:	466a      	mov	r2, sp
 8011bb0:	f7ff ffc8 	bl	8011b44 <__swhatbuf_r>
 8011bb4:	9900      	ldr	r1, [sp, #0]
 8011bb6:	4605      	mov	r5, r0
 8011bb8:	4630      	mov	r0, r6
 8011bba:	f7fe ff4f 	bl	8010a5c <_malloc_r>
 8011bbe:	b948      	cbnz	r0, 8011bd4 <__smakebuf_r+0x44>
 8011bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bc4:	059a      	lsls	r2, r3, #22
 8011bc6:	d4ef      	bmi.n	8011ba8 <__smakebuf_r+0x18>
 8011bc8:	f023 0303 	bic.w	r3, r3, #3
 8011bcc:	f043 0302 	orr.w	r3, r3, #2
 8011bd0:	81a3      	strh	r3, [r4, #12]
 8011bd2:	e7e3      	b.n	8011b9c <__smakebuf_r+0xc>
 8011bd4:	89a3      	ldrh	r3, [r4, #12]
 8011bd6:	6020      	str	r0, [r4, #0]
 8011bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bdc:	81a3      	strh	r3, [r4, #12]
 8011bde:	9b00      	ldr	r3, [sp, #0]
 8011be0:	6163      	str	r3, [r4, #20]
 8011be2:	9b01      	ldr	r3, [sp, #4]
 8011be4:	6120      	str	r0, [r4, #16]
 8011be6:	b15b      	cbz	r3, 8011c00 <__smakebuf_r+0x70>
 8011be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bec:	4630      	mov	r0, r6
 8011bee:	f000 f847 	bl	8011c80 <_isatty_r>
 8011bf2:	b128      	cbz	r0, 8011c00 <__smakebuf_r+0x70>
 8011bf4:	89a3      	ldrh	r3, [r4, #12]
 8011bf6:	f023 0303 	bic.w	r3, r3, #3
 8011bfa:	f043 0301 	orr.w	r3, r3, #1
 8011bfe:	81a3      	strh	r3, [r4, #12]
 8011c00:	89a3      	ldrh	r3, [r4, #12]
 8011c02:	431d      	orrs	r5, r3
 8011c04:	81a5      	strh	r5, [r4, #12]
 8011c06:	e7cf      	b.n	8011ba8 <__smakebuf_r+0x18>

08011c08 <memmove>:
 8011c08:	4288      	cmp	r0, r1
 8011c0a:	b510      	push	{r4, lr}
 8011c0c:	eb01 0402 	add.w	r4, r1, r2
 8011c10:	d902      	bls.n	8011c18 <memmove+0x10>
 8011c12:	4284      	cmp	r4, r0
 8011c14:	4623      	mov	r3, r4
 8011c16:	d807      	bhi.n	8011c28 <memmove+0x20>
 8011c18:	1e43      	subs	r3, r0, #1
 8011c1a:	42a1      	cmp	r1, r4
 8011c1c:	d008      	beq.n	8011c30 <memmove+0x28>
 8011c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c26:	e7f8      	b.n	8011c1a <memmove+0x12>
 8011c28:	4402      	add	r2, r0
 8011c2a:	4601      	mov	r1, r0
 8011c2c:	428a      	cmp	r2, r1
 8011c2e:	d100      	bne.n	8011c32 <memmove+0x2a>
 8011c30:	bd10      	pop	{r4, pc}
 8011c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c3a:	e7f7      	b.n	8011c2c <memmove+0x24>

08011c3c <_close_r>:
 8011c3c:	b538      	push	{r3, r4, r5, lr}
 8011c3e:	4d06      	ldr	r5, [pc, #24]	; (8011c58 <_close_r+0x1c>)
 8011c40:	2300      	movs	r3, #0
 8011c42:	4604      	mov	r4, r0
 8011c44:	4608      	mov	r0, r1
 8011c46:	602b      	str	r3, [r5, #0]
 8011c48:	f7ef fed1 	bl	80019ee <_close>
 8011c4c:	1c43      	adds	r3, r0, #1
 8011c4e:	d102      	bne.n	8011c56 <_close_r+0x1a>
 8011c50:	682b      	ldr	r3, [r5, #0]
 8011c52:	b103      	cbz	r3, 8011c56 <_close_r+0x1a>
 8011c54:	6023      	str	r3, [r4, #0]
 8011c56:	bd38      	pop	{r3, r4, r5, pc}
 8011c58:	2004c70c 	.word	0x2004c70c

08011c5c <_fstat_r>:
 8011c5c:	b538      	push	{r3, r4, r5, lr}
 8011c5e:	4d07      	ldr	r5, [pc, #28]	; (8011c7c <_fstat_r+0x20>)
 8011c60:	2300      	movs	r3, #0
 8011c62:	4604      	mov	r4, r0
 8011c64:	4608      	mov	r0, r1
 8011c66:	4611      	mov	r1, r2
 8011c68:	602b      	str	r3, [r5, #0]
 8011c6a:	f7ef fecc 	bl	8001a06 <_fstat>
 8011c6e:	1c43      	adds	r3, r0, #1
 8011c70:	d102      	bne.n	8011c78 <_fstat_r+0x1c>
 8011c72:	682b      	ldr	r3, [r5, #0]
 8011c74:	b103      	cbz	r3, 8011c78 <_fstat_r+0x1c>
 8011c76:	6023      	str	r3, [r4, #0]
 8011c78:	bd38      	pop	{r3, r4, r5, pc}
 8011c7a:	bf00      	nop
 8011c7c:	2004c70c 	.word	0x2004c70c

08011c80 <_isatty_r>:
 8011c80:	b538      	push	{r3, r4, r5, lr}
 8011c82:	4d06      	ldr	r5, [pc, #24]	; (8011c9c <_isatty_r+0x1c>)
 8011c84:	2300      	movs	r3, #0
 8011c86:	4604      	mov	r4, r0
 8011c88:	4608      	mov	r0, r1
 8011c8a:	602b      	str	r3, [r5, #0]
 8011c8c:	f7ef fecb 	bl	8001a26 <_isatty>
 8011c90:	1c43      	adds	r3, r0, #1
 8011c92:	d102      	bne.n	8011c9a <_isatty_r+0x1a>
 8011c94:	682b      	ldr	r3, [r5, #0]
 8011c96:	b103      	cbz	r3, 8011c9a <_isatty_r+0x1a>
 8011c98:	6023      	str	r3, [r4, #0]
 8011c9a:	bd38      	pop	{r3, r4, r5, pc}
 8011c9c:	2004c70c 	.word	0x2004c70c

08011ca0 <_lseek_r>:
 8011ca0:	b538      	push	{r3, r4, r5, lr}
 8011ca2:	4d07      	ldr	r5, [pc, #28]	; (8011cc0 <_lseek_r+0x20>)
 8011ca4:	4604      	mov	r4, r0
 8011ca6:	4608      	mov	r0, r1
 8011ca8:	4611      	mov	r1, r2
 8011caa:	2200      	movs	r2, #0
 8011cac:	602a      	str	r2, [r5, #0]
 8011cae:	461a      	mov	r2, r3
 8011cb0:	f7ef fec4 	bl	8001a3c <_lseek>
 8011cb4:	1c43      	adds	r3, r0, #1
 8011cb6:	d102      	bne.n	8011cbe <_lseek_r+0x1e>
 8011cb8:	682b      	ldr	r3, [r5, #0]
 8011cba:	b103      	cbz	r3, 8011cbe <_lseek_r+0x1e>
 8011cbc:	6023      	str	r3, [r4, #0]
 8011cbe:	bd38      	pop	{r3, r4, r5, pc}
 8011cc0:	2004c70c 	.word	0x2004c70c

08011cc4 <_read_r>:
 8011cc4:	b538      	push	{r3, r4, r5, lr}
 8011cc6:	4d07      	ldr	r5, [pc, #28]	; (8011ce4 <_read_r+0x20>)
 8011cc8:	4604      	mov	r4, r0
 8011cca:	4608      	mov	r0, r1
 8011ccc:	4611      	mov	r1, r2
 8011cce:	2200      	movs	r2, #0
 8011cd0:	602a      	str	r2, [r5, #0]
 8011cd2:	461a      	mov	r2, r3
 8011cd4:	f7ef fe52 	bl	800197c <_read>
 8011cd8:	1c43      	adds	r3, r0, #1
 8011cda:	d102      	bne.n	8011ce2 <_read_r+0x1e>
 8011cdc:	682b      	ldr	r3, [r5, #0]
 8011cde:	b103      	cbz	r3, 8011ce2 <_read_r+0x1e>
 8011ce0:	6023      	str	r3, [r4, #0]
 8011ce2:	bd38      	pop	{r3, r4, r5, pc}
 8011ce4:	2004c70c 	.word	0x2004c70c

08011ce8 <_write_r>:
 8011ce8:	b538      	push	{r3, r4, r5, lr}
 8011cea:	4d07      	ldr	r5, [pc, #28]	; (8011d08 <_write_r+0x20>)
 8011cec:	4604      	mov	r4, r0
 8011cee:	4608      	mov	r0, r1
 8011cf0:	4611      	mov	r1, r2
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	602a      	str	r2, [r5, #0]
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	f7ef fe5d 	bl	80019b6 <_write>
 8011cfc:	1c43      	adds	r3, r0, #1
 8011cfe:	d102      	bne.n	8011d06 <_write_r+0x1e>
 8011d00:	682b      	ldr	r3, [r5, #0]
 8011d02:	b103      	cbz	r3, 8011d06 <_write_r+0x1e>
 8011d04:	6023      	str	r3, [r4, #0]
 8011d06:	bd38      	pop	{r3, r4, r5, pc}
 8011d08:	2004c70c 	.word	0x2004c70c

08011d0c <memcpy>:
 8011d0c:	440a      	add	r2, r1
 8011d0e:	4291      	cmp	r1, r2
 8011d10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011d14:	d100      	bne.n	8011d18 <memcpy+0xc>
 8011d16:	4770      	bx	lr
 8011d18:	b510      	push	{r4, lr}
 8011d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d22:	4291      	cmp	r1, r2
 8011d24:	d1f9      	bne.n	8011d1a <memcpy+0xe>
 8011d26:	bd10      	pop	{r4, pc}

08011d28 <_malloc_usable_size_r>:
 8011d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d2c:	1f18      	subs	r0, r3, #4
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	bfbc      	itt	lt
 8011d32:	580b      	ldrlt	r3, [r1, r0]
 8011d34:	18c0      	addlt	r0, r0, r3
 8011d36:	4770      	bx	lr

08011d38 <_init>:
 8011d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d3a:	bf00      	nop
 8011d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d3e:	bc08      	pop	{r3}
 8011d40:	469e      	mov	lr, r3
 8011d42:	4770      	bx	lr

08011d44 <_fini>:
 8011d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d46:	bf00      	nop
 8011d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d4a:	bc08      	pop	{r3}
 8011d4c:	469e      	mov	lr, r3
 8011d4e:	4770      	bx	lr
